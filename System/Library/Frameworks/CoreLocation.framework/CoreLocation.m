void sub_1906BA14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906BA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906BA2D8(uint64_t a1, char a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) == 0
    && !sub_190741C54((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a6, a7, a8))
  {
    goto LABEL_47;
  }
  if (a3)
  {
    if (sub_190741D20(a5, a8, a6, a7))
    {
      if (a3) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
LABEL_28:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    v27 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349825;
      *(double *)&buf[4] = a5;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a6;
      *(_WORD *)&buf[22] = 2049;
      double v86 = a7;
      LOWORD(v87) = 2050;
      *(double *)((char *)&v87 + 2) = a8;
      _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      *(_DWORD *)v73 = 134349825;
      *(double *)&v73[4] = a5;
      *(_WORD *)&v73[12] = 2049;
      *(double *)&v73[14] = a6;
      *(_WORD *)&v73[22] = 2049;
      double v74 = a7;
      LOWORD(v75) = 2050;
      *(double *)((char *)&v75 + 2) = a8;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "CoreLocation: %s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
    goto LABEL_48;
  }
  *(double *)buf = a8;
  v16 = (double *)buf;
  if (*(double *)(a1 + 184) < a8) {
    v16 = (double *)(a1 + 184);
  }
  v17 = (double *)(a1 + 176);
  if (*(double *)(a1 + 176) <= a8) {
    v17 = v16;
  }
  a8 = *v17;
  if (!sub_190741D20(a5, *v17, a6, a7)) {
    goto LABEL_28;
  }
LABEL_12:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  v18 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *(_DWORD *)(a1 + 112);
    int v19 = *(_DWORD *)(a1 + 116);
    double v21 = *(double *)(a1 + 320);
    int v22 = *(unsigned __int8 *)(a1 + 224);
    int v23 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)buf = 134351105;
    *(double *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = a6;
    *(_WORD *)&buf[22] = 2049;
    double v86 = a7;
    LOWORD(v87) = 2050;
    *(double *)((char *)&v87 + 2) = a8;
    WORD5(v87) = 1026;
    HIDWORD(v87) = v19;
    LOWORD(v88) = 1026;
    *(_DWORD *)((char *)&v88 + 2) = v20;
    HIWORD(v88) = 2050;
    double v89 = v21;
    LOWORD(v90) = 1026;
    *(_DWORD *)((char *)&v90 + 2) = v22;
    HIWORD(v90) = 1026;
    LODWORD(v91) = v23;
    _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,queryInProgress,%{public}d,network,%{public}d", buf, 0x4Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v48 = *(_DWORD *)(a1 + 112);
    int v47 = *(_DWORD *)(a1 + 116);
    uint64_t v49 = *(void *)(a1 + 320);
    int v50 = *(unsigned __int8 *)(a1 + 224);
    int v51 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)v73 = 134351105;
    *(double *)&v73[4] = a5;
    *(_WORD *)&v73[12] = 2049;
    *(double *)&v73[14] = a6;
    *(_WORD *)&v73[22] = 2049;
    double v74 = a7;
    LOWORD(v75) = 2050;
    *(double *)((char *)&v75 + 2) = a8;
    WORD5(v75) = 1026;
    HIDWORD(v75) = v47;
    LOWORD(v76) = 1026;
    *(_DWORD *)((char *)&v76 + 2) = v48;
    HIWORD(v76) = 2050;
    uint64_t v77 = v49;
    LOWORD(v78) = 1026;
    *(_DWORD *)((char *)&v78 + 2) = v50;
    HIWORD(v78) = 1026;
    LODWORD(v79) = v51;
    v52 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "CoreLocation: %s\n", v52);
    if (v52 != buf) {
      free(v52);
    }
  }
LABEL_17:
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 169))
  {
    BOOL v24 = *(unsigned char *)(a1 + 224) == 0;
    if (*(unsigned char *)(a1 + 224))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      v25 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using XPC", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        *(_WORD *)v73 = 0;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
    else
    {
      int v30 = *(unsigned __int8 *)(a1 + 192);
      v58[0] = a1;
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      LOWORD(v59) = 256;
      uint64_t v31 = mach_continuous_time();
      double v32 = sub_1907E1770(v31);
      v33 = (void *)MEMORY[0x192FCF260]();
      *(void *)v73 = 0;
      *(void *)&v73[8] = v73;
      *(void *)&v73[16] = 0x2020000000;
      LOBYTE(v74) = 0;
      *(unsigned char *)(a1 + 224) = 1;
      v34 = +[CLMapsXPCServiceManager sharedInstance];
      CLLocationCoordinate2D v35 = CLLocationCoordinate2DMake(a6, a7);
      unsigned int v36 = *(_DWORD *)(a1 + 152) & 0xFFFFFFFE;
      uint64_t v37 = *(unsigned __int8 *)(a1 + 216);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_190747434;
      double v86 = COERCE_DOUBLE(&unk_1E56975E0);
      double v88 = a5;
      double v89 = a8;
      double v90 = a6;
      double v91 = a7;
      *(void *)&long long v87 = v73;
      *((void *)&v87 + 1) = a1;
      char v93 = v30;
      double v92 = v32;
      -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v34, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", 0, v30 != 0, v36 == 2, a4, v37, buf, v35.latitude, v35.longitude, a8);
      _Block_object_dispose(v73, 8);
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    }
    goto LABEL_46;
  }
  if (!*(void *)(a1 + 88))
  {
LABEL_44:
    BOOL v24 = 0;
    goto LABEL_46;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    v29 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using maps API", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      *(_WORD *)v73 = 0;
      v53 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    goto LABEL_44;
  }
  uint64_t v70 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v72 = 256;
  uint64_t v40 = mach_continuous_time();
  double v41 = sub_1907E1770(v40);
  v42 = (void *)MEMORY[0x192FCF260]();
  uint64_t v64 = 0;
  v65 = &v64;
  uint64_t v66 = 0x3052000000;
  v67 = sub_190746540;
  v68 = sub_190746550;
  uint64_t v69 = 0;
  int v43 = *(unsigned __int8 *)(a1 + 216);
  if (*(unsigned char *)(a1 + 216)) {
    v65[5] = (uint64_t)dispatch_semaphore_create(0);
  }
  v58[0] = 0;
  v58[1] = v58;
  uint64_t v59 = 0x4812000000;
  v60 = sub_19074655C;
  v61 = sub_190746580;
  v62 = "";
  memset(v63, 0, sizeof(v63));
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x2020000000;
  int v57 = 0;
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 3221225472;
  v55[2] = sub_1907465AC;
  v55[3] = &unk_1E5697590;
  v55[5] = v58;
  v55[6] = a1;
  v55[4] = v56;
  *(void *)v73 = MEMORY[0x1E4F143A8];
  *(void *)&v73[8] = 3221225472;
  *(void *)&v73[16] = sub_190746E74;
  double v74 = COERCE_DOUBLE(&unk_1E56975B8);
  double v78 = a5;
  double v79 = a8;
  double v80 = a6;
  double v81 = a7;
  double v82 = v41;
  char v83 = a4;
  *(void *)&long long v75 = v56;
  *((void *)&v75 + 1) = v58;
  char v84 = v43;
  v76 = &v64;
  uint64_t v77 = a1;
  ++*(_DWORD *)(a1 + 116);
  *(unsigned char *)(a1 + 224) = 1;
  objc_msgSend(*(id *)(a1 + 88), "findRoadsNear:radius:handler:completionHandler:", v55, v73, a6, a7, a8);
  if (!v43) {
    goto LABEL_62;
  }
  intptr_t v44 = dispatch_semaphore_wait((dispatch_semaphore_t)v65[5], 0xFFFFFFFFFFFFFFFFLL);
  v45 = v65[5];
  if (v45) {
    dispatch_release(v45);
  }
  if (v44)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    v46 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      v54 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    BOOL v24 = 0;
  }
  else
  {
LABEL_62:
    BOOL v24 = 1;
  }
  _Block_object_dispose(v56, 8);
  _Block_object_dispose(v58, 8);
  *(void *)buf = v63;
  sub_1906C6BF0((void ***)buf);
  _Block_object_dispose(&v64, 8);
  if (HIBYTE(v72))
  {
    if ((_BYTE)v72) {
      pthread_mutex_unlock(v71);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v70 + 24))(v70);
    }
  }
LABEL_46:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v24)
  {
LABEL_48:
    uint64_t v38 = 0;
    goto LABEL_49;
  }
LABEL_47:
  uint64_t v38 = 1;
LABEL_49:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v38;
}

void sub_1906BB00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
}

void sub_1906BB12C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906BB238(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906BB348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906BB4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906BB518(uint64_t a1)
{
  int v2 = sub_1906BB5A4();
  uint64_t v3 = *(void *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 312);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1906C2D00;
  v5[3] = &unk_1E5696BA0;
  v5[4] = v3;
  int v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_1906BB5A4()
{
  v0 = (void *)[NSClassFromString(&cfstr_Uiapplication.isa) performSelector:sel_sharedApplication];
  if (v0) {
    return [v0 performSelector:sel_applicationState];
  }
  else {
    return 3;
  }
}

void sub_1906BB734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906BB778(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6, uint64_t a7, unsigned __int8 a8, double a9, double a10, double a11)
{
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  if (!*a5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    v46 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      LOWORD(v219) = 0;
      v169 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v169);
      if (v169 != buf) {
        free(v169);
      }
    }
    char v37 = 0;
    return v37 & 1;
  }
  sub_19074C1F8((uint64_t *)a1);
  uint64_t v22 = mach_continuous_time();
  double v23 = sub_1907E1770(v22);
  ++*(_DWORD *)(a1 + 48);
  if (!*a3 || (double v24 = v23, a10 > 1.0) || a10 < 0.0 || a11 > 1.0 || a11 < 0.0 || !*a4)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int v43 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      BOOL v44 = *a3 != 0;
      BOOL v45 = *a4 != 0;
      *(_DWORD *)buf = 134350080;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)v227 = v44;
      *(_WORD *)&v227[4] = 1026;
      *(_DWORD *)&v227[6] = v45;
      *(_WORD *)&v227[10] = 2048;
      *(double *)&v227[12] = a10;
      *(_WORD *)v228 = 2048;
      *(double *)&v228[2] = a11;
      _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,routeConstructor,constructPedestrian,invalid inputs,startRoad,%{public}d,destRoad,%{public}d,startRoadProjection,%.1lf,destinationRoadProjection,%.1lf", buf, 0x2Cu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      BOOL v166 = *a3 != 0;
      BOOL v167 = *a4 != 0;
      int v219 = 134350080;
      *(double *)v220 = a9;
      *(_WORD *)&v220[8] = 1026;
      *(_DWORD *)v221 = v166;
      *(_WORD *)&v221[4] = 1026;
      *(_DWORD *)&v221[6] = v167;
      *(_WORD *)&v221[10] = 2048;
      *(double *)&v221[12] = a10;
      *(_WORD *)v222 = 2048;
      *(double *)&v222[2] = a11;
      v168 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v168);
      if (v168 != buf) {
        free(v168);
      }
    }
    char v37 = 0;
    ++*(_DWORD *)(a1 + 52);
    return v37 & 1;
  }
  v201 = a5;
  double v202 = *(double *)&a7;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  v25 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(*a3 + 8);
    uint64_t v27 = *(void *)(*a4 + 8);
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a9;
    *(_WORD *)&buf[12] = 2050;
    *(void *)v227 = v26;
    *(_WORD *)&v227[8] = 2050;
    *(void *)&v227[10] = v27;
    _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,constructing between,start,%{public}lld,stop,%{public}lld", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v170 = *(void *)(*a3 + 8);
    uint64_t v171 = *(void *)(*a4 + 8);
    int v219 = 134349568;
    *(double *)v220 = a9;
    *(_WORD *)&v220[8] = 2050;
    *(void *)v221 = v170;
    *(_WORD *)&v221[8] = 2050;
    *(void *)&v221[10] = v171;
    v172 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v172);
    if (v172 != buf) {
      free(v172);
    }
  }
  v28 = operator new(0x68uLL);
  uint64_t v29 = (uint64_t)v28;
  v28[1] = 0;
  v28[2] = 0;
  void *v28 = &unk_1EE0051F0;
  v28[3] = 0;
  uint64_t v30 = (uint64_t)(v28 + 3);
  v28[4] = 0;
  v28[5] = 0;
  *((unsigned char *)v28 + 40) = 1;
  *((_OWORD *)v28 + 3) = 0u;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  v28[12] = 0;
  v217 = v28 + 3;
  uint64_t v218 = (uint64_t)v28;
  uint64_t v31 = *a3;
  double v32 = (std::__shared_weak_count *)a3[1];
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v33 = sub_1907EEB48((uint64_t)(v28 + 3), a2, v31, v32);
  if (v32) {
    sub_1906BFE48(v32);
  }
  if ((v33 & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int v47 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init startRouteRoad", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v219 = 134349056;
      *(double *)v220 = a9;
      v173 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v173);
      if (v173 != buf) {
        free(v173);
      }
    }
    char v37 = 0;
    ++*(_DWORD *)(a1 + 52);
    goto LABEL_68;
  }
  v34 = (char *)operator new(0x68uLL);
  *((void *)v34 + 1) = 0;
  *((void *)v34 + 2) = 0;
  *((void *)v34 + 3) = 0;
  v203 = (uint64_t *)(v34 + 24);
  *(void *)v34 = &unk_1EE0051F0;
  *((void *)v34 + 4) = 0;
  *((void *)v34 + 5) = 0;
  v34[40] = 1;
  *((_OWORD *)v34 + 3) = 0u;
  *((_OWORD *)v34 + 4) = 0u;
  *((_OWORD *)v34 + 5) = 0u;
  v198 = (std::__shared_weak_count *)v34;
  *((void *)v34 + 12) = 0;
  uint64_t v35 = *a4;
  unsigned int v36 = (std::__shared_weak_count *)a4[1];
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v37 = sub_1907EEB48((uint64_t)v203, a2, v35, v36);
  if (v36) {
    sub_1906BFE48(v36);
  }
  if ((v37 & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int v48 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init destinationRouteRoad", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v219 = 134349056;
      *(double *)v220 = a9;
      v174 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v174);
      if (v174 != buf) {
        free(v174);
      }
    }
    ++*(_DWORD *)(a1 + 52);
    goto LABEL_56;
  }
  uint64_t v38 = *a3;
  uint64_t v39 = *a4;
  if (*(void *)*a3 == *(void *)*a4 && *(void *)(v38 + 8) == *(void *)(v39 + 8))
  {
    sub_1907EFFC0((unint64_t *)a1, v30, v29);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v40 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road is same as destination road", buf, 0xCu);
    }
    int v41 = sub_1906CB57C(115, 2);
    v42 = v198;
    if (!v41) {
      goto LABEL_67;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_317;
    }
LABEL_361:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
LABEL_317:
    int v219 = 134349056;
    *(double *)v220 = a9;
    v175 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v175);
    if (v175 != buf) {
      free(v175);
    }
LABEL_56:
    v42 = v198;
LABEL_67:
    sub_1906BFE48(v42);
LABEL_68:
    sub_1906BFE48((std::__shared_weak_count *)v29);
    return v37 & 1;
  }
  uint64_t v51 = v38 + 136;
  uint64_t v50 = *(void *)(v38 + 136);
  uint64_t v49 = *(void *)(v51 + 8);
  float64x2_t v52 = 0uLL;
  float64x2_t v53 = 0uLL;
  if (v49 != v50) {
    float64x2_t v53 = *(float64x2_t *)(v49 - 16);
  }
  uint64_t v56 = v39 + 136;
  v54 = *(float64x2_t **)(v39 + 136);
  v55 = *(float64x2_t **)(v56 + 8);
  if (v55 != v54) {
    float64x2_t v52 = *v54;
  }
  int32x2_t v57 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v53, v52)));
  if (vand_s8((int8x8_t)v57, (int8x8_t)vdup_lane_s32(v57, 1)).u8[0])
  {
    sub_1907EFFC0((unint64_t *)a1, v30, v29);
    sub_1907EFFC0((unint64_t *)a1, (uint64_t)v203, (uint64_t)v198);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    v58 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road and destination road are neighbors", buf, 0xCu);
    }
    int v59 = sub_1906CB57C(115, 2);
    v42 = v198;
    if (!v59) {
      goto LABEL_67;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_317;
    }
    goto LABEL_361;
  }
  BOOL v61 = fabs(*a6) >= 0.00003;
  if (fabs(a6[1]) >= 0.00003) {
    BOOL v61 = 1;
  }
  double v62 = 0.0;
  if (v61) {
    double v63 = a11;
  }
  else {
    double v63 = 0.0;
  }
  double v200 = v63;
  if (v61) {
    double v64 = *a6;
  }
  else {
    double v64 = 0.0;
  }
  if (v61) {
    double v65 = a6[1];
  }
  else {
    double v65 = 0.0;
  }
  if (!v61 && v55 != v54)
  {
    double v64 = v54->f64[0];
    double v65 = v54->f64[1];
    double v200 = 0.0;
  }
  double v66 = 0.0;
  if (v49 != v50)
  {
    double v62 = *(double *)(v49 - 16);
    double v66 = *(double *)(v49 - 8);
  }
  long long v214 = 0u;
  long long v215 = 0u;
  int v216 = 1065353216;
  memset(v212, 0, sizeof(v212));
  int v213 = 1065353216;
  *(long double *)(v29 + 88) = sub_1906DA618(a2, v62, v66, v64, v65, 0.0);
  sub_1907EF6B4((uint64_t *)&v214, &v217);
  v67 = 0;
  char v199 = 0;
  int v68 = 0;
  v210 = 0;
  v211 = 0;
  uint64_t v69 = a8;
  uint64_t v70 = v201;
  while (1)
  {
    if (!v67) {
      goto LABEL_110;
    }
    if (v200 == 1.0)
    {
      uint64_t v71 = *v67;
      if (*v67)
      {
        if (*(unsigned char *)(v71 + 116)
          || (~*(_DWORD *)(v71 + 108) & 0x7FFFFFFF) == 0
          || *(unsigned char *)(v71 + 117)
          || (~*(_DWORD *)(v71 + 112) & 0x7FFFFFFF) == 0
          || *(unsigned char *)(*v203 + 117))
        {
          LOBYTE(v72) = sub_190824870(v71, v203);
LABEL_96:
          if (v72) {
            goto LABEL_218;
          }
          goto LABEL_97;
        }
        int v112 = *(_DWORD *)(*v203 + 112);
        int v72 = sub_190824870(v71, v203);
        if ((~v112 & 0x7FFFFFFF) != 0) {
          int v113 = v72;
        }
        else {
          int v113 = 0;
        }
        if (v113 != 1) {
          goto LABEL_96;
        }
        int v114 = *(_DWORD *)(*v203 + 112);
        if (*(_DWORD *)(*v67 + 108) == v114 || *(_DWORD *)(*v67 + 112) == v114) {
          goto LABEL_218;
        }
      }
    }
LABEL_97:
    v73 = v210;
    uint64_t v74 = *v210;
    if (v200 != 0.0) {
      goto LABEL_107;
    }
    if (!v74) {
      goto LABEL_110;
    }
    if (*(unsigned char *)(v74 + 116)
      || (~*(_DWORD *)(v74 + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(v74 + 117)
      || (~*(_DWORD *)(v74 + 112) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(*v203 + 116))
    {
      LOBYTE(v75) = sub_19082480C(v74, v203);
LABEL_105:
      if (v75) {
        goto LABEL_218;
      }
      uint64_t v74 = *v73;
LABEL_107:
      if (!v74) {
        goto LABEL_110;
      }
      goto LABEL_108;
    }
    int v115 = *(_DWORD *)(*v203 + 108);
    int v75 = sub_19082480C(v74, v203);
    if ((~v115 & 0x7FFFFFFF) != 0) {
      int v116 = v75;
    }
    else {
      int v116 = 0;
    }
    if (v116 != 1) {
      goto LABEL_105;
    }
    uint64_t v74 = *v73;
    int v117 = *(_DWORD *)(*v203 + 108);
    if (*(_DWORD *)(*v73 + 108) == v117 || *(_DWORD *)(v74 + 112) == v117) {
      goto LABEL_218;
    }
LABEL_108:
    if (*(void *)v74 == *(void *)*v203 && *(void *)(v74 + 8) == *(void *)(*v203 + 8)) {
      goto LABEL_218;
    }
LABEL_110:
    if (v68 == 1500)
    {
      ++*(_DWORD *)(a1 + 28);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v126 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)v227 = 1501;
        *(_WORD *)&v227[4] = 1026;
        *(_DWORD *)&v227[6] = 1500;
        _os_log_impl(&dword_1906B8000, v126, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,A* Search iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_217;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v219 = 134349568;
      *(double *)v220 = a9;
      *(_WORD *)&v220[8] = 1026;
      *(_DWORD *)v221 = 1501;
      *(_WORD *)&v221[4] = 1026;
      *(_DWORD *)&v221[6] = 1500;
      v125 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v125);
LABEL_337:
      if (v125 != buf) {
        free(v125);
      }
      char v199 = 1;
      goto LABEL_340;
    }
    HIDWORD(v76) = -1775253149 * (unsigned __int16)++v68;
    LODWORD(v76) = HIDWORD(v76);
    if ((v76 >> 1) <= 0x1B4E81B)
    {
      uint64_t v77 = *(void **)(*v70 + 88);
      if (v77) {
        [v77 clearRoadTiles];
      }
    }
    if (!sub_1907EF940((uint64_t)&v214, &v210) || (v67 = v210) == 0 || (double v78 = (void *)*v210) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v124 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)v227 = v68;
        *(_WORD *)&v227[4] = 2050;
        *(void *)&v227[6] = *((void *)&v215 + 1);
        _os_log_impl(&dword_1906B8000, v124, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v219 = 134349568;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 1026;
        *(_DWORD *)v221 = v68;
        *(_WORD *)&v221[4] = 2050;
        *(void *)&v221[6] = *((void *)&v215 + 1);
        v125 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v125);
        goto LABEL_337;
      }
LABEL_217:
      char v199 = 1;
      goto LABEL_218;
    }
    if (*v78 == *(void *)*v203 && v78[1] == *(void *)(*v203 + 8)) {
      break;
    }
    v207 = 0;
    v208 = 0;
    uint64_t v209 = 0;
    sub_1907451AC(*v70, v210, (uint64_t *)&v207, 1);
    v204 = 0;
    v205 = 0;
    uint64_t v206 = 0;
    sub_1907459FC(*v70, v67, (uint64_t *)&v204, 1);
    sub_1907ED400((uint64_t *)&v207, v208, v204, v205, (v205 - (char *)v204) >> 4);
    v196 = v208;
    v197 = (uint64_t *)v207;
    if (v207 == v208)
    {
      ++*(_DWORD *)(a1 + 60);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v109 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        int v110 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)v227 = v110;
        *(_WORD *)&v227[4] = 2050;
        *(void *)&v227[6] = *((void *)&v215 + 1);
        _os_log_impl(&dword_1906B8000, v109, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,road connections not available,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v121 = *(_DWORD *)(a1 + 32);
        int v219 = 134349568;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 1026;
        *(_DWORD *)v221 = v121;
        *(_WORD *)&v221[4] = 2050;
        *(void *)&v221[6] = *((void *)&v215 + 1);
        v122 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v122);
        if (v122 != buf) {
          free(v122);
        }
        char v199 = 1;
        uint64_t v70 = v201;
      }
      else
      {
        char v199 = 1;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      double v79 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v80 = *(void *)(*v67 + 8);
        double v81 = *((double *)v67 + 8);
        *(void *)v228 = v67[7];
        *(double *)v229 = v81;
        *(_DWORD *)buf = 134350593;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 2049;
        *(void *)v227 = v80;
        *(_WORD *)&v227[8] = 2050;
        *(void *)&v227[10] = (v208 - v207) >> 4;
        *(_WORD *)&v227[18] = 2050;
        *(_WORD *)&v228[8] = 2050;
        *(_WORD *)&v229[8] = 2050;
        *(double *)v230 = *(double *)v228 + v81;
        *(_WORD *)&v230[8] = 1026;
        int v231 = v68;
        _os_log_impl(&dword_1906B8000, v79, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d", buf, 0x44u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v118 = *(void *)(*v67 + 8);
        double v119 = *((double *)v67 + 8);
        *(void *)v222 = v67[7];
        *(double *)v223 = v119;
        int v219 = 134350593;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 2049;
        *(void *)v221 = v118;
        *(_WORD *)&v221[8] = 2050;
        *(void *)&v221[10] = (v208 - v207) >> 4;
        *(_WORD *)&v221[18] = 2050;
        *(_WORD *)&v222[8] = 2050;
        *(_WORD *)&v223[8] = 2050;
        *(double *)v224 = *(double *)v222 + v119;
        *(_WORD *)&v224[8] = 1026;
        int v225 = v68;
        v120 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v120);
        if (v120 != buf) {
          free(v120);
        }
      }
      sub_1907EF724((uint64_t *)&v214, (uint64_t)v67);
      char v83 = (uint64_t *)v207;
      double v82 = v208;
      while (v83 != (uint64_t *)v82)
      {
        char v84 = (void *)*v83;
        if (!*v83)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          v111 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = a9;
            _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,neighbor road is nullptr", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            int v219 = 134349056;
            *(double *)v220 = a9;
            v123 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v123);
            if (v123 != buf) {
              free(v123);
            }
          }
          char v199 = 1;
          break;
        }
        if (*v84 == *(void *)*a4 && v84[1] == *(void *)(*a4 + 8))
        {
          int v85 = sub_19082480C(*v67, v83);
          uint64_t v86 = *a4;
          if (v85)
          {
            sub_19082373C(*a4);
            double v87 = *(double *)(v86 + 40);
            double v88 = v200;
          }
          else
          {
            sub_19082373C(*a4);
            double v87 = *(double *)(v86 + 40);
            double v88 = 1.0 - v200;
          }
          double v98 = v88 * v87;
        }
        else
        {
          int v89 = sub_19082480C(*v67, v83);
          uint64_t v90 = *(void *)(*v83 + 144);
          double v91 = 0.0;
          double v92 = 0.0;
          double v93 = 0.0;
          if (v90 != *(void *)(*v83 + 136))
          {
            double v92 = *(double *)(v90 - 16);
            double v93 = *(double *)(v90 - 8);
          }
          double v94 = sub_1906DA618(a2, v92, v93, v64, v65, 0.0);
          v95 = *(double **)(*v83 + 136);
          double v96 = 0.0;
          if (*(double **)(*v83 + 144) != v95)
          {
            double v91 = *v95;
            double v96 = v95[1];
          }
          double v97 = sub_1906DA618(a2, v91, v96, v64, v65, 0.0);
          if (v89) {
            double v98 = v94;
          }
          else {
            double v98 = v97;
          }
        }
        uint64_t v99 = *v67;
        sub_19082373C(*v67);
        double v100 = *(double *)(v99 + 40);
        if (v217)
        {
          v101 = (void *)*v67;
          if (*v67)
          {
            if (*v101 == *(void *)*v217 && v101[1] == *(void *)(*v217 + 8))
            {
              int v102 = sub_1908248D4((uint64_t)v101, v83);
              uint64_t v103 = *v67;
              if (v102)
              {
                sub_19082373C(*v67);
                double v104 = *(double *)(v103 + 40);
                double v105 = a10;
              }
              else
              {
                sub_19082373C(*v67);
                double v105 = *(double *)(v103 + 40);
                double v104 = 1.0 - a10;
              }
              double v100 = v105 * v104;
            }
          }
        }
        double v106 = v98 + v100 + *((double *)v67 + 7);
        if (!v69 || v106 <= v202) {
          operator new();
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        v107 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349568;
          *(double *)&buf[4] = a9;
          *(_WORD *)&buf[12] = 2050;
          *(double *)v227 = v106;
          *(_WORD *)&v227[8] = 2050;
          *(double *)&v227[10] = v202;
          _os_log_impl(&dword_1906B8000, v107, OS_LOG_TYPE_DEFAULT, "CLTSP,CLRS,%{public}.1lf,Warning,cost exceeds maximum tolerable cost,cost,%{public}.1lf,maxTolerableCostInMeters,%{public}.1lf", buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v219 = 134349568;
          *(double *)v220 = a9;
          *(_WORD *)&v220[8] = 2050;
          *(double *)v221 = v106;
          *(_WORD *)&v221[8] = 2050;
          *(double *)&v221[10] = v202;
          v108 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v108);
          if (v108 != buf) {
            free(v108);
          }
        }
        v83 += 2;
      }
      sub_1907EF6B4((uint64_t *)v212, &v210);
      uint64_t v70 = v201;
    }
    *(void *)buf = &v204;
    sub_1906C6BF0((void ***)buf);
    *(void *)buf = &v207;
    sub_1906C6BF0((void ***)buf);
    if (v197 == (uint64_t *)v196) {
      goto LABEL_218;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  v135 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v136 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a9;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)v227 = v136;
    *(_WORD *)&v227[4] = 2050;
    *(void *)&v227[6] = *((void *)&v215 + 1);
    _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstructPedestrian,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
  }
  if (!sub_1906CB57C(115, 2))
  {
    char v199 = 0;
    goto LABEL_218;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  int v190 = *(_DWORD *)(a1 + 32);
  int v219 = 134349568;
  *(double *)v220 = a9;
  *(_WORD *)&v220[8] = 1026;
  *(_DWORD *)v221 = v190;
  *(_WORD *)&v221[4] = 2050;
  *(void *)&v221[6] = *((void *)&v215 + 1);
  v191 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v191);
  if (v191 != buf) {
    free(v191);
  }
  char v199 = 0;
LABEL_340:
  uint64_t v70 = v201;
LABEL_218:
  v127 = *(void **)(*v70 + 88);
  if (v127) {
    [v127 clearRoadTiles];
  }
  v208 = 0;
  uint64_t v209 = 0;
  v207 = (char *)&v208;
  char v128 = v199;
  if (v199) {
    goto LABEL_242;
  }
  v129 = v210;
  if (!v210)
  {
LABEL_241:
    v210 = v129;
LABEL_242:
    v137 = v217;
    if (!sub_19074BAD4((uint64_t)&v207, (unint64_t *)*v217))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v138 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v139 = *(void *)(*v137 + 8);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 2048;
        *(void *)v227 = v139;
        _os_log_impl(&dword_1906B8000, v138, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added first road,%lld", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v186 = *(void *)(*v137 + 8);
        int v219 = 134349312;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 2048;
        *(void *)v221 = v186;
        v187 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v187);
        if (v187 != buf) {
          free(v187);
        }
        char v128 = v199;
      }
      sub_1907EFFC0((unint64_t *)a1, (uint64_t)v137, v218);
    }
    v140 = *(uint64_t **)a1;
    uint64_t v141 = *(void *)(a1 + 8);
    v142 = (uint64_t *)(v141 - 16);
    if (*(void *)a1 != v141 && v142 > v140)
    {
      do
      {
        uint64_t v144 = *v140;
        uint64_t *v140 = *v142;
        uint64_t *v142 = v144;
        uint64_t v145 = v140[1];
        v140[1] = v142[1];
        v142[1] = v145;
        v140 += 2;
        v142 -= 2;
      }
      while (v140 < v142);
    }
    if (!sub_19074BAD4((uint64_t)&v207, (unint64_t *)*v203))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v146 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v147 = *(void *)(*v203 + 8);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 2048;
        *(void *)v227 = v147;
        _os_log_impl(&dword_1906B8000, v146, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added last road,%lld", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v188 = *(void *)(*v203 + 8);
        int v219 = 134349312;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 2048;
        *(void *)v221 = v188;
        v189 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v189);
        if (v189 != buf) {
          free(v189);
        }
        char v128 = v199;
      }
      sub_1907EFFC0((unint64_t *)a1, (uint64_t)v203, (uint64_t)v198);
    }
    *(_DWORD *)(a1 + 52) += v128 & 1;
    double v148 = 0.0;
    if (v24 >= 0.0)
    {
      uint64_t v149 = mach_continuous_time();
      double v148 = vabdd_f64(sub_1907E1770(v149), v24) * 1000.0;
    }
    *(double *)(a1 + 40) = v148;
    *(double *)(a1 + 64) = v148 + *(double *)(a1 + 64);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    v150 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      int v151 = *(_DWORD *)(a1 + 48);
      int v152 = *(_DWORD *)(a1 + 52);
      int v153 = *(_DWORD *)(a1 + 24);
      int v154 = *(_DWORD *)(a1 + 28);
      int v155 = *(_DWORD *)(a1 + 32);
      int v156 = *(_DWORD *)(a1 + 56);
      int v157 = *(_DWORD *)(a1 + 60);
      uint64_t v158 = *(void *)(a1 + 40);
      uint64_t v159 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v151;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v152;
      *(_WORD *)v227 = 1026;
      *(_DWORD *)&v227[2] = v153;
      *(_WORD *)&v227[6] = 1026;
      *(_DWORD *)&v227[8] = v154;
      *(_WORD *)&v227[12] = 1026;
      *(_DWORD *)&v227[14] = v156;
      *(_WORD *)&v227[18] = 1026;
      *(_DWORD *)v228 = v155;
      *(_WORD *)&v228[4] = 1026;
      *(_DWORD *)&v228[6] = v157;
      *(_WORD *)v229 = 2050;
      *(void *)&v229[2] = v158;
      *(_WORD *)v230 = 2050;
      *(void *)&v230[2] = v159;
      _os_log_impl(&dword_1906B8000, v150, OS_LOG_TYPE_DEFAULT, "CLTSP,AStar Pedestrian Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v176 = *(_DWORD *)(a1 + 48);
      int v177 = *(_DWORD *)(a1 + 52);
      int v178 = *(_DWORD *)(a1 + 24);
      int v179 = *(_DWORD *)(a1 + 28);
      int v180 = *(_DWORD *)(a1 + 32);
      int v181 = *(_DWORD *)(a1 + 56);
      int v182 = *(_DWORD *)(a1 + 60);
      uint64_t v183 = *(void *)(a1 + 40);
      uint64_t v184 = *(void *)(a1 + 64);
      int v219 = 67242240;
      *(_DWORD *)v220 = v176;
      *(_WORD *)&v220[4] = 1026;
      *(_DWORD *)&v220[6] = v177;
      *(_WORD *)v221 = 1026;
      *(_DWORD *)&v221[2] = v178;
      *(_WORD *)&v221[6] = 1026;
      *(_DWORD *)&v221[8] = v179;
      *(_WORD *)&v221[12] = 1026;
      *(_DWORD *)&v221[14] = v181;
      *(_WORD *)&v221[18] = 1026;
      *(_DWORD *)v222 = v180;
      *(_WORD *)&v222[4] = 1026;
      *(_DWORD *)&v222[6] = v182;
      *(_WORD *)v223 = 2050;
      *(void *)&v223[2] = v183;
      *(_WORD *)v224 = 2050;
      *(void *)&v224[2] = v184;
      v185 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v185);
      if (v185 != buf) {
        free(v185);
      }
      char v128 = v199;
    }
    char v37 = v128 ^ 1;
    v131 = v211;
    goto LABEL_270;
  }
  int v130 = 501;
  v131 = v211;
  while (1)
  {
    if (!v129[5])
    {
      v133 = v131;
LABEL_240:
      v211 = v133;
      goto LABEL_241;
    }
    if (!--v130)
    {
      v210 = v129;
      v211 = v131;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v160 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)v227 = 501;
        *(_WORD *)&v227[4] = 1026;
        *(_DWORD *)&v227[6] = 500;
        _os_log_impl(&dword_1906B8000, v160, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v219 = 134349568;
        *(double *)v220 = a9;
        *(_WORD *)&v220[8] = 1026;
        *(_DWORD *)v221 = 501;
        *(_WORD *)&v221[4] = 1026;
        *(_DWORD *)&v221[6] = 500;
        v192 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v192);
        if (v192 != buf) {
          free(v192);
        }
      }
      double v161 = 0.0;
      if (v24 >= 0.0) {
        goto LABEL_294;
      }
      goto LABEL_295;
    }
    v132 = (unint64_t *)*v129;
    if (!*v129)
    {
      v210 = v129;
      v211 = v131;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v162 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = a9;
        _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search null road", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v219 = 134349056;
        *(double *)v220 = a9;
        v193 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v193);
        if (v193 != buf) {
          free(v193);
        }
      }
      double v161 = 0.0;
      if (v24 >= 0.0) {
        goto LABEL_294;
      }
      goto LABEL_295;
    }
    if (sub_19074BAD4((uint64_t)&v207, (unint64_t *)*v129)) {
      break;
    }
    sub_1907EFFC0((unint64_t *)a1, (uint64_t)v129, (uint64_t)v131);
    *(void *)buf = v132;
    *((unsigned char *)sub_19074E748((uint64_t **)&v207, v132, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 48) = 1;
    v134 = (uint64_t *)v129[5];
    v133 = (std::__shared_weak_count *)v129[6];
    if (v133) {
      atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v131) {
      sub_1906BFE48(v131);
    }
    v131 = v133;
    v129 = v134;
    if (!v134) {
      goto LABEL_240;
    }
  }
  v210 = v129;
  v211 = v131;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  v163 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v164 = *(void *)(*v129 + 8);
    *(_DWORD *)buf = 134349313;
    *(double *)&buf[4] = a9;
    *(_WORD *)&buf[12] = 2049;
    *(void *)v227 = v164;
    _os_log_impl(&dword_1906B8000, v163, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road already added,%{private}lld", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v194 = *(void *)(*v129 + 8);
    int v219 = 134349313;
    *(double *)v220 = a9;
    *(_WORD *)&v220[8] = 2049;
    *(void *)v221 = v194;
    v195 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v195);
    if (v195 != buf) {
      free(v195);
    }
  }
  double v161 = 0.0;
  if (v24 >= 0.0)
  {
LABEL_294:
    uint64_t v165 = mach_continuous_time();
    double v161 = vabdd_f64(sub_1907E1770(v165), v24) * 1000.0;
  }
LABEL_295:
  char v37 = 0;
  *(double *)(a1 + 40) = v161;
  *(double *)(a1 + 64) = v161 + *(double *)(a1 + 64);
LABEL_270:
  sub_19074E308((uint64_t)&v207, v208);
  if (v131) {
    sub_1906BFE48(v131);
  }
  sub_1907F3BD8((uint64_t)v212);
  sub_1907F3BD8((uint64_t)&v214);
  uint64_t v29 = v218;
  sub_1906BFE48(v198);
  if (v29) {
    goto LABEL_68;
  }
  return v37 & 1;
}

void sub_1906BE424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a36) {
    sub_1906BFE48(a36);
  }
  sub_1907F3BD8((uint64_t)&a37);
  sub_1907F3BD8((uint64_t)&a43);
  sub_1906BFE48(a23);
  if (a50) {
    sub_1906BFE48(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t CLClientGetLocation(uint64_t a1, const __CFDictionary *a2, _OWORD *a3)
{
  int v6 = *(pthread_mutex_t **)(a1 + 240);
  v22[3] = v6;
  pthread_mutex_lock(v6);
  __int16 v23 = 257;
  if (a3)
  {
    sub_1906BFF0C(v22, a2);
    *(_OWORD *)int v20 = xmmword_190883580;
    *(_OWORD *)&v20[16] = unk_190883590;
    memset(v21, 0, 28);
    long long v17 = xmmword_190883540;
    *(_OWORD *)v18 = unk_190883550;
    *(_OWORD *)&v18[16] = xmmword_190883560;
    long long v19 = unk_190883570;
    *(_OWORD *)v16 = xmmword_190883520;
    *(_OWORD *)&v16[16] = unk_190883530;
    BOOL v15 = 0;
    sub_1906C0F58(v16, (uint64_t)v22);
    if (*(_DWORD *)(a1 + 20) == 3)
    {
      int v7 = sub_1906C1BD4((uint64_t)v22, "IsFitnessMatch", &v15);
      int v8 = v15 ? 0 : v7;
      if (v8 == 1 && (*(double *)&v20[4] != 0.0 || *(double *)&v20[12] != 0.0 || *(double *)&v20[20] != -1.0))
      {
        *(_OWORD *)&v16[4] = *(_OWORD *)&v20[4];
        DWORD1(v21[0]) = DWORD2(v21[0]);
        *(void *)&v18[12] = *(void *)&v20[20];
      }
    }
    if (*(double *)&v16[20] >= 0.0)
    {
      long long v10 = *(_OWORD *)&v20[16];
      a3[6] = *(_OWORD *)v20;
      a3[7] = v10;
      a3[8] = v21[0];
      *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)((char *)v21 + 12);
      long long v11 = *(_OWORD *)v18;
      a3[2] = v17;
      a3[3] = v11;
      long long v12 = v19;
      a3[4] = *(_OWORD *)&v18[16];
      a3[5] = v12;
      long long v13 = *(_OWORD *)&v16[16];
      uint64_t v9 = 1;
      *a3 = *(_OWORD *)v16;
      a3[1] = v13;
    }
    else
    {
      uint64_t v9 = 0;
    }
    sub_1906BFEBC(v22);
  }
  else
  {
    uint64_t v9 = 0;
  }
  pthread_mutex_unlock(v6);
  return v9;
}

void sub_1906BE770(_Unwind_Exception *a1)
{
  sub_1906EB9DC(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1EB271448 != -1) {
    dispatch_once_f(&qword_1EB271448, 0, (dispatch_function_t)sub_1906E612C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    bzero((void *)(Instance + 16), 0x180uLL);
    operator new();
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    __int16 v4 = 2082;
    v5 = "";
    __int16 v6 = 2050;
    uint64_t v7 = 0;
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client allocated\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  return 0;
}

void sub_1906BF354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void *copyLocationsFromLocationMessagePayload(void *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", @"LocationCount"), "integerValue");
  uint64_t v3 = (void *)[a1 objectForKey:@"Locations"];
  __int16 v4 = (void *)[a1 objectForKey:@"LocationsPrivate"];
  uint64_t v5 = [a1 objectForKey:@"CoarseMetaData"];
  if (v3)
  {
    uint64_t v6 = v5;
    if ([v3 length] == 156 * v2 && (!v4 || objc_msgSend(v4, "length") == 560 * v2))
    {
      if (v6)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE006340);
        }
        uint64_t v7 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "Encoded coarse meta data found", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006340);
          }
          LOWORD(v32[0]) = 0;
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "NSArray * _Nonnull copyLocationsFromLocationMessagePayload(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        if (v2 > 1)
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006340);
          }
          uint64_t v8 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "CLLocationManager should not get multile locations with coarseMetaData", buf, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE006340);
            }
            LOWORD(v32[0]) = 0;
            uint64_t v31 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "NSArray * _Nonnull copyLocationsFromLocationMessagePayload(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v31);
            if (v31 != (char *)buf) {
              free(v31);
            }
          }
        }
      }
      uint64_t v9 = (_OWORD *)[v3 bytes];
      uint64_t v10 = [v4 bytes];
      uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v2];
      if (v2 >= 1)
      {
        long long v11 = (char *)v10;
        do
        {
          long long v12 = [CLLocation alloc];
          long long v13 = v12;
          long long v14 = v9[1];
          if (v10)
          {
            v32[0] = *v9;
            v32[1] = v14;
            long long v15 = v9[2];
            long long v16 = v9[3];
            long long v17 = v9[5];
            v32[4] = v9[4];
            v32[5] = v17;
            v32[2] = v15;
            v32[3] = v16;
            long long v18 = v9[6];
            long long v19 = v9[7];
            long long v20 = v9[8];
            *(_OWORD *)&v33[12] = *(_OWORD *)((char *)v9 + 140);
            v32[7] = v19;
            *(_OWORD *)char v33 = v20;
            v32[6] = v18;
            memcpy(buf, v11, 0x230uLL);
            uint64_t v21 = [(CLLocation *)v13 initWithClientLocation:v32 clientLocationPrivate:buf coarseMetaData:v6];
          }
          else
          {
            *(_OWORD *)buf = *v9;
            *(_OWORD *)&buf[16] = v14;
            long long v22 = v9[2];
            long long v23 = v9[3];
            long long v24 = v9[5];
            *(_OWORD *)&buf[64] = v9[4];
            *(_OWORD *)&buf[80] = v24;
            *(_OWORD *)&buf[32] = v22;
            *(_OWORD *)&buf[48] = v23;
            long long v25 = v9[6];
            long long v26 = v9[7];
            long long v27 = v9[8];
            *(_OWORD *)&buf[140] = *(_OWORD *)((char *)v9 + 140);
            *(_OWORD *)&buf[112] = v26;
            *(_OWORD *)&buf[128] = v27;
            *(_OWORD *)&buf[96] = v25;
            uint64_t v21 = [(CLLocation *)v12 initWithClientLocation:buf coarseMetaData:v6];
          }
          v28 = (void *)v21;
          [v3 addObject:v21];

          v11 += 560;
          uint64_t v9 = (_OWORD *)((char *)v9 + 156);
          --v2;
        }
        while (v2);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1906BF8BC(void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  __int16 v4 = (pthread_mutex_t *)a1[5];
  pthread_mutex_lock(v4);
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
    return pthread_mutex_unlock(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (_CFIsDeallocating()) {
    return pthread_mutex_unlock(v4);
  }
  CFRetain(v5);
  uint64_t v7 = *(CLConnectionMessage **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  long long v11 = (NSSet *)objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(v7, v11);
  sub_1906BFF0C(v39, DictionaryOfClasses);
  uint64_t v13 = 0;
  long long v14 = "LocationManager/kCLConnectionMessageRegistration";
  do
  {
    long long v15 = (char *)CLConnectionMessage::name(v7);
    size_t v16 = strlen(v14);
    if (v15[23] < 0)
    {
      if (v16 != *((void *)v15 + 1)) {
        goto LABEL_13;
      }
      if (v16 == -1) {
        sub_1906DDEB8();
      }
      long long v15 = *(char **)v15;
LABEL_12:
      if (memcmp(v15, v14, v16)) {
        goto LABEL_13;
      }
      uint64_t v19 = CLConnectionMessage::name(v7);
      if (*(char *)(v19 + 23) < 0)
      {
        sub_1906C00FC(buf, *(void **)v19, *(void *)(v19 + 8));
      }
      else
      {
        long long v20 = *(_OWORD *)v19;
        uint64_t v43 = *(void *)(v19 + 16);
        *(_OWORD *)buf = v20;
      }
      uint64_t v24 = CLConnectionMessage::name(v7);
      int v25 = *(char *)(v24 + 23);
      if (v25 < 0)
      {
        if (*(void *)(v24 + 8) != 28) {
          goto LABEL_44;
        }
        uint64_t v24 = *(void *)v24;
      }
      else if (v25 != 28)
      {
        goto LABEL_44;
      }
      if (*(void *)v24 == 0x656E6E6F434C436BLL
        && *(void *)(v24 + 8) == 0x73654D6E6F697463
        && *(void *)(v24 + 16) == 0x61636F4C65676173
        && *(_DWORD *)(v24 + 24) == 1852795252)
      {
        goto LABEL_56;
      }
LABEL_44:
      uint64_t v29 = (void *)CLConnectionMessage::name(v7);
      int v30 = *((char *)v29 + 23);
      if (v30 < 0)
      {
        if (v29[1] != 39) {
          goto LABEL_50;
        }
        uint64_t v29 = (void *)*v29;
      }
      else if (v30 != 39)
      {
        goto LABEL_50;
      }
      if (!memcmp(v29, "kCLConnectionMessageCompensatedLocation", 0x27uLL))
      {
LABEL_56:
        char v33 = (char *)CLConnectionMessage::name(v7);
        sub_1906C060C((uint64_t)v39, "kCLClientEventKey", v33);
        goto LABEL_57;
      }
LABEL_50:
      uint64_t v31 = (void *)CLConnectionMessage::name(v7);
      int v32 = *((char *)v31 + 23);
      if (v32 < 0)
      {
        if (v31[1] != 45) {
          goto LABEL_57;
        }
        uint64_t v31 = (void *)*v31;
      }
      else if (v32 != 45)
      {
        goto LABEL_57;
      }
      if (!memcmp(v31, "kCLConnectionMessageSignificantLocationChange", 0x2DuLL)) {
        goto LABEL_56;
      }
LABEL_57:
      sub_1906C019C((uint64_t)v5, dword_190881F20[v13], v39[1]);
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      long long v23 = *(void **)buf;
      goto LABEL_59;
    }
    if (v16 == v15[23]) {
      goto LABEL_12;
    }
LABEL_13:
    long long v14 = off_1E5696DC8[++v13];
  }
  while (v13 != 26);
  uint64_t v17 = CLConnectionMessage::name(v7);
  if (*(char *)(v17 + 23) < 0)
  {
    sub_1906C00FC(&__dst, *(void **)v17, *(void *)(v17 + 8));
  }
  else
  {
    long long v18 = *(_OWORD *)v17;
    uint64_t v38 = *(void *)(v17 + 16);
    long long __dst = v18;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v21 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    p_dst = &__dst;
    if (v38 < 0) {
      p_dst = (long long *)__dst;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = p_dst;
    _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_FAULT, "Got unhandled message %s from daemon", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v35 = &__dst;
    if (v38 < 0) {
      uint64_t v35 = (long long *)__dst;
    }
    int v40 = 136315138;
    int v41 = v35;
    unsigned int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void _CLClientHandleMessage(CLClientRef, std::shared_ptr<CLConnectionMessage>)", "CoreLocation: %s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  if (SHIBYTE(v38) < 0)
  {
    long long v23 = (void *)__dst;
LABEL_59:
    operator delete(v23);
  }
LABEL_60:
  sub_1906BFEBC(v39);
  if (v6) {
    sub_1906BFE48(v6);
  }
  CFRelease(v5);
  return pthread_mutex_unlock(v4);
}

void sub_1906BFDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1906BFEBC(&a22);
  if (v31) {
    sub_1906BFE48(v31);
  }
  sub_1906EB9DC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1906BFE48(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *sub_1906BFEBC(void *a1)
{
  *a1 = &unk_1EE004168;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1906BFF0C(void *a1, CFDictionaryRef theDict)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE004168;
  a1[1] = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v5 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(CFDictionaryRef)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return a1;
}

void *sub_1906C00FC(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1906F442C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1906C019C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(pthread_mutex_t **)(a1 + 240);
  int v25 = v6;
  pthread_mutex_lock(v6);
  __int16 v26 = 257;
  if (!*(unsigned char *)(a1 + 225))
  {
    uint64_t v7 = *(void **)(a1 + 328);
    uint64_t v8 = v7[2];
    if (v8) {
      unint64_t v9 = (unint64_t)*(double *)(*v7 + 16);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = mach_continuous_time();
    if (v8) {
      BOOL v11 = v10 - v9 > 0x37E11D600;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      uint64_t v12 = *(void *)(a1 + 328);
LABEL_20:
      size_t v16 = (double *)operator new(0x18uLL);
      v16[2] = (double)v10;
      *(void *)size_t v16 = v12;
      uint64_t v17 = *(double ***)(v12 + 8);
      *((void *)v16 + 1) = v17;
      double *v17 = v16;
      uint64_t v18 = *(void *)(v12 + 16) + 1;
      *(void *)(v12 + 8) = v16;
      *(void *)(v12 + 16) = v18;
      CFRetain((CFTypeRef)a1);
      uint64_t v19 = *(void **)(a1 + 232);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = sub_1906C9FC4;
      v22[3] = &unk_1E5696C18;
      int v23 = a2;
      void v22[4] = a3;
      v22[5] = a1;
      [v19 async:v22];
      return pthread_mutex_unlock(v6);
    }
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v13 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "Location callback block not executed in a timely manner!", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      __int16 v24 = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLClientInvokeCallback(CLClientRef, CLClientEvent, id)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v12 = *(void *)(a1 + 328);
    if (*(void *)(v12 + 16) < 0xBuLL) {
      goto LABEL_20;
    }
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    long long v14 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 328) + 16);
      *(_DWORD *)buf = 68289538;
      int v28 = 0;
      __int16 v29 = 2082;
      int v30 = "";
      __int16 v31 = 1026;
      int v32 = a2;
      __int16 v33 = 2050;
      uint64_t v34 = v15;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Discarding message for event because of too many unprocessed messages\", \"event\":%{public}d, \"count\":%{public}lu}", buf, 0x22u);
    }
  }
  return pthread_mutex_unlock(v6);
}

void sub_1906C04FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientGetAuthorizationStatusAndCorrectiveCompensation(CFDictionaryRef theDict, _DWORD *a2, unsigned char *a3, unsigned char *a4)
{
  sub_1906BFF0C(v11, theDict);
  int v10 = 0;
  __int16 v9 = 0;
  if (sub_1906C1070((uint64_t)v11, "kCLConnectionMessageStatusKey", &v10)
    && sub_1906C1BD4((uint64_t)v11, "kCLConnectionMessageCompensationKey", (BOOL *)&v9)
    && sub_1906C1BD4((uint64_t)v11, "kCLConnectionMessageAuthorizedForWidgetUpdatesKey", (BOOL *)&v9 + 1))
  {
    *a2 = v10;
    *a3 = v9;
    *a4 = HIBYTE(v9);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_1906BFEBC(v11);
  return v7;
}

void sub_1906C05F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1906C060C(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  if (a3[23] >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  BOOL v7 = sub_1906C0684(a1, v5, v6);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

BOOL sub_1906C0684(uint64_t a1, const __CFString *a2, char *cStr)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        __int16 v9 = buf;
      }
      else {
        __int16 v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      long long v14 = v9;
      int v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_1906C0914(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(a1[1], a2, a3);
  __int16 v4 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v4(a1);
}

uint64_t CLClientInvalidate(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 240);
  v8[6] = v2;
  pthread_mutex_lock(v2);
  __int16 v9 = 257;
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  CFAllocatorRef v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = a1;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalidating client\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  CLClientShowHeadingCalibration(a1, 0);
  CFRetain((CFTypeRef)a1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_1906C2D7C;
  v8[3] = &unk_1E5696EA0;
  v8[4] = a1;
  dispatch_async(MEMORY[0x1E4F14428], v8);
  uint64_t v4 = *(void *)(a1 + 336);
  if (v4)
  {
    (*(void (**)(void))(v4 + 16))();
    _Block_release(*(const void **)(a1 + 336));
    *(void *)(a1 + 336) = 0;
  }
  if (*(void *)(a1 + 320))
  {
    uint64_t v5 = MEMORY[0x192FCE820]();
    MEMORY[0x192FCEAD0](v5, 0xB0C40BC2CC919);
    *(void *)(a1 + 320) = 0;
  }
  if (*(void *)(a1 + 264))
  {
    uint64_t v6 = *(void (**)(void))(a1 + 280);
    if (v6) {
      v6();
    }
  }
  bzero((void *)(a1 + 256), 0x28uLL);
  *(unsigned char *)(a1 + 225) = 1;
  return pthread_mutex_unlock(v2);
}

void sub_1906C0C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_1906F4064(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLClientShowHeadingCalibration(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (pthread_mutex_t *)(a1 + 160);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
  {
    BOOL v6 = *(unsigned char *)(a1 + 25) != 0;
    int v7 = *(unsigned __int8 *)(a1 + 24);
    BOOL v8 = *(unsigned char *)(a1 + 18) != 0;
    *(_DWORD *)buf = 68290050;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 1026;
    BOOL v18 = a2 != 0;
    __int16 v19 = 1026;
    BOOL v20 = v6;
    __int16 v21 = 1026;
    BOOL v22 = v8;
    __int16 v23 = 1026;
    BOOL v24 = v7 != 0;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLClientShowHeadingCalibration\", \"showHeadingCal\":%{public}hhd, \"isHeadingCalibrated\":%{public}hhd, \"isApplicationActive\":%{public}hhd, \"isUpdatingHeading\":%{public}hhd}", buf, 0x2Au);
  }
  if ((sub_1906C2AD0() & 0x10) != 0) {
    goto LABEL_17;
  }
  if (!a2) {
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a1 + 18))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    int v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_INFO, "Application inactive, will not show heading calibration", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "Boolean CLClientShowHeadingCalibration(CLClientRef, Boolean)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
LABEL_17:
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 25) || !*(unsigned char *)(a1 + 24))
  {
LABEL_9:
    if (*(unsigned char *)(a1 + 224))
    {
      sub_19078D528();
      *(unsigned char *)(a1 + 224) = 0;
    }
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 224))
  {
LABEL_11:
    uint64_t v9 = 1;
    goto LABEL_18;
  }
  uint64_t v9 = 1;
  if (sub_19078D248()) {
    *(unsigned char *)(a1 + 224) = 1;
  }
LABEL_18:
  pthread_mutex_unlock(v4);
  return v9;
}

void sub_1906C0F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906C0F58(_OWORD *a1, uint64_t a2)
{
  a1[6] = xmmword_190883580;
  a1[7] = unk_190883590;
  a1[8] = xmmword_1908835A0;
  *(_OWORD *)((char *)a1 + 140) = *(long long *)((char *)&xmmword_1908835A0 + 12);
  a1[2] = xmmword_190883540;
  a1[3] = unk_190883550;
  a1[4] = xmmword_190883560;
  a1[5] = unk_190883570;
  *a1 = xmmword_190883520;
  a1[1] = unk_190883530;
  CFDataRef theData = 0;
  int v16 = 0;
  int v4 = sub_1906C1AF8(a2, "Locations", (CFTypeRef *)&theData);
  uint64_t result = 0;
  if (v4)
  {
    int v6 = sub_1906C1070(a2, "LocationCount", &v16);
    uint64_t result = 0;
    if (v6)
    {
      if (v16 >= 1)
      {
        BytePtr = CFDataGetBytePtr(theData);
        BOOL v8 = &BytePtr[156 * v16];
        long long v9 = *(_OWORD *)(v8 - 140);
        *a1 = *(_OWORD *)(v8 - 156);
        a1[1] = v9;
        long long v10 = *(_OWORD *)(v8 - 108);
        long long v11 = *(_OWORD *)(v8 - 76);
        long long v12 = *(_OWORD *)(v8 - 124);
        a1[4] = *(_OWORD *)(v8 - 92);
        a1[5] = v11;
        a1[2] = v12;
        a1[3] = v10;
        long long v13 = *(_OWORD *)(v8 - 44);
        long long v14 = *(_OWORD *)(v8 - 28);
        long long v15 = *(_OWORD *)(v8 - 60);
        *(_OWORD *)((char *)a1 + 140) = *((_OWORD *)v8 - 1);
        a1[7] = v13;
        a1[8] = v14;
        a1[6] = v15;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1906C1070(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1906C10E4(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1906C10E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1906C18F4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1906C1380(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf);
  if (result)
  {
    *a3 = 0;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      CFIndex v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      __int16 v17 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        sub_1907829B4(a2, (uint64_t)__p);
        int v18 = SBYTE3(v31);
        __int16 v19 = *(unsigned char **)__p;
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        uint64_t v21 = __p;
        *(_DWORD *)buf = 136446722;
        if (v18 < 0) {
          uint64_t v21 = v19;
        }
        *(void *)__int16 v33 = v21;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v9;
        __int16 v34 = 2050;
        uint64_t v35 = (unsigned char *)Count;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)v26);
      int v22 = v27;
      __int16 v23 = (void **)v26[0];
      CFIndex v24 = CFArrayGetCount((CFArrayRef)cf);
      uint64_t v25 = v26;
      *(_DWORD *)__p = 136446722;
      if (v22 < 0) {
        uint64_t v25 = v23;
      }
      *(void *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v9;
      __int16 v30 = 2050;
      CFIndex v31 = v24;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      long long v11 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        CFTypeID v12 = CFGetTypeID(cf);
        sub_1907829B4(a2, (uint64_t)__p);
        int v13 = (v31 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)__int16 v33 = a4;
        *(_WORD *)&v33[4] = 2050;
        *(void *)&v33[6] = v12;
        __int16 v34 = 2082;
        uint64_t v35 = v13;
        _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      CFTypeID v14 = CFGetTypeID(cf);
      sub_1907829B4(a2, (uint64_t)v26);
      if (v27 >= 0) {
        __int16 v15 = v26;
      }
      else {
        __int16 v15 = (void **)v26[0];
      }
      *(_DWORD *)__p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(void *)&__p[10] = v14;
      __int16 v30 = 2082;
      CFIndex v31 = (CFIndex)v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
LABEL_31:
    CFRelease(cf);
    uint64_t result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_1906C1878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1906C18B0(uint64_t a1, const void *a2, void *a3)
{
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  CFStringRef v5 = Value;
  *a3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v5 != 0;
}

uint64_t sub_1906C18F4(const void *a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1906C1EE4(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2)) {
    return 1;
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
  }
  CFStringRef v5 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  int v6 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1906C1AF8(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1906C1B6C(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1906C1B6C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  *a3 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 904))(a1);
  if (v4 && *a3) {
    CFAutorelease(*a3);
  }
  return v4;
}

uint64_t sub_1906C1BD4(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1906C1C48(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1906C1C48(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1906C1EE4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1906C1EE4(const void *a1, BOOL *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID() && v4 != CFNumberGetTypeID()) {
    return 0;
  }
  *a2 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  return 1;
}

BOOL sub_1906C1F50(uint64_t a1, const char *a2, unsigned char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1906C1FBC(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1906C1FBC(uint64_t a1, const __CFString *a2, unsigned char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!*a3) {
    CFStringRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(void *)a1 + 896))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      uint64_t v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v13 >= 0) {
        uint64_t v10 = buf;
      }
      else {
        uint64_t v10 = *(unsigned char **)buf;
      }
      int v14 = 136446210;
      __int16 v15 = v10;
      long long v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
  }
  return v6 != 0;
}

void *CLClientStartHeadingUpdates(uint64_t a1, int a2, double a3)
{
  if ((*(unsigned char *)(a1 + 392) & 2) != 0)
  {
    entr_act_modify();
  }
  else
  {
    entr_act_begin();
    *(unsigned char *)(a1 + 392) |= 2u;
  }
  entr_act_set();
  double v6 = -1.0;
  if (a3 > 0.0) {
    double v6 = a3;
  }
  *(double *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = a2;
  if ((a2 - 1) <= 3) {
    *(void *)(a1 + 48) = qword_190881FD8[a2 - 1];
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    *(_WORD *)(a1 + 24) = 257;
    *(void *)(a1 + 144) = 0xBFF0000000000000;
  }
  sub_1906D5844(v9);
  char v8 = 1;
  sub_1906C1F50((uint64_t)v9, "kCLConnectionMessageSubscribeKey", &v8);
  sub_1906E0BE8((uint64_t)v9, "kCLConnectionMessageHeadingFilterKey", (const void *)(a1 + 32));
  sub_1906D5A24(a1, "kCLConnectionMessageHeading", (uint64_t)v9);
  return sub_1906BFEBC(v9);
}

void sub_1906C239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a4;
  uint64_t v5 = sub_190800E2C();
  double v6 = *(double *)(a4 + 4);
  BOOL v7 = v6 != 0.0;
  double v8 = *(double *)(a4 + 12);
  if (v8 == 0.0) {
    BOOL v7 = 0;
  }
  if (*(double *)(a4 + 20) >= 0.0 && !v7)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    CFTypeID v9 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a4 + 20);
      *(_DWORD *)buf = 68290307;
      __int16 v15 = 2082;
      int v14 = 0;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      BOOL v18 = v6 != 0.0;
      __int16 v19 = 1026;
      BOOL v20 = v8 != 0.0;
      __int16 v21 = 2050;
      uint64_t v22 = v10;
      __int16 v23 = 1040;
      int v24 = 8;
      __int16 v25 = 2097;
      __int16 v26 = &v12;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NullIsland Received a latitude or longitude from getLocationForBundleID that was exactly zero\", \"latIsNonzero\":%{public}hhd, \"lonIsNonzero\":%{public}hhd, \"hAcc\":\"%{public}f\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x38u);
    }
  }
  return v5;
}

uint64_t CLClientGetHeading(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = *(pthread_mutex_t **)(a1 + 240);
  v15[3] = v4;
  pthread_mutex_lock(v4);
  __int16 v16 = 257;
  sub_1906D5844(v15);
  if (a2)
  {
    long long v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 16) = v5;
    long long v6 = *(_OWORD *)(a1 + 88);
    long long v7 = *(_OWORD *)(a1 + 104);
    long long v8 = *(_OWORD *)(a1 + 120);
    *(void *)(a2 + 80) = *(void *)(a1 + 136);
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 32) = v6;
    if (*(int *)(a1 + 40) < 1) {
      goto LABEL_14;
    }
    double v9 = *(double *)(a1 + 48);
    double v10 = *(double *)(a2 + 24) + v9;
    double v11 = 360.0;
    if (v10 >= 360.0)
    {
      double v10 = v10 + -360.0;
    }
    else if (v10 < 0.0)
    {
      double v10 = v10 + 360.0;
    }
    *(double *)(a2 + 24) = v10;
    double v12 = *(double *)(a2 + 32);
    if (v12 < 0.0) {
      goto LABEL_14;
    }
    double v13 = v9 + v12;
    if (v13 >= 360.0)
    {
      double v11 = -360.0;
    }
    else if (v13 >= 0.0)
    {
      goto LABEL_13;
    }
    double v13 = v13 + v11;
LABEL_13:
    *(double *)(a2 + 32) = v13;
LABEL_14:
    a2 = 1;
  }
  sub_1906BFEBC(v15);
  pthread_mutex_unlock(v4);
  return a2;
}

void sub_1906C2664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906C2678(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 896))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1906C2708()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t result = 0;
  int v1 = dword_1EB2723F8;
  switch(dword_1EB2723F8)
  {
    case 0:
    case 261:
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      long long v7 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      int v8 = sub_1906CB57C(115, 0);
      uint64_t result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F630 != -1) {
          goto LABEL_36;
        }
        goto LABEL_15;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      CFTypeID v4 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      int v5 = sub_1906CB57C(115, 0);
      uint64_t result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F630 != -1) {
LABEL_36:
        }
          dispatch_once(&qword_1E929F630, &unk_1EE006560);
LABEL_15:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        uint64_t result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      uint64_t result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 219:
      uint64_t result = 31;
      break;
    case 26:
      uint64_t result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
      uint64_t result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_1EB272498 != -1) {
        dispatch_once(&qword_1EB272498, &unk_1EE002C00);
      }
      BOOL v2 = byte_1EB2723F7 == 0;
      unsigned int v3 = 22;
      goto LABEL_21;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      if (qword_1EB272498 != -1) {
        dispatch_once(&qword_1EB272498, &unk_1EE002C00);
      }
      BOOL v2 = byte_1EB2723F7 == 0;
      unsigned int v3 = 54;
LABEL_21:
      if (v2) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = v3 + 1;
      }
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      uint64_t result = 63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1906C2AD0()
{
  if (qword_1EB2724A0 != -1) {
    dispatch_once(&qword_1EB2724A0, &unk_1EE002C40);
  }
  return qword_1EB2724A8;
}

void *CLClientRequestAuthorization(void *a1, int a2)
{
  sub_1906D5844(v5);
  sub_1906EC244(a1, a2, (uint64_t)v5);
  return sub_1906BFEBC(v5);
}

void sub_1906C2B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *CLClientMarkAsHavingReceivedLocation(uint64_t a1)
{
  sub_1906D5844(v4);
  BOOL v2 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v2);
  sub_1906D5A24(a1, "kCLConnectionMessageMarkAsHavingReceivedLocation", (uint64_t)v4);
  pthread_mutex_unlock(v2);
  return sub_1906BFEBC(v4);
}

void sub_1906C2BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906C2D00(uint64_t a1)
{
  BOOL v2 = *(pthread_mutex_t **)(*(void *)(a1 + 32) + 240);
  pthread_mutex_lock(v2);
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 40)) {
    v3[18] = 1;
  }
  CFRelease(v3);
  return pthread_mutex_unlock(v2);
}

void sub_1906C2D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1906C2D7C(uint64_t a1)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, *(const void **)(a1 + 32));
  uint64_t v3 = *(const void **)(a1 + 32);

  CFRelease(v3);
}

void sub_1906C2DBC(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (([*(id *)(a1 + 32) isGeocoding] & 1) == 0)
  {
    BOOL v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
    if (v2) {
      id v3 = v2;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 8) = [*(id *)(a1 + 56) copy];
    CFTypeID v4 = *(void **)(a1 + 40);
    if (!v4 || ([v4 coordinate], v6 < -180.0) || v6 > 180.0 || v5 > 90.0 || v5 < -90.0)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      __int16 v19 = *(NSObject **)(*(void *)(v18 + 8) + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1907E31E4;
      block[3] = &unk_1E5696BF0;
      block[4] = v18;
      dispatch_async(v19, block);
      return;
    }
    long long v7 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "defaultTraits");
    int v8 = v7;
    if (*(void *)(a1 + 48))
    {
      [v7 clearDeviceDisplayLanguages];
      uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CA20], "canonicalLanguageIdentifierFromString:", objc_msgSend(*(id *)(a1 + 48), "localeIdentifier"));
      if (v9) {
        [v8 addDeviceDisplayLanguage:v9];
      }
    }
    memset(v27, 0, 156);
    int v10 = *(void **)(a1 + 40);
    if (v10) {
      [v10 clientLocation];
    }
    id v11 = (id)[objc_alloc(MEMORY[0x1E4F64660]) _initWithCLClientLocation:v27];
    double v12 = v11;
    double v13 = *(double *)(a1 + 64);
    if (v13 < 0.0 || v13 >= 360.0) {
      double v13 = -1.0;
    }
    [v11 setHeading:v13];
    uint64_t v15 = [*(id *)(a1 + 40) coarseMetaData];
    uint64_t v26 = 0;
    if (!v15) {
      goto LABEL_29;
    }
    uint64_t v16 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v15 error:&v26];
    if (v26)
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005CC0);
      }
      __int16 v17 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v32 = v26;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "Coarse MetaData cannot be decoded while reverse geocoding location, error, %@", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE005CC0);
        }
        int v29 = 138412290;
        uint64_t v30 = v26;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "-[CLGeocoder reverseGeocodeLocation:preferredLocale:heading:localResultsOnly:completionHandler:]_block_invoke", "CoreLocation: %s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
    if (v16)
    {
      [v12 setCoarseMetadata:v16];
    }
    else
    {
LABEL_29:
      [*(id *)(a1 + 40) horizontalAccuracy];
      if (v20 > 1000.0)
      {
        __int16 v21 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "ticketForReverseGeocodeLocation:placeTypeLimit:traits:", v12, 4, v8);
        goto LABEL_32;
      }
    }
    __int16 v21 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "_cl_ticketForReverseGeocodeLocation:traits:", v12, v8);
LABEL_32:
    uint64_t v22 = v21;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 16) = v21;
    if (*(unsigned char *)(a1 + 72))
    {
      [*(id *)(a1 + 32) _ticket:v22 didReturnError:0 partialResultForLocation:*(void *)(a1 + 40)];
    }
    else
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = sub_1906DD860;
      v25[3] = &unk_1E5696FF8;
      uint64_t v23 = *(void *)(a1 + 40);
      v25[4] = *(void *)(a1 + 32);
      v25[5] = v22;
      v25[6] = v23;
      [v22 submitWithHandler:v25 networkActivity:0];
    }
  }
}

void *sub_1906C3250(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_1906C327C()
{
}

uint64_t sub_1906C3284(uint64_t *a1, double *a2, uint64_t *a3, uint64_t ***a4, uint64_t *a5, double a6, double a7)
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  if (!*a5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    CFIndex v31 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_313;
    }
    goto LABEL_402;
  }
  if (!*a3 || !*a4)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v30 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid snap pointers,constructPedestrian", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1)
    {
LABEL_313:
      LOWORD(v257) = 0;
      uint64_t v183 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v183);
      if (v183 != buf) {
        free(v183);
      }
      return 0;
    }
LABEL_402:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    goto LABEL_313;
  }
  sub_19074C1F8(a1);
  uint64_t v15 = *(uint64_t **)*a3;
  int v14 = *(std::__shared_weak_count **)(*a3 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v243 = v14;
  __int16 v17 = **a4;
  uint64_t v16 = (std::__shared_weak_count *)(*a4)[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v242 = v16;
  uint64_t v18 = mach_continuous_time();
  double v19 = sub_1907E1770(v18);
  if (!v15 || !v17)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v33 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&uint8_t buf[4] = a6;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)v280 = v15 != 0;
      *(_WORD *)&v280[4] = 1026;
      *(_DWORD *)&v280[6] = v17 != 0;
      _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,invalid inputs,startRoad,%{public}d,destRoad,%{public}d", buf, 0x18u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v257 = 134349568;
      *(double *)v258 = a6;
      *(_WORD *)&v258[8] = 1026;
      *(_DWORD *)v259 = v15 != 0;
      *(_WORD *)&v259[4] = 1026;
      *(_DWORD *)&v259[6] = v17 != 0;
      uint64_t v184 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v184);
      if (v184 != buf) {
        free(v184);
      }
    }
    uint64_t v29 = 0;
    goto LABEL_78;
  }
  double v20 = v19;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  __int16 v21 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v22 = *v15;
    uint64_t v23 = *v17;
    *(_DWORD *)buf = 134349824;
    *(double *)&uint8_t buf[4] = a6;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)v280 = v22;
    *(_WORD *)&v280[8] = 2050;
    *(void *)&v280[10] = v23;
    *(_WORD *)&v280[18] = 2050;
    *(double *)&v280[20] = a7;
    _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_INFO, "CLTSP,%{public}.3lf,aStarConstruct,constructing between,start,%{public}lld,stop,%{public}lld,maxLength,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v185 = *v15;
    uint64_t v186 = *v17;
    int v257 = 134349824;
    *(double *)v258 = a6;
    *(_WORD *)&v258[8] = 2050;
    *(void *)v259 = v185;
    *(_WORD *)&v259[8] = 2050;
    *(void *)&v259[10] = v186;
    *(_WORD *)&v259[18] = 2050;
    *(double *)&v259[20] = a7;
    v187 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v187);
    if (v187 != buf) {
      free(v187);
    }
  }
  int v24 = operator new(0x68uLL);
  uint64_t v25 = (uint64_t)v24;
  v24[1] = 0;
  v24[2] = 0;
  v24[3] = 0;
  uint64_t v26 = (uint64_t)(v24 + 3);
  *int v24 = &unk_1EE0051F0;
  v24[4] = 0;
  v24[5] = 0;
  *((unsigned char *)v24 + 40) = 1;
  *((_OWORD *)v24 + 3) = 0u;
  *((_OWORD *)v24 + 4) = 0u;
  *((_OWORD *)v24 + 5) = 0u;
  v24[12] = 0;
  v255 = v24 + 3;
  uint64_t v256 = (uint64_t)v24;
  if (v243) {
    atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v27 = sub_1907EEB48((uint64_t)(v24 + 3), a2, (uint64_t)v15, v243);
  if (v243) {
    sub_1906BFE48(v243);
  }
  if ((v27 & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    __int16 v34 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a6;
      _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,unable to init startRouteRoad", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v257 = 134349056;
      *(double *)v258 = a6;
      uint64_t v188 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v188);
      if (v188 != buf) {
        free(v188);
      }
    }
    uint64_t v29 = 0;
    goto LABEL_77;
  }
  if (*v15 == *v17 && v15[1] == v17[1])
  {
    sub_1907EFFC0((unint64_t *)a1, v26, v25);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int v28 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a6;
      _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,start road is same as destination road", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v257 = 134349056;
      *(double *)v258 = a6;
      v189 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v189);
      if (v189 != buf) {
        free(v189);
      }
    }
    uint64_t v29 = 1;
    goto LABEL_77;
  }
  uint64_t v35 = operator new(0x68uLL);
  v35[1] = 0;
  v35[2] = 0;
  *uint64_t v35 = &unk_1EE0051F0;
  v35[3] = 0;
  uint64_t v240 = (uint64_t)v35;
  uint64_t v241 = (uint64_t)(v35 + 3);
  v35[4] = 0;
  v35[5] = 0;
  *((unsigned char *)v35 + 40) = 1;
  *((_OWORD *)v35 + 3) = 0u;
  *((_OWORD *)v35 + 4) = 0u;
  *((_OWORD *)v35 + 5) = 0u;
  v35[12] = 0;
  if (v242) {
    atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = sub_1907EEB48(v241, a2, (uint64_t)v17, v242);
  if (v242) {
    sub_1906BFE48(v242);
  }
  if ((v29 & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v43 = (std::__shared_weak_count *)v240;
    v46 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a6;
      _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,unable to init destinationRouteRoad", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int v257 = 134349056;
    *(double *)v258 = a6;
    BOOL v45 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v45);
    goto LABEL_330;
  }
  char v37 = (float64x2_t *)v15[17];
  uint64_t v36 = (float64x2_t *)v15[18];
  float64x2_t v38 = 0uLL;
  float64x2_t v39 = 0uLL;
  if (v36 != v37) {
    float64x2_t v39 = v36[-1];
  }
  int v40 = (float64x2_t *)v17[17];
  int v41 = (float64x2_t *)v17[18];
  if (v41 != v40) {
    float64x2_t v38 = *v40;
  }
  int32x2_t v42 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v39, v38)));
  if (vand_s8((int8x8_t)v42, (int8x8_t)vdup_lane_s32(v42, 1)).u8[0])
  {
    uint64_t v43 = (std::__shared_weak_count *)v240;
    sub_1907EFFC0((unint64_t *)a1, v26, v25);
    sub_1907EFFC0((unint64_t *)a1, v241, v240);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v44 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a6;
      _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,start road and destination road are neighbors", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_70;
    }
LABEL_403:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
LABEL_70:
    int v257 = 134349056;
    *(double *)v258 = a6;
    BOOL v45 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v45);
LABEL_330:
    if (v45 != buf) {
      free(v45);
    }
    uint64_t v43 = (std::__shared_weak_count *)v240;
LABEL_76:
    sub_1906BFE48(v43);
LABEL_77:
    sub_1906BFE48((std::__shared_weak_count *)v25);
    goto LABEL_78;
  }
  float64x2_t v47 = 0uLL;
  float64x2_t v48 = 0uLL;
  if (v36 != v37) {
    float64x2_t v48 = *v37;
  }
  if (v41 != v40) {
    float64x2_t v47 = v41[-1];
  }
  int32x2_t v49 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v48, v47)));
  if (vand_s8((int8x8_t)v49, (int8x8_t)vdup_lane_s32(v49, 1)).u8[0])
  {
    uint64_t v43 = (std::__shared_weak_count *)v240;
    sub_1907EFFC0((unint64_t *)a1, v241, v240);
    sub_1907EFFC0((unint64_t *)a1, v26, v25);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v50 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a6;
      _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,stop road is behind the start road and is connected to start road", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_403;
  }
  double v51 = 0.0;
  double v52 = 0.0;
  double v53 = 0.0;
  if (v41 != v40)
  {
    double v52 = v40->f64[0];
    double v53 = v40->f64[1];
  }
  double v54 = 0.0;
  if (v36 != v37)
  {
    double v51 = v36[-1].f64[0];
    double v54 = v36[-1].f64[1];
  }
  double v55 = sub_1906DA618(a2, v51, v54, v52, v53, 0.0);
  int v56 = 10 * (int)v55;
  long long v252 = 0u;
  long long v253 = 0u;
  if (v56 >= 25000) {
    int v56 = 25000;
  }
  int v254 = 1065353216;
  long long v249 = 0uLL;
  long long v250 = 0uLL;
  if ((int)v55 >= 300) {
    int v57 = v56;
  }
  else {
    int v57 = 3000;
  }
  int v238 = v57;
  int v251 = 1065353216;
  *(double *)(v25 + 88) = v55;
  sub_1907EF6B4((uint64_t *)&v252, &v255);
  v247 = 0;
  v248 = 0;
  context = (void *)MEMORY[0x192FCF260]();
  char v239 = 0;
  ++*((_DWORD *)a1 + 12);
  *((_DWORD *)a1 + 8) = 0;
  v58 = (double *)v247;
  double v237 = v20;
  if (v247)
  {
LABEL_104:
    int v59 = *(void **)v58;
    if (!*(void *)v58 || *v59 != **(void **)v241 || v59[1] != *(void *)(*(void *)v241 + 8)) {
      goto LABEL_107;
    }
    int v117 = (std::__shared_weak_count *)v240;
    char v130 = v239;
    goto LABEL_214;
  }
  while (1)
  {
LABEL_107:
    int v60 = *((_DWORD *)a1 + 8) + 1;
    *((_DWORD *)a1 + 8) = v60;
    if (v20 >= 0.0)
    {
      uint64_t v61 = mach_continuous_time();
      if (vabdd_f64(sub_1907E1770(v61), v20) * 1000.0 > 240000.0)
      {
        ++*((_DWORD *)a1 + 14);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v117 = (std::__shared_weak_count *)v240;
        v127 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v128 = mach_continuous_time();
          double v129 = sub_1907E1770(v128);
          *(_DWORD *)buf = 134349568;
          *(double *)&uint8_t buf[4] = a6;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)v280 = vabdd_f64(v129, v20) * 1000.0;
          *(_WORD *)&v280[8] = 2050;
          *(void *)&v280[10] = 0x410D4C0000000000;
          _os_log_impl(&dword_1906B8000, v127, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,processing time,%{public}.2lf,exceeded max,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_213;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v215 = mach_continuous_time();
        double v216 = sub_1907E1770(v215);
        int v257 = 134349568;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 2050;
        *(double *)v259 = vabdd_f64(v216, v20) * 1000.0;
        *(_WORD *)&v259[8] = 2050;
        *(void *)&v259[10] = 0x410D4C0000000000;
        int v121 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v121);
LABEL_371:
        if (v121 != buf) {
          free(v121);
        }
        char v130 = 1;
        goto LABEL_374;
      }
      int v60 = *((_DWORD *)a1 + 8);
    }
    if (v60 > v238)
    {
      ++*((_DWORD *)a1 + 7);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v117 = (std::__shared_weak_count *)v240;
      v122 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        int v123 = *((_DWORD *)a1 + 8);
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)v280 = v123;
        *(_WORD *)&v280[4] = 1026;
        *(_DWORD *)&v280[6] = v238;
        _os_log_impl(&dword_1906B8000, v122, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_213;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v124 = *((_DWORD *)a1 + 8);
      int v257 = 134349568;
      *(double *)v258 = a6;
      *(_WORD *)&v258[8] = 1026;
      *(_DWORD *)v259 = v124;
      *(_WORD *)&v259[4] = 1026;
      *(_DWORD *)&v259[6] = v238;
      int v121 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v121);
      goto LABEL_371;
    }
    uint64_t v62 = *a5;
    unint64_t v63 = *(void *)(*a5 + 304);
    if (v63 >= 0x3E9)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1907416A8(v62 + 288, Current, 0.05, 0.05);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      double v65 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        int v66 = *((_DWORD *)a1 + 8);
        uint64_t v67 = *(void *)(*a5 + 304);
        *(_DWORD *)buf = 134349824;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)v280 = v66;
        *(_WORD *)&v280[4] = 2050;
        *(void *)&v280[6] = v63;
        *(_WORD *)&v280[14] = 2050;
        *(void *)&v280[16] = v67;
        _os_log_impl(&dword_1906B8000, v65, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,cleared road connection database,iterations,%{public}d,prevSize,%{public}lu,newSize,%{public}lu", buf, 0x26u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v102 = *((_DWORD *)a1 + 8);
        uint64_t v103 = *(void *)(*a5 + 304);
        int v257 = 134349824;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 1026;
        *(_DWORD *)v259 = v102;
        *(_WORD *)&v259[4] = 2050;
        *(void *)&v259[6] = v63;
        *(_WORD *)&v259[14] = 2050;
        *(void *)&v259[16] = v103;
        double v104 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v104);
        if (v104 != buf) {
          free(v104);
        }
      }
    }
    if (!sub_1907EF940((uint64_t)&v252, &v247) || (v58 = (double *)v247) == 0 || (int v68 = (void *)*v247) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v117 = (std::__shared_weak_count *)v240;
      uint64_t v118 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        int v119 = *((_DWORD *)a1 + 8);
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)v280 = v119;
        *(_WORD *)&v280[4] = 2050;
        *(void *)&v280[6] = *((void *)&v253 + 1);
        _os_log_impl(&dword_1906B8000, v118, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v120 = *((_DWORD *)a1 + 8);
        int v257 = 134349568;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 1026;
        *(_DWORD *)v259 = v120;
        *(_WORD *)&v259[4] = 2050;
        *(void *)&v259[6] = *((void *)&v253 + 1);
        int v121 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v121);
        goto LABEL_371;
      }
LABEL_213:
      char v130 = 1;
      goto LABEL_214;
    }
    if (*v68 == **(void **)v241 && v68[1] == *(void *)(*(void *)v241 + 8)) {
      break;
    }
    v244 = 0;
    v245 = 0;
    uint64_t v246 = 0;
    if ((sub_1907451AC(*a5, v247, (uint64_t *)&v244, 1) & 1) == 0)
    {
      ++*((_DWORD *)a1 + 15);
      double v20 = v237;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v117 = (std::__shared_weak_count *)v240;
      v125 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        int v126 = *((_DWORD *)a1 + 8);
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)v280 = v126;
        *(_WORD *)&v280[4] = 2050;
        *(void *)&v280[6] = *((void *)&v253 + 1);
        _os_log_impl(&dword_1906B8000, v125, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,intersection query failed,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v208 = *((_DWORD *)a1 + 8);
        int v257 = 134349568;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 1026;
        *(_DWORD *)v259 = v208;
        *(_WORD *)&v259[4] = 2050;
        *(void *)&v259[6] = *((void *)&v253 + 1);
        uint64_t v209 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v209);
        if (v209 != buf) {
          free(v209);
        }
        int v117 = (std::__shared_weak_count *)v240;
        double v20 = v237;
      }
      *(void *)buf = &v244;
      sub_1906C6BF0((void ***)buf);
      goto LABEL_213;
    }
    HIDWORD(v69) = -1030792151 * *((_DWORD *)a1 + 8) + 85899344;
    LODWORD(v69) = HIDWORD(v69);
    if ((v69 >> 2) <= 0x28F5C28)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      uint64_t v70 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
      {
        uint64_t v71 = *(void **)v58;
        uint64_t v72 = *(void *)(*(void *)v58 + 144);
        double v73 = 0.0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        if (v72 != *(void *)(*(void *)v58 + 136))
        {
          uint64_t v74 = *(void *)(v72 - 16);
          uint64_t v75 = *(void *)(v72 - 8);
        }
        unint64_t v76 = v244;
        v227 = v245;
        uint64_t v229 = v71[1];
        double v78 = v58[7];
        double v77 = v58[8];
        int v231 = *((_DWORD *)a1 + 8);
        int v235 = *((_DWORD *)v71 + 28);
        uint64_t v233 = v71[16];
        if (v237 >= 0.0)
        {
          uint64_t v79 = mach_continuous_time();
          double v73 = vabdd_f64(sub_1907E1770(v79), v237) * 1000.0;
        }
        *(_DWORD *)buf = 134352641;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)v280 = v229;
        *(_WORD *)&v280[8] = 2050;
        *(void *)&v280[10] = (v227 - (char *)v76) >> 4;
        *(_WORD *)&v280[18] = 2050;
        *(double *)&v280[20] = v78;
        *(_WORD *)&v280[28] = 2050;
        *(double *)v281 = v77;
        *(_WORD *)&v281[8] = 2050;
        *(double *)v282 = v78 + v77;
        *(_WORD *)&v282[8] = 1026;
        int v283 = v231;
        __int16 v284 = 2049;
        uint64_t v285 = v74;
        __int16 v286 = 2049;
        uint64_t v287 = v75;
        __int16 v288 = 1025;
        int v289 = v235;
        __int16 v290 = 2049;
        uint64_t v291 = v233;
        __int16 v292 = 2049;
        double v293 = v73;
        __int16 v294 = 1026;
        int v295 = DWORD2(v253);
        __int16 v296 = 1026;
        int v297 = DWORD2(v250);
        __int16 v298 = 1026;
        int v299 = v238;
        _os_log_impl(&dword_1906B8000, v70, OS_LOG_TYPE_INFO, "CLTSP,%{public}.3lf,aStarConstruct,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d,stopLL,%{private}.7lf,%{private}.7lf,stopJunction,%{private}d,stopAlt,%{private}.2lf,processingTime,%{private}.2lf,openSet,%{public}d,closedSet,%{public}d,iterationThreshold,%{public}d", buf, 0x84u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v105 = *(void *)v58;
        uint64_t v232 = *(void *)(*(void *)v58 + 8);
        v107 = v244;
        double v106 = v245;
        double v109 = v58[7];
        double v108 = v58[8];
        int v234 = *((_DWORD *)a1 + 8);
        uint64_t v110 = *(void *)(*(void *)v58 + 144);
        double v111 = 0.0;
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        if (v110 != *(void *)(*(void *)v58 + 136))
        {
          uint64_t v112 = *(void *)(v110 - 16);
          uint64_t v113 = *(void *)(v110 - 8);
        }
        int v228 = *(_DWORD *)(v105 + 112);
        uint64_t v230 = *(void *)(v105 + 128);
        if (v237 >= 0.0)
        {
          uint64_t v114 = mach_continuous_time();
          double v111 = vabdd_f64(sub_1907E1770(v114), v237) * 1000.0;
        }
        int v257 = 134352641;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 2049;
        *(void *)v259 = v232;
        *(_WORD *)&v259[8] = 2050;
        *(void *)&v259[10] = (v106 - (char *)v107) >> 4;
        *(_WORD *)&v259[18] = 2050;
        *(double *)&v259[20] = v109;
        *(_WORD *)&v259[28] = 2050;
        *(double *)v260 = v108;
        *(_WORD *)&v260[8] = 2050;
        *(double *)v261 = v109 + v108;
        *(_WORD *)&v261[8] = 1026;
        int v262 = v234;
        __int16 v263 = 2049;
        uint64_t v264 = v112;
        __int16 v265 = 2049;
        uint64_t v266 = v113;
        __int16 v267 = 1025;
        int v268 = v228;
        __int16 v269 = 2049;
        uint64_t v270 = v230;
        __int16 v271 = 2049;
        double v272 = v111;
        __int16 v273 = 1026;
        int v274 = DWORD2(v253);
        __int16 v275 = 1026;
        int v276 = DWORD2(v250);
        __int16 v277 = 1026;
        int v278 = v238;
        int v115 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v115);
        if (v115 != buf) {
          free(v115);
        }
      }
    }
    sub_1907EF724((uint64_t *)&v252, (uint64_t)v58);
    double v81 = v244;
    uint64_t v80 = (uint64_t *)v245;
    while (v81 != v80)
    {
      if (!*v81)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        double v97 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&uint8_t buf[4] = a6;
          _os_log_impl(&dword_1906B8000, v97, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,neighbor road is nullptr", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v257 = 134349056;
          *(double *)v258 = a6;
          int v116 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v116);
          if (v116 != buf) {
            free(v116);
          }
        }
        char v239 = 1;
        break;
      }
      uint64_t v82 = *(void *)v58;
      sub_19082373C(*(void *)v58);
      double v83 = *(double *)(v82 + 40);
      if (v255)
      {
        uint64_t v84 = *(void *)v58;
        if (*(void *)v58)
        {
          if (*(void *)v84 == *(void *)*v255 && *(void *)(v84 + 8) == *(void *)(*v255 + 8))
          {
            sub_19082373C(*(void *)v58);
            double v85 = *(double *)(v84 + 40);
            sub_1907EFC40(*a3);
            double v83 = v85 - v86;
          }
        }
      }
      uint64_t v87 = *(void *)(*v81 + 144);
      if (v87 == *(void *)(*v81 + 136))
      {
        double v88 = 0.0;
        double v89 = 0.0;
      }
      else
      {
        double v88 = *(double *)(v87 - 16);
        double v89 = *(double *)(v87 - 8);
      }
      double v90 = v58[7];
      double v91 = sub_1906DA618(a2, v88, v89, v52, v53, 0.0);
      uint64_t v92 = *v81;
      sub_19082373C(*v81);
      double v93 = v91 + *(double *)(v92 + 40);
      if (*(void *)*v81 == *v17 && *(void *)(*v81 + 8) == v17[1]) {
        double v93 = 0.0;
      }
      double v94 = v83 + v90;
      if (a7 <= 0.0 || v94 + v93 <= a7) {
        operator new();
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v95 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)v280 = v94 + v93;
        *(_WORD *)&v280[8] = 2050;
        *(double *)&v280[10] = a7;
        _os_log_impl(&dword_1906B8000, v95, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,route length exceeded max allowed,length,%{public}.1lf,maxLength,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v257 = 134349568;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 2050;
        *(double *)v259 = v94 + v93;
        *(_WORD *)&v259[8] = 2050;
        *(double *)&v259[10] = a7;
        double v96 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v96);
        if (v96 != buf) {
          free(v96);
        }
      }
      v81 += 2;
    }
    if (*(void *)v58)
    {
      double v98 = v58[7];
      double v99 = v58[8];
      *(void *)buf = *(void *)(*(void *)v58 + 8);
      double v100 = (float *)sub_1907F37E8((float *)&v249, *(unint64_t *)buf, buf);
      float v101 = v98 + v99;
      v100[6] = v101;
    }
    *(void *)buf = &v244;
    sub_1906C6BF0((void ***)buf);
    double v20 = v237;
    if (v58) {
      goto LABEL_104;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  int v117 = (std::__shared_weak_count *)v240;
  v143 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v144 = *((_DWORD *)a1 + 8);
    *(_DWORD *)buf = 134349568;
    *(double *)&uint8_t buf[4] = a6;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)v280 = v144;
    *(_WORD *)&v280[4] = 2050;
    *(void *)&v280[6] = *((void *)&v253 + 1);
    _os_log_impl(&dword_1906B8000, v143, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
  }
  if (!sub_1906CB57C(115, 2))
  {
    char v130 = 0;
    goto LABEL_214;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  int v217 = *((_DWORD *)a1 + 8);
  int v257 = 134349568;
  *(double *)v258 = a6;
  *(_WORD *)&v258[8] = 1026;
  *(_DWORD *)v259 = v217;
  *(_WORD *)&v259[4] = 2050;
  *(void *)&v259[6] = *((void *)&v253 + 1);
  uint64_t v218 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v218);
  if (v218 != buf) {
    free(v218);
  }
  char v130 = 0;
LABEL_374:
  int v117 = (std::__shared_weak_count *)v240;
LABEL_214:
  v131 = *(void **)(*a5 + 88);
  if (v131) {
    [v131 clearRoadTiles];
  }
  if ((v130 & 1) == 0)
  {
    v245 = 0;
    uint64_t v246 = 0;
    v244 = (uint64_t *)&v245;
    v137 = v247;
    if (v247)
    {
      int v138 = 501;
      uint64_t v139 = v248;
      while (1)
      {
        if (!v137[5])
        {
          uint64_t v141 = v139;
LABEL_246:
          v247 = v137;
          v248 = v141;
          goto LABEL_247;
        }
        if (!--v138) {
          break;
        }
        v140 = (unint64_t *)*v137;
        if (!*v137)
        {
          v248 = v139;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v179 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&uint8_t buf[4] = a6;
            _os_log_impl(&dword_1906B8000, v179, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search null road", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            int v257 = 134349056;
            *(double *)v258 = a6;
            v224 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v224);
            if (v224 != buf) {
              free(v224);
            }
            int v117 = (std::__shared_weak_count *)v240;
          }
          double v177 = 0.0;
          if (v20 < 0.0) {
            goto LABEL_305;
          }
          goto LABEL_304;
        }
        if (sub_19074BAD4((uint64_t)&v244, (unint64_t *)*v137))
        {
          v248 = v139;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v180 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v181 = *(void *)(*v137 + 8);
            *(_DWORD *)buf = 134349313;
            *(double *)&uint8_t buf[4] = a6;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)v280 = v181;
            _os_log_impl(&dword_1906B8000, v180, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search road already added,%{private}lld", buf, 0x16u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            uint64_t v225 = *(void *)(*v137 + 8);
            int v257 = 134349313;
            *(double *)v258 = a6;
            *(_WORD *)&v258[8] = 2049;
            *(void *)v259 = v225;
            v226 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v226);
            if (v226 != buf) {
              free(v226);
            }
            int v117 = (std::__shared_weak_count *)v240;
          }
          double v177 = 0.0;
          if (v20 < 0.0) {
            goto LABEL_305;
          }
          goto LABEL_304;
        }
        sub_1907EFFC0((unint64_t *)a1, (uint64_t)v137, (uint64_t)v139);
        *(void *)buf = v140;
        *((unsigned char *)sub_19074E748(&v244, v140, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 48) = 1;
        v142 = (uint64_t *)v137[5];
        uint64_t v141 = (std::__shared_weak_count *)v137[6];
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v139) {
          sub_1906BFE48(v139);
        }
        uint64_t v139 = v141;
        v137 = v142;
        if (!v142) {
          goto LABEL_246;
        }
      }
      v248 = v139;
      ++*((_DWORD *)a1 + 6);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      int v178 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)v280 = 501;
        *(_WORD *)&v280[4] = 1026;
        *(_DWORD *)&v280[6] = 500;
        _os_log_impl(&dword_1906B8000, v178, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        int v257 = 134349568;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 1026;
        *(_DWORD *)v259 = 501;
        *(_WORD *)&v259[4] = 1026;
        *(_DWORD *)&v259[6] = 500;
        v223 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v223);
        if (v223 != buf) {
          free(v223);
        }
        int v117 = (std::__shared_weak_count *)v240;
      }
      double v177 = 0.0;
      if (v20 < 0.0) {
        goto LABEL_305;
      }
    }
    else
    {
LABEL_247:
      if (*a1 != a1[1])
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v145 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
        {
          uint64_t v147 = *a1;
          uint64_t v146 = a1[1];
          double v148 = 0.0;
          if (v20 >= 0.0)
          {
            uint64_t v149 = mach_continuous_time();
            double v148 = vabdd_f64(sub_1907E1770(v149), v20) * 1000.0;
          }
          *(_DWORD *)buf = 134349569;
          *(double *)&uint8_t buf[4] = a6;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)v280 = (v146 - v147) >> 4;
          *(_WORD *)&v280[8] = 2049;
          *(double *)&v280[10] = v148;
          _os_log_impl(&dword_1906B8000, v145, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,aStarConstruct,constructed,roadCount,%{private}lu,processingTime,%{private}.2lf", buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          double v193 = 0.0;
          uint64_t v195 = *a1;
          uint64_t v194 = a1[1];
          if (v20 >= 0.0)
          {
            uint64_t v196 = mach_continuous_time();
            double v193 = vabdd_f64(sub_1907E1770(v196), v20) * 1000.0;
          }
          int v257 = 134349569;
          *(double *)v258 = a6;
          *(_WORD *)&v258[8] = 2049;
          *(void *)v259 = (v194 - v195) >> 4;
          *(_WORD *)&v259[8] = 2049;
          *(double *)&v259[10] = v193;
          v197 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v197);
          if (v197 != buf) {
            free(v197);
          }
          int v117 = (std::__shared_weak_count *)v240;
        }
        v150 = v255;
        if (!sub_19074BAD4((uint64_t)&v244, (unint64_t *)*v255))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v151 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v152 = *(void *)(*v150 + 8);
            double v153 = 0.0;
            if (v20 >= 0.0)
            {
              uint64_t v154 = mach_continuous_time();
              double v153 = vabdd_f64(sub_1907E1770(v154), v20) * 1000.0;
            }
            *(_DWORD *)buf = 134349569;
            *(double *)&uint8_t buf[4] = a6;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)v280 = v152;
            *(_WORD *)&v280[8] = 2049;
            *(double *)&v280[10] = v153;
            _os_log_impl(&dword_1906B8000, v151, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,aStarConstruct,added first road,%{private}lld,processingTime,%{private}.2lf", buf, 0x20u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            uint64_t v219 = *(void *)(*v150 + 8);
            double v220 = 0.0;
            if (v20 >= 0.0)
            {
              uint64_t v221 = mach_continuous_time();
              double v220 = vabdd_f64(sub_1907E1770(v221), v20) * 1000.0;
            }
            int v257 = 134349569;
            *(double *)v258 = a6;
            *(_WORD *)&v258[8] = 2049;
            *(void *)v259 = v219;
            *(_WORD *)&v259[8] = 2049;
            *(double *)&v259[10] = v220;
            v222 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v222);
            if (v222 != buf) {
              free(v222);
            }
            int v117 = (std::__shared_weak_count *)v240;
          }
          sub_1907EFFC0((unint64_t *)a1, (uint64_t)v150, v256);
        }
        int v155 = (uint64_t *)*a1;
        uint64_t v156 = a1[1];
        if (*a1 != v156)
        {
          for (i = (uint64_t *)(v156 - 16); v155 < i; i -= 2)
          {
            uint64_t v158 = *v155;
            *int v155 = *i;
            uint64_t *i = v158;
            uint64_t v159 = v155[1];
            v155[1] = i[1];
            i[1] = v159;
            v155 += 2;
          }
        }
        double v160 = 0.0;
        if (v20 >= 0.0)
        {
          uint64_t v161 = mach_continuous_time();
          double v160 = vabdd_f64(sub_1907E1770(v161), v20) * 1000.0;
        }
        *((double *)a1 + 5) = v160;
        *((double *)a1 + 8) = v160 + *((double *)a1 + 8);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        v162 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
        {
          int v163 = *((_DWORD *)a1 + 12);
          int v164 = *((_DWORD *)a1 + 13);
          int v165 = *((_DWORD *)a1 + 6);
          int v166 = *((_DWORD *)a1 + 7);
          int v167 = *((_DWORD *)a1 + 8);
          int v168 = *((_DWORD *)a1 + 14);
          int v169 = *((_DWORD *)a1 + 15);
          uint64_t v170 = a1[5];
          uint64_t v171 = a1[8];
          *(_DWORD *)buf = 67242240;
          *(_DWORD *)&uint8_t buf[4] = v163;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v164;
          *(_WORD *)v280 = 1026;
          *(_DWORD *)&v280[2] = v165;
          *(_WORD *)&v280[6] = 1026;
          *(_DWORD *)&v280[8] = v166;
          *(_WORD *)&v280[12] = 1026;
          *(_DWORD *)&v280[14] = v168;
          *(_WORD *)&v280[18] = 1026;
          *(_DWORD *)&v280[20] = v167;
          *(_WORD *)&v280[24] = 1026;
          *(_DWORD *)&v280[26] = v169;
          *(_WORD *)v281 = 2050;
          *(void *)&v281[2] = v170;
          *(_WORD *)v282 = 2050;
          *(void *)&v282[2] = v171;
          _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,AStar Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v198 = *((_DWORD *)a1 + 12);
          int v199 = *((_DWORD *)a1 + 13);
          int v200 = *((_DWORD *)a1 + 6);
          int v201 = *((_DWORD *)a1 + 7);
          int v202 = *((_DWORD *)a1 + 8);
          int v203 = *((_DWORD *)a1 + 14);
          int v204 = *((_DWORD *)a1 + 15);
          uint64_t v205 = a1[5];
          uint64_t v206 = a1[8];
          int v257 = 67242240;
          *(_DWORD *)v258 = v198;
          *(_WORD *)&v258[4] = 1026;
          *(_DWORD *)&v258[6] = v199;
          *(_WORD *)v259 = 1026;
          *(_DWORD *)&v259[2] = v200;
          *(_WORD *)&v259[6] = 1026;
          *(_DWORD *)&v259[8] = v201;
          *(_WORD *)&v259[12] = 1026;
          *(_DWORD *)&v259[14] = v203;
          *(_WORD *)&v259[18] = 1026;
          *(_DWORD *)&v259[20] = v202;
          *(_WORD *)&v259[24] = 1026;
          *(_DWORD *)&v259[26] = v204;
          *(_WORD *)v260 = 2050;
          *(void *)&v260[2] = v205;
          *(_WORD *)v261 = 2050;
          *(void *)&v261[2] = v206;
          v207 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v207);
          if (v207 != buf) {
            free(v207);
          }
          uint64_t v29 = 1;
          int v117 = (std::__shared_weak_count *)v240;
        }
        else
        {
          uint64_t v29 = 1;
        }
        goto LABEL_306;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      v172 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v174 = *a1;
        uint64_t v173 = a1[1];
        double v175 = 0.0;
        if (v20 >= 0.0)
        {
          uint64_t v176 = mach_continuous_time();
          double v175 = vabdd_f64(sub_1907E1770(v176), v20) * 1000.0;
        }
        *(_DWORD *)buf = 134349569;
        *(double *)&uint8_t buf[4] = a6;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)v280 = (v173 - v174) >> 4;
        *(_WORD *)&v280[8] = 2049;
        *(double *)&v280[10] = v175;
        _os_log_impl(&dword_1906B8000, v172, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,constructed route is empty,roadCount,%{private}lu,processingTime,%{private}.2lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        double v210 = 0.0;
        uint64_t v212 = *a1;
        uint64_t v211 = a1[1];
        if (v20 >= 0.0)
        {
          uint64_t v213 = mach_continuous_time();
          double v210 = vabdd_f64(sub_1907E1770(v213), v20) * 1000.0;
        }
        int v257 = 134349569;
        *(double *)v258 = a6;
        *(_WORD *)&v258[8] = 2049;
        *(void *)v259 = (v211 - v212) >> 4;
        *(_WORD *)&v259[8] = 2049;
        *(double *)&v259[10] = v210;
        long long v214 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v214);
        if (v214 != buf) {
          free(v214);
        }
        int v117 = (std::__shared_weak_count *)v240;
      }
      double v177 = 0.0;
      if (v20 < 0.0)
      {
LABEL_305:
        uint64_t v29 = 0;
        *((double *)a1 + 5) = v177;
        *((double *)a1 + 8) = v177 + *((double *)a1 + 8);
LABEL_306:
        sub_19074E308((uint64_t)&v244, v245);
        goto LABEL_307;
      }
    }
LABEL_304:
    uint64_t v182 = mach_continuous_time();
    double v177 = vabdd_f64(sub_1907E1770(v182), v20) * 1000.0;
    goto LABEL_305;
  }
  ++*((_DWORD *)a1 + 13);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  v132 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
  {
    double v133 = 0.0;
    if (v20 >= 0.0)
    {
      uint64_t v134 = mach_continuous_time();
      double v133 = vabdd_f64(sub_1907E1770(v134), v20) * 1000.0;
    }
    *(_DWORD *)buf = 134349313;
    *(double *)&uint8_t buf[4] = a6;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)v280 = v133;
    _os_log_impl(&dword_1906B8000, v132, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,aStarConstruct,search failed,processingTime,%{private}.2lf", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    double v190 = 0.0;
    if (v20 >= 0.0)
    {
      uint64_t v191 = mach_continuous_time();
      double v190 = vabdd_f64(sub_1907E1770(v191), v20) * 1000.0;
    }
    int v257 = 134349313;
    *(double *)v258 = a6;
    *(_WORD *)&v258[8] = 2049;
    *(double *)v259 = v190;
    v192 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v192);
    if (v192 != buf) {
      free(v192);
    }
    int v117 = (std::__shared_weak_count *)v240;
  }
  double v135 = 0.0;
  if (v20 >= 0.0)
  {
    uint64_t v136 = mach_continuous_time();
    double v135 = vabdd_f64(sub_1907E1770(v136), v20) * 1000.0;
  }
  uint64_t v29 = 0;
  *((double *)a1 + 5) = v135;
  *((double *)a1 + 8) = v135 + *((double *)a1 + 8);
LABEL_307:
  if (v248) {
    sub_1906BFE48(v248);
  }
  sub_1907A7A84((uint64_t)&v249);
  sub_1907F3BD8((uint64_t)&v252);
  uint64_t v25 = v256;
  sub_1906BFE48(v117);
  if (v25) {
    goto LABEL_77;
  }
LABEL_78:
  if (v242) {
    sub_1906BFE48(v242);
  }
  if (v243) {
    sub_1906BFE48(v243);
  }
  return v29;
}

void sub_1906C6A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,std::__shared_weak_count *a37,char a38,void *a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  if (a42) {
    sub_1906BFE48(a42);
  }
  sub_1907A7A84((uint64_t)&a43);
  sub_1907F3BD8((uint64_t)&a49);
  sub_1906BFE48(a34);
  if (a56) {
    sub_1906BFE48(a56);
  }
  if (a36) {
    sub_1906BFE48(a36);
  }
  if (a37) {
    sub_1906BFE48(a37);
  }
  _Unwind_Resume(a1);
}

void sub_1906C6BF0(void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_19074C1F8((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1906C7090(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v1 = *(void **)(*(void *)(*(void *)(result + 32) + 8) + 16);
  if (v1 == *(void **)(result + 40))
  {
    uint64_t v2 = result;

    *(void *)(*(void *)(*(void *)(v2 + 32) + 8) + 16) = 0;
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    CFTypeID v4 = *(void **)(v2 + 48);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = +[CLPlacemark placemarkWithGEOMapItem:*(void *)(*((void *)&v12 + 1) + 8 * i)];
          if (v9) {
            [v3 addObject:v9];
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }
    uint64_t v10 = [v3 count];
    id v11 = *(void **)(v2 + 32);
    if (v10) {
      return [v11 _notifyResult:v3];
    }
    else {
      return [v11 _notifyNoResult];
    }
  }
  return result;
}

void sub_1906C71F4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = (void *)[*(id *)(a1 + 32) delegate];
    uint64_t v3 = [*(id *)(a1 + 32) locationManagerRoutine];
    uint64_t v4 = *(void *)(a1 + 40);
    [v2 locationManager:v3 didUpdateLocations:v4];
  }
  else
  {
    if (qword_1E929F5E0 != -1) {
      dispatch_once(&qword_1E929F5E0, &unk_1EE0055C0);
    }
    uint64_t v5 = qword_1E929F5E8;
    if (os_log_type_enabled((os_log_t)qword_1E929F5E8, OS_LOG_TYPE_DEBUG))
    {
      v6[0] = 68289026;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations to RT, not respondsToSelector @selector(locationManager:didUpdateLocations:)\"}", (uint8_t *)v6, 0x12u);
    }
  }
}

uint64_t sub_1906C7350(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v351 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)(a1 + 384);
  if (*a2)
  {
    uint64_t v242 = 0;
    unint64_t v243 = 0;
    unint64_t v244 = 0;
    sub_1906DDB40(&v242, 0x60uLL);
    if (*(double *)(a3 + 264) <= 0.0)
    {
      long long v14 = *(uint64_t **)(a1 + 40);
      unsigned int v10 = 96;
      if (&v242 != (uint64_t *)(a1 + 40))
      {
        long long v15 = *(uint64_t **)(a1 + 48);
        unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - (char *)v14) >> 4);
        if (v16 <= 0x5F) {
          sub_19084F698(&v242, v14, v15, v16);
        }
      }
LABEL_47:
      uint64_t v25 = *(void *)(a1 + 40);
      *(unsigned char *)(a1 + 88) = 0;
      uint64_t v26 = *(void *)(a1 + 48) - v25;
      if (!v26) {
        goto LABEL_136;
      }
      unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 4);
      uint64_t v29 = (float **)(a1 + 64);
      int v28 = *(void **)(a1 + 64);
      unint64_t v30 = v27;
      if (v28)
      {
        *(void *)(a1 + 72) = v28;
        operator delete(v28);
        unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4);
      }
      void *v29 = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      sub_1907C72B0((void **)(a1 + 64), v30);
      *(void *)(a1 + 96) = 0xBFF0000000000000;
      CFIndex v31 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      if (sub_19083CDDC((double **)(a1 + 40), v3))
      {
        uint64_t v32 = *(void *)(a1 + 40);
        uint64_t v33 = *(void *)(a1 + 48);
        if (v32 == v33)
        {
          double v36 = 0.0;
        }
        else
        {
          uint64_t v226 = a3;
          __int16 v34 = (void *)(a1 + 80);
          uint64_t v35 = *(float **)(a1 + 72);
          double v36 = 0.0;
          double v37 = 0.0;
          do
          {
            double v38 = *(double *)(v32 + 64);
            double v37 = v37 + v38;
            float v39 = v37;
            if ((unint64_t)v35 >= *v34)
            {
              int v41 = *v29;
              uint64_t v42 = v35 - *v29;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                sub_190718FD4();
              }
              uint64_t v44 = *v34 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                v46 = (char *)sub_19074E100((uint64_t)v34, v45);
                int v41 = *(float **)(a1 + 64);
                uint64_t v35 = *(float **)(a1 + 72);
              }
              else
              {
                v46 = 0;
              }
              float64x2_t v47 = (float *)&v46[4 * v42];
              *float64x2_t v47 = v39;
              int v40 = v47 + 1;
              while (v35 != v41)
              {
                int v48 = *((_DWORD *)v35-- - 1);
                *((_DWORD *)v47-- - 1) = v48;
              }
              *(void *)(a1 + 64) = v47;
              *(void *)(a1 + 72) = v40;
              *(void *)(a1 + 80) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *uint64_t v35 = v39;
              int v40 = v35 + 1;
            }
            double v36 = v36 + v38 * v38;
            *(void *)(a1 + 72) = v40;
            v32 += 112;
            uint64_t v35 = v40;
          }
          while (v32 != v33);
          CFIndex v31 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
          if (v36 > 0.0)
          {
            uint64_t v49 = v242;
            *(double *)(a1 + 96) = 1.0 / v36;
            unint64_t v50 = v243;
            *(_DWORD *)buf = 0;
            sub_1907D6360(__p, v27, buf);
            a3 = v226;
            unint64_t v51 = 0x9249249249249249 * ((uint64_t)(v50 - v49) >> 4) + v10;
            if (v51)
            {
              for (uint64_t i = 0; i != v51; ++i)
              {
                uint64_t v53 = random();
                double v54 = *(float **)(a1 + 64);
                double v55 = *(float **)(a1 + 72);
                if (v55 != v54)
                {
                  unint64_t v56 = v55 - v54;
                  double v55 = *(float **)(a1 + 64);
                  do
                  {
                    unint64_t v57 = v56 >> 1;
                    v58 = &v55[v56 >> 1];
                    float v60 = *v58;
                    int v59 = v58 + 1;
                    v56 += ~(v56 >> 1);
                    if (v60 < (float)((float)v53 * 4.6566e-10)) {
                      double v55 = v59;
                    }
                    else {
                      unint64_t v56 = v57;
                    }
                  }
                  while (v56);
                }
                ++*(_DWORD *)(*(void *)__p + (((char *)v55 - (char *)v54) << 30 >> 30));
              }
            }
            uint64_t v62 = *(void *)(a1 + 40);
            unint64_t v61 = *(void *)(a1 + 48);
            if (v62 == v61)
            {
              unint64_t v61 = *(void *)(a1 + 40);
            }
            else
            {
              unint64_t v63 = 0;
              uint64_t v64 = *(void *)__p;
              do
              {
                if (v63 >= (*(void *)&__p[8] - v64) >> 2) {
                  break;
                }
                if (*(int *)(v64 + 4 * v63) >= 1)
                {
                  int v65 = 0;
                  unint64_t v66 = v243;
                  do
                  {
                    if (v66 >= v244)
                    {
                      unint64_t v66 = sub_1907D5EFC(&v242, v62);
                    }
                    else
                    {
                      sub_1907D6024((uint64_t)&v244, v66, v62);
                      v66 += 112;
                    }
                    unint64_t v243 = v66;
                    ++v65;
                    uint64_t v64 = *(void *)__p;
                  }
                  while (v65 < *(_DWORD *)(*(void *)__p + 4 * v63));
                  unint64_t v61 = *(void *)(a1 + 48);
                }
                v62 += 112;
                ++v63;
              }
              while (v62 != v61);
            }
            unint64_t v72 = v243;
            unint64_t v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v243 - v242) >> 4);
            if (v73 <= v10)
            {
              uint64_t v76 = *(void *)(a1 + 40);
              *(void *)(a1 + 40) = v242;
              *(void *)(a1 + 48) = v72;
              uint64_t v242 = v76;
              unint64_t v243 = v61;
              unint64_t v77 = *(void *)(a1 + 56);
              *(void *)(a1 + 56) = v244;
              unint64_t v244 = v77;
              *(unsigned char *)(a1 + 88) = 1;
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              double v78 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v79 = *(void *)(a1 + 96);
                *(_DWORD *)buf = 134349312;
                *(double *)&uint8_t buf[4] = v3;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = v79;
                _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Resampled,Neff,%{public}lf", buf, 0x16u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v225 = *(void *)(a1 + 96);
                *(_DWORD *)int v276 = 134349312;
                *(double *)&v276[4] = v3;
                *(_WORD *)&v276[12] = 2050;
                *(void *)&v276[14] = v225;
                uint64_t v75 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v75);
                goto LABEL_383;
              }
            }
            else
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v74 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349312;
                *(double *)&uint8_t buf[4] = v3;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&unsigned char buf[14] = v73;
                _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected number of particles after resampling,%{public}d", buf, 0x12u);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                *(_DWORD *)int v276 = 134349312;
                *(double *)&v276[4] = v3;
                *(_WORD *)&v276[12] = 1026;
                *(_DWORD *)&v276[14] = v73;
                uint64_t v75 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v75);
LABEL_383:
                if (v75 != buf) {
                  free(v75);
                }
                a3 = v226;
                CFIndex v31 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
              }
            }
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            if (v73 <= v10)
            {
LABEL_136:
              uint64_t v227 = a3;
              sub_19083C6B8(a1 + 104);
              uint64_t v80 = *(void *)(a1 + 40);
              uint64_t v238 = *(void *)(a1 + 48);
              if (v80 != v238)
              {
                double v237 = (uint64_t **)(a1 + 112);
                __asm { FMOV            V0.2D, #-1.0 }
                long long v229 = _Q0;
                do
                {
                  double v85 = *(long long **)v80;
                  double v86 = *(std::__shared_weak_count **)(v80 + 8);
                  if (v86)
                  {
                    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
                    char v87 = *(unsigned char *)(v80 + 20);
                    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
                    long long v240 = *v85;
                    sub_1906BFE48(v86);
                    sub_1906BFE48(v86);
                    long long v88 = v240;
                  }
                  else
                  {
                    char v87 = *(unsigned char *)(v80 + 20);
                    long long v88 = *v85;
                  }
                  *(_OWORD *)__p = v88;
                  __p[16] = v87;
                  if (sub_19084F3B0(*(void *)(a1 + 120), (uint64_t *)__p))
                  {
                    double v89 = (uint64_t *)sub_19084F444(v237, (uint64_t *)__p, (uint64_t)__p);
                    if (!sub_19083AC84(v89 + 7, v80)) {
                      goto LABEL_288;
                    }
                  }
                  else
                  {
                    *(void *)buf = 0xBFF0000000000000;
                    *(void *)&uint8_t buf[8] = 0;
                    *(void *)&uint8_t buf[16] = 0;
                    int v278 = 0;
                    __int16 v279 = 1;
                    *(_DWORD *)&v280[2] = 0;
                    *(_OWORD *)&v281[4] = 0u;
                    long long v282 = 0u;
                    long long v283 = 0u;
                    LOBYTE(v284) = 0;
                    memset(v287, 0, sizeof(v287));
                    long long v288 = 0u;
                    char v289 = 1;
                    __int16 v290 = 0;
                    uint64_t v292 = 0;
                    uint64_t v293 = 0;
                    uint64_t v291 = 0;
                    long long v294 = v229;
                    uint64_t v295 = 0;
                    uint64_t v296 = 0;
                    unint64_t v297 = 0xBFF0000000000000;
                    uint64_t v309 = 0;
                    int v310 = 0;
                    memset(&v307[32], 0, 32);
                    __int16 v308 = 0;
                    long long v311 = 0u;
                    long long v312 = 0u;
                    long long v313 = 0u;
                    memset(v314, 0, 27);
                    memset(&v314[32], 0, 48);
                    long long v306 = 0u;
                    memset(v307, 0, 30);
                    long long v304 = 0u;
                    long long v305 = 0u;
                    long long v302 = 0u;
                    long long v303 = 0u;
                    long long v300 = 0u;
                    long long v301 = 0u;
                    long long v298 = 0u;
                    long long v299 = 0u;
                    unint64_t v316 = 0xBFF0000000000000;
                    uint64_t v315 = 0;
                    uint64_t v317 = 0;
                    uint64_t v318 = 0;
                    unint64_t v319 = 0xBFF0000000000000;
                    unint64_t v320 = 0xBFF0000000000000;
                    uint64_t v321 = 0;
                    uint64_t v322 = 0;
                    unint64_t v323 = 0xBFF0000000000000;
                    uint64_t v335 = 0;
                    int v336 = 0;
                    __int16 v334 = 0;
                    memset(&v333[32], 0, 32);
                    long long v339 = 0u;
                    memset(v340, 0, 27);
                    long long v337 = 0u;
                    long long v338 = 0u;
                    memset(&v340[32], 0, 48);
                    long long v332 = 0u;
                    memset(v333, 0, 30);
                    long long v330 = 0u;
                    long long v331 = 0u;
                    long long v328 = 0u;
                    long long v329 = 0u;
                    long long v326 = 0u;
                    long long v327 = 0u;
                    long long v324 = 0u;
                    long long v325 = 0u;
                    uint64_t v341 = 0;
                    long long v342 = xmmword_1908860D0;
                    uint64_t v347 = 0;
                    uint64_t v348 = 0;
                    int v346 = 0;
                    long long v345 = 0u;
                    long long v343 = 0u;
                    memset(v344, 0, sizeof(v344));
                    char v349 = 1;
                    int v350 = -1;
                    if (!sub_19083AC84((uint64_t *)buf, v80))
                    {
                      if (*((void *)&v345 + 1)) {
                        sub_1906BFE48(*((std::__shared_weak_count **)&v345 + 1));
                      }
                      *(void *)int v276 = &v344[8];
                      sub_1907D5AB4((void ***)v276);
                      if (SHIBYTE(v329) < 0) {
                        operator delete(*((void **)&v328 + 1));
                      }
                      if (SHIBYTE(v303) < 0) {
                        operator delete(*((void **)&v302 + 1));
                      }
                      if (v287[0])
                      {
                        v287[1] = v287[0];
                        operator delete(v287[0]);
                      }
                      if (*(void *)&buf[16]) {
                        sub_1906BFE48(*(std::__shared_weak_count **)&buf[16]);
                      }
LABEL_288:
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      int v204 = off_1E929F6C8;
                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(double *)&uint8_t buf[4] = v3;
                        _os_log_impl(&dword_1906B8000, v204, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate update failed", buf, 0xCu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6C0 == -1) {
                          goto LABEL_378;
                        }
LABEL_397:
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_378:
                        *(_DWORD *)__p = 134349056;
                        *(double *)&__p[4] = v3;
                        v224 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v224);
                        if (v224 != buf) {
                          free(v224);
                        }
                      }
                      goto LABEL_351;
                    }
                    *(double *)buf = v3;
                    double v90 = sub_19084F444(v237, (uint64_t *)__p, (uint64_t)__p);
                    sub_19083C734((uint64_t)v90 + 56, (uint64_t)buf);
                    if (*((void *)&v345 + 1)) {
                      sub_1906BFE48(*((std::__shared_weak_count **)&v345 + 1));
                    }
                    *(void *)int v276 = &v344[8];
                    sub_1907D5AB4((void ***)v276);
                    if (SHIBYTE(v329) < 0) {
                      operator delete(*((void **)&v328 + 1));
                    }
                    if (SHIBYTE(v303) < 0) {
                      operator delete(*((void **)&v302 + 1));
                    }
                    if (v287[0])
                    {
                      v287[1] = v287[0];
                      operator delete(v287[0]);
                    }
                    if (*(void *)&buf[16]) {
                      sub_1906BFE48(*(std::__shared_weak_count **)&buf[16]);
                    }
                  }
                  v80 += 112;
                }
                while (v80 != v238);
              }
              *(double *)(a1 + 104) = v3;
              double v91 = (std::__shared_weak_count *)a2[1];
              uint64_t v236 = *a2;
              if (v91) {
                atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v92 = a1;
              uint64_t v93 = *(void *)(a1 + 384);
              if (v236)
              {
                if (*(void *)(a1 + 128))
                {
                  double v94 = *(uint64_t **)(a1 + 112);
                  char v95 = 1;
                  uint64_t v241 = (uint64_t *)(a1 + 120);
                  if (v94 == (uint64_t *)(a1 + 120))
                  {
                    uint64_t v199 = v227;
LABEL_334:
                    if (v91) {
                      sub_1906BFE48(v91);
                    }
                    if ((v95 & 1) == 0)
                    {
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      uint64_t v212 = off_1E929F6C8;
                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(double *)&uint8_t buf[4] = v3;
                        _os_log_impl(&dword_1906B8000, v212, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,assessCandidates failed", buf, 0xCu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6C0 == -1) {
                          goto LABEL_378;
                        }
                        goto LABEL_397;
                      }
                      goto LABEL_351;
                    }
                    if ((sub_19083D7B4(v92, v199) & 1) == 0)
                    {
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      uint64_t v213 = off_1E929F6C8;
                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(double *)&uint8_t buf[4] = v3;
                        _os_log_impl(&dword_1906B8000, v213, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution failed", buf, 0xCu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6C0 != -1) {
                          goto LABEL_397;
                        }
                        goto LABEL_378;
                      }
                      goto LABEL_351;
                    }
                    uint64_t v13 = 1;
LABEL_352:
                    *(void *)buf = &v242;
                    sub_1907D5AB4((void ***)buf);
                    return v13;
                  }
                  uint64_t v230 = v91;
                  int v234 = (const std::string *)(a1 + 504);
                  int v235 = (long long *)(a1 + 376);
                  __src = (void *)(a1 + 528);
                  while (v94[141] != v94[140])
                  {
                    uint64_t v96 = v94[143];
                    sub_19082373C(v96);
                    double v97 = v94 + 143;
                    if (*(double *)(v96 + 40) <= 0.0)
                    {
                      double v103 = 0.0;
                      double v104 = 1.0;
                    }
                    else
                    {
                      uint64_t v98 = v94[141];
                      uint64_t v99 = v94[140];
                      if (v98 == v99)
                      {
                        double v102 = 0.0;
                      }
                      else
                      {
                        uint64_t v100 = 0x6DB6DB6DB6DB6DB7 * ((v98 - v99) >> 4);
                        double v101 = 0.0;
                        do
                        {
                          double v101 = v101 + *(double *)(v99 + 48);
                          v99 += 112;
                        }
                        while (v99 != v98);
                        double v102 = v101 / (double)(unint64_t)v100;
                      }
                      uint64_t v105 = *v97;
                      sub_19082373C(*v97);
                      double v106 = 40.0 / *(double *)(v105 + 40);
                      if (v106 > 1.0) {
                        double v106 = 1.0;
                      }
                      if (v102 - v106 >= 0.0) {
                        double v103 = v102 - v106;
                      }
                      else {
                        double v103 = 0.0;
                      }
                      double v107 = v102 + v106;
                      if (v107 <= 1.0) {
                        double v104 = v107;
                      }
                      else {
                        double v104 = 1.0;
                      }
                    }
                    uint64_t v108 = v94[140];
                    uint64_t v109 = v94[141];
                    if (v108 == v109)
                    {
                      uint64_t v118 = v94[140];
                    }
                    else
                    {
                      do
                      {
                        double v110 = *(double *)(v108 + 48);
                        if (v110 >= v103 && v110 <= v104)
                        {
                          ++*((_DWORD *)v94 + 44);
                          if (*(double *)(v108 + 56) > *((double *)v94 + 15))
                          {
                            uint64_t v113 = *(void *)v108;
                            uint64_t v112 = *(void *)(v108 + 8);
                            if (v112) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v112 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v114 = (std::__shared_weak_count *)v94[9];
                            v94[8] = v113;
                            v94[9] = v112;
                            if (v114) {
                              sub_1906BFE48(v114);
                            }
                            long long v115 = *(_OWORD *)(v108 + 16);
                            long long v116 = *(_OWORD *)(v108 + 32);
                            v94[14] = *(void *)(v108 + 48);
                            *((_OWORD *)v94 + 5) = v115;
                            *((_OWORD *)v94 + 6) = v116;
                            long long v117 = *(_OWORD *)(v108 + 56);
                            *(_OWORD *)((char *)v94 + 129) = *(_OWORD *)(v108 + 65);
                            *(_OWORD *)(v94 + 15) = v117;
                            if ((uint64_t *)v108 != v94 + 8) {
                              sub_1907B5974((char *)v94 + 152, *(char **)(v108 + 88), *(void *)(v108 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v108 + 96) - *(void *)(v108 + 88)) >> 3));
                            }
                          }
                        }
                        v108 += 112;
                      }
                      while (v108 != v109);
                      uint64_t v118 = v94[141];
                      uint64_t v108 = v94[140];
                      double v97 = v94 + 143;
                    }
                    *((_DWORD *)v94 + 45) = -1227133513 * ((unint64_t)(v118 - v108) >> 4);
                    long long v119 = *v235;
                    long long v120 = *(_OWORD *)(a1 + 392);
                    long long v121 = *(_OWORD *)(a1 + 424);
                    *((_OWORD *)v94 + 16) = *(_OWORD *)(a1 + 408);
                    *((_OWORD *)v94 + 17) = v121;
                    *((_OWORD *)v94 + 14) = v119;
                    *((_OWORD *)v94 + 15) = v120;
                    long long v122 = *(_OWORD *)(a1 + 440);
                    long long v123 = *(_OWORD *)(a1 + 456);
                    long long v124 = *(_OWORD *)(a1 + 488);
                    *((_OWORD *)v94 + 20) = *(_OWORD *)(a1 + 472);
                    *((_OWORD *)v94 + 21) = v124;
                    *((_OWORD *)v94 + 18) = v122;
                    *((_OWORD *)v94 + 19) = v123;
                    std::string::operator=((std::string *)(v94 + 44), v234);
                    memcpy(v94 + 47, __src, 0x118uLL);
                    uint64_t v125 = v94[141];
                    uint64_t v126 = v94[140];
                    if (v125 == v126)
                    {
                      double v129 = 0.0;
                    }
                    else
                    {
                      uint64_t v127 = 0x6DB6DB6DB6DB6DB7 * ((v125 - v126) >> 4);
                      double v128 = 0.0;
                      do
                      {
                        double v128 = v128 + *(double *)(v126 + 48);
                        v126 += 112;
                      }
                      while (v126 != v125);
                      double v129 = v128 / (double)(unint64_t)v127;
                    }
                    double v246 = v129;
                    if ((sub_19081203C(v236, (uint64_t)(v94 + 28), v97, *((unsigned char *)v94 + 48), &v246, 1) & 1) == 0)
                    {
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      uint64_t v199 = v227;
                      uint64_t v92 = a1;
                      double v91 = v230;
                      v207 = off_1E929F6C8;
                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(void *)&uint8_t buf[4] = v93;
                        _os_log_impl(&dword_1906B8000, v207, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining mean road position", buf, 0xCu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6C0 != -1) {
                          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                        }
                        *(_DWORD *)__p = 134349056;
                        *(void *)&__p[4] = v93;
                        int v208 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v208);
                        if (v208 != buf) {
                          free(v208);
                        }
                        uint64_t v199 = v227;
                        uint64_t v92 = a1;
                        double v91 = v230;
                      }
                      goto LABEL_333;
                    }
                    double v130 = *((double *)v94 + 136);
                    int v131 = *((unsigned __int8 *)v94 + 48);
                    uint64_t v132 = v94[143];
                    sub_19082373C(v132);
                    double v133 = 1.0 - v130;
                    if (!v131) {
                      double v133 = v130;
                    }
                    double v134 = v133 * *(double *)(v132 + 40);
                    *(void *)int v276 = v276;
                    *(void *)&v276[8] = v276;
                    *(void *)&v276[16] = 0;
                    if (v134 <= 40.0)
                    {
                      if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *, void, uint64_t, double, double))(*(void *)v236 + 72))(v236, v276, v97, *((unsigned __int8 *)v94 + 48), 1, v130, v134 + 1.0) & 1) == 0)
                      {
                        if (qword_1E929F6C0 != -1) {
                          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                        }
                        uint64_t v199 = v227;
                        uint64_t v92 = a1;
                        double v91 = v230;
                        uint64_t v211 = off_1E929F6C8;
                        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(void *)&uint8_t buf[4] = v93;
                          _os_log_impl(&dword_1906B8000, v211, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsConnected returned false, searching for connected candidates", buf, 0xCu);
                        }
                        if (sub_1906CB57C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6C0 != -1) {
                            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                          }
                          *(_DWORD *)__p = 134349056;
                          *(void *)&__p[4] = v93;
                          double v210 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v210);
LABEL_389:
                          if (v210 != buf) {
                            free(v210);
                          }
                          uint64_t v199 = v227;
                          uint64_t v92 = a1;
                          double v91 = v230;
                        }
LABEL_332:
                        sub_19079AA88((uint64_t *)v276);
                        goto LABEL_333;
                      }
                      uint64_t v135 = *(void *)&v276[8];
                      if (*(unsigned char **)&v276[8] != v276)
                      {
                        int v239 = 0;
                        int v136 = 0;
                        int v231 = v94 + 23;
                        uint64_t v232 = v94 + 146;
                        while (1)
                        {
                          v137 = *(uint64_t **)(v135 + 32);
                          int v138 = *(std::__shared_weak_count **)(v135 + 40);
                          if (v138)
                          {
                            atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
                            int v139 = *(unsigned __int8 *)(v135 + 24);
                            atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v140 = *v137;
                            uint64_t v141 = v137[1];
                            sub_1906BFE48(v138);
                            sub_1906BFE48(v138);
                          }
                          else
                          {
                            int v139 = *(unsigned __int8 *)(v135 + 24);
                            uint64_t v140 = *v137;
                            uint64_t v141 = v137[1];
                          }
                          *(void *)__p = v140;
                          *(void *)&__p[8] = v141;
                          __p[16] = v139;
                          uint64_t v142 = v94[4];
                          int v143 = *((unsigned __int8 *)v94 + 48);
                          BOOL v144 = v140 == v142 && v139 == v143;
                          if (!v144 || v141 != v94[5])
                          {
                            if (v142 != v140 || v139 == v143) {
                              ++v136;
                            }
                            if (sub_19084F3B0(*v241, (uint64_t *)__p))
                            {
                              uint64_t v146 = sub_19084F444((uint64_t **)(a1 + 112), (uint64_t *)__p, (uint64_t)__p);
                              uint64_t v147 = v146[143];
                              sub_19082373C(v147);
                              double v148 = v146 + 143;
                              if (*(double *)(v147 + 40) >= 40.0)
                              {
                                uint64_t v151 = *v148;
                                sub_19082373C(*v148);
                                double v150 = 1.0 - 40.0 / *(double *)(v151 + 40);
                                if (v139)
                                {
                                  double v150 = 0.0;
                                  double v149 = 40.0 / *(double *)(v151 + 40);
                                }
                                else
                                {
                                  double v149 = 1.0;
                                }
                              }
                              else
                              {
                                double v149 = 1.0;
                                double v150 = 0.0;
                              }
                              uint64_t v152 = v146[140];
                              uint64_t v153 = v146[141];
                              if (v152 != v153)
                              {
                                int v154 = 0;
                                double v155 = 0.0;
                                do
                                {
                                  double v156 = *(double *)(v152 + 48);
                                  int v157 = v156 >= v150 && v156 <= v149;
                                  if (v156 < v150 || v156 > v149) {
                                    double v156 = -0.0;
                                  }
                                  double v155 = v155 + v156;
                                  v154 += v157;
                                  v152 += 112;
                                }
                                while (v152 != v153);
                                if (v154)
                                {
                                  ++*((_DWORD *)v94 + 274);
                                  *((unsigned char *)v94 + 209) = 1;
                                  int v158 = v154 - 1227133513 * ((unint64_t)(v94[141] - v94[140]) >> 4);
                                  if (v158 <= v239)
                                  {
                                    if (v158 == v239 || v158 > *((_DWORD *)v94 + 290))
                                    {
                                      *uint64_t v232 = *(_OWORD *)__p;
                                      *((unsigned char *)v94 + 1184) = __p[16];
                                      *((_DWORD *)v94 + 290) = v158;
                                    }
                                    int v158 = v239;
                                  }
                                  else
                                  {
                                    double v159 = v155 / (double)v154;
                                    double v245 = v159;
                                    *uint64_t v232 = *v231;
                                    *((unsigned char *)v94 + 1184) = *((unsigned char *)v94 + 200);
                                    *int v231 = *(_OWORD *)__p;
                                    *((unsigned char *)v94 + 200) = __p[16];
                                    *((_DWORD *)v94 + 275) = v154;
                                    *((_DWORD *)v94 + 290) = *((_DWORD *)v94 + 45);
                                    *((_DWORD *)v94 + 45) = v158;
                                    *((double *)v94 + 139) = v159;
                                    uint64_t v160 = *v148;
                                    sub_19082373C(*v148);
                                    double v161 = 1.0 - v159;
                                    if (v139) {
                                      double v161 = v159;
                                    }
                                    *((double *)v94 + 138) = v161 * *(double *)(v160 + 40);
                                    long long v162 = *(_OWORD *)(a1 + 488);
                                    long long v164 = *(_OWORD *)(a1 + 440);
                                    long long v163 = *(_OWORD *)(a1 + 456);
                                    *((_OWORD *)v94 + 47) = *(_OWORD *)(a1 + 472);
                                    *((_OWORD *)v94 + 48) = v162;
                                    *((_OWORD *)v94 + 45) = v164;
                                    *((_OWORD *)v94 + 46) = v163;
                                    long long v165 = *v235;
                                    long long v166 = *(_OWORD *)(a1 + 392);
                                    long long v167 = *(_OWORD *)(a1 + 424);
                                    *((_OWORD *)v94 + 43) = *(_OWORD *)(a1 + 408);
                                    *((_OWORD *)v94 + 44) = v167;
                                    *((_OWORD *)v94 + 41) = v165;
                                    *((_OWORD *)v94 + 42) = v166;
                                    std::string::operator=((std::string *)(v94 + 98), v234);
                                    memcpy(v94 + 101, __src, 0x118uLL);
                                    if ((sub_19081203C(v236, (uint64_t)(v94 + 82), v148, __p[16], &v245, 1) & 1) == 0)
                                    {
                                      if (qword_1E929F6C0 != -1) {
                                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                                      }
                                      uint64_t v199 = v227;
                                      uint64_t v92 = a1;
                                      double v91 = v230;
                                      uint64_t v209 = off_1E929F6C8;
                                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                                      {
                                        *(_DWORD *)buf = 134349056;
                                        *(void *)&uint8_t buf[4] = v93;
                                        _os_log_impl(&dword_1906B8000, v209, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position", buf, 0xCu);
                                      }
                                      if (sub_1906CB57C(115, 2))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_1E929F6C0 != -1) {
                                          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                                        }
                                        int v274 = 134349056;
                                        uint64_t v275 = v93;
                                        double v210 = (char *)_os_log_send_and_compose_impl();
                                        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v210);
                                        goto LABEL_389;
                                      }
                                      goto LABEL_332;
                                    }
                                  }
                                  int v239 = v158;
                                }
                              }
                            }
                          }
                          uint64_t v135 = *(void *)(v135 + 8);
                          if ((unsigned char *)v135 == v276) {
                            goto LABEL_246;
                          }
                        }
                      }
                    }
                    int v136 = 0;
                    int v239 = 0;
LABEL_246:
                    *((unsigned char *)v94 + 208) = v136 > 1;
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    int v169 = off_1E929F6C8;
                    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v170 = v94[4];
                      int v171 = *((unsigned __int8 *)v94 + 48);
                      uint64_t v172 = v94[15];
                      int v173 = *((unsigned __int8 *)v94 + 209);
                      int v174 = *((unsigned __int8 *)v94 + 208);
                      uint64_t v175 = v94[23];
                      int v176 = *((unsigned __int8 *)v94 + 200);
                      uint64_t v177 = 0x6DB6DB6DB6DB6DB7 * ((v94[141] - v94[140]) >> 4);
                      int v178 = *((_DWORD *)v94 + 275);
                      int v180 = *((_DWORD *)v94 + 44);
                      int v179 = *((_DWORD *)v94 + 45);
                      int v181 = *((_DWORD *)v94 + 290);
                      uint64_t v182 = (void *)v94[146];
                      *(_DWORD *)buf = 134352641;
                      *(void *)&uint8_t buf[4] = v93;
                      *(_WORD *)&unsigned char buf[12] = 2049;
                      *(void *)&unsigned char buf[14] = v170;
                      *(_WORD *)&buf[22] = 1026;
                      int v278 = v171;
                      __int16 v279 = 1026;
                      *(_DWORD *)v280 = v180;
                      *(_WORD *)&v280[4] = 2050;
                      *(void *)v281 = v172;
                      *(_WORD *)&v281[8] = 1026;
                      *(_DWORD *)&unsigned char v281[10] = v173;
                      *(_WORD *)&v281[14] = 1026;
                      *(_DWORD *)&v281[16] = v174;
                      LOWORD(v282) = 2049;
                      *(void *)((char *)&v282 + 2) = v175;
                      WORD5(v282) = 1026;
                      HIDWORD(v282) = v176;
                      LOWORD(v283) = 2050;
                      *(void *)((char *)&v283 + 2) = v177;
                      WORD5(v283) = 1026;
                      HIDWORD(v283) = v178;
                      __int16 v284 = 1026;
                      int v285 = v179;
                      __int16 v286 = 1026;
                      LODWORD(v287[0]) = v239;
                      WORD2(v287[0]) = 1026;
                      *(_DWORD *)((char *)v287 + 6) = v181;
                      WORD1(v287[1]) = 2049;
                      *(void **)((char *)&v287[1] + 4) = v182;
                      _os_log_impl(&dword_1906B8000, v169, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{public}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{public}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{public}d,secondCombinedWith,%{private}llu", buf, 0x74u);
                    }
                    if (sub_1906CB57C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      uint64_t v185 = v94[4];
                      int v186 = *((unsigned __int8 *)v94 + 48);
                      uint64_t v187 = v94[15];
                      int v188 = *((unsigned __int8 *)v94 + 209);
                      int v189 = *((unsigned __int8 *)v94 + 208);
                      uint64_t v190 = v94[23];
                      int v191 = *((unsigned __int8 *)v94 + 200);
                      uint64_t v192 = 0x6DB6DB6DB6DB6DB7 * ((v94[141] - v94[140]) >> 4);
                      int v193 = *((_DWORD *)v94 + 275);
                      int v195 = *((_DWORD *)v94 + 44);
                      int v194 = *((_DWORD *)v94 + 45);
                      int v196 = *((_DWORD *)v94 + 290);
                      uint64_t v197 = v94[146];
                      *(_DWORD *)__p = 134352641;
                      *(void *)&__p[4] = v93;
                      *(_WORD *)&__p[12] = 2049;
                      *(void *)&__p[14] = v185;
                      __int16 v248 = 1026;
                      int v249 = v186;
                      __int16 v250 = 1026;
                      int v251 = v195;
                      __int16 v252 = 2050;
                      uint64_t v253 = v187;
                      __int16 v254 = 1026;
                      int v255 = v188;
                      __int16 v256 = 1026;
                      int v257 = v189;
                      __int16 v258 = 2049;
                      uint64_t v259 = v190;
                      __int16 v260 = 1026;
                      int v261 = v191;
                      __int16 v262 = 2050;
                      uint64_t v263 = v192;
                      __int16 v264 = 1026;
                      int v265 = v193;
                      __int16 v266 = 1026;
                      int v267 = v194;
                      __int16 v268 = 1026;
                      int v269 = v239;
                      __int16 v270 = 1026;
                      int v271 = v196;
                      __int16 v272 = 2049;
                      uint64_t v273 = v197;
                      int v198 = (char *)_os_log_send_and_compose_impl();
                      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v198);
                      if (v198 != buf) {
                        free(v198);
                      }
                    }
                    sub_19079AA88((uint64_t *)v276);
                    uint64_t v183 = (uint64_t *)v94[1];
                    if (v183)
                    {
                      do
                      {
                        uint64_t v184 = v183;
                        uint64_t v183 = (uint64_t *)*v183;
                      }
                      while (v183);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v184 = (uint64_t *)v94[2];
                        _ZF = *v184 == (void)v94;
                        double v94 = v184;
                      }
                      while (!_ZF);
                    }
                    double v94 = v184;
                    if (v184 == v241)
                    {
                      char v95 = 1;
LABEL_318:
                      uint64_t v199 = v227;
                      uint64_t v92 = a1;
                      double v91 = v230;
                      goto LABEL_334;
                    }
                  }
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  uint64_t v199 = v227;
                  uint64_t v92 = a1;
                  double v91 = v230;
                  uint64_t v205 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(void *)&uint8_t buf[4] = v93;
                    _os_log_impl(&dword_1906B8000, v205, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to determine best particle", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    *(_DWORD *)__p = 134349056;
                    *(void *)&__p[4] = v93;
                    uint64_t v206 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v206);
                    if (v206 != buf) {
                      free(v206);
                    }
                    char v95 = 0;
                    goto LABEL_318;
                  }
LABEL_333:
                  char v95 = 0;
                  goto LABEL_334;
                }
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v199 = v227;
                int v202 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(void *)&uint8_t buf[4] = v93;
                  _os_log_impl(&dword_1906B8000, v202, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, zero candidates,assessCandidates", buf, 0xCu);
                }
                if (!sub_1906CB57C(115, 0)) {
                  goto LABEL_333;
                }
                int v201 = v91;
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 == -1)
                {
LABEL_275:
                  *(_DWORD *)__p = 134349056;
                  *(void *)&__p[4] = v93;
                  int v203 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v203);
                  if (v203 != buf) {
                    free(v203);
                  }
                  char v95 = 0;
                  uint64_t v199 = v227;
                  uint64_t v92 = a1;
                  double v91 = v201;
                  goto LABEL_334;
                }
              }
              else
              {
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v199 = v227;
                int v200 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(void *)&uint8_t buf[4] = v93;
                  _os_log_impl(&dword_1906B8000, v200, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
                }
                if (!sub_1906CB57C(115, 0)) {
                  goto LABEL_333;
                }
                int v201 = v91;
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 == -1) {
                  goto LABEL_275;
                }
              }
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              goto LABEL_275;
            }
LABEL_111:
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v71 = *((void *)v31 + 217);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&uint8_t buf[4] = v3;
              _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,resample failed", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                goto LABEL_397;
              }
              goto LABEL_378;
            }
LABEL_351:
            uint64_t v13 = 0;
            goto LABEL_352;
          }
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        unint64_t v69 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&uint8_t buf[4] = v3;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&unsigned char buf[14] = v36;
          _os_log_impl(&dword_1906B8000, v69, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,invalid Neffsum,%{public}.3lf", buf, 0x16u);
        }
        if (!sub_1906CB57C(115, 0))
        {
LABEL_106:
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v70 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&uint8_t buf[4] = v3;
            _os_log_impl(&dword_1906B8000, v70, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute likelihoods and csw vector", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            *(_DWORD *)__p = 134349056;
            *(double *)&__p[4] = v3;
            double v216 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v216);
            if (v216 != buf) {
              free(v216);
            }
          }
          goto LABEL_111;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__p = 134349312;
        *(double *)&__p[4] = v3;
        *(_WORD *)&__p[12] = 2050;
        *(double *)&__p[14] = v36;
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "CoreLocation: %s\n", v68);
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v67 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&uint8_t buf[4] = v3;
          _os_log_impl(&dword_1906B8000, v67, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to computeLikelihoods", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_106;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__p = 134349056;
        *(double *)&__p[4] = v3;
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "CoreLocation: %s\n", v68);
      }
      if (v68 != buf) {
        free(v68);
      }
      goto LABEL_106;
    }
    if (*(unsigned char *)(a1 + 604)) {
      goto LABEL_4;
    }
    if (*(double *)(a1 + 560) <= 0.0)
    {
      unsigned int v10 = 96;
      int v11 = 10;
    }
    else
    {
      double v17 = *(double *)(a1 + 472);
      unsigned int v10 = 96;
      int v11 = 10;
      if (v17 >= 0.0 && v17 < 0.001)
      {
        if (*(double *)(a3 + 424) <= 0.0)
        {
          if (*(unsigned char *)(a3 + 468))
          {
LABEL_4:
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v6 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v7 = *(void *)(a1 + 384);
              uint64_t v8 = *(void *)(a1 + 472);
              int v9 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)buf = 134349568;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&unsigned char buf[14] = v8;
              *(_WORD *)&buf[22] = 1026;
              int v278 = v9;
              _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d", buf, 0x1Cu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v217 = *(void *)(a1 + 384);
              uint64_t v218 = *(void *)(a1 + 472);
              int v219 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)__p = 134349568;
              *(void *)&__p[4] = v217;
              *(_WORD *)&__p[12] = 2050;
              *(void *)&__p[14] = v218;
              __int16 v248 = 1026;
              int v249 = v219;
              double v220 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v220);
              if (v220 != buf) {
                free(v220);
              }
              unsigned int v10 = 48;
              int v11 = 5;
            }
            else
            {
              unsigned int v10 = 48;
              int v11 = 5;
            }
          }
        }
        else
        {
          double v18 = *(double *)(a3 + 336);
          _ZF = (v18 >= 0.001 || v18 < 0.0) && *(unsigned char *)(a3 + 468) == 0;
          if (!_ZF) {
            goto LABEL_4;
          }
        }
      }
    }
    if (*(unsigned char *)(a3 + 504)
      && *(unsigned char *)(a3 + 232)
      && *(void *)(a3 + 120)
      && *(unsigned __int8 *)(a3 + 761) == *(unsigned __int8 *)(a1 + 897))
    {
      unint64_t v21 = v243;
      do
      {
        if (v21 >= v244)
        {
          unint64_t v21 = sub_1907D5EFC(&v242, a3 + 120);
        }
        else
        {
          sub_1907D6024((uint64_t)&v244, v21, a3 + 120);
          v21 += 112;
        }
        unint64_t v243 = v21;
        --v11;
      }
      while (v11);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v22 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(a1 + 384);
        uint64_t v24 = *(void *)(a3 + 176);
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v221 = *(void *)(a1 + 384);
        uint64_t v222 = *(void *)(a3 + 176);
        *(_DWORD *)__p = 134349312;
        *(void *)&__p[4] = v221;
        *(_WORD *)&__p[12] = 2050;
        *(void *)&__p[14] = v222;
        v223 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v223);
        if (v223 != buf) {
          free(v223);
        }
      }
    }
    goto LABEL_47;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  long long v12 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)__p = 134349056;
    *(double *)&__p[4] = v3;
    uint64_t v215 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v215);
    if (v215 != buf) {
      free(v215);
    }
  }
  return 0;
}

void sub_1906C9ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a20) {
    sub_1906BFE48(a20);
  }
  a59 = &a36;
  sub_1907D5AB4((void ***)&a59);
  _Unwind_Resume(a1);
}

void sub_1906C9FC4(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FCF260]();
  double v3 = *(pthread_mutex_t **)(*(void *)(a1 + 40) + 240);
  pthread_mutex_lock(v3);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void (**)(void, void, uint64_t, void))(v4 + 248);
  uint64_t v6 = *(void *)(v4 + 264);
  uint64_t v7 = *(void (**)(uint64_t))(v4 + 280);
  int v8 = *(unsigned __int8 *)(v4 + 225);
  int v9 = *(uint64_t ***)(v4 + 328);
  unsigned int v10 = *v9;
  uint64_t v11 = **v9;
  *(void *)(v11 + 8) = (*v9)[1];
  *(void *)v10[1] = v11;
  void v9[2] = (uint64_t *)((char *)v9[2] - 1);
  operator delete(v10);
  if (!v8)
  {
    if (v6)
    {
      long long v12 = *(void (**)(uint64_t))(*(void *)(a1 + 40) + 272);
      if (v12) {
        v12(v6);
      }
    }
  }
  pthread_mutex_unlock(v3);
  if (!v8)
  {
    if (v5) {
      v5(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), v6, *(void *)(a1 + 32));
    }
    if (v6 && v7) {
      v7(v6);
    }
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_1906CA0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906CA0E4(void *a1)
{
  id v2 = a1;
  return a1;
}

uint64_t sub_1906CA110(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = [a3 manager];

  return MEMORY[0x1F4181798](v3, sel_onClientEvent_supportInfo_);
}

void sub_1906CB15C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1906CB1DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if (a3)
    {
      double v5 = *(double *)(a1 + 88);
      double v6 = *(double *)(a2 + 88);
      BOOL v8 = v5 == -1.0 && v6 == -1.0 || vabdd_f64(v5 + *(double *)(a1 + 76), v6 + *(double *)(a2 + 76)) < 2.22044605e-16;
    }
    else
    {
      BOOL v8 = *(double *)(a1 + 76) == *(double *)(a2 + 76);
    }
    if (*(double *)(a1 + 4) != *(double *)(a2 + 4)
      || *(double *)(a1 + 12) != *(double *)(a2 + 12)
      || *(double *)(a1 + 20) != *(double *)(a2 + 20)
      || *(double *)(a1 + 28) != *(double *)(a2 + 28)
      || *(double *)(a1 + 36) != *(double *)(a2 + 36)
      || *(double *)(a1 + 44) != *(double *)(a2 + 44)
      || *(double *)(a1 + 60) != *(double *)(a2 + 60))
    {
      return 0;
    }
    if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      BOOL v8 = 0;
    }
    if (!v8) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124) || *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)) {
      return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    uint64_t v11 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = *(void *)(a1 + 4);
      uint64_t v13 = *(void *)(a1 + 12);
      int v14 = *(_DWORD *)(a1 + 132);
      uint64_t v15 = *(void *)(a2 + 4);
      uint64_t v16 = *(void *)(a2 + 12);
      int v17 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 134219264;
      uint64_t v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      uint64_t v29 = v16;
      __int16 v30 = 1024;
      int v31 = v17;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_FAULT, "CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)", buf, 0x36u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLCommonCompareLocationEqualityClientWithTimeCheck(const CLClientLocation *, const CLClientLocation *, BOOL)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (!*(_DWORD *)(a1 + 132)) {
      return 1;
    }
    return *(_DWORD *)(a2 + 132) == 0;
  }
  else
  {
    return (a1 | a2) == 0;
  }
}

uint64_t sub_1906CB57C(uint64_t a1, int a2)
{
  if (qword_1EB2726A0 != -1) {
    dispatch_once(&qword_1EB2726A0, &unk_1EE005C40);
  }
  if (*(_DWORD *)(qword_1EB272698 + 160) >= a2
    || *(_DWORD *)(qword_1EB272698 + 164) >= a2
    || *(_DWORD *)(qword_1EB272698 + 168) >= a2)
  {
    return 1;
  }
  else
  {
    return *(unsigned __int8 *)(qword_1EB272698 + 152);
  }
}

void sub_1906CBBDC(_Unwind_Exception *exception_object)
{
}

void sub_1906CBC88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906CBD74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906CBD8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a4 + 264) <= 0.0) {
    return 1;
  }
  uint64_t v4 = (double *)a3;
  uint64_t v7 = *(void *)(a1 + 208);
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 216);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    v46 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, predict", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_213;
    }
    long long v117 = v8;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_WORD *)uint64_t v135 = 0;
    float64x2_t v47 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v47);
    goto LABEL_77;
  }
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(a2 + 24);
  double v123 = v9;
  if (v10 >= 0.0 && (double v11 = *(double *)(a4 + 264), v11 >= 0.0))
  {
    double v49 = vabdd_f64(v10, v11);
    double v50 = -1.0;
    double v51 = -1.0;
    if (*(double *)(a2 + 184) > 0.0)
    {
      double v52 = *(double *)(a2 + 96);
      if (v52 >= 0.0)
      {
        if (v49 >= 2.2 || *(double *)(a4 + 424) <= 0.0)
        {
          double v51 = *(double *)(a2 + 96);
        }
        else
        {
          double v53 = *(double *)(a4 + 336);
          BOOL v28 = v53 < 0.0;
          double v54 = (v52 + v53) * 0.5;
          if (v28) {
            double v51 = *(double *)(a2 + 96);
          }
          else {
            double v51 = v54;
          }
        }
      }
    }
    if (v51 < 0.0) {
      double v100 = 0.0;
    }
    else {
      double v100 = v49 * v51;
    }
    if (v49 >= 2.2)
    {
      double v124 = v100;
    }
    else
    {
      double v124 = v100;
      if (*(double *)(a4 + 320) > 0.0)
      {
        double v50 = sub_1906DA618((double *)(a1 + 168), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a4 + 296), *(double *)(a4 + 304), *(double *)(a2 + 72));
        if (v50 > 300.0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v101 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v102 = *(void *)(a2 + 8);
            *(_DWORD *)buf = 134349568;
            *(void *)&uint8_t buf[4] = v102;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v50;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v49;
            _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_INFO, "#Warning,CLMMPED,%{public}.1lf,Position jump,%{public}.1lf,dT,%{public}.1lf", buf, 0x20u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v103 = *(void *)(a2 + 8);
            *(_DWORD *)uint64_t v135 = 134349568;
            *(void *)&v135[4] = v103;
            *(_WORD *)&v135[12] = 2050;
            *(double *)&v135[14] = v50;
            *(_WORD *)&v135[22] = 2050;
            *(double *)&v135[24] = v49;
            double v104 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v104);
            if (v104 != buf) {
              free(v104);
            }
            uint64_t v45 = 0;
            goto LABEL_214;
          }
          goto LABEL_213;
        }
        if (v51 <= 0.0 || v50 < 0.0 || *(unsigned char *)(a2 + 228))
        {
          if (*(unsigned char *)(a2 + 228)) {
            double v105 = v100;
          }
          else {
            double v105 = v50;
          }
          if (v50 < 0.0) {
            double v105 = v100;
          }
        }
        else
        {
          double v105 = (v100 + v50) * 0.5;
        }
        double v124 = v105;
      }
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v106 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v107 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134349824;
      *(void *)&uint8_t buf[4] = v107;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v124;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v100;
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = v50;
      _os_log_impl(&dword_1906B8000, v106, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,predictionAndUpdate, distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
    }
    uint64_t v14 = sub_1906CB57C(115, 2);
    uint64_t v15 = (double *)a4;
    if (v14)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v111 = *(void *)(a2 + 8);
      *(_DWORD *)uint64_t v135 = 134349824;
      *(void *)&v135[4] = v111;
      *(_WORD *)&v135[12] = 2050;
      *(double *)&v135[14] = v124;
      *(_WORD *)&v135[22] = 2050;
      *(double *)&v135[24] = v100;
      *(_WORD *)&v135[32] = 2050;
      *(double *)&v135[34] = v50;
      uint64_t v112 = (char *)_os_log_send_and_compose_impl();
      uint64_t v14 = sub_1906D4A28("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v112);
      if (v112 != buf) {
        free(v112);
      }
      uint64_t v4 = (double *)a3;
      uint64_t v15 = (double *)a4;
    }
    if (v124 < 0.0)
    {
LABEL_213:
      uint64_t v45 = 0;
      goto LABEL_214;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = 0xBFF0000000000000;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    uint64_t v14 = sub_1906CB57C(115, 0);
    double v124 = 0.0;
    if (v14)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v109 = *(void *)(a2 + 8);
      *(_DWORD *)uint64_t v135 = 134349312;
      *(void *)&v135[4] = v109;
      *(_WORD *)&v135[12] = 2050;
      *(void *)&v135[14] = 0xBFF0000000000000;
      double v110 = (char *)_os_log_send_and_compose_impl();
      uint64_t v14 = sub_1906D4A28("Generic", 1, 0, 0, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v110);
      uint64_t v4 = (double *)a3;
      if (v110 != buf) {
        free(v110);
      }
    }
    uint64_t v15 = (double *)a4;
  }
  v4[107] = v124;
  if (*((void *)v4 + 6) == *((void *)v4 + 5))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v48 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,predict called with 0 particles", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_213;
    }
    long long v117 = v8;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)uint64_t v135 = 134349056;
    *(double *)&v135[4] = v9;
    float64x2_t v47 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v47);
LABEL_77:
    if (v47 != buf) {
      free(v47);
    }
LABEL_79:
    uint64_t v45 = 0;
LABEL_80:
    BOOL v8 = v117;
    goto LABEL_214;
  }
  uint64_t v116 = *((void *)v4 + 6) - *((void *)v4 + 5);
  long long v117 = v8;
  double v122 = sub_190845B74(v14, a2, v15);
  int v17 = (double *)*((void *)v4 + 5);
  uint64_t v16 = (double *)*((void *)v4 + 6);
  if (v17 != v16)
  {
    int v18 = 0;
    do
    {
      if (byte_1E929FD78)
      {
        byte_1E929FD78 = 0;
        float v19 = *(float *)&dword_1E929FD7C;
      }
      else
      {
        do
        {
          float v20 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v21 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v22 = (float)(v21 * v21) + (float)(v20 * v20);
        }
        while (v22 >= 1.0);
        float v19 = 0.0;
        if (v22 != 0.0)
        {
          float v23 = sqrtf((float)(logf((float)(v21 * v21) + (float)(v20 * v20)) * -2.0) / v22);
          *(float *)&dword_1E929FD7C = v21 * v23;
          byte_1E929FD78 = 1;
          float v19 = v20 * v23;
        }
      }
      double v24 = v19;
      double v9 = v123;
      double v25 = v122 * v24;
      double v26 = fabs(v24);
      if ((-252645135 * v18) <= 0xF0F0F0F) {
        double v25 = v26 * 34.0;
      }
      double v27 = v26 * 8.0;
      BOOL v28 = (-1171354717 * v18) <= 0x1745D174 && v122 < 8.0;
      if (!v28) {
        double v27 = v25;
      }
      if ((sub_19084297C(a1, v17, v123, v124 + v27) & 1) == 0) {
        goto LABEL_79;
      }
      ++v18;
      v17 += 14;
    }
    while (v17 != v16);
  }
  int v29 = 0;
  uint64_t v118 = a3 + 5;
  uint64_t v30 = a4;
  int v31 = *(unsigned __int8 *)(a4 + 504);
  if (*(unsigned char *)(a1 + 1064) && *(unsigned char *)(a4 + 504))
  {
    double v32 = sub_1906DA618((double *)(a1 + 168), *(double *)(a4 + 392), *(double *)(a4 + 400), *(double *)(a1 + 1120), *(double *)(a1 + 1128), *(double *)(a4 + 312));
    if (*(int *)(a1 + 1200) >= 1)
    {
      int v33 = 0;
      int v119 = 0;
      double v34 = v124 + v32 + 0.0;
      if (v34 <= 0.0) {
        double v35 = 0.1;
      }
      else {
        double v35 = v34;
      }
LABEL_36:
      int v115 = v33;
      int v36 = 4;
      while (1)
      {
        uint64_t v37 = *(void *)(a1 + 1096);
        *(void *)buf = *(void *)(a1 + 1088);
        *(void *)&uint8_t buf[8] = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
        long long v38 = *(_OWORD *)(a1 + 1120);
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a1 + 1104);
        *(_OWORD *)&buf[32] = v38;
        v140[0] = *(void *)(a1 + 1136);
        *(_OWORD *)&v140[1] = *(_OWORD *)(a1 + 1144);
        *(_OWORD *)((char *)&v140[2] + 1) = *(_OWORD *)(a1 + 1153);
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        float v39 = *(const void **)(a1 + 1176);
        uint64_t v40 = *(void *)(a1 + 1184);
        __p = 0;
        sub_1907B5854(&__p, v39, v40, 0x8E38E38E38E38E39 * ((v40 - (uint64_t)v39) >> 3));
        if (*(void *)buf)
        {
          if (sub_19084297C(a1, (double *)buf, v9, v35))
          {
            if (**(void **)(a1 + 1088) == **(void **)buf && *(unsigned __int8 *)(a1 + 1108) != buf[20])
            {
              int v44 = 0;
            }
            else
            {
              unint64_t v41 = a3[6];
              if (v41 >= a3[7])
              {
                uint64_t v42 = sub_1907D5EFC(v118, (uint64_t)buf);
                unint64_t v43 = a3;
              }
              else
              {
                sub_1907D6024((uint64_t)(a3 + 7), a3[6], (uint64_t)buf);
                uint64_t v42 = v41 + 112;
                unint64_t v43 = a3;
                a3[6] = v41 + 112;
              }
              int v44 = 0;
              v43[6] = v42;
              ++v119;
            }
          }
          else
          {
            int v44 = 1;
          }
        }
        else
        {
          int v44 = 7;
        }
        if (__p)
        {
          uint64_t v142 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v44 != 7 && v44) {
          goto LABEL_79;
        }
        if (!--v36)
        {
          int v33 = v115 + 1;
          if (v115 + 1 < *(_DWORD *)(a1 + 1200)) {
            goto LABEL_36;
          }
          int v29 = v119;
          uint64_t v30 = a4;
          if (v119 != -1) {
            goto LABEL_90;
          }
          goto LABEL_213;
        }
      }
    }
    int v29 = 0;
LABEL_90:
    int v31 = *(unsigned __int8 *)(v30 + 504);
  }
  int v120 = v29;
  if (!v31)
  {
    int v58 = 0;
    goto LABEL_167;
  }
  memset(v135, 0, 20);
  v135[21] = 0;
  *(_DWORD *)&v135[24] = 0;
  *(void *)&v135[32] = 0;
  *(void *)&v135[40] = 0;
  uint64_t v55 = v30;
  uint64_t v56 = *(void *)(v30 + 120);
  unint64_t v57 = *(std::__shared_weak_count **)(v55 + 128);
  if (v57)
  {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v135 = v56;
    *(void *)&v135[8] = v57;
  }
  else
  {
    *(void *)uint64_t v135 = v56;
  }
  v135[20] = *(unsigned char *)(a4 + 140);
  *(void *)int v136 = *(void *)(a4 + 168);
  if (!v56)
  {
    int v58 = -1;
    goto LABEL_144;
  }
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  int v132 = 0;
  double v129 = (__n128 *)&v129;
  double v130 = &v129;
  uint64_t v131 = 0;
  uint64_t v126 = (uint64_t)&v126;
  uint64_t v127 = &v126;
  uint64_t v128 = 0;
  sub_1908461B4(a1, (uint64_t)v135, &v132, &v126, &v129, &v134, &v133, 80.0);
  if ((uint64_t *)(a1 + 1808) != &v126) {
    sub_190771004((uint64_t *)(a1 + 1808), (uint64_t)v127, (uint64_t)&v126);
  }
  if ((__n128 **)(a1 + 1784) != &v129) {
    sub_190771004((uint64_t *)(a1 + 1784), (uint64_t)v130, (uint64_t)&v129);
  }
  uint64_t v59 = (uint64_t)v130;
  if (v130 == &v129)
  {
    int v58 = 0;
LABEL_123:
    uint64_t v69 = (uint64_t)v127;
    if (v127 == &v126) {
      goto LABEL_143;
    }
LABEL_124:
    int v70 = 6;
    while (1)
    {
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&unsigned char buf[24] = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
      __p = 0;
      *(_OWORD *)&buf[32] = 0u;
      memset(v140, 0, 33);
      uint64_t v71 = *(void *)(v69 + 16);
      uint64_t v72 = *(void *)(v69 + 24);
      if (v72)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
        unint64_t v73 = *(std::__shared_weak_count **)&buf[8];
        *(void *)buf = v71;
        *(void *)&uint8_t buf[8] = v72;
        if (v73) {
          sub_1906BFE48(v73);
        }
      }
      else
      {
        *(void *)buf = *(void *)(v69 + 16);
        *(void *)&uint8_t buf[8] = 0;
      }
      v140[0] = *(void *)(v69 + 40);
      buf[20] = *(unsigned char *)(v69 + 32);
      int v74 = v58 + 1;
      char v75 = sub_19084297C(a1, (double *)buf, v9, (double)((v58 + 1) % 6) * 3.5);
      if (v75)
      {
        uint64_t v76 = a3;
        unint64_t v77 = a3[6];
        if (v77 >= a3[7])
        {
          uint64_t v78 = sub_1907D5EFC(v118, (uint64_t)buf);
          uint64_t v76 = a3;
        }
        else
        {
          sub_1907D6024((uint64_t)(a3 + 7), a3[6], (uint64_t)buf);
          uint64_t v78 = v77 + 112;
          a3[6] = v77 + 112;
        }
        v76[6] = v78;
        int v58 = v74;
      }
      if (__p)
      {
        uint64_t v142 = __p;
        operator delete(__p);
      }
      if (*(void *)&buf[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v75 & 1) == 0) {
        break;
      }
      if (!--v70)
      {
        uint64_t v69 = *(void *)(v69 + 8);
        if ((uint64_t *)v69 != &v126) {
          goto LABEL_124;
        }
        goto LABEL_143;
      }
    }
  }
  else
  {
    int v58 = 0;
LABEL_103:
    int v60 = 6;
    while (1)
    {
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&unsigned char buf[24] = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
      __p = 0;
      *(_OWORD *)&buf[32] = 0u;
      memset(v140, 0, 33);
      uint64_t v61 = *(void *)(v59 + 16);
      uint64_t v62 = *(void *)(v59 + 24);
      if (v62)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
        unint64_t v63 = *(std::__shared_weak_count **)&buf[8];
        *(void *)buf = v61;
        *(void *)&uint8_t buf[8] = v62;
        if (v63) {
          sub_1906BFE48(v63);
        }
      }
      else
      {
        *(void *)buf = *(void *)(v59 + 16);
        *(void *)&uint8_t buf[8] = 0;
      }
      v140[0] = *(void *)(v59 + 40);
      buf[20] = *(unsigned char *)(v59 + 32);
      int v64 = v58 + 1;
      char v65 = sub_19084297C(a1, (double *)buf, v9, (double)((v58 + 1) % 6) * 3.5);
      if (v65)
      {
        unint64_t v66 = a3;
        unint64_t v67 = a3[6];
        if (v67 >= a3[7])
        {
          uint64_t v68 = sub_1907D5EFC(v118, (uint64_t)buf);
          unint64_t v66 = a3;
        }
        else
        {
          sub_1907D6024((uint64_t)(a3 + 7), a3[6], (uint64_t)buf);
          uint64_t v68 = v67 + 112;
          a3[6] = v67 + 112;
        }
        v66[6] = v68;
        int v58 = v64;
      }
      if (__p)
      {
        uint64_t v142 = __p;
        operator delete(__p);
      }
      if (*(void *)&buf[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v65 & 1) == 0) {
        break;
      }
      if (!--v60)
      {
        uint64_t v59 = *(void *)(v59 + 8);
        if ((__n128 **)v59 != &v129) {
          goto LABEL_103;
        }
        goto LABEL_123;
      }
    }
  }
  int v58 = -1;
LABEL_143:
  sub_190770ADC(&v126);
  sub_190770ADC((uint64_t *)&v129);
  unint64_t v57 = *(std::__shared_weak_count **)&v135[8];
LABEL_144:
  uint64_t v30 = a4;
  if (v57) {
    sub_1906BFE48(v57);
  }
  if (v58 == -1) {
    goto LABEL_213;
  }
  if (*(unsigned char *)(a4 + 504))
  {
    if (*(void *)(a4 + 120))
    {
      int v79 = 0;
      while (1)
      {
        uint64_t v80 = *(void *)(a4 + 128);
        *(void *)buf = *(void *)(a4 + 120);
        *(void *)&uint8_t buf[8] = v80;
        if (v80) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
        }
        long long v81 = *(_OWORD *)(a4 + 152);
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a4 + 136);
        *(_OWORD *)&buf[32] = v81;
        v140[0] = *(void *)(a4 + 168);
        *(_OWORD *)&v140[1] = *(_OWORD *)(a4 + 176);
        *(_OWORD *)((char *)&v140[2] + 1) = *(_OWORD *)(a4 + 185);
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        uint64_t v82 = *(const void **)(a4 + 208);
        uint64_t v83 = *(void *)(a4 + 216);
        __p = 0;
        sub_1907B5854(&__p, v82, v83, 0x8E38E38E38E38E39 * ((v83 - (uint64_t)v82) >> 3));
        if (byte_1E929FD78)
        {
          byte_1E929FD78 = 0;
          float v84 = *(float *)&dword_1E929FD7C;
        }
        else
        {
          do
          {
            float v85 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            float v86 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            float v87 = (float)(v86 * v86) + (float)(v85 * v85);
          }
          while (v87 >= 1.0);
          float v84 = 0.0;
          if (v87 != 0.0)
          {
            float v88 = sqrtf((float)(logf((float)(v86 * v86) + (float)(v85 * v85)) * -2.0) / v87);
            *(float *)&dword_1E929FD7C = v86 * v88;
            byte_1E929FD78 = 1;
            float v84 = v85 * v88;
          }
        }
        double v9 = v123;
        if ((sub_19084297C(a1, (double *)buf, v123, v122 * v84 + 0.0) & 1) == 0) {
          break;
        }
        unint64_t v89 = a3[6];
        if (v89 >= a3[7])
        {
          uint64_t v90 = sub_1907D5EFC(v118, (uint64_t)buf);
          double v91 = a3;
        }
        else
        {
          sub_1907D6024((uint64_t)(a3 + 7), a3[6], (uint64_t)buf);
          uint64_t v90 = v89 + 112;
          double v91 = a3;
          a3[6] = v89 + 112;
        }
        v91[6] = v90;
        if (__p)
        {
          uint64_t v142 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        if (++v79 == 12)
        {
          int v92 = 12;
          uint64_t v30 = a4;
          goto LABEL_168;
        }
      }
      if (__p)
      {
        uint64_t v142 = __p;
        operator delete(__p);
      }
      if (*(void *)&buf[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    goto LABEL_213;
  }
LABEL_167:
  int v92 = 0;
LABEL_168:
  int v93 = sub_190845E08(a1, (uint64_t)a3, v30, v122, v124);
  if (v93 == -1) {
    goto LABEL_213;
  }
  int v94 = sub_190846104(a3, v30);
  int v95 = sub_190846680(a1, (uint64_t)a3);
  if (v95 == -1) {
    goto LABEL_213;
  }
  uint64_t v96 = (void *)a3[5];
  double v97 = (void *)a3[6];
  while (v96 != v97)
  {
    v96[7] = 0;
    v96[8] = 0;
    v96[9] = 0;
    v96[12] = v96[11];
    v96 += 14;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v98 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v99 = -1227133513 * ((a3[6] - a3[5]) >> 4);
    *(_DWORD *)buf = 134351104;
    *(double *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v99;
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * (v116 >> 4);
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = v120;
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v58;
    *(_WORD *)&buf[40] = 1026;
    *(_DWORD *)&buf[42] = v92;
    *(_WORD *)&buf[46] = 1026;
    LODWORD(v140[0]) = v93;
    WORD2(v140[0]) = 1026;
    *(_DWORD *)((char *)v140 + 6) = v94;
    WORD1(v140[1]) = 1026;
    HIDWORD(v140[1]) = v95;
    _os_log_impl(&dword_1906B8000, v98, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d", buf, 0x40u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v113 = -1227133513 * ((a3[6] - a3[5]) >> 4);
    *(_DWORD *)uint64_t v135 = 134351104;
    *(double *)&v135[4] = v123;
    *(_WORD *)&v135[12] = 1026;
    *(_DWORD *)&v135[14] = v113;
    *(_WORD *)&v135[18] = 2050;
    *(void *)&v135[20] = 0x6DB6DB6DB6DB6DB7 * (v116 >> 4);
    *(_WORD *)&v135[28] = 1026;
    *(_DWORD *)&v135[30] = v120;
    *(_WORD *)&v135[34] = 1026;
    *(_DWORD *)&v135[36] = v58;
    *(_WORD *)&v135[40] = 1026;
    *(_DWORD *)&v135[42] = v92;
    *(_WORD *)&v135[46] = 1026;
    *(_DWORD *)int v136 = v93;
    *(_WORD *)&v136[4] = 1026;
    *(_DWORD *)&v136[6] = v94;
    __int16 v137 = 1026;
    int v138 = v95;
    uint64_t v114 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v114);
    if (v114 != buf) {
      free(v114);
    }
    uint64_t v45 = 1;
    goto LABEL_80;
  }
  uint64_t v45 = 1;
LABEL_214:
  if (v8) {
    sub_1906BFE48(v8);
  }
  return v45;
}

void sub_1906CD308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40)
{
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1906CD608(uint64_t a1, uint64_t a2)
{
  v388[111] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2048) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2037) = 0;
  *(void *)(a1 + 2056) = 0xBFF0000000000000;
  *(void *)(a1 + 2064) = 0xBFF0000000000000;
  double v6 = *(void **)(a1 + 208);
  double v5 = *(std::__shared_weak_count **)(a1 + 216);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v15 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      uint64_t v213 = v5;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v71 = *(void *)(a2 + 8);
      *(_DWORD *)__int16 v284 = 134349056;
      *(void *)&v284[4] = v71;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v14);
      goto LABEL_152;
    }
    goto LABEL_20;
  }
  sub_190811854((uint64_t)v6);
  v6[1] = *(void *)(a2 + 8);
  (*(void (**)(void *))(*v6 + 96))(v6);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a2 + 160) = v8;
  *(void *)(a2 + 168) = v9;
  *(void *)(a2 + 288) = v7;
  *(void *)(a2 + 296) = v8;
  *(void *)(a2 + 304) = v9;
  *(void *)(a2 + 312) = v7;
  *(void *)(a2 + 320) = v8;
  *(void *)(a2 + 328) = v7;
  *(void *)(a2 + 336) = v8;
  *(_DWORD *)(a2 + 280) = 0;
  double v10 = 0.0;
  if (*(double *)(a1 + 512) > 0.0)
  {
    double v11 = *(double *)(a2 + 24);
    if (v11 < 0.0 || (double v12 = *(double *)(a1 + 528), v12 < 0.0))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v13 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute timeDiff", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        uint64_t v213 = v5;
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v284 = 134349056;
        *(void *)&v284[4] = v4;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v14);
LABEL_152:
        if (v14 != buf) {
          free(v14);
        }
        uint64_t v17 = 0;
LABEL_290:
        double v5 = v213;
        goto LABEL_519;
      }
      goto LABEL_20;
    }
    if (v11 - v12 == 0.0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v18 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching, time betwen updates is 0.0", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        uint64_t v213 = v5;
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v284 = 134349056;
        *(void *)&v284[4] = v4;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v14);
        goto LABEL_152;
      }
LABEL_20:
      uint64_t v17 = 0;
      goto LABEL_519;
    }
    double v10 = vabdd_f64(v11, v12);
    if (v10 > 5.0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      float v19 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v10;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v284 = 134349312;
        *(void *)&v284[4] = v4;
        *(_WORD *)&v284[12] = 2050;
        *(double *)&v284[14] = v10;
        double v110 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v110);
        if (v110 != buf) {
          free(v110);
        }
      }
      sub_190841900(a1);
      *(void *)(a1 + 2136) = 0;
      *(void *)(a1 + 2128) = 0;
      *(_DWORD *)(a1 + 2144) = 0;
      *(void *)(a1 + 2152) = 0;
      *(void *)(a1 + 2168) = 0;
      *(void *)(a1 + 2160) = 0;
      uint64_t v7 = *(void *)(a2 + 56);
      uint64_t v8 = *(void *)(a2 + 64);
      uint64_t v9 = *(void *)(a2 + 104);
    }
  }
  *(void *)(a2 + 152) = v7;
  *(void *)(a2 + 160) = v8;
  *(void *)(a2 + 168) = v9;
  *(void *)(a2 + 288) = v7;
  *(void *)(a2 + 296) = v8;
  *(void *)(a2 + 304) = v9;
  *(void *)(a2 + 312) = v7;
  *(void *)(a2 + 320) = v8;
  *(void *)(a2 + 328) = v7;
  *(void *)(a2 + 336) = v8;
  *(_DWORD *)(a2 + 280) = 0;
  uint64_t v217 = a1 + 264;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    float v23 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2))
    {
      uint64_t v17 = 1;
      goto LABEL_519;
    }
    uint64_t v213 = v5;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)__int16 v284 = 134349056;
    *(void *)&v284[4] = v4;
    uint64_t v109 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v109);
    if (v109 != buf) {
      free(v109);
    }
    uint64_t v17 = 1;
    goto LABEL_290;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2);
  (*(void (**)(void *, uint64_t))(*v6 + 32))(v6, v20);
  (*(void (**)(void *, uint64_t, double))(*v6 + 48))(v6, a2, 450.0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, v217);
  sub_1907D5A04((uint64_t *)(a1 + 1880));
  long long v214 = v5;
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v21 = *(void *)(a1 + 208);
    float v22 = *(std::__shared_weak_count **)(a1 + 216);
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&uint8_t buf[8] = v22;
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *(void *)&uint8_t buf[8] = 0;
    }
    *(void *)buf = v21;
    sub_1907D3000(a2, buf, (double *)(a1 + 168), a1 + 1832, (uint64_t *)(a1 + 1880), 0, 100.0);
    if (*(void *)&buf[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v22) {
      sub_1906BFE48(v22);
    }
  }
  v218[0] = xmmword_1908820F0;
  v218[1] = 0u;
  uint64_t v219 = 0x3FF0000000000000;
  memset(v220, 0, sizeof(v220));
  char v221 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v222 = _Q1;
  long long v224 = 0u;
  v223 = &v224;
  long long v225 = 0u;
  int v226 = 0;
  __int16 v227 = 1;
  int v228 = 0;
  long long v233 = 0u;
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  char v232 = 0;
  uint64_t v234 = 0;
  unint64_t v235 = 0xBFF0000000000000;
  int v237 = 0;
  long long v236 = 0u;
  __int16 v238 = 1;
  float v239 = 0.0;
  long long v240 = 0u;
  long long v241 = 0u;
  long long v242 = 0u;
  char v243 = 0;
  long long v247 = 0u;
  long long v244 = 0u;
  uint64_t v245 = 0;
  char v246 = 0;
  long long v212 = _Q1;
  long long v248 = _Q1;
  long long v249 = 0u;
  *(void *)__int16 v250 = 0xBFF0000000000000;
  *(void *)&v251[120] = 0;
  *(_DWORD *)&v251[128] = 0;
  memset(&v251[80], 0, 34);
  memset(&v251[136], 0, 75);
  memset(&v251[216], 0, 56);
  memset(v251, 0, 78);
  memset(&v250[8], 0, 96);
  long long v253 = 0u;
  *(_OWORD *)&v251[272] = xmmword_190885CA0;
  uint64_t v252 = 0x415854A640000000;
  uint64_t v254 = 0x3FF0000000000000;
  char v255 = 0;
  long long v256 = 0u;
  memset(v257, 0, 11);
  memset(&v257[2], 0, 11);
  char v258 = 0;
  uint64_t v215 = (uint64_t **)(a1 + 240);
  if (sub_1906E3ACC(a1, (uint64_t **)(a1 + 240), v217, a2, 1, 0, (uint64_t)v218)) {
    goto LABEL_362;
  }
  uint64_t v29 = *(void *)(a1 + 208);
  if (v29)
  {
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 104))(v29);
    int v31 = BYTE1(v257[3]) ? v30 : 0;
    if (v31 == 1
      && *(void *)(a1 + 1912) != *(void *)(a1 + 1904)
      && BYTE2(v257[1])
      && (void)v236
      && *(unsigned char *)(a1 + 768)
      && *(void *)(a1 + 384))
    {
      double v32 = *(double *)(a2 + 192);
      if (v32 > 25.0 || v32 <= 0.0 || *(double *)(a2 + 104) < 0.0)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v37 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *(void *)(a2 + 8);
          uint64_t v39 = *(void *)(a2 + 192);
          *(_DWORD *)buf = 134349312;
          *(void *)&uint8_t buf[4] = v38;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v39;
          _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,checkForUserDeviationFromRoute skipped,courseUnc,%{public}.2lf", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v40 = *(void *)(a2 + 8);
          uint64_t v41 = *(void *)(a2 + 192);
          *(_DWORD *)__int16 v284 = 134349312;
          *(void *)&v284[4] = v40;
          *(_WORD *)&v284[12] = 2050;
          *(void *)&v284[14] = v41;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a2 + 8);
        *(_OWORD *)&v284[16] = 0u;
        *(_OWORD *)__int16 v284 = xmmword_1908820F0;
        *(void *)&v284[32] = 0x3FF0000000000000;
        memset(&v284[40], 0, 49);
        *(_OWORD *)&v286[2] = v212;
        long long v288 = 0u;
        uint64_t v287 = &v288;
        long long v289 = 0u;
        int v290 = 0;
        __int16 v291 = 1;
        int v292 = 0;
        long long v297 = 0u;
        long long v293 = 0u;
        long long v294 = 0u;
        long long v295 = 0u;
        char v296 = 0;
        uint64_t v298 = 0;
        unint64_t v299 = 0xBFF0000000000000;
        int v301 = 0;
        long long v300 = 0u;
        __int16 v302 = 1;
        float v303 = 0.0;
        long long v304 = 0u;
        long long v305 = 0u;
        long long v306 = 0u;
        char v307 = 0;
        long long v311 = 0u;
        long long v308 = 0u;
        uint64_t v309 = 0;
        char v310 = 0;
        unint64_t v312 = 0xBFF0000000000000;
        unint64_t v313 = 0xBFF0000000000000;
        long long v314 = 0u;
        unint64_t v315 = 0xBFF0000000000000;
        uint64_t v329 = 0;
        int v330 = 0;
        long long v327 = 0u;
        long long v326 = 0u;
        __int16 v328 = 0;
        long long v333 = 0u;
        memset(v334, 0, sizeof(v334));
        long long v331 = 0u;
        long long v332 = 0u;
        long long v336 = 0u;
        long long v337 = 0u;
        long long v335 = 0u;
        memset(v325, 0, sizeof(v325));
        long long v324 = 0u;
        long long v323 = 0u;
        long long v322 = 0u;
        long long v321 = 0u;
        long long v320 = 0u;
        long long v319 = 0u;
        long long v318 = 0u;
        long long v317 = 0u;
        long long v316 = 0u;
        uint64_t v338 = 0;
        long long v341 = 0u;
        long long v339 = xmmword_190885CA0;
        uint64_t v340 = 0x415854A640000000;
        uint64_t v342 = 0x3FF0000000000000;
        char v343 = 0;
        long long v344 = 0u;
        memset(v345, 0, 11);
        *(_DWORD *)((char *)v346 + 7) = 0;
        v346[0] = 0;
        char v347 = 0;
        char v34 = sub_1906E3ACC(a1, v215, v217, a2, 0, 0, (uint64_t)v284);
        if (BYTE2(v345[1])) {
          char v35 = v34;
        }
        else {
          char v35 = 1;
        }
        if ((v35 & 1) == 0 && (void)v300)
        {
          for (uint64_t i = v244; i != *((void *)&v244 + 1); i += 72)
          {
            if (*(_DWORD *)(i + 64) == 1) {
              goto LABEL_85;
            }
          }
          uint64_t i = 0;
LABEL_85:
          uint64_t v43 = v308;
          if ((void)v308 != *((void *)&v308 + 1))
          {
            while (*(_DWORD *)(v43 + 64) != 1)
            {
              v43 += 72;
              if (v43 == *((void *)&v308 + 1)) {
                goto LABEL_111;
              }
            }
            if (i && *(double *)i > 0.0)
            {
              double v44 = *(double *)v43 / *(double *)i;
              long double v45 = sub_190841444((uint64_t)&v236, (double *)(a1 + 168), a1 + 384);
              long double v46 = sub_190841444((uint64_t)&v300, (double *)(a1 + 168), a1 + 384);
              double v47 = fmod(*(double *)(a2 + 104) - v303, 360.0);
              if (v47 < 0.0) {
                double v47 = v47 + 360.0;
              }
              if (v47 <= 180.0) {
                double v48 = v47;
              }
              else {
                double v48 = v47 + -360.0;
              }
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              double v49 = fabs(v44);
              double v50 = fabs(v48);
              double v51 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v52 = *(void *)v236;
                uint64_t v53 = *(void *)v300;
                *(_DWORD *)buf = 134352129;
                *(void *)&uint8_t buf[4] = v33;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(long double *)&unsigned char buf[14] = v45;
                *(_WORD *)&buf[22] = 2050;
                *(long double *)&unsigned char buf[24] = v46;
                *(_WORD *)&buf[32] = 2050;
                *(double *)&buf[34] = v50;
                *(_WORD *)&buf[42] = 2050;
                *(double *)&buf[44] = v49;
                *(_WORD *)&buf[52] = 2049;
                *(void *)&buf[54] = v240;
                *(_WORD *)&buf[62] = 2049;
                *(void *)&buf[64] = *((void *)&v240 + 1);
                *(_WORD *)&buf[72] = 2050;
                *(double *)&buf[74] = v239;
                __int16 v351 = 2049;
                *(void *)v352 = v52;
                *(_WORD *)&v352[8] = 2049;
                *(void *)&v352[10] = v304;
                *(_WORD *)&v352[18] = 2049;
                *(void *)&v352[20] = *((void *)&v304 + 1);
                *(_WORD *)v353 = 2050;
                *(double *)&v353[2] = v303;
                *(_WORD *)&v353[10] = 2049;
                *(void *)&v353[12] = v53;
                _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf,courseDiffNewAndRawSolution,%{public}.2lf,factor,%{public}.5lf,bestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld,newBestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld", buf, 0x84u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v205 = *(void *)v236;
                uint64_t v206 = *(void *)v300;
                *(_DWORD *)__int16 v262 = 134352129;
                *(void *)&v262[4] = v33;
                *(_WORD *)&v262[12] = 2050;
                *(long double *)&v262[14] = v45;
                *(_WORD *)&v262[22] = 2050;
                long double v263 = v46;
                __int16 v264 = 2050;
                double v265 = v50;
                __int16 v266 = 2050;
                double v267 = v49;
                __int16 v268 = 2049;
                uint64_t v269 = v240;
                __int16 v270 = 2049;
                uint64_t v271 = *((void *)&v240 + 1);
                __int16 v272 = 2050;
                double v273 = v239;
                __int16 v274 = 2049;
                uint64_t v275 = v205;
                __int16 v276 = 2049;
                uint64_t v277 = v304;
                __int16 v278 = 2049;
                uint64_t v279 = *((void *)&v304 + 1);
                __int16 v280 = 2050;
                double v281 = v303;
                __int16 v282 = 2049;
                uint64_t v283 = v206;
                v207 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v207);
                if (v207 != buf) {
                  free(v207);
                }
              }
              if (v50 < 25.0 && v49 >= 2.0)
              {
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v55 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349568;
                  *(void *)&uint8_t buf[4] = v33;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(double *)&unsigned char buf[14] = v49;
                  *(_WORD *)&buf[22] = 2050;
                  *(double *)&unsigned char buf[24] = v50;
                  _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints,local,factor,%{public}.5lf,courseDiffNewAndRawSolution,%{public}.2lf", buf, 0x20u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  *(_DWORD *)__int16 v262 = 134349568;
                  *(void *)&v262[4] = v33;
                  *(_WORD *)&v262[12] = 2050;
                  *(double *)&v262[14] = v49;
                  *(_WORD *)&v262[22] = 2050;
                  long double v263 = v50;
                  int v208 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v208);
                  if (v208 != buf) {
                    free(v208);
                  }
                }
                sub_190842064((uint64_t)v218, (long long *)v284);
              }
            }
          }
        }
LABEL_111:
        sub_19084F19C((uint64_t)v284);
      }
    }
  }
  if (!BYTE2(v257[1]) || !*(unsigned char *)(a1 + 768) || !*(void *)(a1 + 384)) {
    goto LABEL_347;
  }
  uint64_t v56 = *(void *)(a1 + 208);
  if (v56)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v56 + 104))(v56)) {
      double v57 = 6.0;
    }
    else {
      double v57 = 10.0;
    }
  }
  else
  {
    double v57 = 10.0;
  }
  uint64_t v209 = a1 + 384;
  double v58 = *(double *)(a2 + 24);
  double v59 = -1.0;
  if (v58 >= 0.0)
  {
    double v60 = *(double *)(a1 + 528);
    double v61 = vabdd_f64(v58, v60);
    if (v60 >= 0.0) {
      double v59 = v61;
    }
    else {
      double v59 = -1.0;
    }
  }
  uint64_t v62 = *(void *)(a2 + 8);
  v27.n128_f64[0] = sub_190841444((uint64_t)&v236, (double *)(a1 + 168), v209);
  v28.n128_f64[0] = *(double *)&v256 * 0.2;
  if (*(double *)&v256 * 0.2 < 0.1) {
    v28.n128_f64[0] = 0.1;
  }
  if (v28.n128_f64[0] > 0.4) {
    v28.n128_f64[0] = 0.4;
  }
  double v210 = v27.n128_f64[0];
  if (v27.n128_f64[0] < v28.n128_f64[0]) {
    goto LABEL_347;
  }
  double v63 = *(double *)(a1 + 1872);
  if (v63 >= 0.0)
  {
    v28.n128_f64[0] = vabdd_f64(*((double *)&v248 + 1), v63);
    if (v28.n128_f64[0] <= 6.0) {
      goto LABEL_161;
    }
  }
  v28.n128_u64[0] = 3.0;
  double v64 = *(double *)&v256 * 3.0;
  _ZF = v27.n128_f64[0] <= *(double *)&v256 * 3.0 || (void)v236 == 0;
  if (_ZF || BYTE1(v257[1])) {
    goto LABEL_161;
  }
  float v66 = *(float *)(a1 + 408);
  double v67 = fmod((float)(v66 - v239), 360.0);
  if (v67 < 0.0) {
    double v67 = v67 + 360.0;
  }
  if (v67 > 180.0) {
    double v67 = v67 + -360.0;
  }
  double v68 = fabs(v67);
  double v261 = 0.0;
  uint64_t v260 = 0;
  sub_190839A78((double *)(a1 + 168), &v261, (double *)&v260, *(double *)&v240, *((double *)&v240 + 1), 0.0, v66, *(double *)(a1 + 416), *(double *)(a1 + 424));
  double v69 = *(double *)(a1 + 2200);
  if (v69 > 5.0)
  {
    BOOL v70 = 1;
    if (v69 >= 10.0 || fabs(*(double *)&v251[88]) < 7.0) {
      goto LABEL_155;
    }
    goto LABEL_145;
  }
  if (v69 < 10.0)
  {
LABEL_145:
    BOOL v70 = fabs(v261) < v64 && v68 < 30.0;
    goto LABEL_155;
  }
  BOOL v70 = 1;
LABEL_155:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v72 = v62;
  unint64_t v73 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v74 = *(void *)(a1 + 2200);
    *(_DWORD *)buf = 134350849;
    *(void *)&uint8_t buf[4] = v62;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v70;
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v74;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = fabs(*(double *)&v251[88]);
    *(_WORD *)&buf[38] = 2050;
    *(double *)&buf[40] = v68;
    *(_WORD *)&unsigned char buf[48] = 2050;
    *(double *)&buf[50] = v261;
    *(_WORD *)&buf[58] = 2049;
    *(void *)&buf[60] = v240;
    *(_WORD *)&buf[68] = 2049;
    *(void *)&buf[70] = *((void *)&v240 + 1);
    _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,shouldNotPropagateFromLastSnap,%{public}d,consecutiveAmbiguityEpochCount,%{public}.1lf,deltaAz,%{public}.2lf,courseDiffWithPriorSolution,%{public}.2lf,acrossTrack,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf", buf, 0x4Eu);
  }
  if (!sub_1906CB57C(115, 2))
  {
    if (v70) {
      goto LABEL_161;
    }
LABEL_316:
    sub_1907B4FC4((uint64_t)v284, v209);
    uint64_t v116 = *(void *)(a1 + 208);
    long long v117 = *(std::__shared_weak_count **)(a1 + 216);
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v118 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (v116)
    {
      *(_DWORD *)__int16 v262 = 0;
      *(void *)buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0;
      (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned char *, double, double))(*(void *)v116 + 56))(v116, v284, buf, v262, *(double *)&v284[48], *(double *)&v256);
      sub_190770ADC((uint64_t *)buf);
    }
    if (*(void *)v284)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v119 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134350337;
        *(void *)&uint8_t buf[4] = v72;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v210;
        *(_WORD *)&buf[22] = 2049;
        *(void *)&unsigned char buf[24] = v240;
        *(_WORD *)&buf[32] = 2049;
        *(void *)&buf[34] = *((void *)&v240 + 1);
        *(_WORD *)&buf[42] = 2049;
        *(void *)&buf[44] = *(void *)&v284[32];
        *(_WORD *)&buf[52] = 2049;
        *(void *)&buf[54] = *(void *)&v284[40];
        _os_log_impl(&dword_1906B8000, v119, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replaced with previous propagated solution,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf,newLL,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v262 = 134350337;
        *(void *)&v262[4] = v62;
        *(_WORD *)&v262[12] = 2050;
        *(double *)&v262[14] = v210;
        *(_WORD *)&v262[22] = 2049;
        long double v263 = *(double *)&v240;
        __int16 v264 = 2049;
        double v265 = *((double *)&v240 + 1);
        __int16 v266 = 2049;
        double v267 = *(double *)&v284[32];
        __int16 v268 = 2049;
        uint64_t v269 = *(void *)&v284[40];
        int v202 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v202);
        if (v202 != buf) {
          free(v202);
        }
        uint64_t v72 = v62;
        uint64_t v118 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      }
      sub_1907B4FC4((uint64_t)v262, (uint64_t)&v236);
      sub_1907BDEFC((uint64_t)&v236, (uint64_t *)v284);
      if (sub_19083A548((uint64_t)&v225))
      {
        BYTE1(v257[1]) = 1;
        char v255 = 1;
      }
      else
      {
        sub_1907BDEFC((uint64_t)&v236, (uint64_t *)v262);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v122 = *((void *)v118 + 217);
        if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(void *)&uint8_t buf[4] = v72;
          _os_log_impl(&dword_1906B8000, v122, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as unable to fillCrumb", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          LODWORD(v348) = 134349056;
          *(void *)((char *)&v348 + 4) = v62;
          int v204 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v204);
          if (v204 != buf) {
            free(v204);
          }
        }
      }
      sub_1907B515C(v262);
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v120 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v72;
        _os_log_impl(&dword_1906B8000, v120, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as returned particle has invalid road", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v262 = 134349056;
        *(void *)&v262[4] = v62;
        long long v121 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v121);
        if (v121 != buf) {
          free(v121);
        }
      }
    }
    if (v117) {
      sub_1906BFE48(v117);
    }
    sub_1907B515C(v284);
    goto LABEL_347;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v114 = *(void *)(a1 + 2200);
  *(_DWORD *)__int16 v284 = 134350849;
  *(void *)&v284[4] = v62;
  *(_WORD *)&v284[12] = 1026;
  *(_DWORD *)&v284[14] = v70;
  *(_WORD *)&v284[18] = 2050;
  *(void *)&v284[20] = v114;
  *(_WORD *)&v284[28] = 2050;
  *(void *)&v284[30] = fabs(*(double *)&v251[88]);
  *(_WORD *)&v284[38] = 2050;
  *(double *)&v284[40] = v68;
  *(_WORD *)&v284[48] = 2050;
  *(double *)&v284[50] = v261;
  *(_WORD *)&v284[58] = 2049;
  *(void *)&v284[60] = v240;
  *(_WORD *)&v284[68] = 2049;
  *(void *)&v284[70] = *((void *)&v240 + 1);
  int v115 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v115);
  if (v115 != buf) {
    free(v115);
  }
  uint64_t v72 = v62;
  if (!v70) {
    goto LABEL_316;
  }
LABEL_161:
  v27.n128_f64[0] = v210;
  if (v210 >= 0.0)
  {
    v27.n128_u64[0] = 3.0;
    if (v59 <= 3.0)
    {
      v27.n128_u64[0] = 15.0;
      v28.n128_f64[0] = v210;
      if (v210 >= 15.0)
      {
        v27.n128_f64[0] = v57 * *(double *)&v256;
        v28.n128_f64[0] = v210;
        if (v210 >= v57 * *(double *)&v256)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          char v75 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349312;
            *(void *)&uint8_t buf[4] = v62;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v210;
            _os_log_impl(&dword_1906B8000, v75, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf", buf, 0x16u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            *(_DWORD *)__int16 v284 = 134349312;
            *(void *)&v284[4] = v62;
            *(_WORD *)&v284[12] = 2050;
            *(double *)&v284[14] = v210;
            uint64_t v111 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v111);
            if (v111 != buf) {
              free(v111);
            }
          }
          *(_OWORD *)&v284[16] = 0u;
          *(_OWORD *)__int16 v284 = xmmword_1908820F0;
          *(void *)&v284[32] = 0x3FF0000000000000;
          memset(&v284[40], 0, 49);
          *(_OWORD *)&v286[2] = v212;
          long long v288 = 0u;
          uint64_t v287 = &v288;
          long long v289 = 0u;
          int v290 = 0;
          __int16 v291 = 1;
          int v292 = 0;
          long long v297 = 0u;
          long long v293 = 0u;
          long long v294 = 0u;
          long long v295 = 0u;
          char v296 = 0;
          uint64_t v298 = 0;
          unint64_t v299 = 0xBFF0000000000000;
          int v301 = 0;
          long long v300 = 0u;
          __int16 v302 = 1;
          float v303 = 0.0;
          long long v304 = 0u;
          long long v305 = 0u;
          long long v306 = 0u;
          char v307 = 0;
          long long v311 = 0u;
          long long v308 = 0u;
          uint64_t v309 = 0;
          char v310 = 0;
          unint64_t v312 = 0xBFF0000000000000;
          unint64_t v313 = 0xBFF0000000000000;
          long long v314 = 0u;
          unint64_t v315 = 0xBFF0000000000000;
          uint64_t v329 = 0;
          int v330 = 0;
          long long v327 = 0u;
          long long v326 = 0u;
          __int16 v328 = 0;
          long long v333 = 0u;
          memset(v334, 0, sizeof(v334));
          long long v331 = 0u;
          long long v332 = 0u;
          long long v336 = 0u;
          long long v337 = 0u;
          long long v335 = 0u;
          memset(v325, 0, sizeof(v325));
          long long v324 = 0u;
          long long v323 = 0u;
          long long v322 = 0u;
          long long v321 = 0u;
          long long v320 = 0u;
          long long v319 = 0u;
          long long v318 = 0u;
          long long v317 = 0u;
          long long v316 = 0u;
          uint64_t v338 = 0;
          long long v341 = 0u;
          long long v339 = xmmword_190885CA0;
          uint64_t v340 = 0x415854A640000000;
          uint64_t v342 = 0x3FF0000000000000;
          char v343 = 0;
          long long v344 = 0u;
          memset(v345, 0, 11);
          *(_DWORD *)((char *)v346 + 7) = 0;
          v346[0] = 0;
          char v347 = 0;
          char v76 = sub_1906E3ACC(a1, v215, v217, a2, 1, 1, (uint64_t)v284);
          if (BYTE2(v345[1])) {
            char v77 = v76;
          }
          else {
            char v77 = 1;
          }
          if ((v77 & 1) == 0)
          {
            double v87 = sub_190841444((uint64_t)&v300, (double *)(a1 + 168), v209);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            float v88 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349568;
              *(void *)&uint8_t buf[4] = v62;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&unsigned char buf[14] = v210;
              *(_WORD *)&buf[22] = 2050;
              *(double *)&unsigned char buf[24] = v87;
              _os_log_impl(&dword_1906B8000, v88, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              *(_DWORD *)__int16 v262 = 134349568;
              *(void *)&v262[4] = v62;
              *(_WORD *)&v262[12] = 2050;
              *(double *)&v262[14] = v210;
              *(_WORD *)&v262[22] = 2050;
              long double v263 = v87;
              uint64_t v112 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v112);
              if (v112 != buf) {
                free(v112);
              }
            }
            if (v87 < v210 * 0.6)
            {
              sub_190842064((uint64_t)v218, (long long *)v284);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              double v97 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                *(void *)&uint8_t buf[4] = v62;
                _os_log_impl(&dword_1906B8000, v97, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck", buf, 0xCu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                *(_DWORD *)__int16 v262 = 134349056;
                *(void *)&v262[4] = v62;
                uint64_t v98 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v98);
                if (v98 != buf) {
                  free(v98);
                }
              }
              goto LABEL_284;
            }
            if (vabdd_f64(v87, v210) < 2.0)
            {
              sub_1907BDE7C((uint64_t)&v236, (uint64_t)buf);
              sub_1907BDE7C((uint64_t)&v300, (uint64_t)v262);
              if (*(void *)buf != *(void *)v262 || buf[16] != v262[16] || *(void *)&buf[8] != *(void *)&v262[8])
              {
                float v89 = *(float *)(a1 + 408);
                double v90 = fmod((float)(v89 - v239), 360.0);
                if (v90 < 0.0) {
                  double v90 = v90 + 360.0;
                }
                if (v90 > 180.0) {
                  double v90 = v90 + -360.0;
                }
                double v91 = fabs(v90);
                double v92 = fmod((float)(v89 - v303), 360.0);
                if (v92 < 0.0) {
                  double v92 = v92 + 360.0;
                }
                if (v92 > 180.0) {
                  double v92 = v92 + -360.0;
                }
                if (v91 > 60.0 && fabs(v92) < 10.0)
                {
                  sub_190842064((uint64_t)v218, (long long *)v284);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  int v93 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(void *)&uint8_t buf[4] = v62;
                    _os_log_impl(&dword_1906B8000, v93, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    *(_DWORD *)__int16 v262 = 134349056;
                    *(void *)&v262[4] = v62;
                    int v94 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v94);
                    if (v94 != buf) {
                      free(v94);
                    }
                  }
                }
              }
            }
          }
          sub_19084F19C((uint64_t)v284);
          if (BYTE1(v257[3]))
          {
            uint64_t v78 = *(double **)(a1 + 1904);
            int v79 = *(double **)(a1 + 1912);
            if (v78 == v79)
            {
              double v81 = -1.0;
              double v80 = -1.0;
            }
            else
            {
              double v80 = -1.0;
              double v81 = -1.0;
              do
              {
                double v82 = sub_1906DA618((double *)(a1 + 168), *(double *)(a1 + 416), *(double *)(a1 + 424), v78[10], v78[11], 0.0);
                if (v82 < v80 || v80 < 0.0) {
                  double v80 = v82;
                }
                double v84 = fmod(v78[13] - *(float *)(a1 + 408), 360.0);
                if (v84 < 0.0) {
                  double v84 = v84 + 360.0;
                }
                if (v84 > 180.0) {
                  double v84 = v84 + -360.0;
                }
                double v85 = fabs(v84);
                if (v85 < v81 || v81 < 0.0) {
                  double v81 = v85;
                }
                v78 += 33;
              }
              while (v78 != v79);
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            int v99 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349568;
              *(void *)&uint8_t buf[4] = v62;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&unsigned char buf[14] = v81;
              *(_WORD *)&buf[22] = 2050;
              *(double *)&unsigned char buf[24] = v80;
              _os_log_impl(&dword_1906B8000, v99, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,distanceDiffBetweenPriorSolution,%{public}.2lf", buf, 0x20u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              *(_DWORD *)__int16 v284 = 134349568;
              *(void *)&v284[4] = v62;
              *(_WORD *)&v284[12] = 2050;
              *(double *)&v284[14] = v81;
              *(_WORD *)&v284[22] = 2050;
              *(double *)&v284[24] = v80;
              int v113 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v113);
              if (v113 != buf) {
                free(v113);
              }
            }
            if (v81 >= 30.0 || (v80 >= 4.0 ? (BOOL v100 = v80 < *(double *)&v256 + *(double *)&v256) : (BOOL v100 = 1), !v100))
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v103 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349312;
                *(void *)&uint8_t buf[4] = v62;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(double *)&unsigned char buf[14] = v210;
                _os_log_impl(&dword_1906B8000, v103, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf", buf, 0x16u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                *(_DWORD *)__int16 v284 = 134349312;
                *(void *)&v284[4] = v62;
                *(_WORD *)&v284[12] = 2050;
                *(double *)&v284[14] = v210;
                int v200 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v200);
                if (v200 != buf) {
                  free(v200);
                }
              }
              sub_190841D54((uint64_t)v284);
              char v104 = sub_1906E3ACC(a1, v215, v217, a2, 0, 1, (uint64_t)v284);
              if (BYTE2(v345[1])) {
                char v105 = v104;
              }
              else {
                char v105 = 1;
              }
              if ((v105 & 1) == 0)
              {
                double v106 = sub_190841444((uint64_t)&v300, (double *)(a1 + 168), v209);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v107 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349568;
                  *(void *)&uint8_t buf[4] = v62;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(double *)&unsigned char buf[14] = v210;
                  *(_WORD *)&buf[22] = 2050;
                  *(double *)&unsigned char buf[24] = v106;
                  _os_log_impl(&dword_1906B8000, v107, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  *(_DWORD *)__int16 v262 = 134349568;
                  *(void *)&v262[4] = v62;
                  *(_WORD *)&v262[12] = 2050;
                  *(double *)&v262[14] = v210;
                  *(_WORD *)&v262[22] = 2050;
                  long double v263 = v106;
                  int v201 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v201);
                  if (v201 != buf) {
                    free(v201);
                  }
                }
                if (v106 < *(double *)&v344 * 1.5 && v106 > *(double *)&v344 * 0.1)
                {
                  sub_190842064((uint64_t)v218, (long long *)v284);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  uint64_t v108 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(void *)&uint8_t buf[4] = v62;
                    _os_log_impl(&dword_1906B8000, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    *(_DWORD *)__int16 v262 = 134349056;
                    *(void *)&v262[4] = v62;
                    int v203 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v203);
                    if (v203 != buf) {
                      free(v203);
                    }
                  }
                }
              }
LABEL_284:
              sub_19084F19C((uint64_t)v284);
              goto LABEL_347;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            double v101 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v62;
              _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              *(_DWORD *)__int16 v284 = 134349056;
              *(void *)&v284[4] = v62;
              uint64_t v102 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v102);
              if (v102 != buf) {
                free(v102);
              }
            }
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            int v95 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v62;
              _os_log_impl(&dword_1906B8000, v95, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              *(_DWORD *)__int16 v284 = 134349056;
              *(void *)&v284[4] = v62;
              uint64_t v96 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v96);
              if (v96 != buf) {
                free(v96);
              }
            }
          }
        }
      }
    }
  }
LABEL_347:
  if (((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, __n128, __n128))(*(void *)a1 + 72))(a1, v218, v217, v27, v28) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v123 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v123, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, assessMatch failed", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_362;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_539;
    }
LABEL_578:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_539:
    *(_DWORD *)__int16 v284 = 134349056;
    *(void *)&v284[4] = v4;
    int v198 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v198);
    if (v198 != buf) {
      free(v198);
    }
    goto LABEL_362;
  }
  if ((*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 16))(a1, v218))
  {
    int v216 = 0;
    goto LABEL_363;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  double v124 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_1906B8000, v124, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_539;
    }
    goto LABEL_578;
  }
LABEL_362:
  int v216 = 1;
LABEL_363:
  double v125 = *(double *)(a1 + 1872);
  BOOL v126 = v125 < 0.0;
  if (vabdd_f64(*((double *)&v248 + 1), v125) > 6.0) {
    BOOL v126 = 1;
  }
  BOOL v211 = v126;
  if (v126)
  {
    if ((v216 & 1) == 0)
    {
      int v127 = sub_1906D1E88(a1, (uint64_t)v218, v217);
      int v128 = v127;
      if (v127)
      {
        double v129 = 1.0;
        if (*(double *)(a1 + 512) > 0.0) {
          double v129 = v10;
        }
        *(double *)(a1 + 2200) = *(double *)(a1 + 2200) + v129;
        char v255 = 1;
        *(void *)&v251[16] = *(void *)&v250[56];
      }
      else
      {
        *(void *)(a1 + 2200) = 0;
      }
      v251[113] = v127;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v130 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v131 = *(void *)(a1 + 2200);
        *(_DWORD *)buf = 134349568;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v128;
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = v131;
        _os_log_impl(&dword_1906B8000, v130, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v195 = *(void *)(a1 + 2200);
        *(_DWORD *)__int16 v284 = 134349568;
        *(void *)&v284[4] = v4;
        *(_WORD *)&v284[12] = 1026;
        *(_DWORD *)&v284[14] = v128;
        *(_WORD *)&v284[18] = 2050;
        *(void *)&v284[20] = v195;
        int v196 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v196);
        if (v196 != buf) {
          free(v196);
        }
      }
    }
    int v132 = v251[112];
    if (v251[112])
    {
      if (!*(unsigned char *)(a1 + 768))
      {
        *(void *)(a1 + 2096) = 0;
        *(void *)(a1 + 2104) = 0;
        *(void *)(a1 + 2112) = 0x3FF0000000000000;
      }
    }
    else if (*(unsigned char *)(a1 + 768))
    {
      *(_OWORD *)(a1 + 2096) = xmmword_190884910;
      *(void *)(a1 + 2112) = 0;
    }
    double v133 = -0.1;
    if (*((double *)&v248 + 1) >= 0.0)
    {
      double v134 = *(double *)(a1 + 528);
      if (v134 >= 0.0) {
        double v133 = vabdd_f64(*((double *)&v248 + 1), v134) * 0.1;
      }
    }
    if (v132) {
      BOOL v135 = v251[113] == 0;
    }
    else {
      BOOL v135 = 0;
    }
    if (v135) {
      double v136 = v133;
    }
    else {
      double v136 = -v133;
    }
    double v137 = *(double *)(a1 + 2104) + v136;
    if (v135) {
      double v133 = -v133;
    }
    double v138 = fmin(fmax(*(double *)(a1 + 2112) + v133, 0.0), 1.0);
    *(double *)(a1 + 2112) = v138;
    double v139 = fmin(fmax(v137, 0.0), 1.0);
    *(double *)(a1 + 2104) = v139;
    *(double *)(a1 + 2096) = *(double *)(a1 + 2096) + 1.0;
    *(float64x2_t *)int v251 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v250[8], v138), *(float64x2_t *)v251, v139);
    *(_OWORD *)&v251[176] = *(_OWORD *)v251;
    *(_DWORD *)&v251[128] = 3;
    if (v138 >= 1.0)
    {
      int v140 = 0;
    }
    else
    {
      if (v139 < 1.0)
      {
LABEL_399:
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v141 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v142 = *(void *)(a1 + 2112);
          uint64_t v143 = *(void *)(a1 + 2104);
          uint64_t v144 = *(void *)(a1 + 2096);
          *(_DWORD *)buf = 134350080;
          *(void *)&uint8_t buf[4] = *((void *)&v247 + 1);
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v142;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v143;
          *(_WORD *)&buf[32] = 2050;
          *(void *)&buf[34] = v144;
          *(_WORD *)&buf[42] = 1026;
          *(_DWORD *)&buf[44] = *(_DWORD *)&v251[128];
          _os_log_impl(&dword_1906B8000, v141, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,fRawWeight,%{public}.2lf,fSnapWeight,%{public}.2lf,fTimeInMode,%{public}.2lf,snapType,%{public}d", buf, 0x30u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v191 = *(void *)(a1 + 2112);
          uint64_t v192 = *(void *)(a1 + 2104);
          uint64_t v193 = *(void *)(a1 + 2096);
          *(_DWORD *)__int16 v284 = 134350080;
          *(void *)&v284[4] = *((void *)&v247 + 1);
          *(_WORD *)&v284[12] = 2050;
          *(void *)&v284[14] = v191;
          *(_WORD *)&v284[22] = 2050;
          *(void *)&v284[24] = v192;
          *(_WORD *)&v284[32] = 2050;
          *(void *)&v284[34] = v193;
          *(_WORD *)&v284[42] = 1026;
          *(_DWORD *)&v284[44] = *(_DWORD *)&v251[128];
          int v194 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMM::MMPartialMatcher::getPartialMatchedSolution(MMSnapData &, const MMSnapData &)", "CoreLocation: %s\n", v194);
          if (v194 != buf) {
            free(v194);
          }
        }
        goto LABEL_404;
      }
      int v140 = 1;
    }
    *(_DWORD *)&v251[128] = v140;
    goto LABEL_399;
  }
LABEL_404:
  if ((v216 & 1) != 0
    || (*(unsigned int (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 80))(a1, v218, v217))
  {
    uint64_t v146 = *(void *)(a1 + 240);
    uint64_t v145 = *(void *)(a1 + 248);
    sub_190841900(a1);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v147 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v146 != v145;
      _os_log_impl(&dword_1906B8000, v147, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)__int16 v284 = 134349312;
      *(void *)&v284[4] = v4;
      *(_WORD *)&v284[12] = 1026;
      *(_DWORD *)&v284[14] = v146 != v145;
      uint64_t v190 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v190);
      if (v190 != buf) {
        free(v190);
      }
    }
    char v221 = 0;
    sub_19084F340(v220);
    memset(v220, 0, 24);
    memset(buf, 0, 24);
    *(void *)__int16 v284 = buf;
    sub_1907D5AB4((void ***)v284);
    if (*((void *)&v220[1] + 1))
    {
      *(void *)&v220[2] = *((void *)&v220[1] + 1);
      operator delete(*((void **)&v220[1] + 1));
    }
    memset((char *)&v220[1] + 8, 0, 24);
    *(void *)&long long v222 = 0xBFF0000000000000;
    sub_19083C6B8((uint64_t)&v222 + 8);
    bzero(buf, 0x300uLL);
    buf[20] = 1;
    memset(&v352[4], 0, 24);
    memset(&buf[32], 0, 49);
    *(void *)v353 = 0xBFF0000000000000;
    *(_OWORD *)&v353[8] = 0u;
    int v354 = 0;
    char v355 = 1;
    long long v356 = 0u;
    long long v357 = 0u;
    long long v358 = 0u;
    char v359 = 0;
    uint64_t v361 = 0;
    char v362 = 0;
    *(_OWORD *)v360 = 0u;
    long long v363 = 0u;
    long long v364 = v212;
    long long v365 = 0u;
    unint64_t v366 = 0xBFF0000000000000;
    memset(&v376[32], 0, 32);
    __int16 v377 = 0;
    long long v378 = 0u;
    long long v379 = 0u;
    long long v380 = 0u;
    memset(v381, 0, 27);
    memset(&v381[32], 0, 48);
    long long v367 = 0u;
    long long v368 = 0u;
    long long v369 = 0u;
    long long v370 = 0u;
    long long v371 = 0u;
    long long v372 = 0u;
    long long v373 = 0u;
    long long v374 = 0u;
    long long v375 = 0u;
    memset(v376, 0, 30);
    unint64_t v382 = 0xBFF0000000000000;
    long long v384 = 0u;
    long long v383 = xmmword_1908820F0;
    uint64_t v385 = 0x3FF0000000000000;
    *(_DWORD *)((char *)v387 + 7) = 0;
    v387[0] = 0;
    long long v386 = 0u;
    *(_DWORD *)((char *)v388 + 7) = 0;
    v388[0] = 0;
    sub_19084363C((uint64_t)&v225, (long long *)buf);
    if (v387[0]) {
      sub_1906BFE48(v387[0]);
    }
    if (SHIBYTE(v372) < 0) {
      operator delete(*((void **)&v371 + 1));
    }
    if (v360[0]) {
      operator delete(v360[0]);
    }
    if (*(void *)&v353[16]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&v353[16]);
    }
    if (*(void *)&v352[4]) {
      operator delete(*(void **)&v352[4]);
    }
    if (*(void *)&buf[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
    }
    long long v148 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v250[16] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v250[32] = v148;
    long long v149 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)&v250[48] = *(_OWORD *)(a2 + 96);
    *(_OWORD *)&v250[64] = v149;
    long long v150 = *(_OWORD *)(a2 + 16);
    long long v247 = *(_OWORD *)a2;
    long long v248 = v150;
    long long v151 = *(_OWORD *)(a2 + 48);
    long long v249 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)__int16 v250 = v151;
    std::string::operator=((std::string *)&v250[80], (const std::string *)(a2 + 128));
    memcpy(v251, (const void *)(a2 + 152), 0x118uLL);
    if (v146 != v145 && ((*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 24))(a1, v218) & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v188 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_1906B8000, v188, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to re-initialize filter", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)__int16 v284 = 134349056;
        *(void *)&v284[4] = v4;
        uint64_t v197 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v197);
        if (v197 != buf) {
          free(v197);
        }
      }
      uint64_t v17 = 0;
      goto LABEL_518;
    }
  }
  if (BYTE2(v257[1]))
  {
    if ((void)v236)
    {
      uint64_t v152 = *(void *)v236;
      char v153 = v238;
      uint64_t v154 = *(void *)(a1 + 1056);
      uint64_t v155 = *(void *)(a1 + 1048);
      if (!v154 || v152 != *(void *)(v155 + 16) || v238 != *(unsigned __int8 *)(v155 + 24))
      {
        double v156 = operator new(0x20uLL);
        v156[1] = v155;
        v156[2] = v152;
        *((unsigned char *)v156 + 24) = v153;
        *double v156 = a1 + 1040;
        *(void *)uint64_t v155 = v156;
        *(void *)(a1 + 1048) = v156;
        *(void *)(a1 + 1056) = v154 + 1;
        if ((int)v154 + 1 >= 51)
        {
          int v157 = *(uint64_t **)(a1 + 1040);
          uint64_t v158 = *v157;
          *(void *)(v158 + 8) = v157[1];
          *(void *)v157[1] = v158;
          *(void *)(a1 + 1056) = v154;
          operator delete(v157);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 1010) && !*(void *)(a1 + 384)) {
    goto LABEL_436;
  }
  if (!BYTE2(v257[1]))
  {
LABEL_475:
    if (*(unsigned char *)(a1 + 1064))
    {
      if (!BYTE2(v257[1])
        || (long double v176 = sub_1906DA618((double *)(a1 + 168), *(double *)(a1 + 1120), *(double *)(a1 + 1128), *(double *)v251, *(double *)&v251[8], *(double *)&v250[24]), *(long double *)(a1 + 1072) = v176, v176 > 450.0))
      {
        *(unsigned char *)(a1 + 1064) = 0;
      }
    }
    goto LABEL_479;
  }
  if ((void)v236)
  {
    if (*(unsigned char *)(a1 + 1010))
    {
      double v161 = sub_1906DA618((double *)(a1 + 168), *(double *)(a1 + 416), *(double *)(a1 + 424), *(double *)&v240, *((double *)&v240 + 1), *(double *)&v250[24]);
      uint64_t v162 = *(void *)(a1 + 392);
      *(void *)buf = *(void *)(a1 + 384);
      *(void *)&uint8_t buf[8] = v162;
      if (v162) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 8), 1uLL, memory_order_relaxed);
      }
      long long v163 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a1 + 400);
      *(_OWORD *)&buf[32] = v163;
      uint64_t v164 = *(void *)(a1 + 432);
      *(_OWORD *)&buf[56] = *(_OWORD *)(a1 + 440);
      *(_OWORD *)&buf[65] = *(_OWORD *)(a1 + 449);
      *(void *)&unsigned char buf[48] = v164;
      memset(&v352[4], 0, 24);
      sub_1907B5854(&v352[4], *(const void **)(a1 + 472), *(void *)(a1 + 480), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 3));
      *(_DWORD *)&v284[16] = 0;
      v284[21] = 0;
      *(_DWORD *)&v284[24] = 0;
      *(void *)&v284[40] = 0;
      *(void *)&v284[32] = 0;
      uint64_t v165 = *(void *)buf;
      uint64_t v166 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)__int16 v284 = v165;
      *(void *)&v284[8] = v166;
      uint64_t v167 = *(void *)a1;
      v284[20] = buf[20];
      *(void *)&v284[48] = *(void *)&buf[48];
      double v261 = 0.0;
      uint64_t v260 = 0;
      *(void *)__int16 v262 = v262;
      *(void *)&v262[8] = v262;
      *(void *)&v262[16] = 0;
      *(void *)&long long v348 = &v348;
      *((void *)&v348 + 1) = &v348;
      uint64_t v349 = 0;
      int v259 = 0;
      int v168 = (*(uint64_t (**)(uint64_t, unsigned char *, int *, unsigned char *, long long *, double *, uint64_t *, double))(v167 + 88))(a1, v284, &v259, v262, &v348, &v261, &v260, v161);
      if (v259 > 1) {
        int v169 = v168;
      }
      else {
        int v169 = 0;
      }
      if (v169)
      {
        long long v170 = *(_OWORD *)v284;
        if (*(void *)&v284[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v284[8] + 8), 1uLL, memory_order_relaxed);
        }
        int v171 = *(std::__shared_weak_count **)&buf[8];
        *(_OWORD *)buf = v170;
        if (v171) {
          sub_1906BFE48(v171);
        }
        *(void *)&unsigned char buf[48] = *(void *)&v284[48];
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v284[16];
        *(double *)&buf[32] = v261;
        *(void *)&buf[40] = v260;
      }
      sub_190770ADC((uint64_t *)&v348);
      sub_190770ADC((uint64_t *)v262);
      if (*(void *)&v284[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&v284[8]);
      }
      if (v169)
      {
        *(unsigned char *)(a1 + 1064) = 1;
        *(_DWORD *)(a1 + 1200) = v259;
        uint64_t v172 = *(void *)buf;
        uint64_t v173 = *(void *)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 1088) = v172;
        int v174 = *(std::__shared_weak_count **)(a1 + 1096);
        *(void *)(a1 + 1096) = v173;
        if (v174) {
          sub_1906BFE48(v174);
        }
        long long v175 = *(_OWORD *)&buf[32];
        *(_OWORD *)(a1 + 1104) = *(_OWORD *)&buf[16];
        *(_OWORD *)(a1 + 1120) = v175;
        *(void *)(a1 + 1136) = *(void *)&buf[48];
        *(_OWORD *)(a1 + 1144) = *(_OWORD *)&buf[56];
        *(_OWORD *)(a1 + 1153) = *(_OWORD *)&buf[65];
        if ((unsigned char *)(a1 + 1088) != buf) {
          sub_1907B5974((char *)(a1 + 1176), *(char **)&v352[4], *(uint64_t *)&v352[12], 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)&v352[12] - *(void *)&v352[4]) >> 3));
        }
        *(void *)(a1 + 1080) = *(void *)(a1 + 512);
      }
      if (*(void *)&v352[4])
      {
        *(void *)&v352[12] = *(void *)&v352[4];
        operator delete(*(void **)&v352[4]);
      }
      if (*(void *)&buf[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    goto LABEL_475;
  }
LABEL_436:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  double v159 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = *((void *)&v247 + 1);
    _os_log_impl(&dword_1906B8000, v159, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, prior or current snap is valid but bestparticle road is null", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)__int16 v284 = 134349056;
    *(void *)&v284[4] = *((void *)&v247 + 1);
    uint64_t v160 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::updateIntersectionInfo(const MMFilterData &, const MMSnapData &, CLParticleMapMatcherCommon::IntersectionInfo &)", "CoreLocation: %s\n", v160);
    if (v160 != buf) {
      free(v160);
    }
  }
LABEL_479:
  if (!v211)
  {
    if (v251[112])
    {
      if (!v251[113])
      {
        double v183 = *(double *)&v250[32];
        if (*(double *)&v250[32] < 400.0 && *(double *)&v250[32] > 0.0 && (!v246 || LOBYTE(v257[3])))
        {
          double v184 = sub_1906DA618((double *)(a1 + 168), *(double *)&v250[8], *(double *)&v250[16], *(double *)v251, *(double *)&v251[8], 0.0);
          double v185 = v184 / v183;
          if (v185 > 1.5)
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            int v186 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134351617;
              *(void *)&uint8_t buf[4] = *((void *)&v247 + 1);
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = *(void *)&v250[8];
              *(_WORD *)&buf[22] = 2049;
              *(void *)&unsigned char buf[24] = *(void *)&v250[16];
              *(_WORD *)&buf[32] = 2050;
              *(void *)&buf[34] = *(void *)&v250[24];
              *(_WORD *)&buf[42] = 2050;
              *(void *)&buf[44] = *(void *)&v250[56];
              *(_WORD *)&buf[52] = 2049;
              *(void *)&buf[54] = *(void *)v251;
              *(_WORD *)&buf[62] = 2049;
              *(void *)&buf[64] = *(void *)&v251[8];
              *(_WORD *)&buf[72] = 2050;
              *(void *)&buf[74] = *(void *)&v251[16];
              __int16 v351 = 2050;
              *(double *)v352 = v184;
              *(_WORD *)&v352[8] = 2050;
              *(void *)&v352[10] = *(void *)&v250[32];
              *(_WORD *)&v352[18] = 2050;
              *(double *)&v352[20] = v185;
              _os_log_impl(&dword_1906B8000, v186, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              *(_DWORD *)__int16 v284 = 134351617;
              *(void *)&v284[4] = *((void *)&v247 + 1);
              *(_WORD *)&v284[12] = 2049;
              *(void *)&v284[14] = *(void *)&v250[8];
              *(_WORD *)&v284[22] = 2049;
              *(void *)&v284[24] = *(void *)&v250[16];
              *(_WORD *)&v284[32] = 2050;
              *(void *)&v284[34] = *(void *)&v250[24];
              *(_WORD *)&v284[42] = 2050;
              *(void *)&v284[44] = *(void *)&v250[56];
              *(_WORD *)&v284[52] = 2049;
              *(void *)&v284[54] = *(void *)v251;
              *(_WORD *)&v284[62] = 2049;
              *(void *)&v284[64] = *(void *)&v251[8];
              *(_WORD *)&v284[72] = 2050;
              *(void *)&v284[74] = *(void *)&v251[16];
              *(_WORD *)&v284[82] = 2050;
              *(double *)&v284[84] = v184;
              __int16 v285 = 2050;
              *(void *)__int16 v286 = *(void *)&v250[32];
              *(_WORD *)&v286[8] = 2050;
              *(double *)&v286[10] = v185;
              uint64_t v199 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::modifyHorizontalUncertainty(MMFilterData &)", "CoreLocation: %s\n", v199);
              if (v199 != buf) {
                free(v199);
              }
            }
            double v187 = v184 * 1.05;
            if (v184 * 1.05 > 400.0) {
              double v187 = 400.0;
            }
            *(double *)&v250[32] = v187;
          }
        }
      }
    }
  }
  if (v251[112])
  {
    double v177 = *((double *)&v248 + 1);
    *(void *)(a1 + 232) = *((void *)&v248 + 1);
    if (*(unsigned char *)(a1 + 10))
    {
      if (!BYTE1(v257[1]))
      {
        if (*(_DWORD *)&v251[264] <= 6u && ((0x58u >> v251[264]) & 1) != 0 && *(unsigned char *)(a1 + 11)
          || (double v178 = *(double *)(a1 + 1872), v178 >= 0.0) && vabdd_f64(v177, v178) <= 6.0)
        {
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 96))(a1, v218, v217);
        }
      }
    }
  }
  if (v215 != (uint64_t **)v220) {
    sub_19084F698((uint64_t *)v215, *(uint64_t **)&v220[0], *((uint64_t **)&v220[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v220[0] + 1) - *(void *)&v220[0]) >> 4));
  }
  sub_190841EA4(v217, (uint64_t *)&v225);
  long long v179 = *(_OWORD *)&v250[32];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v250[16];
  *(_OWORD *)(a2 + 80) = v179;
  long long v180 = *(_OWORD *)&v250[64];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v250[48];
  *(_OWORD *)(a2 + 112) = v180;
  long long v181 = v248;
  *(_OWORD *)a2 = v247;
  *(_OWORD *)(a2 + 16) = v181;
  long long v182 = *(_OWORD *)v250;
  *(_OWORD *)(a2 + 32) = v249;
  *(_OWORD *)(a2 + 48) = v182;
  std::string::operator=((std::string *)(a2 + 128), (const std::string *)&v250[80]);
  memcpy((void *)(a2 + 152), v251, 0x118uLL);
  if (*(unsigned char *)(a2 + 264) && *(unsigned char *)(a2 + 265) && *(_DWORD *)(a2 + 280) == 3 && !*(unsigned char *)(a1 + 12)) {
    *(unsigned char *)(a2 + 265) = 0;
  }
  uint64_t v17 = v216 ^ 1u;
LABEL_518:
  double v5 = v214;
  sub_19084F19C((uint64_t)v218);
LABEL_519:
  if (v5) {
    sub_1906BFE48(v5);
  }
  return v17;
}

void sub_1906D1D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a22) {
    sub_1906BFE48(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1906D1E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 48) == *(void *)(a2 + 40)) {
    return 0;
  }
  double v4 = *(double *)(a2 + 384);
  if (*(unsigned char *)(a2 + 881))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous check,already ambiguous", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)int v204 = 134349056;
    *(double *)&v204[4] = v4;
    double v57 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
LABEL_336:
    if (v57 != buf) {
      free(v57);
    }
    return 1;
  }
  int v9 = *(_DWORD *)(a2 + 792) - 2;
  double v10 = 10.0;
  if (v9 <= 4) {
    double v10 = dbl_190886110[v9];
  }
  double v11 = *(double *)(a2 + 456) + *(double *)(a2 + 456);
  if (v11 >= v10) {
    double v11 = v10;
  }
  if (v11 >= 7.0) {
    double v12 = v11;
  }
  else {
    double v12 = 7.0;
  }
  double v13 = fabs(*(double *)(a2 + 632));
  if (*(unsigned char *)(a2 + 882))
  {
    sub_1907E4A54((char *)(a1 + 2120), *(double *)(a2 + 608));
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a1 + 2144);
      uint64_t v16 = *(void *)(a2 + 608);
      uint64_t v17 = *(void *)(a1 + 2152);
      int v18 = *(double **)(a1 + 2184);
      float v19 = *(double **)(a1 + 2176);
      unint64_t v20 = v18 - v19;
      double v21 = 0.0;
      if (v18 == v19)
      {
        double v32 = 0.0;
        double v33 = 0.0;
      }
      else
      {
        float v22 = *(double **)(a1 + 2176);
        do
        {
          double v23 = *v22++;
          double v21 = v21 + v23;
        }
        while (v22 != v18);
        uint64_t v24 = 60;
        if (v20 < 0x3C) {
          uint64_t v24 = v20;
        }
        double v25 = 0.0;
        double v26 = 0.0;
        if (v24)
        {
          __n128 v27 = *(double **)(a1 + 2176);
          do
          {
            double v28 = *v27++;
            double v26 = v26 + v28;
            --v24;
          }
          while (v24);
        }
        double v29 = (double)v20;
        uint64_t v30 = 30;
        if (v20 < 0x1E) {
          uint64_t v30 = v20;
        }
        if (v30)
        {
          double v25 = 0.0;
          do
          {
            double v31 = *v19++;
            double v25 = v25 + v31;
            --v30;
          }
          while (v30);
        }
        double v32 = v21 / v29;
        double v21 = v26 / v29;
        double v33 = v25 / v29;
      }
      int v34 = *(unsigned __int8 *)(a2 + 640);
      double v35 = fabs(*(double *)(a2 + 616));
      BOOL v36 = *(void *)(a1 + 2088) != 0;
      BOOL v37 = *(void *)(a1 + 2080) != 0;
      *(_DWORD *)buf = 134352384;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v15;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 2050;
      *(void *)&buf[30] = v17;
      *(_WORD *)&buf[38] = 2050;
      *(double *)&buf[40] = v32;
      *(_WORD *)&unsigned char buf[48] = 2050;
      *(void *)&buf[50] = v20;
      *(_WORD *)&buf[58] = 2050;
      *(double *)&buf[60] = v21;
      *(_WORD *)&buf[68] = 2050;
      *(double *)&buf[70] = v33;
      *(_WORD *)&buf[78] = 1026;
      *(_DWORD *)&buf[80] = v34;
      __int16 v216 = 2050;
      double v217 = v35;
      __int16 v218 = 2050;
      double v219 = v13;
      __int16 v220 = 2050;
      double v221 = v12;
      __int16 v222 = 1026;
      BOOL v223 = v36;
      __int16 v224 = 1026;
      BOOL v225 = v37;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,AverageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf,avfBuffer,%{public}.4lf,avfBufferCnt,%{public}zu,avfBuffer60,%{public}.4lf,avfBuffer30,%{public}.4lf,isUsable,%{public}d,deltaAz,%{public}.2lf,fabsAT,%{public}.2lf,threshold,%{public}.2lf,usingAPI,%{public}d,usingBuffer,%{public}d", buf, 0x7Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v154 = *(_DWORD *)(a1 + 2144);
      uint64_t v155 = *(void *)(a2 + 608);
      uint64_t v156 = *(void *)(a1 + 2152);
      int v157 = *(double **)(a1 + 2184);
      uint64_t v158 = *(double **)(a1 + 2176);
      unint64_t v159 = v157 - v158;
      double v160 = 0.0;
      if (v157 == v158)
      {
        double v171 = 0.0;
        double v172 = 0.0;
      }
      else
      {
        double v161 = *(double **)(a1 + 2176);
        do
        {
          double v162 = *v161++;
          double v160 = v160 + v162;
        }
        while (v161 != v157);
        uint64_t v163 = 60;
        if (v159 < 0x3C) {
          uint64_t v163 = v159;
        }
        double v164 = 0.0;
        double v165 = 0.0;
        if (v163)
        {
          uint64_t v166 = *(double **)(a1 + 2176);
          do
          {
            double v167 = *v166++;
            double v165 = v165 + v167;
            --v163;
          }
          while (v163);
        }
        double v168 = (double)v159;
        uint64_t v169 = 30;
        if (v159 < 0x1E) {
          uint64_t v169 = v159;
        }
        if (v169)
        {
          double v164 = 0.0;
          do
          {
            double v170 = *v158++;
            double v164 = v164 + v170;
            --v169;
          }
          while (v169);
        }
        double v171 = v160 / v168;
        double v160 = v165 / v168;
        double v172 = v164 / v168;
      }
      int v173 = *(unsigned __int8 *)(a2 + 640);
      double v174 = fabs(*(double *)(a2 + 616));
      BOOL v175 = *(void *)(a1 + 2088) != 0;
      BOOL v176 = *(void *)(a1 + 2080) != 0;
      *(_DWORD *)int v204 = 134352384;
      *(double *)&v204[4] = v4;
      *(_WORD *)&v204[12] = 1026;
      *(_DWORD *)&v204[14] = v154;
      *(_WORD *)&v204[18] = 2050;
      *(void *)&v204[20] = v155;
      *(_WORD *)&v204[28] = 2050;
      *(void *)&v204[30] = v156;
      *(_WORD *)&v204[38] = 2050;
      *(double *)&v204[40] = v171;
      *(_WORD *)&v204[48] = 2050;
      *(void *)&v204[50] = v159;
      *(_WORD *)&v204[58] = 2050;
      *(double *)&v204[60] = v160;
      *(_WORD *)&v204[68] = 2050;
      *(double *)&v204[70] = v172;
      *(_WORD *)&v204[78] = 1026;
      *(_DWORD *)&v204[80] = v173;
      __int16 v205 = 2050;
      double v206 = v174;
      __int16 v207 = 2050;
      double v208 = v13;
      __int16 v209 = 2050;
      double v210 = v12;
      __int16 v211 = 1026;
      BOOL v212 = v175;
      __int16 v213 = 1026;
      BOOL v214 = v176;
      double v177 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v177);
      if (v177 != buf) {
        free(v177);
      }
    }
  }
  if (!*(void *)(a1 + 2088) && !*(void *)(a1 + 2080)) {
    return 0;
  }
  double v38 = *(double *)(a1 + 1872);
  double v39 = vabdd_f64(*(double *)(a2 + 400), v38);
  if (v38 >= 0.0 && v39 <= 6.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v43 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,routeHintsAvailable,1", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_358;
    }
    goto LABEL_393;
  }
  if (!*(unsigned char *)(a2 + 640))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v44 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,isSnapUsable,0", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_358;
    }
    goto LABEL_393;
  }
  int32x2_t v41 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)(a2 + 432), *(float64x2_t *)(a2 + 528))));
  if (vand_s8((int8x8_t)v41, (int8x8_t)vdup_lane_s32(v41, 1)).u8[0])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v42 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,sameAsRawGPS,1", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_358;
    }
LABEL_393:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_358:
    *(_DWORD *)int v204 = 134349056;
    *(double *)&v204[4] = v4;
    float v86 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v86);
LABEL_359:
    if (v86 != buf) {
      free(v86);
    }
    return 0;
  }
  uint64_t v46 = *(void *)(a2 + 384);
  *(unsigned char *)(a2 + 898) = 0;
  uint64_t v47 = a2 + 256;
  double v48 = fmod(*(double *)(a2 + 480) - *(float *)(a2 + 280), 360.0);
  if (v48 < 0.0) {
    double v48 = v48 + 360.0;
  }
  if (v48 > 180.0) {
    double v48 = v48 + -360.0;
  }
  if ((*(_DWORD *)(a2 + 792) - 1) >= 2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v54 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v55 = *(_DWORD *)(a2 + 792);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v55;
      _os_log_impl(&dword_1906B8000, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,signalEnv,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v178 = *(_DWORD *)(a2 + 792);
      *(_DWORD *)int v204 = 134349312;
      *(void *)&v204[4] = v46;
      *(_WORD *)&v204[12] = 1026;
      *(_DWORD *)&v204[14] = v178;
      long long v179 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v179);
      if (v179 != buf) {
        free(v179);
      }
    }
    if (!*(unsigned char *)(a2 + 898)) {
      goto LABEL_158;
    }
    goto LABEL_89;
  }
  double v49 = fabs(v48);
  if (v49 <= 15.0 || fabs(*(double *)(a2 + 632)) < 1.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v50 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v51 = *(void *)(a2 + 632);
      *(_DWORD *)buf = 134349568;
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v49;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v51;
      _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,courseDiff,%{public}.3lf,acrossTrack,%{public}.3lf", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_158;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v52 = *(void *)(a2 + 632);
    *(_DWORD *)int v204 = 134349568;
    *(void *)&v204[4] = v46;
    *(_WORD *)&v204[12] = 2050;
    *(double *)&v204[14] = v49;
    *(_WORD *)&v204[22] = 2050;
    *(void *)&v204[24] = v52;
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v53);
    goto LABEL_81;
  }
  if (!*(void *)v47)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v64 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid road pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_158;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)int v204 = 134349056;
    *(void *)&v204[4] = v46;
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v53);
LABEL_81:
    if (v53 != buf) {
      free(v53);
    }
    goto LABEL_158;
  }
  uint64_t v59 = *(void *)(a1 + 208);
  double v58 = *(std::__shared_weak_count **)(a1 + 216);
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v59)
  {
    double v60 = v12;
    double v61 = fmin(fmax(*(double *)(*(void *)v47 + 96) + *(double *)(*(void *)v47 + 96), 15.0), 45.0);
    int v201 = (uint64_t *)&v201;
    int v202 = (uint64_t *)&v201;
    unint64_t v203 = 0;
    v200[0] = v59;
    v200[1] = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v62 = sub_190844368(v200, (double *)(a2 + 256), *(unsigned char *)(a2 + 276), (uint64_t *)&v201, v61 + 0.5);
    char v63 = v62;
    if (v58)
    {
      sub_1906BFE48(v58);
      if (v63)
      {
        uint64_t v197 = (uint64_t)&v197;
        int v198 = &v197;
        unint64_t v199 = 0;
        uint64_t v195 = v59;
        int v196 = v58;
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_122;
      }
    }
    else if (v62)
    {
      uint64_t v197 = (uint64_t)&v197;
      int v198 = &v197;
      unint64_t v199 = 0;
      uint64_t v195 = v59;
      int v196 = 0;
LABEL_122:
      char v67 = sub_190844368(&v195, (double *)(a2 + 256), *(unsigned char *)(a2 + 276) == 0, &v197, v61 + 0.5);
      if (v58) {
        sub_1906BFE48(v58);
      }
      if (v67)
      {
        unint64_t v68 = v203;
        unint64_t v69 = v199;
        if (v203 > 1
          || v199 > 1
          || *(unsigned char *)(a3 + 762)
          && *(void *)(a3 + 120)
          && (sub_1907BDE7C(a2 + 256, (uint64_t)buf),
              sub_1907BDE7C(a3 + 120, (uint64_t)v204),
              *(void *)buf == *(void *)v204)
          && buf[16] == v204[16]
          && *(void *)&buf[8] == *(void *)&v204[8])
        {
          *(unsigned char *)(a2 + 898) = 1;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        BOOL v70 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v71 = *(uint64_t **)(a2 + 256);
          uint64_t v72 = *v71;
          uint64_t v73 = v71[12];
          double v74 = *(double *)(a2 + 632);
          int v75 = *(unsigned __int8 *)(a2 + 898);
          *(_DWORD *)buf = 134351617;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&unsigned char buf[14] = v72;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v68 > 1;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v69 > 1;
          *(_WORD *)&buf[34] = 2050;
          *(void *)&buf[36] = v203;
          *(_WORD *)&buf[44] = 2050;
          *(void *)&buf[46] = v199;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v61;
          *(_WORD *)&buf[64] = 2050;
          *(void *)&buf[66] = v73;
          *(_WORD *)&buf[74] = 2050;
          *(double *)&buf[76] = v49;
          __int16 v216 = 2050;
          double v217 = v74;
          __int16 v218 = 1026;
          LODWORD(v219) = v75;
          _os_log_impl(&dword_1906B8000, v70, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck,road,%{private}lld,isApproachingMulti,%{public}d,justCrossedMulti,%{public}d,nextList,%{public}lu,priorList,%{public}lu,threshold,%{public}.1lf,roadWidth,%{public}.1lf,courseDiff,%{public}.3lf,AT,%{public}.3lf,harshAmb,%{public}d", buf, 0x64u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v187 = *(uint64_t **)(a2 + 256);
          uint64_t v188 = *v187;
          uint64_t v189 = v187[12];
          double v190 = *(double *)(a2 + 632);
          int v191 = *(unsigned __int8 *)(a2 + 898);
          *(_DWORD *)int v204 = 134351617;
          *(void *)&v204[4] = v46;
          *(_WORD *)&v204[12] = 2049;
          *(void *)&v204[14] = v188;
          *(_WORD *)&v204[22] = 1026;
          *(_DWORD *)&v204[24] = v68 > 1;
          *(_WORD *)&v204[28] = 1026;
          *(_DWORD *)&v204[30] = v69 > 1;
          *(_WORD *)&v204[34] = 2050;
          *(void *)&v204[36] = v203;
          *(_WORD *)&v204[44] = 2050;
          *(void *)&v204[46] = v199;
          *(_WORD *)&v204[54] = 2050;
          *(double *)&v204[56] = v61;
          *(_WORD *)&v204[64] = 2050;
          *(void *)&v204[66] = v189;
          *(_WORD *)&v204[74] = 2050;
          *(double *)&v204[76] = v49;
          __int16 v205 = 2050;
          double v206 = v190;
          __int16 v207 = 1026;
          LODWORD(v208) = v191;
          uint64_t v192 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v192);
          if (v192 != buf) {
            free(v192);
          }
        }
        BOOL v66 = *(unsigned char *)(a2 + 898) != 0;
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v12 = v60;
        char v77 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(void *)&uint8_t buf[4] = v46;
          _os_log_impl(&dword_1906B8000, v77, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for prior connected candidates", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2))
        {
          BOOL v66 = 0;
          goto LABEL_152;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)int v204 = 134349056;
        *(void *)&v204[4] = v46;
        int v186 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v186);
        if (v186 != buf) {
          free(v186);
        }
        BOOL v66 = 0;
      }
      double v12 = v60;
LABEL_152:
      sub_19079AA88(&v197);
LABEL_153:
      sub_19079AA88((uint64_t *)&v201);
      goto LABEL_154;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v12 = v60;
    char v76 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl(&dword_1906B8000, v76, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for next connected candidates", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)int v204 = 134349056;
      *(void *)&v204[4] = v46;
      double v185 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v185);
      if (v185 != buf) {
        free(v185);
      }
      BOOL v66 = 0;
      double v12 = v60;
    }
    else
    {
      BOOL v66 = 0;
    }
    goto LABEL_153;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  char v65 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = v46;
    _os_log_impl(&dword_1906B8000, v65, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)int v204 = 134349056;
    *(void *)&v204[4] = v46;
    double v184 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v184);
    if (v184 != buf) {
      free(v184);
    }
  }
  BOOL v66 = 0;
LABEL_154:
  if (v58)
  {
    sub_1906BFE48(v58);
    if (!v66) {
      goto LABEL_158;
    }
LABEL_89:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v56 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,isHarshDigitizationCaseAtTurns,1", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)int v204 = 134349056;
    *(double *)&v204[4] = v4;
    double v57 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
    goto LABEL_336;
  }
  if (v66) {
    goto LABEL_89;
  }
LABEL_158:
  if (v13 <= v12)
  {
    double v87 = *(double *)(a1 + 2200);
    if (v87 > 3.0 && v87 < 20.0 && *(unsigned char *)(a3 + 505) && v13 > v12 * 0.85)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      float v88 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v89 = *(void *)(a1 + 2200);
        *(_DWORD *)buf = 134349824;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v12 * 0.85;
        *(_WORD *)&buf[32] = 2050;
        *(void *)&buf[34] = v89;
        _os_log_impl(&dword_1906B8000, v88, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1, previous solution was ambiguous and AT,%{public}.1lf,is over scaled threshold,%{public}.1lf,consecutiveAmbCnt,%{public}1lf", buf, 0x2Au);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v90 = *(void *)(a1 + 2200);
      *(_DWORD *)int v204 = 134349824;
      *(double *)&v204[4] = v4;
      *(_WORD *)&v204[12] = 2050;
      *(double *)&v204[14] = v13;
      *(_WORD *)&v204[22] = 2050;
      *(double *)&v204[24] = v12 * 0.85;
      *(_WORD *)&v204[32] = 2050;
      *(void *)&v204[34] = v90;
      double v57 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
      goto LABEL_336;
    }
    if (!*(unsigned char *)(a2 + 640)) {
      goto LABEL_216;
    }
    int v94 = *(double **)(a1 + 2184);
    int v95 = *(double **)(a1 + 2176);
    if (v94 == v95) {
      goto LABEL_216;
    }
    uint64_t v96 = v94 - v95;
    double v97 = 0.0;
    do
    {
      double v98 = *v95++;
      double v97 = v97 + v98;
    }
    while (v95 != v94);
    if (v97 / (double)(unint64_t)v96 <= 1.2)
    {
LABEL_216:
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v103 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v12;
        _os_log_impl(&dword_1906B8000, v103, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,lowAcrossTrack,%{public}.1lf,threshold,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)int v204 = 134349568;
      *(double *)&v204[4] = v4;
      *(_WORD *)&v204[12] = 2050;
      *(double *)&v204[14] = v13;
      *(_WORD *)&v204[22] = 2050;
      *(double *)&v204[24] = v12;
      float v86 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v86);
      goto LABEL_359;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v99 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v100 = *(_DWORD *)(a1 + 2144);
      uint64_t v101 = *(void *)(a2 + 608);
      uint64_t v102 = *(void *)(a1 + 2152);
      *(_DWORD *)buf = 134349824;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v100;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v101;
      *(_WORD *)&buf[28] = 2050;
      *(void *)&buf[30] = v102;
      _os_log_impl(&dword_1906B8000, v99, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,averageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf", buf, 0x26u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v180 = *(_DWORD *)(a1 + 2144);
      uint64_t v181 = *(void *)(a2 + 608);
      uint64_t v182 = *(void *)(a1 + 2152);
      *(_DWORD *)int v204 = 134349824;
      *(double *)&v204[4] = v4;
      *(_WORD *)&v204[12] = 1026;
      *(_DWORD *)&v204[14] = v180;
      *(_WORD *)&v204[18] = 2050;
      *(void *)&v204[20] = v181;
      *(_WORD *)&v204[28] = 2050;
      *(void *)&v204[30] = v182;
      double v183 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v183);
      if (v183 != buf) {
        free(v183);
      }
    }
    uint64_t v6 = 1;
    if (!*(unsigned char *)(a3 + 504) || *(unsigned char *)(a3 + 505)) {
      return v6;
    }
  }
  double v193 = v12;
  if (*(double *)(a2 + 568) > 0.0)
  {
    double v78 = *(double *)(a2 + 480);
    if (v78 >= 0.0)
    {
      double v79 = fmod(*(double *)(a2 + 680) - v78, 360.0);
      if (v79 < 0.0) {
        double v79 = v79 + 360.0;
      }
      if (v79 > 180.0) {
        double v79 = v79 + -360.0;
      }
      if ((!*(unsigned char *)(a3 + 505) || *(double *)(a1 + 2200) < 5.0) && *(double *)(a2 + 456) < 10.0)
      {
        double v80 = fabs(v79);
        double v81 = v12 * 1.5;
        if (v80 < 18.0 && v13 <= v81)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v83 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v84 = *(void *)(a2 + 456);
            *(_DWORD *)buf = 134350080;
            *(double *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v80;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v13;
            *(_WORD *)&buf[32] = 2050;
            *(void *)&buf[34] = v84;
            *(_WORD *)&buf[42] = 2050;
            *(double *)&buf[44] = v81;
            _os_log_impl(&dword_1906B8000, v83, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,overridden based on course matching,%{public}.2lf,AT,%{public}.2lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x34u);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v85 = *(void *)(a2 + 456);
          *(_DWORD *)int v204 = 134350080;
          *(double *)&v204[4] = v4;
          *(_WORD *)&v204[12] = 2050;
          *(double *)&v204[14] = v80;
          *(_WORD *)&v204[22] = 2050;
          *(double *)&v204[24] = v13;
          *(_WORD *)&v204[32] = 2050;
          *(void *)&v204[34] = v85;
          *(_WORD *)&v204[42] = 2050;
          *(double *)&v204[44] = v81;
          float v86 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v86);
          goto LABEL_359;
        }
      }
    }
  }
  if (*(void *)v47 && (*(unsigned char *)(a1 + 12) || (*(_DWORD *)(*(void *)v47 + 20) & 0xFFFFFFFE) == 8))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v91 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v92 = *(_DWORD *)(*(void *)v47 + 20);
      *(_DWORD *)buf = 134349312;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v92;
      _os_log_impl(&dword_1906B8000, v91, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,skipping building checks for unknown roads,%{public}d", buf, 0x12u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v93 = *(_DWORD *)(*(void *)v47 + 20);
    *(_DWORD *)int v204 = 134349312;
    *(double *)&v204[4] = v4;
    *(_WORD *)&v204[12] = 1026;
    *(_DWORD *)&v204[14] = v93;
    double v57 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
    goto LABEL_336;
  }
  if (*(double *)(a2 + 456) + 30.0 <= 45.0) {
    double v104 = *(double *)(a2 + 456) + 30.0;
  }
  else {
    double v104 = 45.0;
  }
  int v201 = 0;
  int v202 = 0;
  unint64_t v203 = 0;
  uint64_t v105 = *(void *)(a1 + 2080);
  if (v105)
  {
    memset(buf, 0, 24);
    sub_190749724(v105, (uint64_t *)buf, *(double *)(a2 + 432), *(double *)(a2 + 440), v104);
    sub_19084FA54((uint64_t *)&v201, (uint64_t)v201, *(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 6);
    sub_19074896C(*(void *)(a1 + 2080), 0, 1, v4, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(*(void *)(a1 + 2080) + 176));
    *(void *)int v204 = buf;
    sub_19084F9C8((void ***)v204);
  }
  else
  {
    sub_190810EC4(*(void *)(a1 + 2088), (uint64_t *)&v201, a2 + 376, v104);
  }
  uint64_t v106 = (uint64_t)v201;
  uint64_t v107 = v202;
  if ((unint64_t)((char *)v202 - (char *)v201) < 0x80)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v108 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = (unint64_t)((char *)v202 - (char *)v201) >> 6;
      _os_log_impl(&dword_1906B8000, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,fewerThan2Buildings,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)int v204 = 134349312;
      *(double *)&v204[4] = v4;
      *(_WORD *)&v204[12] = 1026;
      *(_DWORD *)&v204[14] = (unint64_t)((char *)v202 - (char *)v201) >> 6;
      uint64_t v109 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v109);
      goto LABEL_368;
    }
    goto LABEL_321;
  }
  if (v201 == v202)
  {
    int v110 = 0;
    int v111 = 0;
    goto LABEL_316;
  }
  double v194 = v4;
  int v110 = 0;
  int v111 = 0;
  do
  {
    int v113 = *(void **)(v106 + 8);
    uint64_t v112 = *(void **)(v106 + 16);
    double v114 = -1.0;
    if (v113 != v112)
    {
      double v115 = 0.0;
      double v116 = 0.0;
      double v117 = 0.0;
      do
      {
        long double v118 = *(double *)v113;
        long double v119 = *((double *)v113 + 1);
        v113 += 2;
        double v120 = atan2(v118, v119);
        if (v120 < 0.0) {
          double v120 = v120 + 6.28318531;
        }
        __double2 v121 = __sincos_stret(v120);
        double v115 = v115 + v121.__cosval;
        double v116 = v116 + v121.__sinval;
        double v117 = v117 + 1.0;
      }
      while (v113 != v112);
      if (v117 > 0.0)
      {
        long double v122 = atan2(v116 / v117, v115 / v117);
        double v123 = fmod(v122 * 57.2957795, 360.0);
        if (v123 >= 0.0) {
          double v114 = v123;
        }
        else {
          double v114 = v123 + 360.0;
        }
      }
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v124 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v125 = *(void *)(a2 + 432);
      uint64_t v126 = *(void *)(a2 + 440);
      uint64_t v127 = *(void *)(a2 + 480);
      *(_DWORD *)buf = 134351105;
      *(double *)&uint8_t buf[4] = v194;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = (unint64_t)((char *)v202 - (char *)v201) >> 6;
      *(_WORD *)&buf[18] = 2049;
      *(void *)&buf[20] = v125;
      *(_WORD *)&buf[28] = 2049;
      *(void *)&buf[30] = v126;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&buf[40] = v127;
      *(_WORD *)&unsigned char buf[48] = 1026;
      *(_DWORD *)&buf[50] = v111;
      *(_WORD *)&buf[54] = 1026;
      *(_DWORD *)&buf[56] = v110;
      *(_WORD *)&buf[60] = 2050;
      *(double *)&buf[62] = v104;
      *(_WORD *)&buf[70] = 2050;
      *(double *)&buf[72] = v114;
      _os_log_impl(&dword_1906B8000, v124, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,-1,buildingCount,%{public}d,latitude,%{private}.7lf,longitude,%{private}.7lf,course,%{public}.2lf,rightSideCount,%{public}d,leftSideCount,%{public}d,searchDistance,%{public}.2lf,averageBuildingDirection,%{public}.2lf", buf, 0x50u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v147 = *(void *)(a2 + 432);
      uint64_t v148 = *(void *)(a2 + 440);
      uint64_t v149 = *(void *)(a2 + 480);
      *(_DWORD *)int v204 = 134351105;
      *(double *)&v204[4] = v194;
      *(_WORD *)&v204[12] = 1026;
      *(_DWORD *)&v204[14] = (unint64_t)((char *)v202 - (char *)v201) >> 6;
      *(_WORD *)&v204[18] = 2049;
      *(void *)&v204[20] = v147;
      *(_WORD *)&v204[28] = 2049;
      *(void *)&v204[30] = v148;
      *(_WORD *)&v204[38] = 2050;
      *(void *)&v204[40] = v149;
      *(_WORD *)&v204[48] = 1026;
      *(_DWORD *)&v204[50] = v111;
      *(_WORD *)&v204[54] = 1026;
      *(_DWORD *)&v204[56] = v110;
      *(_WORD *)&v204[60] = 2050;
      *(double *)&v204[62] = v104;
      *(_WORD *)&v204[70] = 2050;
      *(double *)&v204[72] = v114;
      long long v150 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v150);
      if (v150 != buf) {
        free(v150);
      }
    }
    long double v128 = *(double *)(a2 + 480);
    double v129 = fmod(v114, 360.0);
    if (v129 >= 0.0) {
      double v130 = v129;
    }
    else {
      double v130 = v129 + 360.0;
    }
    double v131 = fmod(v128, 360.0);
    if (v131 >= 0.0) {
      double v132 = v131;
    }
    else {
      double v132 = v131 + 360.0;
    }
    double v133 = fmod(v128 + 90.0, 360.0);
    if (v133 >= 0.0) {
      double v134 = v133;
    }
    else {
      double v134 = v133 + 360.0;
    }
    if (v132 >= v134) {
      BOOL v135 = v132 > v130 && v130 > v134;
    }
    else {
      BOOL v135 = v132 > v130 || v130 > v134;
    }
    if (v135)
    {
      double v136 = fmod(v128 + 180.0, 360.0);
      if (v136 < 0.0) {
        double v136 = v136 + 360.0;
      }
      BOOL v137 = v134 <= v130;
      if (v130 <= v136) {
        BOOL v137 = 1;
      }
      BOOL v138 = v134 <= v130;
      if (v130 > v136) {
        BOOL v138 = 0;
      }
      if (v134 < v136) {
        int v139 = v138;
      }
      else {
        int v139 = v137;
      }
    }
    else
    {
      int v139 = 1;
    }
    double v140 = v128 + 270.0;
    double v141 = fmod(v128 + 180.0, 360.0);
    if (v141 >= 0.0) {
      double v142 = v141;
    }
    else {
      double v142 = v141 + 360.0;
    }
    double v143 = fmod(v140, 360.0);
    if (v143 < 0.0) {
      double v143 = v143 + 360.0;
    }
    if (v142 >= v143)
    {
      if (v142 <= v130 || v130 <= v143)
      {
LABEL_301:
        int v145 = 1;
        goto LABEL_304;
      }
    }
    else if (v142 <= v130 && v130 <= v143)
    {
      goto LABEL_301;
    }
    if (v143 >= v132)
    {
      int v145 = v130 <= v132;
      if (v143 <= v130) {
        int v145 = 1;
      }
    }
    else
    {
      int v145 = v130 <= v132;
      if (v143 > v130) {
        int v145 = 0;
      }
    }
LABEL_304:
    v111 += v139;
    v110 += v145;
    v106 += 64;
  }
  while ((uint64_t *)v106 != v107);
  if (v111)
  {
    double v4 = v194;
    if (v110)
    {
      int v151 = *(_DWORD *)(a2 + 792);
      if (v151 == 3)
      {
        uint64_t v6 = 0;
        goto LABEL_322;
      }
      uint64_t v6 = 0;
      if (v151 != 4 && v13 > v193 + v193)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        char v153 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134350080;
          *(double *)&uint8_t buf[4] = v194;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v111;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v110;
          *(_WORD *)&unsigned char buf[24] = 2050;
          *(double *)&buf[26] = v13;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v193 + v193;
          _os_log_impl(&dword_1906B8000, v153, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingOnBothSides but AT too high,rightCount,%{public}d,leftCount,%{public}d,AT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x2Cu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          *(_DWORD *)int v204 = 134350080;
          *(double *)&v204[4] = v194;
          *(_WORD *)&v204[12] = 1026;
          *(_DWORD *)&v204[14] = v111;
          *(_WORD *)&v204[18] = 1026;
          *(_DWORD *)&v204[20] = v110;
          *(_WORD *)&v204[24] = 2050;
          *(double *)&v204[26] = v13;
          *(_WORD *)&v204[34] = 2050;
          *(double *)&v204[36] = v193 + v193;
          uint64_t v109 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v109);
          goto LABEL_368;
        }
        goto LABEL_321;
      }
      goto LABEL_322;
    }
  }
  else
  {
    double v4 = v194;
  }
LABEL_316:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v152 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v111;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v110;
    _os_log_impl(&dword_1906B8000, v152, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d", buf, 0x18u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)int v204 = 134349568;
    *(double *)&v204[4] = v4;
    *(_WORD *)&v204[12] = 1026;
    *(_DWORD *)&v204[14] = v111;
    *(_WORD *)&v204[18] = 1026;
    *(_DWORD *)&v204[20] = v110;
    uint64_t v109 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v109);
LABEL_368:
    if (v109 != buf) {
      free(v109);
    }
  }
LABEL_321:
  uint64_t v6 = 1;
LABEL_322:
  *(void *)buf = &v201;
  sub_19084F9C8((void ***)buf);
  return v6;
}

void sub_1906D4954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  a49 = (void **)&a30;
  sub_19084F9C8(&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_1906D4A28(const char *a1, int a2, int a3, signed int a4, const char *a5, char *a6, ...)
{
  va_start(va, a6);
  if (qword_1EB2726A0 != -1) {
    dispatch_once(&qword_1EB2726A0, &unk_1EE005C40);
  }
  if (a3) {
    return sub_1906D4AD4(qword_1EB272698, a1, a2, a4, a5, a6, va);
  }
  else {
    return sub_1907D95C4(qword_1EB272698, a1, a2, a4, a5, a6, va);
  }
}

uint64_t sub_1906D4AD4(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_1907D9FC8(v13, __dst);
  return sub_1907D95C4(a1, a2, a3, a4, a5, __dst, a7);
}

void sub_1906D54AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t sub_1906D54D4()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  return qword_1EB272400;
}

uint64_t sub_1906D5518()
{
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t result = 1;
  switch(dword_1EB2723F8)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 44:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_1EB2723F8 - 139) > 0x2D
         || ((1 << (dword_1EB2723F8 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_1EB2723F8 - 219) >= 7)
      {
LABEL_8:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1906D55C4(void *a1)
{
  id v2 = (pthread_mutex_t *)a1[30];
  double v5 = v2;
  pthread_mutex_lock(v2);
  __int16 v6 = 257;
  if (a1[46]) {
    uint64_t v3 = a1[46];
  }
  else {
    uint64_t v3 = a1[45];
  }
  if (([&unk_1EE0237F0 containsObject:v3] & 1) != 0 || !sub_1906D575C())
  {
    uint64_t v7 = 0;
    vproc_swap_integer();
  }
  return pthread_mutex_unlock(v2);
}

void sub_1906D573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906D575C()
{
  return objc_opt_respondsToSelector() & 1;
}

void *sub_1906D578C(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey", &v6);
  double v4 = *(pthread_mutex_t **)(a1 + 240);
  uint64_t v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessagePausesLocationUpdatesAutomatically", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906D581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906D5844(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE004168;
  a1[1] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v3 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return a1;
}

uint64_t sub_1906D5A24(uint64_t a1, char *a2, uint64_t a3)
{
  int v13 = a2;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 240);
  double v11 = v5;
  pthread_mutex_lock(v5);
  __int16 v12 = 257;
  if (!*(unsigned char *)(a1 + 225))
  {
    uint64_t v8 = *(void *)(a3 + 8);
    sub_1906D5B24(&v13, &v8, &v9);
    if (*(void *)(a1 + 320))
    {
      uint64_t v7 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnectionClient::sendMessage();
      if (v7) {
        sub_1906BFE48(v7);
      }
    }
    if (v10) {
      sub_1906BFE48(v10);
    }
  }
  return pthread_mutex_unlock(v5);
}

void sub_1906D5AEC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a3) {
    sub_1906BFE48(a3);
  }
  if (a6) {
    sub_1906BFE48(a6);
  }
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906D5B24@<X0>(char **a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  uint64_t result = sub_1906D5B88(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1906D5B74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1906D5B88(void *a1, char **a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_1906D5BFC((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1906D5BE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1906D5BFC(uint64_t a1, uint64_t a2, char **a3, void *a4)
{
  sub_1906D5C70(__p, *a3);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1906D5C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1906D5C70(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1906F442C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

BOOL sub_1906D5D24(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1906D5D90(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1906D5D90(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      uint64_t v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      uint64_t v14 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_1906D6690(uint64_t a1, void *a2)
{
  [a2 setDistanceFilter:-1.0];
  [a2 setDesiredAccuracy:-1.0];
  [a2 setHeadingFilter:1.0];
  [a2 setAllowsLocationPrompts:1];
  [a2 setAllowsMapCorrection:1];
  dyld_program_sdk_at_least();

  return MEMORY[0x1F4181798](a2, sel_setCourtesyPromptNeeded_);
}

void sub_1906D75CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

long double sub_1906D7AA4(double a1, double a2, double a3, double a4)
{
  if (sub_1906DA6F4(a1, a2, a3, a4))
  {
    return sub_19083922C(a1, a2, a3, a4);
  }
  else
  {
    double v10 = 0.0;
    double v11 = 0.0;
    sub_1906D7B58(&v11, &v10, &v9, a1, a2, 0.0, a3, a4, 0.0);
    return sqrt(v10 * v10 + v11 * v11);
  }
}

double sub_1906D7B58(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v14 = 360.0;
  if (a5 < 0.0) {
    a5 = a5 + 360.0;
  }
  if (a8 < 0.0) {
    a8 = a8 + 360.0;
  }
  double v15 = a8 - a5;
  if (v15 > 180.0)
  {
    double v14 = -360.0;
LABEL_8:
    double v15 = v15 + v14;
    goto LABEL_9;
  }
  if (v15 < -180.0) {
    goto LABEL_8;
  }
LABEL_9:
  double v16 = (a7 - a4) * 0.0174532925;
  double v17 = (a6 + a9) * 0.5;
  double v18 = v15 * 0.0174532925;
  __double2 v19 = __sincos_stret((a4 + a7) * 0.0174532925 * 0.5);
  double v20 = sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
  *a1 = v16 * (v17 + 6335439.33 / (v20 * (v20 * v20)));
  *a2 = v19.__cosval * (v17 + 6378137.0 / v20) * v18;
  double result = a9 - a6;
  *a3 = a9 - a6;
  return result;
}

void CLClientGetDistanceHighPrecision(_OWORD *a1, _OWORD *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB272648, memory_order_acquire) & 1) == 0)
  {
    double v11 = a2;
    char v12 = a1;
    int v10 = __cxa_guard_acquire(&qword_1EB272648);
    a2 = v11;
    a1 = v12;
    if (v10)
    {
      qword_1EB272660 = 0;
      unk_1EB272668 = 0;
      xmmword_1EB272650 = xmmword_1908820F0;
      qword_1EB272670 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1EB272648);
      a2 = v11;
      a1 = v12;
    }
  }
  long long v2 = a1[7];
  v15[6] = a1[6];
  v15[7] = v2;
  v16[0] = a1[8];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a1 + 140);
  long long v3 = a1[3];
  v15[2] = a1[2];
  v15[3] = v3;
  long long v4 = a1[5];
  void v15[4] = a1[4];
  v15[5] = v4;
  long long v5 = a1[1];
  v15[0] = *a1;
  v15[1] = v5;
  long long v6 = a2[7];
  v13[6] = a2[6];
  v13[7] = v6;
  v14[0] = a2[8];
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v7 = a2[3];
  v13[2] = a2[2];
  v13[3] = v7;
  long long v8 = a2[5];
  v13[4] = a2[4];
  v13[5] = v8;
  long long v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  sub_1906DA238((double *)&xmmword_1EB272650, (uint64_t)v15, (uint64_t)v13);
}

void sub_1906DA238(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a2 + 36);
  double v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      double v9 = 0.0;
      if (v7 <= 0.0) {
        goto LABEL_26;
      }
      double v8 = *(double *)(a3 + 28);
    }
    else
    {
      double v8 = *(double *)(a2 + 28);
    }
  }
  else
  {
    double v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }
  double v9 = -450.0;
  if (v8 >= -450.0)
  {
    double v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      double v9 = v8;
      goto LABEL_26;
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE006000);
    }
    double v11 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v18 = 0x412E848000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 == -1) {
        goto LABEL_23;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE006000);
    }
    int v10 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v18 = 0xC07C200000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 == -1)
      {
LABEL_23:
        char v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_1EB2713B8, &unk_1EE006000);
      goto LABEL_23;
    }
  }
LABEL_26:
  double v13 = *(double *)(a2 + 4);
  double v14 = *(double *)(a2 + 12);
  double v15 = *(double *)(a3 + 4);
  double v16 = *(double *)(a3 + 12);
  if (sub_1906DA6F4(v13, v14, v15, v16)) {
    sub_19083922C(v13, v14, v15, v16);
  }
  else {
    sub_1906DA618(a1, v13, v14, v15, v16, v9);
  }
}

long double sub_1906DA618(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v14 = 0.0;
  double v15 = 0.0;
  if (!sub_1906DA6F4(a2, a3, a4, a5) && sub_1906DA778(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6)) {
    return sqrt(v14 * v14 + v15 * v15);
  }

  return sub_19083922C(a2, a3, a4, a5);
}

BOOL sub_1906DA6F4(double a1, double a2, double a3, double a4)
{
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0) {
      double v4 = v4 + 360.0;
    }
  }
  else
  {
    double v4 = v4 + -360.0;
  }
  unsigned int v5 = (int)v4;
  if ((int)v4 < 0) {
    unsigned int v5 = -v5;
  }
  int v6 = (int)a3 - (int)a1;
  if (v6 < 0) {
    int v6 = (int)a1 - (int)a3;
  }
  return v6 > 2 || v5 > 2;
}

BOOL sub_1906DA778(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    double v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      double v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      __double2 v23 = __sincos_stret(v22 * 0.0174532925);
      double v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      double v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }
    double v26 = 360.0;
    double v27 = a6 + 360.0;
    if (a6 >= 0.0) {
      double v27 = a6;
    }
    double v28 = a9 + 360.0;
    if (a9 >= 0.0) {
      double v28 = a9;
    }
    double v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }
    else
    {
      double v26 = -360.0;
    }
    double v29 = v29 + v26;
    goto LABEL_13;
  }
  return v10 <= 2.0;
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  BOOL v1 = coord.latitude <= 90.0;
  if (coord.latitude < -90.0) {
    BOOL v1 = 0;
  }
  if (coord.longitude > 180.0) {
    BOOL v1 = 0;
  }
  return coord.longitude >= -180.0 && v1;
}

long double CLLocationCoordinate2DGetDistanceFrom(double *a1, double *a2)
{
  return sub_1906D7AA4(*a1, a1[1], *a2, a2[1]);
}

uint64_t CLCopyTechnologiesInUse()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyTechnologiesInUse", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  BOOL v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 2082;
    double v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyTechnologiesInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyTechnologiesInUse");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1906DAAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

id CLCopyGnssBandsInUse()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyGnssBandsInUse", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  BOOL v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyGnssBandsInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  CFArrayRef v2 = (const __CFArray *)objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyGnssBandsInUse");
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count && (int)Count >= 1)
    {
      CFIndex v5 = 0;
      uint64_t v6 = Count;
      unint64_t v7 = 0x1E4F29000uLL;
      do
      {
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, v5);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        int v9 = valuePtr & 0xF00;
        unsigned int v10 = (v9 - 256) >> 8;
        BOOL v11 = v10 > 7;
        int v12 = (1 << v10) & 0x8B;
        if (v11 || v12 == 0)
        {
          if ((valuePtr & 0xF00) != 0)
          {
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
            }
            double v15 = qword_1EB2713E0;
            if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = v9;
              _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "Invalid bandUse,%{public}d", buf, 8u);
            }
            unint64_t v7 = 0x1E4F29000;
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EB2713E8 != -1) {
                dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
              }
              int v20 = 67240192;
              int v21 = v9;
              double v16 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "CFArrayRef CLCopyGnssBandsInUse(void)", "CoreLocation: %s\n", v16);
              if (v16 != (char *)buf) {
                free(v16);
              }
            }
          }
          goto LABEL_22;
        }
        memset(buf, 0, 32);
        *(_DWORD *)&unsigned char buf[24] = valuePtr & 0xF00;
        switch(valuePtr)
        {
          case 4u:
            *(_DWORD *)buf = 4;
            long long v14 = xmmword_190885A30;
            break;
          case 2u:
            *(_DWORD *)buf = 2;
            long long v14 = xmmword_190885A20;
            break;
          case 1u:
            *(_DWORD *)buf = 1;
            long long v14 = xmmword_190885A40;
            break;
          default:
            memset(&buf[8], 0, 20);
            goto LABEL_21;
        }
        *(_OWORD *)&uint8_t buf[8] = v14;
LABEL_21:
        objc_msgSend(v3, "addObject:", objc_msgSend(*(id *)(v7 + 568), "valueWithBytes:objCType:", buf, "{CLGnssBandInfo=iddi}"));
LABEL_22:
        ++v5;
      }
      while (v6 != v5);
    }
    CFRelease(v2);
  }
  os_activity_scope_leave(&state);
  return v3;
}

void sub_1906DAEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

void sub_1906DAF20(uint64_t a1, unint64_t a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_1EB271478 != -1) {
    dispatch_once(&qword_1EB271478, &unk_1EE006460);
  }
  if (!(unint64_t)((double)(unint64_t)qword_1EB271470 + Current * 100.0)) {
    atomic_fetch_or_explicit(&qword_1EB271468, a2, memory_order_relaxed);
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&qword_1EB271460, 1uLL, memory_order_relaxed);
  if (add_explicit >= 0x5DC1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1906F3EC8;
    block[3] = &unk_1E5696EA0;
    block[4] = add_explicit;
    if (qword_1EB271480 != -1) {
      dispatch_once(&qword_1EB271480, block);
    }
  }
  if (Current > *(double *)&qword_1EB271488 + 240.0)
  {
    qword_1EB271488 = *(void *)&Current;
    if (a1)
    {
      uint64_t v6 = *(pthread_mutex_t **)(a1 + 240);
      block[6] = v6;
      pthread_mutex_lock(v6);
      __int16 v10 = 257;
      __swp(v7, (unsigned int *)&qword_1EB271460);
      __swp(&qword_1EB271460, (unsigned int *)&qword_1EB271468);
      if (v7 >= 2)
      {
        v12[0] = @"kCLConnectionMessageTotalFunctionCallsKey";
        v13[0] = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
        v12[1] = @"kCLConnectionMessageFunctionBitmapKey";
        v13[1] = [NSNumber numberWithUnsignedLong:&qword_1EB271460];
        double v8 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2];
        sub_1906D5844(v11);
        sub_19078692C((uint64_t)v11, "kCLConnectionMessageTotalFunctionCallsKey", [v8 objectForKeyedSubscript:@"kCLConnectionMessageTotalFunctionCallsKey"]);
        sub_19078692C((uint64_t)v11, "kCLConnectionMessageFunctionBitmapKey", [v8 objectForKeyedSubscript:@"kCLConnectionMessageFunctionBitmapKey"]);
        sub_1906D5A24(a1, "kCLConnectionMessageCollectMetricsForFunction", (uint64_t)v11);
        sub_1906BFEBC(v11);
      }
      pthread_mutex_unlock(v6);
    }
  }
}

void sub_1906DB18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_1906F4064(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1906DB1C8()
{
}

void sub_1906DB298(_Unwind_Exception *a1)
{
  id v3 = (std::__shared_weak_count *)v1[28];
  if (v3) {
    sub_1906BFE48(v3);
  }
  sub_19086B2A4(v1);
  MEMORY[0x192FCEAD0](v1, 0x10B3C4059D1D8F6);
  _Unwind_Resume(a1);
}

void sub_1906DB2D8(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    os_activity_scope_state_s v4 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      uint64_t v15 = [a2 code];
      __int16 v16 = 2114;
      uint64_t v17 = [a2 domain];
      __int16 v18 = 2113;
      uint64_t v19 = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    CFIndex v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      uint64_t v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      double v8 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      int v9 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_1906DB948(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
    }
    os_activity_scope_state_s v4 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      uint64_t v15 = [a2 code];
      __int16 v16 = 2114;
      uint64_t v17 = [a2 domain];
      __int16 v18 = 2113;
      uint64_t v19 = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
    }
    CFIndex v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      uint64_t v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      double v8 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      int v9 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
        }
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_1906DBFB8(void *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    os_activity_scope_state_s v4 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      uint64_t v15 = [a2 code];
      __int16 v16 = 2114;
      uint64_t v17 = [a2 domain];
      __int16 v18 = 2113;
      uint64_t v19 = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    CFIndex v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      uint64_t v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      double v8 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      int v9 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_1906DC628()
{
}

uint64_t sub_1906DC678()
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName"), "compare:", @"locationd");
  byte_1EB2723F6 = result == 0;
  return result;
}

void sub_1906DC6B8()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1)) {
      int v3 = 4;
    }
    else {
      int v3 = sub_1906E0EDC();
    }
    dword_1EB2723F8 = v3;
    CFRelease(v1);
  }
  else
  {
    dword_1EB2723F8 = sub_1906E0EDC();
  }
}

void sub_1906DC74C()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t v0 = 0;
  int v1 = dword_1EB2723F8;
  switch(dword_1EB2723F8)
  {
    case 0:
    case 261:
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      double v13 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        LODWORD(v19) = v1;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_11;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F630 != -1) {
        goto LABEL_85;
      }
      goto LABEL_83;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      CFTypeID v2 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v19) = v1;
        _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F630 != -1) {
LABEL_85:
        }
          dispatch_once(&qword_1E929F630, &unk_1EE006560);
LABEL_83:
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
LABEL_11:
      uint64_t v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      uint64_t v7 = 2940500222;
      goto LABEL_54;
    case 26:
      uint64_t v14 = 2806282494;
      goto LABEL_70;
    case 29:
      unsigned __int16 v12 = 24577;
      goto LABEL_65;
    case 30:
    case 31:
    case 32:
      unsigned __int16 v12 = 30721;
LABEL_65:
      uint64_t v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
      unsigned __int16 v3 = 762;
      goto LABEL_17;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 242:
    case 243:
      unsigned __int16 v3 = 6906;
LABEL_17:
      uint64_t v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      unsigned __int16 v8 = 30922;
      goto LABEL_29;
    case 39:
    case 42:
      uint64_t v0 = 0x28011654E00ELL;
      break;
    case 44:
      unsigned __int16 v8 = 24826;
LABEL_29:
      uint64_t v0 = v8 | 0x21440000u;
      break;
    case 45:
      uint64_t v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      unsigned __int16 v5 = 24826;
      goto LABEL_50;
    case 47:
    case 63:
      unsigned __int16 v5 = 30970;
      goto LABEL_50;
    case 48:
    case 186:
      uint64_t v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      unsigned __int16 v5 = -1286;
      goto LABEL_50;
    case 50:
    case 51:
      unint64_t v6 = 0x28015654E00ELL;
      goto LABEL_71;
    case 54:
    case 55:
      uint64_t v7 = 3211147518;
LABEL_54:
      unint64_t v9 = v7 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_55;
    case 56:
    case 57:
    case 58:
    case 59:
      unint64_t v9 = 0x8029BF4638FELL;
LABEL_55:
      uint64_t v0 = v9 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      uint64_t v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      unint64_t v6 = 0x24355E54E00ELL;
      goto LABEL_71;
    case 68:
    case 69:
    case 71:
    case 72:
      uint64_t v10 = 0x1218029BF461AFELL;
      goto LABEL_62;
    case 70:
    case 73:
      uint64_t v11 = 0xC029BF4618FELL;
      goto LABEL_57;
    case 76:
    case 146:
    case 147:
      unsigned __int16 v5 = -7942;
LABEL_50:
      uint64_t v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      uint64_t v10 = 826604282;
      goto LABEL_62;
    case 78:
    case 79:
    case 80:
    case 142:
      uint64_t v11 = 0x8029BF461AFELL;
LABEL_57:
      uint64_t v0 = v11 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      unint64_t v6 = 0x27B55E54E00ELL;
      goto LABEL_71;
    case 86:
    case 88:
      uint64_t v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      unint64_t v6 = 0x24B55E54E01ELL;
      goto LABEL_71;
    case 95:
    case 96:
    case 97:
    case 98:
      uint64_t v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      uint64_t v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      uint64_t v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      uint64_t v4 = 0x24B55E54E01ELL;
      goto LABEL_14;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      uint64_t v4 = 0x34B55E55001ELL;
LABEL_14:
      uint64_t v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 219:
      uint64_t v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 239:
      uint64_t v10 = 826678010;
LABEL_62:
      uint64_t v0 = v10 - 512;
      break;
    case 148:
      uint64_t v0 = 0x9B746204ELL;
      break;
    case 149:
      uint64_t v14 = 373686414;
LABEL_70:
      unint64_t v6 = v14 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_71;
    case 150:
    case 151:
    case 152:
    case 153:
      unint64_t v6 = 0x20355E54E00ELL;
LABEL_71:
      uint64_t v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      uint64_t v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 220:
    case 221:
    case 222:
    case 223:
      uint64_t v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      uint64_t v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 224:
    case 225:
      uint64_t v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t v0 = 277217290;
      break;
    default:
      break;
  }
  if (qword_1EB2713C8 != -1) {
    dispatch_once(&qword_1EB2713C8, &unk_1EE0065A0);
  }
  uint64_t v15 = qword_1EB2713C0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713C0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "OverrideMotionCapEclipseService";
    _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713C8 != -1) {
      dispatch_once(&qword_1EB2713C8, &unk_1EE0065A0);
    }
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  qword_1EB2724A8 = v0;
}

os_log_t sub_1906DCE78()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Motion");
  qword_1EB2713C0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCEA8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCED8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCF08()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCF38()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCF68()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCF98()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCFC8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DCFF8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD028()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD058()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD088()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD0B8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD0E8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD118()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD148()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD178()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD1A8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD1D8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

void sub_1906DD208()
{
  if (sub_1906E3A88())
  {
    qword_1EB271498 = (uint64_t)dispatch_workloop_create_inactive("ClientsCohortWorkLoop");
    dispatch_set_qos_class_fallback();
    uint64_t v0 = qword_1EB271498;
    dispatch_activate(v0);
  }
}

uint64_t sub_1906DD268(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(result + 32) + 225))
  {
    uint64_t v1 = result;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    CFTypeID v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_INFO, "received client did become active notification", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      unsigned __int16 v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLClientHandleDidBecomeActiveNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    unsigned __int16 v3 = *(pthread_mutex_t **)(*(void *)(v1 + 32) + 240);
    uint64_t v7 = v3;
    pthread_mutex_lock(v3);
    __int16 v8 = 257;
    uint64_t v4 = *(unsigned char **)(v1 + 32);
    v4[18] = 1;
    if (v4[24])
    {
      if (!v4[25])
      {
        sub_1906C019C((uint64_t)v4, 13, 0);
        uint64_t v4 = *(unsigned char **)(v1 + 32);
      }
    }
    CFRelease(v4);
    return pthread_mutex_unlock(v3);
  }
  return result;
}

void sub_1906DD460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906DD490()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processIdentifier");
  qword_1EB271470 = (int)result;
  return result;
}

os_log_t sub_1906DD4C0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD4F0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD520()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD550()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD580()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD5B0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD5E0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD610()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD640()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD670()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD6A0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD6D0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD700()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD730()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD760()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD790()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD7C0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD7F0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

os_log_t sub_1906DD820()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1EB2713E0 = (uint64_t)result;
  return result;
}

uint64_t sub_1906DD850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1906DD860(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1[4];
  if (a3) {
    return [v4 _ticket:a1[5] didReturnError:a3 partialResultForLocation:a1[6]];
  }
  else {
    return MEMORY[0x1F4181798](v4, sel__ticket_didReturnGeoMapItems_);
  }
}

uint64_t sub_1906DD884(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1906DD8A8()
{
}

void sub_1906DD9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  MEMORY[0x192FCEAD0](v19, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

CLLocationInternalClient *sub_1906DDA3C()
{
  os_log_t result = objc_alloc_init(CLLocationInternalClient);
  qword_1EB272568 = (uint64_t)result;
  return result;
}

uint64_t sub_1906DDA64(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_resumeLocationUpdates);
}

uint64_t sub_1906DDA6C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

id sub_1906DDA84(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1906DDACC(uint64_t a1, uint64_t a2, char **a3, void *a4)
{
  sub_1906D5C70(__p, *a3);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1906DDB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1906DDB40(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  id result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_190718FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1907D613C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    sub_1907D60C4(a1, v7);
    return sub_1907D62E4(v7);
  }
  return result;
}

void sub_1906DDBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907D62E4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1906DDC00(void *a1)
{
  if (a1)
  {
    sub_1906DDC00(*a1);
    sub_1906DDC00(a1[1]);
    operator delete(a1);
  }
}

void *sub_1906DDC4C(void *a1, char **a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_1906DDACC((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1906DDCAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_1906DDCC0@<X0>(char **a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  id result = sub_1906DDC4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1906DDD10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1906DDD24(void *a1, char *a2, void *a3)
{
  uint64_t v6 = operator new(0x70uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *uint64_t v6 = &unk_1EE005260;
  sub_1906D5C70(__p, a2);
  MEMORY[0x192FCE840](v6 + 3, __p, *a3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1906DDDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1906DDDEC(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE005260;
  sub_1906D5C70(__p, "kCLConnectionMessageMiLoServiceEvent");
  MEMORY[0x192FCE840](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1906DDE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1906DDEB8()
{
}

uint64_t sub_1906DDED0(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, double a5, double a6)
{
  *(void *)&v63[813] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      uint64_t v61 = v21;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v22 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v59 = 134349056;
    *(void *)&v59[4] = v22;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_93;
  }
  uint64_t v8 = *a2;
  if (!*a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v23 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_92;
    }
    goto LABEL_95;
  }
  sub_19082373C(*a2);
  double v13 = *(double *)(v8 + 40);
  if (v13 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    double v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_92;
    }
LABEL_95:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_92:
    *(_WORD *)uint64_t v59 = 0;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_93;
  }
  if ((int)((*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4) <= 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)*a2;
      uint64_t v16 = (int)((uint64_t)(*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4);
      *(_DWORD *)buf = 134283777;
      uint64_t v61 = v15;
      __int16 v62 = 2050;
      *(void *)char v63 = v16;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v17 = *(void *)*a2;
    uint64_t v18 = (int)((uint64_t)(*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4);
    *(_DWORD *)uint64_t v59 = 134283777;
    *(void *)&v59[4] = v17;
    *(_WORD *)&v59[12] = 2050;
    *(void *)&v59[14] = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
LABEL_93:
    if (v19 != (char *)buf) {
      free(v19);
    }
    return 0;
  }
  double v27 = 1.0 - a5;
  if (!*((unsigned char *)a2 + 20)) {
    double v27 = a5;
  }
  double v28 = v13 * v27;
  if (v13 * v27 > fabs(a6))
  {
    double v29 = a6 / v13;
    if (!*((unsigned char *)a2 + 20)) {
      double v29 = -v29;
    }
    uint64_t v30 = (std::__shared_weak_count *)a2[1];
    double v31 = v29 + a5;
    v57[0] = *a2;
    v57[1] = (uint64_t)v30;
    double v58 = 0.0;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = sub_190856D88((double *)(a1 + 56), v57, (double *)v59, &v58, v29 + a5);
    if (v30) {
      sub_1906BFE48(v30);
    }
    if (v25)
    {
      *((double *)a2 + 6) = v31;
      *((_OWORD *)a2 + 2) = *(_OWORD *)v59;
      float v32 = v58;
      *((float *)a2 + 6) = v32;
      if (!*((unsigned char *)a2 + 20))
      {
        double v33 = fmod((float)(v32 + 180.0), 360.0);
        if (v33 < 0.0) {
          double v33 = v33 + 360.0;
        }
        float v34 = v33;
        *((float *)a2 + 6) = v34;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v52 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRouteRoads,interpolateProjections returned false", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
    }
    return v25;
  }
  uint64_t v35 = *a4;
  unint64_t v36 = v35 + 1;
  *a4 = v35 + 1;
  if ((int)v35 > 9 || a3[2] <= v36)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    long double v45 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v46 = *(void *)(a1 + 8);
      int v47 = *a4;
      uint64_t v48 = a3[2];
      *(_DWORD *)buf = 134218496;
      uint64_t v61 = v46;
      __int16 v62 = 1024;
      *(_DWORD *)char v63 = v47;
      v63[2] = 2048;
      *(void *)&void v63[3] = v48;
      _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%.3lf, no more route roads available to cover the distance travelled,index,%d,size,%lu", buf, 0x1Cu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v49 = *(void *)(a1 + 8);
    int v50 = *a4;
    uint64_t v51 = a3[2];
    *(_DWORD *)uint64_t v59 = 134218496;
    *(void *)&v59[4] = v49;
    *(_WORD *)&v59[12] = 1024;
    *(_DWORD *)&v59[14] = v50;
    *(_WORD *)&v59[18] = 2048;
    *(void *)&v59[20] = v51;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_93;
  }
  BOOL v37 = (uint64_t *)a3[1];
  if ((int)v35 <= -2)
  {
    do
      BOOL v37 = (uint64_t *)*v37;
    while (!__CFADD__(v36++, 1));
  }
  else if (v35 != -1)
  {
    unint64_t v38 = v35 + 2;
    do
    {
      BOOL v37 = (uint64_t *)v37[1];
      --v38;
    }
    while (v38 > 1);
  }
  if (v37 == a3)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    double v54 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 134217984;
      uint64_t v61 = v55;
      _os_log_impl(&dword_1906B8000, v54, OS_LOG_TYPE_ERROR, "CLMMPED,%.3lf, unexpectedly reached to the end of routeRoadList", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v56 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v59 = 134217984;
    *(void *)&v59[4] = v56;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_93;
  }
  int v40 = *((unsigned __int8 *)v37 + 36);
  sub_19076BC8C(a2, v37 + 2);
  *((unsigned char *)a2 + 20) = *((unsigned char *)v37 + 36);
  v42.n128_u64[0] = 0;
  if (!v40)
  {
    v42.n128_f64[0] = fmod((float)(*((float *)a2 + 6) + 180.0), 360.0);
    if (v42.n128_f64[0] < 0.0) {
      v42.n128_f64[0] = v42.n128_f64[0] + 360.0;
    }
    float v43 = v42.n128_f64[0];
    *((float *)a2 + 6) = v43;
    v42.n128_u64[0] = 1.0;
  }
  double v44 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, __n128, __n128))(*(void *)a1 + 56);

  v41.n128_f64[0] = a6 - v28;
  return v44(a1, a2, a3, a4, v42, v41);
}

void sub_1906DEAAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1906DEACC(uint64_t a1)
{
  *(void *)a1 = &unk_1EE004C28;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 12) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_1906E533C((void *)(a1 + 40));
}

void sub_1906DEB84(_Unwind_Exception *exception_object)
{
  unsigned __int16 v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_1906BFE48(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1906DEBEC(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6)
{
  v243[3] = *(void **)MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v27 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,processUpsampledLocations", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      LOWORD(v211[0]) = 0;
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    return;
  }
  char v7 = a5;
  uint64_t v192 = 0;
  double v193 = 0;
  uint64_t v194 = 0;
  if (a5) {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (![a3 count])
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v29 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,empty location array", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      LOWORD(v211[0]) = 0;
      int v178 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::snapUpsampledLocations(CLDistanceCalc &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport, BOOL)", "CoreLocation: %s\n", v178);
      if (v178 != (char *)buf) {
        free(v178);
      }
    }
    int v30 = 0;
    if (v7) {
      goto LABEL_192;
    }
    goto LABEL_193;
  }
  memset(v243, 0, 24);
  v211[1] = 0uLL;
  v211[0] = xmmword_1908820F0;
  v211[2] = 0x3FF0000000000000uLL;
  v211[3] = 0uLL;
  if (!sub_1907A1874((uint64_t)v211, a3))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v31 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,unable to initialize location array", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_73;
    }
    double v185 = v7;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    goto LABEL_423;
  }
  unsigned __int16 v12 = (uint64_t *)*((void *)&v211[2] + 1);
  for (uint64_t i = *(uint64_t **)&v211[3]; v12 != i; v12 += 2)
  {
    uint64_t v14 = *v12;
    double v15 = *(double *)(*v12 + 40);
    if (*(double *)(*v12 + 32) >= 0.0)
    {
      double v16 = *(double *)(v14 + 24);
      if (v15 < v16) {
        double v15 = v16 + 10.0;
      }
      if (v15 > 179.0) {
        double v15 = 135.0;
      }
    }
    *(double *)(v14 + 40) = v15;
  }
  uint64_t v208 = a4;
  __int16 v209 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v17 = sub_1907F1B4C((uint64_t)&v211[2] + 8, (uint64_t *)v243, &v208);
  if (v209) {
    sub_1906BFE48(v209);
  }
  if ((v17 & 1) == 0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    float v32 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,quickMapMatcher returned error", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2))
    {
LABEL_73:
      int v30 = 0;
      goto LABEL_191;
    }
    double v185 = v7;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
LABEL_423:
    LOWORD(v206) = 0;
    long long v179 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::snapUpsampledLocations(CLDistanceCalc &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport, BOOL)", "CoreLocation: %s\n", v179);
    if (v179 != (char *)buf) {
      free(v179);
    }
    int v30 = 0;
    char v7 = v185;
    goto LABEL_191;
  }
  double v184 = v7;
  memset(buf, 0, sizeof(buf));
  uint64_t v19 = (long long *)v243[0];
  uint64_t v18 = (long long *)v243[1];
  double v183 = a2;
  if (v243[0] == v243[1])
  {
    long long v206 = 0uLL;
    uint64_t v207 = 0;
    goto LABEL_189;
  }
  uint64_t v182 = a4;
  uint64_t v190 = a6;
  int v20 = 0;
  int v21 = -1;
  do
  {
    uint64_t v22 = *(uint64_t **)v19;
    if (!*(void *)v19) {
      goto LABEL_24;
    }
    ++v20;
    if (*(void *)buf == *(void *)&buf[8] || v20 == ((char *)v243[1] - (char *)v243[0]) >> 4)
    {
      sub_190745090((uint64_t *)buf, v19);
      goto LABEL_24;
    }
    if (*((unsigned char *)v22 + 64))
    {
      if (v21 != -1 && v21 <= 1)
      {
        ++v21;
        goto LABEL_24;
      }
      if (*((unsigned char *)v22 + 96) && (*((_DWORD *)v22 + 30) | 2) == 3) {
        goto LABEL_42;
      }
      uint64_t v23 = *v22;
      if (!*v22 || v190 == 1 && (*(_DWORD *)(v23 + 20) & 0xFFFFFFFE) == 8 || *(_DWORD *)(v23 + 76) == 2) {
        goto LABEL_43;
      }
      unsigned int v24 = *(_DWORD *)(v23 + 20);
      double v25 = sqrt(*((double *)v22 + 9) * *((double *)v22 + 9) + *((double *)v22 + 10) * *((double *)v22 + 10));
      if (v25 < 50.0 && *((double *)v22 + 11) < 30.0) {
        goto LABEL_42;
      }
      BOOL v26 = !((v24 < 0xA) & (7u >> v24));
      if (v25 >= 100.0) {
        BOOL v26 = 1;
      }
      if (!v26 && *((double *)v22 + 11) < 40.0)
      {
LABEL_42:
        sub_190745090((uint64_t *)buf, v19);
LABEL_43:
        int v21 = -1;
        goto LABEL_24;
      }
      int v21 = 0;
    }
LABEL_24:
    ++v19;
  }
  while (v19 != v18);
  double v33 = *(long long **)buf;
  float v34 = *(uint64_t **)&buf[8];
  long long v206 = 0uLL;
  uint64_t v207 = 0;
  if (*(void *)buf == *(void *)&buf[8])
  {
LABEL_189:
    unint64_t v203 = (void **)&v206;
    sub_1906C6BF0(&v203);
    goto LABEL_190;
  }
  int v35 = 0;
  uint64_t v36 = 0;
  BOOL v37 = 0;
  int v186 = *(uint64_t **)&buf[8];
  do
  {
    uint64_t v38 = *(void *)v33;
    if (!*(void *)v33) {
      goto LABEL_185;
    }
    ++v35;
    if (v192 == v193 || v190 == 1 && v35 == (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4)
    {
      sub_190745090((uint64_t *)&v192, v33);
      goto LABEL_185;
    }
    if (v36)
    {
      uint64_t v189 = v37;
      uint64_t v38 = v36;
    }
    else
    {
      uint64_t v189 = (std::__shared_weak_count *)*((void *)v33 + 1);
      if (v189) {
        atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v37) {
        sub_1906BFE48(v37);
      }
    }
    uint64_t v39 = v35;
    unint64_t v40 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
    uint64_t v36 = *(void *)v33;
    if (*(double *)(*(void *)v33 + 16) - *(double *)(v38 + 16) < 3.0 && v40 > v35)
    {
      sub_190745090((uint64_t *)&v206, v33);
      uint64_t v36 = *(void *)v33;
      BOOL v37 = (std::__shared_weak_count *)*((void *)v33 + 1);
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v189) {
        sub_1906BFE48(v189);
      }
      goto LABEL_185;
    }
    int v187 = v35;
    __n128 v42 = (uint64_t **)*((void *)&v206 + 1);
    float v43 = (uint64_t **)v206;
    if (*((void *)&v206 + 1) - (void)v206 <= 0x2FuLL && v40 != v39)
    {
      BOOL v37 = (std::__shared_weak_count *)*((void *)v33 + 1);
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v34 = v186;
      if (v189)
      {
        sub_1906BFE48(v189);
        float v43 = (uint64_t **)v206;
      }
      for (j = (uint64_t **)*((void *)&v206 + 1); j != v43; j -= 2)
      {
        long double v45 = (std::__shared_weak_count *)*(j - 1);
        if (v45) {
          sub_1906BFE48(v45);
        }
      }
      *((void *)&v206 + 1) = v43;
      sub_190745090((uint64_t *)&v206, v33);
      int v35 = v187;
      goto LABEL_185;
    }
    unint64_t v203 = 0;
    int v204 = 0;
    uint64_t v205 = 0;
    if ((void)v206 == *((void *)&v206 + 1))
    {
      uint64_t v46 = 0;
      int v35 = v187;
      goto LABEL_176;
    }
    uint64_t v180 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
    uint64_t v181 = v39;
    uint64_t v46 = 0;
    int v47 = 0;
    double v48 = 0.0;
    do
    {
      uint64_t v49 = v46;
      int v50 = *v43;
      if (!*v43) {
        goto LABEL_154;
      }
      if (!v47 || (uint64_t v51 = (void *)*v47) == 0)
      {
        uint64_t v46 = (std::__shared_weak_count *)v43[1];
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v49) {
          sub_1906BFE48(v49);
        }
        sub_190745090((uint64_t *)&v203, (long long *)v43);
        int v47 = v50;
        goto LABEL_154;
      }
      if (*((void *)&v206 + 1) - (void)v206 > 0x3C0uLL
        || *(void *)*v50 == *v51 && *(void *)(*v50 + 8) == v51[1])
      {
        goto LABEL_147;
      }
      char v52 = v190 == 1 ? sub_1908246E0((uint64_t)v51, v50) : sub_19082499C((uint64_t)v51, *v43);
      if (v52) {
        goto LABEL_147;
      }
      int v200 = 0;
      int v201 = 0;
      uint64_t v202 = 0;
      memset(v199, 0, sizeof(v199));
      uint64_t v53 = (std::__shared_weak_count *)v47[1];
      uint64_t v197 = (void *)*v47;
      int v198 = v53;
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v54 = sub_190746080(v182, &v197, (uint64_t *)&v200, (uint64_t *)v199, 1, 1000.0);
      if (v198) {
        sub_1906BFE48(v198);
      }
      if (!v54 || (uint64_t v55 = v200, v200 == v201))
      {
LABEL_134:
        char v57 = 0;
      }
      else
      {
        uint64_t v56 = (void *)**v43;
        while (*v56 != *(void *)*v55 || v56[1] != *((void *)*v55 + 1))
        {
          v55 += 2;
          if (v55 == v201) {
            goto LABEL_134;
          }
        }
        char v57 = 1;
      }
      if (v190 != 1)
      {
        double v58 = (std::__shared_weak_count *)v47[1];
        uint64_t v195 = (void *)*v47;
        int v196 = v58;
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v59 = sub_190746080(v182, &v195, (uint64_t *)&v200, (uint64_t *)v199, 0, 1000.0);
        if (v196) {
          sub_1906BFE48(v196);
        }
        if (v59)
        {
          double v60 = v200;
          if (v200 != v201)
          {
            uint64_t v61 = (void *)**v43;
            while (*v61 != *(void *)*v60 || v61[1] != *((void *)*v60 + 1))
            {
              v60 += 2;
              if (v60 == v201) {
                goto LABEL_146;
              }
            }
            double v210 = v199;
            sub_1906C6BF0((void ***)&v210);
            v199[0] = (void **)&v200;
            sub_1906C6BF0(v199);
LABEL_147:
            double v62 = sub_1906DA618((double *)a1, *((double *)*v43 + 3), *((double *)*v43 + 4), *((double *)v47 + 3), *((double *)v47 + 4), 0.0);
            sub_190745090((uint64_t *)&v203, (long long *)v43);
            double v48 = v48 + v62;
            uint64_t v63 = *(void *)(*((void *)&v206 + 1) - 16);
            int v47 = *v43;
            if (v63 && *((double *)v47 + 2) == *(double *)(v63 + 16))
            {
              sub_19081FE94((uint64_t)&v203, (uint64_t *)&v192, v190, v48);
              int v47 = *v43;
            }
            uint64_t v46 = (std::__shared_weak_count *)v43[1];
            if (v46) {
              atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v49) {
              goto LABEL_153;
            }
            goto LABEL_154;
          }
        }
      }
LABEL_146:
      double v210 = v199;
      sub_1906C6BF0((void ***)&v210);
      v199[0] = (void **)&v200;
      sub_1906C6BF0(v199);
      if (v57) {
        goto LABEL_147;
      }
      sub_19081FE94((uint64_t)&v203, (uint64_t *)&v192, v190, v48);
      double v64 = v203;
      for (k = v204; k != v64; k -= 2)
      {
        BOOL v66 = (std::__shared_weak_count *)*(k - 1);
        if (v66) {
          sub_1906BFE48(v66);
        }
      }
      int v204 = v64;
      sub_190745090((uint64_t *)&v203, (long long *)v43);
      int v47 = *v43;
      uint64_t v46 = (std::__shared_weak_count *)v43[1];
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v48 = 0.0;
      if (v49) {
LABEL_153:
      }
        sub_1906BFE48(v49);
LABEL_154:
      v43 += 2;
    }
    while (v43 != v42);
    char v67 = (uint64_t **)*((void *)&v206 + 1);
    __n128 v42 = (uint64_t **)v206;
    int v35 = v187;
    if (*((void *)&v206 + 1) == (void)v206)
    {
      unint64_t v40 = v180;
      uint64_t v39 = v181;
    }
    else
    {
      unint64_t v40 = v180;
      uint64_t v39 = v181;
      do
      {
        unint64_t v68 = (std::__shared_weak_count *)*(v67 - 1);
        if (v68) {
          sub_1906BFE48(v68);
        }
        v67 -= 2;
      }
      while (v67 != v42);
    }
LABEL_176:
    *((void *)&v206 + 1) = v42;
    sub_190745090((uint64_t *)&v206, v33);
    float v34 = v186;
    uint64_t v36 = *(void *)v33;
    BOOL v37 = (std::__shared_weak_count *)*((void *)v33 + 1);
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v189) {
      sub_1906BFE48(v189);
    }
    if (v40 == v39) {
      sub_190745090((uint64_t *)&v192, v33);
    }
    if (v46) {
      sub_1906BFE48(v46);
    }
    int v200 = (void **)&v203;
    sub_1906C6BF0(&v200);
LABEL_185:
    ++v33;
  }
  while (v33 != (long long *)v34);
  unint64_t v203 = (void **)&v206;
  sub_1906C6BF0(&v203);
  if (v37) {
    sub_1906BFE48(v37);
  }
LABEL_190:
  *(void *)&long long v206 = buf;
  sub_1906C6BF0((void ***)&v206);
  int v30 = 1;
  char v7 = v184;
  a2 = v183;
LABEL_191:
  *(void *)buf = (char *)&v211[2] + 8;
  sub_1906C6BF0((void ***)buf);
  *(void *)buf = v243;
  sub_1906C6BF0((void ***)buf);
  if (v7) {
LABEL_192:
  }
    sub_1906BFE48(v7);
LABEL_193:
  if (!v30) {
    goto LABEL_415;
  }
  memset(v211, 0, sizeof(v211));
  uint64_t v69 = [a3 countByEnumeratingWithState:v211 objects:buf count:16];
  if (v69)
  {
    uint64_t v70 = **(void **)&v211[1];
    do
    {
      for (uint64_t m = 0; m != v69; ++m)
      {
        if (**(void **)&v211[1] != v70) {
          objc_enumerationMutation(a3);
        }
        uint64_t v72 = *(void **)(*((void *)&v211[0] + 1) + 8 * m);
        if (![v72 isGPSLocationType]
          || ([v72 isOriginalLocationType] & 1) == 0)
        {
          objc_msgSend((id)objc_msgSend(v72, "timestamp"), "timeIntervalSinceReferenceDate");
          for (n = v192; ; n += 16)
          {
            if (n == v193) {
              goto LABEL_223;
            }
            int v75 = *(double **)n;
            if (*(void *)n)
            {
              if (vabdd_f64(v75[2], v73) < 0.001) {
                break;
              }
            }
          }
          char v76 = (std::__shared_weak_count *)*((void *)n + 1);
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v77 = *v75;
          if (*(void *)v75)
          {
            double v79 = *(double *)(*(void *)&v77 + 120);
            double v78 = *(double *)(*(void *)&v77 + 128);
            if (v79 > 0.0)
            {
              double v80 = v75[6];
              BOOL v81 = v80 < 0.0 || v80 > 1.0;
              if (v81 || v78 <= 0.0) {
                double v78 = *(double *)(*(void *)&v77 + 120);
              }
              else {
                double v78 = v80 * v78 + v79 * (1.0 - v80);
              }
              goto LABEL_219;
            }
            if (v78 > 0.0)
            {
LABEL_219:
              if (v78 > 0.0) {
                objc_msgSend(v72, "updateAltitude:andAltitudeAccuracy:");
              }
            }
          }
          if (v76) {
            sub_1906BFE48(v76);
          }
          continue;
        }
LABEL_223:
        ;
      }
      uint64_t v69 = [a3 countByEnumeratingWithState:v211 objects:buf count:16];
    }
    while (v69);
  }
  uint64_t v82 = *(void *)(a1 + 40);
  uint64_t v188 = (uint64_t *)(a1 + 40);
  uint64_t v83 = *(void *)(a1 + 48);
  while (v83 != v82)
  {
    v83 -= 24;
    *(void *)buf = v83;
    sub_1906C6BF0((void ***)buf);
  }
  *(void *)(a1 + 48) = v82;
  memset(v243, 0, 24);
  uint64_t v84 = (uint64_t)v192;
  if (v193 != v192)
  {
    unint64_t v85 = 0;
    float v86 = 0;
    double v87 = 0;
    while (1)
    {
      long long v88 = *(_OWORD *)(v84 + 16 * v85);
      long long v206 = v88;
      if (*((void *)&v88 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v88 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (!(void)v88 || !*(void *)v88)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        int v92 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a2 + 23) >= 0) {
            int v93 = a2;
          }
          else {
            int v93 = (uint64_t *)*a2;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v93;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v85;
          _os_log_impl(&dword_1906B8000, v92, OS_LOG_TYPE_ERROR, "CLTSP,MI,snappedIILocationContinuous,road is nullptr,tripSegmentID,%{public}s,index,%{public}d", buf, 0x12u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_312;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        if (*((char *)a2 + 23) >= 0) {
          int v94 = a2;
        }
        else {
          int v94 = (uint64_t *)*a2;
        }
LABEL_254:
        LODWORD(v211[0]) = 136446466;
        *(void *)((char *)v211 + 4) = v94;
        WORD6(v211[0]) = 1026;
        *(_DWORD *)((char *)v211 + 14) = v85;
        int v95 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v95);
        if (v95 != (char *)buf) {
          free(v95);
        }
        goto LABEL_312;
      }
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v89 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v90 = (uint64_t *)*a2;
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v90 = a2;
        }
        if (*(void *)v206) {
          int v91 = *(_DWORD *)(*(void *)v206 + 20);
        }
        else {
          int v91 = -1;
        }
        uint64_t v96 = *(void *)(v206 + 16);
        uint64_t v97 = *(void *)(v206 + 24);
        uint64_t v98 = *(void *)(v206 + 32);
        uint64_t v99 = *(void *)(v206 + 40);
        uint64_t v100 = *(void *)(v206 + 48);
        uint64_t v101 = *(void *)(v206 + 56);
        uint64_t v102 = *(void *)(v206 + 72);
        uint64_t v103 = *(void *)(v206 + 80);
        uint64_t v104 = *(void *)(v206 + 88);
        int v105 = *(unsigned __int8 *)(v206 + 64);
        *(_DWORD *)buf = 136449027;
        *(void *)&uint8_t buf[4] = v90;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v96;
        *(_WORD *)&buf[22] = 2049;
        uint64_t v224 = v97;
        __int16 v225 = 2049;
        uint64_t v226 = v98;
        __int16 v227 = 2049;
        uint64_t v228 = v99;
        __int16 v229 = 2050;
        uint64_t v230 = v100;
        __int16 v231 = 2050;
        uint64_t v232 = v101;
        __int16 v233 = 2050;
        uint64_t v234 = v103;
        __int16 v235 = 2050;
        uint64_t v236 = v102;
        __int16 v237 = 2050;
        uint64_t v238 = v104;
        __int16 v239 = 1026;
        int v240 = v105;
        __int16 v241 = 1026;
        int v242 = v91;
        _os_log_impl(&dword_1906B8000, v89, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocationContinuous,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        if (*((char *)a2 + 23) >= 0) {
          __double2 v121 = a2;
        }
        else {
          __double2 v121 = (uint64_t *)*a2;
        }
        uint64_t v122 = *(void *)(v206 + 16);
        uint64_t v123 = *(void *)(v206 + 24);
        uint64_t v125 = *(void *)(v206 + 32);
        uint64_t v124 = *(void *)(v206 + 40);
        uint64_t v127 = *(void *)(v206 + 48);
        uint64_t v126 = *(void *)(v206 + 56);
        uint64_t v128 = *(void *)(v206 + 72);
        uint64_t v129 = *(void *)(v206 + 80);
        uint64_t v130 = *(void *)(v206 + 88);
        int v131 = *(unsigned __int8 *)(v206 + 64);
        if (*(void *)v206) {
          int v132 = *(_DWORD *)(*(void *)v206 + 20);
        }
        else {
          int v132 = -1;
        }
        LODWORD(v211[0]) = 136449027;
        *(void *)((char *)v211 + 4) = v121;
        WORD6(v211[0]) = 2050;
        *(void *)((char *)v211 + 14) = v122;
        WORD3(v211[1]) = 2049;
        *((void *)&v211[1] + 1) = v123;
        LOWORD(v211[2]) = 2049;
        *(void *)((char *)&v211[2] + 2) = v125;
        WORD5(v211[2]) = 2049;
        *(void *)((char *)&v211[2] + 12) = v124;
        WORD2(v211[3]) = 2050;
        *(void *)((char *)&v211[3] + 6) = v127;
        HIWORD(v211[3]) = 2050;
        uint64_t v212 = v126;
        __int16 v213 = 2050;
        uint64_t v214 = v129;
        __int16 v215 = 2050;
        uint64_t v216 = v128;
        __int16 v217 = 2050;
        uint64_t v218 = v130;
        __int16 v219 = 1026;
        int v220 = v131;
        __int16 v221 = 1026;
        int v222 = v132;
        double v133 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v133);
        if (v133 != (char *)buf) {
          free(v133);
        }
      }
      if (!v87) {
        break;
      }
      if (!*(void *)v87)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v108 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v109 = a2;
          }
          else {
            uint64_t v109 = (uint64_t *)*a2;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v109;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v85;
          _os_log_impl(&dword_1906B8000, v108, OS_LOG_TYPE_ERROR, "CLTSP,MI,snappedIILocationContinuous,prevLocation road is nullptr,tripSegmentID,%{public}s,index,%{public}d", buf, 0x12u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_312;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        if (*((char *)a2 + 23) >= 0) {
          int v94 = a2;
        }
        else {
          int v94 = (uint64_t *)*a2;
        }
        goto LABEL_254;
      }
      if (vabdd_f64(*(double *)(v206 + 16), v87[2]) >= 3.0) {
        goto LABEL_288;
      }
      uint64_t v106 = *(int *)(*(void *)v206 + 20);
      int v107 = v106 > 9 ? 4 : dword_190885DD0[v106];
      uint64_t v110 = *(int *)(*(void *)v87 + 20);
      int v111 = v110 > 9 ? 4 : dword_190885DD0[v110];
      if (v107 != v111) {
        goto LABEL_288;
      }
      sub_190745090((uint64_t *)v243, &v206);
      uint64_t v112 = (std::__shared_weak_count *)*((void *)&v206 + 1);
      double v87 = (double *)v206;
      if (*((void *)&v206 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v86) {
        sub_1906BFE48(v86);
      }
      float v86 = v112;
      if (((v193 - v192) >> 4) - 1 == v85)
      {
LABEL_288:
        if (v243[1] == v243[0])
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          double v115 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1906B8000, v115, OS_LOG_TYPE_ERROR, "CLTSP,MI,unexpected,location chunk empty", buf, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            LOWORD(v211[0]) = 0;
            double v134 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v134);
            if (v134 != (char *)buf) {
              free(v134);
            }
          }
          goto LABEL_296;
        }
        unint64_t v113 = *(void *)(a1 + 48);
        if (v113 >= *(void *)(a1 + 56))
        {
          uint64_t v114 = sub_1907ED92C(v188, v243);
        }
        else
        {
          sub_1907ED8D8((uint64_t)v188, v243);
          uint64_t v114 = v113 + 24;
        }
        *(void *)(a1 + 48) = v114;
        double v117 = (std::__shared_weak_count *)*((void *)&v206 + 1);
        double v87 = (double *)v206;
        if (*((void *)&v206 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (v86) {
          sub_1906BFE48(v86);
        }
        long double v118 = v243[0];
        for (iuint64_t i = v243[1]; ii != v118; ii -= 2)
        {
          double v120 = (std::__shared_weak_count *)*(ii - 1);
          if (v120) {
            sub_1906BFE48(v120);
          }
        }
        v243[1] = v118;
        float v86 = v117;
        sub_190745090((uint64_t *)v243, &v206);
      }
LABEL_312:
      if (*((void *)&v206 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v206 + 1));
      }
      ++v85;
      uint64_t v84 = (uint64_t)v192;
      if (v85 >= (v193 - v192) >> 4)
      {
        *(void *)buf = v243;
        sub_1906C6BF0((void ***)buf);
        if (v86) {
          sub_1906BFE48(v86);
        }
        goto LABEL_333;
      }
    }
    sub_190745090((uint64_t *)v243, &v206);
LABEL_296:
    double v116 = (std::__shared_weak_count *)*((void *)&v206 + 1);
    double v87 = (double *)v206;
    if (*((void *)&v206 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v86) {
      sub_1906BFE48(v86);
    }
    float v86 = v116;
    goto LABEL_312;
  }
  *(void *)buf = v243;
  sub_1906C6BF0((void ***)buf);
LABEL_333:
  uint64_t v135 = (uint64_t)v192;
  for (jj = v193; jj != (char *)v135; jj -= 16)
  {
    BOOL v137 = (std::__shared_weak_count *)*((void *)jj - 1);
    if (v137) {
      sub_1906BFE48(v137);
    }
  }
  double v193 = (char *)v135;
  BOOL v138 = (uint64_t **)v211 + 1;
  *((void *)&v211[0] + 1) = 0;
  *(void *)&v211[1] = 0;
  *(void *)&v211[0] = (char *)v211 + 8;
  int v139 = *(uint64_t **)(a1 + 40);
  if (*(uint64_t **)(a1 + 48) == v139) {
    goto LABEL_414;
  }
  unint64_t v140 = 0;
  int v141 = -1;
  int v142 = 4;
  int v143 = 4;
  do
  {
    uint64_t v144 = &v139[3 * v140];
    if (*v144 != v144[1])
    {
      int v145 = *(uint64_t **)*v144;
      if (v145)
      {
        uint64_t v146 = *v145;
        if (v146)
        {
          uint64_t v147 = *(int *)(v146 + 20);
          if (v147 > 9) {
            int v148 = 4;
          }
          else {
            int v148 = dword_190885DD0[v147];
          }
          if (v143 == 4)
          {
            int v143 = v148;
          }
          else
          {
            if (v142 != 4)
            {
              if (v148 == v143 || v148 != v142)
              {
                uint64_t v149 = (uint64_t *)*((void *)&v211[0] + 1);
                long long v150 = v138;
                int v191 = v138;
                if (*((void *)&v211[0] + 1))
                {
                  do
                  {
                    while (1)
                    {
                      BOOL v138 = (uint64_t **)v149;
                      int v151 = *((_DWORD *)v149 + 7);
                      if (v151 <= v141) {
                        break;
                      }
                      uint64_t v149 = *v138;
                      long long v150 = v138;
                      if (!*v138) {
                        goto LABEL_360;
                      }
                    }
                    if (v151 >= v141)
                    {
                      char v153 = v138;
                      goto LABEL_363;
                    }
                    uint64_t v149 = v138[1];
                  }
                  while (v149);
                  long long v150 = v138 + 1;
                }
LABEL_360:
                char v153 = operator new(0x28uLL);
                v153[7] = v141;
                *((unsigned char *)v153 + 32) = 0;
                *(void *)char v153 = 0;
                *((void *)v153 + 1) = 0;
                *((void *)v153 + 2) = v138;
                char *v150 = (uint64_t *)v153;
                uint64_t v152 = (uint64_t *)v153;
                if (**(void **)&v211[0])
                {
                  *(void *)&v211[0] = **(void **)&v211[0];
                  uint64_t v152 = *v150;
                }
                sub_19074BCA4(*((uint64_t **)&v211[0] + 1), v152);
                ++*(void *)&v211[1];
LABEL_363:
                BOOL v138 = v191;
                *((unsigned char *)v153 + 32) = 1;
                int v141 = -1;
              }
              else
              {
                int v141 = -1;
                int v143 = v142;
              }
            }
            BOOL v154 = v148 == v143;
            if (v148 == v143) {
              int v143 = v148;
            }
            else {
              int v141 = v140;
            }
            if (v154) {
              int v142 = 4;
            }
            else {
              int v142 = v148;
            }
          }
        }
      }
    }
    ++v140;
    int v139 = *(uint64_t **)(a1 + 40);
    uint64_t v155 = *(uint64_t **)(a1 + 48);
  }
  while (0xAAAAAAAAAAAAAAABLL * (v155 - v139) > v140);
  if (v139 == v155) {
    goto LABEL_414;
  }
  int v156 = 0;
  while (2)
  {
    int v157 = (uint64_t *)*((void *)&v211[0] + 1);
    if (!*((void *)&v211[0] + 1))
    {
LABEL_378:
      v139 += 3;
      goto LABEL_379;
    }
    while (2)
    {
      int v158 = *((_DWORD *)v157 + 7);
      if (v156 < v158)
      {
LABEL_377:
        int v157 = (uint64_t *)*v157;
        if (!v157) {
          goto LABEL_378;
        }
        continue;
      }
      break;
    }
    if (v158 < v156)
    {
      ++v157;
      goto LABEL_377;
    }
    unint64_t v159 = (uint64_t **)*v139;
    uint64_t v160 = v139[1];
    if (*v139 != v160 && *v159 && (uint64_t v161 = **v159) != 0)
    {
      int v162 = *(_DWORD *)(v161 + 20);
      int v163 = 0;
      int v164 = 2;
      switch(v162)
      {
        case 0:
        case 1:
        case 2:
          goto LABEL_387;
        case 3:
          int v163 = 1;
LABEL_387:
          int v164 = v163;
          if ((unint64_t)(v160 - (void)v159) > 0x90) {
            goto LABEL_391;
          }
          goto LABEL_390;
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_390;
        case 8:
        case 9:
          int v164 = 3;
          goto LABEL_390;
        default:
          int v164 = 4;
LABEL_390:
          if ((unint64_t)(v160 - (void)v159) < 0x1D1) {
            goto LABEL_397;
          }
LABEL_391:
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          double v165 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
          {
            uint64_t v166 = *(void **)*v139;
            uint64_t v167 = v166[2];
            LODWORD(v166) = *(_DWORD *)(*v166 + 20);
            *(_DWORD *)buf = 134349568;
            *(void *)&uint8_t buf[4] = v167;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&unsigned char buf[14] = v166;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v164;
            _os_log_impl(&dword_1906B8000, v165, OS_LOG_TYPE_INFO, "CLTSP,UpsampledLocFiltering,skip erasing major or secondary road snaps,%{public}.2lf,locFRC,%{public}d,clrc,%{public}d", buf, 0x18u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            BOOL v175 = *(void **)*v139;
            BOOL v176 = (void *)v175[2];
            LODWORD(v175) = *(_DWORD *)(*v175 + 20);
            LODWORD(v243[0]) = 134349568;
            *(void **)((char *)v243 + 4) = v176;
            WORD2(v243[1]) = 1026;
            *(_DWORD *)((char *)&v243[1] + 6) = v175;
            WORD1(v243[2]) = 1026;
            HIDWORD(v243[2]) = v164;
            double v177 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v177);
            if (v177 != (char *)buf) {
              free(v177);
            }
          }
          v139 += 3;
          uint64_t v155 = *(uint64_t **)(a1 + 48);
          break;
      }
    }
    else
    {
LABEL_397:
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      double v168 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v169 = *(void **)*v139;
        uint64_t v170 = v169[2];
        LODWORD(v169) = *(_DWORD *)(*v169 + 20);
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v170;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v169;
        _os_log_impl(&dword_1906B8000, v168, OS_LOG_TYPE_INFO, "CLTSP,UpsampledLocFiltering,erased,%{public}.2lf,locFRC,%{public}d", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        double v172 = *(void **)*v139;
        int v173 = (void *)v172[2];
        LODWORD(v172) = *(_DWORD *)(*v172 + 20);
        LODWORD(v243[0]) = 134349312;
        *(void **)((char *)v243 + 4) = v173;
        WORD2(v243[1]) = 1026;
        *(_DWORD *)((char *)&v243[1] + 6) = v172;
        double v174 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v174);
        if (v174 != (char *)buf) {
          free(v174);
        }
      }
      uint64_t v155 = sub_1908203CC((uint64_t)(v139 + 3), *(void *)(a1 + 48), v139);
      double v171 = *(uint64_t **)(a1 + 48);
      while (v171 != v155)
      {
        v171 -= 3;
        *(void *)buf = v171;
        sub_1906C6BF0((void ***)buf);
      }
      *(void *)(a1 + 48) = v155;
    }
LABEL_379:
    ++v156;
    if (v139 != v155) {
      continue;
    }
    break;
  }
LABEL_414:
  sub_1906DDC00(*((void **)&v211[0] + 1));
LABEL_415:
  *(void *)buf = &v192;
  sub_1906C6BF0((void ***)buf);
}

void sub_1906E0A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = a15;
  sub_1906C6BF0(&a61);
  a61 = (void **)(v61 - 160);
  sub_1906C6BF0(&a61);
  if (a16) {
    sub_1906BFE48(a16);
  }
  *(void *)(v61 - 160) = &a23;
  sub_1906C6BF0((void ***)(v61 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_1906E0BE8(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1906E0C54(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1906E0C54(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      char v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      uint64_t v14 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_1906E0EDC()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (MGIsDeviceOfType()) {
    return 2;
  }
  int v14 = 1244490093;
  *(_OWORD *)buf = xmmword_1908837F0;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  int v9 = 1377801277;
  *(_OWORD *)uint64_t v8 = xmmword_190883804;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  if (MGIsDeviceOfType()) {
    return 19;
  }
  if (MGIsDeviceOfType()) {
    return 20;
  }
  int v14 = 1839812531;
  *(_OWORD *)buf = xmmword_190883818;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 20;
  }
  if (MGIsDeviceOfType()) {
    return 52;
  }
  int v14 = -435113336;
  *(_OWORD *)buf = xmmword_19088382C;
  if (MGIsDeviceOfType()) {
    return 53;
  }
  int v14 = -1997581659;
  *(_OWORD *)buf = xmmword_190883840;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 158;
  }
  int v14 = -1441055153;
  *(_OWORD *)buf = xmmword_190883854;
  if (MGIsDeviceOfType()) {
    return 159;
  }
  if (MGIsDeviceOfType()) {
    return 160;
  }
  if (MGIsDeviceOfType()) {
    return 3;
  }
  if (MGIsDeviceOfType()) {
    return 6;
  }
  int v14 = 1602014129;
  *(_OWORD *)buf = xmmword_190883868;
  if (MGIsDeviceOfType()) {
    return 7;
  }
  int v14 = -810116762;
  *(_OWORD *)buf = xmmword_19088387C;
  if (MGIsDeviceOfType()) {
    return 8;
  }
  int v14 = -1195351767;
  *(_OWORD *)buf = xmmword_190883890;
  if (MGIsDeviceOfType()) {
    return 9;
  }
  if (MGIsDeviceOfType()) {
    return 10;
  }
  if (MGIsDeviceOfType()) {
    return 11;
  }
  int v14 = 1789837692;
  *(_OWORD *)buf = xmmword_1908838A4;
  if (MGIsDeviceOfType()) {
    return 13;
  }
  int v14 = 48355600;
  *(_OWORD *)buf = xmmword_1908838B8;
  if (MGIsDeviceOfType()) {
    return 14;
  }
  int v14 = -1239654590;
  *(_OWORD *)buf = xmmword_1908838CC;
  if (MGIsDeviceOfType()) {
    return 15;
  }
  int v14 = -679691073;
  *(_OWORD *)buf = xmmword_1908838E0;
  if (MGIsDeviceOfType()) {
    return 16;
  }
  int v14 = -1579092758;
  *(_OWORD *)buf = xmmword_1908838F4;
  if (MGIsDeviceOfType()) {
    return 17;
  }
  int v14 = 1430379884;
  *(_OWORD *)buf = xmmword_190883908;
  if (MGIsDeviceOfType()) {
    return 18;
  }
  if (MGIsDeviceOfType()) {
    return 21;
  }
  int v14 = -798153473;
  *(_OWORD *)buf = xmmword_19088391C;
  if (MGIsDeviceOfType()) {
    return 22;
  }
  int v14 = -776721724;
  *(_OWORD *)buf = xmmword_190883930;
  if (MGIsDeviceOfType()) {
    return 23;
  }
  int v14 = -1403227947;
  *(_OWORD *)buf = xmmword_190883944;
  if (MGIsDeviceOfType()) {
    return 24;
  }
  int v14 = 729118884;
  *(_OWORD *)buf = xmmword_190883958;
  if (MGIsDeviceOfType()) {
    return 25;
  }
  int v14 = 1046806126;
  *(_OWORD *)buf = xmmword_19088396C;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v9 = -188760945;
  *(_OWORD *)uint64_t v8 = xmmword_190883980;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v14 = -489993439;
  *(_OWORD *)buf = xmmword_190883994;
  if (MGIsDeviceOfType()) {
    return 27;
  }
  int v14 = 886875686;
  *(_OWORD *)buf = xmmword_1908839A8;
  if (MGIsDeviceOfType()) {
    return 28;
  }
  int v14 = -1639077591;
  *(_OWORD *)buf = xmmword_1908839BC;
  if (MGIsDeviceOfType()) {
    return 29;
  }
  int v14 = 338555555;
  *(_OWORD *)buf = xmmword_1908839D0;
  if (MGIsDeviceOneOfType()) {
    return 30;
  }
  int v14 = 1032708406;
  *(_OWORD *)buf = xmmword_1908839E4;
  if (MGIsDeviceOfType()) {
    return 31;
  }
  int v14 = 729903963;
  *(_OWORD *)buf = xmmword_1908839F8;
  if (MGIsDeviceOfType()) {
    return 32;
  }
  int v14 = 1278131292;
  *(_OWORD *)buf = xmmword_190883A0C;
  if (MGIsDeviceOfType()) {
    return 33;
  }
  int v14 = -1841712216;
  *(_OWORD *)buf = xmmword_190883A20;
  if (MGIsDeviceOfType()) {
    return 34;
  }
  int v14 = 1275676051;
  *(_OWORD *)buf = xmmword_190883A34;
  if (MGIsDeviceOfType()) {
    return 35;
  }
  int v14 = 1908474541;
  *(_OWORD *)buf = xmmword_190883A48;
  if (MGIsDeviceOfType()) {
    return 36;
  }
  int v14 = -1022451852;
  *(_OWORD *)buf = xmmword_190883A5C;
  if (MGIsDeviceOfType()) {
    return 62;
  }
  int v14 = 1729782187;
  *(_OWORD *)buf = xmmword_190883A70;
  if (MGIsDeviceOfType()) {
    return 63;
  }
  if (MGIsDeviceOfType()) {
    return 37;
  }
  int v14 = 368885834;
  *(_OWORD *)buf = xmmword_190883A84;
  if (MGIsDeviceOfType()) {
    return 38;
  }
  int v14 = -414334491;
  *(_OWORD *)buf = xmmword_190883A98;
  if (MGIsDeviceOfType()) {
    return 39;
  }
  if (MGIsDeviceOfType()) {
    return 40;
  }
  int v14 = -526227167;
  *(_OWORD *)buf = xmmword_190883AAC;
  if (MGIsDeviceOfType()) {
    return 41;
  }
  int v14 = -1509831889;
  *(_OWORD *)buf = xmmword_190883AC0;
  if (MGIsDeviceOfType()) {
    return 42;
  }
  int v14 = 1960366092;
  *(_OWORD *)buf = xmmword_190883AD4;
  if (MGIsDeviceOfType()) {
    return 43;
  }
  int v14 = -2114570942;
  *(_OWORD *)buf = xmmword_190883AE8;
  if (MGIsDeviceOfType()) {
    return 148;
  }
  int v14 = -1527788847;
  *(_OWORD *)buf = xmmword_190883AFC;
  if (MGIsDeviceOfType()) {
    return 44;
  }
  int v14 = 1532898719;
  *(_OWORD *)buf = xmmword_190883B10;
  if (MGIsDeviceOfType()) {
    return 45;
  }
  int v14 = 996646949;
  *(_OWORD *)buf = xmmword_190883B24;
  if (MGIsDeviceOfType()) {
    return 46;
  }
  int v14 = -563086000;
  *(_OWORD *)buf = xmmword_190883B38;
  if (MGIsDeviceOfType()) {
    return 47;
  }
  int v14 = 659506830;
  *(_OWORD *)buf = xmmword_190883B4C;
  if (MGIsDeviceOfType()) {
    return 48;
  }
  int v14 = 213746202;
  *(_OWORD *)buf = xmmword_190883B60;
  if (MGIsDeviceOfType()) {
    return 49;
  }
  int v14 = 289690957;
  *(_OWORD *)buf = xmmword_190883B74;
  if (MGIsDeviceOfType()) {
    return 50;
  }
  int v14 = 586720268;
  *(_OWORD *)buf = xmmword_190883B88;
  if (MGIsDeviceOfType()) {
    return 51;
  }
  int v14 = -350584140;
  *(_OWORD *)buf = xmmword_190883B9C;
  if (MGIsDeviceOfType()) {
    return 54;
  }
  int v14 = 368778837;
  *(_OWORD *)buf = xmmword_190883BB0;
  if (MGIsDeviceOfType()) {
    return 55;
  }
  if (MGIsDeviceOfType()) {
    return 56;
  }
  int v14 = -1418383976;
  *(_OWORD *)buf = xmmword_190883BC4;
  if (MGIsDeviceOfType()) {
    return 57;
  }
  int v14 = -1213485500;
  *(_OWORD *)buf = xmmword_190883BD8;
  if (MGIsDeviceOfType()) {
    return 58;
  }
  if (MGIsDeviceOfType()) {
    return 59;
  }
  int v14 = 1425254930;
  *(_OWORD *)buf = xmmword_190883BEC;
  if (MGIsDeviceOfType()) {
    return 60;
  }
  int v14 = 1899561076;
  *(_OWORD *)buf = xmmword_190883C00;
  if (MGIsDeviceOfType()) {
    return 61;
  }
  int v14 = -199226823;
  *(_OWORD *)buf = xmmword_190883C14;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v9 = 1412427398;
  *(_OWORD *)uint64_t v8 = xmmword_190883C28;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v14 = -1283070668;
  *(_OWORD *)buf = xmmword_190883C3C;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v9 = 160260070;
  *(_OWORD *)uint64_t v8 = xmmword_190883C50;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v14 = 1711910369;
  *(_OWORD *)buf = xmmword_190883C64;
  if (MGIsDeviceOfType()) {
    return 66;
  }
  int v14 = -1282800328;
  *(_OWORD *)buf = xmmword_190883C78;
  if (MGIsDeviceOfType()) {
    return 67;
  }
  int v14 = 897736383;
  *(_OWORD *)buf = xmmword_190883C8C;
  if (MGIsDeviceOfType()) {
    return 68;
  }
  int v14 = -453987047;
  *(_OWORD *)buf = xmmword_190883CA0;
  if (MGIsDeviceOfType()) {
    return 69;
  }
  int v14 = 450980336;
  *(_OWORD *)buf = xmmword_190883CB4;
  if (MGIsDeviceOfType()) {
    return 70;
  }
  int v14 = 414393924;
  *(_OWORD *)buf = xmmword_190883CC8;
  if (MGIsDeviceOfType()) {
    return 71;
  }
  int v14 = -996295886;
  *(_OWORD *)buf = xmmword_190883CDC;
  if (MGIsDeviceOfType()) {
    return 72;
  }
  int v14 = -337121064;
  *(_OWORD *)buf = xmmword_190883CF0;
  if (MGIsDeviceOfType()) {
    return 73;
  }
  int v14 = -2092955395;
  *(_OWORD *)buf = xmmword_190883D04;
  if (MGIsDeviceOfType()) {
    return 74;
  }
  int v14 = 674998600;
  *(_OWORD *)buf = xmmword_190883D18;
  if (MGIsDeviceOfType()) {
    return 75;
  }
  int v14 = 317289457;
  *(_OWORD *)buf = xmmword_190883D2C;
  if (MGIsDeviceOfType()) {
    return 76;
  }
  int v14 = 401945557;
  *(_OWORD *)buf = xmmword_190883D40;
  if (MGIsDeviceOfType()) {
    return 77;
  }
  int v14 = -232427879;
  *(_OWORD *)buf = xmmword_190883D54;
  if (MGIsDeviceOfType()) {
    return 78;
  }
  int v14 = -427474227;
  *(_OWORD *)buf = xmmword_190883D68;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v9 = 1477534141;
  *(_OWORD *)uint64_t v8 = xmmword_190883D7C;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v14 = -1843102369;
  *(_OWORD *)buf = xmmword_190883D90;
  if (MGIsDeviceOfType()) {
    return 80;
  }
  if (MGIsDeviceOfType()) {
    return 81;
  }
  int v14 = 470738981;
  *(_OWORD *)buf = xmmword_190883DA4;
  if (MGIsDeviceOfType()) {
    return 82;
  }
  if (MGIsDeviceOfType()) {
    return 83;
  }
  int v14 = 710807826;
  *(_OWORD *)buf = xmmword_190883DB8;
  if (MGIsDeviceOfType()) {
    return 84;
  }
  if (MGIsDeviceOfType()) {
    return 85;
  }
  int v14 = 1860682089;
  *(_OWORD *)buf = xmmword_190883DCC;
  if (MGIsDeviceOfType()) {
    return 86;
  }
  if (MGIsDeviceOfType()) {
    return 87;
  }
  int v14 = -2085056298;
  *(_OWORD *)buf = xmmword_190883DE0;
  if (MGIsDeviceOfType()) {
    return 88;
  }
  int v14 = 2146530832;
  *(_OWORD *)buf = xmmword_190883DF4;
  if (MGIsDeviceOfType()) {
    return 89;
  }
  int v14 = -1742178852;
  *(_OWORD *)buf = xmmword_190883E08;
  if (MGIsDeviceOfType()) {
    return 90;
  }
  int v14 = 617174804;
  *(_OWORD *)buf = xmmword_190883E1C;
  if (MGIsDeviceOfType()) {
    return 91;
  }
  int v14 = 1330813729;
  *(_OWORD *)buf = xmmword_190883E30;
  if (MGIsDeviceOfType()) {
    return 92;
  }
  if (MGIsDeviceOfType()) {
    return 93;
  }
  if (MGIsDeviceOfType()) {
    return 94;
  }
  int v14 = 152704997;
  *(_OWORD *)buf = xmmword_190883E44;
  if (MGIsDeviceOfType()) {
    return 95;
  }
  int v14 = -338255497;
  *(_OWORD *)buf = xmmword_190883E58;
  if (MGIsDeviceOfType()) {
    return 96;
  }
  int v14 = -1040127899;
  *(_OWORD *)buf = xmmword_190883E6C;
  if (MGIsDeviceOfType()) {
    return 97;
  }
  int v14 = 283967174;
  *(_OWORD *)buf = xmmword_190883E80;
  if (MGIsDeviceOfType()) {
    return 98;
  }
  int v14 = 1530707451;
  *(_OWORD *)buf = xmmword_190883E94;
  if (MGIsDeviceOfType()) {
    return 99;
  }
  int v14 = -871113647;
  *(_OWORD *)buf = xmmword_190883EA8;
  if (MGIsDeviceOfType()) {
    return 100;
  }
  int v14 = 483476120;
  *(_OWORD *)buf = xmmword_190883EBC;
  if (MGIsDeviceOfType()) {
    return 101;
  }
  int v14 = 1472775220;
  *(_OWORD *)buf = xmmword_190883ED0;
  if (MGIsDeviceOfType()) {
    return 102;
  }
  int v14 = 56502976;
  *(_OWORD *)buf = xmmword_190883EE4;
  if (MGIsDeviceOfType()) {
    return 103;
  }
  int v14 = 282158961;
  *(_OWORD *)buf = xmmword_190883EF8;
  if (MGIsDeviceOfType()) {
    return 104;
  }
  int v14 = 1282132887;
  *(_OWORD *)buf = xmmword_190883F0C;
  if (MGIsDeviceOfType()) {
    return 105;
  }
  int v14 = -961843768;
  *(_OWORD *)buf = xmmword_190883F20;
  if (MGIsDeviceOfType()) {
    return 106;
  }
  int v14 = 1326690998;
  *(_OWORD *)buf = xmmword_190883F34;
  if (MGIsDeviceOfType()) {
    return 107;
  }
  int v14 = -441172408;
  *(_OWORD *)buf = xmmword_190883F48;
  if (MGIsDeviceOfType()) {
    return 108;
  }
  int v14 = -126099363;
  *(_OWORD *)buf = xmmword_190883F5C;
  if (MGIsDeviceOfType()) {
    return 109;
  }
  int v14 = 1756484512;
  *(_OWORD *)buf = xmmword_190883F70;
  if (MGIsDeviceOfType()) {
    return 110;
  }
  int v14 = 763775061;
  *(_OWORD *)buf = xmmword_190883F84;
  if (MGIsDeviceOfType()) {
    return 111;
  }
  int v14 = -1092155788;
  *(_OWORD *)buf = xmmword_190883F98;
  if (MGIsDeviceOfType()) {
    return 112;
  }
  int v14 = -557458837;
  *(_OWORD *)buf = xmmword_190883FAC;
  if (MGIsDeviceOfType()) {
    return 113;
  }
  int v14 = -63049871;
  *(_OWORD *)buf = xmmword_190883FC0;
  if (MGIsDeviceOfType()) {
    return 114;
  }
  int v14 = 1730000236;
  *(_OWORD *)buf = xmmword_190883FD4;
  if (MGIsDeviceOfType()) {
    return 115;
  }
  int v14 = 406601745;
  *(_OWORD *)buf = xmmword_190883FE8;
  if (MGIsDeviceOfType()) {
    return 116;
  }
  int v14 = 1530338216;
  *(_OWORD *)buf = xmmword_190883FFC;
  if (MGIsDeviceOfType()) {
    return 117;
  }
  int v14 = -1930811061;
  *(_OWORD *)buf = xmmword_190884010;
  if (MGIsDeviceOfType()) {
    return 118;
  }
  int v14 = 1654218604;
  *(_OWORD *)buf = xmmword_190884024;
  if (MGIsDeviceOfType()) {
    return 119;
  }
  int v14 = -182498503;
  *(_OWORD *)buf = xmmword_190884038;
  if (MGIsDeviceOfType()) {
    return 124;
  }
  int v14 = -2030489149;
  *(_OWORD *)buf = xmmword_19088404C;
  if (MGIsDeviceOfType()) {
    return 120;
  }
  int v14 = 841005628;
  *(_OWORD *)buf = xmmword_190884060;
  if (MGIsDeviceOfType()) {
    return 121;
  }
  int v14 = 223445260;
  *(_OWORD *)buf = xmmword_190884074;
  if (MGIsDeviceOfType()) {
    return 122;
  }
  int v14 = 1219348060;
  *(_OWORD *)buf = xmmword_190884088;
  if (MGIsDeviceOfType()) {
    return 123;
  }
  if (MGIsDeviceOfType()) {
    return 125;
  }
  if (MGIsDeviceOfType()) {
    return 126;
  }
  if (MGIsDeviceOfType()) {
    return 127;
  }
  if (MGIsDeviceOfType()) {
    return 128;
  }
  if (MGIsDeviceOfType()) {
    return 129;
  }
  if (MGIsDeviceOfType()) {
    return 130;
  }
  if (MGIsDeviceOfType()) {
    return 131;
  }
  if (MGIsDeviceOfType()) {
    return 132;
  }
  if (MGIsDeviceOfType()) {
    return 133;
  }
  int v14 = 2030516999;
  *(_OWORD *)buf = xmmword_19088409C;
  *(_OWORD *)uint64_t v8 = xmmword_1908840B0;
  int v9 = -1276010597;
  if (MGIsDeviceOneOfType()) {
    return 134;
  }
  int v14 = -762483149;
  *(_OWORD *)buf = xmmword_1908840C4;
  *(_OWORD *)uint64_t v8 = xmmword_1908840D8;
  int v9 = -1926937532;
  if (MGIsDeviceOneOfType()) {
    return 135;
  }
  int v14 = -1902732724;
  *(_OWORD *)buf = xmmword_1908840EC;
  *(_OWORD *)uint64_t v8 = xmmword_190884100;
  int v9 = -342357580;
  if (MGIsDeviceOneOfType()) {
    return 136;
  }
  int v14 = 300442574;
  *(_OWORD *)buf = xmmword_190884114;
  *(_OWORD *)uint64_t v8 = xmmword_190884128;
  int v9 = -1294188889;
  if (MGIsDeviceOneOfType()) {
    return 137;
  }
  if (MGIsDeviceOfType()) {
    return 138;
  }
  int v14 = -61007701;
  *(_OWORD *)buf = xmmword_19088413C;
  if (MGIsDeviceOfType()) {
    return 139;
  }
  if (MGIsDeviceOfType()) {
    return 140;
  }
  int v14 = -235416490;
  *(_OWORD *)buf = xmmword_190884150;
  if (MGIsDeviceOfType()) {
    return 141;
  }
  int v14 = -820493242;
  *(_OWORD *)buf = xmmword_190884164;
  if (MGIsDeviceOfType()) {
    return 143;
  }
  int v14 = -1157300313;
  *(_OWORD *)buf = xmmword_190884178;
  if (MGIsDeviceOfType()) {
    return 144;
  }
  int v14 = -2132668294;
  *(_OWORD *)buf = xmmword_19088418C;
  if (MGIsDeviceOfType()) {
    return 145;
  }
  if (MGIsDeviceOfType()) {
    return 146;
  }
  if (MGIsDeviceOfType()) {
    return 147;
  }
  if (MGIsDeviceOfType()) {
    return 149;
  }
  if (MGIsDeviceOfType()) {
    return 150;
  }
  int v14 = 1737149739;
  *(_OWORD *)buf = xmmword_1908841A0;
  if (MGIsDeviceOfType()) {
    return 151;
  }
  int v14 = 1577888303;
  *(_OWORD *)buf = xmmword_1908841B4;
  if (MGIsDeviceOfType()) {
    return 152;
  }
  int v14 = -1918230744;
  *(_OWORD *)buf = xmmword_1908841C8;
  if (MGIsDeviceOfType()) {
    return 153;
  }
  int v14 = 1126727276;
  *(_OWORD *)buf = xmmword_1908841DC;
  if (MGIsDeviceOfType()) {
    return 154;
  }
  int v14 = 300130091;
  *(_OWORD *)buf = xmmword_1908841F0;
  if (MGIsDeviceOfType()) {
    return 155;
  }
  int v14 = 343814884;
  *(_OWORD *)buf = xmmword_190884204;
  if (MGIsDeviceOfType()) {
    return 156;
  }
  int v14 = -1675932945;
  *(_OWORD *)buf = xmmword_190884218;
  if (MGIsDeviceOfType()) {
    return 157;
  }
  if (MGIsDeviceOfType()) {
    return 161;
  }
  if (MGIsDeviceOfType()) {
    return 162;
  }
  if (MGIsDeviceOfType()) {
    return 166;
  }
  int v14 = -1840391155;
  *(_OWORD *)buf = xmmword_19088422C;
  if (MGIsDeviceOfType()) {
    return 167;
  }
  int v14 = -121925081;
  *(_OWORD *)buf = xmmword_190884240;
  if (MGIsDeviceOfType()) {
    return 142;
  }
  int v14 = 1071957977;
  *(_OWORD *)buf = xmmword_190884254;
  if (MGIsDeviceOfType()) {
    return 168;
  }
  int v14 = 438437663;
  *(_OWORD *)buf = xmmword_190884268;
  if (MGIsDeviceOfType()) {
    return 169;
  }
  int v14 = 1575123478;
  *(_OWORD *)buf = xmmword_19088427C;
  if (MGIsDeviceOfType()) {
    return 170;
  }
  int v14 = -382792827;
  *(_OWORD *)buf = xmmword_190884290;
  if (MGIsDeviceOfType()) {
    return 171;
  }
  int v14 = 123138233;
  *(_OWORD *)buf = xmmword_1908842A4;
  if (MGIsDeviceOfType()) {
    return 172;
  }
  int v14 = 681511593;
  *(_OWORD *)buf = xmmword_1908842B8;
  if (MGIsDeviceOfType()) {
    return 173;
  }
  if (MGIsDeviceOfType()) {
    return 174;
  }
  if (MGIsDeviceOfType()) {
    return 175;
  }
  int v14 = 713503427;
  *(_OWORD *)buf = xmmword_1908842CC;
  if (MGIsDeviceOfType()) {
    return 176;
  }
  int v14 = -1632750650;
  *(_OWORD *)buf = xmmword_1908842E0;
  if (MGIsDeviceOfType()) {
    return 177;
  }
  int v14 = -1820426635;
  *(_OWORD *)buf = xmmword_1908842F4;
  if (MGIsDeviceOfType()) {
    return 178;
  }
  int v14 = -937652876;
  *(_OWORD *)buf = xmmword_190884308;
  if (MGIsDeviceOfType()) {
    return 179;
  }
  int v14 = 1874287171;
  *(_OWORD *)buf = xmmword_19088431C;
  if (MGIsDeviceOfType()) {
    return 180;
  }
  int v14 = -781324731;
  *(_OWORD *)buf = xmmword_190884330;
  if (MGIsDeviceOfType()) {
    return 181;
  }
  int v14 = 1214880059;
  *(_OWORD *)buf = xmmword_190884344;
  if (MGIsDeviceOfType()) {
    return 182;
  }
  int v14 = 426359977;
  *(_OWORD *)buf = xmmword_190884358;
  if (MGIsDeviceOfType()) {
    return 183;
  }
  if (MGIsDeviceOfType()) {
    return 180;
  }
  if (MGIsDeviceOfType()) {
    return 184;
  }
  if (MGIsDeviceOfType()) {
    return 163;
  }
  if (MGIsDeviceOfType()) {
    return 185;
  }
  if (MGIsDeviceOfType()) {
    return 164;
  }
  if (MGIsDeviceOfType()) {
    return 165;
  }
  int v14 = 345196535;
  *(_OWORD *)buf = xmmword_19088436C;
  if (MGIsDeviceOfType()) {
    return 186;
  }
  int v14 = 440949464;
  *(_OWORD *)buf = xmmword_190884380;
  if (MGIsDeviceOfType()) {
    return 187;
  }
  int v14 = 688565114;
  *(_OWORD *)buf = xmmword_190884394;
  if (MGIsDeviceOfType()) {
    return 188;
  }
  int v14 = -493418906;
  *(_OWORD *)buf = xmmword_1908843A8;
  if (MGIsDeviceOfType()) {
    return 189;
  }
  if (MGIsDeviceOfType()) {
    return 190;
  }
  int v14 = -584398440;
  *(_OWORD *)buf = xmmword_1908843BC;
  if (MGIsDeviceOfType()) {
    return 195;
  }
  int v14 = -879476163;
  *(_OWORD *)buf = xmmword_1908843D0;
  if (MGIsDeviceOfType()) {
    return 196;
  }
  int v14 = -695298128;
  *(_OWORD *)buf = xmmword_1908843E4;
  *(_OWORD *)uint64_t v8 = xmmword_1908843F8;
  int v9 = 804488105;
  if (MGIsDeviceOneOfType()) {
    return 197;
  }
  int v14 = 1614584579;
  *(_OWORD *)buf = xmmword_19088440C;
  *(_OWORD *)uint64_t v8 = xmmword_190884420;
  int v9 = 324288768;
  if (MGIsDeviceOneOfType()) {
    return 198;
  }
  int v14 = 460218192;
  *(_OWORD *)buf = xmmword_190884434;
  *(_OWORD *)uint64_t v8 = xmmword_190884448;
  int v9 = 2144905009;
  if (MGIsDeviceOneOfType()) {
    return 199;
  }
  int v14 = 127894440;
  *(_OWORD *)buf = xmmword_19088445C;
  *(_OWORD *)uint64_t v8 = xmmword_190884470;
  int v9 = 1070997468;
  if (MGIsDeviceOneOfType()) {
    return 200;
  }
  int v14 = 372777383;
  *(_OWORD *)buf = xmmword_190884484;
  if (MGIsDeviceOfType()) {
    return 201;
  }
  int v14 = -858079590;
  *(_OWORD *)buf = xmmword_190884498;
  if (MGIsDeviceOfType()) {
    return 202;
  }
  int v14 = -212523443;
  *(_OWORD *)buf = xmmword_1908844AC;
  if (MGIsDeviceOfType()) {
    return 203;
  }
  int v14 = 646100384;
  *(_OWORD *)buf = xmmword_1908844C0;
  if (MGIsDeviceOfType()) {
    return 204;
  }
  int v14 = -340360463;
  *(_OWORD *)buf = xmmword_1908844D4;
  if (MGIsDeviceOfType()) {
    return 205;
  }
  int v14 = 1605231531;
  *(_OWORD *)buf = xmmword_1908844E8;
  if (MGIsDeviceOfType()) {
    return 206;
  }
  if (MGIsDeviceOfType()) {
    return 207;
  }
  if (MGIsDeviceOfType()) {
    return 208;
  }
  int v14 = -545612308;
  *(_OWORD *)buf = xmmword_1908844FC;
  if (MGIsDeviceOfType()) {
    return 209;
  }
  int v14 = 1178062702;
  *(_OWORD *)buf = xmmword_190884510;
  if (MGIsDeviceOfType()) {
    return 210;
  }
  int v14 = 958549802;
  *(_OWORD *)buf = xmmword_190884524;
  if (MGIsDeviceOfType()) {
    return 211;
  }
  int v14 = 1377540371;
  *(_OWORD *)buf = xmmword_190884538;
  if (MGIsDeviceOfType()) {
    return 212;
  }
  if (MGIsDeviceOfType()) {
    return 213;
  }
  if (MGIsDeviceOfType()) {
    return 214;
  }
  if (MGIsDeviceOfType()) {
    return 215;
  }
  if (MGIsDeviceOfType()) {
    return 216;
  }
  if (MGIsDeviceOfType()) {
    return 217;
  }
  if (MGIsDeviceOfType()) {
    return 218;
  }
  int v14 = -1431778695;
  *(_OWORD *)buf = xmmword_19088454C;
  if (MGIsDeviceOfType()) {
    return 219;
  }
  int v14 = 533419158;
  *(_OWORD *)buf = xmmword_190884560;
  if (MGIsDeviceOfType()) {
    return 220;
  }
  int v14 = 1106979518;
  *(_OWORD *)buf = xmmword_190884574;
  if (MGIsDeviceOfType()) {
    return 221;
  }
  int v14 = -609570151;
  *(_OWORD *)buf = xmmword_190884588;
  if (MGIsDeviceOfType()) {
    return 222;
  }
  int v14 = -874769875;
  *(_OWORD *)buf = xmmword_19088459C;
  if (MGIsDeviceOfType()) {
    return 223;
  }
  int v14 = 1223847566;
  *(_OWORD *)buf = xmmword_1908845B0;
  if (MGIsDeviceOfType()) {
    return 224;
  }
  int v14 = 185580364;
  *(_OWORD *)buf = xmmword_1908845C4;
  if (MGIsDeviceOfType()) {
    return 225;
  }
  if (MGIsDeviceOfType()) {
    return 226;
  }
  int v14 = 1878025452;
  *(_OWORD *)buf = xmmword_1908845D8;
  if (MGIsDeviceOfType()) {
    return 227;
  }
  int v14 = 1725957070;
  *(_OWORD *)buf = xmmword_1908845EC;
  if (MGIsDeviceOfType()) {
    return 228;
  }
  int v14 = 538967431;
  *(_OWORD *)buf = xmmword_190884600;
  if (MGIsDeviceOfType()) {
    return 229;
  }
  int v14 = 2060712151;
  *(_OWORD *)buf = xmmword_190884614;
  if (MGIsDeviceOfType()) {
    return 230;
  }
  int v14 = 802516499;
  *(_OWORD *)buf = xmmword_190884628;
  if (MGIsDeviceOfType()) {
    return 231;
  }
  int v14 = -1919324456;
  *(_OWORD *)buf = xmmword_19088463C;
  if (MGIsDeviceOfType()) {
    return 232;
  }
  int v14 = 1127969586;
  *(_OWORD *)buf = xmmword_190884650;
  if (MGIsDeviceOfType()) {
    return 233;
  }
  int v14 = 1292009573;
  *(_OWORD *)buf = xmmword_190884664;
  if (MGIsDeviceOfType()) {
    return 234;
  }
  if (MGIsDeviceOfType()) {
    return 235;
  }
  if (MGIsDeviceOfType()) {
    return 236;
  }
  if (MGIsDeviceOfType()) {
    return 237;
  }
  if (MGIsDeviceOfType()) {
    return 238;
  }
  if (MGIsDeviceOfType()) {
    return 142;
  }
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (sub_190793C24()) {
    return 1;
  }
  if (MGIsDeviceOfType()) {
    return 239;
  }
  int v14 = -12497897;
  *(_OWORD *)buf = xmmword_190884678;
  if (MGIsDeviceOfType()) {
    return 240;
  }
  int v14 = -518121279;
  *(_OWORD *)buf = xmmword_19088468C;
  if (MGIsDeviceOfType()) {
    return 241;
  }
  int v14 = -773054213;
  *(_OWORD *)buf = xmmword_1908846A0;
  if (MGIsDeviceOfType()) {
    return 242;
  }
  int v14 = -1204420428;
  *(_OWORD *)buf = xmmword_1908846B4;
  if (MGIsDeviceOfType()) {
    return 243;
  }
  if (MGIsDeviceOfType()) {
    return 260;
  }
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006560);
    }
    CFTypeID v2 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      *(void *)&uint8_t buf[4] = v1;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      *(_DWORD *)uint64_t v8 = 138477827;
      *(void *)&v8[4] = v1;
      CFNumberRef v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006560);
  }
  unsigned __int16 v3 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
  {
    sub_1907829B4(@"HWModelStr", (uint64_t)buf);
    uint64_t v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)uint64_t v8 = 136380675;
    *(void *)&v8[4] = v4;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v8,
      0xCu);
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006560);
    }
    sub_1907829B4(@"HWModelStr", (uint64_t)v8);
    if (v10 >= 0) {
      BOOL v6 = v8;
    }
    else {
      BOOL v6 = *(uint8_t **)v8;
    }
    int v11 = 136380675;
    char v12 = v6;
    char v7 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)v8);
    }
    sub_1906D4A28("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1906E3A88()
{
  if (qword_1EB272490 != -1) {
    dispatch_once(&qword_1EB272490, &unk_1EE006540);
  }
  return byte_1EB2723F6;
}

uint64_t sub_1906E3ACC(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1 + 208);
  int v13 = *(std::__shared_weak_count **)(a1 + 216);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(a4 + 8);
    if ((uint64_t **)(a7 + 40) != a2) {
      sub_19084F698((uint64_t *)(a7 + 40), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 4));
    }
    long long v16 = *(_OWORD *)a4;
    long long v17 = *(_OWORD *)(a4 + 16);
    long long v18 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a7 + 408) = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a7 + 424) = v18;
    *(_OWORD *)(a7 + 376) = v16;
    *(_OWORD *)(a7 + 392) = v17;
    long long v19 = *(_OWORD *)(a4 + 64);
    long long v20 = *(_OWORD *)(a4 + 80);
    long long v21 = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a7 + 472) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a7 + 488) = v21;
    *(_OWORD *)(a7 + 440) = v19;
    *(_OWORD *)(a7 + 456) = v20;
    std::string::operator=((std::string *)(a7 + 504), (const std::string *)(a4 + 128));
    memcpy((void *)(a7 + 528), (const void *)(a4 + 152), 0x118uLL);
    if (*(void *)(a7 + 48) != *(void *)(a7 + 40)
      || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a7) & 1) != 0)
    {
      int v22 = *(unsigned __int8 *)(a1 + 1032);
      uint64_t v53 = 0;
      long long v52 = 0uLL;
      long long v54 = xmmword_1908824F0;
      char v55 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v58 = _Q0;
      long long v59 = _Q0;
      long long v60 = _Q0;
      long long v61 = _Q0;
      unint64_t v62 = 0xBFF0000000000000;
      char v63 = 0;
      long long v64 = _Q0;
      long long v65 = _Q0;
      long long v66 = _Q0;
      v28.n128_f64[0] = sub_190841084((uint64_t)&v52, a4, v22);
      *(unsigned char *)(a7 + 904) = *(unsigned char *)(a1 + 1032);
      if (a6)
      {
        *((void *)&v59 + 1) = 0xBFF0000000000000;
        *((void *)&v60 + 1) = 0xBFF0000000000000;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, a4, a7, a3, v28))
      {
        if (sub_19083D590(a7, 1, (uint64_t)&v52))
        {
          char v29 = 0;
          goto LABEL_34;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        int v35 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          uint64_t v68 = v15;
          _os_log_impl(&dword_1906B8000, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, update failed", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2))
        {
LABEL_33:
          char v29 = 1;
LABEL_34:
          *(unsigned char *)(a7 + 897) = 0;
          if (!a5) {
            goto LABEL_54;
          }
          if (*(unsigned char *)(a1 + 9))
          {
            uint64_t v36 = (uint64_t *)(a1 + 1904);
            if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a7, a3))
            {
              uint64_t v37 = *(void *)(a1 + 1904);
              uint64_t v38 = *(void *)(a1 + 1912);
              if (v37 != v38)
              {
                int v39 = 0;
                while (vabdd_f64(*(double *)(v37 + 184), *(double *)(a7 + 400)) <= 0.01)
                {
                  v39 |= sub_19083D590(a7, 2, v37);
                  v37 += 264;
                  if (v37 == v38) {
                    goto LABEL_71;
                  }
                }
                sub_1907D5DF8(v36);
LABEL_71:
                *(unsigned char *)(a7 + 897) = v39 & 1;
                if (v39)
                {
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  long double v45 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    uint64_t v68 = v15;
                    _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,using route hints", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    int v50 = 134349056;
                    uint64_t v51 = v15;
                    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v46);
                    if (v46 != (char *)buf) {
                      free(v46);
                    }
                  }
                }
LABEL_54:
                if ((v29 & 1) == 0)
                {
                  v49[0] = v14;
                  v49[1] = (uint64_t)v13;
                  if (v13) {
                    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  char v41 = sub_1906C7350(a7, v49, a3);
                  if (v13) {
                    sub_1906BFE48(v13);
                  }
                  if (v41) {
                    goto LABEL_60;
                  }
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  double v44 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    uint64_t v68 = v15;
                    _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prepareCandidates failed", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    int v50 = 134349056;
                    uint64_t v51 = v15;
                    double v48 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v48);
                    if (v48 != (char *)buf) {
                      free(v48);
                    }
                  }
                }
                uint64_t v42 = 1;
                if (!v13) {
                  return v42;
                }
                goto LABEL_61;
              }
            }
            else
            {
              sub_1907D5DF8((uint64_t *)(a1 + 1904));
            }
          }
          *(unsigned char *)(a7 + 897) = 0;
          goto LABEL_54;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_82:
          int v50 = 134349056;
          uint64_t v51 = v15;
          int v47 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        float v34 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          uint64_t v68 = v15;
          _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prediction failed", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_82;
        }
      }
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      goto LABEL_82;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    unint64_t v40 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      uint64_t v68 = v15;
      _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to initialize filter", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      LODWORD(v52) = 134349056;
      *(void *)((char *)&v52 + 4) = v15;
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v33);
LABEL_50:
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v30 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(a4 + 8);
      *(_DWORD *)buf = 134349056;
      uint64_t v68 = v31;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, prepareSolution", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v32 = *(void *)(a4 + 8);
      LODWORD(v52) = 134349056;
      *(void *)((char *)&v52 + 4) = v32;
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v33);
      goto LABEL_50;
    }
  }
LABEL_60:
  uint64_t v42 = 0;
  if (v13) {
LABEL_61:
  }
    sub_1906BFE48(v13);
  return v42;
}

void sub_1906E459C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1906E45F0(void *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v3 = (uint64_t *)(a2 + 40);
  uint64_t v2 = *(void *)(a2 + 40);
  a1[28] = *(void *)(a2 + 400);
  uint64_t v4 = *(void *)(a2 + 384);
  if (*(void *)(a2 + 48) == v2)
  {
    sub_19084F340((void *)(a2 + 40));
    *unsigned __int16 v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    uint64_t v57 = 0;
    long long buf = 0uLL;
    *(void *)&long long v47 = &buf;
    sub_1907D5AB4((void ***)&v47);
    v9.n128_u64[0] = *(void *)(a2 + 456);
    double v10 = *(double *)(a2 + 576);
    if (v10 > 0.0)
    {
      double v11 = *(double *)(a2 + 584);
      if (v11 > 0.0) {
        v9.n128_f64[0] = sqrt(v11 / 2.45 * (v11 / 2.45) + v10 / 2.45 * (v10 / 2.45));
      }
    }
    uint64_t v42 = (uint64_t)&v42;
    float v43 = &v42;
    uint64_t v44 = 0;
    char v12 = (_DWORD *)a1[26];
    int v13 = (std::__shared_weak_count *)a1[27];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v12)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v31 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, initialize", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_95;
      }
      unint64_t v40 = v13;
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_109;
      }
      goto LABEL_118;
    }
    v9.n128_f64[0] = v9.n128_f64[0] * 4.0;
    if (v9.n128_f64[0] < 75.0) {
      v9.n128_f64[0] = 75.0;
    }
    if (v9.n128_f64[0] > 250.0) {
      v9.n128_f64[0] = 250.0;
    }
    v12[9] = 0;
    if ((*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t *, uint64_t, __n128))(*(void *)v12 + 64))(v12, &v42, v3 + 42, 1, v9))
    {
      if (v44)
      {
        unint64_t v40 = v13;
        uint64_t v14 = v43;
        if (v43 != &v42)
        {
          uint64_t v41 = a2 + 56;
          while (1)
          {
            LODWORD(v48) = 0;
            long long v47 = 0uLL;
            WORD2(v48) = 1;
            DWORD2(v48) = 0;
            long long v54 = 0;
            uint64_t v55 = 0;
            __p = 0;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            char v52 = 0;
            uint64_t v16 = v14[2];
            uint64_t v15 = v14[3];
            if (v15)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
              long long v17 = (std::__shared_weak_count *)*((void *)&v47 + 1);
              *(void *)&long long v47 = v16;
              *((void *)&v47 + 1) = v15;
              if (v17)
              {
                sub_1906BFE48(v17);
                uint64_t v16 = v47;
              }
            }
            else
            {
              long long v47 = (unint64_t)v14[2];
            }
            long long v18 = *((_OWORD *)v14 + 3);
            long long v48 = *((_OWORD *)v14 + 2);
            long long v49 = v18;
            *(void *)&long long v50 = v14[8];
            if (v16) {
              break;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            long long v21 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 134349056;
              *(void *)((char *)&buf + 4) = v4;
              _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, NULL road at initialization", (uint8_t *)&buf, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              int v45 = 134349056;
              uint64_t v46 = v4;
              int v22 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v22);
              if (v22 != (char *)&buf) {
                free(v22);
              }
            }
LABEL_53:
            if (__p)
            {
              long long v54 = __p;
              operator delete(__p);
            }
            if (*((void *)&v47 + 1)) {
              sub_1906BFE48(*((std::__shared_weak_count **)&v47 + 1));
            }
            if (!v16) {
              goto LABEL_112;
            }
            uint64_t v14 = (uint64_t *)v14[1];
            if (v14 == &v42) {
              goto LABEL_75;
            }
          }
          unint64_t v19 = *(void *)(a2 + 48);
          if (v19 >= *(void *)(a2 + 56))
          {
            uint64_t v20 = sub_1907D5EFC(v3, (uint64_t)&v47);
          }
          else
          {
            sub_1907D6024(v41, *(void *)(a2 + 48), (uint64_t)&v47);
            uint64_t v20 = v19 + 112;
            *(void *)(a2 + 48) = v19 + 112;
          }
          *(void *)(a2 + 48) = v20;
          uint64_t v23 = a1[26];
          if (!v23)
          {
LABEL_47:
            BYTE4(v48) ^= 1u;
            double v27 = fmod((float)(*((float *)&v48 + 2) + 180.0), 360.0);
            if (v27 < 0.0) {
              double v27 = v27 + 360.0;
            }
            float v28 = v27;
            *((float *)&v48 + 2) = v28;
            unint64_t v29 = *(void *)(a2 + 48);
            if (v29 >= *(void *)(a2 + 56))
            {
              uint64_t v30 = sub_1907D5EFC(v3, (uint64_t)&v47);
            }
            else
            {
              sub_1907D6024(v41, *(void *)(a2 + 48), (uint64_t)&v47);
              uint64_t v30 = v29 + 112;
              *(void *)(a2 + 48) = v29 + 112;
            }
            *(void *)(a2 + 48) = v30;
            goto LABEL_53;
          }
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v23 + 104))(v23)) {
            goto LABEL_44;
          }
          int v24 = *(_DWORD *)(v47 + 88);
          if (v24 == 3)
          {
            BOOL v25 = 1;
            goto LABEL_45;
          }
          if (v24) {
LABEL_44:
          }
            BOOL v25 = 0;
          else {
            BOOL v25 = *(unsigned __int8 *)(v47 + 80) != 0;
          }
LABEL_45:
          uint64_t v26 = a1[26];
          if (v26 && (v25 | (*(unsigned int (**)(uint64_t))(*(void *)v26 + 104))(v26) ^ 1) != 1) {
            goto LABEL_53;
          }
          goto LABEL_47;
        }
LABEL_75:
        if (*(void *)(a2 + 48) != *(void *)(a2 + 40))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          float v34 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 134349056;
            *(void *)((char *)&buf + 4) = v4;
            _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter initialized", (uint8_t *)&buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2))
          {
            uint64_t v6 = 1;
            if (!v13) {
              goto LABEL_97;
            }
            goto LABEL_96;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          LODWORD(v47) = 134349056;
          *(void *)((char *)&v47 + 4) = v4;
          int v39 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v39);
          if (v39 != (char *)&buf) {
            free(v39);
          }
          uint64_t v6 = 1;
          goto LABEL_113;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v36 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134349056;
          *(void *)((char *)&buf + 4) = v4;
          _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0))
        {
LABEL_95:
          uint64_t v6 = 0;
          if (!v13)
          {
LABEL_97:
            sub_190770ADC(&v42);
            return v6;
          }
LABEL_96:
          sub_1906BFE48(v13);
          goto LABEL_97;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_109;
        }
LABEL_118:
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_109:
        LODWORD(v47) = 134349056;
        *(void *)((char *)&v47 + 4) = v4;
        double v33 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v33);
        goto LABEL_110;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      int v35 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl(&dword_1906B8000, v35, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned 0 roads", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_95;
      }
      unint64_t v40 = v13;
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_74:
        LODWORD(v47) = 134349056;
        *(void *)((char *)&v47 + 4) = v4;
        double v33 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v33);
LABEL_110:
        if (v33 != (char *)&buf) {
          free(v33);
        }
LABEL_112:
        uint64_t v6 = 0;
LABEL_113:
        int v13 = v40;
        if (!v40) {
          goto LABEL_97;
        }
        goto LABEL_96;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v32 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 134349056;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned false", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_95;
      }
      unint64_t v40 = v13;
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_74;
      }
    }
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_74;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  CFNumberRef v5 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,initialized called on already initialized filter", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    LODWORD(v47) = 134349056;
    *(void *)((char *)&v47 + 4) = v4;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v38);
    if (v38 != (char *)&buf) {
      free(v38);
    }
  }
  return 0;
}

void sub_1906E52D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a5) {
    sub_1906BFE48(a5);
  }
  sub_190770ADC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1906E533C(void *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE003820;
  operator new();
}

void sub_1906E5494(uint64_t a1, void *a2)
{
  v23[2] = *MEMORY[0x1E4F143B8];
  sub_1906C2678(a1, "kCLConnectionMessageNameKey", [a2 identifier]);
  if ([a2 onBehalfOfBundleId]) {
    sub_1906C2678(a1, "kCLConnectionMessageOnBehalfOfKey", [a2 onBehalfOfBundleId]);
  }
  buf[0] = [a2 notifyOnEntry];
  sub_1906C1F50(a1, "kCLConnectionMessageNotifyOnEntryKey", buf);
  buf[0] = [a2 notifyOnExit];
  sub_1906C1F50(a1, "kCLConnectionMessageNotifyOnExitKey", buf);
  buf[0] = [a2 conservativeEntry];
  sub_1906C1F50(a1, "kCLConnectionMessageConservativeEntry", buf);
  buf[0] = [a2 emergency];
  sub_1906C1F50(a1, "kCLConnectionMessageEmergencyKey", buf);
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "deviceId"), "UUIDString");
  if (v4) {
    CFNumberRef v5 = (char *)[v4 UTF8String];
  }
  else {
    CFNumberRef v5 = "";
  }
  sub_1907878DC(a1, "kCLConnectionMessageDeviceIDKey", v5);
  if ([a2 handoffTag]) {
    uint64_t v6 = (char *)objc_msgSend((id)objc_msgSend(a2, "handoffTag"), "UTF8String");
  }
  else {
    uint64_t v6 = "";
  }
  sub_1907878DC(a1, "kCLConnectionMessageHandoffTagKey", v6);
  *(_DWORD *)long long buf = [a2 type];
  sub_1906D5D24(a1, "kCLConnectionMessageRegionTypeKey", buf);
  switch([a2 type])
  {
    case 0u:
      *(_DWORD *)long long buf = [a2 definitionMask];
      sub_1906D5D24(a1, "kCLConnectionMessageRegionDefinitionKey", buf);
      uint64_t v14 = objc_msgSend((id)objc_msgSend(a2, "UUID"), "UUIDString");
      if (v14) {
        sub_1906C2678(a1, "kCLConnectionMessageProximityUUIDKey", v14);
      }
      else {
        sub_1907878DC(a1, "kCLConnectionMessageProximityUUIDKey", "");
      }
      *(_WORD *)long long buf = objc_msgSend((id)objc_msgSend(a2, "major"), "unsignedShortValue");
      sub_190786A00(a1, "kCLConnectionMessageMajorKey", (unsigned __int16 *)buf);
      *(_WORD *)long long buf = objc_msgSend((id)objc_msgSend(a2, "minor"), "unsignedShortValue");
      sub_190786A00(a1, "kCLConnectionMessageMinorKey", (unsigned __int16 *)buf);
      buf[0] = [a2 notifyEntryStateOnDisplay];
      int v13 = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
      goto LABEL_24;
    case 1u:
    case 3u:
      [a2 center];
      *(void *)long long buf = v7;
      v23[0] = v8;
      sub_1906E0BE8(a1, "kCLConnectionMessageLatitudeKey", buf);
      [a2 center];
      *(void *)long long buf = v9;
      v23[0] = v10;
      sub_1906E0BE8(a1, "kCLConnectionMessageLongitudeKey", v23);
      [a2 radius];
      *(void *)long long buf = v11;
      sub_1906E0BE8(a1, "kCLConnectionMessageRadiusKey", buf);
      [a2 desiredAccuracy];
      *(void *)long long buf = v12;
      sub_1906E0BE8(a1, "kCLConnectionMessageDesiredAccuracyKey", buf);
      *(_DWORD *)long long buf = [a2 referenceFrame];
      sub_1906D5D24(a1, "kCLConnectionMessageReferenceFrameKey", buf);
      buf[0] = [a2 allowMonitoringWhileNearby];
      sub_1906C1F50(a1, "kCLConnectionMessageMonitoringNearby", buf);
      buf[0] = [a2 isLowPower];
      int v13 = "kCLConnectionMessageLowPowerFenceKey";
      goto LABEL_24;
    case 2u:
      uint64_t v15 = (void *)[a2 vertices];
      int v21 = [v15 count];
      uint64_t v20 = 0;
      uint64_t v16 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v15 requiringSecureCoding:1 error:&v20];
      if (v20)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
        }
        long long v17 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          LOWORD(v23[0]) = 2082;
          *(void *)((char *)v23 + 2) = "";
          _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Unable to encode vertices for polygonal region\"}", buf, 0x12u);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
          }
        }
        long long v18 = qword_1EB2713E0;
        if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
        {
          *(_DWORD *)long long buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          LOWORD(v23[0]) = 2082;
          *(void *)((char *)v23 + 2) = "";
          _os_signpost_emit_with_name_impl(&dword_1906B8000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to encode vertices for polygonal region", "{\"msg%{public}.0s\":\"Unable to encode vertices for polygonal region\"}", buf, 0x12u);
        }
      }
      else
      {
        uint64_t v19 = v16;
        sub_1906D5D24(a1, "kCLConnectionMessagePolygonalVerticesCountKey", &v21);
        sub_19078692C(a1, "kCLConnectionMessagePolygonalVerticesKey", v19);
        *(_DWORD *)long long buf = [a2 referenceFrame];
        sub_1906D5D24(a1, "kCLConnectionMessageReferenceFrameKey", buf);
        buf[0] = [a2 allowMonitoringWhileNearby];
        int v13 = "kCLConnectionMessageMonitoringNearby";
LABEL_24:
        sub_1906C1F50(a1, v13, buf);
      }
      return;
    default:
      return;
  }
}

void sub_1906E59CC(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);

  free(a1);
}

void sub_1906E5A04(void *a1, int a2, void *a3, int a4, double a5, double a6, double a7, double a8)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
  }
  int v13 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
  {
    [a1 latitude];
    uint64_t v31 = v14;
    [a1 longitude];
    uint64_t v30 = v15;
    [a1 course];
    uint64_t v17 = v16;
    [a1 speed];
    uint64_t v19 = v18;
    [a1 altitude];
    uint64_t v21 = v20;
    [a1 horizontalAccuracy];
    uint64_t v23 = v22;
    [a1 courseAccuracy];
    uint64_t v25 = v24;
    [a1 speedAccuracy];
    uint64_t v27 = v26;
    [a1 altitudeAccuracy];
    *(_DWORD *)long long buf = 134353667;
    double v36 = a5;
    __int16 v37 = 2050;
    double v38 = a6;
    __int16 v39 = 2050;
    double v40 = a7;
    __int16 v41 = 2049;
    uint64_t v42 = v31;
    __int16 v43 = 2049;
    uint64_t v44 = v30;
    __int16 v45 = 2050;
    uint64_t v46 = v17;
    __int16 v47 = 2050;
    uint64_t v48 = v19;
    __int16 v49 = 2050;
    uint64_t v50 = v21;
    __int16 v51 = 2050;
    uint64_t v52 = v23;
    __int16 v53 = 2050;
    uint64_t v54 = v25;
    __int16 v55 = 2050;
    uint64_t v56 = v27;
    __int16 v57 = 2050;
    uint64_t v58 = v28;
    __int16 v59 = 1026;
    int v60 = [a1 locType];
    __int16 v61 = 2050;
    double v62 = a8;
    __int16 v63 = 1026;
    int v64 = a2;
    __int16 v65 = 2082;
    uint64_t v66 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
    __int16 v67 = 1026;
    int v68 = a4;
    __int16 v69 = 1026;
    int v70 = [a1 reconstructionType];
    __int16 v71 = 1026;
    int v72 = [a1 referenceFrame];
    _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEBUG, "CLTSP,LI,output,time,%{public}.4lf,start,%{public}.4lf,end,%{public}.4lf,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,speed,%{public}.2lf,alt,%{public}.2lf,hunc,%{public}.2lf,cunc,%{public}.2lf,sunc,%{public}.2lf,vunc,%{public}.2lf,type,%{public}d,projection,%{public}.5lf,count,%{public}d,id,%{public}s,mode,%{public}d,reconstructionType,%{public}d,refFrame,%{public}d", buf, 0xACu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
    }
    [a1 latitude];
    [a1 longitude];
    [a1 course];
    [a1 speed];
    [a1 altitude];
    [a1 horizontalAccuracy];
    [a1 courseAccuracy];
    [a1 speedAccuracy];
    [a1 altitudeAccuracy];
    [a1 locType];
    objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
    [a1 reconstructionType];
    [a1 referenceFrame];
    unint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void printOutputLogLine(CLTripSegmentLocation *, CFAbsoluteTime, CFAbsoluteTime, CFAbsoluteTime, double, int, NSUUID * _Nonnull, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
}

void sub_1906E5ECC(int a1, NSObject **cf)
{
  CFRetain(cf);
  unsigned __int16 v3 = cf[39];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1906DD268;
  block[3] = &unk_1E5696EA0;
  block[4] = cf;
  dispatch_async(v3, block);
}

uint64_t CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations_0(uint64_t a1, int a2, int a3, int a4, double a5)
{
  double v14 = a5;
  uint64_t v9 = *(pthread_mutex_t **)(a1 + 240);
  v12[3] = v9;
  pthread_mutex_lock(v9);
  __int16 v13 = 257;
  if (*(unsigned char *)(a1 + 392))
  {
    entr_act_modify();
  }
  else
  {
    entr_act_begin();
    *(unsigned char *)(a1 + 392) |= 1u;
  }
  entr_act_set();
  entr_act_set();
  sub_1906D5844(v12);
  LOBYTE(v11) = 1;
  sub_1906C1F50((uint64_t)v12, "kCLConnectionMessageSubscribeKey", &v11);
  int v11 = a2;
  sub_1906D5D24((uint64_t)v12, "kCLConnectionMessageDesiredAccuracyKey", &v11);
  sub_1906E0BE8((uint64_t)v12, "kCLConnectionMessageDistanceFilterKey", &v14);
  LOBYTE(v11) = a3 != 0;
  sub_1906C1F50((uint64_t)v12, "kCLConnectionMessageDynamicAccuracyReductionKey", &v11);
  LOBYTE(v11) = a4 != 0;
  sub_1906C1F50((uint64_t)v12, "kCLConnectionMessageAlteredAccessoryLocationsKey", &v11);
  sub_1906D5A24(a1, "kCLConnectionMessageLocation", (uint64_t)v12);
  sub_1906BFEBC(v12);
  return pthread_mutex_unlock(v9);
}

void sub_1906E60F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906BFEBC((uint64_t *)va);
  sub_1906EB9DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906E612C()
{
  qword_1EB271440 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB271440 = result;
  return result;
}

void sub_1906E6160(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v2 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v21 = 0;
    __int16 v22 = 2082;
    uint64_t v23 = "";
    __int16 v24 = 2050;
    uint64_t v25 = (const char *)a1;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client about to be destroyed\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  if (!*(unsigned char *)(a1 + 225))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    double v14 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "client->fInvalidated";
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
    }
    uint64_t v15 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "client->fInvalidated";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLClient needs to be invalidated first before destroying.", "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
    }
    uint64_t v16 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "client->fInvalidated";
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_46:
    abort_report_np();
    __break(1u);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 160));

  *(void *)(a1 + 232) = 0;
  unsigned __int16 v3 = *(void **)(a1 + 384);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 384) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 360);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 360) = 0;
  }
  CFNumberRef v5 = *(const void **)(a1 + 368);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 368) = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 312);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 312) = 0;
  }
  if (*(void *)(a1 + 264))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v17 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "!client->fContext.info";
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
    }
    uint64_t v18 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "!client->fContext.info";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "client->fContext should be NULL", "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
    }
    uint64_t v19 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v21 = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      uint64_t v27 = "!client->fContext.info";
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_46;
  }
  uint64_t v7 = *(const void **)(a1 + 344);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 352);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 352) = 0;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 328);
  if (v9)
  {
    if (v9[2])
    {
      uint64_t v11 = *v9;
      uint64_t v10 = (uint64_t *)v9[1];
      uint64_t v12 = *v10;
      *(void *)(v12 + 8) = *(void *)(*v9 + 8);
      **(void **)(v11 + 8) = v12;
      void v9[2] = 0;
      if (v10 != v9)
      {
        do
        {
          __int16 v13 = (uint64_t *)v10[1];
          operator delete(v10);
          uint64_t v10 = v13;
        }
        while (v13 != v9);
      }
    }
    MEMORY[0x192FCEAD0](v9, 0x1020C4062D53EE8);
  }
}

uint64_t sub_1906E678C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalGetAuthorizationStatus", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    double v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetAuthorizationStatus\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getAuthorizationStatus:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1906E68E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void *sub_1906E68FC(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = *(unsigned char **)(a1 + 384);
  if (v6)
  {
    int v7 = *v6;
    if (*v6)
    {
      int v8 = 0;
      int v9 = 0;
      os_activity_scope_state_s v10 = v6 + 1;
      do
      {
        v9 ^= v7 << (v8 & 0x18);
        int v11 = *v10++;
        int v7 = v11;
        v8 += 8;
      }
      while (v11);
    }
  }
  entr_act_modify();
  sub_1906D5844(v14);
  char v13 = 1;
  sub_1906C1F50((uint64_t)v14, "kCLConnectionMessageSubscribeKey", &v13);
  if (a2) {
    sub_1906E0BE8((uint64_t)v14, "kCLConnectionMessageSLCDistanceKey", a2);
  }
  if (a3) {
    sub_1906D5D24((uint64_t)v14, "kCLConnectionMessageSLCPowerBudgetKey", a3);
  }
  sub_1906D5A24(a1, "kCLConnectionMessageSignificantLocationChange", (uint64_t)v14);
  return sub_1906BFEBC(v14);
}

void sub_1906E69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906E6A10(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = objc_msgSend(a1, "initWithGEOCoordinate:", *(double *)(a3 + 4), *(double *)(a3 + 12));
  CFNumberRef v5 = v4;
  if (v4)
  {
    [v4 setTimestamp:*(double *)(a3 + 76)];
    [v5 setAltitude:(int)*(double *)(a3 + 28)];
    [v5 setHorizontalAccuracy:*(double *)(a3 + 20)];
    [v5 setVerticalAccuracy:*(double *)(a3 + 36)];
    int v6 = *(_DWORD *)(a3 + 132);
    if (v6 == 2) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = v6 == 1;
    }
    [v5 setReferenceFrame:v7];
    if (*(double *)(a3 + 44) > -1.0) {
      objc_msgSend(v5, "setSpeed:");
    }
    double v8 = *(double *)(a3 + 60);
    if (v8 < 360.0 && v8 >= 0.0) {
      objc_msgSend(v5, "setCourse:");
    }
  }
  return v5;
}

void sub_1906E6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E7148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v16);
  _Unwind_Resume(a1);
}

void sub_1906E7668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1906BFE48(a17);
  }
  if (v17) {
    sub_1906BFE48(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1906E890C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  objc_sync_exit(v21);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1906E8AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906E8C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906E8E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906E8FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906E9050(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906E9280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1906E9450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1906E97F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906EAAEC()
{
}

void sub_1906EAAFC(void *a1, int a2)
{
  if (a2) {
    sub_1906F4064(a1);
  }
  JUMPOUT(0x1906EABB8);
}

void sub_1906EAB0C()
{
}

void sub_1906EAB14()
{
}

void sub_1906EAB1C()
{
}

void sub_1906EAB34()
{
}

void sub_1906EB2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1906EB588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

CFStringRef sub_1906EB704(CFStringRef theString)
{
  if (qword_1E929FFC0)
  {
    CFRelease((CFTypeRef)qword_1E929FFC0);
    qword_1E929FFC0 = 0;
  }
  CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
  qword_1E929FFC0 = (uint64_t)result;
  return result;
}

CFStringRef sub_1906EB750(CFStringRef theString)
{
  if (qword_1E929FFC8)
  {
    CFRelease((CFTypeRef)qword_1E929FFC8);
    qword_1E929FFC8 = 0;
  }
  CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
  qword_1E929FFC8 = (uint64_t)result;
  return result;
}

uint64_t CLClientGetTypeID()
{
  if (qword_1EB271448 != -1) {
    dispatch_once_f(&qword_1EB271448, 0, (dispatch_function_t)sub_1906E612C);
  }
  return qword_1EB271440;
}

void sub_1906EB7EC(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  unsigned __int16 v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_INFO, "received client will resign active notification", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    __int16 v7 = 0;
    CFNumberRef v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLClientHandleWillResignActiveNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  CFRetain(a2);
  uint64_t v4 = a2[39];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1906EBDC0;
  block[3] = &unk_1E5696EA0;
  block[4] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_1906EB9DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17))
  {
    if (*(unsigned char *)(a1 + 16)) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    }
    else {
      (*(void (**)(void))(**(void **)a1 + 24))();
    }
    *(unsigned char *)(a1 + 17) = 0;
  }
  return a1;
}

uint64_t CLClientCreateWithBundleIdentifierAndPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  __int16 v7 = _os_activity_create(&dword_1906B8000, "CL: CLClientCreateWithBundleIdentifierAndPath", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &v12);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  double v8 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2082;
    uint64_t v18 = "activity";
    __int16 v19 = 2114;
    uint64_t v20 = a4;
    __int16 v21 = 2114;
    uint64_t v22 = a5;
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientCreateWithBundleIdentifierAndPath\", \"event\":%{public, location:escape_only}s, \"effectiveBundleIdentifier\":%{public, location:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  id v9 = (id)[objc_alloc(MEMORY[0x1E4F73048]) initWithCurrentRunLoopAndIdentifier:@"CLClient-runloop"];
  uint64_t v10 = CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo();
  os_activity_scope_leave(&v12);
  return v10;
}

void sub_1906EBBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLClientCreateWithBundleIdentifierAndPathOnSilo()
{
  return CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo();
}

void sub_1906EBC0C(uint64_t a1)
{
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = sub_1906EBC8C;
  handler[3] = &unk_1E5696BC8;
  handler[4] = *(void *)(a1 + 32);
  xpc_set_event_stream_handler("com.apple.locationd-events", MEMORY[0x1E4F14428], handler);
}

void sub_1906EBC8C(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v2 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) UTF8String];
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 2082;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client woken up by Core Location\", \"name\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

CFStringRef sub_1906EBD78(CFStringRef result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFAllocatorRef v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, @"<CLClient %p [%p]>", v1, v2);
  }
  return result;
}

uint64_t sub_1906EBDC0(uint64_t a1)
{
  CFAllocatorRef v2 = *(pthread_mutex_t **)(*(void *)(a1 + 32) + 240);
  pthread_mutex_lock(v2);
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  v3[18] = 0;
  CFRelease(v3);
  return pthread_mutex_unlock(v2);
}

void sub_1906EBE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906EBE30(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  v8[1] = v4;
  pthread_mutex_lock(v4);
  __int16 v9 = 257;
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  int v6 = *(const void **)(a1 + 344);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 344) = 0;
  }
  *(void *)(a1 + 344) = Copy;
  pthread_mutex_unlock(v4);
  sub_1906D5844(v8);
  sub_1906C2678((uint64_t)v8, "kCLConnectionMessagePurposeKey", (uint64_t)a2);
  sub_1906D5A24(a1, "kCLConnectionMessagePurpose", (uint64_t)v8);
  return sub_1906BFEBC(v8);
}

void sub_1906EBEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1906EBF14(void *a1)
{
  CFTypeRef v1 = (CFTypeRef)a1[44];
  if (!v1)
  {
    if (a1[45]) {
      return (CFTypeRef)a1[43];
    }
    CFStringRef v4 = (const __CFString *)a1[46];
    if (v4)
    {
      CFTypeRef v1 = sub_190717438(v4, @"NSLocationUsageDescription");
      if (!v1) {
        return (CFTypeRef)a1[43];
      }
    }
    else
    {
      MainBundle = CFBundleGetMainBundle();
      if (!MainBundle) {
        return (CFTypeRef)a1[43];
      }
      CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(MainBundle, @"NSLocationUsageDescription");
      if (!ValueForInfoDictionaryKey) {
        return (CFTypeRef)a1[43];
      }
      CFTypeRef v1 = ValueForInfoDictionaryKey;
      CFRetain(ValueForInfoDictionaryKey);
    }
    CFTypeID v7 = CFGetTypeID(v1);
    if (v7 == CFStringGetTypeID())
    {
      a1[44] = v1;
      return v1;
    }
    CFRelease(v1);
    return (CFTypeRef)a1[43];
  }
  return v1;
}

uint64_t sub_1906EBFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v8 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageHandoffTagKey"];
  [v8 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageUUIDKey"];
  uint64_t v9 = *(void *)(a1 + 232);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1906EC0A8;
  v11[3] = &unk_1E5696C90;
  v11[4] = v9;
  v11[5] = a4;
  return sub_1906F45D8(a1, "kCLConnectionMessageChangeFencesStateMatchingHandoffTags", (uint64_t)v8, 0, (uint64_t)v11);
}

uint64_t sub_1906EC0A8(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 40);
  if (*a2)
  {
    if (!v4) {
      return result;
    }
    __int16 v5 = (NSSet *)[MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
    uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v3, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1906EC230;
    v11[3] = &unk_1E5696C68;
    CFTypeID v7 = *(void **)(v2 + 32);
    uint64_t v8 = *(void *)(v2 + 40);
    v11[4] = v6;
    v11[5] = v8;
    uint64_t v9 = v11;
    uint64_t v10 = v7;
  }
  else
  {
    if (!v4) {
      return result;
    }
    uint64_t v10 = *(void **)(result + 32);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_1906EC1D0;
    v12[3] = &unk_1E5696C40;
    void v12[4] = v4;
    uint64_t v9 = v12;
  }
  return [v10 async:v9];
}

uint64_t sub_1906EC1D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);

  return v3(v1, v2);
}

uint64_t sub_1906EC230(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1906EC244(void *a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (pthread_mutex_t *)a1[30];
  v18[2] = v6;
  pthread_mutex_lock(v6);
  __int16 v19 = 257;
  v18[0] = 0;
  if (a1[45]) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a1[46] != 0;
  }
  if ((dyld_program_sdk_at_least() ^ 1 | v7)) {
    goto LABEL_35;
  }
  if (a2 == 3)
  {
    if (dyld_program_sdk_at_least())
    {
      uint64_t v9 = @"NSLocationAlwaysAndWhenInUseUsageDescription";
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSLocationAlwaysAndWhenInUseUsageDescription"))
      {
        os_activity_scope_state_s v12 = @"NSLocationWhenInUseUsageDescription";
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSLocationWhenInUseUsageDescription"))
        {
          goto LABEL_35;
        }
      }
      else
      {
        os_activity_scope_state_s v12 = @"NSLocationWhenInUseUsageDescription";
      }
      int v11 = @"This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain both “%@” and “%@” keys with string values explaining to the user how the app uses this data";
LABEL_28:
      uint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", v11, v9, v12);
LABEL_29:
      if (!v15) {
        goto LABEL_35;
      }
      NSLog(&stru_1EE006860.isa, v15);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      uint64_t v16 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        int v23 = a2;
        _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "Missing UsageDescription key for requested authorization: %{public}d", buf, 8u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      int v20 = 67240192;
      int v21 = a2;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLClientRequestAuthorization(CLClientRef, CLClientAuthorizationStatus, CLNameValuePair &)", "CoreLocation: %s\n", v14);
LABEL_39:
      if (v14 != (char *)buf) {
        free(v14);
      }
      goto LABEL_35;
    }
    uint64_t v8 = @"NSLocationAlwaysUsageDescription";
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSLocationAlwaysUsageDescription"))
    {
      goto LABEL_35;
    }
LABEL_25:
    uint64_t v15 = [NSString stringWithFormat:@"This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain an “%@” key with a string value explaining to the user how the app uses this data", v8];
    goto LABEL_29;
  }
  if (a2 == 4)
  {
    uint64_t v8 = @"NSLocationWhenInUseUsageDescription";
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSLocationWhenInUseUsageDescription"))
    {
      goto LABEL_35;
    }
    sub_1906C1AF8(a3, "kCLConnectionMessagePurposeIdentifierKey", v18);
    if (v18[0])
    {
      uint64_t v9 = @"NSLocationAuthorizationPurposeDescriptionDictionary";
      uint64_t v10 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"NSLocationAuthorizationPurposeDescriptionDictionary");
      if (v10 && [v10 objectForKey:v18[0]]) {
        goto LABEL_35;
      }
      int v11 = @"This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain an “%@” key with a dictionary containing usage descriptions, and purposeKey “%@” must be present in it explaining to the user how the app uses this data";
      os_activity_scope_state_s v12 = (__CFString *)v18[0];
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  char v13 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v23 = a2;
    _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "Invalid requested authorization: %{public}d", buf, 8u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    int v20 = 67240192;
    int v21 = a2;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void CLClientRequestAuthorization(CLClientRef, CLClientAuthorizationStatus, CLNameValuePair &)", "CoreLocation: %s\n", v14);
    goto LABEL_39;
  }
LABEL_35:
  *(_DWORD *)long long buf = a2;
  sub_1906D5D24(a3, "kCLConnectionMessageStatusKey", buf);
  sub_1906D5A24((uint64_t)a1, "kCLConnectionMessageRequestAuthorization", a3);
  return pthread_mutex_unlock(v6);
}

void sub_1906EC71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906EC74C(void *a1, uint64_t a2, int a3)
{
  sub_1906D5844(v7);
  sub_19078692C((uint64_t)v7, "kCLConnectionMessagePurposeIdentifierKey", a2);
  sub_1906EC244(a1, a3, (uint64_t)v7);
  return sub_1906BFEBC(v7);
}

void sub_1906EC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLClientRequestTemporaryPrecise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v8 setObject:a3 forKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
  [v8 setObject:a2 forKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  uint64_t v9 = *(void *)(a1 + 232);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1906EC8AC;
  v11[3] = &unk_1E5696C90;
  v11[4] = v9;
  v11[5] = a4;
  return sub_1906F45D8(a1, "kCLConnectionMessageRequestTemporaryPrecise", (uint64_t)v8, 0, (uint64_t)v11);
}

uint64_t sub_1906EC8AC(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 40);
  if (*a2)
  {
    if (!v4) {
      return result;
    }
    __int16 v5 = (NSSet *)[MEMORY[0x1E4F1CAD0] setWithObject:objc_opt_class()];
    uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v3, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1906ECA34;
    v11[3] = &unk_1E5696C68;
    BOOL v7 = *(void **)(v2 + 32);
    uint64_t v8 = *(void *)(v2 + 40);
    v11[4] = v6;
    v11[5] = v8;
    uint64_t v9 = v11;
    uint64_t v10 = v7;
  }
  else
  {
    if (!v4) {
      return result;
    }
    uint64_t v10 = *(void **)(result + 32);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_1906EC9D4;
    v12[3] = &unk_1E5696C40;
    void v12[4] = v4;
    uint64_t v9 = v12;
  }
  return [v10 async:v9];
}

uint64_t sub_1906EC9D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);

  return v3(v1, v2);
}

uint64_t sub_1906ECA34(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1906ECA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v4 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"kCLConnectionMessageSubscribeKey"];
  uint64_t v5 = *(void *)(a1 + 232);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1906ECB08;
  v7[3] = &unk_1E5696C90;
  v7[4] = v5;
  v7[5] = a2;
  return sub_1906F45D8(a1, "kCLConnectionMessageLocationPush", (uint64_t)v4, 0, (uint64_t)v7);
}

uint64_t sub_1906ECB08(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 40);
  if (*a2)
  {
    if (!v4) {
      return result;
    }
    uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v6 = objc_opt_class();
    BOOL v7 = (NSSet *)objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
    CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v7);
    uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageErrorKey"];
    uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessagePushTokenKey"];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1906ECCC4;
    v15[3] = &unk_1E5696CB8;
    int v11 = *(void **)(v2 + 32);
    uint64_t v12 = *(void *)(v2 + 40);
    v15[5] = v9;
    v15[6] = v12;
    void v15[4] = v10;
    char v13 = v15;
    int v14 = v11;
  }
  else
  {
    if (!v4) {
      return result;
    }
    int v14 = *(void **)(result + 32);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    _OWORD v16[2] = sub_1906ECC60;
    v16[3] = &unk_1E5696C40;
    v16[4] = v4;
    char v13 = v16;
  }
  return [v14 async:v13];
}

uint64_t sub_1906ECC60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906ECCC4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void *sub_1906ECCDC(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 0;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessageLocationPush", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906ECD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientSetCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  *(void *)(a1 + 248) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t CLClientIsMasquerading(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

BOOL CLClientIsValid(uint64_t a1)
{
  return *(void *)(a1 + 320) != 0;
}

uint64_t CLClientIsLocationServicesAvailable()
{
  return 1;
}

uint64_t CLClientIsLocationServicesEnabled()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _os_activity_create(&dword_1906B8000, "CL: CLClientIsLocationServicesEnabled", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v0, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v8 = 0;
    *(_WORD *)&v8[4] = 2082;
    *(void *)&v8[6] = "";
    __int16 v9 = 2082;
    uint64_t v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsLocationServicesEnabled\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (pthread_main_np() == 1 && sub_1906D575C())
  {
    if (qword_1EB271458 != -1) {
      dispatch_once(&qword_1EB271458, &unk_1EE005580);
    }
    uint64_t v2 = qword_1EB271450;
    if (os_log_type_enabled((os_log_t)qword_1EB271450, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v8 = "__delegate_identifier__:Performance Diagnostics__:::____message__:";
    }
  }
  if (!sub_1907FF488())
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    char v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#Warning CLInternalGetLocationServicesEnabled failed: could not reach daemon", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "Boolean CLClientIsLocationServicesEnabled(CLClientRef)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  os_activity_scope_leave(&state);
  return 0;
}

void sub_1906ED0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

os_log_t sub_1906ED0DC()
{
  os_log_t result = os_log_create("com.apple.runtime-issues", "CoreLocation");
  qword_1EB271450 = (uint64_t)result;
  return result;
}

uint64_t CLClientIsAuthorizationPromptMapDisplayEnabled()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _os_activity_create(&dword_1906B8000, "CL: CLClientIsAuthorizationPromptMapDisplayEnabled", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v0, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsAuthorizationPromptMapDisplayEnabled\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (!sub_1907FF4C8())
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "#Warning CLInternalGetAuthorizationPromptMapDisplayEnabled failed: could not reach daemon", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "Boolean CLClientIsAuthorizationPromptMapDisplayEnabled()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  os_activity_scope_leave(&state);
  return 0;
}

void sub_1906ED374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

uint64_t sub_1906ED390(uint64_t a1, unsigned int a2)
{
  if (a2 > 3) {
    return 0;
  }
  int v2 = dword_190882000[a2];
  sub_1906D54D4();
  return (sub_190794774() >> v2) & 1;
}

uint64_t sub_1906ED3DC()
{
  uint64_t result = CLClientIsLocationServicesEnabled();
  if (result)
  {
    sub_1906D54D4();
    return (sub_190794774() >> 8) & 1;
  }
  return result;
}

uint64_t CLClientIsHeadingAvailable()
{
  char v0 = sub_1906C2708();
  uint64_t v1 = v0 & 1;
  if (v0) {
    sub_1906D54D4();
  }
  return v1;
}

uint64_t CLClientShutdownDaemon()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  char v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v4 = "CLClientShutdownDaemon";
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "CLClient is deprecated. Will be obsolete soon. (%{public}s)", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientShutdownDaemon(CLClientRef)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return sub_1907FFE2C();
}

uint64_t CLClientLog(uint64_t a1, const char *a2)
{
  return CLClientLogDump(a1, a2);
}

uint64_t CLClientLogDump(uint64_t a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  char v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    __int16 v9 = "CLClientLogDump";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_FAULT, "CLClient is deprecated. Will be obsolete soon. (%{public}s)", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientLogDump(CLClientRef, const char *, Boolean)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (!a2) {
    return sub_1907FFE8C();
  }
  CFStringRef v4 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  uint64_t v5 = sub_1907FFE8C();
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

CLConnectionMessage *CLClientGetClientDictionary(uint64_t a1)
{
  int v2 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v2);
  if (*(unsigned char *)(a1 + 225))
  {
    CFDictionaryRef DictionaryOfClasses = 0;
  }
  else
  {
    CFStringRef v4 = (std::__shared_weak_count *)operator new(0x70uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005260;
    sub_1906D5C70(&__p, "kCLConnectionMessageCurrentClientDictionary");
    MEMORY[0x192FCE840](&v4[1], &__p, 0);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (*(void *)(a1 + 320))
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      CLConnectionClient::sendMessageSync();
      CFDictionaryRef DictionaryOfClasses = (CLConnectionMessage *)__p;
      uint64_t v5 = v11;
      __p = 0;
      uint64_t v11 = 0;
      if (v4) {
        sub_1906BFE48(v4);
      }
      if (DictionaryOfClasses)
      {
        uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v7 = objc_opt_class();
        __int16 v8 = (NSSet *)objc_msgSend(v6, "setWithObjects:", v7, objc_opt_class(), 0, &v4[1]);
        CFDictionaryRef DictionaryOfClasses = (CLConnectionMessage *)CLConnectionMessage::getDictionaryOfClasses(DictionaryOfClasses, v8);
      }
      if (v5) {
        sub_1906BFE48(v5);
      }
    }
    else
    {
      CFDictionaryRef DictionaryOfClasses = 0;
    }
    sub_1906BFE48(v4);
  }
  pthread_mutex_unlock(v2);
  return DictionaryOfClasses;
}

void sub_1906ED974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a12) {
    sub_1906BFE48(a12);
  }
  sub_1906BFE48(v21);
  sub_1906EB9DC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrievePrecisionPermission(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_1907FF828(*(void *)(a1 + 360), *(void *)(a1 + 368), a2);
  }
  else {
    return 0;
  }
}

uint64_t CLClientRetrieveAuthorizationStatus(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_1906E678C(*(void *)(a1 + 360), *(void *)(a1 + 368), a2);
  }
  else {
    return 0;
  }
}

uint64_t CLClientRetrieveIncidentalUseMode(uint64_t a1, uint64_t a2)
{
  return sub_1907FF998(*(void *)(a1 + 360), *(void *)(a1 + 368), a2);
}

uint64_t CLClientRetrieveAuthorizationStatusForIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (!(a1 | a2))
  {
    a1 = qword_1E929FFC0;
    a2 = qword_1E929FFC8;
  }
  return sub_1906E678C(a1, a2, a3);
}

uint64_t CLClientStartLocationUpdates(uint64_t a1, int a2, double a3)
{
  return CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations_0(a1, a2, 0, 0, a3);
}

uint64_t CLClientStopLocationUpdates_0(uint64_t a1)
{
  int v2 = *(pthread_mutex_t **)(a1 + 240);
  v5[3] = v2;
  pthread_mutex_lock(v2);
  __int16 v6 = 257;
  if (*(unsigned char *)(a1 + 392))
  {
    entr_act_end();
    *(unsigned char *)(a1 + 392) &= ~1u;
  }
  sub_1906D5844(v5);
  char v4 = 0;
  sub_1906C1F50((uint64_t)v5, "kCLConnectionMessageSubscribeKey", &v4);
  sub_1906D5A24(a1, "kCLConnectionMessageLocation", (uint64_t)v5);
  sub_1906BFEBC(v5);
  return pthread_mutex_unlock(v2);
}

void sub_1906EDB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906EDB54(uint64_t a1, int a2)
{
  sub_1906D5844(v6);
  int v5 = a2;
  sub_1906D5D24((uint64_t)v6, "kCLConnectionMessageEnabledKey", &v5);
  sub_1906D5A24(a1, "kCLConnectionMessageIsActuallyAWatchKitExtension", (uint64_t)v6);
  return sub_1906BFEBC(v6);
}

void sub_1906EDBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientSetProxyForRemoteClient(uint64_t a1, int a2)
{
  sub_1906D5844(v6);
  int v5 = a2;
  sub_1906D5D24((uint64_t)v6, "kCLConnectionMessageEnabledKey", &v5);
  sub_1906D5A24(a1, "kCLConnectionMessageProxyForRemoteClient", (uint64_t)v6);
  return sub_1906BFEBC(v6);
}

void sub_1906EDC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientStopHeadingUpdates(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 392) & 2) != 0)
  {
    entr_act_end();
    *(unsigned char *)(a1 + 392) &= ~2u;
  }
  if (!*(unsigned char *)(a1 + 24)) {
    CLClientShowHeadingCalibration(a1, 0);
  }
  *(unsigned char *)(a1 + 24) = 0;
  sub_1906D5844(v9);
  char v8 = 0;
  sub_1906C1F50((uint64_t)v9, "kCLConnectionMessageSubscribeKey", &v8);
  sub_1906D5A24(a1, "kCLConnectionMessageHeading", (uint64_t)v9);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 96) = _Q0;
  return sub_1906BFEBC(v9);
}

void sub_1906EDD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrieveLocation(uint64_t a1, uint64_t a2)
{
  return CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(a1, 0, 0, a2);
}

void *sub_1906EDD38(uint64_t a1)
{
  int v2 = *(unsigned char **)(a1 + 384);
  if (v2)
  {
    int v3 = *v2;
    if (*v2)
    {
      int v4 = 0;
      int v5 = 0;
      __int16 v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        int v7 = *v6++;
        int v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_1906D5844(v10);
  char v9 = 0;
  sub_1906C1F50((uint64_t)v10, "kCLConnectionMessageSubscribeKey", &v9);
  sub_1906D5A24(a1, "kCLConnectionMessageSignificantLocationChange", (uint64_t)v10);
  return sub_1906BFEBC(v10);
}

void sub_1906EDDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906EDE08(uint64_t a1, int a2)
{
  int v5 = a2;
  sub_1906D5844(v4);
  sub_1906D5D24((uint64_t)v4, "kCLConnectionMessagePlaceInferenceFidelityPolicyKey", &v5);
  sub_1906D5A24(a1, "kCLConnectionMessagePlaceInference", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906EDE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906EDE84(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 0;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessagePlaceInferenceStopKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessagePlaceInferenceStop", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906EDEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906EDF04(uint64_t a1, const void *a2)
{
  int v4 = *(unsigned char **)(a1 + 384);
  if (v4)
  {
    int v5 = *v4;
    if (*v4)
    {
      int v6 = 0;
      int v7 = 0;
      char v8 = v4 + 1;
      do
      {
        v7 ^= v5 << (v6 & 0x18);
        int v9 = *v8++;
        int v5 = v9;
        v6 += 8;
      }
      while (v9);
    }
  }
  entr_act_modify();
  sub_1906D5844(v12);
  char v11 = 1;
  sub_1906C1F50((uint64_t)v12, "kCLConnectionMessageSubscribeKey", &v11);
  if (a2) {
    sub_1906D5D24((uint64_t)v12, "kCLConnectionMessageSignificantLocationVisitTypeKey", a2);
  }
  sub_1906D5A24(a1, "kCLConnectionMessageSignificantLocationVisit", (uint64_t)v12);
  return sub_1906BFEBC(v12);
}

void sub_1906EDFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906EDFF4(uint64_t a1)
{
  int v2 = *(unsigned char **)(a1 + 384);
  if (v2)
  {
    int v3 = *v2;
    if (*v2)
    {
      int v4 = 0;
      int v5 = 0;
      int v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        int v7 = *v6++;
        int v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_1906D5844(v10);
  char v9 = 0;
  sub_1906C1F50((uint64_t)v10, "kCLConnectionMessageSubscribeKey", &v9);
  sub_1906D5A24(a1, "kCLConnectionMessageSignificantLocationVisit", (uint64_t)v10);
  return sub_1906BFEBC(v10);
}

void sub_1906EE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906EE0C4(uint64_t a1)
{
  int v2 = *(unsigned char **)(a1 + 384);
  if (v2)
  {
    int v3 = *v2;
    if (*v2)
    {
      int v4 = 0;
      int v5 = 0;
      int v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        int v7 = *v6++;
        int v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_1906D5844(v9);
  sub_1906D5A24(a1, "kCLConnectionMessageSignificantLocationVisitState", (uint64_t)v9);
  return sub_1906BFEBC(v9);
}

void sub_1906EE164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906EE178(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = [a2 type];
  uint64_t result = sub_1906ED390(v4, v4);
  if (result)
  {
    sub_1906D5844(v23);
    sub_1906E5494((uint64_t)v23, a2);
    char v22 = 1;
    sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageSubscribeKey", &v22);
    int v6 = *(unsigned char **)(a1 + 384);
    if (v6 && (int v7 = *v6, *v6))
    {
      int v8 = 0;
      int v9 = 0;
      uint64_t v10 = v6 + 1;
      do
      {
        v9 ^= v7 << (v8 & 0x18);
        int v11 = *v10++;
        int v7 = v11;
        v8 += 8;
      }
      while (v11);
    }
    else
    {
      int v9 = 0;
    }
    char v12 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "identifier"), "UTF8String");
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        int v14 = 0;
        uint64_t v15 = v12 + 1;
        do
        {
          v9 ^= v13 << (v14 & 0x18);
          int v16 = *v15++;
          int v13 = v16;
          v14 += 8;
        }
        while (v16);
      }
    }
    __int16 v17 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "onBehalfOfBundleId"), "UTF8String");
    if (v17)
    {
      int v18 = *v17;
      if (*v17)
      {
        int v19 = 0;
        int v20 = v17 + 1;
        do
        {
          v9 ^= v18 << (v19 & 0x18);
          int v21 = *v20++;
          int v18 = v21;
          v19 += 8;
        }
        while (v21);
      }
    }
    entr_act_modify();
    sub_1906D5A24(a1, "kCLConnectionMessageRegionMonitoring", (uint64_t)v23);
    sub_1906BFEBC(v23);
    return 1;
  }
  return result;
}

void sub_1906EE2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906EE30C(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = [a2 type];
  uint64_t result = sub_1906ED390(v4, v4);
  if (result)
  {
    sub_1906D5844(v23);
    sub_1906E5494((uint64_t)v23, a2);
    char v22 = 0;
    sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageSubscribeKey", &v22);
    int v6 = *(unsigned char **)(a1 + 384);
    if (v6 && (int v7 = *v6, *v6))
    {
      int v8 = 0;
      int v9 = 0;
      uint64_t v10 = v6 + 1;
      do
      {
        v9 ^= v7 << (v8 & 0x18);
        int v11 = *v10++;
        int v7 = v11;
        v8 += 8;
      }
      while (v11);
    }
    else
    {
      int v9 = 0;
    }
    char v12 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "identifier"), "UTF8String");
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        int v14 = 0;
        uint64_t v15 = v12 + 1;
        do
        {
          v9 ^= v13 << (v14 & 0x18);
          int v16 = *v15++;
          int v13 = v16;
          v14 += 8;
        }
        while (v16);
      }
    }
    __int16 v17 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "onBehalfOfBundleId"), "UTF8String");
    if (v17)
    {
      int v18 = *v17;
      if (*v17)
      {
        int v19 = 0;
        int v20 = v17 + 1;
        do
        {
          v9 ^= v18 << (v19 & 0x18);
          int v21 = *v20++;
          int v18 = v21;
          v19 += 8;
        }
        while (v21);
      }
    }
    entr_act_modify();
    sub_1906D5A24(a1, "kCLConnectionMessageRegionMonitoring", (uint64_t)v23);
    sub_1906BFEBC(v23);
    return 1;
  }
  return result;
}

void sub_1906EE474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906EE48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  v10[0] = @"kCLConnectionMessageSubscribeKey";
  v11[0] = [NSNumber numberWithBool:a2];
  v10[1] = @"kCLConnectionMessageTranscriptShouldPromptKey";
  v11[1] = [NSNumber numberWithBool:a3];
  uint64_t result = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];
  if (a4)
  {
    uint64_t v8 = *(void *)(a1 + 232);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = sub_1906EE5B0;
    v9[3] = &unk_1E5696CE0;
    v9[4] = v8;
    v9[5] = a4;
    return sub_1906F45D8(a1, "kCLConnectionMessageTranscriptSession", result, 1, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1906EE5B0(uint64_t a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1906EE624;
  v3[3] = &unk_1E5696C40;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 async:v3];
}

uint64_t sub_1906EE624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1906EE634(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  v15[0] = @"kCLConnectionMessageTranscriptFetchRadiusKey";
  v16[0] = objc_msgSend(NSNumber, "numberWithDouble:");
  v15[1] = @"kCLConnectionMessageTranscriptFetchSampleCountKey";
  v16[1] = [NSNumber numberWithInt:a2];
  v15[2] = @"kCLConnectionMessageTranscriptFetchCenterLatitudeKey";
  _OWORD v16[2] = [NSNumber numberWithDouble:a5];
  v15[3] = @"kCLConnectionMessageTranscriptFetchCenterLongitudeKey";
  v16[3] = [NSNumber numberWithDouble:a6];
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:4];
  uint64_t v12 = *(void *)(a1 + 232);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = sub_1906EE798;
  v14[3] = &unk_1E5696C90;
  v14[4] = v12;
  v14[5] = a3;
  return sub_1906F45D8(a1, "kCLConnectionMessageTranscriptFetch", v11, 0, (uint64_t)v14);
}

uint64_t sub_1906EE798(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 40))
  {
    uint64_t v2 = result;
    int v3 = *a2;
    if (*a2)
    {
      uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v5 = objc_opt_class();
      uint64_t v6 = objc_opt_class();
      int v7 = (NSSet *)objc_msgSend(v4, "setWithObjects:", v5, v6, objc_opt_class(), 0);
      CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v7);
      uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageTranscriptFetchLocationsKey"];
      uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_1906EEAC8;
      v17[3] = &unk_1E5696CB8;
      uint64_t v11 = *(void **)(v2 + 32);
      uint64_t v12 = *(void *)(v2 + 40);
      v17[5] = v10;
      v17[6] = v12;
      v17[4] = v9;
      int v13 = v17;
      int v14 = v11;
    }
    else
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      uint64_t v15 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "#transcriptSession reply for fetchTranscriptLocation is nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
        }
        __int16 v19 = 0;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLClientFetchTranscriptLocations(CLClientRef, double, int, CLLocationCoordinate2D, void (^)(NSArray *, NSError *))_block_invoke", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = sub_1906EEA64;
      CFTypeRef v18[3] = &unk_1E5696C40;
      int v14 = *(void **)(v2 + 32);
      v18[4] = *(void *)(v2 + 40);
      int v13 = v18;
    }
    return [v14 async:v13];
  }
  return result;
}

uint64_t sub_1906EEA64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  int v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906EEAC8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1906EEAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  v11[0] = @"kCLConnectionMessageTranscriptFetchSampleCountKey";
  v11[1] = @"kCLConnectionMessagePurposeIdentifierKey";
  v12[0] = objc_msgSend(NSNumber, "numberWithInteger:");
  v12[1] = a2;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:2];
  uint64_t v8 = *(void *)(a1 + 232);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = sub_1906EEBEC;
  v10[3] = &unk_1E5696CE0;
  v10[4] = v8;
  v10[5] = a4;
  return sub_1906F45D8(a1, "kCLConnectionMessageRequestHistoricalLocations", v7, 0, (uint64_t)v10);
}

uint64_t sub_1906EEBEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = (NSSet *)objc_msgSend(v4, "setWithObjects:", v5, v6, objc_opt_class(), 0);
    CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v7);
    uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageTranscriptFetchLocationsKey"];
    uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = sub_1906EEF14;
    CFTypeRef v18[3] = &unk_1E5696CB8;
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    void v18[5] = v10;
    v18[6] = v12;
    v18[4] = v9;
    int v13 = v18;
    int v14 = v11;
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v15 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "#historicalLocations reply for fetchTranscriptLocation is nil", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
      }
      __int16 v20 = 0;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLClientRequestHistoricalLocations(CLClientRef, NSString *, NSInteger, void (^)(NSArray *, NSError *))_block_invoke", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1906EEEB0;
    v19[3] = &unk_1E5696C40;
    int v14 = *(void **)(a1 + 32);
    v19[4] = *(void *)(a1 + 40);
    int v13 = v19;
  }
  return [v14 async:v13];
}

uint64_t sub_1906EEEB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  int v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906EEF14(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1906EEF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1906B8000, "CL: CLClientWillPromptForTranscriptSession", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    int v14 = "activity";
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientWillPromptForTranscriptSession\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = *(void *)(a1 + 232);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1906EF0DC;
  v7[3] = &unk_1E5696C90;
  v7[4] = v6;
  v7[5] = a2;
  sub_1906F45D8(a1, "kCLConnectionMessageWillPromptForTranscriptSession", 0, 0, (uint64_t)v7);
  os_activity_scope_leave(&state);
}

void sub_1906EF0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1906EF0DC(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
      CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v4, v5);
      char v7 = objc_msgSend((id)objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", @"kCLConnectionMessageWillPromptForTranscriptSessionKey"), "BOOLValue");
      uint64_t v8 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_1906EF288;
      void v13[3] = &unk_1E5696D08;
      uint64_t v9 = *(void **)(v3 + 32);
      uint64_t v10 = *(void *)(v3 + 40);
      char v14 = v7;
      v13[4] = v8;
      v13[5] = v10;
      __int16 v11 = v13;
      uint64_t v12 = v9;
    }
    else
    {
      uint64_t v12 = *(void **)(result + 32);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_1906EF224;
      v15[3] = &unk_1E5696C40;
      void v15[4] = v2;
      __int16 v11 = v15;
    }
    return [v12 async:v11];
  }
  return result;
}

uint64_t sub_1906EF224(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906EF288(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_1906EF2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1906B8000, "CL: CLClientIsConsideredInRemoteArea", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    char v14 = "activity";
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsConsideredInRemoteArea\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = *(void *)(a1 + 232);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1906EF450;
  v7[3] = &unk_1E5696C90;
  v7[4] = v6;
  v7[5] = a2;
  sub_1906F45D8(a1, "kCLConnectionMessageIsConsideredInRemoteArea", 0, 0, (uint64_t)v7);
  os_activity_scope_leave(&state);
}

void sub_1906EF438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1906EF450(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    if (*a2)
    {
      Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
      char v5 = objc_msgSend((id)objc_msgSend(Dictionary, "objectForKeyedSubscript:", @"kCLConnectionMessageIsConsideredInRemoteAreaKey"), "BOOLValue");
      uint64_t v6 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
      uint64_t v11 = MEMORY[0x1E4F143A8];
      uint64_t v12 = 3221225472;
      __int16 v13 = sub_1906EF5D0;
      char v14 = &unk_1E5696D08;
      char v7 = *(void **)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 40);
      LOBYTE(v17) = v5;
      uint64_t v15 = v6;
      uint64_t v16 = v8;
      uint64_t v9 = &v11;
      int v10 = v7;
    }
    else
    {
      int v10 = *(void **)(result + 32);
      uint64_t v18 = MEMORY[0x1E4F143A8];
      uint64_t v19 = 3221225472;
      __int16 v20 = sub_1906EF56C;
      uint64_t v21 = &unk_1E5696C40;
      uint64_t v22 = v2;
      uint64_t v9 = &v18;
    }
    return objc_msgSend(v10, "async:", v9, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

uint64_t sub_1906EF56C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906EF5D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_1906EF5E8(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v4 = [a2 type];
  if (sub_1906ED390(v4, v4))
  {
    sub_1906D5844(buf);
    sub_1906E5494((uint64_t)buf, a2);
    char v5 = *(unsigned char **)(a1 + 384);
    if (v5 && (int v6 = *v5, *v5))
    {
      int v7 = 0;
      int v8 = 0;
      uint64_t v9 = v5 + 1;
      do
      {
        v8 ^= v6 << (v7 & 0x18);
        int v10 = *v9++;
        int v6 = v10;
        v7 += 8;
      }
      while (v10);
    }
    else
    {
      int v8 = 0;
    }
    uint64_t v11 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "identifier"), "UTF8String");
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        int v13 = 0;
        char v14 = v11 + 1;
        do
        {
          v8 ^= v12 << (v13 & 0x18);
          int v15 = *v14++;
          int v12 = v15;
          v13 += 8;
        }
        while (v15);
      }
    }
    uint64_t v16 = (unsigned char *)objc_msgSend((id)objc_msgSend(a2, "onBehalfOfBundleId"), "UTF8String");
    if (v16)
    {
      int v17 = *v16;
      if (*v16)
      {
        int v18 = 0;
        uint64_t v19 = v16 + 1;
        do
        {
          v8 ^= v17 << (v18 & 0x18);
          int v20 = *v19++;
          int v17 = v20;
          v18 += 8;
        }
        while (v20);
      }
    }
    entr_act_modify();
    sub_1906D5A24(a1, "kCLConnectionMessageRegionState", (uint64_t)buf);
    sub_1906BFEBC(buf);
    return 1;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v22 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = [a2 type];
    _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_FAULT, "Fence: CLClientRequestRegionState, unsupported fence type, %{private}d", buf, 8u);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    [a2 type];
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientRequestRegionState(CLClientRef, CLRegion *)", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
    return 0;
  }
  return result;
}

void sub_1906EF8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1906EF8E0(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (pthread_mutex_t *)a1[30];
    int v10 = v2;
    pthread_mutex_lock(v2);
    LOWORD(v11) = 257;
    uint64_t v4 = (const void *)a1[45];
    uint64_t v3 = (const void *)a1[46];
    if (v4) {
      CFRetain(v4);
    }
    if (v3) {
      CFRetain(v3);
    }
    pthread_mutex_unlock(v2);
    CFDictionaryRef v5 = (const __CFDictionary *)sub_1907FFECC();
    if (v5)
    {
      sub_1906BFF0C(v9, v5);
      sub_1906D5844(v8);
      sub_1906D5844(v7);
      sub_190785034((uint64_t)v9, "kCLConnectionMessageBeaconRegionKey", v8);
      sub_190785034((uint64_t)v9, "kCLConnectionMessageCircularRegionKey", v7);
      void v9[2] = 0;
      int v10 = 0;
      uint64_t v11 = 0;
      sub_190782A88((uint64_t)v8);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  return 0;
}

void sub_1906EFB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1906BFEBC((uint64_t *)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL CLClientPopulateRegionFromInfo(id *a1, const __CFDictionary *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  sub_1906BFF0C(v70, a2);
  v68[0] = 0;
  v68[1] = 0;
  uint64_t v69 = 0;
  sub_19078431C((uint64_t)v70, "kCLConnectionMessageNameKey", (uint64_t)v68);
  __int16 v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  sub_19078431C((uint64_t)v70, "kCLConnectionMessageOnBehalfOfKey", (uint64_t)&v65);
  if (SHIBYTE(v67) < 0)
  {
    if (v66)
    {
      uint64_t v3 = v65;
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!HIBYTE(v67)) {
    goto LABEL_7;
  }
  uint64_t v3 = &v65;
LABEL_6:
  uint64_t v4 = [NSString stringWithUTF8String:v3];
LABEL_8:
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v64 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v62 = 0;
  sub_19078431C((uint64_t)v70, "kCLConnectionMessageDeviceIDKey", (uint64_t)v63);
  id v5 = objc_alloc(MEMORY[0x1E4F29128]);
  if (v64 >= 0) {
    int v6 = v63;
  }
  else {
    int v6 = (void **)v63[0];
  }
  id v7 = (id)objc_msgSend(v5, "initWithUUIDString:", objc_msgSend(NSString, "stringWithUTF8String:", v6));
  sub_19078431C((uint64_t)v70, "kCLConnectionMessageHandoffTagKey", (uint64_t)__p);
  if (v62 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  uint64_t v9 = [NSString stringWithUTF8String:v8];
  int v60 = 0;
  sub_1906C1070((uint64_t)v70, "kCLConnectionMessageRegionTypeKey", &v60);
  __int16 v59 = 0;
  sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v59 + 1);
  sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v59);
  __int16 v58 = 0;
  sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageConservativeEntry", (BOOL *)&v58 + 1);
  sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageEmergencyKey", (BOOL *)&v58);
  switch(v60)
  {
    case 0:
      LOBYTE(v57) = 0;
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v57);
      *(void *)long long buf = 0;
      *(void *)int v75 = 0;
      *(void *)&v75[8] = 0;
      LOWORD(v54) = 0;
      LOWORD(v53) = 0;
      LODWORD(v71) = 0;
      sub_19078431C((uint64_t)v70, "kCLConnectionMessageProximityUUIDKey", (uint64_t)buf);
      sub_190782CB8((uint64_t)v70, "kCLConnectionMessageMajorKey", &v54);
      sub_190782CB8((uint64_t)v70, "kCLConnectionMessageMinorKey", &v53);
      sub_1906C1070((uint64_t)v70, "kCLConnectionMessageRegionDefinitionKey", &v71);
      if ((~LODWORD(v71) & 7) == 0)
      {
        id v10 = objc_alloc(MEMORY[0x1E4F29128]);
        if (v75[15] >= 0) {
          uint64_t v11 = buf;
        }
        else {
          uint64_t v11 = *(uint8_t **)buf;
        }
        int v12 = objc_msgSend(v10, "initWithUUIDString:", objc_msgSend(NSString, "stringWithUTF8String:", v11));
        uint64_t v13 = [CLBeaconRegion alloc];
        if (v69 >= 0) {
          char v14 = v68;
        }
        else {
          char v14 = (void **)v68[0];
        }
        uint64_t v15 = -[CLBeaconRegion initWithUUID:major:minor:identifier:](v13, "initWithUUID:major:minor:identifier:", v12, (unsigned __int16)v54, (unsigned __int16)v53, [NSString stringWithUTF8String:v14]);
LABEL_78:
        double v38 = (CLBeaconRegion *)v15;
        goto LABEL_79;
      }
      if ((~LODWORD(v71) & 3) == 0)
      {
        id v29 = objc_alloc(MEMORY[0x1E4F29128]);
        if (v75[15] >= 0) {
          uint64_t v30 = buf;
        }
        else {
          uint64_t v30 = *(uint8_t **)buf;
        }
        int v12 = objc_msgSend(v29, "initWithUUIDString:", objc_msgSend(NSString, "stringWithUTF8String:", v30));
        uint64_t v31 = [CLBeaconRegion alloc];
        if (v69 >= 0) {
          uint64_t v32 = v68;
        }
        else {
          uint64_t v32 = (void **)v68[0];
        }
        uint64_t v15 = -[CLBeaconRegion initWithUUID:major:identifier:](v31, "initWithUUID:major:identifier:", v12, (unsigned __int16)v54, [NSString stringWithUTF8String:v32]);
        goto LABEL_78;
      }
      if (LOBYTE(v71))
      {
        id v40 = objc_alloc(MEMORY[0x1E4F29128]);
        if (v75[15] >= 0) {
          __int16 v41 = buf;
        }
        else {
          __int16 v41 = *(uint8_t **)buf;
        }
        int v12 = objc_msgSend(v40, "initWithUUIDString:", objc_msgSend(NSString, "stringWithUTF8String:", v41));
        uint64_t v42 = [CLBeaconRegion alloc];
        if (v69 >= 0) {
          __int16 v43 = v68;
        }
        else {
          __int16 v43 = (void **)v68[0];
        }
        uint64_t v15 = -[CLBeaconRegion initWithUUID:identifier:](v42, "initWithUUID:identifier:", v12, [NSString stringWithUTF8String:v43]);
        goto LABEL_78;
      }
      double v36 = [CLBeaconRegion alloc];
      if (v69 >= 0) {
        __int16 v37 = v68;
      }
      else {
        __int16 v37 = (void **)v68[0];
      }
      double v38 = -[CLBeaconRegion initWithIdentifier:](v36, "initWithIdentifier:", [NSString stringWithUTF8String:v37]);
      int v12 = 0;
LABEL_79:
      [(CLRegion *)v38 setOnBehalfOfBundleId:v4];
      [(CLBeaconRegion *)v38 setNotifyEntryStateOnDisplay:v57];
      [(CLRegion *)v38 setNotifyOnEntry:HIBYTE(v59)];
      [(CLRegion *)v38 setNotifyOnExit:v59];
      [(CLRegion *)v38 setConservativeEntry:HIBYTE(v58)];
      [(CLRegion *)v38 setEmergency:v58];
      *a1 = v38;

      if ((v75[15] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_90;
    case 1:
      LODWORD(v54) = 0;
      sub_1906C1070((uint64_t)v70, "kCLConnectionMessageReferenceFrameKey", &v54);
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageMonitoringNearby", (BOOL *)&v53);
      LOBYTE(v57) = 0;
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageLowPowerFenceKey", (BOOL *)&v57);
      double v71 = 0.0;
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageLatitudeKey", buf);
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageLongitudeKey", v75);
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageRadiusKey", &v71);
      int v20 = [CLCircularRegion alloc];
      uint64_t v21 = *(uint8_t **)buf;
      double v22 = *(double *)v75;
      double v23 = v71;
      uint64_t v24 = v54;
      int v25 = v57;
      __int16 v26 = NSString;
      if (v69 >= 0) {
        uint64_t v27 = v68;
      }
      else {
        uint64_t v27 = (void **)v68[0];
      }
      goto LABEL_37;
    case 2:
      unsigned int v57 = 0;
      BOOL v56 = 0;
      int v55 = 0;
      CFTypeRef v54 = 0;
      sub_1906C1070((uint64_t)v70, "kCLConnectionMessagePolygonalVerticesCountKey", &v55);
      sub_1907865FC((uint64_t)v70, @"kCLConnectionMessagePolygonalVerticesKey", &v54);
      sub_1906C1070((uint64_t)v70, "kCLConnectionMessageReferenceFrameKey", &v57);
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageMonitoringNearby", &v56);
      uint64_t v53 = 0;
      uint64_t v16 = (void *)[MEMORY[0x1E4F28DC0] unarchivedArrayOfObjectsOfClass:objc_opt_class() fromData:v54 error:&v53];
      uint64_t v17 = [v16 count];
      if (v53)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
        }
        int v18 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)int v75 = 2082;
          *(void *)&v75[2] = "";
          *(_WORD *)&v75[10] = 2114;
          *(void *)&v75[12] = v53;
          _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from encoded data\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
          }
        }
        uint64_t v19 = qword_1EB2713E0;
        if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
        {
          *(_DWORD *)long long buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)int v75 = 2082;
          *(void *)&v75[2] = "";
          *(_WORD *)&v75[10] = 2114;
          *(void *)&v75[12] = v53;
          _os_signpost_emit_with_name_impl(&dword_1906B8000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to get vertices from encoded data", "{\"msg%{public}.0s\":\"Unable to get vertices from encoded data\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        goto LABEL_90;
      }
      uint64_t v33 = v17;
      if (v55 == v17)
      {
        if ((v55 - 102) > 0xFFFFFF9D)
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
          }
          uint64_t v44 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67174657;
            *(_DWORD *)&uint8_t buf[4] = v55;
            _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "Copied %{private}d vertices", buf, 8u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
            }
            LODWORD(v71) = 67174657;
            HIDWORD(v71) = v55;
            __int16 v51 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v51);
            if (v51 != (char *)buf) {
              free(v51);
            }
          }
          __int16 v45 = [_CLPolygonalRegion alloc];
          if (v69 >= 0) {
            uint64_t v46 = v68;
          }
          else {
            uint64_t v46 = (void **)v68[0];
          }
          __int16 v47 = -[_CLPolygonalRegion initWithVertices:identifier:](v45, "initWithVertices:identifier:", v16, [NSString stringWithUTF8String:v46]);
          [(CLRegion *)v47 setReferenceFrame:v57];
          [(CLRegion *)v47 setEmergency:v58];
          *a1 = v47;
        }
        else
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
          }
          float v34 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v55;
            _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_FAULT, "Number of vertices received invalid, %{public}d, internal", buf, 8u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
            }
            LODWORD(v71) = 67240192;
            HIDWORD(v71) = v55;
            int v35 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v35);
LABEL_69:
            if (v35 != (char *)buf) {
              free(v35);
            }
          }
        }
      }
      else
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
        }
        __int16 v39 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v55;
          *(_WORD *)int v75 = 2050;
          *(void *)&v75[2] = v33;
          _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
          }
          LODWORD(v71) = 67240448;
          HIDWORD(v71) = v55;
          __int16 v72 = 2050;
          uint64_t v73 = v33;
          int v35 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v35);
          goto LABEL_69;
        }
      }
LABEL_90:
      id v48 = *a1;
      id v49 = *a1;
      if (SHIBYTE(v62) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v65);
      }
      if (SHIBYTE(v69) < 0) {
        operator delete(v68[0]);
      }
      sub_1906BFEBC(v70);
      return v49 != 0;
    case 3:
      LODWORD(v54) = 0;
      sub_1906C1070((uint64_t)v70, "kCLConnectionMessageReferenceFrameKey", &v54);
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageMonitoringNearby", (BOOL *)&v53);
      LOBYTE(v57) = 0;
      sub_1906C1BD4((uint64_t)v70, "kCLConnectionMessageLowPowerFenceKey", (BOOL *)&v57);
      double v71 = 0.0;
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageLatitudeKey", buf);
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageLongitudeKey", v75);
      sub_19078400C((uint64_t)v70, "kCLConnectionMessageRadiusKey", &v71);
      int v20 = [_CLSignificantRegion alloc];
      uint64_t v21 = *(uint8_t **)buf;
      double v22 = *(double *)v75;
      double v23 = v71;
      uint64_t v24 = v54;
      int v25 = v57;
      __int16 v26 = NSString;
      if (v69 >= 0) {
        uint64_t v27 = v68;
      }
      else {
        uint64_t v27 = (void **)v68[0];
      }
LABEL_37:
      uint64_t v28 = [v26 stringWithUTF8String:v27];
      BYTE1(v52) = HIBYTE(v58);
      BYTE2(v52) = v58;
      LOBYTE(v52) = v59;
      *a1 = -[CLCircularRegion initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:](v20, "initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:", v24, 0, v25 != 0, v28, v4, HIBYTE(v59), *(double *)&v21, v22, v23, v52, v7, v9);
      goto LABEL_90;
    default:
      goto LABEL_90;
  }
}

void sub_1906F0A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  sub_1906BFEBC(&a41);
  _Unwind_Resume(a1);
}

uint64_t CLClientGetGroundAltitudeAtLocation()
{
  return sub_190801034();
}

uint64_t CLClientGetError(void *a1, _DWORD *a2)
{
  int v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKey:", @"kCLConnectionMessageErrorKey"), "intValue");
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v3;
  return 1;
}

uint64_t sub_1906F0B80(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  sub_1906BFF0C(v8, theDict);
  if (CLClientPopulateRegionFromInfo(a2, theDict)) {
    uint64_t v6 = sub_1906C1070((uint64_t)v8, "kCLConnectionMessageEventKey", a3);
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1906BFEBC(v8);
  return v6;
}

void sub_1906F0C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906F0C18(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  sub_1906BFF0C(v8, theDict);
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict)) {
      uint64_t v6 = sub_1906C1070((uint64_t)v8, "kCLConnectionMessageStatusKey", a3);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  sub_1906BFEBC(v8);
  return v6;
}

void sub_1906F0CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906F0CBC(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  sub_1906BFF0C(v8, theDict);
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict)) {
      uint64_t v6 = sub_1906C1070((uint64_t)v8, "kCLConnectionMessageErrorKey", a3);
    }
    else {
      uint64_t v6 = 0;
    }
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_1906BFEBC(v8);
  return v6;
}

void sub_1906F0D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1906F0D64(CFDictionaryRef theDict, id *a2, unsigned char *a3, id *a4)
{
  sub_1906BFF0C(v11, theDict);
  BOOL v8 = 0;
  if (a2 && a3 && a4)
  {
    *a3 = 1;
    BOOL v8 = CLClientPopulateRegionFromInfo(a2, theDict);
    sub_1906D5844(v10);
    if (sub_190785034((uint64_t)v11, "kCLConnectionMessageAlternateRegionKey", v10))
    {
      if (v8) {
        BOOL v8 = CLClientPopulateRegionFromInfo(a4, (const __CFDictionary *)v10[1]);
      }
    }
    else
    {
      *a3 = 0;
    }
    sub_1906BFEBC(v10);
  }
  sub_1906BFEBC(v11);
  return v8;
}

void sub_1906F0E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906F0E5C(CFDictionaryRef theDict, void *a2)
{
  sub_1906BFF0C(v4, theDict);
  if (a2) {
    a2 = (void *)sub_19078400C((uint64_t)v4, "kCLConnectionMessageRegionWatchdogSinceLast", a2);
  }
  sub_1906BFEBC(v4);
  return a2;
}

void sub_1906F0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906F0ED0(uint64_t a1, void *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(pthread_mutex_t **)(a1 + 240);
  void v23[3] = v6;
  pthread_mutex_lock(v6);
  __int16 v24 = 257;
  sub_1906D5844(v23);
  sub_1906D54D4();
  if ((sub_190794774() & 0x400000) == 0)
  {
    uint64_t v7 = 0;
    goto LABEL_23;
  }
  if ([a2 count])
  {
    if ((*(unsigned char *)(a1 + 392) & 4) != 0)
    {
      [a2 count];
      entr_act_modify();
      goto LABEL_10;
    }
    [a2 count];
    entr_act_begin();
    char v8 = *(unsigned char *)(a1 + 392) | 4;
    goto LABEL_8;
  }
  if ((*(unsigned char *)(a1 + 392) & 4) != 0)
  {
    entr_act_end();
    char v8 = *(unsigned char *)(a1 + 392) & 0xFB;
LABEL_8:
    *(unsigned char *)(a1 + 392) = v8;
  }
LABEL_10:
  int v16 = a3;
  uint64_t v15 = a1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v9 = [a2 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(a2);
        }
        int v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (![v12 onBehalfOfBundleId])
        {
          sub_1906D5844(v18);
          sub_19078692C((uint64_t)v18, "kCLConnectionMessageIdentifierKey", [v12 identifier]);
          int v17 = [v12 definitionMask];
          sub_1906D5D24((uint64_t)v18, "kCLConnectionMessageRegionDefinitionKey", &v17);
          uint64_t v13 = objc_msgSend((id)objc_msgSend(v12, "UUID"), "UUIDString");
          if (v13) {
            sub_1906C2678((uint64_t)v18, "kCLConnectionMessageProximityUUIDKey", v13);
          }
          else {
            sub_1907878DC((uint64_t)v18, "kCLConnectionMessageProximityUUIDKey", "");
          }
          LOWORD(v17) = objc_msgSend((id)objc_msgSend(v12, "major"), "unsignedShortValue");
          sub_190786A00((uint64_t)v18, "kCLConnectionMessageMajorKey", (unsigned __int16 *)&v17);
          LOWORD(v17) = objc_msgSend((id)objc_msgSend(v12, "minor"), "unsignedShortValue");
          sub_190786A00((uint64_t)v18, "kCLConnectionMessageMinorKey", (unsigned __int16 *)&v17);
          LOBYTE(v17) = [v12 notifyOnEntry];
          sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageNotifyOnEntryKey", &v17);
          LOBYTE(v17) = [v12 notifyOnExit];
          sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageNotifyOnExitKey", &v17);
          LOBYTE(v17) = [v12 notifyEntryStateOnDisplay];
          sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v17);
          LOBYTE(v17) = [v12 conservativeEntry];
          sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageConservativeEntry", &v17);
          LOBYTE(v17) = [v12 emergency];
          sub_1906C1F50((uint64_t)v23, "kCLConnectionMessageEmergencyKey", &v17);
          sub_19078998C((uint64_t)v23, "kCLConnectionMessageRegionsKey", (uint64_t)v18);
          sub_1906BFEBC(v18);
        }
      }
      uint64_t v9 = [a2 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v9);
  }
  LODWORD(v18[0]) = v16;
  sub_1906D5D24((uint64_t)v23, "kCLConnectionMessageSubscribeKey", v18);
  uint64_t v7 = 1;
  sub_1906D5A24(v15, "kCLConnectionMessageRanging", (uint64_t)v23);
LABEL_23:
  sub_1906BFEBC(v23);
  pthread_mutex_unlock(v6);
  return v7;
}

void sub_1906F1288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

BOOL sub_1906F1304(CFDictionaryRef theDict, id *a2, CFTypeRef *a3)
{
  sub_1906BFF0C(v10, theDict);
  *a3 = 0;
  if (!a2) {
    goto LABEL_8;
  }
  if (CLClientPopulateRegionFromInfo(a2, theDict))
  {
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "kCLConnectionMessageBeaconsKey", 0x8000100u);
    *a3 = CFDictionaryGetValue(v10[1], v6);
    CFRelease(v6);
    if (*a3) {
      CFRetain(*a3);
    }
    id v7 = *a2;
  }
  if (*a2) {
    BOOL v8 = *a3 != 0;
  }
  else {
LABEL_8:
  }
    BOOL v8 = 0;
  sub_1906BFEBC(v10);
  return v8;
}

void sub_1906F13D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906F13F0(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  sub_1906BFF0C(v8, theDict);
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict)) {
      uint64_t v6 = sub_1906C1070((uint64_t)v8, "kCLConnectionMessageErrorKey", a3);
    }
    else {
      uint64_t v6 = 0;
    }
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_1906BFEBC(v8);
  return v6;
}

void sub_1906F1484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CLClientGetAuthorizationStatus(const __CFDictionary *a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v5 = 1;
  uint64_t AuthorizationStatusAndCorrectiveCompensation = CLClientGetAuthorizationStatusAndCorrectiveCompensation(a1, a2, &v5, &v6);
  if (AuthorizationStatusAndCorrectiveCompensation && v5)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    int v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is subject to corrective compensation, but hasn't been updated to find out about it yet\"}", buf, 0x12u);
    }
  }
  return AuthorizationStatusAndCorrectiveCompensation;
}

void *CLClientSetMatchInfoEnabled(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageMatchInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F1628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F1650(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageGroundAltitudeEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F16E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F1708(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageFusionInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F1798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F17C0(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageTrackRunInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F1850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F1878(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageAllowsLocationPrompts", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F1908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *CLClientSetShowLocationPrompt(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageShowLocationPrompt", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F19C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void CLClientSetAutomaticPromptingEnabled()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  char v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_INFO, "kCLConnectionMessageAutomaticPromptingEnabled is not supported", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLClientSetAutomaticPromptingEnabled(CLClientRef, Boolean)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void *CLClientUpdateARSessionState(uint64_t a1, uint64_t a2)
{
  sub_1906D5844(v6);
  sub_19078692C((uint64_t)v6, "kCLConnectionMessageARSessionState", a2);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_1906D5A24(a1, "kCLConnectionMessageARSessionState", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v6);
}

void sub_1906F1BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *CLClientUpdateVIOEstimation(uint64_t a1, uint64_t a2)
{
  sub_1906D5844(v6);
  sub_19078692C((uint64_t)v6, "kCLConnectionMessageVIOEstimation", a2);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_1906D5A24(a1, "kCLConnectionMessageVIOEstimation", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v6);
}

void sub_1906F1CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *CLClientUpdateVLLocalizationResult(uint64_t a1, uint64_t a2)
{
  sub_1906D5844(v6);
  sub_19078692C((uint64_t)v6, "kCLConnectionMessageVLLocalizationResult", a2);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_1906D5A24(a1, "kCLConnectionMessageVLLocalizationResult", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v6);
}

void sub_1906F1D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F1D8C(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageActivityTypeKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  *(_DWORD *)(a1 + 20) = a2;
  sub_1906D5A24(a1, "kCLConnectionMessageActivityType", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F1E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F1E50(CFDictionaryRef theDict, unsigned char *a2, unsigned char *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  sub_1906BFF0C(v12, theDict);
  if (!a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    __int16 v8 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "Invalid call to CLClientGetAutopauseState", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    __int16 v11 = 0;
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientGetAutopauseState(CFDictionaryRef, Boolean *, Boolean *)", "CoreLocation: %s\n", v7);
    goto LABEL_23;
  }
  __int16 v10 = 0;
  if (!sub_1906C1BD4((uint64_t)v12, "kCLConnectionMessageAutopauseStatusKey", (BOOL *)&v10 + 1)
    || !sub_1906C1BD4((uint64_t)v12, "kCLConnectionMessageAutopauseOverrideKey", (BOOL *)&v10))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "malformed message: kCLConnectionMessageAutopauseStatus", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
    __int16 v11 = 0;
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "Boolean CLClientGetAutopauseState(CFDictionaryRef, Boolean *, Boolean *)", "CoreLocation: %s\n", v7);
LABEL_23:
    if (v7 != (char *)buf) {
      free(v7);
    }
LABEL_18:
    uint64_t v5 = 0;
    goto LABEL_19;
  }
  *a2 = HIBYTE(v10);
  *a3 = v10;
  uint64_t v5 = 1;
LABEL_19:
  sub_1906BFEBC(v12);
  return v5;
}

void sub_1906F2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1906F219C(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageAllowsBackgroundLocationUpdates", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F222C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F2254(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageShowsBackgroundLocationIndicatorKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageShowsBackgroundLocationIndicator", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F22E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F230C(uint64_t a1, double a2, double a3)
{
  double v11 = a2;
  double v10 = a3;
  entr_act_set();
  entr_act_set();
  sub_1906D5844(v9);
  v6[0] = 1;
  sub_1906C1F50((uint64_t)v9, "kCLConnectionMessageBatchAllowedKey", v6);
  sub_1906E0BE8((uint64_t)v9, "kCLConnectionMessageBatchDistanceKey", &v11);
  sub_1906E0BE8((uint64_t)v9, "kCLConnectionMessageBatchTimeoutKey", &v10);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  id v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageBatch", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F2428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1906F2454(uint64_t a1)
{
  entr_act_set();
  entr_act_set();
  sub_1906D5844(v7);
  v4[0] = 0;
  sub_1906C1F50((uint64_t)v7, "kCLConnectionMessageBatchAllowedKey", v4);
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 240);
  uint64_t v5 = v2;
  pthread_mutex_lock(v2);
  __int16 v6 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageBatch", (uint64_t)v7);
  pthread_mutex_unlock(v2);
  return sub_1906BFEBC(v7);
}

void sub_1906F2510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F2538(uint64_t a1, const __CFDictionary *a2, BOOL *a3, _DWORD *a4)
{
  entr_act_set();
  entr_act_set();
  sub_1906BFF0C(v9, a2);
  uint64_t v7 = 0;
  if (a3 && a4)
  {
    sub_1906C1070((uint64_t)v9, "kCLConnectionMessageErrorKey", a4);
    a4[1] = 0;
    a4[2] = 0;
    *a3 = *a4 == -1;
    uint64_t v7 = 1;
  }
  sub_1906BFEBC(v9);
  return v7;
}

void sub_1906F25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *CLClientSetAllowsMapCorrection(uint64_t a1, int a2)
{
  sub_1906D5844(v9);
  int v6 = a2;
  sub_1906D5D24((uint64_t)v9, "kCLConnectionMessageAllowsMapCorrectionKey", &v6);
  uint64_t v4 = *(pthread_mutex_t **)(a1 + 240);
  uint64_t v7 = v4;
  pthread_mutex_lock(v4);
  __int16 v8 = 257;
  sub_1906D5A24(a1, "kCLConnectionMessageAllowsMapCorrection", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_1906BFEBC(v9);
}

void sub_1906F269C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1906EB9DC((uint64_t)va);
  sub_1906BFEBC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F26C4(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 240);
  v4[3] = v2;
  pthread_mutex_lock(v2);
  __int16 v5 = 257;
  sub_1906D5844(v4);
  sub_1906D5A24(a1, "kCLConnectionMessageRegisterAsLocationClient", (uint64_t)v4);
  sub_1906BFEBC(v4);
  return pthread_mutex_unlock(v2);
}

void sub_1906F2738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1906BFEBC((uint64_t *)va);
  sub_1906EB9DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F275C(CFDictionaryRef theDict, UInt8 *a2)
{
  CFTypeRef cf = 0;
  sub_1906BFF0C(v6, theDict);
  sub_1906C1AF8((uint64_t)v6, "kCLConnectionMessageVehicleSpeedKey", &cf);
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFDataGetTypeID()))
  {
    v8.location = 0;
    v8.length = 32;
    CFDataGetBytes((CFDataRef)cf, v8, a2);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_1906BFEBC(v6);
  return v4;
}

void sub_1906F27F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F2808(CFDictionaryRef theDict, UInt8 *a2)
{
  CFTypeRef cf = 0;
  sub_1906BFF0C(v6, theDict);
  sub_1906C1AF8((uint64_t)v6, "kCLConnectionMessageVehicleHeadingKey", &cf);
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFDataGetTypeID()))
  {
    v8.location = 0;
    v8.length = 16;
    CFDataGetBytes((CFDataRef)cf, v8, a2);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_1906BFEBC(v6);
  return v4;
}

void sub_1906F28A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientStartVehicleSpeedUpdates(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 1;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessageVehicleSpeed", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906F2920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientStopVehicleSpeedUpdates(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 0;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessageVehicleSpeed", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906F29A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientStartVehicleHeadingUpdates(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 1;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessageVehicleHeading", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906F2A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *CLClientStopVehicleHeadingUpdates(uint64_t a1)
{
  sub_1906D5844(v4);
  char v3 = 0;
  sub_1906C1F50((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_1906D5A24(a1, "kCLConnectionMessageVehicleHeading", (uint64_t)v4);
  return sub_1906BFEBC(v4);
}

void sub_1906F2AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1906BFEBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F2ABC(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
      uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v4, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1906F2C48;
      void v11[3] = &unk_1E5696D30;
      uint64_t v7 = *(void **)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 40);
      v11[4] = v6;
      v11[5] = v8;
      __int16 v9 = v11;
      double v10 = v7;
    }
    else
    {
      double v10 = *(void **)(result + 32);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = sub_1906F2BE4;
      void v12[3] = &unk_1E5696C40;
      void v12[4] = v2;
      __int16 v9 = v12;
    }
    return [v10 async:v9];
  }
  return result;
}

uint64_t sub_1906F2BE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906F2C48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1906F2C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v8 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"];
  [v8 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"];
  uint64_t v9 = *(void *)(a1 + 232);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1906F2D48;
  void v11[3] = &unk_1E5696C90;
  v11[4] = v9;
  v11[5] = a4;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationDonateTruthLabelEvent", (uint64_t)v8, 0, (uint64_t)v11);
}

uint64_t sub_1906F2D48(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
      uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v4, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1906F2ED0;
      void v11[3] = &unk_1E5696C68;
      uint64_t v7 = *(void **)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 40);
      v11[4] = v6;
      v11[5] = v8;
      uint64_t v9 = v11;
      double v10 = v7;
    }
    else
    {
      double v10 = *(void **)(result + 32);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = sub_1906F2E70;
      void v12[3] = &unk_1E5696C40;
      void v12[4] = v2;
      uint64_t v9 = v12;
    }
    return [v10 async:v9];
  }
  return result;
}

uint64_t sub_1906F2E70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);

  return v3(v1, v2);
}

uint64_t sub_1906F2ED0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1906F2EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v10 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"];
  [v10 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelStartDateKey"];
  [v10 setObject:a4 forKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelEndDateKey"];
  uint64_t v11 = *(void *)(a1 + 232);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1906F2FDC;
  void v13[3] = &unk_1E5696C90;
  v13[4] = v11;
  v13[5] = a5;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent", (uint64_t)v10, 0, (uint64_t)v13);
}

uint64_t sub_1906F2FDC(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
      uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v4, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1906F3164;
      void v11[3] = &unk_1E5696C68;
      uint64_t v7 = *(void **)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 40);
      v11[4] = v6;
      v11[5] = v8;
      uint64_t v9 = v11;
      double v10 = v7;
    }
    else
    {
      double v10 = *(void **)(result + 32);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = sub_1906F3104;
      void v12[3] = &unk_1E5696C40;
      void v12[4] = v2;
      uint64_t v9 = v12;
    }
    return [v10 async:v9];
  }
  return result;
}

uint64_t sub_1906F3104(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);

  return v3(v1, v2);
}

uint64_t sub_1906F3164(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1906F3178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 232);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1906F31F8;
  v4[3] = &unk_1E5696C90;
  void v4[4] = v2;
  v4[5] = a2;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationExportDatabaseTables", 0, 0, (uint64_t)v4);
}

uint64_t sub_1906F31F8(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = (NSSet *)objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
      CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v4, v7);
      uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageErrorKey"];
      uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationExportDatabaseTablesInfoKey"];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_1906F33B0;
      v15[3] = &unk_1E5696CB8;
      uint64_t v11 = *(void **)(v3 + 32);
      uint64_t v12 = *(void *)(v3 + 40);
      void v15[5] = v10;
      v15[6] = v12;
      void v15[4] = v9;
      uint64_t v13 = v15;
      uint64_t v14 = v11;
    }
    else
    {
      uint64_t v14 = *(void **)(result + 32);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      _OWORD v16[2] = sub_1906F334C;
      v16[3] = &unk_1E5696C40;
      v16[4] = v2;
      uint64_t v13 = v16;
    }
    return [v14 async:v13];
  }
  return result;
}

uint64_t sub_1906F334C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 16);

  return v3(v1, v2, 0);
}

uint64_t sub_1906F33B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1906F33C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 232);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1906F3448;
  v4[3] = &unk_1E5696C90;
  void v4[4] = v2;
  v4[5] = a2;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationExportDataForMigration", 0, 0, (uint64_t)v4);
}

uint64_t sub_1906F3448(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = (NSSet *)objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
      CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v4, v7);
      uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageErrorKey"];
      uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationExportDataForMigrationInfoKey"];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_1906F3600;
      v15[3] = &unk_1E5696CB8;
      uint64_t v11 = *(void **)(v3 + 32);
      uint64_t v12 = *(void *)(v3 + 40);
      void v15[5] = v10;
      v15[6] = v12;
      void v15[4] = v9;
      uint64_t v13 = v15;
      uint64_t v14 = v11;
    }
    else
    {
      uint64_t v14 = *(void **)(result + 32);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      _OWORD v16[2] = sub_1906F359C;
      v16[3] = &unk_1E5696C40;
      v16[4] = v2;
      uint64_t v13 = v16;
    }
    return [v14 async:v13];
  }
  return result;
}

uint64_t sub_1906F359C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 16);

  return v3(v1, v2, 0);
}

uint64_t sub_1906F3600(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1906F3618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 232);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1906F3698;
  v4[3] = &unk_1E5696C90;
  void v4[4] = v2;
  v4[5] = a2;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics", 0, 0, (uint64_t)v4);
}

uint64_t sub_1906F3698(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = (NSSet *)objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
      CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v4, v7);
      uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageErrorKey"];
      uint64_t v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationRequestStaticSourcesStatisticsInfoKey"];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = sub_1906F3850;
      v15[3] = &unk_1E5696CB8;
      uint64_t v11 = *(void **)(v3 + 32);
      uint64_t v12 = *(void *)(v3 + 40);
      void v15[5] = v10;
      v15[6] = v12;
      void v15[4] = v9;
      uint64_t v13 = v15;
      uint64_t v14 = v11;
    }
    else
    {
      uint64_t v14 = *(void **)(result + 32);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      _OWORD v16[2] = sub_1906F37EC;
      v16[3] = &unk_1E5696C40;
      v16[4] = v2;
      uint64_t v13 = v16;
    }
    return [v14 async:v13];
  }
  return result;
}

uint64_t sub_1906F37EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 16);

  return v3(v1, v2, 0);
}

uint64_t sub_1906F3850(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1906F3868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 232);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1906F38E8;
  v4[3] = &unk_1E5696C90;
  void v4[4] = v2;
  v4[5] = a2;
  return sub_1906F45D8(a1, "kCLConnectionMessageMicroLocationRequestLearning", 0, 0, (uint64_t)v4);
}

uint64_t sub_1906F38E8(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
      uint64_t v6 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(v4, v5), "objectForKeyedSubscript:", @"kCLConnectionMessageErrorKey");
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      void v11[2] = sub_1906F3A74;
      void v11[3] = &unk_1E5696D30;
      uint64_t v7 = *(void **)(v3 + 32);
      uint64_t v8 = *(void *)(v3 + 40);
      v11[4] = v6;
      v11[5] = v8;
      uint64_t v9 = v11;
      uint64_t v10 = v7;
    }
    else
    {
      uint64_t v10 = *(void **)(result + 32);
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      void v12[2] = sub_1906F3A10;
      void v12[3] = &unk_1E5696C40;
      void v12[4] = v2;
      uint64_t v9 = v12;
    }
    return [v10 async:v9];
  }
  return result;
}

uint64_t sub_1906F3A10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906F3A74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void *sub_1906F3A94(uint64_t a1)
{
  sub_1906D5844(v3);
  sub_1906D5A24(a1, "kCLConnectionMessagePurgeMicroLocationSemiSupervisedData", (uint64_t)v3);
  return sub_1906BFEBC(v3);
}

void sub_1906F3AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1906F3AF8(uint64_t a1)
{
  sub_1906D5844(v3);
  sub_1906D5A24(a1, "kCLConnectionMessagePurgeMicroLocationData", (uint64_t)v3);
  return sub_1906BFEBC(v3);
}

void sub_1906F3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1906F3B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = @"kCLConnectionMessageFetchEstimatedLocationDateKey";
  v10[0] = a2;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];
  uint64_t v6 = *(void *)(a1 + 232);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = sub_1906F3C40;
  v8[3] = &unk_1E5696CE0;
  v8[4] = v6;
  v8[5] = a3;
  return sub_1906F45D8(a1, "kCLConnectionMessageFetchEstimatedLocationAtDate", v5, 0, (uint64_t)v8);
}

uint64_t sub_1906F3C40(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = (NSSet *)objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
    CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v6);
    uint64_t v8 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageErrorKey"];
    uint64_t v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageFetchEstimatedLocationLocationKey"];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_1906F3DF0;
    v15[3] = &unk_1E5696CB8;
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    void v15[5] = v8;
    v15[6] = v11;
    void v15[4] = v9;
    uint64_t v12 = v15;
    uint64_t v13 = v10;
  }
  else
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    _OWORD v16[2] = sub_1906F3D8C;
    v16[3] = &unk_1E5696C40;
    uint64_t v13 = *(void **)(a1 + 32);
    v16[4] = *(void *)(a1 + 40);
    uint64_t v12 = v16;
  }
  return [v13 async:v12];
}

uint64_t sub_1906F3D8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:4097 userInfo:0];
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 16);

  return v3(v1, 0, v2);
}

uint64_t sub_1906F3DF0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1906F3E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1906F3E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v6 = *(unsigned char **)(a1 + 384);
  if (v6 && (int v7 = *v6, *v6))
  {
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = v6 + 1;
    do
    {
      v9 ^= v7 << (v8 & 0x18);
      int v11 = *v10++;
      int v7 = v11;
      v8 += 8;
    }
    while (v11);
    if (!a5) {
      goto LABEL_11;
    }
  }
  else
  {
    int v9 = 0;
    if (!a5) {
      goto LABEL_11;
    }
  }
  int v12 = *a5;
  if (*a5)
  {
    int v13 = 0;
    uint64_t v14 = a5 + 1;
    do
    {
      v9 ^= v12 << (v13 & 0x18);
      int v15 = *v14++;
      int v12 = v15;
      v13 += 8;
    }
    while (v15);
  }
LABEL_11:
  if (a6)
  {
    int v16 = *a6;
    if (*a6)
    {
      int v17 = 0;
      int v18 = a6 + 1;
      do
      {
        v9 ^= v16 << (v17 & 0x18);
        int v19 = *v18++;
        int v16 = v19;
        v17 += 8;
      }
      while (v19);
    }
  }
  return entr_act_modify();
}

void sub_1906F3EC8(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  NSLog(&cfstr_WarningSupport.isa);
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v2 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Supported CoreLocation API call rate exceeded, behavior undefined.\", \"count\":%{public}lu}", (uint8_t *)&v6, 0x1Cu);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
    }
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v5;
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Supported CoreLocation API call rate exceeded, behavior undefined.", "{\"msg%{public}.0s\":\"Supported CoreLocation API call rate exceeded, behavior undefined.\", \"count\":%{public}lu}", (uint8_t *)&v6, 0x1Cu);
  }
}

void sub_1906F4064(void *a1)
{
}

uint64_t sub_1906F4078(void *a1, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)a1[5];
  pthread_mutex_lock(v4);
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v5 = a1[6];
    if (!_CFIsDeallocating())
    {
      CFRetain((CFTypeRef)v5);
      int v6 = *(CLConnectionMessage **)a2;
      int v7 = *(std::__shared_weak_count **)(a2 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(unsigned char *)(v5 + 24))
      {
        CFTypeRef cf = 0;
        CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(v6);
        sub_1906BFF0C(v11, Dictionary);
        sub_1906C1AF8((uint64_t)v11, "kCLConnectionMessageHeadingDataKey", &cf);
        if (cf)
        {
          CFTypeID v9 = CFGetTypeID(cf);
          if (v9 == CFDataGetTypeID())
          {
            v13.location = 0;
            v13.length = 88;
            CFDataGetBytes((CFDataRef)cf, v13, (UInt8 *)(v5 + 56));
            if (*(unsigned char *)(v5 + 25))
            {
              if (*(double *)(v5 + 96) < 0.0)
              {
                *(unsigned char *)(v5 + 25) = 0;
                sub_1906C019C(v5, 13, 0);
                *(void *)(v5 + 144) = *(void *)(v5 + 104);
              }
            }
            else if (*(_DWORD *)(v5 + 136) >= *(_DWORD *)(v5 + 152) {
                   || *(double *)(v5 + 104) - *(double *)(v5 + 144) > 15.0 && *(double *)(v5 + 96) >= 0.0)
            }
            {
              *(unsigned char *)(v5 + 25) = 1;
              CLClientShowHeadingCalibration(v5, 0);
            }
            sub_1906C019C(v5, 12, 0);
          }
        }
        sub_1906BFEBC(v11);
      }
      if (v7) {
        sub_1906BFE48(v7);
      }
      CFRelease((CFTypeRef)v5);
    }
  }
  return pthread_mutex_unlock(v4);
}

void sub_1906F4214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    sub_1906BFE48(v9);
  }
  sub_1906EB9DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1906F4250(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLClientInterruptionHandler", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v7);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006480);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[5];
    *(_DWORD *)long long buf = 68289538;
    int v9 = 0;
    *(_WORD *)__int16 v10 = 2082;
    *(void *)&void v10[2] = "";
    __int16 v11 = 2082;
    uint64_t v12 = "activity";
    __int16 v13 = 2050;
    uint64_t v14 = v4;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientInterruptionHandler\", \"event\":%{public, location:escape_only}s, \"client\":\"%{public}p\"}", buf, 0x26u);
  }
  uint64_t v5 = (pthread_mutex_t *)a1[6];
  *(void *)__int16 v10 = v5;
  pthread_mutex_lock(v5);
  *(_WORD *)&v10[8] = 257;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    int v6 = (const void *)a1[5];
    if (!_CFIsDeallocating())
    {
      CFRetain(v6);
      sub_1906C019C((uint64_t)v6, 32, 0);
      CFRelease(v6);
    }
  }
  pthread_mutex_unlock(v5);
  os_activity_scope_leave(&v7);
}

void sub_1906F43E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_1906F4064(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1906F441C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

void sub_1906F442C()
{
}

void sub_1906F4444(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1906F44A0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5696A40, MEMORY[0x1E4FBA1C8]);
}

void sub_1906F448C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1906F44A0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void sub_1906F44D4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1906F4530(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5696A48, MEMORY[0x1E4FBA1D0]);
}

void sub_1906F451C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1906F4530(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void sub_1906F4564(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1906F4584(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1906F45D8(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v21 = a3;
  long long v22 = a2;
  __int16 v8 = *(pthread_mutex_t **)(a1 + 240);
  int v19 = v8;
  pthread_mutex_lock(v8);
  __int16 v20 = 257;
  if (*(unsigned char *)(a1 + 225)) {
    return pthread_mutex_unlock(v8);
  }
  sub_1906F4748(&v22, &v21, &v17);
  if (*(void *)(a1 + 320))
  {
    if (a4)
    {
      uint64_t v15 = v17;
      int v16 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnectionClient::sendMessageWithCompletion();
      int v9 = v16;
      if (!v16) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v13 = v17;
      uint64_t v14 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnectionClient::sendMessage();
      int v9 = v14;
      if (!v14) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(a5 + 16))(a5, &v11);
  int v9 = v12;
  if (v12) {
LABEL_7:
  }
    sub_1906BFE48(v9);
LABEL_8:
  if (v18) {
    sub_1906BFE48(v18);
  }
  return pthread_mutex_unlock(v8);
}

void sub_1906F46F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a5) {
    sub_1906BFE48(a5);
  }
  if (a9) {
    sub_1906BFE48(a9);
  }
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1906F4748@<X0>(char **a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x70uLL);
  uint64_t result = sub_1906F47AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1906F4798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1906F47AC(void *a1, char **a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_1906F4820((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1906F480C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1906F4820(uint64_t a1, uint64_t a2, char **a3, void *a4)
{
  sub_1906D5C70(__p, *a3);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1906F4878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1906F4894(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1906F48E8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1906F48E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_1906F4D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906F4FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1906F51D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1906F51F0(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FCF260]();
  uint64_t v3 = -[CLMonitor initWithLedgerName:path:onSilo:authIdentity:locationManager:handler:]([CLMonitor alloc], "initWithLedgerName:path:onSilo:authIdentity:locationManager:handler:", [*(id *)(a1 + 32) name], objc_msgSend(*(id *)(a1 + 32), "path"), *(void *)(*(void *)(a1 + 32) + 8), *(void *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "manager"), objc_msgSend(*(id *)(a1 + 32), "eventHandler"));
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "manager"), "addIdentifiableClient:", v3);
  [*(id *)(a1 + 32) setIdentityToken:0];
  [*(id *)(a1 + 32) setStorageToken:0];
  if ([*(id *)(a1 + 32) vendingHandler])
  {
    uint64_t v4 = [*(id *)(a1 + 32) vendingHandler];
    (*(void (**)(uint64_t, CLMonitor *))(v4 + 16))(v4, v3);
  }

  id v5 = *(id *)(a1 + 32);
}

void sub_1906F5360(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906F5400(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906F55DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906F578C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1906F6728;
  block[3] = &unk_1E5696BF0;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t sub_1906F59E4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) delegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = [*(id *)(a1 + 32) delegate];
    [*(id *)(a1 + 32) locationManagerRoutine];
    return MEMORY[0x1F4181798](v2, sel_locationManager_didUpdateLocations_completion_);
  }
  else
  {
    if (qword_1E929F5E0 != -1) {
      dispatch_once(&qword_1E929F5E0, &unk_1EE0055C0);
    }
    uint64_t v3 = qword_1E929F5E8;
    if (os_log_type_enabled((os_log_t)qword_1E929F5E8, OS_LOG_TYPE_DEBUG))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      __int16 v6 = 2082;
      char v7 = "";
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations to RT, not respondsToSelector @selector(locationManager:didUpdateLocations:completion:)\"}", (uint8_t *)v5, 0x12u);
    }
    [*(id *)(a1 + 32) didUpdateLocations:*(void *)(a1 + 40)];
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1906F5C84(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) inertialDelegate];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = [*(id *)(a1 + 32) inertialDelegate];
    [*(id *)(a1 + 32) locationManagerRoutine];
    MEMORY[0x1F4181798](v2, sel_inertialDataManager_didUpdateInertialData_);
  }
  else
  {
    if (qword_1E929F5E0 != -1) {
      dispatch_once(&qword_1E929F5E0, &unk_1EE0055C0);
    }
    uint64_t v3 = qword_1E929F5E8;
    if (os_log_type_enabled((os_log_t)qword_1E929F5E8, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      __int16 v6 = "";
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendInertial to RT, not respondsToSelector @selector(inertialDataManager:didUpdateInertialData:)\"}", (uint8_t *)v4, 0x12u);
    }
  }
}

void sub_1906F6118(uint64_t a1)
{
}

void sub_1906F6148(uint64_t a1)
{
}

uint64_t sub_1906F63B4(uint64_t a1)
{
  [*(id *)(a1 + 32) delegate];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(void *)(a1 + 40), *(void *)(a1 + 32), @"CLLocationManagerRoutine.m", 243, @"delegate must respond to selector locationManager:didUpdateLocations:");
  }
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "locationManagerRoutineProxy"), "setUpdating:", 1);
  uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "locationManagerRoutineProxy"), "connection"), "remoteObjectProxy");

  return [v2 startUpdatingLocation];
}

uint64_t sub_1906F64C8(uint64_t a1)
{
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "locationManagerRoutineProxy"), "setUpdating:", 0);
  uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "locationManagerRoutineProxy"), "connection"), "remoteObjectProxy");

  return [v2 stopUpdatingLocation];
}

uint64_t sub_1906F659C(uint64_t a1)
{
  uint64_t v2 = (void *)[*(id *)(a1 + 32) locationManagerRoutineProxy];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 setDelegate:v3];
}

uint64_t sub_1906F6684(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) locationManagerRoutineProxy];

  return MEMORY[0x1F4181798](v1, sel_setInertialDelegate_);
}

os_log_t sub_1906F66F8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Routine");
  qword_1E929F5E8 = (uint64_t)result;
  return result;
}

uint64_t sub_1906F6728(uint64_t a1)
{
  return [*(id *)(a1 + 32) createConnection];
}

CLEmergencyEnablementAssertion *sub_1906F6730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  os_log_t result = 0;
  if (a1)
  {
    if (a2)
    {
      v6[0] = @"kCLConnectionMessageBundleIdentifierKey";
      v6[1] = @"kCLConnectionMessageBundlePathKey";
      v7[0] = a1;
      v7[1] = a2;
      void v7[2] = a3;
      CFTypeRef v6[2] = @"kCLConnectionMessagePurposeKey";
      v6[3] = @"kCLConnectionMessageOverrideDeauthorizationKey";
      v7[3] = [NSNumber numberWithBool:a4];
      return -[CLAssertion initWithRegistrationMessageName:messageDictionary:]([CLEmergencyEnablementAssertion alloc], "initWithRegistrationMessageName:messageDictionary:", "EmergencyEnablementAssertion/kCLConnectionMessage", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:4]);
    }
  }
  return result;
}

id sub_1906F8D7C(uint64_t a1)
{
  return objc_loadWeak((id *)(a1 + 32));
}

void sub_1906F8E70(uint64_t a1)
{
  (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, [MEMORY[0x1E4F28C58] errorWithDomain:@"kCLErrorDomain" code:10 userInfo:0]);
  uint64_t v2 = *(void **)(a1 + 32);
}

dispatch_queue_t sub_1906FA9D0()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.corelocation.shared", 0);
  qword_1E92A0170 = (uint64_t)result;
  return result;
}

void sub_1906FAA84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906FAE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FAFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FB134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FB348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FB4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FB6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1906FB860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FBA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FBB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FC910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_1906FCA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FCBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FCD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FCEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FD098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FD238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FD77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1906FD928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FDAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FDC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FDE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FDF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1906FDFB4(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if (objc_opt_respondsToSelector())
  {
    entr_act_modify();
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = NSStringFromSelector(sel_locationManagerDidResumeLocationUpdates_);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    __int16 v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      v8[0] = 68289794;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = v6;
      __int16 v13 = 2050;
      uint64_t v14 = v3;
      __int16 v15 = 2114;
      int v16 = v4;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x30u);
    }
    [*(id *)(a1 + 40) locationManagerDidResumeLocationUpdates:*(void *)(a1 + 32)];
  }
  else
  {
    entr_act_modify();
  }
  return objc_sync_exit(v2);
}

void sub_1906FE13C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1906FE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FE78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  objc_sync_exit(v19);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1906FE7BC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_onLocationRequestTimeout);
}

void sub_1906FEB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1906FECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FEEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FF214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FF554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1906FF8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
}

void sub_1906FFBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1906FFEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1907001B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190700378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907006C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190700DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

uint64_t sub_190700E08(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = NSStringFromSelector(sel_locationManager_monitoringDidFailForRegion_withError_);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    __int16 v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 48);
      v9[0] = 68290051;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v6;
      __int16 v14 = 2050;
      uint64_t v15 = v3;
      __int16 v16 = 2114;
      uint64_t v17 = v4;
      __int16 v18 = 2113;
      uint64_t v19 = v7;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"region\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x3Au);
    }
    objc_msgSend(*(id *)(a1 + 40), "locationManager:monitoringDidFailForRegion:withError:", *(void *)(a1 + 32), *(void *)(a1 + 48), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomain", 5, 0));
  }
  return objc_sync_exit(v2);
}

void sub_190700FA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190701268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190701548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907016E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907018CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190701F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

uint64_t sub_190701F54(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = NSStringFromSelector(sel_locationManager_rangingBeaconsDidFailForRegion_withError_);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    __int16 v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 48);
      v9[0] = 68290051;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v6;
      __int16 v14 = 2050;
      uint64_t v15 = v3;
      __int16 v16 = 2114;
      uint64_t v17 = v4;
      __int16 v18 = 2113;
      uint64_t v19 = v7;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"region\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x3Au);
    }
    objc_msgSend(*(id *)(a1 + 40), "locationManager:rangingBeaconsDidFailForRegion:withError:", *(void *)(a1 + 32), *(void *)(a1 + 48), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomain", 17, 0));
  }
  return objc_sync_exit(v2);
}

void sub_1907020EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  objc_sync_exit(v9);
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1907029F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
}

uint64_t sub_190702A38(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:@"kCLErrorDomain" code:17 userInfo:0];
    uint64_t v4 = *(void *)(a1 + 40);
    __int16 v5 = NSStringFromSelector(sel_locationManager_didFailRangingBeaconsForConstraint_error_);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 48);
      v10[0] = 68290051;
      v10[1] = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = v7;
      __int16 v15 = 2050;
      uint64_t v16 = v4;
      __int16 v17 = 2114;
      __int16 v18 = v5;
      __int16 v19 = 2113;
      uint64_t v20 = v8;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"constraint\":%{private, location:escape_only}@}", (uint8_t *)v10, 0x3Au);
    }
    [*(id *)(a1 + 40) locationManager:*(void *)(a1 + 32) didFailRangingBeaconsForConstraint:*(void *)(a1 + 48) error:v3];
  }
  return objc_sync_exit(v2);
}

void sub_190702BC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190702EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
}

void sub_190703074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190703228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190703550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907037B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1907037D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 || !a3)
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE002DE0);
    }
    uint64_t v6 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE002DE0);
      }
    }
    uint64_t v7 = qword_1E929F628;
    if (os_signpost_enabled((os_log_t)qword_1E929F628))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      uint64_t v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationManager, Could not export MicroLocation database tables", "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  }
  return result;
}

void sub_190703BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_190703C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 || !a3)
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE002DE0);
    }
    uint64_t v6 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables for migration\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE002DE0);
      }
    }
    uint64_t v7 = qword_1E929F628;
    if (os_signpost_enabled((os_log_t)qword_1E929F628))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      uint64_t v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationManager, Could not export MicroLocation database tables for migration", "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables for migration\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  }
  return result;
}

void sub_190704008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_190704030(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a2 || !a3)
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE002DE0);
    }
    __int16 v5 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289283;
      __int16 v39 = 2082;
      id v40 = "";
      __int16 v41 = 2113;
      uint64_t v42 = a2;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationManager, couldn't export per anchor per cluster measured value statistics\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v22 = a1;
    __int16 v24 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a3, "count"));
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v25 = [a3 countByEnumeratingWithState:&v32 objects:v37 count:16];
    if (v25)
    {
      uint64_t v23 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v33 != v23) {
            objc_enumerationMutation(a3);
          }
          uint64_t v27 = *(void *)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v7 = objc_msgSend(a3, "objectForKeyedSubscript:");
          uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v7, "count"));
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v9 = [v7 countByEnumeratingWithState:&v28 objects:v36 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v29;
            do
            {
              for (uint64_t j = 0; j != v10; ++j)
              {
                if (*(void *)v29 != v11) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v13 = *(void *)(*((void *)&v28 + 1) + 8 * j);
                uint64_t v14 = (void *)[v7 objectForKeyedSubscript:v13];
                uint64_t v15 = [_CLMicroLocationClusterIdAndClusterData alloc];
                objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 0), "doubleValue");
                double v17 = v16;
                objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 1), "doubleValue");
                __int16 v19 = [(_CLMicroLocationClusterIdAndClusterData *)v15 initWithClusterIdentifier:v13 meanBleRssi:v17 meanUwbRange:v18];
                [v8 addObject:v19];
              }
              uint64_t v10 = [v7 countByEnumeratingWithState:&v28 objects:v36 count:16];
            }
            while (v10);
          }
          uint64_t v20 = [[_CLMicroLocationSourceIdAndSourceData alloc] initWithSourceIdsIdentifier:v27 sourceData:v8];
          [v24 addObject:v20];
        }
        uint64_t v25 = [a3 countByEnumeratingWithState:&v32 objects:v37 count:16];
      }
      while (v25);
    }
    uint64_t v21 = [[_CLMicroLocationSourcesStatisticsResult alloc] initWithSourcesData:v24];
    (*(void (**)(void))(*(void *)(v22 + 32) + 16))();
  }
}

void sub_190704580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907049AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
}

void sub_190704E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,os_activity_scope_state_s state)
{
}

void sub_19070535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_activity_scope_state_s state)
{
}

void sub_1907055DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907058C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190705A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190705C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190705DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190705F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907062FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907067DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907069FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190706B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190706D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190706E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190707018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907071C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190707340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190707594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, id location)
{
}

void sub_19070779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190707BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  objc_sync_exit(v9);
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_190708170(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070855C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19070890C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a2 count];
  if (!a3 && !v6) {
    a3 = [MEMORY[0x1E4F28C58] errorWithDomain:@"kCLErrorDomainPrivate" code:6 userInfo:0];
  }
  if (a3)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    return [v7 callPlaceInferenceHandlerWithResult:0 error:a3];
  }
  else
  {
    uint64_t v9 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v10 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(a2);
          }
          uint64_t v14 = [[_CLPlaceInference alloc] initWithUserType:0 placeType:2 placemark:*(void *)(*((void *)&v15 + 1) + 8 * i) referenceLocation:*(void *)(a1 + 48) confidence:0 preferredName:0 loiIdentifier:0.4];
          [v9 addObject:v14];
        }
        uint64_t v11 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v11);
    }
    return [*(id *)(a1 + 40) callPlaceInferenceHandlerWithResult:v9 error:0];
  }
}

void sub_190708F68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19070A3E0()
{
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 3;
  }
  else {
    return 4;
  }
}

void sub_19070AEBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070AED8(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ([a2 count] == 8)
  {
    char v4 = objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 0), "intValue");
    id v5 = 0;
    if (v4) {
      id v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F29128]), "initWithUUIDString:", objc_msgSend(a2, "objectAtIndex:", 1));
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = [a2 objectAtIndex:2];
      if ((v4 & 4) != 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((v4 & 4) != 0)
      {
LABEL_6:
        uint64_t v7 = [a2 objectAtIndex:3];
LABEL_15:
        uint64_t v9 = objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 4), "integerValue") - 1;
        if (v9 < 3) {
          uint64_t v10 = v9 + 1;
        }
        else {
          uint64_t v10 = 0;
        }
        objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 5), "doubleValue");
        double v12 = v11;
        int v13 = objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 6), "shortValue");
        objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", 7), "doubleValue");
        long long v16 = [[CLBeacon alloc] initWithUUID:v5 major:v6 minor:v7 proximity:v10 accuracy:v13 rssi:v12 timestamp:v14];
        objc_msgSend(*(id *)(a1 + 32), "addObject:");

        return;
      }
    }
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
  }
  uint64_t v8 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    uint64_t v18 = [a2 count];
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "Client beacon is invalid (count,%lu).", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    [a2 count];
    long long v15 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationManager onClientEventRanging:]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_19070C2E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070C7CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070CF30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070D234(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070D524(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070D894(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070DB1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070DE04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19070E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070E7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070E9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_19070EBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070F630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070F7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070FE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19070FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19071048C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
  }
  char v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v7 = a2;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "#diagnosticManager failed to get remoteObjectProxy with error %@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "+[CLLocationManager dumpDiagnosticFilesWithHandler:]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_190710644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    id v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v8 = a3;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "#diagnosticManager error copying files: %@", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "+[CLLocationManager dumpDiagnosticFilesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1907109F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190710EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190711198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190711478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190711750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1907118E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190711A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190711BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190711D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190711F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907120EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19071227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190712400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190712590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190712728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907128C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190712A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190712D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190713018(_Unwind_Exception *exception_object)
{
}

uint64_t sub_190713034(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_190713344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_1907135DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, id location)
{
  objc_sync_exit(v20);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_19071362C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_loadWeak((id *)(a1 + 48));
  if (result)
  {
    uint64_t v3 = result;
    objc_sync_enter(result);

    *(void *)(*(void *)(a1 + 32) + 248) = [*(id *)(a1 + 40) copy];
    *(void *)(*(void *)(a1 + 32) + 256) = *(void *)(a1 + 56);
    objc_sync_exit(v3);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
    }
    char v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "Start continuous PlaceInferences", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE002DA0);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationManager(_CLPlaceInferenceExtensions) _fetchContinuousPlaceInferencesWithFidelityPolicy:handler:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return sub_1906EDE08(*(void *)(*(void *)(a1 + 32) + 8), *(_DWORD *)(a1 + 56));
  }
  return result;
}

void sub_190713814(_Unwind_Exception *exception_object)
{
}

void sub_190713AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_190713CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

os_log_t sub_190713D14()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Microlocation");
  qword_1E929F628 = (uint64_t)result;
  return result;
}

void sub_190713D44(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,client,#warning,unexpected message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_190713F24(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v15 = v6;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#CLGNSSStateQueryAssertion,client,message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    CLConnectionMessage::name(*a2);
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*(void *)(v3 + 8))
  {
    uint64_t v7 = (void *)CLConnectionMessage::name(*a2);
    int v8 = *((char *)v7 + 23);
    if (v8 < 0)
    {
      if (v7[1] != 53) {
        return;
      }
      uint64_t v7 = (void *)*v7;
    }
    else if (v8 != 53)
    {
      return;
    }
    if (!memcmp(v7, "kCLConnectionMessageCLGNSSStateQueryAssertionResponse", 0x35uLL))
    {
      uint64_t v11 = *(void *)(v3 + 8);
      uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
      (*(void (**)(uint64_t, uint64_t, void))(v11 + 16))(v11, Dictionary, 0);
    }
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    uint64_t v9 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,#warning,client,noRegisteredCallback", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_1907142A8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 8) = 0;
  }
  if (*(void *)a1)
  {
    dispatch_release(*(dispatch_object_t *)a1);
    *(void *)a1 = 0;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v4 = MEMORY[0x192FCE820]();
    uint64_t result = MEMORY[0x192FCEAD0](v4, 0xB0C40BC2CC919);
  }
  *(void *)(a1 + 16) = 0;
  return result;
}

void sub_1907146A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  if (a25) {
    sub_1906BFE48(a25);
  }
  MEMORY[0x192FCEAD0](v33, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

uint64_t *sub_1907147B0(uint64_t *result, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    uint64_t v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,client,~CLGNSSStateQueryAssertionResponseInternal", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::~CLGNSSStateQueryAssertionResponseInternal()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1907142A8(v2);
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

void sub_1907149A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1906F4064(a1);
}

CLGNSSStateQueryAssertionResponse *sub_1907149B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,reason missing\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "#CLGNSSStateQueryAssertion,client,reason missing";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    uint64_t v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
    uint64_t v11 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback queue\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "#CLGNSSStateQueryAssertion,client,nil callback queue";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v13[0] = @"kCLConnectionMessageBundleIdentifierKey";
    v13[1] = @"kCLConnectionMessageBundlePathKey";
    v14[0] = a1;
    v14[1] = a2;
    v13[2] = @"kCLConnectionMessagePurposeKey";
    void v14[2] = a3;
    return -[CLGNSSStateQueryAssertionResponse initWithRegistrationMessageName:messagePayload:callbackQueue:completionHandler:]([CLGNSSStateQueryAssertionResponse alloc], "initWithRegistrationMessageName:messagePayload:callbackQueue:completionHandler:", "kCLConnectionMessageBBGnssStatusQuery", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3], a4, a5);
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
  }
  double v12 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback block\"}", buf, 0x12u);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0062E0);
    }
  }
  uint64_t v7 = qword_1EB2713E0;
  if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "#CLGNSSStateQueryAssertion,client,nil callback block";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, buf, 0x12u);
  }
  return 0;
}

void sub_190715278(long double a1, long double a2)
{
}

uint64_t sub_190715308(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FCEA70](a1 + 128);
  return a1;
}

uint64_t sub_190715440(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1907156F0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x192FCEA70](v1);
  _Unwind_Resume(a1);
}

double sub_190715718(double *a1, double *a2, double a3)
{
  double v6 = *a1;
  long double v7 = sin(*a1 * 0.0174532925);
  double v8 = sqrt(v7 * -0.00669437999 * v7 + 1.0);
  int v9 = (int)(6335439.33 / (v8 * (v8 * v8)) * 0.0174532925);
  double v10 = a3;
  if (v9 >= 1) {
    double v10 = a3 / (double)v9;
  }
  double v11 = v10 * floor(v6 / v10);
  *a1 = v11;
  __double2 v12 = __sincos_stret(v11 * 0.0174532925);
  int v13 = (int)(v12.__cosval * 0.0174532925 * (6378137.0 / sqrt(v12.__sinval * -0.00669437999 * v12.__sinval + 1.0)));
  if (v13 >= 1) {
    a3 = a3 / (double)v13;
  }
  double result = a3 * floor(*a2 / a3);
  *a2 = result;
  return result;
}

uint64_t sub_190715814(const char *a1)
{
  uint64_t v2 = getpwnam("mobile");
  if (v2)
  {
    uid_t pw_uid = v2->pw_uid;
    gid_t pw_gid = v2->pw_gid;
  }
  else
  {
    uid_t pw_uid = 501;
    gid_t pw_gid = 501;
  }

  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_190715868(unsigned char *a1, uid_t a2, gid_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  bzero(v11, 0x400uLL);
  int v6 = *a1;
  if (!*a1) {
    return 1;
  }
  unint64_t v7 = 0;
  double v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10)) {
      goto LABEL_7;
    }
    if (mkdir(v11, 0x1FFu)) {
      return 0;
    }
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    uint64_t result = 1;
    if (v7 <= 0x3FD)
    {
      int v6 = v8[v7++];
      if (v6) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_190715964(const char *a1, const char *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4) {
    goto LABEL_30;
  }
  uint64_t v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    uint64_t v12 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      int v13 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v22 = a1;
      __int16 v23 = 1026;
      int v24 = v13;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    uint64_t v11 = 0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    __error();
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_30:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int v6 = v5;
  unint64_t v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    uint64_t v15 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      int v16 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v22 = a2;
      __int16 v23 = 1026;
      int v24 = v16;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      __error();
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    fclose(v6);
    goto LABEL_30;
  }
  double v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      uint64_t v11 = 1;
      goto LABEL_37;
    }
    size_t v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1) {
      break;
    }
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      stat v10 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        uint64_t v22 = a2;
        _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      uint64_t v11 = 0;
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 == -1) {
          goto LABEL_44;
        }
LABEL_47:
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
LABEL_44:
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        uint64_t v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
  }
  __int16 v17 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v22 = a1;
    _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  uint64_t v11 = 0;
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
LABEL_37:
  fclose(v6);
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

uint64_t sub_190715FCC(const char *a1, const char *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  sub_190717AFC((uint64_t *)v25, [(id)objc_msgSend(NSString stringWithFormat:@"compress:%@", objc_msgSend((id)objc_msgSend(NSString, "stringWithUTF8String:", a2), "lastPathComponent")), "UTF8String"], 0);
  int bzerror = 0;
  uint64_t v4 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v4)
  {
LABEL_38:
    uint64_t v9 = 0;
    goto LABEL_39;
  }
  uint64_t v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    uint64_t v12 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      int v13 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      long long v32 = a1;
      __int16 v33 = 1026;
      int v34 = v13;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      int v14 = *__error();
      int v27 = 136446466;
      long long v28 = a1;
      __int16 v29 = 1026;
      int v30 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    goto LABEL_38;
  }
  int v6 = fopen(a2, "wb");
  if (!v6)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    int v16 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      int v17 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      long long v32 = a1;
      __int16 v33 = 1026;
      int v34 = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      int v22 = *__error();
      int v27 = 136446466;
      long long v28 = a1;
      __int16 v29 = 1026;
      int v30 = v22;
      __int16 v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    fclose(v5);
    goto LABEL_38;
  }
  unint64_t v7 = BZ2_bzWriteOpen(&bzerror, v6, 1, 0, 0);
  if (bzerror)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    double v8 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446466;
      long long v32 = a2;
      __int16 v33 = 1026;
      int v34 = bzerror;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
LABEL_67:
      }
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
LABEL_56:
      int v27 = 136446466;
      long long v28 = a2;
      __int16 v29 = 1026;
      int v30 = bzerror;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v20);
LABEL_57:
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  else
  {
    while (1)
    {
      if (feof(v5))
      {
        uint64_t v9 = 1;
        goto LABEL_11;
      }
      size_t v11 = fread(v4, 1uLL, 0x400uLL, v5);
      if (v11 == -1) {
        break;
      }
      BZ2_bzWrite(&bzerror, v7, v4, v11);
      if (bzerror)
      {
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
        }
        uint64_t v21 = off_1EB2713B0;
        if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 136446466;
          long long v32 = a2;
          __int16 v33 = 1026;
          int v34 = bzerror;
          _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          goto LABEL_67;
        }
        goto LABEL_56;
      }
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
    }
    uint64_t v19 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      long long v32 = a1;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      int v27 = 136446210;
      long long v28 = a1;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v20);
      goto LABEL_57;
    }
  }
LABEL_10:
  uint64_t v9 = 0;
LABEL_11:
  fclose(v5);
  if (v7)
  {
    BZ2_bzWriteClose(&bzerror, v7, 0, 0, 0);
    if (bzerror)
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
      }
      stat v10 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446466;
        long long v32 = a2;
        __int16 v33 = 1026;
        int v34 = bzerror;
        _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE002C80);
        }
        int v27 = 136446466;
        long long v28 = a2;
        __int16 v29 = 1026;
        int v30 = bzerror;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
  fclose(v6);
LABEL_39:
  free(v4);
  sub_190717D2C(v25);
  return v9;
}

void sub_1907169CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_190717D2C((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907169EC(char *a1, size_t a2, double a3)
{
  if (a3 < 0.0) {
    return snprintf(a1, (int)a2, "%.1f", a3);
  }
  switch((int)((a3 + 22.5) / 45.0))
  {
    case 0:
    case 8:
      a2 = (int)a2;
      uint64_t v4 = "N";
      break;
    case 1:
      a2 = (int)a2;
      uint64_t v4 = "NE";
      break;
    case 2:
      a2 = (int)a2;
      uint64_t v4 = "E";
      break;
    case 3:
      a2 = (int)a2;
      uint64_t v4 = "SE";
      break;
    case 4:
      a2 = (int)a2;
      uint64_t v4 = "S";
      break;
    case 5:
      a2 = (int)a2;
      uint64_t v4 = "SW";
      break;
    case 6:
      a2 = (int)a2;
      uint64_t v4 = "W";
      break;
    case 7:
      a2 = (int)a2;
      uint64_t v4 = "NW";
      break;
    default:
      return snprintf(a1, (int)a2, "%.1f", a3);
  }

  return snprintf(a1, a2, v4);
}

void sub_190716B28(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v8 = a1;
  double v11 = a5;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E92A0008, memory_order_acquire) & 1) == 0)
  {
    int v16 = a2;
    double v17 = a7;
    double v14 = a6;
    double v15 = a4;
    double v19 = a3;
    int v12 = __cxa_guard_acquire(&qword_1E92A0008);
    double v11 = a5;
    a3 = v19;
    a6 = v14;
    a4 = v15;
    a7 = v17;
    double v8 = a1;
    a2 = v16;
    if (v12)
    {
      qword_1E929FFF0 = 0;
      unk_1E929FFF8 = 0;
      xmmword_1E929FFE0 = xmmword_1908820F0;
      qword_1E92A0000 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1E92A0008);
      double v11 = a5;
      a3 = v19;
      a6 = v14;
      a4 = v15;
      a7 = v17;
      double v8 = a1;
      a2 = v16;
    }
  }

  sub_190839B08((double *)&xmmword_1E929FFE0, v8, a2, a3, a4, 0.0, v11, a6, a7);
}

double sub_190716C08(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v8 = a4 * 0.0174532925;
  double v9 = a5 * 0.0174532925;
  double v10 = a6 / 6378137.0;
  __double2 v11 = __sincos_stret(a3 * 0.0174532925);
  __double2 v12 = __sincos_stret(v10);
  __double2 v13 = __sincos_stret(v9);
  long double v14 = asin(v13.__cosval * (v11.__cosval * v12.__sinval) + v11.__sinval * v12.__cosval);
  long double v15 = sin(v14);
  long double v16 = atan2(v11.__cosval * (v13.__sinval * v12.__sinval), v12.__cosval - v11.__sinval * v15);
  *a1 = v14 / 0.0174532925;
  double result = (v8 + v16) / 0.0174532925;
  *a2 = result;
  return result;
}

void sub_190716CD8(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  if (a1 && a2 && a3)
  {
    if (a4)
    {
      double v16 = 0.0;
      sub_190716C08(&v16, &v17, a5, a6, 0.0, a7);
      double v14 = vabdd_f64(v16, a5);
      sub_190716C08(&v17, &v16, a5, a6, 90.0, a7);
      double v15 = vabdd_f64(v16, a6);
      *a1 = a5 - v14;
      *a3 = v14 + a5;
      *a2 = a6 - v15;
      *a4 = v15 + a6;
    }
  }
}

uint64_t sub_190716DAC(const __CFString *a1, const __CFString *a2, Boolean *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v20 = 0;
  if (a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = (Boolean *)&v20;
  }
  Boolean *v5 = 0;
  int v6 = (const void *)CFCopyUserName();
  if (CFEqual(v6, @"mobile"))
  {
    uint64_t AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, a2, v5);
    if (!*v5)
    {
      double v8 = NSString;
      sub_1906D5C70(v18, (char *)[@"mobile" UTF8String]);
      sub_1907AA64C((uint64_t)v18, __p);
      if (v22 >= 0) {
        double v9 = __p;
      }
      else {
        double v9 = (void **)__p[0];
      }
      double v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "stringWithUTF8String:", v9), "stringByAppendingPathComponent:", objc_msgSend(&unk_1EE023820, "componentsJoinedByString:", @"/")), "stringByAppendingString:", @"/");
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      __p[0] = v10;
      __p[1] = (void *)a2;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFArrayRef v12 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)__p, 2, MEMORY[0x1E4F1D510]);
      if (v12)
      {
        CFStringRef v13 = CFStringCreateByCombiningStrings(v11, v12, &stru_1EE006720);
        if (v13)
        {
          uint64_t AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, v13, v5);
          CFRelease(v13);
        }
        CFRelease(v12);
      }
    }
  }
  else
  {
    CFPropertyListRef v14 = CFPreferencesCopyValue(a1, a2, @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v14)
    {
      double v15 = v14;
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 == CFBooleanGetTypeID())
      {
        Boolean *v5 = 1;
        uint64_t AppBooleanValue = CFEqual(v15, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      }
      else if (v16 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v15))
      {
        Boolean *v5 = 1;
        LODWORD(__p[0]) = 0;
        CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, __p);
        uint64_t AppBooleanValue = LODWORD(__p[0]) != 0;
      }
      else
      {
        uint64_t AppBooleanValue = 0;
      }
      CFRelease(v15);
    }
    else
    {
      return 0;
    }
  }
  return AppBooleanValue;
}

void sub_190717024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190717060(void *a1)
{
  if ((unint64_t)[a1 lengthOfBytesUsingEncoding:4] < 0x41)
  {
    if ([a1 hasPrefix:@"_"])
    {
      NSLog(&cfstr_MonitorNameCan.isa);
    }
    else
    {
      uint64_t v2 = (void *)[MEMORY[0x1E4F28E58] characterSetWithCharactersInString:@"_"];
      objc_msgSend(v2, "formUnionWithCharacterSet:", objc_msgSend(MEMORY[0x1E4F28B88], "alphanumericCharacterSet"));
      if (objc_msgSend(a1, "rangeOfCharacterFromSet:", objc_msgSend(v2, "invertedSet")) == 0x7FFFFFFFFFFFFFFFLL) {
        return 1;
      }
      NSLog(&cfstr_MonitorNameCon.isa);
    }
  }
  else
  {
    NSLog(&cfstr_ConstraintMoni.isa, 64);
  }
  return 0;
}

void sub_190717134(FILE *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint32_t v2 = _dyld_image_count();
  uint64_t v3 = v2;
  __int16 v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    uint32_t v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      size_t v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        int v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      double v9 = image_header;
      double v10 = *(const mach_header **)&image_header->cputype;
      uint32_t ncmds = image_header->ncmds;
      if (ncmds)
      {
        CFArrayRef v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL)) {
              CFArrayRef v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
            }
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        CFArrayRef v12 = 0;
      }
      uint64_t v14 = 0;
      double v15 = v29;
      while (1)
      {
        unint64_t v17 = *v15;
        v15 += 7;
        unint64_t v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0) {
          break;
        }
        if (v3 == ++v14)
        {
          uint64_t v14 = v3;
          int v19 = v3;
          goto LABEL_24;
        }
      }
      int v19 = v14;
LABEL_24:
      char v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      *char v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      char v22 = (char *)&v29[7 * i];
      long long v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      long long v31 = *((_OWORD *)v22 + 2);
      uint64_t v32 = *((void *)v22 + 6);
      int v24 = "other";
      if (v32 != 16777228)
      {
        uint64_t v25 = "unknown";
        if (HIDWORD(v32) == 9) {
          uint64_t v25 = "armv7";
        }
        int v24 = "armv6";
        if (HIDWORD(v32) != 6) {
          int v24 = v25;
        }
      }
      long long v28 = v24;
      if (i) {
        uint64_t v26 = 32;
      }
      else {
        uint64_t v26 = 43;
      }
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (void)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (uint64_t j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }

  free(v29);
}

CFTypeRef sub_190717438(CFStringRef filePath, const __CFString *a2)
{
  if (!filePath) {
    return 0;
  }
  CFURLRef v3 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = v3;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    size_t v6 = Unique;
    CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(Unique, a2);
    CFTypeRef v8 = ValueForInfoDictionaryKey;
    if (ValueForInfoDictionaryKey) {
      CFRetain(ValueForInfoDictionaryKey);
    }
    CFRelease(v6);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  CFRelease(v4);
  return v8;
}

BOOL sub_1907174DC(__CFString *a1)
{
  if (sub_190717544(a1)) {
    return 1;
  }
  if (qword_1E92A0018 != -1) {
    dispatch_once(&qword_1E92A0018, &unk_1EE005FC0);
  }
  return sub_190826160(qword_1E92A0010, a1);
}

BOOL sub_190717544(void *a1)
{
  void v12[3] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB2714A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB2714A0))
  {
    sub_1906D5C70(v10, "/System/Library/LocationBundles/LocationPromptUI.bundle");
    sub_1906D5C70(v11, "/System/Library/LocationBundles/LocationFenceSync.bundle");
    sub_1906D5C70(v12, "/System/Library/LocationBundles/PLAMonitor.bundle");
    sub_1907177E4((uint64_t)v10, 3uLL);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v12[i + 2]) < 0) {
        operator delete((void *)v12[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_190717928, &qword_1EB2714A8, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB2714A0);
  }
  uint64_t v2 = qword_1EB2714A8;
  uint64_t v3 = qword_1EB2714B0;
  CFURLRef v4 = (const char *)[a1 UTF8String];
  if (v2 != v3)
  {
    uint64_t v5 = v4;
    size_t v6 = strlen(v4);
    while (1)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        if (v6 == *(void *)(v2 + 8))
        {
          if (v6 == -1) {
LABEL_15:
          }
            sub_1906DDEB8();
          int v7 = *(const void **)v2;
LABEL_11:
          if (!memcmp(v7, v5, v6)) {
            return v2 != qword_1EB2714B0;
          }
        }
      }
      else if (v6 == *(unsigned __int8 *)(v2 + 23))
      {
        int v7 = (const void *)v2;
        if (v6 == -1) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
      v2 += 24;
      if (v2 == v3)
      {
        uint64_t v2 = v3;
        return v2 != qword_1EB2714B0;
      }
    }
  }
  return v2 != qword_1EB2714B0;
}

void sub_190717704(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0) {
      operator delete(*(void **)(v1 + v3 + 48));
    }
    v3 -= 24;
    if (v3 == -72)
    {
      __cxa_guard_abort(&qword_1EB2714A0);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_19071778C(const __CFString *a1)
{
  if (qword_1E92A0018 != -1) {
    dispatch_once(&qword_1E92A0018, &unk_1EE005FC0);
  }
  return sub_19082631C(qword_1E92A0010, a1);
}

uint64_t sub_1907177E4(uint64_t result, unint64_t a2)
{
  qword_1EB2714A8 = 0;
  qword_1EB2714B0 = 0;
  qword_1EB2714B8 = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1907180C4();
    }
    uint64_t v3 = result;
    qword_1EB2714A8 = (uint64_t)sub_1907180DC((uint64_t)&qword_1EB2714B8, a2);
    qword_1EB2714B0 = qword_1EB2714A8;
    qword_1EB2714B8 = qword_1EB2714A8 + 24 * v4;
    uint64_t v11 = qword_1EB2714A8;
    uint64_t v10 = qword_1EB2714A8;
    v8[0] = &qword_1EB2714B8;
    v8[1] = &v10;
    _DWORD v8[2] = &v11;
    char v9 = 0;
    uint64_t v5 = 24 * a2;
    uint64_t v6 = qword_1EB2714A8;
    do
    {
      if (*(char *)(v3 + 23) < 0)
      {
        sub_1906C00FC((unsigned char *)v6, *(void **)v3, *(void *)(v3 + 8));
        uint64_t v6 = v11;
      }
      else
      {
        long long v7 = *(_OWORD *)v3;
        *(void *)(v6 + 16) = *(void *)(v3 + 16);
        *(_OWORD *)uint64_t v6 = v7;
      }
      v3 += 24;
      v6 += 24;
      uint64_t v11 = v6;
      v5 -= 24;
    }
    while (v5);
    char v9 = 1;
    double result = sub_190718308((uint64_t)v8);
    qword_1EB2714B0 = v6;
  }
  return result;
}

void sub_1907178FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **sub_190717928(void **a1)
{
  uint64_t v3 = a1;
  sub_1906F4894(&v3);
  return a1;
}

BOOL sub_190717960(const __CFString *a1)
{
  if (qword_1E92A0018 != -1) {
    dispatch_once(&qword_1E92A0018, &unk_1EE005FC0);
  }
  return sub_190826404(qword_1E92A0010, a1);
}

BOOL sub_1907179B8(const __CFString *a1)
{
  if (qword_1E92A0018 != -1) {
    dispatch_once(&qword_1E92A0018, &unk_1EE005FC0);
  }
  return sub_1908264EC(qword_1E92A0010, a1);
}

uint64_t sub_190717A10(void *a1)
{
  uint64_t v1 = (void *)[a1 objectForInfoDictionaryKey:@"NSWidgetWantsLocation"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return [v1 BOOLValue];
}

BOOL sub_190717A7C()
{
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    uint64_t v1 = MainBundle;
    MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(MainBundle, @"NSLocationWhenInUseUsageDescription");
    if (!MainBundle) {
      MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(v1, @"NSLocationAlwaysAndWhenInUseUsageDescription");
    }
  }
  return MainBundle != 0;
}

os_log_t sub_190717ACC()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

uint64_t *sub_190717AFC(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *a1 = os_transaction_create();
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = (uint64_t)(id)[NSString stringWithUTF8String:a2];
    if (qword_1E929F6F0 != -1) {
      dispatch_once(&qword_1E929F6F0, &unk_1EE002D00);
    }
    uint64_t v6 = qword_1E929F6F8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[1];
      *(_DWORD *)uint64_t buf = 134349314;
      uint64_t v11 = a1;
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6F0 != -1) {
        dispatch_once(&qword_1E929F6F0, &unk_1EE002D00);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

os_log_t sub_190717CFC()
{
  os_log_t result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1E929F6F8 = (uint64_t)result;
  return result;
}

id *sub_190717D2C(id *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1[1])
  {
    if (qword_1E929F6F0 != -1) {
      dispatch_once(&qword_1E929F6F0, &unk_1EE002D00);
    }
    uint64_t v2 = qword_1E929F6F8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6F8, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[1];
      *(_DWORD *)uint64_t buf = 134349314;
      uint64_t v7 = a1;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6F0 != -1) {
        dispatch_once(&qword_1E929F6F0, &unk_1EE002D00);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLAutoOSTransaction::~CLAutoOSTransaction()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_190717F1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1906F4064(a1);
}

uint64_t sub_190717F28(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1907180C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1907180DC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  unint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1906C00FC(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  unint64_t v16 = v11 + 24;
  sub_19071804C(a1, v15);
  uint64_t v13 = a1[1];
  sub_190718278((uint64_t)v15);
  return v13;
}

void sub_190718038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190718278((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19071804C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190718158((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_1907180C4()
{
}

void *sub_1907180DC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_190718124();
  }
  return operator new(24 * a2);
}

void sub_190718124()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t sub_190718158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_1907181F8((uint64_t)v12);
  return a6;
}

uint64_t sub_1907181F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190718230(a1);
  }
  return a1;
}

void sub_190718230(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_190718278(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1907182B0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_190718308(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
  }
  return a1;
}

BOOL sub_190718368(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  uint64_t v4 = (int)(-858993459 * ((unint64_t)(a1[2] - v3) >> 3) - 1);
  for (uint64_t i = (double *)(v3 + 72); ; i += 5)
  {
    uint64_t v6 = v2;
    if ((v4 & ~(v4 >> 63)) == v2) {
      break;
    }
    double v8 = *(i - 6);
    double v7 = *(i - 5);
    double v10 = *(i - 3);
    double v9 = *(i - 2);
    if (vabdd_f64(v8, v10) >= 0.0000001 || vabdd_f64(v7, v9) >= 0.0000001)
    {
      BOOL v11 = vabdd_f64(v8, *(i - 1)) < 0.0000001;
      if (vabdd_f64(v7, *i) >= 0.0000001) {
        BOOL v11 = 0;
      }
    }
    else
    {
      BOOL v11 = 1;
    }
    double v13 = *(i - 8);
    double v12 = *(i - 7);
    if (vabdd_f64(v13, v10) >= 0.0000001 || vabdd_f64(v12, v9) >= 0.0000001)
    {
      BOOL v14 = vabdd_f64(v13, *(i - 1)) < 0.0000001;
      if (vabdd_f64(v12, *i) >= 0.0000001) {
        BOOL v14 = 0;
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    BOOL v15 = v11 || v14;
    uint64_t v2 = v6 + 1;
    if (!v15)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005640);
      }
      unint64_t v16 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = a1[4];
        *(_DWORD *)uint64_t buf = 134217984;
        uint64_t v21 = v17;
        _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005640);
        }
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::isConnectivityGood() const", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      return v6 >= v4;
    }
  }
  return v6 >= v4;
}

uint64_t sub_190718600(void *a1)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  __p = 0;
  __int16 v65 = 0;
  uint64_t v66 = 0;
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if ((int)(-858993459 * ((unint64_t)(v1 - v2) >> 3)) < 2)
  {
    uint64_t v52 = 0;
LABEL_50:
    BOOL v53 = v2 == v1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    __int16 v63 = (char *)(a1 + 1);
    while (1)
    {
      uint64_t v6 = (long long *)(v2 + 40 * v5);
      if (__p == v4)
      {
        if (v4 >= v66)
        {
          unint64_t v9 = 0x999999999999999ALL * ((v66 - v4) >> 3);
          if (v9 <= 1) {
            unint64_t v9 = 1;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v66 - v4) >> 3) >= 0x333333333333333) {
            unint64_t v10 = 0x666666666666666;
          }
          else {
            unint64_t v10 = v9;
          }
          double v12 = sub_190718FEC((uint64_t)&v66, v10);
          double v13 = (char *)__p;
          BOOL v14 = v65;
          long long v15 = *v6;
          long long v16 = v6[1];
          void v12[4] = *((void *)v6 + 4);
          *(_OWORD *)double v12 = v15;
          *((_OWORD *)v12 + 1) = v16;
          if (v14 == v13)
          {
            char v20 = v12;
          }
          else
          {
            uint64_t v17 = v12;
            do
            {
              long long v18 = *(_OWORD *)(v14 - 40);
              long long v19 = *(_OWORD *)(v14 - 24);
              char v20 = v17 - 5;
              *(v17 - 1) = *((void *)v14 - 1);
              *(_OWORD *)(v17 - 3) = v19;
              *(_OWORD *)(v17 - 5) = v18;
              v14 -= 40;
              v17 -= 5;
            }
            while (v14 != v13);
          }
          uint64_t v4 = (char *)(v12 + 5);
          __p = v20;
          __int16 v65 = (char *)(v12 + 5);
          uint64_t v66 = (char *)&v12[5 * v11];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          long long v7 = *v6;
          long long v8 = v6[1];
          *((void *)v4 + 4) = *((void *)v6 + 4);
          *(_OWORD *)uint64_t v4 = v7;
          *((_OWORD *)v4 + 1) = v8;
          v4 += 40;
        }
        __int16 v65 = v4;
      }
      uint64_t v21 = v5 + 1;
      uint64_t v22 = v2 + 40 * v5;
      uint64_t v23 = v2 + 40 * (v5 + 1);
      double v25 = *(double *)(v22 + 24);
      double v24 = *(double *)(v22 + 32);
      double v27 = *(double *)(v23 + 8);
      double v26 = *(double *)(v23 + 16);
      if (vabdd_f64(v25, v27) >= 0.0000001 || vabdd_f64(v24, v26) >= 0.0000001)
      {
        uint64_t v29 = v2 + 40 * v21;
        double v30 = *(double *)(v29 + 32);
        BOOL v28 = vabdd_f64(v25, *(double *)(v29 + 24)) < 0.0000001;
        if (vabdd_f64(v24, v30) >= 0.0000001) {
          BOOL v28 = 0;
        }
      }
      else
      {
        BOOL v28 = 1;
      }
      uint64_t v31 = v2 + 40 * v5;
      double v33 = *(double *)(v31 + 8);
      double v32 = *(double *)(v31 + 16);
      if (vabdd_f64(v33, v27) >= 0.0000001 || vabdd_f64(v32, v26) >= 0.0000001)
      {
        uint64_t v34 = v2 + 40 * v21;
        double v35 = *(double *)(v34 + 32);
        BOOL v36 = vabdd_f64(v33, *(double *)(v34 + 24)) < 0.0000001;
        if (vabdd_f64(v32, v35) >= 0.0000001) {
          BOOL v36 = 0;
        }
        if (!v28 && !v36) {
          break;
        }
      }
      __int16 v37 = (long long *)((char *)v6 + 40);
      if (v4 >= v66)
      {
        id v40 = (char *)__p;
        unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)__p) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0x666666666666666) {
          sub_190718FD4();
        }
        if (0x999999999999999ALL * ((v66 - (unsigned char *)__p) >> 3) > v42) {
          unint64_t v42 = 0x999999999999999ALL * ((v66 - (unsigned char *)__p) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v66 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
          unint64_t v43 = 0x666666666666666;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          uint64_t v44 = (char *)sub_190718FEC((uint64_t)&v66, v43);
          id v40 = (char *)__p;
          uint64_t v4 = v65;
        }
        else
        {
          uint64_t v44 = 0;
        }
        __int16 v45 = &v44[40 * v41];
        long long v46 = *v37;
        long long v47 = v37[1];
        *((void *)v45 + 4) = *((void *)v37 + 4);
        *(_OWORD *)__int16 v45 = v46;
        *((_OWORD *)v45 + 1) = v47;
        if (v4 == v40)
        {
          __int16 v51 = &v44[40 * v41];
        }
        else
        {
          id v48 = &v44[40 * v41];
          do
          {
            long long v49 = *(_OWORD *)(v4 - 40);
            long long v50 = *(_OWORD *)(v4 - 24);
            __int16 v51 = v48 - 40;
            *((void *)v48 - 1) = *((void *)v4 - 1);
            *(_OWORD *)(v48 - 24) = v50;
            *(_OWORD *)(v48 - 40) = v49;
            v4 -= 40;
            v48 -= 40;
          }
          while (v4 != v40);
        }
        uint64_t v4 = v45 + 40;
        __p = v51;
        __int16 v65 = v45 + 40;
        uint64_t v66 = &v44[40 * v43];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        long long v38 = *v37;
        long long v39 = *(long long *)((char *)v6 + 56);
        *((void *)v4 + 4) = *((void *)v6 + 9);
        *(_OWORD *)uint64_t v4 = v38;
        *((_OWORD *)v4 + 1) = v39;
        v4 += 40;
      }
      __int16 v65 = v4;
      uint64_t v2 = a1[1];
      uint64_t v1 = a1[2];
      uint64_t v5 = v21;
      if (v21 >= (int)(-858993459 * ((unint64_t)(v1 - v2) >> 3) - 1))
      {
        uint64_t v52 = (char *)__p;
        goto LABEL_50;
      }
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005640);
    }
    BOOL v56 = v63;
    unsigned int v57 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v58 = a1[4];
      unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      *(_DWORD *)uint64_t buf = 134218496;
      uint64_t v74 = v58;
      __int16 v75 = 2048;
      unint64_t v76 = v59;
      __int16 v77 = 2048;
      unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (unsigned char *)__p) >> 3);
      _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections,changing segments from %lu,to,%lu", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005640);
      }
      uint64_t v60 = a1[4];
      unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      int v67 = 134218496;
      uint64_t v68 = v60;
      __int16 v69 = 2048;
      unint64_t v70 = v61;
      __int16 v71 = 2048;
      unint64_t v72 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (unsigned char *)__p) >> 3);
      uint64_t v62 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::getConnectedRouteSegments() const", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
      BOOL v56 = v63;
    }
    if (v56 != (char *)&__p) {
      sub_190719034(v56, (char *)__p, (uint64_t)v65, 0xCCCCCCCCCCCCCCCDLL * ((v65 - (unsigned char *)__p) >> 3));
    }
    uint64_t v52 = (char *)__p;
    BOOL v53 = v65 == __p;
  }
  uint64_t v54 = !v53;
  if (v52)
  {
    __int16 v65 = v52;
    operator delete(v52);
  }
  return v54;
}

void sub_190718BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_190718BCC()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void *sub_190718BFC(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x192FCE990](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_190718DA0(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x192FCE9A0](v13);
  return a1;
}

void sub_190718D38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x192FCE9A0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x190718D18);
}

void sub_190718D8C(_Unwind_Exception *a1)
{
}

uint64_t sub_190718DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_190718F28(__p, v12, __c);
      double v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_190718F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_190718F28(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1906F442C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_190718FD4()
{
}

void *sub_190718FEC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_190718124();
  }
  return operator new(40 * a2);
}

char *sub_190719034(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  size_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      sub_190718FD4();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    os_log_t result = sub_190719170(v7, v12);
    uint64_t v14 = (char *)v7[1];
    double v13 = (void **)(v7 + 1);
    int v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    os_log_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    int v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    long long v19 = v16;
LABEL_18:
    os_log_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v13 = &v9[v17];
  return result;
}

char *sub_190719170(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_190718FD4();
  }
  os_log_t result = (char *)sub_190718FEC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void sub_190719B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_190719B64(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    uint64_t v2 = result;
    [result notifyHelperInvalidation];
    id result = (id)[v2 fConnection];
    if (result)
    {
      if (qword_1E929F608 != -1) {
        dispatch_once(&qword_1E929F608, &unk_1EE005660);
      }
      uint64_t v3 = qword_1E929F600;
      if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v6 = "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke";
        __int16 v7 = 2114;
        uint64_t v8 = [v2 fConnection];
        _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] to EEDHelperService invalidated", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F608 != -1) {
          dispatch_once(&qword_1E929F608, &unk_1EE005660);
        }
        [v2 fConnection];
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke", "CoreLocation: %s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
      return (id)[v2 setFConnection:0];
    }
  }
  return result;
}

uint64_t sub_190719D70(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v2 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v6 = "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke_2";
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection to EEDHelperService interrupted", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [Weak handleInterruption];
}

uint64_t sub_190719F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = objc_msgSend((id)objc_msgSend(v3, "fConnection"), "processIdentifier");

  return [v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

uint64_t sub_19071A558(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = objc_msgSend((id)objc_msgSend(v3, "fConnection"), "processIdentifier");

  return [v3 handleRemoteProxyError:a2 forProcessIdentifier:v4];
}

uint64_t sub_19071B134(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071B1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v6 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446722;
    unint64_t v10 = "-[CLEEDRequestHelper fetchAllPendingRequestsWithCompletion:]_block_invoke_2";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, Array:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchAllPendingRequestsWithCompletion:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071B6B8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071B728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v6 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446723;
    unint64_t v10 = "-[CLEEDRequestHelper fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke_2";
    __int16 v11 = 2113;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, request:%{private}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071BC44(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071BCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v6 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446722;
    unint64_t v10 = "-[CLEEDRequestHelper fetchCurrentStreamingRequestWithCompletion:]_block_invoke_2";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, request:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchCurrentStreamingRequestWithCompletion:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071C1C8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071C238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v6 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446722;
    unint64_t v10 = "-[CLEEDRequestHelper fetchMitigationsWithCompletion:]_block_invoke_2";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, mitigation:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchMitigationsWithCompletion:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071C780(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071C7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v4 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446466;
    uint64_t v8 = "-[CLEEDRequestHelper mediaUploadList:forRequestID:completion:]_block_invoke_2";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper mediaUploadList:forRequestID:completion:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071CCF4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071CD60(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v4 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446466;
    uint64_t v8 = "-[CLEEDRequestHelper streamingSessionEndedForRequestID:completion:]_block_invoke_2";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper streamingSessionEndedForRequestID:completion:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_19071D29C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "handleRemoteProxyError:forProcessIdentifier:", a2, objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "fConnection"), "processIdentifier"));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_19071D30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) fClientQueue]);
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005660);
  }
  uint64_t v6 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136446722;
    uint64_t v10 = "-[CLEEDRequestHelper handleResponse:forRequest:completion:]_block_invoke_2";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, updatedRequest:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005660);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLEEDRequestHelper handleResponse:forRequest:completion:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

os_log_t sub_19072EA04()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1E929F600 = (uint64_t)result;
  return result;
}

void sub_19072F200(uint64_t *a1, uint64_t *a2, double a3)
{
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
  }
  uint64_t v6 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v7 = (uint64_t *)*a2;
    }
    double v8 = *(double *)a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[7];
    uint64_t v13 = a1[8];
    uint64_t v15 = a1[9];
    uint64_t v14 = a1[10];
    uint64_t v16 = a1[11];
    double v17 = *((double *)a1 + 12) * 3.6;
    uint64_t v19 = a1[23];
    uint64_t v18 = a1[24];
    uint64_t v20 = a1[25];
    uint64_t v21 = a1[26];
    uint64_t v62 = a1[27];
    uint64_t v23 = a1[19];
    uint64_t v22 = a1[20];
    uint64_t v24 = a1[21];
    uint64_t v25 = a1[37];
    uint64_t v58 = a1[36];
    uint64_t v26 = a1[41];
    uint64_t v27 = a1[42];
    uint64_t v28 = a1[38];
    uint64_t v29 = a1[39];
    uint64_t v54 = a1[40];
    uint64_t v55 = a1[46];
    uint64_t v56 = a1[47];
    uint64_t v57 = a1[48];
    uint64_t v59 = a1[49];
    uint64_t v60 = a1[4];
    uint64_t v61 = a1[5];
    double v30 = *((float *)a1 + 44);
    double v31 = *((float *)a1 + 45);
    uint64_t v63 = a1[29];
    uint64_t v64 = a1[30];
    uint64_t v65 = a1[31];
    uint64_t v66 = a1[32];
    int v73 = *((unsigned __int8 *)a1 + 264);
    int v72 = *((unsigned __int8 *)a1 + 265);
    uint64_t v71 = a1[34];
    int v70 = *((_DWORD *)a1 + 70);
    uint64_t v32 = a1[13];
    uint64_t v69 = a1[14];
    int v68 = *((_DWORD *)a1 + 30);
    int v67 = *((_DWORD *)a1 + 31);
    double v33 = a1 + 16;
    if (*((char *)a1 + 151) < 0) {
      double v33 = (void *)*v33;
    }
    __int16 v75 = v7;
    double v77 = v8;
    uint64_t v79 = v9;
    uint64_t v81 = v10;
    uint64_t v83 = v11;
    uint64_t v89 = v12;
    uint64_t v91 = v13;
    uint64_t v93 = v14;
    uint64_t v95 = v15;
    uint64_t v97 = v16;
    uint64_t v99 = v32;
    uint64_t v101 = v18;
    uint64_t v105 = v19;
    uint64_t v107 = v20;
    uint64_t v109 = v21;
    uint64_t v113 = v23;
    int v34 = *((_DWORD *)a1 + 56);
    uint64_t v115 = v22;
    int v35 = *((_DWORD *)a1 + 86);
    uint64_t v117 = v24;
    int v36 = *((unsigned __int8 *)a1 + 228);
    uint64_t v121 = v25;
    uint64_t v37 = a1[44];
    uint64_t v123 = v28;
    int v38 = *((unsigned __int8 *)a1 + 229);
    uint64_t v125 = v26;
    int v39 = *((unsigned __int8 *)a1 + 350);
    int v85 = 0;
    int v40 = *((unsigned __int8 *)a1 + 351);
    uint64_t v111 = v62;
    int v41 = *((unsigned __int8 *)a1 + 360);
    uint64_t v119 = v58;
    int v42 = *((unsigned __int8 *)a1 + 349);
    uint64_t v127 = v27;
    int v43 = *((unsigned __int8 *)a1 + 361);
    uint64_t v129 = v29;
    int v44 = *((unsigned __int8 *)a1 + 362);
    uint64_t v131 = v54;
    int v45 = *((unsigned __int8 *)a1 + 348);
    uint64_t v133 = v55;
    int v46 = *((_DWORD *)a1 + 100);
    uint64_t v135 = v56;
    int v47 = *((_DWORD *)a1 + 101);
    uint64_t v137 = v57;
    uint64_t v48 = a1[51];
    uint64_t v139 = v59;
    uint64_t v49 = a1[6];
    uint64_t v141 = v60;
    int v50 = *((_DWORD *)a1 + 104);
    uint64_t v143 = v61;
    int v51 = *((_DWORD *)a1 + 105);
    uint64_t v149 = v63;
    uint64_t v52 = a1[53];
    *(_DWORD *)uint64_t buf = 136463619;
    uint64_t v151 = v64;
    __int16 v76 = 2050;
    __int16 v78 = 2050;
    __int16 v80 = 2050;
    __int16 v82 = 2050;
    uint64_t v153 = v65;
    __int16 v84 = 1026;
    __int16 v86 = 1026;
    int v87 = 0;
    uint64_t v155 = v66;
    __int16 v88 = 2049;
    __int16 v90 = 2049;
    __int16 v92 = 2050;
    __int16 v94 = 2050;
    __int16 v96 = 2050;
    __int16 v98 = 2050;
    __int16 v100 = 2050;
    __int16 v102 = 2050;
    double v103 = v17;
    __int16 v104 = 2050;
    __int16 v106 = 2050;
    __int16 v108 = 2050;
    __int16 v110 = 2050;
    __int16 v112 = 2049;
    __int16 v114 = 2049;
    __int16 v116 = 2050;
    __int16 v118 = 2049;
    __int16 v120 = 2049;
    __int16 v122 = 2050;
    __int16 v124 = 2049;
    __int16 v126 = 2049;
    __int16 v128 = 2049;
    __int16 v130 = 2049;
    __int16 v132 = 2049;
    __int16 v134 = 2049;
    __int16 v136 = 2049;
    __int16 v138 = 2049;
    __int16 v140 = 2049;
    __int16 v142 = 2049;
    __int16 v144 = 2050;
    double v145 = v30;
    __int16 v146 = 2050;
    double v147 = v31;
    __int16 v148 = 2050;
    __int16 v150 = 2050;
    __int16 v152 = 2050;
    __int16 v154 = 2050;
    __int16 v156 = 1026;
    int v157 = v73;
    __int16 v158 = 1026;
    int v159 = v72;
    __int16 v160 = 2050;
    uint64_t v161 = v71;
    __int16 v162 = 1026;
    int v163 = v70;
    __int16 v164 = 2049;
    uint64_t v165 = v69;
    __int16 v166 = 1026;
    int v167 = v68;
    __int16 v168 = 1026;
    int v169 = v67;
    __int16 v170 = 2081;
    double v171 = v33;
    __int16 v172 = 1026;
    int v173 = v34;
    __int16 v174 = 1026;
    int v175 = v35;
    __int16 v176 = 1026;
    int v177 = v36;
    __int16 v178 = 2050;
    uint64_t v179 = v37;
    __int16 v180 = 1026;
    int v181 = v38;
    __int16 v182 = 1026;
    int v183 = v39;
    __int16 v184 = 1026;
    int v185 = v40;
    __int16 v186 = 1026;
    int v187 = v41;
    __int16 v188 = 1026;
    int v189 = v42;
    __int16 v190 = 1026;
    int v191 = v43;
    __int16 v192 = 1026;
    int v193 = v44;
    __int16 v194 = 1026;
    int v195 = v45;
    __int16 v196 = 1026;
    int v197 = v46;
    __int16 v198 = 1026;
    int v199 = v47;
    __int16 v200 = 2050;
    uint64_t v201 = v48;
    __int16 v202 = 2050;
    uint64_t v203 = v49;
    __int16 v204 = 1026;
    int v205 = v50;
    __int16 v206 = 1026;
    int v207 = v51;
    __int16 v208 = 2050;
    double v209 = a3;
    __int16 v210 = 2050;
    uint64_t v211 = v52;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,trip,%{public}lld,T,%{public}.1lf,machT,%{public}.2lf,contT,%{public}.2lf,gpsTMs,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crse,%{public}.1lf,crseUnc,%{public}.1lf,spdKph,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,pSnapLL,%{private}.7lf,%{private}.7lf,rwSnapLL,%{private}.7lf,%{private}.7lf,rwSnapOfstLL,%{private}.7lf,%{private}.7lf,rwFSnapOfstLL,%{private}.7lf,%{private}.7lf,rwLL,%{private}.7lf,%{private}.7lf,score,%{public}.1lf,ratio,%{public}.1lf,varFac,%{public}.7g,deltaAz,%{public}.3lf,alngTrk,%{public}.3lf,acrsTrk,%{public}.3lf,usable,%{public}d,ambiguous,%{public}d,proj,%{public}.3lf,type,%{public}d,rseg,%{private}lld,frc,%{public}d,fow,%{public}d,road,\"%{private}s\",activity,%{public}d,actConf,%{public}d,static,%{public}d,staticSetAt,%{public}.1lf,mount,%{public}d,fitness,%{public}d,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,favGPS,%{public}d,gnssCont,%{public}d,locationType,%{public}d,lifespan,%{public}.1lf,rawCourse,%{public}.1lf,sigEnv,%{public}d,sigEnvFid,%{public}d,latency,%{public}.1lf,rw,%{public}.2lf", buf, 0x25Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
    }
    BOOL v53 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLMapCrumb::debugOutput(const std::string, double)", "CoreLocation: %s\n", v53);
    if (v53 != (char *)buf) {
      free(v53);
    }
  }
}

std::string *sub_19072FBA8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x100uLL, "trip,%lld", *(void *)a1);
  MEMORY[0x192FCE920](a2, __str);
  snprintf(__str, 0x100uLL, ",T,%.1lf", *(double *)(a1 + 8));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",machT,%.2lf", *(double *)(a1 + 16));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",contT,%.2lf", *(double *)(a1 + 24));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gpsTMs,%d,%d", 0, 0);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",LL,%.7lf,%.7lf", *(double *)(a1 + 56), *(double *)(a1 + 64));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",hunc,%.1lf", *(double *)(a1 + 80));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alt,%.1lf", *(double *)(a1 + 72));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",vunc,%.1lf", *(double *)(a1 + 88));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crse,%.1lf", *(double *)(a1 + 104));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crseUnc,%.1lf", *(double *)(a1 + 192));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdKph,%.3lf", *(double *)(a1 + 96) * 3.6);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdUncMps,%.1lf", *(double *)(a1 + 184));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",a95,%.1lf", *(double *)(a1 + 200));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",b95,%.1lf", *(double *)(a1 + 208));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",theta,%.1lf", *(double *)(a1 + 216));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapLL,%.7lf,%.7lf", *(double *)(a1 + 152), *(double *)(a1 + 160));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapCrse,%.1lf", *(double *)(a1 + 168));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapLL,%.7lf,%.7lf", *(double *)(a1 + 288), *(double *)(a1 + 296));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapCrse,%.1lf", *(double *)(a1 + 304));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",pSnapLL,%.7lf,%.7lf", *(double *)(a1 + 328), *(double *)(a1 + 336));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapLL,%.7lf,%.7lf", *(double *)(a1 + 312), *(double *)(a1 + 320));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 368), *(double *)(a1 + 376));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwFSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 384), *(double *)(a1 + 392));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwLL,%.7lf,%.7lf", *(double *)(a1 + 32), *(double *)(a1 + 40));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",score,%.1lf", *(float *)(a1 + 176));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ratio,%.1lf", *(float *)(a1 + 180));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",varFac,%.7g", *(double *)(a1 + 232));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",deltaAz,%.3lf", *(double *)(a1 + 240));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alngTrk,%.3lf", *(double *)(a1 + 248));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",acrsTrk,%.3lf", *(double *)(a1 + 256));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",usable,%d", *(unsigned __int8 *)(a1 + 264));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ambiguous,%d", *(unsigned __int8 *)(a1 + 265));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",proj,%.3lf", *(double *)(a1 + 272));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",type,%d", *(_DWORD *)(a1 + 280));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rseg,%lld", *(void *)(a1 + 112));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",frc,%d", *(_DWORD *)(a1 + 120));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fow,%d", *(_DWORD *)(a1 + 124));
  std::string::append(a2, __str);
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v9, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v11 >= 0) {
    std::string::size_type v7 = HIBYTE(v11);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x100uLL, ",activity,%d", *(_DWORD *)(a1 + 224));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",actConf,%d", *(_DWORD *)(a1 + 344));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",static,%d", *(unsigned __int8 *)(a1 + 228));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",staticSetAt,%.1lf", *(double *)(a1 + 352));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",mount,%d", *(unsigned __int8 *)(a1 + 229));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fitness,%d", *(unsigned __int8 *)(a1 + 350));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",shifted,%d", *(unsigned __int8 *)(a1 + 351));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",propagated,%d", *(unsigned __int8 *)(a1 + 360));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rail,%d", *(unsigned __int8 *)(a1 + 349));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",bridge,%d", *(unsigned __int8 *)(a1 + 361));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",tunnel,%d", *(unsigned __int8 *)(a1 + 362));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",favGPS,%d", *(unsigned __int8 *)(a1 + 348));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gnssCont,%d", *(_DWORD *)(a1 + 400));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",locationType,%d", *(_DWORD *)(a1 + 404));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",lifespan,%.1lf", *(double *)(a1 + 408));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rawCourse,%.1lf", *(double *)(a1 + 48));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rw,%.2lf", *(double *)(a1 + 424));
  return std::string::append(a2, __str);
}

void sub_190730538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(v23 + 23) < 0) {
    operator delete(*(void **)v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_190730588(uint64_t a1, double *a2, uint64_t *a3, double *a4, double *a5, double a6, double a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  double v14 = *(double *)(a1 + 56);
  double v15 = *(double *)(a1 + 64);
  if (fabs(v14) < 0.00003 && fabs(v15) < 0.00003
    || fabs(*(double *)(a1 + 32)) < 0.00003 && fabs(*(double *)(a1 + 40)) < 0.00003)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v48 = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_ERROR, "CLMM, %{public}.1lf, null island", buf, 0xCu);
    }
    BOOL v18 = 0;
    if (!sub_1906CB57C(115, 0)) {
      return v18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
    }
    uint64_t v29 = *(void *)(a1 + 8);
    int v35 = 134349056;
    uint64_t v36 = v29;
    double v30 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
    return 0;
  }
  double v33 = 0.0;
  double v34 = 0.0;
  double v32 = 0.0;
  if (!sub_1906DA778(a2, &v33, &v34, &v32, v14, v15, *(double *)(a1 + 72), a6, a7, *(double *)(a1 + 72))) {
    return 0;
  }
  BOOL v18 = sub_190839874(a2, a4, a5, &v31, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 72), v33, v34, v32);
  if (v18)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
    }
    uint64_t v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = a3;
      if (*((char *)a3 + 23) < 0) {
        uint64_t v22 = (uint64_t *)*a3;
      }
      double v23 = *a4;
      double v24 = *a5;
      *(_DWORD *)uint64_t buf = 134350339;
      uint64_t v48 = v21;
      __int16 v49 = 2080;
      int v50 = v22;
      __int16 v51 = 2049;
      double v52 = a6;
      __int16 v53 = 2049;
      double v54 = a7;
      __int16 v55 = 2049;
      double v56 = v23;
      __int16 v57 = 2049;
      double v58 = v24;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, New Snap Coordinates,%s,inSnapLat,%{private}.8lf,inSnapLon,%{private}.8lf,outSnapLat,%{private}.8lf,outSnapLon,%{private}.8lf", buf, 0x3Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0056A0);
      }
      uint64_t v25 = *(void *)(a1 + 8);
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t *)*a3;
      }
      double v26 = *a4;
      double v27 = *a5;
      int v35 = 134350339;
      uint64_t v36 = v25;
      __int16 v37 = 2080;
      int v38 = a3;
      __int16 v39 = 2049;
      double v40 = a6;
      __int16 v41 = 2049;
      double v42 = a7;
      __int16 v43 = 2049;
      double v44 = v26;
      __int16 v45 = 2049;
      double v46 = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  return v18;
}

os_log_t sub_1907309F8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

unint64_t sub_190730A28(void *a1, unint64_t *a2, unint64_t *a3, double a4, double a5)
{
  std::string v9 = a1;
  for (unint64_t i = *a2; i < [a1 count]; ++i)
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", i), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
    if (v11 >= a4)
    {
      *a2 = i;
      break;
    }
    a1 = v9;
  }
  for (unint64_t j = *a2; ; ++j)
  {
    unint64_t result = [v9 count];
    if (j >= result) {
      break;
    }
    unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", j), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
    if (v14 >= a5)
    {
      *a3 = j;
      return result;
    }
  }
  return result;
}

unint64_t sub_190730AE0(void *a1, unint64_t *a2, unint64_t *a3, double a4, double a5)
{
  std::string v9 = a1;
  for (unint64_t i = *a2; i < [a1 count]; ++i)
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", i), "timestamp"), "timeIntervalSinceReferenceDate");
    if (v11 >= a4)
    {
      *a2 = i;
      break;
    }
    a1 = v9;
  }
  for (unint64_t j = *a2; ; ++j)
  {
    unint64_t result = [v9 count];
    if (j >= result) {
      break;
    }
    unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", j), "timestamp"), "timeIntervalSinceReferenceDate");
    if (v14 >= a5)
    {
      *a3 = j;
      return result;
    }
  }
  return result;
}

uint64_t sub_190730B98(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  objc_msgSend(a2, "setArray:", (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:copyItems:", a1, 1));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(a2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) setLocationReconstructionType:1];
      }
      while (v4 != v6);
      uint64_t result = [a2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_190730CAC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C60);
    }
    long long v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C60);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T &CMMatrix<double, 2>::operator()(size_t, size_t) [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002C60);
    }
    long long v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 2;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002C60);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T &CMMatrix<double, 2>::operator()(size_t, size_t) [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 8 * (a2 + 2 * a3);
}

void sub_190731008(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  if (sqrtf((float)(v2 * v2) + (float)(v3 * v3)) != 0.0)
  {
    float v4 = *a2;
    float v5 = a2[1];
    if (sqrtf((float)(v4 * v4) + (float)(v5 * v5)) != 0.0)
    {
      uint64_t v6 = 0;
      float v19 = *a1;
      float v20 = v3;
      float v7 = 0.0;
      int v21 = 0;
      do
      {
        float v7 = v7 + (float)(*(float *)((char *)&v19 + v6) * *(float *)((char *)&v19 + v6));
        v6 += 4;
      }
      while (v6 != 12);
      float v8 = 0.0;
      if (sqrtf(v7) <= 0.00000011921)
      {
        float v12 = 0.0;
      }
      else
      {
        uint64_t v9 = 0;
        float v10 = 0.0;
        do
        {
          float v10 = v10 + (float)(*(float *)((char *)&v19 + v9) * *(float *)((char *)&v19 + v9));
          v9 += 4;
        }
        while (v9 != 12);
        float v11 = sqrtf(v10);
        float v2 = v2 / v11;
        float v3 = v3 / v11;
        float v12 = 0.0 / v11;
      }
      uint64_t v13 = 0;
      float v19 = v4;
      float v20 = v5;
      int v21 = 0;
      do
      {
        float v8 = v8 + (float)(*(float *)((char *)&v19 + v13) * *(float *)((char *)&v19 + v13));
        v13 += 4;
      }
      while (v13 != 12);
      float v14 = sqrtf(v8);
      float v15 = 0.0;
      if (v14 > 0.00000011921)
      {
        for (uint64_t i = 0; i != 12; i += 4)
          float v15 = v15 + (float)(*(float *)((char *)&v19 + i) * *(float *)((char *)&v19 + i));
        float v17 = sqrtf(v15);
        float v4 = v4 / v17;
        float v5 = v5 / v17;
        float v15 = 0.0 / v17;
      }
      float v18 = (float)((float)(v12 * v15) + (float)(v3 * v5)) + (float)(v2 * v4);
      if (v18 > -1.0 && v18 < 1.0) {
        acos(v18);
      }
    }
  }
}

BOOL sub_1907311B0(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v27 = xmmword_1908820F0;
  uint64_t v30 = 0x3FF0000000000000;
  double v25 = 0.0;
  uint64_t v26 = 0;
  [a2 latitude];
  double v9 = v8;
  [a2 longitude];
  BOOL v11 = sub_1906DA778((double *)&v27, (double *)&v26, &v25, &v24, a3, a4, 0.0, v9, v10, 0.0);
  if (v11)
  {
    objc_msgSend((id)objc_msgSend(a2, "timestamp"), "timeIntervalSinceReferenceDate");
    uint64_t v12 = v26;
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v12;
    *(double *)(a1 + 16) = -v25;
    [a2 horizontalAccuracy];
    *(void *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 32) = [a2 signalEnvironmentType];
  }
  else
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE0056C0);
    }
    float v15 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      [a2 latitude];
      uint64_t v17 = v16;
      [a2 longitude];
      *(_DWORD *)uint64_t buf = 134218752;
      uint64_t v40 = v17;
      __int16 v41 = 2048;
      uint64_t v42 = v18;
      __int16 v43 = 2048;
      double v44 = a3;
      __int16 v45 = 2048;
      double v46 = a4;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "[CLTrajectorySmootherUtilities] Conversion from lat/lon to NWU failed. location sample, latitude, %.1f, longitude, %.1f, selected origin, latitude, %.1f, longitude, %.1f.", buf, 0x2Au);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE0056C0);
      }
      [a2 latitude];
      uint64_t v21 = v20;
      [a2 longitude];
      int v31 = 134218752;
      uint64_t v32 = v21;
      __int16 v33 = 2048;
      uint64_t v34 = v22;
      __int16 v35 = 2048;
      double v36 = a3;
      __int16 v37 = 2048;
      double v38 = a4;
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPTSUtility::LocationInNWU::convertLatitudeLongitudeToNWU(CLTripSegmentLocation * _Nonnull, const double, const double)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  return v11;
}

CLTripSegmentLocation *sub_19073148C(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v17 = xmmword_1908820F0;
  uint64_t v20 = 0x3FF0000000000000;
  double v15 = 0.0;
  double v16 = 0.0;
  sub_190839874((double *)&v17, &v16, &v15, &v14, a6, a7, 0.0, a4, -a5, 0.0);
  double v10 = [CLTripSegmentLocation alloc];
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
  uint64_t v12 = [(CLTripSegmentLocation *)v10 initWithTime:v11 latitude:1 longitude:v16 horizontalAccuracy:v15 course:a3 courseAccuracy:-1.0 speed:-1.0 speedAccuracy:-1.0 altitude:-1.0 altitudeAccuracy:-1.0 locType:0xBFF0000000000000];
  [(CLTripSegmentLocation *)v12 setSignalEnvironmentType:a1];
  [(CLTripSegmentLocation *)v12 setLocationReconstructionType:2];
  return v12;
}

void sub_190731588(void *a1@<X0>, unint64_t a2@<X1>, void **a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  v125[0] = 0;
  v125[1] = 0;
  __int16 v126 = 0;
  unint64_t v9 = [a1 count];
  if (v9 <= 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  unint64_t v10 = v9;
  uint64_t v11 = 0;
  __p = 0;
  uint64_t v123 = 0;
  __int16 v124 = 0;
  uint64_t v119 = 0;
  __int16 v120 = 0;
  uint64_t v121 = 0;
  do
  {
    uint64_t v12 = (void *)[a1 objectAtIndex:v11];
    if ([v12 locType] == 1)
    {
      uint64_t v13 = v123;
      if (v123 >= v124)
      {
        long long v17 = (char *)__p;
        uint64_t v18 = (v123 - (unsigned char *)__p) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_184;
        }
        uint64_t v20 = v124 - (unsigned char *)__p;
        if ((v124 - (unsigned char *)__p) >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v22 = (char *)sub_190732A30((uint64_t)&v124, v21);
          long long v17 = (char *)__p;
          uint64_t v13 = v123;
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v29 = &v22[8 * v18];
        *(void *)uint64_t v29 = v11;
        double v14 = v29 + 8;
        while (v13 != v17)
        {
          uint64_t v30 = *((void *)v13 - 1);
          v13 -= 8;
          *((void *)v29 - 1) = v30;
          v29 -= 8;
        }
        __p = v29;
        uint64_t v123 = v14;
        __int16 v124 = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v123 = v11;
        double v14 = v13 + 8;
      }
      uint64_t v123 = v14;
    }
    else if ([v12 locType] == 4)
    {
      double v15 = v120;
      if (v120 >= v121)
      {
        double v23 = v119;
        uint64_t v24 = (v120 - v119) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
LABEL_184:
        }
          sub_190718FD4();
        uint64_t v26 = v121 - v119;
        if ((v121 - v119) >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_190732A30((uint64_t)&v121, v27);
          double v23 = v119;
          double v15 = v120;
        }
        else
        {
          uint64_t v28 = 0;
        }
        int v31 = &v28[8 * v24];
        *(void *)int v31 = v11;
        double v16 = v31 + 8;
        while (v15 != v23)
        {
          uint64_t v32 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v31 - 1) = v32;
          v31 -= 8;
        }
        uint64_t v119 = v31;
        uint64_t v121 = &v28[8 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)__int16 v120 = v11;
        double v16 = v120 + 8;
      }
      __int16 v120 = v16;
    }
    ++v11;
  }
  while (v11 != v10);
  __int16 v33 = v123;
  if ((unint64_t)(v123 - (unsigned char *)__p) < 0x10)
  {
    *(_OWORD *)a3 = *(_OWORD *)v125;
LABEL_176:
    a3[2] = v126;
    a3 = v125;
    goto LABEL_177;
  }
  uint64_t v34 = (v123 - (unsigned char *)__p) >> 3;
  uint64_t v35 = v34 - 1;
  if (v34 != 1)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    char v38 = 0;
    uint64_t v117 = (void **)&v126;
    while (1)
    {
      uint64_t v39 = *((void *)__p + v36++);
      uint64_t v40 = *((void *)__p + v36);
      __int16 v41 = objc_msgSend(a1, "objectAtIndex:", v39, v117);
      uint64_t v42 = (void *)[a1 objectAtIndex:v40];
      [v41 horizontalAccuracy];
      ++v37;
      if (v43 >= 0.0)
      {
        [v41 horizontalAccuracy];
        if (v44 <= 5.5) {
          break;
        }
      }
      objc_msgSend((id)objc_msgSend(v42, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v41, "timestamp"));
      if (fabs(v45) <= 20.0)
      {
        if (v37 < a2) {
          goto LABEL_132;
        }
        if (v125[0] == v125[1])
        {
          BOOL v56 = 1;
        }
        else
        {
          objc_msgSend((id)objc_msgSend(v41, "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", *((void *)v125[1] - 1)), "timestamp"));
          BOOL v56 = fabs(v55) > 2.5;
        }
        [v41 horizontalAccuracy];
        if (v70 < 0.0) {
          goto LABEL_132;
        }
        [v41 horizontalAccuracy];
        if (v71 > a4 || !v56) {
          goto LABEL_132;
        }
        __int16 v57 = (uint64_t *)v125[1];
        if (v125[1] >= v126)
        {
          uint64_t v61 = (uint64_t *)v125[0];
          int64_t v73 = ((char *)v125[1] - (char *)v125[0]) >> 3;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61) {
            sub_190718FD4();
          }
          uint64_t v75 = v126 - (char *)v125[0];
          if ((v126 - (char *)v125[0]) >> 2 > v74) {
            unint64_t v74 = v75 >> 2;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v74;
          }
          if (v65)
          {
            uint64_t v66 = (char *)sub_190732A30((uint64_t)v117, v65);
            uint64_t v61 = (uint64_t *)v125[0];
            __int16 v57 = (uint64_t *)v125[1];
          }
          else
          {
            uint64_t v66 = 0;
          }
          double v77 = &v66[8 * v73];
          *(void *)double v77 = v39;
          __int16 v76 = v77 + 8;
          while (v57 != v61)
          {
            uint64_t v85 = *--v57;
            *((void *)v77 - 1) = v85;
            v77 -= 8;
          }
LABEL_128:
          v125[0] = v77;
          v125[1] = v76;
          __int16 v126 = &v66[8 * v65];
          if (v61) {
            operator delete(v61);
          }
          char v38 = 1;
          goto LABEL_131;
        }
        goto LABEL_64;
      }
      if (v38)
      {
        [v41 horizontalAccuracy];
        if (v46 >= 0.0)
        {
          [v41 horizontalAccuracy];
          if (v47 <= a4)
          {
            uint64_t v48 = (uint64_t *)v125[1];
            if (v125[1] < v126) {
              goto LABEL_98;
            }
            __int16 v49 = (uint64_t *)v125[0];
            int64_t v50 = ((char *)v125[1] - (char *)v125[0]) >> 3;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 61) {
              sub_190718FD4();
            }
            uint64_t v52 = v126 - (char *)v125[0];
            if ((v126 - (char *)v125[0]) >> 2 > v51) {
              unint64_t v51 = v52 >> 2;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              double v54 = (char *)sub_190732A30((uint64_t)v117, v53);
              __int16 v49 = (uint64_t *)v125[0];
              uint64_t v48 = (uint64_t *)v125[1];
            }
            else
            {
              double v54 = 0;
            }
            __int16 v82 = &v54[8 * v50];
            *(void *)__int16 v82 = v39;
            __int16 v76 = v82 + 8;
            while (v48 != v49)
            {
              uint64_t v84 = *--v48;
              *((void *)v82 - 1) = v84;
              v82 -= 8;
            }
            goto LABEL_121;
          }
        }
      }
      else
      {
        [v41 horizontalAccuracy];
        if (v59 >= 0.0)
        {
          [v41 horizontalAccuracy];
          BOOL v60 = v67 <= a5;
        }
        else
        {
          BOOL v60 = 0;
        }
        if (v125[0] == v125[1])
        {
          BOOL v69 = 1;
        }
        else
        {
          objc_msgSend((id)objc_msgSend(v41, "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", *((void *)v125[1] - 1)), "timestamp"));
          BOOL v69 = v68 > 60.0;
        }
        if (v37 >= a2) {
          BOOL v69 = 1;
        }
        if (v60 && v69)
        {
          uint64_t v48 = (uint64_t *)v125[1];
          if (v125[1] < v126)
          {
LABEL_98:
            char v38 = 0;
            unint64_t v37 = 0;
            *uint64_t v48 = v39;
            double v58 = v48 + 1;
LABEL_99:
            __int16 v76 = v58;
LABEL_131:
            v125[1] = v76;
            goto LABEL_132;
          }
          __int16 v49 = (uint64_t *)v125[0];
          int64_t v79 = ((char *)v125[1] - (char *)v125[0]) >> 3;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61) {
            sub_190718FD4();
          }
          uint64_t v81 = v126 - (char *)v125[0];
          if ((v126 - (char *)v125[0]) >> 2 > v80) {
            unint64_t v80 = v81 >> 2;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v80;
          }
          if (v53)
          {
            double v54 = (char *)sub_190732A30((uint64_t)v117, v53);
            __int16 v49 = (uint64_t *)v125[0];
            uint64_t v48 = (uint64_t *)v125[1];
          }
          else
          {
            double v54 = 0;
          }
          __int16 v82 = &v54[8 * v79];
          *(void *)__int16 v82 = v39;
          __int16 v76 = v82 + 8;
          while (v48 != v49)
          {
            uint64_t v83 = *--v48;
            *((void *)v82 - 1) = v83;
            v82 -= 8;
          }
LABEL_121:
          v125[0] = v82;
          v125[1] = v76;
          __int16 v126 = &v54[8 * v53];
          if (v49) {
            operator delete(v49);
          }
          char v38 = 0;
          unint64_t v37 = 0;
          goto LABEL_131;
        }
      }
      char v38 = 0;
      unint64_t v37 = 0;
LABEL_132:
      if (v36 == v35)
      {
        __int16 v33 = v123;
        goto LABEL_135;
      }
    }
    __int16 v57 = (uint64_t *)v125[1];
    if (v125[1] >= v126)
    {
      uint64_t v61 = (uint64_t *)v125[0];
      int64_t v62 = ((char *)v125[1] - (char *)v125[0]) >> 3;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 61) {
        sub_190718FD4();
      }
      uint64_t v64 = v126 - (char *)v125[0];
      if ((v126 - (char *)v125[0]) >> 2 > v63) {
        unint64_t v63 = v64 >> 2;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        uint64_t v66 = (char *)sub_190732A30((uint64_t)v117, v65);
        uint64_t v61 = (uint64_t *)v125[0];
        __int16 v57 = (uint64_t *)v125[1];
      }
      else
      {
        uint64_t v66 = 0;
      }
      double v77 = &v66[8 * v62];
      *(void *)double v77 = v39;
      __int16 v76 = v77 + 8;
      while (v57 != v61)
      {
        uint64_t v78 = *--v57;
        *((void *)v77 - 1) = v78;
        v77 -= 8;
      }
      goto LABEL_128;
    }
LABEL_64:
    *__int16 v57 = v39;
    double v58 = v57 + 1;
    char v38 = 1;
    goto LABEL_99;
  }
  unint64_t v37 = 0;
LABEL_135:
  uint64_t v86 = *((void *)v33 - 1);
  int v87 = (void *)[a1 objectAtIndex:v86];
  [v87 horizontalAccuracy];
  if (v88 >= 0.0)
  {
    [v87 horizontalAccuracy];
    BOOL v89 = v90 <= a5;
  }
  else
  {
    BOOL v89 = 0;
  }
  [v87 horizontalAccuracy];
  if (v91 >= 0.0)
  {
    [v87 horizontalAccuracy];
    BOOL v92 = v93 <= 5.5;
  }
  else
  {
    BOOL v92 = 0;
  }
  if (v125[0] == v125[1])
  {
    BOOL v95 = 1;
    if (v92) {
      goto LABEL_143;
    }
LABEL_145:
    __int16 v96 = (char *)v125[1];
    if (!v89 || v37 < a2 || !v95) {
      goto LABEL_164;
    }
    goto LABEL_148;
  }
  objc_msgSend((id)objc_msgSend(v87, "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", *((void *)v125[1] - 1)), "timestamp"));
  BOOL v95 = fabs(v94) > 2.5;
  if (!v92) {
    goto LABEL_145;
  }
LABEL_143:
  __int16 v96 = (char *)v125[1];
LABEL_148:
  if (v96 >= v126)
  {
    __int16 v98 = (char *)v125[0];
    uint64_t v99 = (v96 - (char *)v125[0]) >> 3;
    unint64_t v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 61) {
      sub_190718FD4();
    }
    uint64_t v101 = v126 - (char *)v125[0];
    if ((v126 - (char *)v125[0]) >> 2 > v100) {
      unint64_t v100 = v101 >> 2;
    }
    BOOL v102 = (unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v102) {
      unint64_t v103 = v100;
    }
    if (v103)
    {
      unint64_t v103 = (unint64_t)sub_190732A30((uint64_t)&v126, v103);
      uint64_t v105 = v104;
      __int16 v98 = (char *)v125[0];
      __int16 v96 = (char *)v125[1];
    }
    else
    {
      uint64_t v105 = 0;
    }
    __int16 v106 = (uint64_t *)(v103 + 8 * v99);
    uint64_t v107 = (char *)(v103 + 8 * v105);
    *__int16 v106 = v86;
    uint64_t v97 = v106 + 1;
    while (v96 != v98)
    {
      uint64_t v108 = *((void *)v96 - 1);
      v96 -= 8;
      *--__int16 v106 = v108;
    }
    v125[0] = v106;
    v125[1] = v97;
    __int16 v126 = v107;
    if (v98) {
      operator delete(v98);
    }
  }
  else
  {
    *(void *)__int16 v96 = v86;
    uint64_t v97 = v96 + 8;
  }
  v125[1] = v97;
  __int16 v96 = (char *)v97;
LABEL_164:
  if (v96 == v125[0])
  {
    *a3 = v96;
    a3[1] = v96;
    goto LABEL_176;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  uint64_t v109 = v125[0];
  if (v125[1] != v125[0])
  {
    uint64_t v110 = 0;
    unint64_t v111 = 0;
    while (1)
    {
      objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v109[v111]), "horizontalAccuracy");
      if (v112 <= 35.0) {
        break;
      }
      ++v111;
      uint64_t v109 = v125[0];
      v110 -= 8;
      if (v111 >= ((char *)v125[1] - (char *)v125[0]) >> 3) {
        goto LABEL_177;
      }
    }
    __int16 v114 = (char *)v125[0];
    uint64_t v113 = (char *)v125[1];
    if (v111)
    {
      uint64_t v115 = (char *)v125[0] - v110;
      size_t v116 = (char *)v125[1] - (char *)v125[0] + v110;
      if (v115 != v125[1]) {
        memmove(v125[0], (char *)v125[0] + 8 * v111, v116);
      }
      uint64_t v113 = &v114[v116];
      v125[1] = &v114[v116];
      __int16 v114 = (char *)v125[0];
    }
    *a3 = v114;
    a3[1] = v113;
    goto LABEL_176;
  }
LABEL_177:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v119) {
    operator delete(v119);
  }
  if (__p)
  {
    uint64_t v123 = (char *)__p;
    operator delete(__p);
  }
  if (v125[0])
  {
    v125[1] = v125[0];
    operator delete(v125[0]);
  }
}

void sub_190731F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190731FBC(void *a1, void *a2)
{
  unint64_t v4 = 0;
  __p = 0;
  unint64_t v74 = 0;
  uint64_t v75 = 0;
  while (v4 < [a1 count])
  {
    if (objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v4), "locType") == 1)
    {
      float v5 = v74;
      if (v74 >= v75)
      {
        float v7 = (unint64_t *)__p;
        uint64_t v8 = ((char *)v74 - (unsigned char *)__p) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_190718FD4();
        }
        uint64_t v10 = (char *)v75 - (unsigned char *)__p;
        if (((char *)v75 - (unsigned char *)__p) >> 2 > v9) {
          unint64_t v9 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)sub_190732A30((uint64_t)&v75, v11);
          float v7 = (unint64_t *)__p;
          float v5 = v74;
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v13 = (unint64_t *)&v12[8 * v8];
        *uint64_t v13 = v4;
        uint64_t v6 = v13 + 1;
        while (v5 != v7)
        {
          unint64_t v14 = *--v5;
          *--uint64_t v13 = v14;
        }
        __p = v13;
        unint64_t v74 = v6;
        uint64_t v75 = (unint64_t *)&v12[8 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *unint64_t v74 = v4;
        uint64_t v6 = v5 + 1;
      }
      unint64_t v74 = v6;
    }
    ++v4;
  }
  uint64_t v15 = objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", *(void *)__p), "timestamp");
  double v70 = 0;
  double v71 = 0;
  int v72 = 0;
  double v16 = __p;
  if (v74 == __p)
  {
    uint64_t v30 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    uint64_t v17 = v15;
    unint64_t v18 = 0;
    do
    {
      unint64_t v19 = (void *)[a1 objectAtIndex:v16[v18]];
      objc_msgSend((id)objc_msgSend(v19, "timestamp"), "timeIntervalSinceDate:", v17);
      unint64_t v21 = v71;
      if (v20 < 0.0 || v20 > 180.0) {
        break;
      }
      if (v71 >= v72)
      {
        uint64_t v22 = (v71 - (unsigned char *)v70) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_190718FD4();
        }
        unint64_t v23 = (v72 - (unsigned char *)v70) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if ((unint64_t)(v72 - (unsigned char *)v70) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v25 = (char *)sub_190732A30((uint64_t)&v72, v24);
        }
        else {
          unint64_t v25 = 0;
        }
        uint64_t v26 = &v25[8 * v22];
        *(void *)uint64_t v26 = v19;
        unint64_t v21 = v26 + 8;
        uint64_t v28 = (char *)v70;
        unint64_t v27 = v71;
        if (v71 != v70)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          unint64_t v27 = (char *)v70;
        }
        double v70 = v26;
        double v71 = v21;
        int v72 = &v25[8 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)double v71 = v19;
        v21 += 8;
      }
      double v71 = v21;
      ++v18;
      double v16 = __p;
    }
    while (v18 < ((char *)v74 - (unsigned char *)__p) >> 3);
    uint64_t v30 = v70;
  }
  uint64_t v31 = 0;
  if ((unint64_t)(v21 - v30) >= 0x10)
  {
    uint64_t v32 = 0;
    double v33 = 10.5;
    do
    {
      for (uint64_t i = (id *)v70; i != (id *)v71; ++i)
      {
        id v35 = *i;
        [*i horizontalAccuracy];
        if (v36 > 0.0)
        {
          [v35 horizontalAccuracy];
          if (v37 < v33)
          {
            if (v32)
            {
              [v32 distanceFromLocation:v35];
              double v39 = v38;
              [v32 horizontalAccuracy];
              double v41 = v40;
              [v35 horizontalAccuracy];
              if (v39 > v41 + v42) {
                goto LABEL_57;
              }
            }
            else
            {
              uint64_t v32 = v35;
            }
          }
        }
      }
      id v35 = 0;
LABEL_57:
      double v33 = v33 + 1.0;
    }
    while (v33 < 60.0 && v35 == 0);
    if (v35 && v32)
    {
      uint64_t v44 = objc_msgSend((id)objc_msgSend(v32, "timestamp"), "compare:", objc_msgSend(v35, "timestamp"));
      if (v44 == 1) {
        double v45 = v35;
      }
      else {
        double v45 = v32;
      }
      if (v44 != 1) {
        uint64_t v32 = v35;
      }
      [v45 latitude];
      double v47 = v46;
      [v45 longitude];
      double v49 = v48;
      int v69 = 0;
      memset(v68, 0, sizeof(v68));
      sub_1907311B0((uint64_t)v68, v45, v47, v48);
      int v67 = 0;
      memset(v66, 0, sizeof(v66));
      sub_1907311B0((uint64_t)v66, v32, v47, v49);
      unint64_t v64 = 0;
      unint64_t v65 = 0;
      sub_190730A28(a2, &v65, &v64, v68[0].f64[0], v66[0].f64[0]);
      unint64_t v51 = v64;
      unint64_t v50 = v65;
      uint64_t v31 = 0;
      double v52 = 0.0;
      double v53 = 0.0;
      while (v50 <= v51)
      {
        double v54 = (void *)[a2 objectAtIndexedSubscript:v50];
        if (objc_msgSend((id)objc_msgSend(v54, "deltaPosition_m"), "isValid"))
        {
          objc_msgSend((id)objc_msgSend(v54, "deltaPosition_m"), "X");
          double v56 = v55;
          objc_msgSend((id)objc_msgSend(v54, "deltaPosition_m"), "Y");
          double v52 = v52 + v56;
          double v53 = v53 + v57;
        }
        ++v50;
      }
      float32x2_t v63 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)((char *)v66 + 8), *(float64x2_t *)((char *)v68 + 8)));
      float v58 = v52;
      float v59 = v53;
      v62[0] = v58;
      v62[1] = v59;
      if (sqrtf(vaddv_f32(vmul_f32(v63, v63))) != 0.0)
      {
        sub_190731008((float *)&v63, v62);
        uint64_t v31 = v61;
      }
    }
  }
  if (v70)
  {
    double v71 = (char *)v70;
    operator delete(v70);
  }
  if (__p)
  {
    unint64_t v74 = (unint64_t *)__p;
    operator delete(__p);
  }
  return v31;
}

void sub_19073248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1907324FC(uint64_t **a1)
{
  if (*a1 == a1[1]) {
    return 0;
  }
  float v2 = (void *)[MEMORY[0x1E4F28E60] indexSet];
  unint64_t v4 = *a1;
  float v3 = a1[1];
  while (v4 != v3)
  {
    uint64_t v5 = *v4++;
    [v2 addIndex:v5];
  }
  return v2;
}

double sub_190732564(void *a1)
{
  unint64_t v2 = objc_msgSend(a1, "count", 0x41582AF3D4F25D95, 0x415854A640000000, 0, 0, 0x3FF0000000000000);
  double v3 = 0.0;
  if (v2 >= 2)
  {
    unint64_t v4 = v2;
    for (uint64_t i = 1; i != v4; ++i)
    {
      uint64_t v6 = (void *)[a1 objectAtIndexedSubscript:i];
      float v7 = (void *)[a1 objectAtIndexedSubscript:i - 1];
      [v6 latitude];
      double v9 = v8;
      [v6 longitude];
      double v11 = v10;
      [v7 latitude];
      double v13 = v12;
      [v7 longitude];
      double v3 = v3 + sub_1906DA618((double *)&v16, v9, v11, v13, v14, 0.0);
    }
  }
  return v3;
}

double sub_190732658(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)v17;
  double v5 = 0.0;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)v17 != v4) {
        objc_enumerationMutation(a1);
      }
      float v7 = *(void **)(*((void *)&v16 + 1) + 8 * i);
      if (objc_msgSend((id)objc_msgSend(v7, "deltaPosition_m"), "isValid"))
      {
        objc_msgSend((id)objc_msgSend(v7, "deltaPosition_m"), "X");
        double v9 = v8;
        objc_msgSend((id)objc_msgSend(v7, "deltaPosition_m"), "X");
        double v11 = v9 * v10;
        objc_msgSend((id)objc_msgSend(v7, "deltaPosition_m"), "Y");
        double v13 = v12;
        objc_msgSend((id)objc_msgSend(v7, "deltaPosition_m"), "Y");
        double v5 = v5 + sqrt(v11 + v13 * v14);
      }
    }
    uint64_t v3 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  }
  while (v3);
  return v5;
}

BOOL sub_1907327B0(void *a1)
{
  if ((unint64_t)[a1 count] < 2 || (unint64_t)objc_msgSend(a1, "count") < 2) {
    return 0;
  }
  unint64_t v2 = 1;
  do
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v2), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v2 - 1), "timestamp"));
    double v4 = fabs(v3);
    BOOL v5 = v4 > 300.0;
    if (v4 > 300.0) {
      break;
    }
    ++v2;
  }
  while (v2 < [a1 count]);
  return v5;
}

double sub_190732870(void *a1)
{
  double v2 = 0.0;
  double v3 = 0.0;
  if ([a1 count])
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      if (objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v5), "signalEnvironmentType")
         - 3 < 2)
        ++v4;
      ++v5;
    }
    while (v5 < [a1 count]);
    double v3 = (double)v4;
  }
  if ([a1 count]) {
    return v3 / (double)(unint64_t)[a1 count];
  }
  return v2;
}

void sub_19073290C(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  *a1 = a2 + (a4 - a2) * a6;
  double v7 = a3 + 360.0;
  if (a3 >= 0.0) {
    double v7 = a3;
  }
  double v8 = a5 + 360.0;
  if (a5 >= 0.0) {
    double v8 = a5;
  }
  double v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0) {
      double v9 = v9 + 360.0;
    }
  }
  else
  {
    double v9 = v9 + -360.0;
  }
  double v10 = fmod(a3 + v9 * a6, 360.0);
  if (v10 <= -180.0)
  {
    double v10 = v10 + 360.0;
  }
  else if (v10 > 180.0)
  {
    double v10 = v10 + -360.0;
  }
  a1[1] = v10;
}

os_log_t sub_1907329D0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1E929F668 = (uint64_t)result;
  return result;
}

os_log_t sub_190732A00()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

void *sub_190732A30(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_190718124();
  }
  return operator new(8 * a2);
}

void sub_190732B18(uint64_t a1, uint64_t a2)
{
  double v2 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190733E48;
  block[3] = &unk_1E5696BF0;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t sub_190732C84(uint64_t a1)
{
  [*(id *)(a1 + 32) delegate];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = [*(id *)(a1 + 32) delegate];
    [*(id *)(a1 + 32) locationManagerSmoother];
    [*(id *)(a1 + 48) intValue];
    return MEMORY[0x1F4181798](v3, sel_locationManager_didSmoothLocations_ofType_);
  }
  return result;
}

void sub_190732EEC(uint64_t a1)
{
}

void sub_190732F1C(uint64_t a1)
{
}

uint64_t sub_190733098(uint64_t a1)
{
  [NSNumber numberWithInt:1];
  uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "locationManagerSmootherProxy"), "connection"), "remoteObjectProxy");

  return MEMORY[0x1F4181798](v2, sel_smoothLocations_useType_);
}

uint64_t sub_190733C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F1C978] array];
  uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:@"CLSmootherErrorDomain" code:1 userInfo:0];
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);

  return v4(v1, v2, v3);
}

uint64_t sub_190733C90(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = [MEMORY[0x1E4F1C978] array];
  uint64_t v6 = *MEMORY[0x1E4F28A50];
  v7[0] = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, v4, objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"CLSmootherErrorDomain", 4, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1)));
}

uint64_t sub_190733DE4(uint64_t a1)
{
  uint64_t v2 = (void *)[*(id *)(a1 + 32) locationManagerSmootherProxy];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 setDelegate:v3];
}

uint64_t sub_190733E48(uint64_t a1)
{
  return [*(id *)(a1 + 32) createConnection];
}

os_log_t sub_190733E50()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "RouteSmoother");
  qword_1E929F6B8 = (uint64_t)result;
  return result;
}

uint64_t sub_190733E80(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (sub_190734430(0, (int *)&unk_1E929FBF0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0))
  {
    if (qword_1E929F650 != -1) {
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
    }
    double v10 = qword_1E929F658;
    if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "WMM initialization encountered an error", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F650 == -1)
    {
LABEL_16:
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "int declinationCalc(const float, const float, const float, const float, GeomagneticData *)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_25:
    dispatch_once(&qword_1E929F650, &unk_1EE005700);
    goto LABEL_16;
  }
  *(float *)dword_1EB2714C0 = a2;
  *(float *)algn_1EB2714C4 = a3;
  *(float *)&dword_1EB2714C8 = a4 / 1000.0;
  dword_1EB2714CC = LODWORD(a5);
  if (sub_190734430(1, 0, (float *)&qword_1EB2714D0, (float *)&qword_1EB2714D0 + 1, (float *)&dword_1EB2714D8, (float *)algn_1EB2714DC, a4 / 1000.0, a2, a3, a5))
  {
    if (qword_1E929F650 != -1) {
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
    }
    double v11 = qword_1E929F658;
    if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEBUG, "WMM evaluation encountered an error", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F650 == -1) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  qword_1EB2714E0 = qword_1EB2714D0;
  dword_1EB2714E8 = dword_1EB2714D8;
  *(float *)&dword_1EB2714CC = *(float *)&dword_1EB2714CC + 1.0;
  sub_190734430(1, 0, (float *)&qword_1EB2714D0, (float *)&qword_1EB2714D0 + 1, (float *)&dword_1EB2714D8, (float *)algn_1EB2714DC, *(float *)&dword_1EB2714C8, *(float *)dword_1EB2714C0, *(float *)algn_1EB2714C4, *(float *)&dword_1EB2714CC);
  float v13 = *(float *)&dword_1EB2714E8;
  float v14 = *(float *)&qword_1EB2714E0;
  __float2 v15 = __sincosf_stret(*(float *)&qword_1EB2714E0 * 0.017453);
  int v16 = HIDWORD(qword_1EB2714E0);
  __float2 v17 = __sincosf_stret(*((float *)&qword_1EB2714E0 + 1) * 0.017453);
  if ((float)(v13 * v17.__cosval) < 100.0)
  {
    float v14 = log(-1.0);
    *(float *)&qword_1EB2714E0 = v14;
  }
  if (90.0 - fabsf(*(float *)dword_1EB2714C0) <= 0.001)
  {
    float v14 = log(-1.0);
    *(float *)&qword_1EB2714E0 = v14;
    float v19 = v14;
    float v18 = v14;
  }
  else
  {
    float v18 = v13 * (float)(v15.__cosval * v17.__cosval);
    float v19 = v13 * (float)(v15.__sinval * v17.__cosval);
  }
  uint64_t result = 0;
  *(float *)a1 = v18 / 1000.0;
  *(float *)(a1 + 4) = v19 / 1000.0;
  *(float *)(a1 + 8) = (float)(v13 * v17.__sinval) / 1000.0;
  *(float *)(a1 + 12) = v13 / 1000.0;
  *(float *)(a1 + 16) = (float)(v13 * v17.__cosval) / 1000.0;
  *(float *)(a1 + 20) = v14;
  *(_DWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_190734430(int a1, int *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8, float a9, float a10)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (a1 == 1)
  {
    float v18 = a10 - *(float *)&dword_1EB271510;
    float v19 = *(float *)&dword_1EB271524;
    if (*(float *)&dword_1EB271524 < 0.0 && v18 < 0.0)
    {
      if (qword_1E929F650 != -1) {
        dispatch_once(&qword_1E929F650, &unk_1EE005700);
      }
      double v20 = qword_1E929F658;
      if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134349312;
        double v141 = a10;
        __int16 v142 = 2050;
        double v143 = *(float *)&dword_1EB271510;
        _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_INFO, "supplied date (%{public}f) outside valid range (epoch=%{public}f)", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F650 == -1)
      {
LABEL_124:
        uint64_t v135 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "int E0000(int, int *, float, float, float, float, float *, float *, float *, float *)", "CoreLocation: %s\n", v135);
        if (v135 != (char *)buf) {
          free(v135);
        }
        return 1;
      }
LABEL_126:
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
      goto LABEL_124;
    }
    __float2 v50 = __sincosf_stret(a9 * 0.017453);
    float sinval = v50.__sinval;
    float cosval = v50.__cosval;
    dword_1EB271554 = LODWORD(v50.__sinval);
    dword_1EB271588 = LODWORD(v50.__cosval);
    BOOL v53 = *(float *)&dword_1EB27152C != a8 || *(float *)&dword_1EB271528 != a7;
    if (v53)
    {
      __float2 v54 = __sincosf_stret(a8 * 0.017453);
      float v55 = sqrtf(*(float *)&dword_1EB2714FC - (float)(*(float *)&dword_1EB271504 * (float)(v54.__sinval * v54.__sinval)));
      float v56 = (float)(*(float *)&dword_1EB2714FC + (float)(v55 * a7)) / (float)(flt_1EB271500 + (float)(v55 * a7));
      *(float *)&int v57 = v54.__sinval
                     / sqrtf((float)(v54.__sinval * v54.__sinval)+ (float)((float)(v56 * v56) * (float)(v54.__cosval * v54.__cosval)));
      *(float *)&int v58 = sqrt(1.0 - (float)(*(float *)&v57 * *(float *)&v57));
      dword_1EB271534 = v57;
      dword_1EB271538 = v58;
      float v59 = (float)(a7 * a7)
          + (float)(v55 * a7) * 2.0
          + (float)((float)(flt_1EB271508 - (float)(*(float *)&dword_1EB27150C * (float)(v54.__sinval * v54.__sinval)))
                  / (float)(v55 * v55));
      float v60 = sqrtf((float)((float)(v54.__sinval * v54.__sinval) * flt_1EB271500)+ (float)(*(float *)&dword_1EB2714FC * (float)(v54.__cosval * v54.__cosval)));
      dword_1EB27153C = sqrtf(v59);
      *(float *)&dword_1EB271540 = (float)(v60 + a7) / *(float *)&dword_1EB27153C;
      *(float *)&dword_1EB271544 = (float)(v54.__sinval * (float)(v54.__cosval * *(float *)&dword_1EB271504))
                                 / (float)(v60 * *(float *)&dword_1EB27153C);
    }
    int v61 = dword_1EB2714EC;
    if (*(float *)&dword_1EB271530 != a9)
    {
      if (dword_1EB2714EC >= 2)
      {
        int v62 = dword_1EB2714EC + 1;
        uint64_t v68 = dword_1EB2714EC - 1;
        int v69 = (float *)&dword_1EB27158C;
        float v70 = v50.__sinval;
        do
        {
          float v71 = *(float *)&dword_1EB271588;
          float v72 = (float)(sinval * *(float *)&dword_1EB271588) + (float)(v70 * cosval);
          *(v69 - 13) = v72;
          float v70 = *(float *)&dword_1EB271554;
          float cosval = (float)(v71 * cosval) - (float)(*(float *)&dword_1EB271554 * sinval);
          *v69++ = cosval;
          float sinval = v72;
          --v68;
        }
        while (v68);
      }
      else
      {
        int v62 = 2;
      }
      dword_1EB2714F4 = v62;
    }
    float v73 = *(float *)&dword_1EB271538;
    if (v61 >= 1)
    {
      __int16 v136 = a4;
      uint64_t v137 = a6;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      float v76 = *(float *)&dword_1EB2714F8 / *(float *)&dword_1EB27153C;
      float v77 = v76 * v76;
      float v78 = *(float *)&dword_1EB271534;
      float v79 = -*(float *)&dword_1EB271538;
      float v80 = *(float *)&dword_1EB271584;
      int v81 = dword_1EB271620[0];
      uint64_t v82 = (v61 + 1);
      float v83 = *(float *)&dword_1EB271550;
      int v84 = 3;
      unsigned int v85 = -1;
      unint64_t v86 = 1;
      float v87 = 0.0;
      uint64_t v88 = 0x4BCu;
      BOOL v89 = dword_1EB2714C0;
      float v90 = 0.0;
      float v91 = 0.0;
      float v92 = 0.0;
      uint64_t v138 = v82;
      while (1)
      {
        int64_t v93 = 0;
        uint64_t v94 = 4 * v85 + 2516;
        float v95 = -(float)(v76 * v77);
        float v77 = v76 * v77;
        unint64_t v139 = v86 + 1;
        __int16 v96 = &dword_1EB2714C0[v86];
        uint64_t v97 = v96 + 798;
        float v98 = *((float *)v96 + 62);
        int64_t v99 = v86 - 2;
        unint64_t v100 = v96 + 796;
        uint64_t v101 = v96 + 797;
        unint64_t v102 = v86 - 1;
        unint64_t v103 = &dword_1EB2714C0[13 * v86];
        uint64_t v104 = (float *)&v103[v86 + 615];
        uint64_t v105 = (float *)&v103[v86 + 629];
        int v106 = -13;
        uint64_t v107 = v88;
        uint64_t v108 = v75;
        int v109 = v84;
        do
        {
          if (v53)
          {
            if (v74 + 1 == v93)
            {
              *(float *)&v97[13 * v86] = v73 * *(float *)&v101[13 * (int)v86 - 13];
              *uint64_t v105 = (float)(v78 * *(float *)&v101[13 * v86 - 13]) + (float)(v73 * *v104);
            }
            else
            {
              if (v86 == 1 && !v93)
              {
                *(float *)&dword_1EB27213C = v78 * *(float *)&dword_1EB272138;
                *(float *)&dword_1EB271E98 = (float)(*(float *)&dword_1EB272138 * v79)
                                           + (float)(v78 * *(float *)&dword_1EB2714C0[v102 + 629]);
                if (v19 == a10)
                {
LABEL_74:
                  float v112 = v77 * *(float *)((char *)&dword_1EB2714C0[799] + v108);
LABEL_75:
                  float v118 = *(float *)&dword_1EB2714C0[v86 + 460];
                  float v116 = v80 * v118;
                  float v117 = v83 * v118;
                  goto LABEL_76;
                }
LABEL_66:
                float v110 = *(float *)((char *)&dword_1EB2714C0[123] + v108)
                     + (float)(v18 * *(float *)((char *)&dword_1EB2714C0[292] + v108));
                *(float *)((char *)&dword_1EB2714C0[461] + v108) = v110;
                if (!v93) {
                  goto LABEL_74;
                }
                float v111 = *(float *)&v89[v93 + 134] + (float)(v18 * *(float *)((char *)dword_1EB2714C0 + v107));
                *(float *)((char *)&dword_1EB2714C0[169] + v107) = v111;
                float v112 = v77 * *(float *)&v97[v106 + 13];
                goto LABEL_70;
              }
              if (v86 >= 2)
              {
                if (v93 <= v99)
                {
                  float v123 = *(float *)((char *)dword_1EB2714C0 + v94);
                  uint64_t v122 = (v106 + 13);
                }
                else
                {
                  uint64_t v122 = (v106 + 13);
                  v100[v122] = 0;
                  *(int *)((char *)dword_1EB2714C0 + v94) = 0;
                  float v123 = 0.0;
                }
                float v124 = *(float *)&v101[v122];
                float v125 = *(float *)((char *)&unk_1E92A01F0 + v108 + 4);
                *(float *)&v97[v122] = (float)(v78 * v124) - (float)(v125 * *(float *)&v100[v122]);
                *(float *)((char *)&dword_1EB2714C0[630] + v108) = (float)((float)(v124 * v79)
                                                                         + (float)(v78
                                                                                 * *(float *)((char *)&dword_1EB2714C0[629]
                                                                                            + v108)))
                                                                 - (float)(v125 * v123);
              }
            }
          }
          if (v19 != a10) {
            goto LABEL_66;
          }
          float v112 = v77 * *(float *)&v97[v106 + 13];
          if (!v93) {
            goto LABEL_75;
          }
          float v110 = *(float *)((char *)&dword_1EB2714C0[461] + v108);
          float v111 = *(float *)((char *)&dword_1EB2714C0[169] + v107);
LABEL_70:
          uint64_t v113 = &dword_1EB2714C0[v93];
          float v114 = *((float *)v113 + 49);
          float v115 = *((float *)v113 + 36);
          float v116 = (float)(v111 * v115) + (float)(v110 * v114);
          float v117 = (float)(v110 * v115) - (float)(v111 * v114);
LABEL_76:
          float v119 = *(float *)((char *)&dword_1EB2714C0[630] + v108);
          float v120 = v117 * *(float *)&dword_1EB2714C0[v93 + 75];
          if (v73 == 0.0 && v93 == 1)
          {
            if (v86 == 1)
            {
              dword_1EB271624 = v81;
              float v121 = *(float *)&v81;
            }
            else
            {
              float v121 = (float)(v78 * *(float *)&dword_1EB271620[v102])
                   - (float)(*((float *)&unk_1E92A01F0 + v86 + 13) * *(float *)&dword_1EB271620[v99]);
              *(float *)&dword_1EB271620[v86] = v121;
            }
            float v92 = v92 + (float)(v120 * (float)(v77 * v121));
          }
          float v87 = v87 + (float)((float)(v116 * v95) * v119);
          float v90 = v90 + (float)(v120 * v112);
          ++v93;
          --v109;
          v108 += 52;
          float v91 = v91 + (float)((float)(v98 * v116) * v112);
          v107 += 4;
          v106 += 13;
          v94 += 52;
        }
        while (v109 > 1);
        ++v84;
        v75 += 4;
        v88 += 52;
        v89 += 13;
        ++v85;
        int v126 = v138;
        ++v74;
        ++v86;
        if (v139 == v138)
        {
          dword_1EB2714F4 = v93;
          a6 = v137;
          a4 = v136;
          goto LABEL_92;
        }
      }
    }
    int v126 = 1;
    float v91 = 0.0;
    float v87 = 0.0;
    float v92 = 0.0;
    float v90 = 0.0;
LABEL_92:
    dword_1EB2714F0 = v126;
    if (v73 == 0.0) {
      float v127 = v92;
    }
    else {
      float v127 = v90 / v73;
    }
    float v128 = (float)-(float)(v91 * *(float *)&dword_1EB271544) - (float)(v87 * *(float *)&dword_1EB271540);
    float v129 = (float)(v87 * *(float *)&dword_1EB271544) - (float)(v91 * *(float *)&dword_1EB271540);
    float v130 = sqrtf((float)(v127 * v127) + (float)(v128 * v128));
    *a5 = sqrtf((float)(v129 * v129) + (float)(v130 * v130));
    *a3 = atan2f(v127, v128) / 0.017453;
    *a4 = atan2f(v129, v130) / 0.017453;
    *a6 = -999.0;
    if (fabsf(a8) >= 55.0)
    {
      float v131 = -999.0;
      if (a9 >= 0.0 && a8 > 0.0)
      {
        float v131 = *a3 - a9;
        *a6 = v131;
      }
      float v132 = fabsf(a9);
      if (a8 > 0.0 && a9 < 0.0)
      {
        float v131 = v132 + *a3;
        *a6 = v131;
      }
      if (a9 >= 0.0 && a8 < 0.0)
      {
        float v131 = *a3 + a9;
        *a6 = v131;
      }
      if (a8 < 0.0 && a9 < 0.0)
      {
        float v131 = *a3 - v132;
        *a6 = v131;
      }
      if (v131 > 180.0)
      {
        float v131 = v131 + -360.0;
LABEL_111:
        if (v131 < -180.0) {
          float v131 = v131 + 360.0;
        }
        *a6 = v131;
        goto LABEL_114;
      }
      if (v131 < -180.0) {
        goto LABEL_111;
      }
    }
LABEL_114:
    uint64_t result = 0;
    dword_1EB271524 = LODWORD(a10);
    dword_1EB271528 = LODWORD(a7);
    dword_1EB27152C = LODWORD(a8);
    dword_1EB271530 = LODWORD(a9);
    return result;
  }
  uint64_t v22 = fopen((const char *)&xmmword_1E92A0020, "r");
  if (!v22)
  {
    if (qword_1E929F650 != -1) {
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
    }
    float32x2_t v63 = qword_1E929F658;
    if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_INFO))
    {
      unint64_t v64 = __error();
      unint64_t v65 = strerror(*v64);
      *(_DWORD *)uint64_t buf = 136315394;
      double v141 = COERCE_DOUBLE(&xmmword_1E92A0020);
      __int16 v142 = 2082;
      double v143 = *(double *)&v65;
      _os_log_impl(&dword_1906B8000, v63, OS_LOG_TYPE_INFO, "could not open geomagnetic data file %s (%{public}s)", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F650 != -1) {
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
    }
    uint64_t v66 = __error();
    strerror(*v66);
    goto LABEL_124;
  }
  unint64_t v23 = v22;
  dword_1EB2714EC = *a2;
  dword_1EB271550 = 0;
  dword_1EB271620[0] = 1065353216;
  dword_1EB272138 = 1065353216;
  dword_1EB271584 = 1065353216;
  dword_1EB271E94 = 0;
  *(void *)&dword_1EB2714F8 = 0x4C1B2F2F45C7199ALL;
  *(void *)&flt_1EB271500 = 0x4884FA004C1A253BLL;
  *(void *)&flt_1EB271508 = 0x55A0AD8058BC2457;
  dword_1EB2716A8 = 0;
  dword_1EB27194C = 0;
  if (!fgets(byte_1EB271654, 80, v22))
  {
    fclose(v23);
    if (qword_1E929F650 != -1) {
      dispatch_once(&qword_1E929F650, &unk_1EE005700);
    }
    int v67 = qword_1E929F658;
    if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v67, OS_LOG_TYPE_INFO, "geomagnetic data file appears to be empty", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F650 == -1) {
      goto LABEL_124;
    }
    goto LABEL_126;
  }
  sscanf(byte_1EB271654, "%f", &dword_1EB271510);
  if (fgets(byte_1EB271654, 80, v23))
  {
    uint64_t v24 = 0;
    do
    {
      do
      {
        if (!*((unsigned char *)&dword_1EB2714C0[101] + v24)) {
          break;
        }
        *((unsigned char *)&dword_1EB271548 + v24) = *((unsigned char *)&dword_1EB2714C0[101] + v24);
        ++v24;
        *((unsigned char *)&dword_1EB271548 + v24) = 0;
      }
      while (v24 != 4);
      if (!(dword_1EB271548 ^ 0x39393939 | byte_1EB27154C)) {
        break;
      }
      sscanf(byte_1EB271654, "%d%d%f%f%f%f", &dword_1EB2714F0, &dword_1EB2714F4, &dword_1EB271514, &dword_1EB271518, &dword_1EB27151C, &dword_1EB271520);
      int v25 = dword_1EB2714F4;
      if (dword_1EB2714F4 > 0xC || (int v26 = dword_1EB2714F0, dword_1EB2714F0 > 12) || dword_1EB2714F0 < 0)
      {
        fclose(v23);
        if (qword_1E929F650 != -1) {
          dispatch_once(&qword_1E929F650, &unk_1EE005700);
        }
        __int16 v134 = qword_1E929F658;
        if (os_log_type_enabled((os_log_t)qword_1E929F658, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v134, OS_LOG_TYPE_INFO, "geomagnetic data file appears to have invalid dimensions", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F650 != -1) {
          goto LABEL_126;
        }
        goto LABEL_124;
      }
      if (dword_1EB2714F4 <= dword_1EB2714F0)
      {
        unint64_t v27 = &dword_1EB2714C0[13 * dword_1EB2714F4 + dword_1EB2714F0];
        v27[122] = dword_1EB271514;
        v27[291] = dword_1EB27151C;
        if (v25)
        {
          uint64_t v28 = &dword_1EB2714C0[13 * v26 + v25 - 1];
          v28[122] = dword_1EB271518;
          v28[291] = dword_1EB271520;
        }
      }
      uint64_t v29 = fgets(byte_1EB271654, 80, v23);
      uint64_t v24 = 0;
    }
    while (v29);
  }
  dword_1EB272138 = 1065353216;
  if (dword_1EB2714EC < 1)
  {
    LODWORD(v31) = 1;
  }
  else
  {
    int v30 = 0;
    uint64_t v31 = dword_1EB2714EC + 1;
    uint64_t v32 = 1;
    double v33 = dword_1EB2714C0;
    uint64_t v34 = (float *)&unk_1E92A01F4;
    do
    {
      uint64_t v35 = 0;
      int v36 = 0;
      double v37 = &dword_1EB2714C0[v32];
      double v38 = v37 + 798;
      int v39 = 2 * v32 - 1;
      float v40 = (float)(int)v32;
      *((float *)v37 + 798) = (float)(*((float *)v37 + 797) * (float)v39) / (float)(int)v32;
      uint64_t v41 = v32 + 1;
      float v42 = (float)(v39 * (2 * v32 - 3));
      int v43 = 2;
      int v44 = v30;
      do
      {
        v34[v35] = (float)((v30 + v36) * v44) / v42;
        if (v35)
        {
          *(float *)&int v45 = sqrtf((float)(v43 * (v44 + 2)) / (float)(v30 + v36 + 1)) * *(float *)&v38[(int)v35 - 13];
          v38[(int)v35] = v45;
          double v46 = &dword_1EB2714C0[13 * v32 + (v36 - 1)];
          *((float *)v46 + 122) = *(float *)&v45 * *((float *)v46 + 122);
          *((float *)v46 + 291) = *(float *)&v45 * *((float *)v46 + 291);
          int v43 = 1;
        }
        float v47 = *(float *)&v38[v35];
        double v48 = &v33[v35];
        *((float *)v48 + 123) = v47 * *((float *)v48 + 123);
        *((float *)v48 + 292) = v47 * *((float *)v48 + 292);
        ++v36;
        --v44;
        v35 += 13;
      }
      while (v44 + 3 > 1);
      double v49 = &dword_1EB2714C0[v32];
      ++v30;
      *((float *)v49 + 62) = (float)(int)v41;
      *((float *)v49 + 75) = v40;
      ++v33;
      ++v34;
      uint64_t v32 = v41;
    }
    while (v41 != v31);
    dword_1EB2714F4 = v36;
  }
  dword_1EB2714F0 = v31;
  dword_1E92A0228 = 0;
  *(void *)&dword_1EB27152C = 0xC47A0000C47A0000;
  *(void *)&dword_1EB271524 = 0xC47A0000C47A0000;
  fclose(v23);
  return 0;
}

os_log_t sub_19073535C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1E929F658 = (uint64_t)result;
  return result;
}

void sub_190735E0C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#clgda,client,#warning,unexpected message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_190735FEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v15 = v6;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#clgda,client,message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    CLConnectionMessage::name(*a2);
    float v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*(void *)(v3 + 8))
  {
    double v7 = (void *)CLConnectionMessage::name(*a2);
    int v8 = *((char *)v7 + 23);
    if (v8 < 0)
    {
      if (v7[1] != 44) {
        return;
      }
      double v7 = (void *)*v7;
    }
    else if (v8 != 44)
    {
      return;
    }
    if (!memcmp(v7, "kCLConnectionMessageGnssDisablementAssertRsp", 0x2CuLL) && !*(unsigned char *)(v3 + 24))
    {
      uint64_t v11 = *(void *)(v3 + 8);
      uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
      (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v11, Dictionary);
      *(unsigned char *)(v3 + 24) = 1;
    }
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    uint64_t v9 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "#clgda,#warning,client,noRegisteredCallback", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
      }
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_190736718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  if (a25) {
    sub_1906BFE48(a25);
  }
  MEMORY[0x192FCEAD0](v33, 0x10A0C401FC6A22ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_190736824(uint64_t *result, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *os_log_t result = a2;
  if (v2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    uint64_t v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#clgda,client,~CLGnssDisablementAssertionInternal()", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::~CLGnssDisablementAssertionInternal()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1907142A8(v2);
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

void sub_190736A1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1906F4064(a1);
}

CLGnssDisablementAssertion *sub_190736A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      float v18 = "";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,reason missing\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
      }
    }
    double v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    int v8 = "#clgda,client,reason missing";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#clgda,client,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    double v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      float v18 = "";
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
      }
    }
    double v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    int v8 = "#clgda,client,bundleID or bundlePath needed";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#clgda,client,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
    uint64_t v11 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      float v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,nil callback queue\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
      }
    }
    double v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    int v8 = "#clgda,client,nil callback queue";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#clgda,client,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v13[0] = @"kCLConnectionMessageBundleIdentifierKey";
    v13[1] = @"kCLConnectionMessageBundlePathKey";
    v14[0] = a1;
    v14[1] = a2;
    v13[2] = @"kCLConnectionMessagePurposeKey";
    void v14[2] = a3;
    return -[CLGnssDisablementAssertion initWithRegistrationMessageName:messagePayload:callbackQueue:completionHandler:]([CLGnssDisablementAssertion alloc], "initWithRegistrationMessageName:messagePayload:callbackQueue:completionHandler:", "kCLConnectionMessageGnssDisablementAssertReq", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3], a4, a5);
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
  }
  double v12 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,nil callback block\"}", buf, 0x12u);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006300);
    }
  }
  double v7 = qword_1EB2713E0;
  if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    float v18 = "";
    int v8 = "#clgda,client,nil callback block";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#clgda,client,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, buf, 0x12u);
  }
  return 0;
}

void sub_19073778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907385A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1907385BC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_manageConnection);
}

void sub_19073888C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1907388A4(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) manager])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    MEMORY[0x1F4181798](v2, sel_manageConnection);
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
    }
    uint64_t v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      double v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = v4;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.\", \"self\":\"%{public}p\"}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
      }
    }
    uint64_t v5 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      double v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = v6;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.", "{\"msg%{public}.0s\":\"#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.\", \"self\":\"%{public}p\"}", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void sub_190738C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_190738C44(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdentityToken:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setStorageToken:0];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel_manageConnection);
}

void sub_190738EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_190738ED8(uint64_t a1)
{
  [*(id *)(a1 + 32) destroyConnection];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 tearDown];
}

void sub_1907390EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_190739108(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "#locationUpdater destroying connection (dealloc)", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationUpdater dealloc]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    sub_19073BF10("kCLConnectionMessageDestroyUponDisconnection", buf);
    uint64_t v4 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v4) {
      sub_1906BFE48(v4);
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 32));
    if (v6) {
      sub_1906BFE48(v6);
    }
  }
}

void sub_1907392FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907394B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190739B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_1906BFE48(v34);
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190739C10(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    uint64_t v5 = Weak;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      double v20 = v5;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#locationUpdater Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005760);
      }
    }
    int v8 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v9;
      __int16 v19 = 2050;
      double v20 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater Default handler received message", "{\"msg%{public}.0s\":\"#locationUpdater Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    double v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 handleMessage:&v11];
    if (v12) {
      sub_1906BFE48(v12);
    }
  }
}

void sub_190739E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19073A258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1906BFE48(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_19073A4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_19073A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_19073ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

void sub_19073B0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_19073BAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_19073BD88(void *a1)
{
  *a1 = &unk_1EE004B48;
  sub_19073BE14((uint64_t)a1);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1906BFE48(v2);
  }
  return a1;
}

void sub_19073BDDC(void *a1)
{
  sub_19073BD88(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19073BE14(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EE005378;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 16) = v2;
  *((_DWORD *)v2 + 6) = 31337;
  *(void *)(a1 + 8) = v2 + 3;
  if (v3)
  {
    sub_1906BFE48(v3);
  }
}

void sub_19073BE94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19073BEB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void *sub_19073BF10@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  os_log_t result = sub_19073BF6C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19073BF58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19073BF6C(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_19073BFDC((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_19073BFC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19073BFDC(int a1, uint64_t a2, char *__s)
{
  sub_1906D5C70(__p, __s);
  MEMORY[0x192FCE830](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19073C02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19073C6B8(double a1, double a2)
{
  if (a2 > 134.82 || a2 < 73.48 || a1 < 18.15 || a1 > 53.6) {
    return 0;
  }
  if (a1 <= 42.3 && a2 >= 107.1 && a2 <= 119.3
    || a1 <= 42.3 && a2 >= 119.3 && a1 >= 25.3 && a2 <= 123.45
    || a1 >= 42.3 && a2 <= 129.2 && a1 <= 49.34 && a2 >= 119.93
    || a2 <= 107.1 && a2 >= 98.76 && a1 >= 23.39 && a1 <= 41.58
    || a1 <= 42.6 && a2 <= 98.76 && a1 >= 28.39 && a2 >= 85.19
    || a2 <= 90.66 && a2 >= 80.81 && a1 >= 42.6 && a1 <= 45.2
    || a2 <= 101.54 && a2 >= 99.4 && a1 >= 22.06 && a1 <= 23.39
    || a2 <= 119.93 && a1 >= 42.3 && a1 <= 44.74 && a2 >= 111.924
    || a2 <= 119.93 && a2 >= 116.55 && a1 >= 44.74 && a1 <= 46.35
    || a2 <= 133.09 && a2 >= 129.2 && a1 >= 45.23 && a1 <= 47.66
    || a2 <= 125.95 && a2 >= 120.78 && a1 >= 49.34 && a1 <= 52.86
    || a2 >= 123.45 && a1 >= 41.38 && a1 <= 42.4 && a2 <= 126.51
    || a2 <= 85.19 && a2 >= 79.24 && a1 >= 31.07 && a1 <= 41.73
    || a2 <= 85.19 && a1 <= 42.6 && a1 >= 41.73 && a2 >= 80.28
    || a2 >= 123.45 && a1 >= 40.9 && a1 <= 41.38 && a2 <= 125.97
    || a2 >= 123.45 && a1 >= 40.47 && a1 <= 40.9 && a2 <= 125.0
    || a2 <= 120.15 && a2 >= 119.2 && a1 >= 24.78 && a1 <= 25.4)
  {
    return 1;
  }
  if ((a2 > 108.15 || a2 < 97.511 || a1 < 21.14 || a1 > 28.39)
    && (a2 > 97.511 || a2 < 78.33 || a1 < 27.29 || a1 > 32.7)
    && (a1 > 41.73 || a1 < 32.7 || a2 > 79.24)
    && (a2 < 79.24 || a1 < 41.73 || a1 > 49.16 || a2 > 96.06)
    && (a1 < 41.38 || a2 > 115.52 || a1 > 45.45 || a2 < 96.06)
    && (a1 < 39.6 || a2 < 115.52)
    && (a2 < 119.3 || a1 < 21.7 || a1 > 25.3 || a2 > 122.5))
  {
    return 0;
  }
  else
  {
    return 2;
  }
}

void sub_19073CE78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19073CEE0(uint64_t a1, uint64_t *a2)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  char v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [Weak handleMessage:&v5];
  if (v6) {
    sub_1906BFE48(v6);
  }
}

void sub_19073CF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19073CF54(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));

  return [Weak handleInterruption];
}

os_log_t sub_19073DD44()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1E929F688 = (uint64_t)result;
  return result;
}

uint64_t sub_19073DD74(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x192FCE820]();
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

float sub_19073E4AC()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
  uint64_t v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9A8], "currentCalendar"), "components:fromDate:", 252, v0);
  id v2 = (id)[v1 copy];
  [v2 setDay:1];
  [v2 setMonth:1];
  id v3 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  id v4 = (id)[v3 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  uint64_t v5 = objc_msgSend(v4, "components:fromDate:toDate:options:", 16, objc_msgSend(v4, "dateFromComponents:", v2), v0, 0);
  double v6 = (double)[v1 year];
  double v7 = fabs((double)([v5 day] + 1));
  return v7 / dbl_1908824A0[([v1 year] & 3) == 0] + v6;
}

void sub_19073ED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19073ED70(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F5F0 != -1) {
    dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
  }
  id v2 = qword_1E929F610;
  if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "Interrupted, serviceName %@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_19073EF24(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F5F0 != -1) {
    dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
  }
  id v2 = qword_1E929F610;
  if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "Invalidated - releasing, serviceName %@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (!Weak)
  {
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    uint64_t v5 = qword_1E929F610;
    if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "CLLocationManagerGathering object went away", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F5F0 != -1) {
        dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return [Weak setConnection:0];
}

void sub_19073F24C(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F5F0 != -1) {
    dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
  }
  uint64_t v3 = qword_1E929F610;
  if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v6 = [a2 localizedDescription];
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "getRemoteObjectProxy error %@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    [a2 localizedDescription];
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationManagerGathering getRemoteObjectProxy]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_19073F648(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)[*(id *)(a1 + 32) getRemoteObjectProxy];
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    _DWORD v4[2] = sub_19073F784;
    v4[3] = &unk_1E5697490;
    void v4[4] = *(void *)(a1 + 40);
    return [v2 fetchAdvertisementsWithCompletion:v4];
  }
  else
  {
    uint64_t v5 = *MEMORY[0x1E4F28568];
    v6[0] = @"fetchAdvertisementsWithHandler unavailable";
    objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomain", 2, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_19073F784(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    uint64_t v5 = qword_1E929F610;
    if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v9 = [a3 localizedDescription];
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_ERROR, "fetchAdvertisementsWithCompletion error: %@", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F5F0 != -1) {
        dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
      }
      [a3 localizedDescription];
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationManagerGathering fetchAdvertisementsWithHandler:]_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19073FBAC(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v2 = (void *)[*(id *)(a1 + 32) getRemoteObjectProxy];
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    _DWORD v4[2] = sub_19073FCF0;
    v4[3] = &unk_1E56974B8;
    void v4[4] = *(void *)(a1 + 40);
    return [v2 fetchAdvertisementsDetailedWithCompletion:v4];
  }
  else
  {
    uint64_t v5 = *MEMORY[0x1E4F28568];
    v6[0] = @"fetchAdvertisementsDetailedWithHandler unavailable";
    objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomain", 2, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
    return (*(uint64_t (**)(double))(*(void *)(a1 + 40) + 16))(0.0);
  }
}

uint64_t sub_19073FCF0(uint64_t a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    int v8 = qword_1E929F610;
    if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v12 = [a5 localizedDescription];
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "fetchAdvertisementsWithCompletion error: %@", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F5F0 != -1) {
        dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
      }
      [a5 localizedDescription];
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationManagerGathering fetchAdvertisementsDetailedWithHandler:]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(a2);
}

uint64_t sub_190740138(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) getRemoteObjectProxy];
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    return MEMORY[0x1F4181798](v2, sel_configure_withCompletion_);
  }
  else
  {
    if (qword_1E929F5F0 != -1) {
      dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
    }
    uint64_t v3 = qword_1E929F610;
    if (os_log_type_enabled((os_log_t)qword_1E929F610, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "configure:withCompletionHandler: connection invalid", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F5F0 != -1) {
        dispatch_once(&qword_1E929F5F0, &unk_1EE003338);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationManagerGathering configure:withCompletionHandler:]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    uint64_t v6 = *MEMORY[0x1E4F28568];
    uint64_t v7 = @"configure:withCompletion unavailable";
    objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomain", 2, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

os_log_t sub_1907403A0()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Gathering");
  qword_1E929F610 = (uint64_t)result;
  return result;
}

void sub_190740CC0(void *a1)
{
}

void sub_190740E54(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v2);
  }
  sub_19078D570(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190740E78(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(result + 104))
  {
    uint64_t v1 = result;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Creating maps geocaching OS transaction", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLGeoMapGeometry::takeOSTransaction()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    os_log_t result = os_transaction_create();
    *(void *)(v1 + 104) = result;
  }
  return result;
}

void sub_19074102C(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 104))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Releasing maps geocaching OS transaction", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLGeoMapGeometry::releaseOSTransaction()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }

    *(void *)(a1 + 104) = 0;
  }
}

void sub_1907411D4(uint64_t a1, long long *a2, unsigned int a3, long long **a4)
{
  if (*(unsigned char *)(a1 + 168)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v7 = sub_19074128C((uint64_t **)(a1 + 288), a2, 1);
    if (v7)
    {
      int v8 = v7;
      if (*((unsigned char *)v7 + a3)) {
        sub_1907413D4((uint64_t)v7, a3);
      }
      uint64_t v9 = *a4;
      for (uint64_t i = a4[1]; v9 != i; ++v9)
      {
        if (a3)
        {
          v8[1] = 1;
          uint64_t v11 = (uint64_t *)(v8 + 8);
        }
        else
        {
          *int v8 = 1;
          uint64_t v11 = (uint64_t *)(v8 + 32);
        }
        sub_1907458E0(v11, v9);
      }
    }
  }
}

_OWORD *sub_19074128C(uint64_t **a1, long long *a2, int a3)
{
  if (sub_19074BAD4((uint64_t)a1, (unint64_t *)a2))
  {
    v8[0] = a2;
    return sub_19074BB34(a1, (unint64_t *)a2, (uint64_t)&unk_1908825E8, v8) + 3;
  }
  else if (a3)
  {
    __int16 v11 = 0;
    memset(v12, 0, sizeof(v12));
    unint64_t v13 = 0xBFF0000000000000;
    sub_19074BF44((uint64_t)v8, a2, (uint64_t)&v11);
    sub_19074BE3C(a1, (unint64_t *)v8, (uint64_t)v8);
    int v14 = (void **)&v10;
    sub_1906C6BF0(&v14);
    int v14 = (void **)&v9;
    sub_1906C6BF0(&v14);
    v8[0] = a2;
    uint64_t v6 = sub_19074BB34(a1, (unint64_t *)a2, (uint64_t)&unk_1908825E8, v8) + 3;
    v8[0] = (_OWORD *)((char *)&v12[1] + 8);
    sub_1906C6BF0((void ***)v8);
    v8[0] = v12;
    sub_1906C6BF0((void ***)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_1907413AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_19074BA88((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1907413D4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_19074C244(a1, (uint64_t *)(a1 + 8));
    *(unsigned char *)(a1 + 1) = 0;
  }
  else
  {
    sub_19074C244(a1, (uint64_t *)(a1 + 32));
    *(unsigned char *)a1 = 0;
  }
}

uint64_t sub_19074141C(uint64_t a1, long long *a2, unsigned int a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 168)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_19074128C((uint64_t **)(a1 + 288), a2, 0);
  if (!result) {
    return result;
  }
  uint64_t v8 = result;
  if (!*(unsigned char *)(result + a3)) {
    return 0;
  }
  uint64_t v9 = result + 8;
  uint64_t v10 = 32;
  if (a3) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v9 = result + 32;
  }
  __int16 v11 = *(char **)(result + v10);
  uint64_t v12 = *(char **)(v9 + 8);
  if (v12 - v11 >= 1)
  {
    unint64_t v13 = (void *)a4[1];
    uint64_t v14 = (v12 - v11) >> 4;
    uint64_t v15 = a4[2];
    if (v14 <= (v15 - (uint64_t)v13) >> 4)
    {
      if (v14 <= 0)
      {
        int v25 = &v11[16 * v14];
        sub_19074DCD0((uint64_t)a4, (void *)a4[1], a4[1], (uint64_t)&v13[2 * v14]);
        for (; v11 != v25; v13 += 2)
        {
          uint64_t v30 = *(void *)v11;
          uint64_t v29 = *((void *)v11 + 1);
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v31 = (std::__shared_weak_count *)v13[1];
          *unint64_t v13 = v30;
          v13[1] = v29;
          if (v31) {
            sub_1906BFE48(v31);
          }
          v11 += 16;
        }
      }
      else
      {
        uint64_t v37 = a4[1];
        double v38 = v13;
        uint64_t v32 = a4 + 2;
        uint64_t v33 = &v37;
        uint64_t v34 = (char *)&v38;
        if (v11 == v12)
        {
          uint64_t v21 = v13;
        }
        else
        {
          uint64_t v21 = v13;
          uint64_t v22 = v13;
          unint64_t v23 = v11;
          do
          {
            *uint64_t v22 = *(void *)v23;
            uint64_t v24 = *((void *)v23 + 1);
            v22[1] = v24;
            if (v24) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
            }
            v22 += 2;
            v21 += 2;
            v23 += 16;
          }
          while (v23 != v12);
          double v38 = v22;
        }
        LOBYTE(v35) = 1;
        sub_19074C17C((uint64_t)&v32);
        a4[1] = (uint64_t)v21;
      }
    }
    else
    {
      uint64_t v16 = ((uint64_t)v13 - *a4) >> 4;
      if ((unint64_t)(v16 + v14) >> 60) {
        sub_190718FD4();
      }
      uint64_t v17 = v15 - *a4;
      uint64_t v18 = v17 >> 3;
      if (v17 >> 3 <= (unint64_t)(v16 + v14)) {
        uint64_t v18 = v16 + v14;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      int v36 = a4 + 2;
      if (v19) {
        double v20 = (char *)sub_19074C0B4((uint64_t)(a4 + 2), v19);
      }
      else {
        double v20 = 0;
      }
      int v26 = &v20[16 * v16];
      uint64_t v32 = v20;
      uint64_t v33 = v26;
      uint64_t v35 = &v20[16 * v19];
      unint64_t v27 = &v26[16 * v14];
      do
      {
        *(void *)int v26 = *(void *)v11;
        uint64_t v28 = *((void *)v11 + 1);
        *((void *)v26 + 1) = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        v26 += 16;
        v11 += 16;
      }
      while (v26 != v27);
      uint64_t v34 = v27;
      sub_19074DD34(a4, &v32, v13);
      sub_19074DC48(&v32);
    }
  }
  *(CFAbsoluteTime *)(v8 + 56) = CFAbsoluteTimeGetCurrent();
  return 1;
}

void sub_190741694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

void sub_1907416A8(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = (uint64_t *)v56;
  v56[0] = 0;
  v56[1] = 0;
  float v55 = (uint64_t *)v56;
  double v9 = *(double *)(a1 + 24);
  BOOL v10 = v9 < 0.0;
  double v11 = vabdd_f64(a2, v9);
  BOOL v12 = !v10 && v11 <= a3;
  if (v12 && v7 < 501) {
    goto LABEL_70;
  }
  uint64_t v14 = (uint64_t *)(a1 + 8);
  unint64_t v13 = *(uint64_t **)a1;
  if (*(void *)a1 == a1 + 8) {
    goto LABEL_60;
  }
  do
  {
    double v15 = *((double *)v13 + 13);
    double v16 = vabdd_f64(a2, v15);
    if (v15 < 0.0 || v16 > a4)
    {
      sub_19074C244((uint64_t)(v13 + 6), v13 + 7);
      sub_19074C244((uint64_t)(v13 + 6), v13 + 10);
      uint64_t v18 = sub_19074C2D8((uint64_t **)a1, (uint64_t)v13);
      goto LABEL_11;
    }
    if (v7 < 501) {
      goto LABEL_38;
    }
    unint64_t v19 = v13 + 4;
    int v20 = (int)fabs((double)(int)(a2 - v15));
    int v57 = v20;
    uint64_t v21 = v56[0];
    if (!v56[0])
    {
LABEL_20:
      unint64_t v23 = (char *)operator new(0x10uLL);
      *(_OWORD *)unint64_t v23 = *v19;
      *(void *)uint64_t buf = &v57;
      uint64_t v24 = sub_19074C72C(&v55, &v57, (uint64_t)&unk_1908825E8, (_DWORD **)buf);
      sub_19074C7F4((char *)v24 + 40, v23, (uint64_t)(v23 + 16), 1uLL);
      operator delete(v23);
      goto LABEL_38;
    }
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 <= v20) {
        break;
      }
LABEL_19:
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_20;
      }
    }
    if (v22 < v20)
    {
      ++v21;
      goto LABEL_19;
    }
    *(void *)uint64_t buf = &v57;
    int v25 = sub_19074C72C(&v55, &v57, (uint64_t)&unk_1908825E8, (_DWORD **)buf);
    int v26 = v25;
    unint64_t v27 = v25[6];
    uint64_t v30 = v25[7];
    uint64_t v28 = (uint64_t)(v25 + 7);
    uint64_t v29 = v30;
    if (v27 >= v30)
    {
      uint64_t v32 = v26[5];
      uint64_t v33 = ((char *)v27 - (char *)v32) >> 4;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60) {
        sub_190718FD4();
      }
      uint64_t v35 = (char *)v29 - (char *)v32;
      if (v35 >> 3 > v34) {
        unint64_t v34 = v35 >> 3;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36) {
        uint64_t v37 = (char *)sub_19074C0B4(v28, v36);
      }
      else {
        uint64_t v37 = 0;
      }
      double v38 = &v37[16 * v33];
      *(_OWORD *)double v38 = *v19;
      float v40 = v26[5];
      int v39 = v26[6];
      uint64_t v41 = (uint64_t *)v38;
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
          v41 -= 2;
          v39 -= 2;
        }
        while (v39 != v40);
        int v39 = v26[5];
      }
      uint64_t v31 = (uint64_t *)(v38 + 16);
      v26[5] = v41;
      v26[6] = (uint64_t *)(v38 + 16);
      v26[7] = (uint64_t *)&v37[16 * v36];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v27 = *v19;
      uint64_t v31 = v27 + 2;
    }
    v26[6] = v31;
LABEL_38:
    float v42 = (uint64_t *)v13[1];
    if (v42)
    {
      do
      {
        uint64_t v18 = v42;
        float v42 = (uint64_t *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        uint64_t v18 = (uint64_t *)v13[2];
        BOOL v43 = *v18 == (void)v13;
        unint64_t v13 = v18;
      }
      while (!v43);
    }
LABEL_11:
    unint64_t v13 = v18;
  }
  while (v18 != v14);
  if (v56 != (void **)v55)
  {
    do
    {
      if (*(void *)(a1 + 16) < 0x1F5uLL) {
        break;
      }
      int v44 = (uint64_t *)*v8;
      int v45 = (uint64_t *)*v8;
      double v46 = v8;
      if (*v8)
      {
        do
        {
          float v47 = v45;
          int v45 = (uint64_t *)v45[1];
        }
        while (v45);
      }
      else
      {
        do
        {
          float v47 = (uint64_t *)v46[2];
          BOOL v43 = *v47 == (void)v46;
          double v46 = v47;
        }
        while (v43);
      }
      double v48 = (unint64_t *)v47[5];
      double v49 = (unint64_t *)v47[6];
      if (v48 != v49)
      {
        do
        {
          if (sub_19074BAD4(a1, v48))
          {
            *(void *)uint64_t buf = v48;
            __float2 v50 = (uint64_t *)sub_19074BB34((uint64_t **)a1, v48, (uint64_t)&unk_1908825E8, (long long **)buf);
            sub_19074C244((uint64_t)(v50 + 6), v50 + 7);
            sub_19074C244((uint64_t)(v50 + 6), v50 + 10);
            sub_19074C900((uint64_t **)a1, v48);
            if (*(void *)(a1 + 16) < 0x1F5uLL) {
              break;
            }
          }
          v48 += 2;
        }
        while (v48 != v49);
        int v44 = (uint64_t *)*v8;
      }
      if (v44)
      {
        do
        {
          unint64_t v51 = v44;
          int v44 = (uint64_t *)v44[1];
        }
        while (v44);
      }
      else
      {
        do
        {
          unint64_t v51 = (uint64_t *)v8[2];
          BOOL v43 = *v51 == (void)v8;
          uint64_t v8 = v51;
        }
        while (v43);
      }
      uint64_t v8 = v51;
    }
    while (v51 != v55);
  }
LABEL_60:
  int v52 = *(_DWORD *)(a1 + 16);
  *(double *)(a1 + 24) = a2;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  BOOL v53 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349568;
    *(double *)&uint8_t buf[4] = a2;
    __int16 v64 = 1026;
    int v65 = v7;
    __int16 v66 = 1026;
    int v67 = v52;
    _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d", buf, 0x18u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v57 = 134349568;
    double v58 = a2;
    __int16 v59 = 1026;
    int v60 = v7;
    __int16 v61 = 1026;
    int v62 = v52;
    __float2 v54 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLGeoMapFeatureAccessGeometryCommon::CLGeoRoadConnectionsMap::clearStoredStaleConnections(const CFAbsoluteTime, const double, const double)", "CoreLocation: %s\n", v54);
    if (v54 != buf) {
      free(v54);
    }
  }
LABEL_70:
  sub_19074C9BC((uint64_t)&v55, v56[0]);
}

void sub_190741C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

BOOL sub_190741C54(double *a1, double *a2, int a3, double a4, double a5, double a6)
{
  double v12 = a1[1];
  double v13 = a1[2];
  if (!sub_190741D20(*a1, a1[3], v12, v13)) {
    return 1;
  }
  double v14 = sub_1906DA618(a2, a4, a5, v12, v13, 0.0);
  double v15 = a1[3];
  if (a3) {
    return v14 >= v15 * 0.5;
  }
  double v17 = v15 * 0.9;
  return v14 > v17 && v14 + a6 >= v17;
}

BOOL sub_190741D20(double a1, double a2, double a3, double a4)
{
  BOOL result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (fabs(a3) >= 0.00003 || fabs(a4) >= 0.00003))
    {
      BOOL v5 = a3 <= 90.0;
      if (a3 < -90.0) {
        BOOL v5 = 0;
      }
      if (a4 > 180.0) {
        BOOL v5 = 0;
      }
      return a4 >= -180.0 && v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_190741DC4(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 216)
    && (double Current = CFAbsoluteTimeGetCurrent(), (sub_1906BA2D8(a1, 0, 0, 0, Current, a4, a5, a6) & 1) == 0))
  {
    uint64_t v13 = 0;
  }
  else
  {
    sub_190741EE8(a1, (void *)(a1 + 240), a2, a3, a4, a5, a6);
    uint64_t v13 = 1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v13;
}

void sub_190741ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190741EE8(uint64_t a1, void *a2, uint64_t *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    double v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,map data requested while map data buffering was in progress", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(v74) = 0;
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findRoadsNear(const double, const double, const double, const std::map<CLMapRoadKey, CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL)", "CoreLocation: %s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
  }
  else
  {
    uint64_t v74 = a1;
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v75 = 256;
    double v16 = *(uint64_t **)(a1 + 328);
    double v17 = *(uint64_t **)(a1 + 336);
    if (v16 != v17)
    {
      float v72 = 0;
      uint64_t v73 = 0;
      float v71 = &v72;
      do
      {
        uint64_t v18 = (_OWORD *)*v16;
        *(_OWORD *)uint64_t buf = *(_OWORD *)*v16;
        uint8_t buf[16] = 1;
        unint64_t v19 = sub_19074BBCC((uint64_t)&v71, v76, (unint64_t *)buf);
        if (!*v19)
        {
          int v20 = operator new(0x38uLL);
          v20[2] = *(_OWORD *)buf;
          *((unsigned char *)v20 + 48) = buf[16];
          uint64_t v21 = *(void *)v76;
          *(void *)int v20 = 0;
          *((void *)v20 + 1) = 0;
          *((void *)v20 + 2) = v21;
          *unint64_t v19 = v20;
          if (*v71)
          {
            float v71 = (uint64_t **)*v71;
            int v20 = (_OWORD *)*v19;
          }
          sub_19074BCA4(v72, (uint64_t *)v20);
          ++v73;
        }
        int v22 = *(void **)(a1 + 248);
        unint64_t v23 = *(void *)v18;
        for (i = *((void *)v18 + 1); v22; int v22 = (void *)*v22)
        {
          unint64_t v25 = v22[4];
          unint64_t v26 = v22[5];
          BOOL v27 = v26 > i;
          if (v25 != v23) {
            BOOL v27 = v25 > v23;
          }
          if (!v27)
          {
            BOOL v28 = v26 < i;
            BOOL v29 = v25 == v23;
            BOOL v30 = v25 < v23;
            if (v29) {
              BOOL v30 = v28;
            }
            if (!v30) {
              goto LABEL_44;
            }
            ++v22;
          }
        }
        for (unint64_t j = *(void **)(a1 + 272); j; unint64_t j = (void *)*j)
        {
          unint64_t v32 = j[4];
          unint64_t v33 = j[5];
          BOOL v34 = v33 > i;
          if (v32 != v23) {
            BOOL v34 = v32 > v23;
          }
          if (!v34)
          {
            BOOL v35 = v33 < i;
            BOOL v29 = v32 == v23;
            BOOL v36 = v32 < v23;
            if (v29) {
              BOOL v36 = v35;
            }
            if (!v36) {
              goto LABEL_44;
            }
            ++j;
          }
        }
        if (sub_190824A00(*v16))
        {
          *(_OWORD *)uint64_t buf = *v18;
          *(void *)&uint8_t buf[16] = *v16;
          uint64_t v37 = (std::__shared_weak_count *)v16[1];
          float v80 = v37;
          if (v37) {
            atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_19074E35C((uint64_t *)(a1 + 240), *(unint64_t *)buf, *(unint64_t *)&buf[8], (uint64_t)buf);
        }
        else
        {
          *(_OWORD *)uint64_t buf = *v18;
          *(void *)&uint8_t buf[16] = *v16;
          double v38 = (std::__shared_weak_count *)v16[1];
          float v80 = v38;
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_19074E35C((uint64_t *)(a1 + 264), *(unint64_t *)buf, *(unint64_t *)&buf[8], (uint64_t)buf);
        }
        if (*(double *)&v80 != 0.0) {
          sub_1906BFE48(v80);
        }
LABEL_44:
        v16 += 2;
      }
      while (v16 != v17);
      sub_19074C1F8((uint64_t *)(a1 + 328));
      sub_19074644C(a1 + 240, (uint64_t)&v71);
      sub_19074644C(a1 + 264, (uint64_t)&v71);
      if (!*(unsigned char *)(a1 + 216))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        int v39 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v40 = *(void *)(a1 + 256);
          uint64_t v41 = *(void *)(a1 + 280);
          *(_DWORD *)uint64_t buf = 134349312;
          *(void *)&uint8_t buf[4] = v40;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v41;
          _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
          }
          uint64_t v67 = *(void *)(a1 + 256);
          uint64_t v68 = *(void *)(a1 + 280);
          *(_DWORD *)float v76 = 134349312;
          *(void *)&v76[4] = v67;
          __int16 v77 = 2050;
          uint64_t v78 = v68;
          int v69 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLGeoMapFeatureRoadGeometryBuffer::updateRoadDataObjectsWithNewlyBufferedData()", "CoreLocation: %s\n", v69);
          if (v69 != buf) {
            free(v69);
          }
        }
      }
      sub_19074E308((uint64_t)&v71, v72);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  if (!a4)
  {
    sub_19074C1F8(a3);
    double v58 = (long long *)*a2;
    float v56 = (long long *)(a2 + 1);
    int v57 = v58;
    if (v58 == v56) {
      goto LABEL_97;
    }
    while (1)
    {
      uint64_t v59 = *((void *)v57 + 6);
      if (v59)
      {
        if (*(void *)(v59 + 144) - *(void *)(v59 + 136) >= 0x11uLL)
        {
          uint64_t v60 = 0;
          unint64_t v61 = 0;
          while (1)
          {
            GEOClosestCoordinateOnLineSegmentFromCoordinate();
            GEOCalculateDistance();
            if (v62 <= a7) {
              break;
            }
            ++v61;
            v60 += 16;
            if (v61 >= ((uint64_t)(*(void *)(v59 + 144) - *(void *)(v59 + 136)) >> 4) - 1) {
              goto LABEL_91;
            }
          }
LABEL_90:
          sub_1907458E0(a3, v57 + 3);
          goto LABEL_91;
        }
        GEOCalculateDistance();
        if (v63 <= a7) {
          goto LABEL_90;
        }
      }
LABEL_91:
      __int16 v64 = (long long *)*((void *)v57 + 1);
      if (v64)
      {
        do
        {
          int v65 = v64;
          __int16 v64 = *(long long **)v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          int v65 = (long long *)*((void *)v57 + 2);
          BOOL v29 = *(void *)v65 == (void)v57;
          int v57 = v65;
        }
        while (!v29);
      }
      int v57 = v65;
      if (v65 == v56) {
        goto LABEL_97;
      }
    }
  }
  uint64_t v42 = mach_continuous_time();
  sub_1907E1770(v42);
  sub_19074CA8C((double *)buf, a5, a6, a7);
  sub_19074C1F8(a3);
  double v46 = (long long *)*a2;
  int v44 = (long long *)(a2 + 1);
  int v45 = v46;
  if (v46 == v44) {
    goto LABEL_97;
  }
  do
  {
    BOOL v43 = v45 + 3;
    uint64_t v47 = *((void *)v45 + 6);
    if (!v47) {
      goto LABEL_75;
    }
    double v48 = *(double **)(v47 + 136);
    double v49 = *(double **)(v47 + 144);
    if (v48 == v49) {
      goto LABEL_75;
    }
    while (1)
    {
      if (*(double *)buf > *v48 || *(double *)&buf[16] < *v48) {
        goto LABEL_72;
      }
      double v51 = v48[1];
      if (*(double *)&v80 <= *(double *)&buf[8]) {
        break;
      }
      if (*(double *)&v80 >= v51 && *(double *)&buf[8] <= v51) {
        goto LABEL_74;
      }
LABEL_72:
      v48 += 2;
      if (v48 == v49) {
        goto LABEL_75;
      }
    }
    if (*(double *)&v80 >= *(double *)&buf[8]) {
      goto LABEL_72;
    }
    if (*(double *)&v80 <= v51 && *(double *)&buf[8] >= v51) {
      goto LABEL_72;
    }
LABEL_74:
    sub_1907458E0(a3, v43);
LABEL_75:
    __float2 v54 = (long long *)*((void *)v45 + 1);
    if (v54)
    {
      do
      {
        float v55 = v54;
        __float2 v54 = *(long long **)v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        float v55 = (long long *)*((void *)v45 + 2);
        BOOL v29 = *(void *)v55 == (void)v45;
        int v45 = v55;
      }
      while (!v29);
    }
    int v45 = v55;
  }
  while (v55 != v44);
LABEL_97:
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 24))(a1, v43);
  return 1;
}

void sub_1907426F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  double v12 = va_arg(va2, void *);
  uint64_t v13 = va_arg(va2, void);
  sub_19074E308((uint64_t)va1, v12);
  sub_1906EB9DC((uint64_t)va2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_190742774(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v31 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v32 = 256;
  BOOL v28 = 0;
  BOOL v29 = 0;
  uint64_t v30 = 0;
  if (sub_190742960(a1, a3, (uint64_t *)&v28, 0, a4, a5, a6, a7, a8, a9))
  {
    uint64_t v18 = v28;
    unint64_t v19 = v29;
    if (v28 == v29)
    {
      BOOL v25 = *a2 != 0;
      double v20 = -1.0;
    }
    else
    {
      double v20 = -1.0;
      do
      {
        uint64_t v21 = *v18;
        if (v20 < 0.0 || v21 && *(double *)(v21 + 56) > v20)
        {
          uint64_t v22 = v18[1];
          if (v22) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v23 = (std::__shared_weak_count *)a2[1];
          *a2 = v21;
          a2[1] = v22;
          if (v23) {
            sub_1906BFE48(v23);
          }
          double v20 = *(double *)(*v18 + 56);
        }
        v18 += 2;
      }
      while (v18 != v19);
      uint64_t v24 = *a2;
      BOOL v25 = *a2 != 0;
      if (*a2 && v20 > 0.0)
      {
        BOOL v25 = 1;
        *(unsigned char *)(v24 + 64) = 1;
        *(void *)(v24 + 112) = 0x3FF0000000000000;
      }
    }
    BOOL v26 = v20 >= 0.0 && v25;
  }
  else
  {
    BOOL v26 = 0;
  }
  unint64_t v33 = (void **)&v28;
  sub_1906C6BF0(&v33);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v26;
}

void sub_190742940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1906C6BF0((void ***)va1);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_190742960(uint64_t a1, int a2, uint64_t *a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v283 = *MEMORY[0x1E4F143B8];
  uint64_t v259 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v261 = 256;
  double v18 = *(double *)(a1 + 200);
  if (*(double *)(a1 + 208) >= v18 + a9 * 4.0) {
    double v19 = v18 + a9 * 4.0;
  }
  else {
    double v19 = *(double *)(a1 + 208);
  }
  double v257 = a7;
  double v258 = a6;
  double v256 = a9;
  double v246 = a6;
  double v247 = a7;
  if (sub_1907A22F8((id *)(a1 + 232), a2, &v258, &v257, &v256, 5, a6, a7, a9) == 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    double v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349569;
      *(double *)&uint8_t buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = v258;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v257;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,getSnapCandidates,location shifting failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      *(_DWORD *)__int16 v274 = 134349569;
      *(double *)&v274[4] = a5;
      *(_WORD *)&v274[12] = 2049;
      *(double *)&v274[14] = v258;
      *(_WORD *)&v274[22] = 2049;
      double v275 = v257;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    goto LABEL_120;
  }
  long long v253 = 0;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  if ((sub_190741DC4(a1, (uint64_t *)&v253, a4, v258, v257, v19) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v82 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349569;
      *(double *)&uint8_t buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = v258;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v257;
      _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_119;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_395;
    }
    goto LABEL_409;
  }
  int v240 = a3;
  uint64_t v22 = v253;
  unint64_t v23 = v254;
  if (v253 == v254)
  {
    double v85 = *(double *)(a1 + 208);
    if (v19 == v85)
    {
      int64x2_t v251 = 0uLL;
      unint64_t v252 = 0;
      *(void *)&v274[8] = 0;
      *(void *)&v274[16] = 0;
      *(void *)__int16 v274 = &v274[8];
LABEL_176:
      float v111 = 0;
      *((void *)&__y + 1) = 0;
      *(void *)&long long v270 = 0;
      *(void *)&long long __y = (char *)&__y + 8;
      goto LABEL_185;
    }
    if (sub_190741DC4(a1, (uint64_t *)&v253, a4, v258, v257, v85))
    {
      uint64_t v22 = v253;
      unint64_t v23 = v254;
      if (v253 != v254) {
        goto LABEL_16;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      unint64_t v86 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134349569;
        *(double *)&uint8_t buf[4] = a5;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&unsigned char buf[14] = v258;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&unsigned char buf[24] = v257;
        _os_log_impl(&dword_1906B8000, v86, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,roads not available close to this point,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2))
      {
LABEL_119:
        *(void *)uint64_t buf = &v253;
        sub_1906C6BF0((void ***)buf);
LABEL_120:
        BOOL v83 = 0;
LABEL_121:
        if ((_BYTE)v261) {
          pthread_mutex_unlock(v260);
        }
        else {
          (*(void (**)(uint64_t))(*(void *)v259 + 24))(v259);
        }
        return v83;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_395:
        *(_DWORD *)__int16 v274 = 134349569;
        *(double *)&v274[4] = a5;
        *(_WORD *)&v274[12] = 2049;
        *(double *)&v274[14] = v258;
        *(_WORD *)&v274[22] = 2049;
        double v275 = v257;
        __int16 v231 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v231);
        if (v231 != buf) {
          free(v231);
        }
        goto LABEL_119;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      float v112 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134349569;
        *(double *)&uint8_t buf[4] = a5;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&unsigned char buf[14] = v258;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&unsigned char buf[24] = v257;
        _os_log_impl(&dword_1906B8000, v112, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_395;
      }
    }
LABEL_409:
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    goto LABEL_395;
  }
LABEL_16:
  int64x2_t v251 = 0uLL;
  unint64_t v252 = 0;
  *(void *)&v274[8] = 0;
  *(void *)&v274[16] = 0;
  *(void *)__int16 v274 = &v274[8];
  if (v22 == v23) {
    goto LABEL_176;
  }
  do
  {
    BOOL v25 = *v22;
    uint64_t v24 = (std::__shared_weak_count *)v22[1];
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)uint64_t buf = v25;
      *(void *)&uint8_t buf[8] = v24;
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      memset(&buf[16], 0, 32);
      sub_1906BFE48(v24);
      BOOL v26 = *v22;
    }
    else
    {
      *(void *)uint64_t buf = *v22;
      memset(&buf[8], 0, 40);
      BOOL v26 = v25;
    }
    BOOL v27 = sub_19074E44C((uint64_t **)v274, *v26, v26[1], v26);
    BOOL v28 = v27;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v29 = (std::__shared_weak_count *)v27[7];
    v28[6] = (uint64_t *)v25;
    v28[7] = (uint64_t *)v24;
    if (v29) {
      sub_1906BFE48(v29);
    }
    uint64_t v30 = (std::__shared_weak_count *)v28[9];
    v28[8] = 0;
    v28[9] = 0;
    if (v30) {
      sub_1906BFE48(v30);
    }
    uint64_t v31 = (std::__shared_weak_count *)v28[11];
    v28[10] = 0;
    v28[11] = 0;
    if (v31) {
      sub_1906BFE48(v31);
    }
    if (v24) {
      sub_1906BFE48(v24);
    }
    v22 += 2;
  }
  while (v22 != v23);
  __int16 v32 = *(void **)v274;
  if (*(unsigned char **)v274 == &v274[8]) {
    goto LABEL_176;
  }
  do
  {
    memset(buf, 0, 24);
    unint64_t v33 = v32 + 6;
    sub_1907459FC(a1, v32 + 6, (uint64_t *)buf, 1);
    BOOL v34 = *(uint64_t **)buf;
    BOOL v35 = *(uint64_t **)&buf[8];
    if (*(void *)buf == *(void *)&buf[8])
    {
      uint64_t v37 = 0;
      goto LABEL_65;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    double v38 = 360.0;
    do
    {
      int v39 = (unint64_t *)*v34;
      if (!*v34) {
        goto LABEL_58;
      }
      uint64_t v40 = *(void **)&v274[8];
      if (!*(void *)&v274[8]) {
        goto LABEL_58;
      }
      unint64_t v41 = *v39;
      unint64_t v42 = v39[1];
      while (1)
      {
        unint64_t v43 = v40[4];
        unint64_t v44 = v40[5];
        BOOL v45 = v44 > v42;
        if (v43 != v41) {
          BOOL v45 = v43 > v41;
        }
        if (v45) {
          goto LABEL_44;
        }
        BOOL v46 = v44 < v42;
        BOOL v47 = v43 == v41;
        BOOL v48 = v43 < v41;
        if (v47) {
          BOOL v48 = v46;
        }
        if (!v48) {
          break;
        }
        ++v40;
LABEL_44:
        uint64_t v40 = (void *)*v40;
        if (!v40) {
          goto LABEL_58;
        }
      }
      double v49 = sub_190823B08(*v33, 0);
      uint64_t v50 = (*(void *)(*v34 + 144) - *(void *)(*v34 + 136)) >> 4;
      double v51 = -1.0;
      if ((int)v50 >= 2) {
        double v51 = sub_190823B08(*v34, (int)v50 - 2);
      }
      double v52 = fmod(v49 - v51, 360.0);
      if (v52 < 0.0) {
        double v52 = v52 + 360.0;
      }
      if (v52 > 180.0) {
        double v52 = v52 + -360.0;
      }
      double v53 = fabs(v52);
      if (v53 < v38)
      {
        uint64_t v36 = *v34;
        __float2 v54 = (std::__shared_weak_count *)v34[1];
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v37) {
          sub_1906BFE48(v37);
        }
        uint64_t v37 = v54;
        double v38 = v53;
      }
LABEL_58:
      v34 += 2;
    }
    while (v34 != v35);
    if (v38 < 30.0)
    {
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v55 = (std::__shared_weak_count *)v32[9];
      _OWORD v32[8] = v36;
      v32[9] = v37;
      if (v55) {
        sub_1906BFE48(v55);
      }
    }
LABEL_65:
    long long __y = 0uLL;
    *(void *)&long long v270 = 0;
    sub_1907451AC(a1, v32 + 6, (uint64_t *)&__y, 1);
    int v57 = (uint64_t *)*((void *)&__y + 1);
    float v56 = (uint64_t *)__y;
    if ((void)__y == *((void *)&__y + 1))
    {
      p_y = (void **)&__y;
      sub_1906C6BF0(&p_y);
      if (v37) {
        goto LABEL_104;
      }
      goto LABEL_105;
    }
    double v58 = 0;
    uint64_t v59 = 0;
    double v60 = 360.0;
    while (2)
    {
      unint64_t v61 = (unint64_t *)*v56;
      if (!*v56) {
        goto LABEL_95;
      }
      double v62 = *(void **)&v274[8];
      if (!*(void *)&v274[8]) {
        goto LABEL_95;
      }
      unint64_t v63 = *v61;
      unint64_t v64 = v61[1];
      while (2)
      {
        unint64_t v65 = v62[4];
        unint64_t v66 = v62[5];
        BOOL v67 = v66 > v64;
        if (v65 != v63) {
          BOOL v67 = v65 > v63;
        }
        if (v67)
        {
LABEL_77:
          double v62 = (void *)*v62;
          if (!v62) {
            goto LABEL_95;
          }
          continue;
        }
        break;
      }
      BOOL v68 = v66 < v64;
      BOOL v47 = v65 == v63;
      BOOL v69 = v65 < v63;
      if (v47) {
        BOOL v69 = v68;
      }
      if (v69)
      {
        ++v62;
        goto LABEL_77;
      }
      int v70 = sub_1908246E0(*v33, v56);
      uint64_t v71 = *v56;
      if (v70)
      {
        double v72 = sub_190823B08(v71, 0);
        uint64_t v73 = (*(void *)(*v33 + 144) - *(void *)(*v33 + 136)) >> 4;
        double v74 = -1.0;
        if ((int)v73 >= 2) {
          double v74 = sub_190823B08(*v33, (int)v73 - 2);
        }
      }
      else
      {
        uint64_t v75 = (*(void *)(v71 + 144) - *(void *)(v71 + 136)) >> 4;
        double v72 = -1.0;
        if ((int)v75 >= 2) {
          double v72 = sub_190823B08(v71, (int)v75 - 2);
        }
        double v74 = sub_190823B08(*v33, 0);
      }
      double v76 = fmod(v72 - v74, 360.0);
      if (v76 < 0.0) {
        double v76 = v76 + 360.0;
      }
      if (v76 > 180.0) {
        double v76 = v76 + -360.0;
      }
      double v77 = fabs(v76);
      if (v77 < v60)
      {
        uint64_t v59 = *v56;
        uint64_t v78 = (std::__shared_weak_count *)v56[1];
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v58) {
          sub_1906BFE48(v58);
        }
        double v58 = v78;
        double v60 = v77;
      }
LABEL_95:
      v56 += 2;
      if (v56 != v57) {
        continue;
      }
      break;
    }
    if (v60 < 30.0)
    {
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v79 = (std::__shared_weak_count *)v32[11];
      v32[10] = v59;
      v32[11] = v58;
      if (v79) {
        sub_1906BFE48(v79);
      }
    }
    p_y = (void **)&__y;
    sub_1906C6BF0(&p_y);
    if (v58) {
      sub_1906BFE48(v58);
    }
    if (v37) {
LABEL_104:
    }
      sub_1906BFE48(v37);
LABEL_105:
    *(void *)&long long __y = buf;
    sub_1906C6BF0((void ***)&__y);
    float v80 = (void *)v32[1];
    if (v80)
    {
      do
      {
        uint64_t v81 = v80;
        float v80 = (void *)*v80;
      }
      while (v80);
    }
    else
    {
      do
      {
        uint64_t v81 = (unsigned char *)v32[2];
        BOOL v47 = *(void *)v81 == (void)v32;
        __int16 v32 = v81;
      }
      while (!v47);
    }
    __int16 v32 = v81;
  }
  while (v81 != &v274[8]);
  float v87 = *(void **)v274;
  *((void *)&__y + 1) = 0;
  *(void *)&long long v270 = 0;
  *(void *)&long long __y = (char *)&__y + 8;
  if (*(unsigned char **)v274 == &v274[8])
  {
    float v111 = 0;
  }
  else
  {
    do
    {
      uint64_t v88 = (unint64_t *)v87[6];
      BOOL v89 = (std::__shared_weak_count *)v87[7];
      float v90 = v88;
      if (v89)
      {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
        float v90 = (unint64_t *)v87[6];
      }
      if (v90 && !sub_19074BAD4((uint64_t)&__y, v88))
      {
        p_y = 0;
        __int16 v266 = 0;
        unint64_t v267 = 0;
        sub_190748000((uint64_t)(v87 + 6), (uint64_t **)v274, (uint64_t *)&p_y);
        float v91 = v266;
        if ((unint64_t)v266 >= v267)
        {
          float v92 = sub_19074E550((uint64_t *)&p_y, v87 + 6);
        }
        else
        {
          sub_19074D22C(v266, v87 + 6);
          float v92 = v91 + 6;
        }
        __int16 v266 = v92;
        sub_1907484F4((uint64_t)(v87 + 6), (uint64_t **)v274, (uint64_t *)&p_y);
        __int16 v262 = 0;
        long double v263 = 0;
        uint64_t v264 = 0;
        int64_t v93 = (long long *)p_y;
        uint64_t v94 = (long long *)v266;
        while (v93 != v94)
        {
          float v95 = *(unint64_t **)v93;
          if (*(void *)v93)
          {
            *(void *)uint64_t buf = *(void *)v93;
            *((unsigned char *)sub_19074E748((uint64_t **)&__y, v95, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 48) = 1;
            sub_1907458E0((uint64_t *)&v262, v93);
          }
          v93 += 3;
        }
        __int16 v96 = (void *)v251.i64[1];
        if (v251.i64[1] >= v252)
        {
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((v251.i64[1] - v251.i64[0]) >> 3);
          unint64_t v99 = v98 + 1;
          if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_190718FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(v252 - v251.i64[0]) >> 3) > v99) {
            unint64_t v99 = 0x5555555555555556 * ((uint64_t)(v252 - v251.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - v251.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v100 = v99;
          }
          *(void *)&buf[32] = &v252;
          if (v100)
          {
            if (v100 > 0xAAAAAAAAAAAAAAALL) {
              sub_190718124();
            }
            uint64_t v101 = operator new(24 * v100);
          }
          else
          {
            uint64_t v101 = 0;
          }
          unint64_t v102 = &v101[(v251.i64[1] - v251.i64[0]) >> 3];
          *(void *)uint64_t buf = v101;
          *(void *)&uint8_t buf[8] = v102;
          *(void *)&uint8_t buf[16] = v102;
          *(void *)&unsigned char buf[24] = &v101[3 * v100];
          v102[1] = 0;
          v102[2] = 0;
          *unint64_t v102 = 0;
          sub_19074BFE8(&v101[3 * v98], v262, v263, (v263 - v262) >> 4);
          uint64_t v103 = *(void *)&buf[8];
          uint64_t v97 = *(void *)&buf[16] + 24;
          *(void *)&buf[16] += 24;
          uint64_t v104 = (void *)v251.i64[1];
          uint64_t v105 = (void *)v251.i64[0];
          if (v251.i64[1] == v251.i64[0])
          {
            int64x2_t v107 = vdupq_n_s64(v251.u64[1]);
          }
          else
          {
            do
            {
              *(void *)(v103 - 24) = 0;
              *(void *)(v103 - 16) = 0;
              v103 -= 24;
              *(void *)(v103 + 16) = 0;
              long long v106 = *(_OWORD *)(v104 - 3);
              v104 -= 3;
              *(_OWORD *)uint64_t v103 = v106;
              *(void *)(v103 + 16) = v104[2];
              *uint64_t v104 = 0;
              v104[1] = 0;
              v104[2] = 0;
            }
            while (v104 != v105);
            int64x2_t v107 = v251;
            uint64_t v97 = *(void *)&buf[16];
          }
          v251.i64[0] = v103;
          v251.i64[1] = v97;
          *(int64x2_t *)&uint8_t buf[8] = v107;
          unint64_t v108 = v252;
          unint64_t v252 = *(void *)&buf[24];
          *(void *)&unsigned char buf[24] = v108;
          *(void *)uint64_t buf = v107.i64[0];
          sub_19074E7D4((uint64_t)buf);
        }
        else
        {
          *(void *)v251.i64[1] = 0;
          v96[1] = 0;
          v96[2] = 0;
          sub_19074BFE8(v96, v262, v263, (v263 - v262) >> 4);
          uint64_t v97 = (uint64_t)(v96 + 3);
        }
        v251.i64[1] = v97;
        *(void *)uint64_t buf = &v262;
        sub_1906C6BF0((void ***)buf);
        *(void *)uint64_t buf = &p_y;
        sub_19074E6C4((void ***)buf);
      }
      if (v89) {
        sub_1906BFE48(v89);
      }
      int v109 = (void *)v87[1];
      if (v109)
      {
        do
        {
          float v110 = v109;
          int v109 = (void *)*v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          float v110 = (unsigned char *)v87[2];
          BOOL v47 = *(void *)v110 == (void)v87;
          float v87 = v110;
        }
        while (!v47);
      }
      float v87 = v110;
    }
    while (v110 != &v274[8]);
    float v111 = (void *)*((void *)&__y + 1);
  }
LABEL_185:
  sub_19074E308((uint64_t)&__y, v111);
  sub_19074E654(*(void **)&v274[8]);
  memset(&buf[7], 0, 32);
  *(void *)&v274[16] = 0;
  uint64_t v276 = 0;
  char v277 = 0;
  long long v278 = *(_OWORD *)buf;
  *(_OWORD *)uint64_t v279 = *(_OWORD *)&buf[16];
  *(void *)&v279[15] = 0;
  *(double *)__int16 v274 = v256 * v256 * 0.5;
  *(double *)&v274[8] = *(double *)v274;
  double v113 = a10 * a10;
  if (a10 <= 0.0) {
    double v113 = -1.0;
  }
  double v275 = v113;
  sub_190802818((uint64_t)v274);
  double v115 = v257;
  double v114 = v258;
  p_y = 0;
  __int16 v266 = 0;
  unint64_t v267 = 0;
  uint64_t v241 = v251.i64[1];
  uint64_t v116 = v251.i64[0];
  if (v251.i64[0] == v251.i64[1]) {
    goto LABEL_366;
  }
  BOOL v117 = a8 >= 0.0;
  if (a10 <= 0.0) {
    BOOL v117 = 0;
  }
  BOOL v245 = v117;
  BOOL v118 = a10 < 0.0 || a8 < 0.0;
  BOOL v239 = v118;
  double v242 = v258;
  while (2)
  {
    __int16 v262 = 0;
    long double v263 = 0;
    uint64_t v264 = 0;
    float v119 = *(uint64_t **)v116;
    __int16 v250 = *(uint64_t **)(v116 + 8);
    if (*(uint64_t **)v116 == v250)
    {
      *(void *)uint64_t buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      goto LABEL_343;
    }
LABEL_195:
    uint64_t v120 = *v119;
    if (!*v119)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v226 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(double *)&uint8_t buf[4] = a5;
        _os_log_impl(&dword_1906B8000, v226, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_391;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_403;
      }
      goto LABEL_408;
    }
    float v121 = *(double **)(v120 + 136);
    unint64_t v122 = *(void *)(v120 + 144) - (void)v121;
    if ((int)(v122 >> 4) <= 1)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      __int16 v227 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v227, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        LOWORD(__y) = 0;
        uint64_t v232 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v232);
        if (v232 != buf) {
          free(v232);
        }
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v228 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(double *)&uint8_t buf[4] = a5;
        _os_log_impl(&dword_1906B8000, v228, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_391;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_403;
      }
      goto LABEL_408;
    }
    double v123 = *v121;
    double v124 = v121[1];
    *(void *)uint64_t buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    double v125 = 0.0;
    sub_1906DA778((double *)(a1 + 16), (double *)buf, (double *)&buf[8], (double *)&__y, v114, v115, 0.0, v123, v124, 0.0);
    uint64_t v126 = 0;
    double v128 = *(double *)buf;
    double v127 = *(double *)&buf[8];
    uint64_t v129 = (v122 >> 4) - 1;
    double v130 = -1.0;
    double v131 = 0.0;
    do
    {
      double v132 = v128;
      double v133 = v127;
      uint64_t v134 = *(void *)(v120 + 136) + v126;
      double v135 = *(double *)(v134 + 16);
      double v136 = *(double *)(v134 + 24);
      long long __y = 0uLL;
      sub_1906DA778((double *)(a1 + 16), (double *)&__y, (double *)&__y + 1, &v268, v114, v115, 0.0, v135, v136, 0.0);
      double v127 = *((double *)&__y + 1);
      double v128 = *(double *)&__y;
      double v137 = (v132 - *(double *)&__y) * (v132 - *(double *)&__y)
           + (v133 - *((double *)&__y + 1)) * (v133 - *((double *)&__y + 1));
      double v138 = 0.0;
      double v139 = 0.0 - v132;
      if (v137 < 0.001)
      {
        double v140 = v139 * v139;
        double v141 = 0.0 - v133;
LABEL_200:
        double v142 = v140 + v141 * v141;
        goto LABEL_205;
      }
      double v138 = ((0.0 - v133) * (*((double *)&__y + 1) - v133) + v139 * (*(double *)&__y - v132)) / v137;
      if (v138 >= 0.0)
      {
        if (v138 <= 1.0)
        {
          double v140 = (0.0 - (v132 + (*(double *)&__y - v132) * v138)) * (0.0 - (v132 + (*(double *)&__y - v132) * v138));
          double v141 = 0.0 - (v133 + (*((double *)&__y + 1) - v133) * v138);
          goto LABEL_200;
        }
        double v142 = (0.0 - *(double *)&__y) * (0.0 - *(double *)&__y)
             + (0.0 - *((double *)&__y + 1)) * (0.0 - *((double *)&__y + 1));
        double v138 = 1.0;
      }
      else
      {
        double v142 = v139 * v139 + (0.0 - v133) * (0.0 - v133);
        double v138 = 0.0;
      }
LABEL_205:
      double v143 = sqrt(v137);
      double v144 = sqrt(v142);
      BOOL v145 = v130 < 0.0;
      if (v144 < v130) {
        BOOL v145 = 1;
      }
      double v146 = v131 + v143 * v138;
      if (v145)
      {
        double v130 = v144;
        double v125 = v146;
      }
      double v131 = v131 + v143;
      v126 += 16;
      --v129;
    }
    while (v129);
    if (v131 >= 0.001) {
      double v147 = v125 / v131;
    }
    else {
      double v147 = 0.0;
    }
    uint64_t v148 = *v119;
    uint64_t v149 = (std::__shared_weak_count *)v119[1];
    if (v149) {
      atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v148)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      __int16 v160 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v160, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
      }
      double v151 = 0.0;
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_244;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(__y) = 0;
      uint64_t v161 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v161);
      goto LABEL_340;
    }
    uint64_t v150 = (*(void *)(v148 + 144) - *(void *)(v148 + 136)) >> 4;
    if ((int)v150 <= 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      __int16 v162 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      double v151 = 0.0;
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_244;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(__y) = 0;
      uint64_t v161 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v161);
      goto LABEL_340;
    }
    double v151 = 0.0;
    if (v150 == 1) {
      goto LABEL_245;
    }
    sub_19082373C(v148);
    uint64_t v152 = (uint64_t)(*(void *)(v148 + 168) - *(void *)(v148 + 160)) >> 3;
    if (v152 != v150 - 1)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      int v163 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v163, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_244;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(__y) = 0;
      uint64_t v161 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v161);
      double v114 = v242;
LABEL_340:
      if (v161 != buf) {
        free(v161);
      }
LABEL_244:
      LOBYTE(v150) = 0;
LABEL_245:
      double v154 = 0.0;
      double v164 = 0.0;
      goto LABEL_246;
    }
    sub_19082373C(v148);
    if (v147 < 0.000001)
    {
      uint64_t v153 = *(double **)(v148 + 136);
      double v151 = *v153;
      double v154 = v153[1];
      double v155 = v153[2];
      double v156 = v153[3];
      *(void *)uint64_t buf = 0;
      *(void *)&long long __y = 0;
      int v157 = (double *)(a1 + 16);
      double v158 = v151;
      double v159 = v154;
      goto LABEL_302;
    }
    if (v147 >= 0.999999)
    {
      uint64_t v188 = *(void *)(v148 + 136) + 16 * v152;
      double v151 = *(double *)v188;
      double v154 = *(double *)(v188 + 8);
      double v158 = *(double *)(v188 - 16);
      double v159 = *(double *)(v188 - 8);
      *(void *)uint64_t buf = 0;
      *(void *)&long long __y = 0;
      int v157 = (double *)(a1 + 16);
      double v155 = v151;
      double v156 = v154;
LABEL_302:
      sub_1906DA778(v157, (double *)buf, (double *)&__y, &v268, v158, v159, 0.0, v155, v156, 0.0);
      double v189 = atan2(*(long double *)&__y, *(long double *)buf);
      if (v189 < 0.0) {
        double v189 = v189 + 6.28318531;
      }
      double v164 = v189 * 57.2957795;
LABEL_305:
      LOBYTE(v150) = 1;
      goto LABEL_246;
    }
    __int16 v180 = *(double **)(v148 + 160);
    int v181 = *(double **)(v148 + 168);
    if (v180 == v181)
    {
LABEL_290:
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      __int16 v186 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v186, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        LOWORD(__y) = 0;
        int v187 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v187);
        if (v187 != buf) {
          free(v187);
        }
        LOBYTE(v150) = 0;
        double v154 = 0.0;
        double v164 = 0.0;
        double v151 = 0.0;
        goto LABEL_300;
      }
      goto LABEL_244;
    }
    double v182 = 0.0;
    int v183 = 2;
    uint64_t v184 = 24;
    while (1)
    {
      double v185 = *v180 / *(double *)(v148 + 40);
      if (vabdd_f64(v147, v182 + v185) < 0.000001) {
        break;
      }
      if (v182 + v185 > v147)
      {
        __int16 v206 = (double *)(*(void *)(v148 + 136) + v184);
        double v207 = *(v206 - 2);
        double v208 = *v206;
        double v209 = v207 + 360.0;
        if (v207 >= 0.0) {
          double v209 = *(v206 - 2);
        }
        double v210 = v208 + 360.0;
        if (v208 >= 0.0) {
          double v210 = *v206;
        }
        double v211 = v210 - v209;
        double v236 = *v206;
        if (v211 <= 180.0)
        {
          if (v211 < -180.0) {
            double v211 = v211 + 360.0;
          }
        }
        else
        {
          double v211 = v211 + -360.0;
        }
        double v238 = v147;
        double v214 = (v147 - v182) / v185;
        double v234 = *(v206 - 3);
        double v215 = *(v206 - 1);
        double v216 = fmod(v207 + v211 * v214, 360.0);
        if (v216 <= -180.0)
        {
          double v244 = v216 + 360.0;
          double v217 = v236;
        }
        else
        {
          double v244 = v216;
          double v217 = v236;
          if (v216 > 180.0) {
            double v244 = v216 + -360.0;
          }
        }
        double v151 = v234 + (v215 - v234) * v214;
        *(void *)uint64_t buf = 0;
        *(void *)&long long __y = 0;
        sub_1906DA778((double *)(a1 + 16), (double *)buf, (double *)&__y, &v268, v234, v207, 0.0, v215, v217, 0.0);
        double v218 = atan2(*(long double *)&__y, *(long double *)buf);
        if (v218 < 0.0) {
          double v218 = v218 + 6.28318531;
        }
        double v164 = v218 * 57.2957795;
        LOBYTE(v150) = 1;
        double v147 = v238;
        double v154 = v244;
        goto LABEL_246;
      }
      ++v180;
      v184 += 16;
      ++v183;
      double v182 = v182 + v185;
      if (v180 == v181) {
        goto LABEL_290;
      }
    }
    if (v183 < (int)v150)
    {
      __int16 v190 = (double *)(*(void *)(v148 + 136) + v184);
      double v192 = *(v190 - 1);
      double v191 = *v190;
      double v193 = *(v190 - 3);
      double v194 = *(v190 - 2);
      *(void *)uint64_t buf = 0;
      *(void *)&long long __y = 0;
      double v243 = v191;
      sub_1906DA778((double *)(a1 + 16), (double *)buf, (double *)&__y, &v268, v193, v194, 0.0, v192, v191, 0.0);
      long double v195 = *(double *)&__y;
      long double v196 = *(double *)buf;
      uint64_t v197 = *(void *)(v148 + 136) + v184;
      double v198 = *(double *)(v197 + 8);
      double v199 = *(double *)(v197 + 16);
      *(void *)uint64_t buf = 0;
      *(void *)&long long __y = 0;
      sub_1906DA778((double *)(a1 + 16), (double *)buf, (double *)&__y, &v268, v192, v191, 0.0, v198, v199, 0.0);
      long double v235 = *(double *)&__y;
      long double v237 = *(double *)buf;
      double v200 = atan2(v195, v196);
      if (v200 < 0.0) {
        double v200 = v200 + 6.28318531;
      }
      double v201 = v200 * 57.2957795;
      double v202 = atan2(v235, v237);
      if (v202 < 0.0) {
        double v202 = v202 + 6.28318531;
      }
      long double v203 = v202 * 57.2957795;
      double v151 = v192;
      long double v204 = v201;
      double v154 = v243;
      sub_190715278(v204, v203);
      double v164 = v205;
      goto LABEL_305;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v212 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v212, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    double v151 = 0.0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_244;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    LOWORD(__y) = 0;
    __int16 v213 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v213);
    if (v213 != buf) {
      free(v213);
    }
    LOBYTE(v150) = 0;
    double v154 = 0.0;
    double v164 = 0.0;
LABEL_300:
    double v114 = v242;
LABEL_246:
    if (v149) {
      sub_1906BFE48(v149);
    }
    if (v150)
    {
      memset(buf, 0, 24);
      *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
      *(_OWORD *)&buf[32] = 0u;
      long long v281 = 0u;
      int v282 = 0;
      sub_1906DA778((double *)(a1 + 16), (double *)&buf[40], (double *)&buf[32], (double *)&v281, v151, v154, 0.0, v258, v257, 0.0);
      BOOL v165 = v164 >= 0.0 && v245;
      if (v165)
      {
        double v166 = fmod(a8 - v164, 360.0);
        if (v166 < 0.0) {
          double v166 = v166 + 360.0;
        }
        if (v166 > 180.0) {
          double v166 = v166 + -360.0;
        }
        *((void *)&v281 + 1) = fabs(v166);
      }
      sub_190802DC4((uint64_t)v274, (uint64_t)buf);
      char v167 = !v165;
      if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2) {
        char v167 = 1;
      }
      if (v167)
      {
        char v172 = 1;
      }
      else
      {
        double v168 = v147;
        long long __y = 0uLL;
        *(void *)&long long v270 = 0;
        *((void *)&v270 + 1) = 0x3FF0000000000000;
        int v273 = 0;
        double v169 = fmod(v164 + 180.0, 360.0);
        if (v169 >= 0.0) {
          double v170 = v169;
        }
        else {
          double v170 = v169 + 360.0;
        }
        long long v271 = *(_OWORD *)&buf[32];
        *(void *)&long long v272 = v281;
        double v171 = fmod(a8 - v170, 360.0);
        if (v171 < 0.0) {
          double v171 = v171 + 360.0;
        }
        if (v171 > 180.0) {
          double v171 = v171 + -360.0;
        }
        *((void *)&v272 + 1) = fabs(v171);
        sub_190802DC4((uint64_t)v274, (uint64_t)&__y);
        if (*(double *)&__y <= *(double *)buf)
        {
          char v172 = 1;
        }
        else
        {
          char v172 = 0;
          *(_OWORD *)&buf[32] = v271;
          long long v281 = v272;
          int v282 = v273;
          *(_OWORD *)uint64_t buf = __y;
          *(_OWORD *)&uint8_t buf[16] = v270;
          double v164 = v170;
        }
        double v147 = v168;
        double v114 = v242;
      }
      uint64_t v173 = *(void *)buf;
      uint64_t v174 = *v119;
      int v175 = (std::__shared_weak_count *)v119[1];
      __int16 v176 = (int8x16_t *)operator new(0xC0uLL);
      int v177 = v176;
      v176->i64[1] = 0;
      v176[1].i64[0] = 0;
      v176->i64[0] = (uint64_t)&unk_1EE0031F0;
      if (v175) {
        atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int8x16_t v178 = *(int8x16_t *)&buf[32];
      uint64_t v179 = *((void *)&v281 + 1);
      v176[1].i64[1] = 0;
      v176[2].i64[0] = 0;
      v176[3].i64[0] = 0;
      v176[3].i64[1] = 0;
      v176[7].i8[8] = 0;
      v176[8] = (int8x16_t)xmmword_1908824F0;
      v176[9].i32[0] = 0;
      v176[11].i64[0] = 0;
      v176[11].i32[2] = 0;
      if (v175)
      {
        atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
        *(double *)&v176[2].i64[1] = a5;
        *(double *)v176[3].i64 = v151;
        *(double *)&v176[3].i64[1] = v154;
        *(double *)v176[4].i64 = v164;
        *(double *)&v176[4].i64[1] = v147;
        v176[5].i64[0] = v173;
        atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
        v176[2].i64[0] = (uint64_t)v175;
      }
      else
      {
        *(double *)&v176[2].i64[1] = a5;
        *(double *)v176[3].i64 = v151;
        *(double *)&v176[3].i64[1] = v154;
        *(double *)v176[4].i64 = v164;
        *(double *)&v176[4].i64[1] = v147;
        v176[5].i64[0] = v173;
      }
      v176[1].i64[1] = v174;
      v176[5].i8[8] = 1;
      v176[5].i8[9] = v172;
      v176[6] = vextq_s8(v178, v178, 8uLL);
      v176[7].i64[0] = v179;
      *(double *)&v176[9].i64[1] = v246;
      *(double *)v176[10].i64 = v247;
      *(double *)&v176[10].i64[1] = a8;
      if (v175)
      {
        sub_1906BFE48(v175);
        sub_1906BFE48(v175);
      }
      *(void *)&long long __y = (char *)v177 + 24;
      *((void *)&__y + 1) = v177;
      sub_190745090((uint64_t *)&v262, &__y);
      if (*((void *)&__y + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&__y + 1));
      }
      v119 += 2;
      if (v119 == v250)
      {
        __int16 v219 = v262;
        int v220 = v263;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v262 != v263)
        {
          double v221 = -1.0;
          do
          {
            uint64_t v222 = *(void *)v219;
            if (*(void *)v219 && (v221 < 0.0 || *(double *)(v222 + 56) > v221))
            {
              uint64_t v223 = *((void *)v219 + 1);
              if (v223) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v223 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v224 = *(std::__shared_weak_count **)&buf[8];
              *(void *)uint64_t buf = v222;
              *(void *)&uint8_t buf[8] = v223;
              if (v224) {
                sub_1906BFE48(v224);
              }
              double v221 = *(double *)(*(void *)v219 + 56);
            }
            v219 += 16;
          }
          while (v219 != v220);
          if (v221 >= 0.0 && *(void *)buf && **(void **)buf)
          {
            p_p_y = v240;
            if (!v239)
            {
              if (*(double *)(*(void *)buf + 88) >= 135.0) {
                p_p_y = (uint64_t *)&p_y;
              }
              else {
                p_p_y = v240;
              }
            }
            sub_190745090(p_p_y, (long long *)buf);
          }
        }
LABEL_343:
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        *(void *)uint64_t buf = &v262;
        sub_1906C6BF0((void ***)buf);
        v116 += 24;
        if (v116 == v241)
        {
LABEL_366:
          BOOL v83 = *v240 != v240[1];
          goto LABEL_392;
        }
        continue;
      }
      goto LABEL_195;
    }
    break;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  __int16 v229 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    *(double *)&uint8_t buf[4] = a5;
    _os_log_impl(&dword_1906B8000, v229, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
  }
  if (!sub_1906CB57C(115, 0)) {
    goto LABEL_391;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
LABEL_408:
  }
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
LABEL_403:
  LODWORD(__y) = 134349056;
  *(double *)((char *)&__y + 4) = a5;
  __int16 v233 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v233);
  if (v233 != buf) {
    free(v233);
  }
LABEL_391:
  *(void *)uint64_t buf = &v262;
  sub_1906C6BF0((void ***)buf);
  BOOL v83 = 0;
LABEL_392:
  *(void *)uint64_t buf = &p_y;
  sub_1906C6BF0((void ***)buf);
  *(void *)uint64_t buf = &v251;
  sub_19074DEC0((void ***)buf);
  int v230 = HIBYTE(v261);
  *(void *)uint64_t buf = &v253;
  sub_1906C6BF0((void ***)buf);
  if (v230) {
    goto LABEL_121;
  }
  return v83;
}

void sub_190744EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void **a59)
{
  a59 = (void **)&a32;
  sub_1906C6BF0(&a59);
  sub_1906EB9DC((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void **sub_190745090(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    double v14 = (char *)sub_19074C0B4((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    CFTypeRef v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_19074DFBC(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = sub_19074DC48(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_190745198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907451AC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  v74[2] = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v75 = 256;
  if (!*a2)
  {
    uint64_t v10 = 0;
    goto LABEL_104;
  }
  if (!sub_19074141C(a1, (long long *)*a2, 0, a3))
  {
    uint64_t v71 = 0;
    double v72 = 0;
    uint64_t v73 = 0;
    BOOL v68 = 0;
    BOOL v69 = 0;
    uint64_t v70 = 0;
    if (*(unsigned char *)(a1 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), uint64_t v12 = *(void *)(*a2 + 144), v12 == *(void *)(*a2 + 136))
        ? (double v13 = 0.0, v14 = 0.0)
        : (double v13 = *(double *)(v12 - 16), v14 = *(double *)(v12 - 8)),
          (sub_1906BA2D8(a1, 0, 1, 0, Current, v13, v14, *(double *)(a1 + 160)) & 1) == 0))
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v15 = *(void *)(*a2 + 144);
      if (v15 == *(void *)(*a2 + 136))
      {
        double v16 = 0.0;
        double v17 = 0.0;
      }
      else
      {
        double v16 = *(double *)(v15 - 16);
        double v17 = *(double *)(v15 - 8);
      }
      sub_190741EE8(a1, (void *)(a1 + 264), (uint64_t *)&v71, 1, v16, v17, *(double *)(a1 + 160));
      uint64_t v18 = *(void *)(*a2 + 144);
      if (v18 == *(void *)(*a2 + 136))
      {
        double v19 = 0.0;
        double v20 = 0.0;
      }
      else
      {
        double v19 = *(double *)(v18 - 16);
        double v20 = *(double *)(v18 - 8);
      }
      sub_190741EE8(a1, (void *)(a1 + 240), (uint64_t *)&v68, 1, v19, v20, *(double *)(a1 + 160));
      __p = 0;
      unint64_t v66 = 0;
      BOOL v67 = 0;
      int v21 = *(_DWORD *)(*a2 + 112);
      uint64_t v22 = (char *)operator new(4uLL);
      int v63 = a4;
      *(_DWORD *)uint64_t v22 = v21;
      unint64_t v66 = v22 + 4;
      BOOL v67 = v22 + 4;
      unint64_t v23 = v71;
      uint64_t v24 = v72;
      for (__p = v22; v23 != v24; v23 += 2)
      {
        if (sub_1908246E0(*a2, v23))
        {
          int v25 = *(_DWORD *)(*v23 + 112);
          BOOL v26 = v66;
          if (v66 >= v67)
          {
            BOOL v28 = (char *)__p;
            uint64_t v29 = (v66 - (unsigned char *)__p) >> 2;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v31 = v67 - (unsigned char *)__p;
            if ((v67 - (unsigned char *)__p) >> 1 > v30) {
              unint64_t v30 = v31 >> 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              unint64_t v33 = (char *)sub_19074E100((uint64_t)&v67, v32);
              BOOL v28 = (char *)__p;
              BOOL v26 = v66;
            }
            else
            {
              unint64_t v33 = 0;
            }
            BOOL v34 = &v33[4 * v29];
            *(_DWORD *)BOOL v34 = v25;
            BOOL v27 = v34 + 4;
            while (v26 != v28)
            {
              int v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v35;
              v34 -= 4;
            }
            __p = v34;
            unint64_t v66 = v27;
            BOOL v67 = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v66 = v25;
            BOOL v27 = v26 + 4;
          }
          unint64_t v66 = v27;
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && sub_1908247A8(*a2, v23))
        {
          int v36 = *(_DWORD *)(*v23 + 108);
          uint64_t v37 = v66;
          if (v66 >= v67)
          {
            int v39 = (char *)__p;
            uint64_t v40 = (v66 - (unsigned char *)__p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v42 = v67 - (unsigned char *)__p;
            if ((v67 - (unsigned char *)__p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              unint64_t v44 = (char *)sub_19074E100((uint64_t)&v67, v43);
              int v39 = (char *)__p;
              uint64_t v37 = v66;
            }
            else
            {
              unint64_t v44 = 0;
            }
            BOOL v45 = &v44[4 * v40];
            *(_DWORD *)BOOL v45 = v36;
            double v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            __p = v45;
            unint64_t v66 = v38;
            BOOL v67 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v66 = v36;
            double v38 = v37 + 4;
          }
          unint64_t v66 = v38;
        }
      }
      BOOL v47 = (long long *)v68;
      BOOL v48 = (long long *)v69;
      if (v68 != v69)
      {
        while (1)
        {
          uint64_t v49 = *(void *)v47;
          if (!*(void *)v47) {
            goto LABEL_87;
          }
          uint64_t v50 = *a2;
          if (*(void *)v49 == *(void *)*a2 && *(void *)(v49 + 8) == *(void *)(v50 + 8)) {
            goto LABEL_87;
          }
          int v51 = *(unsigned __int8 *)(v49 + 17);
          if (*(unsigned char *)(v50 + 17)) {
            break;
          }
          if (!v51) {
            goto LABEL_69;
          }
LABEL_87:
          if (++v47 == v48) {
            goto LABEL_95;
          }
        }
        if (!v51) {
          goto LABEL_87;
        }
LABEL_69:
        if (sub_1908246E0(v50, (uint64_t *)v47))
        {
          uint64_t v52 = *a2;
          uint64_t v53 = *(void *)v47;
          if (vabdd_f64(*(double *)(*a2 + 128), *(double *)(*(void *)v47 + 120)) < 1.0)
          {
            if (*(unsigned char *)(v52 + 117)
              || (~*(_DWORD *)(v52 + 112) & 0x7FFFFFFF) == 0
              || *(unsigned char *)(v53 + 116)
              || (int v54 = *(_DWORD *)(v53 + 108), (~v54 & 0x7FFFFFFF) == 0))
            {
LABEL_86:
              sub_1907458E0(a3, v47);
              goto LABEL_87;
            }
            for (unint64_t i = (char *)__p; i != v66; i += 4)
            {
              if (*(_DWORD *)i == v54) {
                goto LABEL_86;
              }
            }
          }
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2) {
          goto LABEL_87;
        }
        if (!sub_1908247A8(*a2, (uint64_t *)v47)) {
          goto LABEL_87;
        }
        uint64_t v56 = *a2;
        uint64_t v57 = *(void *)v47;
        if (vabdd_f64(*(double *)(*a2 + 128), *(double *)(*(void *)v47 + 128)) >= 1.0) {
          goto LABEL_87;
        }
        if (!*(unsigned char *)(v56 + 117) && (~*(_DWORD *)(v56 + 112) & 0x7FFFFFFF) != 0 && !*(unsigned char *)(v57 + 117))
        {
          int v58 = *(_DWORD *)(v57 + 112);
          if ((~v58 & 0x7FFFFFFF) != 0)
          {
            for (unint64_t j = (char *)__p; j != v66; j += 4)
            {
              if (*(_DWORD *)j == v58) {
                goto LABEL_86;
              }
            }
            goto LABEL_87;
          }
        }
        goto LABEL_86;
      }
LABEL_95:
      sub_1907411D4(a1, (long long *)*a2, 0, (long long **)a3);
      if (v63)
      {
        uint64_t v60 = *a2;
        unint64_t v61 = (std::__shared_weak_count *)a2[1];
        v64[0] = v60;
        v64[1] = (uint64_t)v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_190745830(v64, (uint64_t)a3);
        if (v61) {
          sub_1906BFE48(v61);
        }
      }
      if (__p)
      {
        unint64_t v66 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v10 = 1;
    }
    __p = &v68;
    sub_1906C6BF0((void ***)&__p);
    BOOL v68 = (void **)&v71;
    sub_1906C6BF0(&v68);
    goto LABEL_104;
  }
  if (a4)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    v74[0] = v8;
    v74[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_190745830(v74, (uint64_t)a3);
    if (v9) {
      sub_1906BFE48(v9);
    }
  }
  ++*(void *)(a1 + 320);
  uint64_t v10 = 1;
LABEL_104:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v10;
}

void sub_19074578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_1906C6BF0((void ***)&__p);
  a15 = &a18;
  sub_1906C6BF0((void ***)&a15);
  sub_1906EB9DC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_190745830(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v5 = -(uint64_t)v2;
    while (!sub_190824580(*v2, a1))
    {
      v2 += 2;
      v5 -= 16;
      if (v2 == *(uint64_t **)(a2 + 8)) {
        return;
      }
    }
    sub_19074CA20((uint64_t)&v10, (long long *)(16 - v5), *(long long **)(a2 + 8), -v5);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
        if (v9) {
          sub_1906BFE48(v9);
        }
        v8 -= 16;
      }
      while (v8 != v7);
    }
    *(void *)(a2 + 8) = v7;
  }
}

void **sub_1907458E0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    double v14 = (char *)sub_19074C0B4((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    CFTypeRef v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_19074DAC0(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = sub_19074DC48(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1907459E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907459FC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  v74[2] = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v75 = 256;
  if (!*a2)
  {
    uint64_t v10 = 0;
    goto LABEL_104;
  }
  if (!sub_19074141C(a1, (long long *)*a2, 1u, a3))
  {
    uint64_t v71 = 0;
    double v72 = 0;
    uint64_t v73 = 0;
    BOOL v68 = 0;
    BOOL v69 = 0;
    uint64_t v70 = 0;
    if (*(unsigned char *)(a1 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), uint64_t v12 = *(double **)(*a2 + 136), *(double **)(*a2 + 144) == v12)
        ? (double v13 = 0.0, v14 = 0.0)
        : (double v13 = *v12, v14 = v12[1]),
          (sub_1906BA2D8(a1, 0, 1, 0, Current, v13, v14, *(double *)(a1 + 160)) & 1) == 0))
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v15 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v15)
      {
        double v16 = 0.0;
        double v17 = 0.0;
      }
      else
      {
        double v16 = *v15;
        double v17 = v15[1];
      }
      sub_190741EE8(a1, (void *)(a1 + 264), (uint64_t *)&v71, 1, v16, v17, *(double *)(a1 + 160));
      uint64_t v18 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v18)
      {
        double v19 = 0.0;
        double v20 = 0.0;
      }
      else
      {
        double v19 = *v18;
        double v20 = v18[1];
      }
      sub_190741EE8(a1, (void *)(a1 + 240), (uint64_t *)&v68, 1, v19, v20, *(double *)(a1 + 160));
      __p = 0;
      unint64_t v66 = 0;
      BOOL v67 = 0;
      int v21 = *(_DWORD *)(*a2 + 108);
      uint64_t v22 = (char *)operator new(4uLL);
      int v63 = a4;
      *(_DWORD *)uint64_t v22 = v21;
      unint64_t v66 = v22 + 4;
      BOOL v67 = v22 + 4;
      unint64_t v23 = v71;
      uint64_t v24 = v72;
      for (__p = v22; v23 != v24; v23 += 2)
      {
        if (sub_19082467C(*a2, v23))
        {
          int v25 = *(_DWORD *)(*v23 + 108);
          BOOL v26 = v66;
          if (v66 >= v67)
          {
            BOOL v28 = (char *)__p;
            uint64_t v29 = (v66 - (unsigned char *)__p) >> 2;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v31 = v67 - (unsigned char *)__p;
            if ((v67 - (unsigned char *)__p) >> 1 > v30) {
              unint64_t v30 = v31 >> 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              unint64_t v33 = (char *)sub_19074E100((uint64_t)&v67, v32);
              BOOL v28 = (char *)__p;
              BOOL v26 = v66;
            }
            else
            {
              unint64_t v33 = 0;
            }
            BOOL v34 = &v33[4 * v29];
            *(_DWORD *)BOOL v34 = v25;
            BOOL v27 = v34 + 4;
            while (v26 != v28)
            {
              int v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v35;
              v34 -= 4;
            }
            __p = v34;
            unint64_t v66 = v27;
            BOOL v67 = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v66 = v25;
            BOOL v27 = v26 + 4;
          }
          unint64_t v66 = v27;
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && sub_190824744(*a2, v23))
        {
          int v36 = *(_DWORD *)(*v23 + 112);
          uint64_t v37 = v66;
          if (v66 >= v67)
          {
            int v39 = (char *)__p;
            uint64_t v40 = (v66 - (unsigned char *)__p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v42 = v67 - (unsigned char *)__p;
            if ((v67 - (unsigned char *)__p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              unint64_t v44 = (char *)sub_19074E100((uint64_t)&v67, v43);
              int v39 = (char *)__p;
              uint64_t v37 = v66;
            }
            else
            {
              unint64_t v44 = 0;
            }
            BOOL v45 = &v44[4 * v40];
            *(_DWORD *)BOOL v45 = v36;
            double v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            __p = v45;
            unint64_t v66 = v38;
            BOOL v67 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v66 = v36;
            double v38 = v37 + 4;
          }
          unint64_t v66 = v38;
        }
      }
      BOOL v47 = (long long *)v68;
      BOOL v48 = (long long *)v69;
      if (v68 != v69)
      {
        while (1)
        {
          uint64_t v49 = *(void *)v47;
          if (!*(void *)v47) {
            goto LABEL_87;
          }
          uint64_t v50 = *a2;
          if (*(void *)v49 == *(void *)*a2 && *(void *)(v49 + 8) == *(void *)(v50 + 8)) {
            goto LABEL_87;
          }
          int v51 = *(unsigned __int8 *)(v49 + 17);
          if (*(unsigned char *)(v50 + 17)) {
            break;
          }
          if (!v51) {
            goto LABEL_69;
          }
LABEL_87:
          if (++v47 == v48) {
            goto LABEL_95;
          }
        }
        if (!v51) {
          goto LABEL_87;
        }
LABEL_69:
        if (sub_19082467C(v50, (uint64_t *)v47))
        {
          uint64_t v52 = *a2;
          uint64_t v53 = *(void *)v47;
          if (vabdd_f64(*(double *)(*a2 + 120), *(double *)(*(void *)v47 + 128)) < 1.0)
          {
            if (*(unsigned char *)(v52 + 116)
              || (~*(_DWORD *)(v52 + 108) & 0x7FFFFFFF) == 0
              || *(unsigned char *)(v53 + 117)
              || (int v54 = *(_DWORD *)(v53 + 112), (~v54 & 0x7FFFFFFF) == 0))
            {
LABEL_86:
              sub_1907458E0(a3, v47);
              goto LABEL_87;
            }
            for (unint64_t i = (char *)__p; i != v66; i += 4)
            {
              if (*(_DWORD *)i == v54) {
                goto LABEL_86;
              }
            }
          }
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2) {
          goto LABEL_87;
        }
        if (!sub_190824744(*a2, (uint64_t *)v47)) {
          goto LABEL_87;
        }
        uint64_t v56 = *a2;
        uint64_t v57 = *(void *)v47;
        if (vabdd_f64(*(double *)(*a2 + 120), *(double *)(*(void *)v47 + 120)) >= 1.0) {
          goto LABEL_87;
        }
        if (!*(unsigned char *)(v56 + 116) && (~*(_DWORD *)(v56 + 108) & 0x7FFFFFFF) != 0 && !*(unsigned char *)(v57 + 116))
        {
          int v58 = *(_DWORD *)(v57 + 108);
          if ((~v58 & 0x7FFFFFFF) != 0)
          {
            for (unint64_t j = (char *)__p; j != v66; j += 4)
            {
              if (*(_DWORD *)j == v58) {
                goto LABEL_86;
              }
            }
            goto LABEL_87;
          }
        }
        goto LABEL_86;
      }
LABEL_95:
      sub_1907411D4(a1, (long long *)*a2, 1u, (long long **)a3);
      if (v63)
      {
        uint64_t v60 = *a2;
        unint64_t v61 = (std::__shared_weak_count *)a2[1];
        v64[0] = v60;
        v64[1] = (uint64_t)v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_190745830(v64, (uint64_t)a3);
        if (v61) {
          sub_1906BFE48(v61);
        }
      }
      if (__p)
      {
        unint64_t v66 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v10 = 1;
    }
    __p = &v68;
    sub_1906C6BF0((void ***)&__p);
    BOOL v68 = (void **)&v71;
    sub_1906C6BF0(&v68);
    goto LABEL_104;
  }
  if (a4)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    v74[0] = v8;
    v74[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_190745830(v74, (uint64_t)a3);
    if (v9) {
      sub_1906BFE48(v9);
    }
  }
  ++*(void *)(a1 + 320);
  uint64_t v10 = 1;
LABEL_104:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v10;
}

void sub_190745FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_1906C6BF0((void ***)&__p);
  a15 = &a18;
  sub_1906C6BF0((void ***)&a15);
  sub_1906EB9DC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_190746080(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, int a5, double a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v23 = 256;
  sub_19074C1F8(a3);
  sub_19074C1F8(a4);
  if (!*a2)
  {
    uint64_t v14 = 0;
    goto LABEL_34;
  }
  uint64_t v12 = a2[1];
  *(void *)&long long v21 = *a2;
  *((void *)&v21 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = 150;
  do
  {
    uint64_t v14 = 0;
    if (!(void)v21 || a6 <= 0.0) {
      goto LABEL_32;
    }
    *(void *)uint64_t buf = 0;
    BOOL v26 = 0;
    uint64_t v27 = 0;
    if (a5)
    {
      if ((sub_1907451AC(a1, (uint64_t *)&v21, (uint64_t *)buf, 1) & 1) == 0) {
        goto LABEL_25;
      }
    }
    else if (!sub_1907459FC(a1, (uint64_t *)&v21, (uint64_t *)buf, 1))
    {
LABEL_25:
      uint64_t v14 = 0;
LABEL_30:
      sub_19074C1F8(a3);
LABEL_31:
      v24[0] = (void **)buf;
      sub_1906C6BF0(v24);
      goto LABEL_32;
    }
    sub_1907458E0(a3, &v21);
    if ((unint64_t)v26 - *(void *)buf >= 0x11)
    {
      if (buf != (uint8_t *)a4) {
        sub_19074E138((uint64_t)a4, *(uint64_t **)buf, v26, ((uint64_t)v26 - *(void *)buf) >> 4);
      }
      uint64_t v14 = 1;
      goto LABEL_31;
    }
    if (*(uint64_t **)buf == v26)
    {
      uint64_t v14 = 1;
      a3 = a4;
      goto LABEL_30;
    }
    uint64_t v16 = **(void **)buf;
    uint64_t v15 = *(void *)(*(void *)buf + 8);
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    double v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    *(void *)&long long v21 = v16;
    *((void *)&v21 + 1) = v15;
    if (v17)
    {
      sub_1906BFE48(v17);
      uint64_t v16 = v21;
    }
    sub_19082373C(v16);
    a6 = a6 - *(double *)(v16 + 40);
    v24[0] = (void **)buf;
    sub_1906C6BF0(v24);
    --v13;
  }
  while (v13);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  uint64_t v18 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,findAllRoadsUntilTheMultiIntersectionFromThisRoad,exceeded maximum tolerable road search count. Discovered roads may be limited", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    LOWORD(v24[0]) = 0;
    double v20 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findAllRoadsUntilTheMultiIntersectionFromThisRoad(const CLMapRoadPtr, std::vector<CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL, double)", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  uint64_t v14 = 0;
LABEL_32:
  if (*((void *)&v21 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v21 + 1));
  }
LABEL_34:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v14;
}

void sub_1907463FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a6) {
    sub_1906BFE48(a6);
  }
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19074644C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      uint64_t v6 = sub_19074BAD4(a2, v2 + 4);
      uint64_t v7 = (void *)v2[1];
      if (v6)
      {
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v2[2];
            BOOL v9 = *v8 == (void)v2;
            uint64_t v2 = v8;
          }
          while (!v9);
        }
      }
      else
      {
        uint64_t v10 = v2;
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v10[2];
            BOOL v9 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (!v9);
        }
        if (*(void **)a1 == v2) {
          *(void *)a1 = v8;
        }
        unint64_t v11 = *(uint64_t **)(a1 + 8);
        --*(void *)(a1 + 16);
        sub_19074C3A8(v11, v2);
        uint64_t v12 = (std::__shared_weak_count *)v2[7];
        if (v12) {
          sub_1906BFE48(v12);
        }
        operator delete(v2);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_190746540(uint64_t a1, uint64_t a2)
{
}

void sub_190746550(uint64_t a1)
{
}

__n128 sub_19074655C(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_190746580(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1906C6BF0(&v1);
}

void sub_1907465AC(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a1[6];
    id v4 = a2;
    if (v4)
    {
      unint64_t v5 = v4;
      int v6 = *(_DWORD *)(v3 + 152);
      if (v6 == 1)
      {
        if ([v4 isDrivable]) {
          goto LABEL_15;
        }
        int v6 = *(_DWORD *)(v3 + 152);
      }
      if (v6 == 2)
      {
        int v7 = [v5 isRoadPedestrianNavigable];
        int v8 = [v5 walkableSide];
        int v9 = [v5 isRail];
        if ((((v8 - 1) > 2) & ~v7) == 0 && !v9) {
          goto LABEL_15;
        }
        int v6 = *(_DWORD *)(v3 + 152);
      }
      if (v6 != 3
        || ((int v10 = [v5 isRoadPedestrianNavigable],
             int v11 = [v5 walkableSide],
             int v12 = [v5 isRail],
             (((v11 - 1) > 2) & ~v10) != 0)
         || v12)
        && ((int v13 = [v5 bikeableSide], (objc_msgSend(v5, "isRail") & 1) != 0)
         || (v13 - 4) < 0xFFFFFFFD))
      {
LABEL_22:

        return;
      }
LABEL_15:
      sub_190746754(v5, 0, (std::string **)&v15);
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) += 208;
      if ((void)v15)
      {
        if (*(_DWORD *)(v3 + 152) != 1)
        {
          int v14 = *(_DWORD *)(v15 + 104);
          if (v14 >= 1) {
            *(double *)(v15 + 96) = (double)v14 * 3.7;
          }
        }
        sub_1907458E0((uint64_t *)(*(void *)(a1[5] + 8) + 48), &v15);
      }
      if (*((void *)&v15 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v15 + 1));
      }
      goto LABEL_22;
    }
  }
}

void sub_19074673C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_190746754@<D0>(void *a1@<X1>, int a2@<W2>, std::string **a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    long long v15 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "CLMM,GEOMapFeatureRoad is null", (uint8_t *)buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "CoreLocation: %s\n", (const char *)v8);
    if (v8 == buf) {
      goto LABEL_23;
    }
LABEL_52:
    free(v8);
LABEL_23:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  char v4 = a2;
  if (a2 && (unint64_t)[a1 coordinateCount] <= 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = [a1 roadID];
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = [a1 coordinateCount];
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    [a1 roadID];
    [a1 coordinateCount];
    int v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "CoreLocation: %s\n", (const char *)v8);
    if (v8 == buf) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
  sub_19074D900(a3);
  if ([a1 internalRoadName])
  {
    int v9 = *a3;
    sub_1906D5C70(buf, (char *)objc_msgSend((id)objc_msgSend(a1, "internalRoadName"), "UTF8String"));
    std::string::operator=(v9 + 2, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  int v10 = *a3;
  uint64_t v11 = [a1 roadID];
  unint64_t v12 = sub_19074CB6C(a1);
  v10->__r_.__value_.__r.__words[0] = v11;
  v10->__r_.__value_.__l.__size_ = v12;
  int v13 = *a3;
  BOOL v14 = ([a1 isRail] & 1) != 0 || objc_msgSend(a1, "travelDirection") == 0;
  v13->__r_.__value_.__s.__data_[16] = !v14;
  uint64_t v16 = *a3;
  v16->__r_.__value_.__s.__data_[17] = [a1 isRail];
  double v17 = *a3;
  v17->__r_.__value_.__s.__data_[18] = [a1 isTunnel];
  uint64_t v18 = *a3;
  v18->__r_.__value_.__s.__data_[19] = [a1 isBridge];
  double v19 = *a3;
  HIDWORD(v19->__r_.__value_.__r.__words[2]) = [a1 roadClass];
  double v20 = *a3;
  LODWORD(v20[1].__r_.__value_.__l.__data_) = [a1 formOfWay];
  long long v21 = *a3;
  LODWORD(v21[3].__r_.__value_.__l.__data_) = [a1 travelDirection];
  uint64_t v22 = *a3;
  HIDWORD(v22[3].__r_.__value_.__r.__words[0]) = [a1 rampType];
  __int16 v23 = *a3;
  char v24 = [a1 isRoadPedestrianNavigable];
  int v25 = [a1 walkableSide];
  char v26 = [a1 isRail];
  if ((v25 - 1) < 3) {
    char v27 = 1;
  }
  else {
    char v27 = v24;
  }
  v23[3].__r_.__value_.__s.__data_[8] = v27 & (v26 ^ 1);
  uint64_t v28 = *a3;
  v28[3].__r_.__value_.__s.__data_[9] = [a1 isDrivable];
  uint64_t v29 = *a3;
  LODWORD(v28) = [a1 isRoadPedestrianNavigable];
  int v30 = [a1 walkableSide];
  int v31 = [a1 isRail];
  if ((((v30 - 1) > 2) & ~v28) != 0 || ((v31 ^ 1) & 1) == 0)
  {
    int v33 = [a1 bikeableSide];
    int v32 = [a1 isRail] ^ 1;
    if ((v33 - 1) >= 3) {
      LOBYTE(v32) = 0;
    }
  }
  else
  {
    LOBYTE(v32) = 1;
  }
  v29[3].__r_.__value_.__s.__data_[10] = v32;
  BOOL v34 = *a3;
  HIDWORD(v34[3].__r_.__value_.__r.__words[1]) = [a1 walkableSide];
  int v35 = *a3;
  HIDWORD(v35[4].__r_.__value_.__r.__words[1]) = objc_msgSend((id)objc_msgSend(a1, "startJunction"), "junctionIndex");
  int v36 = *a3;
  LODWORD(v36[4].__r_.__value_.__r.__words[2]) = objc_msgSend((id)objc_msgSend(a1, "endJunction"), "junctionIndex");
  uint64_t v37 = *a3;
  v37[4].__r_.__value_.__s.__data_[20] = objc_msgSend((id)objc_msgSend(a1, "startJunction"), "isOnTileBorder");
  double v38 = *a3;
  v38[4].__r_.__value_.__s.__data_[21] = objc_msgSend((id)objc_msgSend(a1, "endJunction"), "isOnTileBorder");
  int v39 = *a3;
  unsigned int v40 = [a1 roadClass];
  int v41 = [a1 travelDirection];
  if (v40 > 7)
  {
    double v43 = dbl_190882500[v41 == 0];
  }
  else
  {
    uint64_t v42 = (double *)&unk_1908826B0;
    if (!v41) {
      uint64_t v42 = (double *)&unk_1908826F0;
    }
    double v43 = v42[v40];
  }
  *(double *)&v39[4].__r_.__value_.__l.__data_ = v43;
  int v44 = [a1 speedLimitIsMPH];
  BOOL v45 = *a3;
  unint64_t v46 = [a1 speedLimit];
  double v47 = 0.277778;
  if (v44) {
    double v47 = 0.44704;
  }
  *(double *)&v45[1].__r_.__value_.__l.__size_ = v47 * (double)v46;
  BOOL v48 = *a3;
  LODWORD(v48[4].__r_.__value_.__r.__words[1]) = [a1 laneCount];
  uint64_t v49 = *a3;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  LODWORD(v49[3].__r_.__value_.__r.__words[2]) = [a1 bikeableSide];
  while ([a1 coordinateCount] > v51)
  {
    sub_1908235F0(*a3, (float64x2_t *)([a1 coordinates] + v50), 1);
    ++v51;
    v50 += 16;
  }
  if ((v4 & 1) == 0 && [a1 coordinateCount] == 1) {
    sub_1908235F0(*a3, (float64x2_t *)[a1 coordinates], 0);
  }
  if ([a1 coordinateCount])
  {
    uint64_t v52 = *a3;
    v52[5].__r_.__value_.__r.__words[0] = *(void *)([a1 coordinates3d] + 16);
    uint64_t v53 = *a3;
    uint64_t v54 = [a1 coordinates3d];
    double result = *(double *)(v54 + 24 * [a1 coordinateCount] - 8);
    *(double *)&v53[5].__r_.__value_.__l.__size_ = result;
  }
  return result;
}

void sub_190746E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    sub_1906BFE48(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_190746E74(uint64_t a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  char v4 = *(int32x2_t **)(a1 + 56);
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    unint64_t v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      *(void *)uint64_t v28 = [a2 code];
      *(_WORD *)&v28[8] = 2114;
      *(void *)uint64_t v29 = [a2 domain];
      *(_WORD *)&v29[8] = 2113;
      *(void *)int v30 = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Roads,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      char v24 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    double v7 = *(double *)(a1 + 64);
    double v6 = *(double *)(a1 + 72);
    double v8 = *(double *)(a1 + 80);
    double v9 = *(double *)(a1 + 88);
    if (sub_190741D20(v7, v6, v8, v9))
    {
      *(double *)&v4[7] = v7;
      *(double *)&unsigned char v4[8] = v8;
      *(double *)&v4[9] = v9;
      *(double *)&v4[10] = v6;
    }
    v4[15].i32[1] = 0;
  }
  if (*(double *)(a1 + 72) > 0.5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v10 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = v4[35].i32[0] + v4[32].i32[0];
      int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      double v13 = 0.0;
      if (*(double *)(a1 + 96) >= 0.0)
      {
        uint64_t v14 = mach_continuous_time();
        double v13 = vabdd_f64(sub_1907E1770(v14), *(double *)(a1 + 96)) * 1000.0;
      }
      uint64_t v16 = *(void *)(a1 + 80);
      uint64_t v15 = *(void *)(a1 + 88);
      uint64_t v17 = *(void *)(a1 + 72);
      int32x2_t v18 = v4[40];
      __int32 v20 = v4[14].i32[0];
      __int32 v19 = v4[14].i32[1];
      __int32 v21 = v4[15].i32[0];
      __int32 v22 = v4[15].i32[1];
      *(_DWORD *)uint64_t buf = 67243009;
      *(_DWORD *)uint64_t v28 = v11;
      *(_WORD *)&v28[4] = 1026;
      *(_DWORD *)&v28[6] = v12;
      *(_WORD *)uint64_t v29 = 2050;
      *(double *)&v29[2] = v13;
      *(_WORD *)int v30 = 2049;
      *(void *)&_OWORD v30[2] = v16;
      __int16 v31 = 2049;
      uint64_t v32 = v15;
      __int16 v33 = 2050;
      uint64_t v34 = v17;
      __int16 v35 = 1026;
      BOOL v36 = a2 != 0;
      __int16 v37 = 1026;
      __int32 v38 = v19;
      __int16 v39 = 2050;
      int32x2_t v40 = v18;
      __int16 v41 = 1026;
      __int32 v42 = v20;
      __int16 v43 = 1026;
      __int32 v44 = v21;
      __int16 v45 = 1026;
      __int32 v46 = v22;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,bufferDataUsingMapsAPI,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x5Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      if (*(double *)(a1 + 96) >= 0.0)
      {
        uint64_t v25 = mach_continuous_time();
        sub_1907E1770(v25);
      }
      char v26 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  if (*(unsigned char *)(a1 + 104)) {
    [*(id *)&v4[11] clearRoadTiles];
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8);
  if (&v4[41] != (int32x2_t *)(v23 + 48)) {
    sub_19074E138((uint64_t)&v4[41], *(uint64_t **)(v23 + 48), *(uint64_t **)(v23 + 56), (uint64_t)(*(void *)(v23 + 56) - *(void *)(v23 + 48)) >> 4);
  }
  v4[28].i8[0] = 0;
  if (*(unsigned char *)(a1 + 105)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_190747434(double *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 5);
  ++*(_DWORD *)(v4 + 116);
  v82[0] = 0;
  v82[1] = 0;
  uint64_t v80 = 0;
  uint64_t v81 = v82;
  uint64_t v78 = 0;
  float v79 = 0;
  if (a2)
  {
    double v6 = a1[6];
    double v5 = a1[7];
    double v7 = a1[8];
    double v8 = a1[9];
    if (sub_190741D20(v6, v5, v7, v8))
    {
      *(double *)(v4 + 56) = v6;
      *(double *)(v4 + 64) = v7;
      *(double *)(v4 + 72) = v8;
      *(double *)(v4 + 80) = v5;
    }
    *(_DWORD *)(v4 + 124) = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    uint64_t v9 = [a2 countByEnumeratingWithState:&v74 objects:v101 count:16];
    uint64_t v71 = v3;
    uint64_t v73 = v4;
    if (!v9)
    {
      int v72 = 0;
      goto LABEL_55;
    }
    int v72 = 0;
    uint64_t v10 = v4 + 16;
    uint64_t v11 = *(void *)v75;
    while (1)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v75 != v11) {
          objc_enumerationMutation(a2);
        }
        double v13 = *(void **)(*((void *)&v74 + 1) + 8 * v12);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v14 = (char *)operator new(0xE8uLL);
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = 0;
          *(void *)uint64_t v14 = &unk_1EE005308;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 56) = 0u;
          *(_OWORD *)(v14 + 72) = 0u;
          *(_OWORD *)(v14 + 88) = 0u;
          *(_OWORD *)(v14 + 120) = 0u;
          *((void *)v14 + 17) = 0;
          *(_OWORD *)(v14 + 104) = 0u;
          *(_OWORD *)(v14 + 24) = 0u;
          *(void *)(v14 + 44) = -1;
          *((void *)v14 + 8) = 0xBFF0000000000000;
          *((void *)v14 + 9) = 0;
          *((void *)v14 + 10) = 0;
          *((void *)v14 + 11) = 0;
          *((void *)v14 + 12) = -1;
          *((void *)v14 + 16) = -1;
          *((_DWORD *)v14 + 34) = -1;
          *((void *)v14 + 28) = 0;
          *((_OWORD *)v14 + 12) = 0u;
          *((_OWORD *)v14 + 13) = 0u;
          *((_OWORD *)v14 + 10) = 0u;
          *((_OWORD *)v14 + 11) = 0u;
          *((_OWORD *)v14 + 9) = 0u;
          *(void *)int v84 = v14 + 24;
          *(void *)&v84[8] = v14;
          if ((sub_190824A6C((uint64_t *)v14 + 3, v10, v13, 0) & 1) == 0) {
            goto LABEL_37;
          }
          uint64_t v15 = *(unint64_t **)v84;
          unint64_t v16 = **(void **)v84;
          unint64_t v83 = **(void **)v84;
          uint64_t v17 = *(double **)(*(void *)v84 + 136);
          if ((int)((*(void *)(*(void *)v84 + 144) - (void)v17) >> 4) > 1)
          {
            if (!sub_19074D0B8(v17, v17 + 2, *(unsigned __int8 *)(*(void *)v84 + 17), *(unsigned __int8 *)(*(void *)v84 + 19), *(unsigned __int8 *)(*(void *)v84 + 18), &v83))
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
              }
              __int32 v20 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t buf = 134283521;
                *(void *)&uint8_t buf[4] = v83;
                _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from CLMapRoadPtr,%{private}lld", buf, 0xCu);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
                }
                int v102 = 134283521;
                unint64_t v103 = v83;
                __int32 v19 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "CoreLocation: %s\n", v19);
LABEL_44:
                if (v19 != buf) {
                  free(v19);
                }
              }
            }
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
            }
            int32x2_t v18 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t buf = 134283521;
              *(void *)&uint8_t buf[4] = v16;
              _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
              }
              int v102 = 134283521;
              unint64_t v103 = v16;
              __int32 v19 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "CoreLocation: %s\n", v19);
              goto LABEL_44;
            }
          }
          unint64_t v21 = v83;
          *uint64_t v15 = v16;
          v15[1] = v21;
          int v22 = *(_DWORD *)(v73 + 152);
          if (v22 == 3)
          {
            uint64_t v23 = *(void *)v84;
            if (!*(unsigned char *)(*(void *)v84 + 82)) {
              goto LABEL_37;
            }
          }
          else
          {
            if (v22 != 2)
            {
              if (v22 != 1 || !*(unsigned char *)(*(void *)v84 + 81))
              {
LABEL_37:
                if (*(void *)&v84[8]) {
                  sub_1906BFE48(*(std::__shared_weak_count **)&v84[8]);
                }
                goto LABEL_39;
              }
LABEL_36:
              sub_1907458E0((uint64_t *)&v78, (long long *)v84);
              v72 += 208;
              goto LABEL_37;
            }
            uint64_t v23 = *(void *)v84;
            if (!*(unsigned char *)(*(void *)v84 + 80)) {
              goto LABEL_37;
            }
          }
          int v24 = *(_DWORD *)(v23 + 104);
          if (v24 >= 1) {
            *(double *)(v23 + 96) = (double)v24 * 3.7;
          }
          goto LABEL_36;
        }
LABEL_39:
        ++v12;
      }
      while (v9 != v12);
      uint64_t v25 = [a2 countByEnumeratingWithState:&v74 objects:v101 count:16];
      uint64_t v9 = v25;
      if (!v25)
      {
LABEL_55:
        uint64_t v4 = v73;
        if ((uint64_t **)(v73 + 328) != &v78) {
          sub_19074E138(v73 + 328, v78, v79, ((char *)v79 - (char *)v78) >> 4);
        }
        uint64_t v3 = v71;
        int v35 = v72;
        goto LABEL_59;
      }
    }
  }
  *(int32x2_t *)(v4 + 120) = vadd_s32(*(int32x2_t *)(v4 + 120), (int32x2_t)0x100000001);
  *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  char v26 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v28 = *((void *)v3 + 8);
    uint64_t v27 = *((void *)v3 + 9);
    uint64_t v29 = *((void *)v3 + 7);
    int v31 = *(_DWORD *)(v4 + 112);
    int v30 = *(_DWORD *)(v4 + 116);
    int v32 = *(_DWORD *)(v4 + 120);
    int v33 = *(_DWORD *)(v4 + 124);
    int v34 = *((unsigned __int8 *)v3 + 88);
    *(_DWORD *)uint64_t buf = 134285313;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)uint64_t v105 = v27;
    *(_WORD *)&v105[8] = 2050;
    *(void *)long long v106 = v29;
    *(_WORD *)&v106[8] = 1026;
    *(_DWORD *)int64x2_t v107 = v30;
    *(_WORD *)&v107[4] = 1026;
    *(_DWORD *)&v107[6] = v31;
    __int16 v108 = 1026;
    *(_DWORD *)int v109 = v32;
    *(_WORD *)&v109[4] = 1026;
    *(_DWORD *)&v109[6] = v33;
    *(_WORD *)float v110 = 1026;
    *(_DWORD *)&v110[2] = v34;
    _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x3Eu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v51 = *((void *)v3 + 8);
    uint64_t v50 = *((void *)v3 + 9);
    uint64_t v52 = *((void *)v3 + 7);
    int v54 = *(_DWORD *)(v4 + 112);
    int v53 = *(_DWORD *)(v4 + 116);
    int v55 = *(_DWORD *)(v4 + 120);
    int v56 = *(_DWORD *)(v4 + 124);
    int v57 = *((unsigned __int8 *)v3 + 88);
    *(_DWORD *)int v84 = 134285313;
    *(void *)&v84[4] = v51;
    *(_WORD *)&v84[12] = 2049;
    *(void *)&v84[14] = v50;
    *(_WORD *)&v84[22] = 2050;
    *(void *)double v85 = v52;
    *(_WORD *)&v85[8] = 1026;
    *(_DWORD *)unint64_t v86 = v53;
    *(_WORD *)&v86[4] = 1026;
    *(_DWORD *)&v86[6] = v54;
    __int16 v87 = 1026;
    *(_DWORD *)uint64_t v88 = v55;
    *(_WORD *)&v88[4] = 1026;
    *(_DWORD *)&v88[6] = v56;
    *(_WORD *)BOOL v89 = 1026;
    *(_DWORD *)&v89[2] = v57;
    int v58 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v58);
    if (v58 != buf) {
      free(v58);
    }
  }
  int v35 = 0;
LABEL_59:
  *(unsigned char *)(v4 + 224) = 0;
  if (v3[7] > *(double *)(v4 + 160))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    BOOL v36 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        int v37 = [a2 count];
      }
      else {
        int v37 = 0;
      }
      double v38 = 0.0;
      if (v3[10] >= 0.0)
      {
        uint64_t v39 = mach_continuous_time();
        double v38 = vabdd_f64(sub_1907E1770(v39), v3[10]) * 1000.0;
      }
      uint64_t v41 = *((void *)v3 + 8);
      uint64_t v40 = *((void *)v3 + 9);
      uint64_t v42 = *((void *)v3 + 7);
      uint64_t v43 = *(void *)(v4 + 320);
      int v45 = *(_DWORD *)(v4 + 112);
      int v44 = *(_DWORD *)(v4 + 116);
      int v46 = *(_DWORD *)(v4 + 120);
      int v47 = *(_DWORD *)(v4 + 124);
      int v48 = *((unsigned __int8 *)v3 + 88);
      *(_DWORD *)uint64_t buf = 67243265;
      *(_DWORD *)&uint8_t buf[4] = v37;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v35;
      *(_WORD *)uint64_t v105 = 2050;
      *(double *)&v105[2] = v38;
      *(_WORD *)long long v106 = 2049;
      *(void *)&v106[2] = v41;
      *(_WORD *)int64x2_t v107 = 2049;
      *(void *)&v107[2] = v40;
      __int16 v108 = 2050;
      *(void *)int v109 = v42;
      *(_WORD *)&v109[8] = 1026;
      *(_DWORD *)float v110 = a2 == 0;
      *(_WORD *)&v110[4] = 1026;
      int v111 = v44;
      __int16 v112 = 2050;
      uint64_t v113 = v43;
      __int16 v114 = 1026;
      int v115 = v45;
      __int16 v116 = 1026;
      int v117 = v46;
      __int16 v118 = 1026;
      int v119 = v47;
      __int16 v120 = 1026;
      int v121 = v48;
      _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x64u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      if (a2) {
        int v49 = [a2 count];
      }
      else {
        int v49 = 0;
      }
      double v59 = 0.0;
      if (v3[10] >= 0.0)
      {
        uint64_t v60 = mach_continuous_time();
        double v59 = vabdd_f64(sub_1907E1770(v60), v3[10]) * 1000.0;
      }
      uint64_t v62 = *((void *)v3 + 8);
      uint64_t v61 = *((void *)v3 + 9);
      uint64_t v63 = *((void *)v3 + 7);
      uint64_t v64 = *(void *)(v4 + 320);
      int v66 = *(_DWORD *)(v4 + 112);
      int v65 = *(_DWORD *)(v4 + 116);
      int v67 = *(_DWORD *)(v4 + 120);
      int v68 = *(_DWORD *)(v4 + 124);
      int v69 = *((unsigned __int8 *)v3 + 88);
      *(_DWORD *)int v84 = 67243265;
      *(_DWORD *)&v84[4] = v49;
      *(_WORD *)&v84[8] = 1026;
      *(_DWORD *)&v84[10] = v35;
      *(_WORD *)&v84[14] = 2050;
      *(double *)&v84[16] = v59;
      *(_WORD *)double v85 = 2049;
      *(void *)&v85[2] = v62;
      *(_WORD *)unint64_t v86 = 2049;
      *(void *)&v86[2] = v61;
      __int16 v87 = 2050;
      *(void *)uint64_t v88 = v63;
      *(_WORD *)&v88[8] = 1026;
      *(_DWORD *)BOOL v89 = a2 == 0;
      *(_WORD *)&v89[4] = 1026;
      int v90 = v65;
      __int16 v91 = 2050;
      uint64_t v92 = v64;
      __int16 v93 = 1026;
      int v94 = v66;
      __int16 v95 = 1026;
      int v96 = v67;
      __int16 v97 = 1026;
      int v98 = v68;
      __int16 v99 = 1026;
      int v100 = v69;
      uint64_t v70 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v70);
      if (v70 != buf) {
        free(v70);
      }
    }
  }
  *(void *)uint64_t buf = &v78;
  sub_1906C6BF0((void ***)buf);
  sub_19074E308((uint64_t)&v81, v82[0]);
}

void sub_190747F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a26;
  sub_1906C6BF0(&a33);
  sub_19074E308((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

void *sub_190747FB8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1906BFE48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_1906BFE48(v4);
  }
  return a1;
}

void sub_190748000(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3 = *(unint64_t **)(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v6 = *a3;
  unint64_t v7 = *v3;
  uint64_t v8 = a3[1] - *a3;
  if (!v8)
  {
LABEL_8:
    uint64_t v10 = sub_19074E44C(a2, v7, v3[1], v3);
    uint64_t v12 = v10[6];
    uint64_t v11 = (std::__shared_weak_count *)v10[7];
    int v58 = v12;
    double v59 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v10[8];
    double v13 = (std::__shared_weak_count *)v10[9];
    uint64_t v60 = v14;
    uint64_t v61 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v16 = v10[10];
    uint64_t v15 = (std::__shared_weak_count *)v10[11];
    uint64_t v62 = v16;
    uint64_t v63 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int32x2_t v18 = (void *)*a3;
    unint64_t v17 = a3[1];
    unint64_t v19 = a3[2];
    if (v17 < v19)
    {
      if (v18 == (void *)v17)
      {
        void *v18 = v12;
        v18[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void v18[2] = v14;
        CFTypeRef v18[3] = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v18[4] = v16;
        void v18[5] = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        a3[1] = (uint64_t)(v18 + 6);
      }
      else
      {
        __int32 v20 = v18 + 6;
        unint64_t v21 = v17 - 48;
        int v56 = v16;
        int v57 = a2;
        int v55 = v14;
        int v22 = (_OWORD *)a3[1];
        if (v17 >= 0x30)
        {
          do
          {
            *int v22 = *(_OWORD *)v21;
            *(void *)unint64_t v21 = 0;
            *(void *)(v21 + 8) = 0;
            v22[1] = *(_OWORD *)(v21 + 16);
            *(void *)(v21 + 16) = 0;
            *(void *)(v21 + 24) = 0;
            v22[2] = *(_OWORD *)(v21 + 32);
            *(void *)(v21 + 32) = 0;
            *(void *)(v21 + 40) = 0;
            v22 += 3;
            v21 += 48;
          }
          while (v21 < v17);
        }
        a3[1] = (uint64_t)v22;
        if ((void *)v17 != v20)
        {
          uint64_t v23 = 2 * ((uint64_t)(v17 - (void)v20) >> 4);
          int v24 = v18 - 2;
          unint64_t v25 = v17 - 24;
          do
          {
            char v26 = &v24[v23];
            long long v27 = *(_OWORD *)&v24[v23 - 4];
            *(v26 - 4) = 0;
            *(v26 - 3) = 0;
            uint64_t v28 = *(std::__shared_weak_count **)(v25 - 16);
            *(_OWORD *)(v25 - 24) = v27;
            if (v28) {
              sub_1906BFE48(v28);
            }
            long long v29 = *((_OWORD *)v26 - 1);
            *(v26 - 2) = 0;
            *(v26 - 1) = 0;
            int v30 = *(std::__shared_weak_count **)v25;
            *(_OWORD *)(v25 - 8) = v29;
            if (v30) {
              sub_1906BFE48(v30);
            }
            int v31 = &v24[v23];
            long long v32 = *(_OWORD *)&v24[v23];
            *int v31 = 0;
            v31[1] = 0;
            int v33 = *(std::__shared_weak_count **)(v25 + 16);
            *(_OWORD *)(v25 + 8) = v32;
            if (v33) {
              sub_1906BFE48(v33);
            }
            v25 -= 48;
            v23 -= 6;
          }
          while (v23 * 8);
        }
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v34 = (std::__shared_weak_count *)v18[1];
        void *v18 = v12;
        v18[1] = v11;
        a2 = v57;
        if (v34) {
          sub_1906BFE48(v34);
        }
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v35 = (std::__shared_weak_count *)v18[3];
        void v18[2] = v55;
        CFTypeRef v18[3] = v13;
        if (v35) {
          sub_1906BFE48(v35);
        }
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v36 = (std::__shared_weak_count *)v18[5];
        v18[4] = v56;
        void v18[5] = v15;
        if (v36) {
          sub_1906BFE48(v36);
        }
      }
LABEL_72:
      sub_190748000(&v58, a2, a3);
      if (v63) {
        sub_1906BFE48(v63);
      }
      if (v61) {
        sub_1906BFE48(v61);
      }
      if (v59) {
        sub_1906BFE48(v59);
      }
      return;
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v18) >> 4) + 1;
    if (v37 > 0x555555555555555) {
      sub_190718FD4();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v18) >> 4);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x555555555555555;
    }
    else {
      unint64_t v39 = v37;
    }
    int v66 = a3 + 2;
    if (v39)
    {
      uint64_t v40 = sub_19074D278(v39);
      *(void *)&long long v64 = v40;
      *((void *)&v64 + 1) = v40;
      *(void *)&long long v65 = v40;
      *((void *)&v65 + 1) = &v40[6 * v41];
      if (v41)
      {
LABEL_62:
        *uint64_t v40 = v12;
        v40[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v40[2] = v14;
        v40[3] = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v40[4] = v16;
        v40[5] = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v65 = v65 + 48;
        uint64_t v50 = sub_19074D2C0((uint64_t)v18, (uint64_t)v18, *a3, *a3, *((uint64_t *)&v64 + 1), *((uint64_t *)&v64 + 1));
        *((void *)&v64 + 1) = v50;
        uint64_t v51 = (void *)a3[1];
        uint64_t v52 = (_OWORD *)v65;
        if (v51 != v18)
        {
          do
          {
            _OWORD *v52 = *(_OWORD *)v18;
            void *v18 = 0;
            v18[1] = 0;
            v52[1] = *((_OWORD *)v18 + 1);
            void v18[2] = 0;
            CFTypeRef v18[3] = 0;
            v52[2] = *((_OWORD *)v18 + 2);
            v18[4] = 0;
            void v18[5] = 0;
            v52 += 3;
            v18 += 6;
          }
          while (v18 != v51);
          uint64_t v50 = *((void *)&v64 + 1);
          int32x2_t v18 = (void *)a3[1];
        }
        uint64_t v53 = *a3;
        *a3 = v50;
        a3[1] = (uint64_t)v52;
        uint64_t v54 = a3[2];
        a3[2] = *((void *)&v65 + 1);
        *(void *)&long long v65 = v18;
        *((void *)&v65 + 1) = v54;
        *(void *)&long long v64 = v53;
        *((void *)&v64 + 1) = v53;
        sub_19074D360((uint64_t)&v64);
        goto LABEL_72;
      }
    }
    else
    {
      long long v64 = 0u;
      long long v65 = 0u;
    }
    v67[4] = a3 + 2;
    uint64_t v42 = sub_19074D278(1uLL);
    uint64_t v44 = *((void *)&v64 + 1);
    if ((void)v65 == *((void *)&v64 + 1))
    {
      uint64_t v47 = *((void *)&v64 + 1);
      int v45 = v42;
    }
    else
    {
      int v45 = (_OWORD *)((char *)v42 + v65 - *((void *)&v64 + 1));
      int v46 = v42;
      do
      {
        _OWORD *v46 = *(_OWORD *)v44;
        *(void *)uint64_t v44 = 0;
        *(void *)(v44 + 8) = 0;
        v46[1] = *(_OWORD *)(v44 + 16);
        *(void *)(v44 + 16) = 0;
        *(void *)(v44 + 24) = 0;
        v46[2] = *(_OWORD *)(v44 + 32);
        *(void *)(v44 + 32) = 0;
        *(void *)(v44 + 40) = 0;
        v46 += 3;
        v44 += 48;
      }
      while (v46 != v45);
      uint64_t v47 = *((void *)&v64 + 1);
      uint64_t v44 = v65;
    }
    uint64_t v48 = v64;
    uint64_t v49 = *((void *)&v65 + 1);
    *(void *)&long long v64 = v42;
    *((void *)&v64 + 1) = v42;
    v67[0] = v48;
    v67[1] = v47;
    *(void *)&long long v65 = v45;
    *((void *)&v65 + 1) = &v42[3 * v43];
    v67[2] = v44;
    v67[3] = v49;
    sub_19074D360((uint64_t)v67);
    uint64_t v40 = (void *)v65;
    goto LABEL_62;
  }
  unint64_t v9 = v8 / 48;
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  while (**(void **)v6 != v7 || *(void *)(*(void *)v6 + 8) != v3[1])
  {
    v6 += 48;
    if (!--v9) {
      goto LABEL_8;
    }
  }
}

void sub_1907484CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_19074D360((uint64_t)va1);
  sub_190747FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1907484F4(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3 = *(unint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v6 = *a3;
    unint64_t v7 = *v3;
    uint64_t v8 = a3[1] - *a3;
    if (v8)
    {
      unint64_t v9 = v8 / 48;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      while (**(void **)v6 != v7 || *(void *)(*(void *)v6 + 8) != v3[1])
      {
        v6 += 48;
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t v10 = sub_19074E44C(a2, v7, v3[1], v3);
      uint64_t v11 = v10[6];
      uint64_t v12 = (std::__shared_weak_count *)v10[7];
      v19[0] = v11;
      v19[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v13 = v10[8];
      uint64_t v14 = (std::__shared_weak_count *)v10[9];
      v19[2] = v13;
      v19[3] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = v10[10];
      unint64_t v16 = (std::__shared_weak_count *)v10[11];
      v19[4] = v15;
      void v19[5] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (uint64_t **)a3[1];
      if ((unint64_t)v17 >= a3[2])
      {
        int32x2_t v18 = sub_19074E550(a3, v19);
      }
      else
      {
        double *v17 = v11;
        v17[1] = (uint64_t *)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v17[2] = v13;
        v17[3] = (uint64_t *)v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v17[4] = v15;
        v17[5] = (uint64_t *)v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int32x2_t v18 = v17 + 6;
      }
      a3[1] = (uint64_t)v18;
      sub_1907484F4(v19, a2, a3);
      if (v16) {
        sub_1906BFE48(v16);
      }
      if (v14) {
        sub_1906BFE48(v14);
      }
      if (v12) {
        sub_1906BFE48(v12);
      }
    }
  }
}

void sub_19074867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_190748690(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v8 = *(void **)a2;
  unint64_t v9 = *(void **)(a2 + 8);
  if (*(void **)a2 != v9)
  {
    double v10 = -1.0;
    do
    {
      uint64_t v11 = *v8;
      if (*v8)
      {
        uint64_t v12 = *(uint64_t **)a3;
        if (a4 >= 0.0 && v12 != 0 && v10 >= 0.0)
        {
          uint64_t v14 = *v12;
          if (*v12)
          {
            if (*(unsigned char *)(v14 + 17) || !*(_DWORD *)(v14 + 72))
            {
              int v15 = sub_190824580(*(void *)v11, v12);
              uint64_t v11 = *v8;
              if (v15)
              {
                double v16 = fmod(*(double *)(v11 + 40) - a4, 360.0);
                if (v16 < 0.0) {
                  double v16 = v16 + 360.0;
                }
                if (v16 > 180.0) {
                  double v16 = v16 + -360.0;
                }
                if (fabs(v16) >= 90.0) {
                  goto LABEL_26;
                }
LABEL_21:
                uint64_t v17 = v8[1];
                if (v17) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
                }
                int32x2_t v18 = *(std::__shared_weak_count **)(a3 + 8);
                *(void *)a3 = v11;
                *(void *)(a3 + 8) = v17;
                if (v18) {
                  sub_1906BFE48(v18);
                }
                double v10 = *(double *)(*v8 + 56);
                goto LABEL_26;
              }
            }
          }
        }
        if (v10 < 0.0 || *(double *)(v11 + 56) > v10) {
          goto LABEL_21;
        }
      }
LABEL_26:
      v8 += 2;
    }
    while (v8 != v9);
  }
  unint64_t v19 = *(uint64_t **)a3;
  if (*(void *)a3 && (double v20 = *((double *)v19 + 7), v20 > 0.0))
  {
    uint64_t v21 = 1;
    *((unsigned char *)v19 + 64) = 1;
    int v22 = *(void **)a2;
    uint64_t v23 = *(void **)(a2 + 8);
    if (*(void **)a2 != v23)
    {
      do
      {
        if (*v22) {
          *(double *)(*v22 + 112) = *(double *)(*v22 + 56) / v20;
        }
        v22 += 2;
      }
      while (v22 != v23);
      uint64_t v21 = 1;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v21;
}

void sub_1907488A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907488B8(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1907451AC(a1, a2, &v8, a4);
  uint64_t v5 = v8;
  if (v8 == v9)
  {
LABEL_5:
    uint64_t v6 = 0;
  }
  else
  {
    while (**(void **)v5 != **(void **)a3 || *(void *)(*(void *)v5 + 8) != *(void *)(*(void *)a3 + 8))
    {
      v5 += 16;
      if (v5 == v9) {
        goto LABEL_5;
      }
    }
    uint64_t v6 = 1;
  }
  uint64_t v11 = (void **)&v8;
  sub_1906C6BF0(&v11);
  return v6;
}

void sub_190748954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1906C6BF0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19074896C(uint64_t a1, char a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) == 0
    && !sub_190741C54((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a5, a6, a7))
  {
    goto LABEL_49;
  }
  *(double *)uint64_t buf = a7;
  uint64_t v14 = (double *)buf;
  if (*(double *)(a1 + 184) < a7) {
    uint64_t v14 = (double *)(a1 + 184);
  }
  int v15 = (double *)(a1 + 176);
  if (*(double *)(a1 + 176) <= a7) {
    int v15 = v14;
  }
  double v16 = *v15;
  if (!sub_190741D20(a4, *v15, a5, a6))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349825;
      *(double *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = a5;
      *(_WORD *)&buf[22] = 2049;
      double v84 = a6;
      LOWORD(v85) = 2050;
      *(double *)((char *)&v85 + 2) = v16;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      *(_DWORD *)uint64_t v71 = 134349825;
      *(double *)&v71[4] = a4;
      *(_WORD *)&v71[12] = 2049;
      *(double *)&v71[14] = a5;
      *(_WORD *)&v71[22] = 2049;
      double v72 = a6;
      LOWORD(v73) = 2050;
      *(double *)((char *)&v73 + 2) = v16;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    goto LABEL_50;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  uint64_t v17 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *(_DWORD *)(a1 + 112);
    int v18 = *(_DWORD *)(a1 + 116);
    int v20 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)uint64_t buf = 134350593;
    *(double *)&uint8_t buf[4] = a4;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&unsigned char buf[14] = a5;
    *(_WORD *)&buf[22] = 2049;
    double v84 = a6;
    LOWORD(v85) = 2050;
    *(double *)((char *)&v85 + 2) = v16;
    WORD5(v85) = 1026;
    HIDWORD(v85) = v18;
    LOWORD(v86) = 1026;
    *(_DWORD *)((char *)&v86 + 2) = v19;
    HIWORD(v86) = 1026;
    LODWORD(v87) = v20;
    _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,queryInProgress,%{public}d", buf, 0x3Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v48 = *(_DWORD *)(a1 + 112);
    int v47 = *(_DWORD *)(a1 + 116);
    int v49 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)uint64_t v71 = 134350593;
    *(double *)&v71[4] = a4;
    *(_WORD *)&v71[12] = 2049;
    *(double *)&v71[14] = a5;
    *(_WORD *)&v71[22] = 2049;
    double v72 = a6;
    LOWORD(v73) = 2050;
    *(double *)((char *)&v73 + 2) = v16;
    WORD5(v73) = 1026;
    HIDWORD(v73) = v47;
    LOWORD(v74) = 1026;
    *(_DWORD *)((char *)&v74 + 2) = v48;
    HIWORD(v74) = 1026;
    LODWORD(v75) = v49;
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v50);
    if (v50 != buf) {
      free(v50);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 169))
  {
    BOOL v21 = *(unsigned char *)(a1 + 224) == 0;
    if (*(unsigned char *)(a1 + 224))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      int v22 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using XPC", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        *(_WORD *)uint64_t v71 = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
    }
    else
    {
      int v28 = *(unsigned __int8 *)(a1 + 192);
      v56[0] = a1;
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      LOWORD(v57) = 256;
      uint64_t v29 = mach_continuous_time();
      double v30 = sub_1907E1770(v29);
      int v31 = (void *)MEMORY[0x192FCF260]();
      ++*(_DWORD *)(a1 + 116);
      *(void *)uint64_t v71 = 0;
      *(void *)&v71[8] = v71;
      *(void *)&v71[16] = 0x2020000000;
      LOBYTE(v72) = 0;
      *(unsigned char *)(a1 + 224) = 1;
      long long v32 = +[CLMapsXPCServiceManager sharedInstance];
      BOOL v33 = v28 != 0;
      CLLocationCoordinate2D v34 = CLLocationCoordinate2DMake(a5, a6);
      if (*(_DWORD *)(a1 + 220) == 1) {
        uint64_t v35 = 2;
      }
      else {
        uint64_t v35 = 1;
      }
      int v36 = *(_DWORD *)(a1 + 152);
      uint64_t v37 = *(unsigned __int8 *)(a1 + 216);
      *(void *)uint64_t buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_19074A75C;
      double v84 = COERCE_DOUBLE(&unk_1E5697630);
      double v86 = a4;
      double v87 = v16;
      double v88 = a5;
      double v89 = a6;
      *(void *)&long long v85 = v71;
      *((void *)&v85 + 1) = a1;
      double v90 = v30;
      -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v32, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", v35, v33, (v36 & 0xFFFFFFFE) == 2, a3, v37, buf, v34.latitude, v34.longitude, v16);
      _Block_object_dispose(v71, 8);
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    }
    goto LABEL_48;
  }
  if (!*(void *)(a1 + 88))
  {
    BOOL v21 = 0;
    goto LABEL_48;
  }
  uint64_t v68 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v70 = 256;
  if (!*(void *)(a1 + 88)) {
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    char v26 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using maps API", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      *(_WORD *)uint64_t v71 = 0;
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
LABEL_41:
    BOOL v21 = 0;
    uint64_t v27 = a1;
    goto LABEL_42;
  }
  uint64_t v40 = mach_continuous_time();
  double v41 = sub_1907E1770(v40);
  uint64_t v42 = (void *)MEMORY[0x192FCF260]();
  uint64_t v62 = 0;
  uint64_t v63 = &v62;
  uint64_t v64 = 0x3052000000;
  long long v65 = sub_190746540;
  int v66 = sub_190746550;
  uint64_t v67 = 0;
  int v43 = *(unsigned __int8 *)(a1 + 216);
  if (*(unsigned char *)(a1 + 216)) {
    v63[5] = (uint64_t)dispatch_semaphore_create(0);
  }
  v56[0] = 0;
  v56[1] = v56;
  uint64_t v57 = 0x4812000000;
  int v58 = sub_190749DC8;
  double v59 = sub_190749DEC;
  uint64_t v60 = "";
  memset(v61, 0, sizeof(v61));
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2020000000;
  int v55 = 0;
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3221225472;
  v53[2] = sub_190749E18;
  v53[3] = &unk_1E5697608;
  v53[4] = v56;
  v53[5] = v54;
  *(void *)uint64_t v71 = MEMORY[0x1E4F143A8];
  *(void *)&v71[8] = 3221225472;
  *(void *)&v71[16] = sub_19074A1B4;
  double v72 = COERCE_DOUBLE(&unk_1E56975B8);
  double v76 = a4;
  double v77 = v16;
  double v78 = a5;
  double v79 = a6;
  *(void *)&long long v73 = v56;
  *((void *)&v73 + 1) = v54;
  double v80 = v41;
  char v81 = v43;
  char v82 = a3;
  long long v74 = &v62;
  uint64_t v75 = a1;
  ++*(_DWORD *)(a1 + 116);
  *(unsigned char *)(a1 + 224) = 1;
  objc_msgSend(*(id *)(a1 + 88), "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:", *(_DWORD *)(a1 + 220) == 1, v53, v71, a5, a6, v16);
  if (!v43) {
    goto LABEL_64;
  }
  intptr_t v44 = dispatch_semaphore_wait((dispatch_semaphore_t)v63[5], 0xFFFFFFFFFFFFFFFFLL);
  int v45 = v63[5];
  if (v45) {
    dispatch_release(v45);
  }
  if (v44)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v46 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,queryForBuildingsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v52);
      if (v52 != buf) {
        free(v52);
      }
    }
    BOOL v21 = 0;
  }
  else
  {
LABEL_64:
    BOOL v21 = 1;
  }
  _Block_object_dispose(v54, 8);
  _Block_object_dispose(v56, 8);
  *(void *)uint64_t buf = v61;
  sub_1906C6BF0((void ***)buf);
  _Block_object_dispose(&v62, 8);
  if (HIBYTE(v70))
  {
    if ((_BYTE)v70)
    {
      pthread_mutex_unlock(v69);
      goto LABEL_48;
    }
    uint64_t v27 = v68;
LABEL_42:
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
LABEL_48:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v21)
  {
LABEL_50:
    uint64_t v38 = 0;
    goto LABEL_51;
  }
LABEL_49:
  uint64_t v38 = 1;
LABEL_51:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v38;
}

void sub_19074965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
}

uint64_t sub_190749724(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v9 = a1;
  v90[1] = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v91 = 256;
  int64x2_t v89 = 0uLL;
  v90[0] = 0;
  uint64_t v10 = mach_continuous_time();
  sub_1907E1770(v10);
  sub_19074CA8C(&v93, a3, a4, a5);
  if (*(unsigned char *)(v9 + 216))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (!sub_19074896C(v9, 0, 0, Current, a3, a4, a5))
    {
      uint64_t v81 = 0;
      goto LABEL_104;
    }
  }
  for (uint64_t i = v89.i64[1]; i != v89.i64[0]; i -= 16)
  {
    double v13 = *(std::__shared_weak_count **)(i - 8);
    if (v13) {
      sub_1906BFE48(v13);
    }
  }
  uint64_t v83 = v9;
  double v84 = (void *)v89.i64[0];
  v89.i64[1] = v89.i64[0];
  uint64_t v14 = *(uint64_t **)(v9 + 232);
  int v15 = *(uint64_t **)(v9 + 240);
  if (v14 == v15) {
    goto LABEL_57;
  }
  do
  {
    uint64_t v16 = *v14;
    if (!*v14) {
      goto LABEL_56;
    }
    uint64_t v17 = *(void *)(v16 + 16);
    unint64_t v18 = 0x8E38E38E38E38E39 * ((*(void *)(v16 + 24) - v17) >> 3);
    if ((int)v18 < 1) {
      goto LABEL_56;
    }
    unint64_t v19 = 0;
    while (1)
    {
      if (v17)
      {
        if (v18 > v19)
        {
          int v20 = *(double **)(v17 + 72 * v19 + 48);
          uint64_t v21 = *(void *)(v17 + 72 * v19 + 56) - (void)v20;
          if ((int)((unint64_t)v21 >> 4) >= 1) {
            break;
          }
        }
      }
LABEL_35:
      if (++v19 == 954437177 * ((*(void *)(v16 + 24) - v17) >> 3)) {
        goto LABEL_56;
      }
    }
    unint64_t v22 = 0;
    unint64_t v23 = v21 >> 4;
    uint64_t v24 = ((unint64_t)v21 >> 4);
    while (1)
    {
      if (v23 <= v22) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = v20;
      }
      if (v93 > *v25 || v95 < *v25) {
        goto LABEL_34;
      }
      double v27 = v25[1];
      if (v96 <= v94) {
        break;
      }
      if (v96 >= v27 && v94 <= v27) {
        goto LABEL_37;
      }
LABEL_34:
      ++v22;
      v20 += 2;
      if (v24 == v22) {
        goto LABEL_35;
      }
    }
    if (v96 >= v94) {
      goto LABEL_34;
    }
    if (v96 <= v27 && v94 >= v27) {
      goto LABEL_34;
    }
LABEL_37:
    if ((unint64_t)v84 >= v90[0])
    {
      uint64_t v32 = ((uint64_t)v84 - v89.i64[0]) >> 4;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_190718FD4();
      }
      unint64_t v33 = (v90[0] - v89.i64[0]) >> 3;
      if (v33 <= v32 + 1) {
        unint64_t v33 = v32 + 1;
      }
      if (v90[0] - v89.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      *(void *)&long long v87 = v90;
      uint64_t v35 = (char *)sub_19074D830(v34);
      uint64_t v37 = &v35[16 * v32];
      long long v38 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v14;
      if (*((void *)&v38 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v39 = (void *)v89.i64[1];
      uint64_t v40 = (void *)v89.i64[0];
      if (v89.i64[1] == v89.i64[0])
      {
        int64x2_t v43 = vdupq_n_s64(v89.u64[1]);
        double v41 = &v35[16 * v32];
      }
      else
      {
        double v41 = &v35[16 * v32];
        do
        {
          long long v42 = *((_OWORD *)v39 - 1);
          v39 -= 2;
          *((_OWORD *)v41 - 1) = v42;
          v41 -= 16;
          *unint64_t v39 = 0;
          v39[1] = 0;
        }
        while (v39 != v40);
        int64x2_t v43 = v89;
      }
      int v31 = v37 + 16;
      v89.i64[0] = (uint64_t)v41;
      v89.i64[1] = (uint64_t)(v37 + 16);
      *(int64x2_t *)&__p[1] = v43;
      intptr_t v44 = (void *)v90[0];
      v90[0] = &v35[16 * v36];
      __p[3] = v44;
      __p[0] = (void *)v43.i64[0];
      sub_19074E834((uint64_t)__p);
    }
    else
    {
      *double v84 = v16;
      uint64_t v30 = v14[1];
      v84[1] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      int v31 = v84 + 2;
    }
    double v84 = v31;
    v89.i64[1] = (uint64_t)v31;
LABEL_56:
    v14 += 2;
  }
  while (v14 != v15);
LABEL_57:
  for (unint64_t j = (void *)v89.i64[0]; j != v84; j += 2)
  {
    uint64_t v46 = *j;
    uint64_t v47 = *(void *)(*j + 16);
    unint64_t v48 = 0x8E38E38E38E38E39 * ((*(void *)(*j + 24) - v47) >> 3);
    if ((int)v48 >= 1)
    {
      unint64_t v49 = 0;
      do
      {
        if (v48 > v49 && v47)
        {
          long long v87 = 0u;
          long long v88 = 0u;
          memset(__p, 0, sizeof(__p));
          uint64_t v50 = v47 + 72 * v49;
          uint64_t v53 = *(double **)(v50 + 48);
          uint64_t v52 = (void **)(v50 + 48);
          uint64_t v51 = v53;
          __p[0] = *(v52 - 2);
          uint64_t v54 = v52[1];
          uint64_t v55 = v54 - (unsigned char *)v53;
          double v56 = 0.0;
          if ((int)((unint64_t)(v54 - (unsigned char *)v53) >> 4) < 1)
          {
            double v74 = 0.0;
            double v75 = 0.0;
            double v76 = 0.0;
          }
          else
          {
            uint64_t v57 = a2;
            int v58 = j;
            double v59 = 0;
            unint64_t v60 = 0;
            do
            {
              if (v51 && v55 >> 4 > v60)
              {
                uint64_t v92 = 0;
                double v93 = 0.0;
                uint64_t v85 = 0;
                sub_1906DA778((double *)(v83 + 16), (double *)&v92, (double *)&v85, &v93, a3, a4, 0.0, v51[2 * v60], v51[2 * v60 + 1], 0.0);
                uint64_t v61 = v85;
                uint64_t v62 = v92;
                if (v59 >= __p[3])
                {
                  uint64_t v63 = ((char *)v59 - (char *)__p[1]) >> 4;
                  if ((unint64_t)(v63 + 1) >> 60) {
                    sub_190718FD4();
                  }
                  unint64_t v64 = ((char *)__p[3] - (char *)__p[1]) >> 3;
                  if (v64 <= v63 + 1) {
                    unint64_t v64 = v63 + 1;
                  }
                  if ((void *)((char *)__p[3] - (char *)__p[1]) >= (void *)0x7FFFFFFFFFFFFFF0) {
                    unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v65 = v64;
                  }
                  uint64_t v67 = (char *)sub_19074C0B4((uint64_t)&__p[3], v65);
                  uint64_t v68 = &v67[16 * v63];
                  *(void *)uint64_t v68 = v61;
                  *((void *)v68 + 1) = v62;
                  int v69 = (char *)__p[1];
                  __int16 v70 = (char *)__p[2];
                  uint64_t v71 = v68;
                  while (v70 != v69)
                  {
                    uint64_t v72 = *((void *)v70 - 2);
                    v70 -= 16;
                    *((void *)v71 - 2) = v72;
                    v71 -= 16;
                    *((void *)v71 + 1) = *((void *)v70 + 1);
                  }
                  double v59 = (double *)(v68 + 16);
                  __p[1] = v71;
                  __p[2] = v68 + 16;
                  __p[3] = &v67[16 * v66];
                  if (v69) {
                    operator delete(v69);
                  }
                }
                else
                {
                  *(void *)double v59 = v85;
                  *((void *)v59 + 1) = v62;
                  v59 += 2;
                }
                __p[2] = v59;
                uint64_t v54 = v52[1];
                uint64_t v51 = (double *)*v52;
              }
              ++v60;
              uint64_t v55 = v54 - (unsigned char *)v51;
            }
            while ((uint64_t)v60 < (int)((unint64_t)(v54 - (unsigned char *)v51) >> 4));
            long long v73 = (double *)__p[1];
            double v74 = 0.0;
            double v75 = 0.0;
            double v76 = 0.0;
            unint64_t j = v58;
            a2 = v57;
            if (__p[1] != v59)
            {
              double v56 = *(double *)__p[1];
              double v74 = *((double *)__p[1] + 1);
              double v75 = *(double *)__p[1];
              double v76 = v74;
              do
              {
                double v77 = *v73;
                double v78 = v73[1];
                v73 += 2;
                if (v77 < v56) {
                  double v56 = v77;
                }
                if (v78 < v74) {
                  double v74 = v78;
                }
                if (v75 < v77) {
                  double v75 = v77;
                }
                if (v76 < v78) {
                  double v76 = v78;
                }
              }
              while (v73 != v59);
            }
          }
          *(double *)&long long v87 = v56;
          *((double *)&v87 + 1) = v74;
          *(double *)&long long v88 = v75;
          *((double *)&v88 + 1) = v76;
          unint64_t v79 = a2[1];
          if (v79 >= a2[2])
          {
            uint64_t v80 = sub_19074E894(a2, (uint64_t)__p);
          }
          else
          {
            *(void **)unint64_t v79 = __p[0];
            *(void *)(v79 + 16) = 0;
            *(void *)(v79 + 24) = 0;
            *(void *)(v79 + 8) = 0;
            sub_19074E9EC((char *)(v79 + 8), (void *)__p[1], (void *)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 4);
            *(_OWORD *)(v79 + 32) = v87;
            *(_OWORD *)(v79 + 48) = v88;
            uint64_t v80 = v79 + 64;
            a2[1] = v79 + 64;
          }
          a2[1] = v80;
          if (__p[1])
          {
            __p[2] = __p[1];
            operator delete(__p[1]);
          }
          uint64_t v46 = *j;
        }
        ++v49;
        uint64_t v47 = *(void *)(v46 + 16);
        unint64_t v48 = 0x8E38E38E38E38E39 * ((*(void *)(v46 + 24) - v47) >> 3);
      }
      while ((uint64_t)v49 < (int)v48);
    }
  }
  uint64_t v81 = 1;
  uint64_t v9 = v83;
LABEL_104:
  __p[0] = &v89;
  sub_1906C6BF0((void ***)__p);
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  return v81;
}

void sub_190749D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  a27 = &a21;
  sub_1906C6BF0((void ***)&a27);
  sub_1906EB9DC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

__n128 sub_190749DC8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_190749DEC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1906C6BF0(&v1);
}

void sub_190749E18(uint64_t a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = a2;
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (std::__shared_weak_count *)operator new(0x40uLL);
      v5[1].__vftable = 0;
      uint64_t v6 = &v5[1].__vftable;
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031B8;
      v5[1].__shared_owners_ = 0;
      v5[1].__shared_weak_owners_ = 0;
      LODWORD(v5[1].__shared_owners_) = -1;
      v5[2].__vftable = 0;
      v5[2].__shared_owners_ = 0;
      v5[1].__vftable = (std::__shared_weak_count_vtbl *)[v4 buildingID];
      LODWORD(v5[1].__shared_owners_) = [v4 tileSetStyle];
      BYTE4(v5[1].__shared_owners_) = 0;
      BYTE4(v5[1].__shared_owners_) = [v4 hasTerrainElevation];
      sub_19074D3B0(&v5[1].__shared_weak_owners_, objc_msgSend((id)objc_msgSend(v4, "sections"), "count"));
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      unint64_t v7 = (void *)[v4 sections];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:&v47 count:16];
      uint64_t v37 = a1;
      if (v8)
      {
        uint64_t v9 = *(void *)v44;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v44 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            uint64_t v42 = 0;
            long long v40 = 0u;
            *(_OWORD *)__p = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            [v11 maxBaseHeight];
            *(void *)&long long v38 = v12;
            [v11 minBaseHeight];
            *((void *)&v38 + 1) = v13;
            [v11 terrainElevation];
            *((void *)&v39 + 1) = v14;
            [v11 topHeight];
            *(void *)&long long v39 = v15;
            [v11 height];
            *(void *)&long long v40 = v16;
            [v11 baseHeight];
            uint64_t v17 = 0;
            unint64_t v18 = 0;
            *((void *)&v40 + 1) = v19;
            while ([v11 coordinateCount] > v18)
            {
              sub_19074D460(&v38, *(double *)([v11 coordinates] + v17), *(double *)(objc_msgSend(v11, "coordinates") + v17 + 8));
              ++v18;
              v17 += 16;
            }
            sub_19074D54C(v6, &v38);
            if (__p[0]) {
              operator delete(__p[0]);
            }
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:&v47 count:16];
        }
        while (v8);
      }
      int v20 = *(int64x2_t **)(*(void *)(v37 + 32) + 8);
      uint64_t v21 = (void *)v20[3].i64[1];
      unint64_t v22 = v20[4].u64[0];
      if ((unint64_t)v21 >= v22)
      {
        uint64_t v24 = v20[3].i64[0];
        uint64_t v25 = ((uint64_t)v21 - v24) >> 4;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60) {
          sub_190718FD4();
        }
        uint64_t v27 = v22 - v24;
        if (v27 >> 3 > v26) {
          unint64_t v26 = v27 >> 3;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v50 = v20 + 4;
        uint64_t v29 = (char *)sub_19074D830(v28);
        int v31 = &v29[16 * v25];
        *(void *)int v31 = v6;
        *((void *)v31 + 1) = v5;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v23 = v31 + 16;
        unint64_t v33 = (void *)v20[3].i64[0];
        uint64_t v32 = (void *)v20[3].i64[1];
        if (v32 == v33)
        {
          int64x2_t v35 = vdupq_n_s64((unint64_t)v32);
        }
        else
        {
          do
          {
            long long v34 = *((_OWORD *)v32 - 1);
            v32 -= 2;
            *((_OWORD *)v31 - 1) = v34;
            v31 -= 16;
            *uint64_t v32 = 0;
            v32[1] = 0;
          }
          while (v32 != v33);
          int64x2_t v35 = v20[3];
        }
        v20[3].i64[0] = (uint64_t)v31;
        v20[3].i64[1] = (uint64_t)v23;
        int64x2_t v48 = v35;
        uint64_t v36 = v20[4].i64[0];
        v20[4].i64[0] = (uint64_t)&v29[16 * v30];
        uint64_t v49 = v36;
        uint64_t v47 = v35.i64[0];
        sub_19074E834((uint64_t)&v47);
      }
      else
      {
        *uint64_t v21 = v6;
        v21[1] = v5;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v23 = v21 + 2;
      }
      v20[3].i64[1] = (uint64_t)v23;
      *(_DWORD *)(*(void *)(*(void *)(v37 + 40) + 8) + 24) += 40;

      sub_1906BFE48(v5);
    }
  }
}

void sub_19074A180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  sub_1906BFE48(v17);
  _Unwind_Resume(a1);
}

void sub_19074A1B4(uint64_t a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  *(unsigned char *)(v4 + 224) = 0;
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    uint64_t v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      uint64_t v27 = [a2 code];
      __int16 v28 = 2114;
      *(void *)uint64_t v29 = [a2 domain];
      *(_WORD *)&v29[8] = 2113;
      *(void *)&unsigned char v29[10] = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Buildings,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    *(int32x2_t *)(v4 + 120) = vadd_s32(*(int32x2_t *)(v4 + 120), (int32x2_t)0x100000001);
  }
  else
  {
    double v7 = *(double *)(a1 + 64);
    double v6 = *(double *)(a1 + 72);
    double v8 = *(double *)(a1 + 80);
    double v9 = *(double *)(a1 + 88);
    if (sub_190741D20(v7, v6, v8, v9))
    {
      *(double *)(v4 + 56) = v7;
      *(double *)(v4 + 64) = v8;
      *(double *)(v4 + 72) = v9;
      *(double *)(v4 + 80) = v6;
    }
    *(_DWORD *)(v4 + 124) = 0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  uint64_t v10 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56)
                  - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)) >> 4;
    int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    double v13 = 0.0;
    if (*(double *)(a1 + 96) >= 0.0)
    {
      uint64_t v14 = mach_continuous_time();
      double v13 = vabdd_f64(sub_1907E1770(v14), *(double *)(a1 + 96)) * 1000.0;
    }
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 72);
    int v18 = *(unsigned __int8 *)(a1 + 104);
    int v19 = *(_DWORD *)(v4 + 116);
    int v20 = *(_DWORD *)(v4 + 120);
    int v21 = *(_DWORD *)(v4 + 124);
    *(_DWORD *)uint64_t buf = 134351617;
    uint64_t v27 = v11;
    __int16 v28 = 1026;
    *(_DWORD *)uint64_t v29 = v12;
    *(_WORD *)&v29[4] = 2050;
    *(double *)&v29[6] = v13;
    *(_WORD *)&v29[14] = 2049;
    *(void *)&v29[16] = v16;
    __int16 v30 = 2049;
    uint64_t v31 = v15;
    __int16 v32 = 2050;
    uint64_t v33 = v17;
    __int16 v34 = 1026;
    BOOL v35 = a2 != 0;
    __int16 v36 = 1026;
    int v37 = v19;
    __int16 v38 = 1026;
    int v39 = v18;
    __int16 v40 = 1026;
    int v41 = v20;
    __int16 v42 = 1026;
    int v43 = v21;
    _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,bufferDataUsingMapsAPI,bldgCount,%{public}lu,sizeOfBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x58u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    if (*(double *)(a1 + 96) >= 0.0)
    {
      uint64_t v23 = mach_continuous_time();
      sub_1907E1770(v23);
    }
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if (*(unsigned char *)(a1 + 105)) {
    [*(id *)(v4 + 88) clearBuildingTiles];
  }
  uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v4 + 232 != v22 + 48) {
    sub_19074EDFC((uint64_t *)(v4 + 232), *(uint64_t **)(v22 + 48), *(uint64_t **)(v22 + 56), (uint64_t)(*(void *)(v22 + 56) - *(void *)(v22 + 48)) >> 4);
  }
  if (*(unsigned char *)(a1 + 104)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_19074A75C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  id v3 = *(int32x2_t **)(a1 + 40);
  v3[28].i8[0] = 0;
  int64x2_t v102 = 0uLL;
  unint64_t v103 = 0;
  double v93 = v3;
  if (!a2)
  {
    v3[15] = vadd_s32(v3[15], (int32x2_t)0x100000001);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    int v58 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_ERROR, "CLTSP,Buildings,xpcQueryForBuildingData returned error", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(v105) = 0;
      double v77 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v77);
      if (v77 != (char *)buf) {
        free(v77);
      }
    }
    goto LABEL_123;
  }
  double v5 = *(double *)(a1 + 48);
  double v4 = *(double *)(a1 + 56);
  double v6 = *(double *)(a1 + 64);
  double v7 = *(double *)(a1 + 72);
  if (sub_190741D20(v5, v4, v6, v7))
  {
    *(double *)&v3[7] = v5;
    *(double *)&v3[8] = v6;
    *(double *)&v3[9] = v7;
    *(double *)&v3[10] = v4;
  }
  v3[15].i32[1] = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  uint64_t v8 = [v2 countByEnumeratingWithState:&v98 objects:v116 count:16];
  if (!v8)
  {
LABEL_123:
    int v97 = 0;
    goto LABEL_124;
  }
  int v97 = 0;
  uint64_t v96 = *(void *)v99;
  double v94 = v2;
  do
  {
    uint64_t v9 = 0;
    uint64_t v95 = v8;
    do
    {
      if (*(void *)v99 != v96) {
        objc_enumerationMutation(v2);
      }
      uint64_t v10 = *(void **)(*((void *)&v98 + 1) + 8 * v9);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
        v11->__shared_owners_ = 0;
        v11->__shared_weak_owners_ = 0;
        v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031B8;
        v11[1].__vftable = 0;
        int v12 = &v11[1].__vftable;
        v11[1].__shared_owners_ = 0;
        v11[1].__shared_weak_owners_ = 0;
        LODWORD(v11[1].__shared_owners_) = -1;
        v11[2].__vftable = 0;
        v11[2].__shared_owners_ = 0;
        if (v10)
        {
          if ([v10 valueForKey:@"buildingID"]) {
            *int v12 = objc_msgSend((id)objc_msgSend(v10, "valueForKey:", @"buildingID"), "longLongValue");
          }
          if ([v10 valueForKey:@"tileSetStyle"]) {
            LODWORD(v11[1].__shared_owners_) = objc_msgSend((id)objc_msgSend(v10, "valueForKey:", @"tileSetStyle"), "intValue");
          }
          if ([v10 valueForKey:@"hasTerrainElevation"]) {
            BYTE4(v11[1].__shared_owners_) = objc_msgSend((id)objc_msgSend(v10, "valueForKey:", @"hasTerrainElevation"), "BOOLValue");
          }
          if ([v10 valueForKey:@"sections"]
            && (double v13 = (void *)[v10 valueForKey:@"sections"]) != 0)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              sub_19074D3B0(&v11[1].__shared_weak_owners_, [v13 count]);
              if ([v13 count])
              {
                uint64_t v14 = 0;
                while (1)
                {
                  uint64_t v15 = (void *)[v13 objectAtIndexedSubscript:v14];
                  uint64_t v16 = v15;
                  if (!v15) {
                    break;
                  }
                  memset(v107, 0, sizeof(v107));
                  long long v105 = 0u;
                  long long v106 = 0u;
                  if ([v15 valueForKey:@"maxBaseHeight"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"maxBaseHeight"), "doubleValue");
                    *(void *)&long long v105 = v17;
                  }
                  if ([v16 valueForKey:@"minBaseHeight"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"minBaseHeight"), "doubleValue");
                    *((void *)&v105 + 1) = v18;
                  }
                  if ([v16 valueForKey:@"topHeight"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"topHeight"), "doubleValue");
                    *(void *)&long long v106 = v19;
                  }
                  if ([v16 valueForKey:@"terrainElevation"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"terrainElevation"), "doubleValue");
                    *((void *)&v106 + 1) = v20;
                  }
                  if ([v16 valueForKey:@"height"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"height"), "doubleValue");
                    *(void *)int64x2_t v107 = v21;
                  }
                  if ([v16 valueForKey:@"baseHeight"])
                  {
                    objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"baseHeight"), "doubleValue");
                    *(void *)&v107[8] = v22;
                  }
                  if ([v16 valueForKey:@"coordinateCount"])
                  {
                    int v23 = objc_msgSend((id)objc_msgSend(v16, "valueForKey:", @"coordinateCount"), "intValue");
                    if (v23 >= 1)
                    {
                      uint64_t v24 = 0;
                      BOOL v25 = 1;
                      while (1)
                      {
                        uint64_t v26 = [NSString stringWithFormat:@"%@%i", @"coord", v24];
                        if ([v16 valueForKey:v26])
                        {
                          uint64_t v27 = objc_msgSend((id)objc_msgSend(v16, "valueForKey:", v26), "componentsSeparatedByString:", @",");
                          if ([v27 count] != 2)
                          {
                            if (qword_1E929F6C0 != -1) {
                              dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
                            }
                            uint64_t v31 = off_1E929F6C8;
                            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,coordinate column counts is not 2", buf, 2u);
                            }
                            if (sub_1906CB57C(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1E929F6C0 != -1) {
                                dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
                              }
                              __int16 v104 = 0;
                              __int16 v32 = (char *)_os_log_send_and_compose_impl();
                              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v32);
                              if (v32 != (char *)buf) {
                                free(v32);
                              }
                            }
                            goto LABEL_45;
                          }
                          objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", 0), "doubleValue");
                          double v29 = v28;
                          objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", 1), "doubleValue");
                          sub_19074D460(&v105, v29, v30);
                        }
                        uint64_t v24 = (v24 + 1);
                        BOOL v25 = (int)v24 < v23;
                        if (v23 == v24) {
                          goto LABEL_44;
                        }
                      }
                    }
                  }
                  BOOL v25 = 0;
LABEL_44:
                  sub_19074D54C(v12, &v105);
LABEL_45:
                  if (*(void *)&v107[16]) {
                    operator delete(*(void **)&v107[16]);
                  }
                  if (!v25 && [v13 count] > (unint64_t)++v14) {
                    continue;
                  }
                  goto LABEL_87;
                }
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
                }
                uint64_t v55 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sectionDict is nil", buf, 2u);
                }
                if (sub_1906CB57C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 == -1) {
                    goto LABEL_112;
                  }
LABEL_114:
                  dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
LABEL_112:
                  LOWORD(v105) = 0;
                  double v56 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v56);
                  if (v56 != (char *)buf) {
                    free(v56);
                  }
                }
              }
            }
            else
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
              }
              int v39 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is not an array", buf, 2u);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  goto LABEL_114;
                }
                goto LABEL_112;
              }
            }
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
            }
            int v37 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is nil", buf, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                goto LABEL_114;
              }
              goto LABEL_112;
            }
          }
        }
        else
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
          }
          __int16 v38 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,makeBuildingFromMapHelperNSDictionary,dictionary is null", buf, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              goto LABEL_114;
            }
            goto LABEL_112;
          }
        }
LABEL_87:
        uint64_t v40 = v102.i64[1];
        if (v102.i64[1] >= (unint64_t)v103)
        {
          uint64_t v42 = (v102.i64[1] - v102.i64[0]) >> 4;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 60) {
            sub_190718FD4();
          }
          uint64_t v44 = (uint64_t)&v103[-v102.i64[0]];
          if ((uint64_t)&v103[-v102.i64[0]] >> 3 > v43) {
            unint64_t v43 = v44 >> 3;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          int v119 = &v103;
          long long v46 = (char *)sub_19074D830(v45);
          int64x2_t v48 = &v46[16 * v42];
          *(void *)int64x2_t v48 = v12;
          *((void *)v48 + 1) = v11;
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v49 = (void *)v102.i64[1];
          uint64_t v50 = (void *)v102.i64[0];
          uint64_t v8 = v95;
          if (v102.i64[1] == v102.i64[0])
          {
            int64x2_t v53 = vdupq_n_s64(v102.u64[1]);
            uint64_t v51 = &v46[16 * v42];
            uint64_t v2 = v94;
          }
          else
          {
            uint64_t v51 = &v46[16 * v42];
            uint64_t v2 = v94;
            do
            {
              long long v52 = *((_OWORD *)v49 - 1);
              v49 -= 2;
              *((_OWORD *)v51 - 1) = v52;
              v51 -= 16;
              *uint64_t v49 = 0;
              v49[1] = 0;
            }
            while (v49 != v50);
            int64x2_t v53 = v102;
          }
          int v41 = v48 + 16;
          v102.i64[0] = (uint64_t)v51;
          v102.i64[1] = (uint64_t)(v48 + 16);
          *(int64x2_t *)__int16 v118 = v53;
          uint64_t v54 = v103;
          unint64_t v103 = &v46[16 * v47];
          *(void *)&v118[16] = v54;
          *(void *)uint64_t buf = v53.i64[0];
          sub_19074E834((uint64_t)buf);
        }
        else
        {
          *(void *)v102.i64[1] = v12;
          *(void *)(v40 + 8) = v11;
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          int v41 = (void *)(v40 + 16);
          uint64_t v2 = v94;
          uint64_t v8 = v95;
        }
        v102.i64[1] = (uint64_t)v41;
        v97 += 40;
        sub_1906BFE48(v11);
        goto LABEL_102;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      uint64_t v33 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        int v34 = [v2 count];
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v34;
        _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,conversion to building failed,%{public}d", buf, 8u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        int v35 = [v2 count];
        LODWORD(v105) = 67240192;
        DWORD1(v105) = v35;
        __int16 v36 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
LABEL_102:
      ++v9;
    }
    while (v9 != v8);
    uint64_t v57 = [v2 countByEnumeratingWithState:&v98 objects:v116 count:16];
    uint64_t v8 = v57;
  }
  while (v57);
LABEL_124:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
  }
  double v59 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    if (v2) {
      int v60 = [v2 count];
    }
    else {
      int v60 = 0;
    }
    int64x2_t v61 = v102;
    uint64_t v62 = (void *)a1;
    double v63 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
    {
      uint64_t v64 = mach_continuous_time();
      double v65 = sub_1907E1770(v64);
      uint64_t v62 = (void *)a1;
      double v63 = vabdd_f64(v65, *(double *)(a1 + 80)) * 1000.0;
    }
    uint64_t v67 = (char **)v62[8];
    uint64_t v66 = v62[9];
    uint64_t v68 = v62[7];
    int v69 = v93[27].u8[0];
    __int32 v70 = v93[14].i32[1];
    __int32 v71 = v93[15].i32[0];
    __int32 v72 = v93[15].i32[1];
    int v73 = v93[24].u8[0];
    *(_DWORD *)uint64_t buf = 67243265;
    *(_DWORD *)&uint8_t buf[4] = v60;
    *(_WORD *)__int16 v118 = 1026;
    *(_DWORD *)&v118[2] = v97;
    *(_WORD *)&v118[6] = 1026;
    *(_DWORD *)&v118[8] = (unint64_t)(v61.i64[1] - v61.i64[0]) >> 4;
    *(_WORD *)&v118[12] = 2050;
    *(double *)&v118[14] = v63;
    *(_WORD *)&v118[22] = 2049;
    int v119 = v67;
    __int16 v120 = 2049;
    uint64_t v121 = v66;
    __int16 v122 = 2050;
    uint64_t v123 = v68;
    __int16 v124 = 1026;
    BOOL v125 = v2 == 0;
    __int16 v126 = 1026;
    __int32 v127 = v70;
    __int16 v128 = 1026;
    int v129 = v69;
    __int16 v130 = 1026;
    __int32 v131 = v71;
    __int16 v132 = 1026;
    __int32 v133 = v72;
    __int16 v134 = 1026;
    int v135 = v73;
    _os_log_impl(&dword_1906B8000, v59, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,MapHelperService,bldgCount,%{public}d,sizeOfBuildings,%{public}d,convertedBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x60u);
  }
  int v74 = sub_1906CB57C(115, 2);
  double v75 = v93;
  if (v74)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    if (v2) {
      int v76 = [v2 count];
    }
    else {
      int v76 = 0;
    }
    int64x2_t v78 = v102;
    unint64_t v79 = (void *)a1;
    double v80 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
    {
      uint64_t v81 = mach_continuous_time();
      double v82 = sub_1907E1770(v81);
      unint64_t v79 = (void *)a1;
      double v80 = vabdd_f64(v82, *(double *)(a1 + 80)) * 1000.0;
    }
    uint64_t v84 = v79[8];
    uint64_t v83 = v79[9];
    uint64_t v85 = v79[7];
    int v86 = v93[27].u8[0];
    __int32 v87 = v93[14].i32[1];
    __int32 v88 = v93[15].i32[0];
    __int32 v89 = v93[15].i32[1];
    int v90 = v93[24].u8[0];
    LODWORD(v105) = 67243265;
    DWORD1(v105) = v76;
    WORD4(v105) = 1026;
    *(_DWORD *)((char *)&v105 + 10) = v97;
    HIWORD(v105) = 1026;
    LODWORD(v106) = (unint64_t)(v78.i64[1] - v78.i64[0]) >> 4;
    WORD2(v106) = 2050;
    *(double *)((char *)&v106 + 6) = v80;
    HIWORD(v106) = 2049;
    *(void *)int64x2_t v107 = v84;
    *(_WORD *)&v107[8] = 2049;
    *(void *)&unsigned char v107[10] = v83;
    *(_WORD *)&v107[18] = 2050;
    *(void *)&v107[20] = v85;
    *(_WORD *)&v107[28] = 1026;
    *(_DWORD *)&v107[30] = v2 == 0;
    *(_WORD *)&v107[34] = 1026;
    *(_DWORD *)&v107[36] = v87;
    __int16 v108 = 1026;
    int v109 = v86;
    __int16 v110 = 1026;
    __int32 v111 = v88;
    __int16 v112 = 1026;
    __int32 v113 = v89;
    __int16 v114 = 1026;
    int v115 = v90;
    __int16 v91 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v91);
    if (v91 != (char *)buf) {
      free(v91);
    }
    double v75 = v93;
  }
  if (&v75[29] != (int32x2_t *)&v102) {
    sub_19074EDFC((uint64_t *)&v75[29], (uint64_t *)v102.i64[0], (uint64_t *)v102.i64[1], (v102.i64[1] - v102.i64[0]) >> 4);
  }
  *(void *)uint64_t buf = &v102;
  sub_1906C6BF0((void ***)buf);
}

void sub_19074B984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  a35 = &a29;
  sub_1906C6BF0((void ***)&a35);
  _Unwind_Resume(a1);
}

os_log_t sub_19074BA0C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

uint64_t sub_19074BA3C(uint64_t a1)
{
  id v3 = (void **)(a1 + 48);
  sub_1906C6BF0(&v3);
  id v3 = (void **)(a1 + 24);
  sub_1906C6BF0(&v3);
  return a1;
}

uint64_t sub_19074BA88(uint64_t a1)
{
  id v3 = (void **)(a1 + 32);
  sub_1906C6BF0(&v3);
  id v3 = (void **)(a1 + 8);
  sub_1906C6BF0(&v3);
  return a1;
}

uint64_t sub_19074BAD4(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    uint64_t result = 1;
    do
    {
      unint64_t v6 = v2[4];
      unint64_t v7 = v2[5];
      BOOL v8 = v4 < v7;
      if (v3 != v6) {
        BOOL v8 = v3 < v6;
      }
      if (!v8)
      {
        BOOL v9 = v7 < v4;
        if (v3 == v6) {
          BOOL v10 = v9;
        }
        else {
          BOOL v10 = v6 < v3;
        }
        if (!v10) {
          return result;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_19074BB34(uint64_t **a1, unint64_t *a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (void **)sub_19074BBCC((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x70uLL);
    long long v9 = **a4;
    v7[4] = 0u;
    void v7[5] = 0u;
    void v7[2] = v9;
    v7[3] = 0u;
    *((void *)v7 + 12) = 0;
    *((void *)v7 + 13) = 0xBFF0000000000000;
    sub_19074BC4C(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_19074BBCC(uint64_t a1, void *a2, unint64_t *a3)
{
  double v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        unint64_t v9 = v4[4];
        unint64_t v10 = v8[5];
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    BOOL v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t *sub_19074BC4C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  double v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_19074BCA4(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_19074BCA4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _DWORD v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            _DWORD v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        void v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_19074BE3C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  double v5 = (uint64_t **)sub_19074BBCC((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_19074BEBC((uint64_t)a1, a3, (uint64_t)&v7);
    sub_19074BC4C(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

double sub_19074BEBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void v6[2] = *(_OWORD *)a2;
  *((_WORD *)v6 + 24) = *(_WORD *)(a2 + 16);
  *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a2 + 24);
  *((void *)v6 + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  v6[5] = *(_OWORD *)(a2 + 48);
  *((void *)v6 + 12) = *(void *)(a2 + 64);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  double result = *(double *)(a2 + 72);
  *((double *)v6 + 13) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_19074BF44(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_19074BFE8((void *)(a1 + 24), *(void **)(a3 + 8), *(void **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_19074BFE8((void *)(a1 + 48), *(void **)(a3 + 32), *(void **)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 4);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  return a1;
}

void sub_19074BFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906C6BF0((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_19074BFE8(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_19074C070(result, a4);
    double result = sub_19074C0EC((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19074C050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1906C6BF0(&a9);
  _Unwind_Resume(a1);
}

char *sub_19074C070(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_190718FD4();
  }
  double result = (char *)sub_19074C0B4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_19074C0B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_190718124();
  }
  return operator new(16 * a2);
}

void *sub_19074C0EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_19074C17C((uint64_t)v7);
  return v4;
}

uint64_t sub_19074C17C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074C1B4(a1);
  }
  return a1;
}

void sub_19074C1B4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_1906BFE48(v3);
    }
    v1 -= 16;
  }
}

void sub_19074C1F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_1906BFE48(v4);
    }
  }
  a1[1] = v2;
}

void sub_19074C244(uint64_t a1, uint64_t *a2)
{
  sub_19074C1F8(a2);
  sub_19074C29C(a2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v4 = (void **)v3;
  sub_1906C6BF0(&v4);
}

void sub_19074C29C(uint64_t *a1)
{
  if (*a1)
  {
    sub_19074C1F8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_19074C2D8(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_19074C334(a1, (uint64_t *)a2);
  uint64_t v5 = (void **)(a2 + 80);
  sub_1906C6BF0(&v5);
  uint64_t v5 = (void **)(a2 + 56);
  sub_1906C6BF0(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_19074C334(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_19074C3A8(v6, a2);
  return v3;
}

uint64_t *sub_19074C3A8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      void v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        double result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        void v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    void v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    void v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t **sub_19074C72C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_19074BC4C(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_19074C7F4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_19074C070(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_19074C900(uint64_t **a1, unint64_t *a2)
{
  unint64_t v3 = (uint64_t **)sub_19074C948((uint64_t)a1, a2);
  if (a1 + 1 == v3) {
    return 0;
  }
  sub_19074C2D8(a1, (uint64_t)v3);
  return 1;
}

void *sub_19074C948(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = v3[5] < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      unint64_t v11 = v3 + 1;
    }
    else {
      unint64_t v11 = v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    unint64_t v3 = (void *)*v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v12 = v7[4];
  BOOL v13 = v6 < v7[5];
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

void sub_19074C9BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_19074C9BC(a1, *a2);
    sub_19074C9BC(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

long long *sub_19074CA20(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)unint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      unint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_1906BFE48(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

double *sub_19074CA8C(double *a1, double a2, double a3, double a4)
{
  unint64_t v5 = a1 + 1;
  unint64_t v6 = a1 + 3;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  sub_190716CD8(a1, a1 + 1, a1 + 2, a1 + 3, a2, a3, a4);
  double v7 = fmod(a1[1], 360.0);
  if (v7 <= -180.0)
  {
    double v7 = v7 + 360.0;
  }
  else if (v7 > 180.0)
  {
    double v7 = v7 + -360.0;
  }
  double *v5 = v7;
  double v8 = fmod(*v6, 360.0);
  if (v8 <= -180.0)
  {
    double v8 = v8 + 360.0;
  }
  else if (v8 > 180.0)
  {
    double v8 = v8 + -360.0;
  }
  a1[3] = v8;
  return a1;
}

unint64_t sub_19074CB6C(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = [a1 roadID];
    uint64_t v13 = v2;
    if ((unint64_t)[a1 coordinateCount] > 1)
    {
      long long v16 = *(_OWORD *)[a1 coordinates];
      *(_OWORD *)unint64_t v12 = *(_OWORD *)([a1 coordinates] + 16);
      if ((unint64_t)[a1 coordinateCount] >= 2)
      {
        unint64_t v6 = 1;
        uint64_t v7 = 16;
        do
        {
          *(_OWORD *)unint64_t v12 = *(_OWORD *)([a1 coordinates] + v7);
          if (vabdd_f64(*(double *)&v16, v12[0]) >= 0.0000001) {
            break;
          }
          if (vabdd_f64(*((double *)&v16 + 1), v12[1]) >= 0.0000001) {
            break;
          }
          ++v6;
          v7 += 16;
        }
        while ([a1 coordinateCount] > v6);
      }
      if (!sub_19074D0B8((double *)&v16, v12, [a1 isRail], objc_msgSend(a1, "isBridge"), objc_msgSend(a1, "isTunnel"), (unint64_t *)&v13))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        double v8 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134283521;
          uint64_t v18 = v13;
          _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from GeoMapFeatureAccess,%{private}lld", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
          }
          int v14 = 134283521;
          unint64_t v15 = v13;
          unint64_t v11 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      return v13;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      unint64_t v3 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134283521;
        uint64_t v18 = [a1 roadID];
        _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
        }
        LODWORD(v16) = 134283521;
        *(void *)((char *)&v16 + 4) = [a1 roadID];
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
    }
    unint64_t v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null feature", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE0057C0);
      }
      LOWORD(v16) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  return v2;
}

BOOL sub_19074D0B8(double *a1, double *a2, int a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v6 = 0;
  if (a1 && a2)
  {
    double v8 = 0.2;
    if (a5) {
      double v8 = 0.35;
    }
    if (a4) {
      double v8 = 0.3;
    }
    if (a3) {
      double v8 = 0.25;
    }
    double v9 = a1[1];
    double v10 = a2[1];
    double v11 = v9 + 360.0;
    if (v9 >= 0.0) {
      double v11 = a1[1];
    }
    if (v10 < 0.0) {
      double v10 = v10 + 360.0;
    }
    double v12 = v10 - v11;
    if (v12 <= 180.0)
    {
      if (v12 < -180.0) {
        double v12 = v12 + 360.0;
      }
    }
    else
    {
      double v12 = v12 + -360.0;
    }
    double v13 = *a1 + (*a2 - *a1) * v8;
    double v14 = fmod(v9 + v12 * v8, 360.0);
    if (v14 <= -180.0)
    {
      double v14 = v14 + 360.0;
    }
    else if (v14 > 180.0)
    {
      double v14 = v14 + -360.0;
    }
    if (fabs(v13) >= 0.00003 || fabs(v14) >= 0.00003)
    {
      unint64_t v15 = (unint64_t)((v14 + 180.0) * 10000000.0) | ((unint64_t)((v13 + 90.0) * 10000000.0) << 32);
      *a6 = v15;
    }
    else
    {
      unint64_t v15 = *a6;
    }
    return v15 != 0;
  }
  return v6;
}

void *sub_19074D22C(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *double result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[3];
  result[2] = a2[2];
  result[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[5];
  result[4] = a2[4];
  result[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_19074D278(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    sub_190718124();
  }
  return operator new(48 * a1);
}

uint64_t sub_19074D2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a6;
  if (a2 != a4)
  {
    uint64_t v7 = (_OWORD *)(a6 - 16);
    do
    {
      long long v8 = *(_OWORD *)(a2 - 48);
      a2 -= 48;
      *(v7 - 2) = v8;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(v7 - 1) = *(_OWORD *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *uint64_t v7 = *(_OWORD *)(a2 + 32);
      v7 -= 3;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      result -= 48;
    }
    while (a2 != a4);
  }
  return result;
}

void sub_19074D304(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1906BFE48(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    sub_1906BFE48(v4);
  }
}

uint64_t sub_19074D360(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_19074D304((void *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_19074D3B0(uint64_t *result, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_190718FD4();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 2;
    v5[0] = sub_19074D780(a2);
    v5[1] = v5[0] + v3;
    _DWORD v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 72 * v4;
    sub_19074D6DC(v2, v5);
    return (uint64_t *)sub_19074D7CC((uint64_t)v5);
  }
  return result;
}

void sub_19074D460(void *a1, double a2, double a3)
{
  uint64_t v7 = (double *)a1[7];
  unint64_t v6 = a1[8];
  if ((unint64_t)v7 >= v6)
  {
    double v9 = (double *)a1[6];
    uint64_t v10 = ((char *)v7 - (char *)v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_19074D830(v14);
      double v9 = (double *)a1[6];
      uint64_t v7 = (double *)a1[7];
    }
    else
    {
      uint64_t v15 = 0;
    }
    long long v16 = (double *)(v14 + 16 * v10);
    unint64_t v17 = v14 + 16 * v15;
    double *v16 = a2;
    v16[1] = a3;
    long long v8 = v16 + 2;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 2;
        v7 -= 2;
      }
      while (v7 != v9);
      double v9 = (double *)a1[6];
    }
    a1[6] = v16;
    a1[7] = v8;
    a1[8] = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    long long v8 = v7 + 2;
  }
  a1[7] = v8;
}

uint64_t sub_19074D54C(void *a1, long long *a2)
{
  uint64_t v4 = a1 + 4;
  unint64_t v5 = a1[4];
  unint64_t v6 = a1[3];
  if (v6 >= v5)
  {
    unint64_t v11 = a1 + 2;
    uint64_t v12 = a1[2];
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v12) >> 3);
    if (v13 + 1 > 0x38E38E38E38E38ELL) {
      sub_190718FD4();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v12) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13 + 1) {
      uint64_t v15 = v13 + 1;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v16 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v24 = v4;
    if (v16) {
      unint64_t v16 = (unint64_t)sub_19074D780(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v16 + 72 * v13;
    v21[0] = v16;
    v21[1] = v18;
    unint64_t v22 = v18;
    unint64_t v23 = v16 + 72 * v17;
    long long v19 = *a2;
    long long v20 = a2[2];
    *(_OWORD *)(v18 + 16) = a2[1];
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)unint64_t v18 = v19;
    *(void *)(v18 + 56) = 0;
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 48) = 0;
    sub_19074D868((void *)(v18 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
    v22 += 72;
    sub_19074D6DC(v11, v21);
    unint64_t v10 = a1[3];
    uint64_t result = sub_19074D7CC((uint64_t)v21);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(v6 + 16) = a2[1];
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)unint64_t v6 = v7;
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    *(void *)(v6 + 48) = 0;
    uint64_t result = (uint64_t)sub_19074D868((void *)(v6 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
    unint64_t v10 = v6 + 72;
    a1[3] = v6 + 72;
  }
  a1[3] = v10;
  return result;
}

void sub_19074D6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074D7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19074D6DC(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      long long v7 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v7;
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 72;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_19074D780(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    sub_190718124();
  }
  return operator new(72 * a1);
}

uint64_t sub_19074D7CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_19074D830(unint64_t a1)
{
  if (a1 >> 60) {
    sub_190718124();
  }
  return operator new(16 * a1);
}

void *sub_19074D868(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t result = sub_19074D830(a4);
    long long v7 = result;
    void *v4 = result;
    v4[1] = result;
    _DWORD v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_19074D8E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19074D900@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xE8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE005308;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((void *)v2 + 17) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)(v2 + 44) = -1;
  *((void *)v2 + 8) = 0xBFF0000000000000;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 12) = -1;
  *((void *)v2 + 16) = -1;
  *((_DWORD *)v2 + 34) = -1;
  *((void *)v2 + 28) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

void sub_19074D9A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19074D9C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005308;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19074DA1C(uint64_t a1)
{
  sub_19074DA48((uint64_t)&v1, a1 + 24);
}

void sub_19074DA48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 184);
  if (v3)
  {
    *(void *)(a2 + 192) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 160);
  if (v4)
  {
    *(void *)(a2 + 168) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 136);
  if (v5)
  {
    *(void *)(a2 + 144) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    long long v6 = *(void **)(a2 + 48);
    operator delete(v6);
  }
}

uint64_t sub_19074DAC0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19074DB38((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19074DB38(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_19074DBCC((uint64_t)v12);
  return v10;
}

uint64_t sub_19074DBCC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074DC04(a1);
  }
  return a1;
}

void sub_19074DC04(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1906BFE48(v3);
    }
    v1 += 16;
  }
}

void **sub_19074DC48(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_19074DC7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_1906BFE48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *sub_19074DCD0(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *long long v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_19074DDE8((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_19074DD34(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_19074DB38((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_19074DE4C(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_19074DDE8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        sub_1906BFE48(v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

_OWORD *sub_19074DE4C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  void v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_19074C17C((uint64_t)v6);
  return v4;
}

void sub_19074DEC0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1906C6BF0(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19074DF34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19074DF54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19074DFA8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1906BFE48(v1);
  }
}

uint64_t sub_19074DFBC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19074E034((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19074E034(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_19074E0C8((uint64_t)v12);
  return v10;
}

uint64_t sub_19074E0C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074DC04(a1);
  }
  return a1;
}

void *sub_19074E100(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_190718124();
  }
  return operator new(4 * a2);
}

void sub_19074E138(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_19074C29C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_19074C070((void *)a1, v12);
    char v13 = sub_19074C0EC(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    sub_19074E28C((uint64_t)&v20, a2, v15, v9);
    char v13 = sub_19074C0EC(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_19074E28C((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      long long v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_1906BFE48(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_19074E27C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19074E284(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_19074E28C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      sub_1906BFE48(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_19074E308(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_19074E308(a1, *a2);
    sub_19074E308(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_19074E35C(uint64_t *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v7 = (uint64_t **)(result + 1);
  uint64_t v6 = (uint64_t *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v6;
        unint64_t v9 = v6[4];
        uint64_t v10 = v8[5];
        BOOL v11 = (unint64_t)v10 > a3;
        if (v9 != a2) {
          BOOL v11 = v9 > a2;
        }
        if (!v11) {
          break;
        }
        uint64_t v6 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_13;
        }
      }
      BOOL v12 = (unint64_t)v10 < a3;
      BOOL v13 = v9 == a2;
      BOOL v14 = v9 < a2;
      if (v13) {
        BOOL v14 = v12;
      }
      if (!v14) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(result + 1);
LABEL_13:
    long long v15 = operator new(0x40uLL);
    long long v16 = *(_OWORD *)(a4 + 16);
    void v15[2] = *(_OWORD *)a4;
    v15[3] = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)long long v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v8;
    *uint64_t v7 = (uint64_t *)v15;
    uint64_t v17 = *(void *)*v5;
    if (v17)
    {
      uint64_t *v5 = v17;
      uint64_t v18 = *v7;
    }
    else
    {
      uint64_t v18 = (uint64_t *)v15;
    }
    uint64_t result = sub_19074BCA4((uint64_t *)v5[1], v18);
    ++v5[2];
  }
  return result;
}

uint64_t **sub_19074E44C(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v6;
        unint64_t v9 = v6[4];
        uint64_t v10 = v8[5];
        BOOL v11 = (unint64_t)v10 > a3;
        if (v9 != a2) {
          BOOL v11 = v9 > a2;
        }
        if (!v11) {
          break;
        }
        uint64_t v6 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_13;
        }
      }
      BOOL v12 = (unint64_t)v10 < a3;
      BOOL v13 = v9 == a2;
      BOOL v14 = v9 < a2;
      if (v13) {
        BOOL v14 = v12;
      }
      if (!v14) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_13:
    long long v15 = (uint64_t *)v8;
    uint64_t v8 = (uint64_t **)operator new(0x60uLL);
    *((_OWORD *)v8 + 2) = *a4;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *uint64_t v8 = 0;
    v8[1] = 0;
    _DWORD v8[2] = v15;
    *uint64_t v7 = (uint64_t *)v8;
    long long v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v8;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v7;
    }
    sub_19074BCA4(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void *sub_19074E550(uint64_t *a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_190718FD4();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v7 = 0x555555555555555;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v18 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_19074D278(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (void *)(v7 + 48 * v2);
  unint64_t v10 = v7 + 48 * v8;
  sub_19074D22C(v9, a2);
  uint64_t v11 = sub_19074D2C0(a1[1], a1[1], *a1, *a1, (uint64_t)v9, (uint64_t)v9);
  long long v12 = *(_OWORD *)a1;
  *a1 = v11;
  a1[1] = (uint64_t)(v9 + 6);
  long long v16 = v12;
  uint64_t v13 = a1[2];
  a1[2] = v10;
  uint64_t v17 = v13;
  uint64_t v15 = v12;
  sub_19074D360((uint64_t)&v15);
  return v9 + 6;
}

void sub_19074E654(void *a1)
{
  if (a1)
  {
    sub_19074E654(*a1);
    sub_19074E654(a1[1]);
    unint64_t v2 = (std::__shared_weak_count *)a1[11];
    if (v2) {
      sub_1906BFE48(v2);
    }
    unint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (v3) {
      sub_1906BFE48(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[7];
    if (v4) {
      sub_1906BFE48(v4);
    }
    operator delete(a1);
  }
}

void sub_19074E6C4(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_19074D304(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_19074E748(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_19074BBCC((uint64_t)a1, &v10, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    void v7[2] = **a4;
    *((unsigned char *)v7 + 48) = 0;
    sub_19074BC4C(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_19074E7D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    sub_1906C6BF0(&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19074E834(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      sub_1906BFE48(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19074E894(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_190718FD4();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_19074EAE8((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  long long v12 = &v8[64 * v3];
  BOOL v14 = &v8[64 * v7];
  sub_19074E984((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 64;
  sub_19074EA70(a1, &v11);
  uint64_t v9 = a1[1];
  sub_19074EC6C((uint64_t)&v11);
  return v9;
}

void sub_19074E970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074EC6C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19074E984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  sub_19074E9EC((char *)(a2 + 8), *(void **)(a3 + 8), *(void **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  double result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

char *sub_19074E9EC(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_19074C070(result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *unint64_t v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19074EA54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19074EA70(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19074EB20((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19074EAE8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_190718124();
  }
  return operator new(a2 << 6);
}

uint64_t sub_19074EB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 64;
      sub_19074E984(a1, v7 - 64, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_19074EBEC((uint64_t)v13);
  return v11;
}

void sub_19074EBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19074EBEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074EC24(a1);
  }
  return a1;
}

void sub_19074EC24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t sub_19074EC6C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19074ECA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v5 = *(void **)(v2 - 56);
    if (v5)
    {
      *(void *)(v2 - 48) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void sub_19074ED00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19074ED20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0031B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19074ED74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v1);
      unint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void sub_19074EDFC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = (void *)*a1;
  if (a4 <= (v8 - *a1) >> 4)
  {
    unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
    if (v16 >= a4)
    {
      char v20 = sub_19074EF7C(a2, a3, v9);
      for (uint64_t i = (void *)a1[1]; i != v20; i -= 2)
      {
        unint64_t v22 = (std::__shared_weak_count *)*(i - 1);
        if (v22) {
          sub_1906BFE48(v22);
        }
      }
      a1[1] = (uint64_t)v20;
    }
    else
    {
      uint64_t v17 = &a2[2 * v16];
      sub_19074EF7C(a2, v17, v9);
      for (unint64_t j = (uint64_t *)a1[1]; v17 != a3; v17 += 2)
      {
        uint64_t v19 = v17[1];
        *unint64_t j = *v17;
        j[1] = v19;
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        j += 2;
      }
      a1[1] = (uint64_t)j;
    }
  }
  else
  {
    if (v9)
    {
      sub_19074C1F8(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_28;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_28:
    }
      sub_190718FD4();
    long long v12 = (uint64_t *)sub_19074D830(v11);
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)&v12[2 * v13];
    if (v6 != a3)
    {
      char v14 = v12;
      do
      {
        uint64_t v15 = v6[1];
        *char v14 = *v6;
        v14[1] = v15;
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        v12 += 2;
        v6 += 2;
        v14 += 2;
      }
      while (v6 != a3);
    }
    a1[1] = (uint64_t)v12;
  }
}

void *sub_19074EF7C(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        sub_1906BFE48(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_19074EFEC(uint64_t a1, _DWORD *a2, double *a3)
{
  if (*a2 == 4)
  {
    ++*(_DWORD *)(a1 + 44);
  }
  else if (*a2 == 1)
  {
    ++*(_DWORD *)(a1 + 40);
    sub_19074F024(a1, a3);
  }
}

double sub_19074F024(uint64_t a1, double *a2)
{
  double v4 = *(double *)(a1 + 32);
  if (v4 > 0.0)
  {
    double v5 = *a2 - v4;
    unint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(double **)(a1 + 8);
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = *(double **)a1;
      uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_190718FD4();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        char v14 = (char *)sub_190732A30(a1 + 16, v13);
        uint64_t v9 = *(double **)a1;
        uint64_t v7 = *(double **)(a1 + 8);
      }
      else
      {
        char v14 = 0;
      }
      uint64_t v15 = (double *)&v14[8 * v10];
      unint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = v5;
      uint64_t v8 = v15 + 1;
      while (v7 != v9)
      {
        uint64_t v17 = *((void *)v7-- - 1);
        *((void *)v15-- - 1) = v17;
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *uint64_t v7 = v5;
      uint64_t v8 = v7 + 1;
    }
    *(void *)(a1 + 8) = v8;
  }
  double result = *a2;
  *(double *)(a1 + 32) = *a2;
  return result;
}

uint64_t sub_19074F128(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if ((int)((unint64_t)((char *)v1 - (char *)*a1) >> 3) >= 1)
  {
    double v3 = *v2;
    if (v2 != v1 && v2 + 1 != v1)
    {
      double v5 = *v2;
      unint64_t v6 = v2 + 1;
      do
      {
        double v7 = *v6++;
        double v8 = v7;
        if (v7 < v5) {
          double v5 = v8;
        }
      }
      while (v6 != v1);
      uint64_t v9 = v2 + 1;
      do
      {
        double v10 = *v9++;
        double v11 = v10;
        if (v3 < v10) {
          double v3 = v11;
        }
      }
      while (v9 != v1);
    }
    double v12 = 0.0;
    while (v2 != v1)
    {
      double v13 = *v2++;
      double v12 = v12 + v13;
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_19074F344(uint64_t a1)
{
  v10[11] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  v9[0] = @"tspiiPercentageOfValidInputData";
  v10[0] = [NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v9[1] = @"tspiiPercentageOfInputGpsData";
  v10[1] = [NSNumber numberWithDouble:*(double *)(a1 + 48)];
  _DWORD v9[2] = @"tspiiPercentageOfInputWifiData";
  _DWORD v10[2] = [NSNumber numberWithDouble:*(double *)(a1 + 56)];
  void v9[3] = @"tspiiPercentageOfValidInertialData";
  void v10[3] = [NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v9[4] = @"tspiiMeanDurationOfGapsInInertialData";
  v10[4] = [NSNumber numberWithDouble:*(double *)(a1 + 72)];
  v9[5] = @"tspiiNumberOfGapsInInertialData";
  v10[5] = [NSNumber numberWithInt:*(unsigned int *)(v2 + 56)];
  void v9[6] = @"tspiiNumberOfVdrAttempts";
  void v10[6] = [NSNumber numberWithInt:*(unsigned int *)(v2 + 60)];
  v9[7] = @"tspiiPercentageOfFailedVdrAttempts";
  v10[7] = [NSNumber numberWithDouble:*(double *)(a1 + 80)];
  v9[8] = @"tspiiMinPeriodBetweenGpsFixes";
  v10[8] = [NSNumber numberWithDouble:*(double *)(a1 + 88)];
  v9[9] = @"tspiiMaxPeriodBetweenGpsFixes";
  v10[9] = [NSNumber numberWithDouble:*(double *)(a1 + 96)];
  v9[10] = @"tspiiMeanPeriodBetweenGpsFixes";
  unsigned char v10[10] = [NSNumber numberWithDouble:*(double *)(a1 + 104)];
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:11];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE0057E0);
  }
  double v4 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    uint64_t v8 = v3;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "CLTSP,II,sendTripSegmentInertialIntegratorAnalytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE0057E0);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentInertialIntegratorCAStats::sendTripSegmentInertialIntegratorAnalytics(const int &, const int &)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

os_log_t sub_19074F64C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

void sub_19074F67C(id *a1, id *a2, void **a3)
{
  if (a1 != a2)
  {
    double v5 = a1;
    int v6 = 0;
    uint64_t v7 = (uint64_t)(a3 + 2);
    double v52 = 0.0;
    uint64_t v48 = 0x3F91DF46A2529D39;
    double v8 = 0.0;
    double v51 = 0.0;
    do
    {
      objc_msgSend(*v5, "latitude", v48);
      double v10 = v9;
      [*v5 longitude];
      double v12 = v11;
      [*v5 altitude];
      double v14 = v13;
      __double2 v15 = __sincos_stret(v10 * 0.0174532925);
      __double2 v16 = __sincos_stret(v12 * 0.0174532925);
      double v17 = 6378137.0 / sqrt(v15.__sinval * -0.00669437999 * v15.__sinval + 1.0);
      double v18 = v15.__cosval * (v14 + v17);
      double v19 = v16.__sinval * v18;
      double v20 = v14 + v17 * 0.99330562;
      double v21 = v15.__sinval * v20;
      double v22 = v51;
      if (!v6)
      {
        double v22 = v15.__sinval * v20;
        double v8 = v16.__sinval * v18;
      }
      double v49 = v16.__cosval * v18;
      double v50 = v8;
      double v23 = v52;
      if (!v6) {
        double v23 = v16.__cosval * v18;
      }
      [*v5 latitude];
      double v25 = v24;
      [*v5 longitude];
      double v27 = v26;
      __double2 v28 = __sincos_stret(v25 * 0.0174532925);
      __double2 v29 = __sincos_stret(v27 * 0.0174532925);
      double v51 = v22;
      double v52 = v23;
      double v30 = v49 - v23;
      double v8 = v50;
      double v31 = v21 - v22;
      double v32 = v29.__cosval * (v19 - v50) - v29.__sinval * v30;
      double v33 = -(v28.__sinval * v29.__sinval) * (v19 - v50)
          + -(v28.__sinval * v29.__cosval) * v30
          + v28.__cosval * (v21 - v22);
      double v34 = v28.__cosval * v29.__sinval * (v19 - v50) + v28.__cosval * v29.__cosval * v30 + v28.__sinval * v31;
      __int16 v36 = (double *)a3[1];
      unint64_t v35 = (unint64_t)a3[2];
      if ((unint64_t)v36 >= v35)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (unsigned char *)*a3) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_190718FD4();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)*a3) >> 3);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x555555555555555) {
          unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41) {
          uint64_t v42 = (char *)sub_1907180DC(v7, v41);
        }
        else {
          uint64_t v42 = 0;
        }
        unint64_t v43 = (double *)&v42[24 * v38];
        *unint64_t v43 = v32;
        v43[1] = v33;
        v43[2] = v34;
        unint64_t v45 = (double *)*a3;
        uint64_t v44 = (double *)a3[1];
        long long v46 = v43;
        if (v44 != *a3)
        {
          do
          {
            long long v47 = *(_OWORD *)(v44 - 3);
            *(v46 - 1) = *(v44 - 1);
            *(_OWORD *)(v46 - 3) = v47;
            v46 -= 3;
            v44 -= 3;
          }
          while (v44 != v45);
          uint64_t v44 = (double *)*a3;
        }
        int v37 = v43 + 3;
        *a3 = v46;
        a3[1] = v43 + 3;
        a3[2] = &v42[24 * v41];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *__int16 v36 = v32;
        v36[1] = v33;
        int v37 = v36 + 3;
        v36[2] = v34;
      }
      ++v6;
      a3[1] = v37;
      ++v5;
    }
    while (v5 != a2);
  }
}

void sub_19074F950(uint64_t *a1, void *a2, void **a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)uint64_t buf = 0;
    uint64_t v57 = 0;
    v58[0] = 0.0;
    [a2 latitude];
    double v7 = v6;
    [a2 longitude];
    double v9 = v8;
    [a2 altitude];
    uint64_t v11 = *a1;
    if (a1[1] != *a1)
    {
      double v12 = v10;
      __double2 v13 = __sincos_stret(v7 * 0.0174532925);
      double v14 = 6378137.0 / sqrt(v13.__sinval * -0.00669437999 * v13.__sinval + 1.0);
      double v15 = v13.__sinval * (v12 + v14 * 0.99330562);
      __double2 v16 = __sincos_stret(v9 * 0.0174532925);
      unint64_t v17 = 0;
      double v18 = v13.__cosval * (v12 + v14);
      double v19 = v16.__sinval * v18;
      double v20 = v16.__cosval * v18;
      double v21 = 0.0;
      double v22 = 0.0;
      double v56 = 0.0;
      do
      {
        double v23 = v56;
        if (v17)
        {
          double v24 = v22;
        }
        else
        {
          double v23 = v20;
          double v24 = v19;
        }
        if (v17) {
          double v25 = v21;
        }
        else {
          double v25 = v15;
        }
        double v26 = (double *)(v11 + 24 * v17);
        double v27 = v26[1];
        double v54 = *v26;
        double v55 = v24;
        double v28 = v26[2];
        [a2 latitude];
        double v30 = v29;
        [a2 longitude];
        double v32 = v31;
        __double2 v33 = __sincos_stret(v30 * 0.0174532925);
        double v21 = v25;
        double v22 = v55;
        __double2 v34 = __sincos_stret(v32 * 0.0174532925);
        double v56 = v23;
        double v19 = v55 + v27 * -(v33.__sinval * v34.__sinval) + v34.__cosval * v54 + v33.__cosval * v34.__sinval * v28;
        double v15 = v21 + v28 * v33.__sinval + v33.__cosval * v27;
        double v35 = v23 + v27 * -(v33.__sinval * v34.__cosval) - v34.__sinval * v54 + v33.__cosval * v34.__cosval * v28;
        sub_190804D0C((double *)buf, v58, (double *)&v57, v35, v19, v15);
        uint64_t v36 = *(void *)buf;
        uint64_t v37 = v57;
        long double v38 = v58[0];
        unint64_t v40 = a3[1];
        unint64_t v39 = (unint64_t)a3[2];
        if ((unint64_t)v40 >= v39)
        {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (unsigned char *)*a3) >> 3);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_190718FD4();
          }
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)*a3) >> 3);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x555555555555555) {
            unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45) {
            long long v46 = (char *)sub_1907180DC((uint64_t)(a3 + 2), v45);
          }
          else {
            long long v46 = 0;
          }
          long long v47 = &v46[24 * v42];
          *(void *)long long v47 = v36;
          *((long double *)v47 + 1) = v38;
          *((void *)v47 + 2) = v37;
          double v49 = (char *)*a3;
          uint64_t v48 = (char *)a3[1];
          double v50 = v47;
          if (v48 != *a3)
          {
            do
            {
              long long v51 = *(_OWORD *)(v48 - 24);
              *((void *)v50 - 1) = *((void *)v48 - 1);
              *(_OWORD *)(v50 - 24) = v51;
              v50 -= 24;
              v48 -= 24;
            }
            while (v48 != v49);
            uint64_t v48 = (char *)*a3;
          }
          unint64_t v41 = v47 + 24;
          *a3 = v50;
          a3[1] = v47 + 24;
          a3[2] = &v46[24 * v45];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *unint64_t v40 = *(void *)buf;
          *((long double *)v40 + 1) = v38;
          unint64_t v41 = v40 + 3;
          v40[2] = v37;
        }
        double v20 = v35;
        a3[1] = v41;
        ++v17;
        uint64_t v11 = *a1;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v17);
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    double v52 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_ERROR, "CLTSP,II,convertENUtoLLA,detected null input", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      LOWORD(v58[0]) = 0;
      int64x2_t v53 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void convertENUtoLLA(const std::vector<std::array<double, 3>> &, const CLTripSegmentLocation *, std::vector<std::array<double, 3>> &)", "CoreLocation: %s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
  }
}

void sub_19074FDBC(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v2 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend((id)objc_msgSend(a1, "timestamp"), "timeIntervalSinceReferenceDate");
      uint64_t v4 = v3;
      objc_msgSend(a1, "dataPeriod_s");
      uint64_t v6 = v5;
      objc_msgSend(a1, "deltaCourse_rad");
      uint64_t v8 = v7;
      objc_msgSend(a1, "deltaSpeed_mps");
      uint64_t v10 = v9;
      objc_msgSend(a1, "deltaCourseVar_rad2");
      uint64_t v12 = v11;
      objc_msgSend(a1, "deltaSpeedVar_mps2");
      uint64_t v14 = v13;
      objc_msgSend(a1, "deltaCourseSpeedCovar_radmps");
      *(_DWORD *)uint64_t buf = 134350593;
      uint64_t v19 = v4;
      __int16 v20 = 2050;
      uint64_t v21 = v6;
      __int16 v22 = 2049;
      uint64_t v23 = v8;
      __int16 v24 = 2049;
      uint64_t v25 = v10;
      __int16 v26 = 2050;
      uint64_t v27 = v12;
      __int16 v28 = 2050;
      uint64_t v29 = v14;
      __int16 v30 = 2050;
      uint64_t v31 = v15;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertialData,time,%{public}.3lf,dataPeriod,%{public}.7lf,deltaCourse,%{private}.6lf,deltaSpeed,%{private}.6lf,deltaCourseVar,%{public}.8lf,deltaSpeedVar,%{public}.8lf,deltaCourseSpeedCovar,%{public}.8lf", buf, 0x48u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    objc_msgSend((id)objc_msgSend(a1, "timestamp"), "timeIntervalSinceReferenceDate");
    objc_msgSend(a1, "dataPeriod_s");
    objc_msgSend(a1, "deltaCourse_rad");
    objc_msgSend(a1, "deltaSpeed_mps");
    objc_msgSend(a1, "deltaCourseVar_rad2");
    objc_msgSend(a1, "deltaSpeedVar_mps2");
    objc_msgSend(a1, "deltaCourseSpeedCovar_radmps");
    __double2 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void printInertialDataDebugLog(CLTripSegmentInertialData *)", "CoreLocation: %s\n", v16);
    if (v16 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v16);
    return;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
  }
  unint64_t v17 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "CLTSP,II,printInertialDataDebugLog,detected null inertialData", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    __double2 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void printInertialDataDebugLog(CLTripSegmentInertialData *)", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_1907501C0(void *a1, int a2, void *a3, uint64_t *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    [a3 speedAccuracy];
    double v9 = v8;
    if ([a3 isLoiLocationType])
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      uint64_t v10 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        [a3 speedAccuracy];
        *(_DWORD *)uint64_t buf = 134349312;
        unint64_t v39 = v11;
        __int16 v40 = 2050;
        *(void *)unint64_t v41 = 0xBFF0000000000000;
        _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLTSP,II,printLocationDebugLog,location is LOI or reconstructed from LOI,sunc,%{public}.7lf,invalidated to,%{public}.1lf", buf, 0x16u);
      }
      double v9 = -1.0;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        [a3 speedAccuracy];
        double v35 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v12 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      double v37 = v9;
      uint64_t v13 = a4;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v13 = (uint64_t *)*a4;
      }
      objc_msgSend((id)objc_msgSend(a3, "timestamp"), "timeIntervalSinceReferenceDate");
      uint64_t v36 = v14;
      [a3 latitude];
      uint64_t v16 = v15;
      [a3 longitude];
      uint64_t v18 = v17;
      [a3 altitude];
      uint64_t v20 = v19;
      [a3 speed];
      uint64_t v22 = v21;
      [a3 course];
      uint64_t v24 = v23;
      [a3 horizontalAccuracy];
      uint64_t v26 = v25;
      [a3 altitudeAccuracy];
      uint64_t v28 = v27;
      [a3 courseAccuracy];
      uint64_t v30 = v29;
      int v31 = [a3 locType];
      uint64_t v32 = objc_msgSend((id)objc_msgSend(a1, "UUIDString"), "UTF8String");
      *(_DWORD *)uint64_t buf = 136449795;
      unint64_t v39 = v13;
      __int16 v40 = 1026;
      *(_DWORD *)unint64_t v41 = 1;
      *(_WORD *)&v41[4] = 1026;
      *(_DWORD *)&v41[6] = a2;
      __int16 v42 = 2050;
      uint64_t v43 = v36;
      __int16 v44 = 2049;
      uint64_t v45 = v16;
      __int16 v46 = 2049;
      uint64_t v47 = v18;
      __int16 v48 = 2050;
      uint64_t v49 = v20;
      __int16 v50 = 2050;
      uint64_t v51 = v22;
      __int16 v52 = 2050;
      uint64_t v53 = v24;
      __int16 v54 = 2050;
      uint64_t v55 = v26;
      __int16 v56 = 2050;
      uint64_t v57 = v28;
      __int16 v58 = 2050;
      double v59 = v37;
      __int16 v60 = 2050;
      uint64_t v61 = v30;
      __int16 v62 = 1026;
      int v63 = v31;
      __int16 v64 = 2082;
      uint64_t v65 = v32;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLTSP,II,locType,%{public}s,mode,%{public}d,final,%{public}d,time,%{public}.3lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,sunc,%{public}.7lf,cunc,%{public}.7lf,type,%{public}d,id,%{public}s", buf, 0x8Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      objc_msgSend((id)objc_msgSend(a3, "timestamp"), "timeIntervalSinceReferenceDate");
      [a3 latitude];
      [a3 longitude];
      [a3 altitude];
      [a3 speed];
      [a3 course];
      [a3 horizontalAccuracy];
      [a3 altitudeAccuracy];
      [a3 courseAccuracy];
      [a3 locType];
      objc_msgSend((id)objc_msgSend(a1, "UUIDString"), "UTF8String");
      __double2 v33 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n");
LABEL_27:
      if (v33 != buf) {
        free(v33);
      }
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    __double2 v34 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_ERROR, "CLTSP,II,printLocationDebugLog,detected null locationData", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      __double2 v33 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n");
      goto LABEL_27;
    }
  }
}

void sub_1907508B4(double a1, double a2)
{
  if (a2 == 0.0)
  {
    exp(a1);
    return;
  }
  if (fabs(a1) == INFINITY)
  {
    if (a1 >= 0.0)
    {
      if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        return;
      }
    }
    else if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      a2 = 1.0;
    }
  }
  double v2 = a2;
  exp(a1);
  __sincos_stret(v2);
}

BOOL sub_190750980(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [a1 speed];
    BOOL result = 0;
    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v2 >= 0.0)
    {
      [a1 course];
      BOOL result = 0;
      if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v4 >= 0.0)
      {
        [a1 speedAccuracy];
        BOOL result = 0;
        if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v5 > 0.0 && v5 < 20.0)
        {
          [a1 courseAccuracy];
          BOOL v8 = v6 > 0.0 && (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          return v6 < 180.0 && v8;
        }
      }
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    double v9 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLTSP,II,isLocationSpeedAndCourseValid,detected null location", buf, 2u);
    }
    int v10 = sub_1906CB57C(115, 0);
    BOOL result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL isLocationSpeedAndCourseValid(CLTripSegmentLocation *)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0;
    }
  }
  return result;
}

void sub_190750BD0(void *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [a1 setLocationReconstructionType:a4];
    [a1 setStartLocationType:*a2];
    uint64_t v7 = *a3;
    [a1 setStopLocationType:v7];
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    BOOL v8 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "CLTSP,II,handleLocationType,detected null location", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void handleLocationType(CLTripSegmentLocation *, const CLLocationType &, const CLLocationType &, const ReconstructedLocationType &)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_190750DC0(void *a1, double *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [a1 speed];
    if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v4 < 0.0)
    {
      double v6 = *a2;
    }
    else
    {
      [a1 speed];
      double v6 = v5;
    }
    [a1 course];
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 < 0.0)
    {
      double v10 = a2[2];
    }
    else
    {
      [a1 course];
      double v10 = v9;
    }
    [a1 speedAccuracy];
    if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 <= 0.0 || v11 >= 20.0)
    {
      double v13 = a2[1];
    }
    else
    {
      [a1 speedAccuracy];
      double v13 = v12;
    }
    [a1 courseAccuracy];
    if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 <= 0.0 || v14 >= 180.0)
    {
      double v16 = a2[3];
    }
    else
    {
      [a1 courseAccuracy];
      double v16 = v15;
    }
    [a1 updateCourse:v10 andCourseAccuracy:v16];
    [a1 updateSpeed:v6 andSpeedAccuracy:v13];
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v7 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "CLTSP,II,updateSpeedAndCourse,detected null location", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void updateSpeedAndCourse(CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_1907510B8(void *a1, int a2, void *a3, void *a4, double *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (sub_190750980(a4))
    {
      uint64_t v10 = 1;
    }
    else
    {
      sub_190750DC0(a4, a5);
      uint64_t v10 = 2;
    }
    [a4 setLocationReconstructionType:v10];
    [a4 setStartLocationType:0];
    [a4 setStopLocationType:0];
    [a3 addObject:a4];
    sub_1906D5C70(__p, "reconstructed");
    sub_1907501C0(a1, a2, a4, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    double v11 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLTSP,II,addLocation,detected null reconstructedLocations", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      __int16 v15 = 0;
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void addLocation(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_1907512E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_190751308(unsigned char *a1, void *a2, int a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v704 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    unint64_t v41 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null tripSegmentID", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_67;
    }
    goto LABEL_983;
  }
  if (!a5)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    __int16 v42 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null tripSegmentLocations", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_67;
    }
    goto LABEL_983;
  }
  if (!a6)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v43 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null inertialData", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_67;
    }
LABEL_983:
    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
LABEL_67:
    *(_WORD *)v694 = 0;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v44);
    goto LABEL_950;
  }
  int v7 = a4;
  if (a4 != 1)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v45 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,unsupported mode of transportation,%{public}d", buf, 8u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    *(_DWORD *)v694 = 67240192;
    *(_DWORD *)&v694[4] = v7;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v44);
LABEL_950:
    if (v44 != buf) {
      free(v44);
    }
    return 0;
  }
  int v685 = 0;
  long long v680 = 0u;
  long long v681 = 0u;
  double v682 = 0.0;
  *(double *)&uint64_t v683 = 200.0;
  char v684 = 0;
  long long v673 = 0u;
  long long v674 = 0u;
  unint64_t v675 = 0xBFF0000000000000;
  uint64_t v676 = 0;
  uint64_t v678 = 0;
  uint64_t v677 = 0;
  int v679 = 0;
  obunint64_t j = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (obj)
  {
    if ([a5 count])
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      double v8 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceReferenceDate");
        uint64_t v10 = v9;
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", objc_msgSend(a5, "count") - 1), "timestamp"), "timeIntervalSinceReferenceDate");
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v11;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForSpeedIntegrity,first location timestamp,%{public}.3lf,last location timestamp,%{public}.3lf", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceReferenceDate");
        uint64_t v593 = v592;
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", objc_msgSend(a5, "count") - 1), "timestamp"), "timeIntervalSinceReferenceDate");
        *(_DWORD *)v694 = 134349312;
        *(void *)&v694[4] = v593;
        *(_WORD *)&v694[12] = 2050;
        *(void *)&v694[14] = v594;
        v595 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v595);
        if (v595 != buf) {
          free(v595);
        }
      }
      id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      if ([a5 count] != 1)
      {
        uint64_t v14 = 0;
        do
        {
          unint64_t v15 = v14 + 1;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", v14 + 1), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", v14), "timestamp"));
          if (fabs(v16) > 0.001) {
            objc_msgSend(v12, "addObject:", objc_msgSend(a5, "objectAtIndexedSubscript:", v14));
          }
          ++v14;
        }
        while ([a5 count] - 1 > v15);
      }
      objc_msgSend(v12, "addObject:", objc_msgSend(a5, "objectAtIndexedSubscript:", objc_msgSend(a5, "count") - 1));
      objc_msgSend(v13, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", 0));
      if ((unint64_t)([v12 count] - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v17 = 1;
        do
        {
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17 - 1), "timestamp"));
          double v19 = v18;
          unint64_t v20 = v17 + 1;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", (v17 + 1)), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "timestamp"));
          double v22 = v21;
          if (!objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17 - 1), "isGPSLocationType")|| !objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "isGPSLocationType"))
          {
            goto LABEL_44;
          }
          int v23 = objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", (v17 + 1)), "isGPSLocationType");
          int v24 = v19 <= 2.0 ? v23 : 0;
          if (v24 != 1) {
            goto LABEL_44;
          }
          if (v22 > 2.0) {
            goto LABEL_44;
          }
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17 - 1), "speedAccuracy");
          if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_44;
          }
          if (v25 < 0.0) {
            goto LABEL_44;
          }
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "speedAccuracy");
          if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_44;
          }
          if (v26 < 0.0) {
            goto LABEL_44;
          }
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", (v17 + 1)), "speedAccuracy");
          if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_44;
          }
          if (v27 < 0.0) {
            goto LABEL_44;
          }
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "speed");
          double v29 = v28;
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17 - 1), "speed");
          if (vabdd_f64(v29, v30) < 6.0) {
            goto LABEL_44;
          }
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", (v17 + 1)), "speed");
          double v32 = v31;
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "speed");
          if (vabdd_f64(v32, v33) >= 6.0
            && (objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", (v17 + 1)), "speed"),
                double v35 = v34,
                objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17 - 1), "speed"),
                vabdd_f64(v35, v36) * 0.5 < 6.0))
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
            }
            double v37 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "timestamp"), "timeIntervalSinceReferenceDate");
              *(_DWORD *)uint64_t buf = 134349056;
              *(void *)&uint8_t buf[4] = v38;
              _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,skipped GPS location point at timestamp,%{public}.3lf", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
              }
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v17), "timestamp"), "timeIntervalSinceReferenceDate");
              *(_DWORD *)v694 = 134349056;
              *(void *)&v694[4] = v39;
              __int16 v40 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v40);
              if (v40 != buf) {
                free(v40);
              }
            }
          }
          else
          {
LABEL_44:
            objc_msgSend(v13, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", v17));
          }
          ++v17;
        }
        while ([v12 count] - 1 > v20);
      }
      objc_msgSend(v13, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", objc_msgSend(v12, "count") - 1));
      if ([v13 count])
      {
        if (v12 && v13)
        {
          [v12 removeAllObjects];
          [v12 addObjectsFromArray:v13];
        }
        [v13 removeAllObjects];
      }
      unint64_t v48 = 0;
      memset(v694, 0, 24);
      if (v12) {
        BOOL v49 = v13 == 0;
      }
      else {
        BOOL v49 = 1;
      }
      int v50 = !v49;
      int v628 = v50;
      long long __p = 0uLL;
      v687[0] = 0;
      do
      {
        while (1)
        {
          unint64_t v51 = v48;
          if ([v12 count] - 1 <= v48) {
            break;
          }
          ++v48;
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51 + 1), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51), "timestamp"));
          double v53 = v52;
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51 + 1), "distanceFromLocation:", objc_msgSend(v12, "objectAtIndexedSubscript:", v51));
          __int16 v54 = *(char **)&v694[8];
          double v56 = v55 / v53;
          if (*(void *)&v694[8] >= *(void *)&v694[16])
          {
            double v80 = *(char **)v694;
            uint64_t v81 = (uint64_t)(*(void *)&v694[8] - *(void *)v694) >> 3;
            unint64_t v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 61) {
              sub_190718FD4();
            }
            uint64_t v83 = *(void *)&v694[16] - *(void *)v694;
            if ((uint64_t)(*(void *)&v694[16] - *(void *)v694) >> 2 > v82) {
              unint64_t v82 = v83 >> 2;
            }
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v84 = v82;
            }
            if (v84)
            {
              uint64_t v85 = (char *)sub_190732A30((uint64_t)&v694[16], v84);
              __int16 v54 = *(char **)&v694[8];
              double v80 = *(char **)v694;
            }
            else
            {
              uint64_t v85 = 0;
            }
            int v86 = (double *)&v85[8 * v81];
            *int v86 = v56;
            uint64_t v57 = v86 + 1;
            while (v54 != v80)
            {
              uint64_t v87 = *((void *)v54 - 1);
              v54 -= 8;
              *((void *)v86-- - 1) = v87;
            }
            *(void *)v694 = v86;
            *(void *)&v694[8] = v57;
            *(void *)&v694[16] = &v85[8 * v84];
            if (v80) {
              operator delete(v80);
            }
          }
          else
          {
            **(double **)&v694[8] = v56;
            uint64_t v57 = (double *)(v54 + 8);
          }
          *(void *)&v694[8] = v57;
          objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51), "speed");
          if (v88 < 0.0 && v53 <= 2.0)
          {
            if (objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51 + 1), "isGPSLocationType"))
            {
              objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51 + 1), "speed");
              if ((*(void *)&v90 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v90 >= 0.0)
              {
                objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v51 + 1), "speedAccuracy");
                if ((*(void *)&v91 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v91 > 0.0 && v91 < 20.0)
                {
                  uint64_t v92 = (void *)[v12 objectAtIndexedSubscript:v51];
                  objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v48), "speed");
                  double v94 = v93;
                  objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v48), "speedAccuracy");
                  [v92 updateSpeed:v94 andSpeedAccuracy:v95];
                }
              }
            }
          }
        }
        uint64_t v58 = *(void *)v694;
        if (*(void *)&v694[8] - *(void *)v694 >= 9uLL)
        {
          unint64_t v59 = 0;
          do
          {
            double v60 = *(double *)(v58 + 8 * v59++);
            if (vabdd_f64(*(double *)(v58 + 8 * v59), v60) >= 6.0
              && (objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", v59), "isGPSLocationType") & 1) == 0)
            {
              uint64_t v61 = (char *)*((void *)&__p + 1);
              if (*((void *)&__p + 1) >= v687[0])
              {
                int v63 = (char *)__p;
                uint64_t v64 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62) {
                  sub_190718FD4();
                }
                uint64_t v66 = v687[0] - __p;
                if ((uint64_t)(v687[0] - __p) >> 1 > v65) {
                  unint64_t v65 = v66 >> 1;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  uint64_t v68 = (char *)sub_19074E100((uint64_t)v687, v67);
                  uint64_t v61 = (char *)*((void *)&__p + 1);
                  int v63 = (char *)__p;
                }
                else
                {
                  uint64_t v68 = 0;
                }
                int v69 = &v68[4 * v64];
                *(_DWORD *)int v69 = v59;
                __int16 v62 = v69 + 4;
                while (v61 != v63)
                {
                  int v70 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                *(void *)&long long __p = v69;
                *((void *)&__p + 1) = v62;
                v687[0] = &v68[4 * v67];
                if (v63) {
                  operator delete(v63);
                }
              }
              else
              {
                **((_DWORD **)&__p + 1) = v59;
                __int16 v62 = v61 + 4;
              }
              *((void *)&__p + 1) = v62;
            }
            uint64_t v58 = *(void *)v694;
          }
          while (((uint64_t)(*(void *)&v694[8] - *(void *)v694) >> 3) - 1 > v59);
          for (unint64_t i = 0; [v12 count] > i; ++i)
          {
            __int32 v72 = (int *)__p;
            if ((void)__p == *((void *)&__p + 1)) {
              goto LABEL_129;
            }
            uint64_t v73 = 0;
            do
            {
              int v74 = *v72++;
              if (i == v74) {
                ++v73;
              }
            }
            while (v72 != *((int **)&__p + 1));
            if (!v73)
            {
LABEL_129:
              objc_msgSend(v13, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", i));
            }
            else
            {
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "objectAtIndexedSubscript:", i), "timestamp"), "timeIntervalSinceReferenceDate");
              uint64_t v76 = v75;
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
              }
              double v77 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)uint64_t buf = 134349056;
                *(void *)&uint8_t buf[4] = v76;
                _os_log_impl(&dword_1906B8000, v77, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForSpeedIntegrity,skipped location point at timestamp,%{public}.3lf", buf, 0xCu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                }
                *(_DWORD *)v691 = 134349056;
                *(void *)&v691[4] = v76;
                int64x2_t v78 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v78);
                if (v78 != buf) {
                  free(v78);
                }
              }
            }
          }
        }
        uint64_t v79 = *((void *)&__p + 1);
        if ([v13 count])
        {
          if (v628)
          {
            [v12 removeAllObjects];
            [v12 addObjectsFromArray:v13];
          }
          [v13 removeAllObjects];
        }
        unint64_t v48 = 0;
        *(void *)&v694[8] = *(void *)v694;
        *((void *)&__p + 1) = __p;
      }
      while ((void)__p != v79);
      if ([v12 count] && v12)
      {
        [obj removeAllObjects];
        [obj addObjectsFromArray:v12];
      }
      objc_msgSend(obj, "insertObject:atIndex:", objc_msgSend(a5, "objectAtIndexedSubscript:", 0), 0);
      objc_msgSend(obj, "addObject:", objc_msgSend(a5, "objectAtIndexedSubscript:", objc_msgSend(a5, "count") - 1));
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*(void *)v694)
      {
        *(void *)&v694[8] = *(void *)v694;
        operator delete(*(void **)v694);
      }
    }
    else
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      long long v99 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v99, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,empty inputLocations", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        *(_WORD *)v694 = 0;
        v602 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v602);
        if (v602 != buf) {
          free(v602);
        }
      }
    }
    long long __p = 0u;
    memset(v687, 0, sizeof(v687));
    uint64_t v100 = [obj countByEnumeratingWithState:&__p objects:v694 count:16];
    if (v100)
    {
      uint64_t v101 = *(void *)v687[0];
LABEL_189:
      uint64_t v102 = 0;
      while (1)
      {
        if (*(void *)v687[0] != v101) {
          objc_enumerationMutation(obj);
        }
        unint64_t v103 = *(void **)(*((void *)&__p + 1) + 8 * v102);
        [v103 altitudeAccuracy];
        if (v104 > 0.0)
        {
          [v103 altitudeAccuracy];
          if ((v105 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
            break;
          }
        }
        if (v100 == ++v102)
        {
          uint64_t v100 = [obj countByEnumeratingWithState:&__p objects:v694 count:16];
          if (v100) {
            goto LABEL_189;
          }
          goto LABEL_202;
        }
      }
      [v103 altitude];
      double v682 = v106;
      [v103 altitudeAccuracy];
      uint64_t v683 = v107;
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      __int16 v108 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        [v103 altitude];
        uint64_t v110 = v109;
        [v103 altitudeAccuracy];
        uint64_t v112 = v111;
        objc_msgSend((id)objc_msgSend(v103, "timestamp"), "timeIntervalSinceReferenceDate");
        *(_DWORD *)uint64_t buf = 134349568;
        *(void *)&uint8_t buf[4] = v110;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v112;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&unsigned char buf[24] = v113;
        _os_log_impl(&dword_1906B8000, v108, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForAltitudeIntegrity,quick search,first valid altitude,%{public}.2lf,and altitude accuracy,%{public}.2lf,at time,%{public}.3lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        [v103 altitude];
        uint64_t v598 = v597;
        [v103 altitudeAccuracy];
        uint64_t v600 = v599;
        objc_msgSend((id)objc_msgSend(v103, "timestamp"), "timeIntervalSinceReferenceDate");
        *(_DWORD *)v691 = 134349568;
        *(void *)&v691[4] = v598;
        *(_WORD *)&v691[12] = 2050;
        *(void *)&v691[14] = v600;
        __int16 v692 = 2050;
        uint64_t v693 = v601;
        long long v98 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void lookForValidAltitude(NSArray<CLTripSegmentLocation *> * _Nonnull, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v98);
        goto LABEL_967;
      }
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    uint64_t v96 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v96, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,null outputLocations", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      *(_WORD *)v694 = 0;
      v596 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v596);
      if (v596 != buf) {
        free(v596);
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    int v97 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v97, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForAltitudeIntegrity,null tripLocations", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
      }
      *(_WORD *)v691 = 0;
      long long v98 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void lookForValidAltitude(NSArray<CLTripSegmentLocation *> * _Nonnull, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v98);
LABEL_967:
      if (v98 != buf) {
        free(v98);
      }
    }
  }
LABEL_202:
  long long v669 = 0u;
  long long v670 = 0u;
  long long v671 = 0u;
  long long v672 = 0u;
  uint64_t v114 = [obj countByEnumeratingWithState:&v669 objects:v690 count:16];
  if (!v114) {
    goto LABEL_912;
  }
  BOOL v115 = 0;
  int v629 = 0;
  __int16 v116 = 0;
  uint64_t v631 = *(void *)v670;
  int v608 = -1;
  unint64_t v117 = 0x1E4F1C000uLL;
  do
  {
    uint64_t v118 = 0;
    uint64_t v614 = v114;
    do
    {
      if (*(void *)v670 != v631) {
        objc_enumerationMutation(obj);
      }
      int v119 = *(CLTripSegmentLocation **)(*((void *)&v669 + 1) + 8 * v118);
      int v120 = v685;
      uint64_t v121 = ++v685;
      if ([obj count] == v121)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        __int16 v122 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v121;
          _os_log_impl(&dword_1906B8000, v122, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,reading the last breadcrumb of the current batch with total count,%{public}d", buf, 8u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
          }
          *(_DWORD *)v694 = 67240192;
          *(_DWORD *)&v694[4] = v121;
          v530 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v530);
          if (v530 != buf) {
            free(v530);
          }
        }
        int v629 = 1;
      }
      if (v119)
      {
        unsigned int v123 = [(CLTripSegmentLocation *)v119 locType];
        if (v123 > 0xD || ((1 << v123) & 0x2E1A) == 0)
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
          }
          long double v195 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
          {
            int v196 = [(CLTripSegmentLocation *)v119 locType];
            *(_DWORD *)uint64_t buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v196;
            _os_log_impl(&dword_1906B8000, v195, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,#warning,unsupported location type skipped,%{public}d", buf, 8u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
            }
            int v197 = [(CLTripSegmentLocation *)v119 locType];
            *(_DWORD *)v694 = 67240192;
            *(_DWORD *)&v694[4] = v197;
            __int32 v131 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
            goto LABEL_319;
          }
        }
        else
        {
          [(CLTripSegmentLocation *)v119 latitude];
          *(void *)uint64_t buf = v125;
          [(CLTripSegmentLocation *)v119 longitude];
          *(void *)v694 = v126;
          if (sub_1907583F8((double *)buf, (double *)v694))
          {
            [(CLTripSegmentLocation *)v119 horizontalAccuracy];
            if (v127 <= 0.0)
            {
              BOOL v129 = v120 == 0;
            }
            else
            {
              [(CLTripSegmentLocation *)v119 horizontalAccuracy];
              BOOL v129 = v128 <= 100.0 || v120 == 0;
            }
            int v139 = v129;
            if (((v139 | v629) & 1) != 0 || [(CLTripSegmentLocation *)v119 isGPSLocationType])
            {
              [(CLTripSegmentLocation *)v119 altitudeAccuracy];
              if (v140 >= 0.0)
              {
                [(CLTripSegmentLocation *)v119 altitude];
                double v682 = v149;
                [(CLTripSegmentLocation *)v119 altitudeAccuracy];
                uint64_t v683 = v150;
              }
              else
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                }
                double v141 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                {
                  [(CLTripSegmentLocation *)v119 altitude];
                  uint64_t v143 = v142;
                  [(CLTripSegmentLocation *)v119 altitudeAccuracy];
                  uint64_t v145 = v144;
                  [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                  *(_DWORD *)uint64_t buf = 134350080;
                  *(void *)&uint8_t buf[4] = v143;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = v145;
                  *(_WORD *)&buf[22] = 2050;
                  *(void *)&unsigned char buf[24] = v146;
                  __int16 v700 = 2050;
                  double v701 = v682;
                  __int16 v702 = 2050;
                  uint64_t v703 = v683;
                  _os_log_impl(&dword_1906B8000, v141, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,detected a location with altitude,%{public}.2lf,and unknown altitude accuracy,%{public}.2lf,time,%{public}.3lf,replaced with lastEstimatedAltitude,%{public}.2lf,and lastEstimatedAltitudeAccuracy,%{public}.2lf", buf, 0x34u);
                }
                if (sub_1906CB57C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                  }
                  [(CLTripSegmentLocation *)v119 altitude];
                  uint64_t v555 = v554;
                  [(CLTripSegmentLocation *)v119 altitudeAccuracy];
                  uint64_t v557 = v556;
                  [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                  double v558 = v682;
                  double v559 = *(double *)&v683;
                  *(_DWORD *)v694 = 134350080;
                  *(void *)&v694[4] = v555;
                  *(_WORD *)&v694[12] = 2050;
                  *(void *)&v694[14] = v557;
                  *(_WORD *)&v694[22] = 2050;
                  *(void *)&v694[24] = v560;
                  __int16 v695 = 2050;
                  double v696 = v682;
                  __int16 v697 = 2050;
                  uint64_t v698 = v683;
                  v561 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v561);
                  if (v561 != buf) {
                    free(v561);
                  }
                  double v147 = v558;
                  double v148 = v559;
                }
                else
                {
                  double v147 = v682;
                  double v148 = *(double *)&v683;
                }
                [(CLTripSegmentLocation *)v119 updateAltitude:v147 andAltitudeAccuracy:v148];
              }
              [(CLTripSegmentLocation *)v119 altitude];
              if (fabs(v151) == INFINITY || v151 <= -430.5 || v151 >= 8848.86)
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                }
                double v192 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                {
                  [(CLTripSegmentLocation *)v119 altitude];
                  *(_DWORD *)uint64_t buf = 134283521;
                  *(void *)&uint8_t buf[4] = v193;
                  _os_log_impl(&dword_1906B8000, v192, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,location with invalid altitude skipped,alt,%{private}.2lf", buf, 0xCu);
                }
                if (sub_1906CB57C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                  }
                  [(CLTripSegmentLocation *)v119 altitude];
                  *(_DWORD *)v694 = 134283521;
                  *(void *)&v694[4] = v194;
                  __int32 v131 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
                  goto LABEL_319;
                }
              }
              else
              {
                LODWORD(v677) = v677 + 1;
                *(_DWORD *)v694 = [(CLTripSegmentLocation *)v119 locType];
                [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                *(void *)uint64_t buf = v152;
                sub_19074EFEC((uint64_t)&v673, v694, (double *)buf);
                if (!v116)
                {
                  sub_1906D5C70(v667, "input");
                  sub_1907501C0(a2, a3, v119, (uint64_t *)v667);
                  if (v668 < 0) {
                    operator delete(v667[0]);
                  }
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                  }
                  double v205 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                  {
                    [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                    *(_DWORD *)uint64_t buf = 134349056;
                    *(void *)&uint8_t buf[4] = v206;
                    _os_log_impl(&dword_1906B8000, v205, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,previous location set,time,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                    }
                    [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                    *(_DWORD *)v694 = 134349056;
                    *(void *)&v694[4] = v207;
                    double v208 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v208);
                    if (v208 != buf) {
                      free(v208);
                    }
                  }
                  goto LABEL_800;
                }
                [(NSDate *)[(CLTripSegmentLocation *)v116 timestamp] timeIntervalSinceReferenceDate];
                double v154 = v153;
                [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                double v621 = v155;
                [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceDate:[(CLTripSegmentLocation *)v116 timestamp]];
                if (fabs(v156) <= 0.001)
                {
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                  }
                  double v209 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)uint64_t buf = 134349056;
                    *(double *)&uint8_t buf[4] = v154;
                    _os_log_impl(&dword_1906B8000, v209, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,location with duplicated timestamp skipped,timestamp,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                    }
                    *(_DWORD *)v694 = 134349056;
                    *(double *)&v694[4] = v154;
                    __int32 v131 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
                    goto LABEL_319;
                  }
                }
                else
                {
                  double v619 = v156;
                  double v611 = v154;
                  [(CLTripSegmentLocation *)v119 distanceFromLocation:v116];
                  double v617 = v157;
                  [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                  double v159 = v158;
                  [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                  double v161 = v160;
                  [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                  double v163 = v162;
                  [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                  double v165 = sqrt(v163 * v164 + v159 * v161);
                  *((double *)&v680 + 1) = v165 / v619;
                  double v166 = 180.0;
                  if (v617 >= v165 + v165)
                  {
                    long double v167 = atan(v165 / v617);
                    double v168 = fmod(v167 * 57.2957795, 360.0);
                    double v166 = v168 + 360.0;
                    if (v168 >= 0.0) {
                      double v166 = v168;
                    }
                  }
                  *((double *)&v681 + 1) = v166;
                  if ([(CLTripSegmentLocation *)v116 isLoiLocationType]
                    || (([(CLTripSegmentLocation *)v119 isLoiLocationType] | v629) & 1) != 0
                    || ((char v169 = [(CLTripSegmentLocation *)v119 isGPSLocationType],
                         v617 / v619 <= 53.6)
                      ? (char v170 = 1)
                      : (char v170 = v169),
                        (v170 & 1) != 0))
                  {
                    if (v684 == 0 || !v115)
                    {
                      double v171 = operator new(0x10uLL);
                      *(void *)double v171 = v116;
                      *((void *)v171 + 1) = v119;
                      memset(buf, 0, 24);
                      sub_19074F67C((id *)v171, (id *)v171 + 2, (void **)buf);
                      double v172 = *(double *)(*(void *)buf + 32);
                      double v609 = *(double *)(*(void *)buf + 24);
                      double v174 = **(double **)buf;
                      double v173 = *(double *)(*(void *)buf + 8);
                      [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceDate:[(CLTripSegmentLocation *)v116 timestamp]];
                      double v176 = v175;
                      [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                      double v178 = v177;
                      [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                      double v180 = v179;
                      [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                      double v182 = v181;
                      [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                      double v184 = v183;
                      if (*(void *)buf)
                      {
                        *(void *)&uint8_t buf[8] = *(void *)buf;
                        operator delete(*(void **)buf);
                      }
                      long double v185 = v609 - v174;
                      long double v186 = v172 - v173;
                      double v187 = sqrt(v186 * v186 + v185 * v185);
                      double v188 = sqrt(v182 * v184 + v178 * v180);
                      operator delete(v171);
                      *(double *)&long long v680 = v187 / v176;
                      long double v189 = atan2(v186, v185);
                      double v190 = fmod(v189 * -57.2957795 + 90.0, 360.0);
                      if (v190 < 0.0) {
                        double v190 = v190 + 360.0;
                      }
                      *(double *)&long long v681 = v190;
                      *((double *)&v680 + 1) = v188 / v176;
                      if (v187 >= v188 + v188)
                      {
                        long double v210 = atan(v188 / v187);
                        double v211 = fmod(v210 * 57.2957795, 360.0);
                        if (v211 >= 0.0) {
                          double v191 = v211;
                        }
                        else {
                          double v191 = v211 + 360.0;
                        }
                      }
                      else
                      {
                        double v191 = 180.0;
                      }
                      *((double *)&v681 + 1) = v191;
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      uint64_t v212 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)uint64_t buf = 134349568;
                        *(double *)&uint8_t buf[4] = v191;
                        *(_WORD *)&unsigned char buf[12] = 2050;
                        *(double *)&unsigned char buf[14] = v187;
                        *(_WORD *)&buf[22] = 2050;
                        *(double *)&unsigned char buf[24] = v188;
                        _os_log_impl(&dword_1906B8000, v212, OS_LOG_TYPE_DEBUG, "CLTSP,II,UpdateLastEstimatedParameters,lastEstimatedCourseAccuracy,%{public}.2lf,distance,%{public}.2lf,distanceAccuracy,%{public}.2lf", buf, 0x20u);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        *(_DWORD *)v694 = 134349568;
                        *(double *)&v694[4] = v191;
                        *(_WORD *)&v694[12] = 2050;
                        *(double *)&v694[14] = v187;
                        *(_WORD *)&v694[22] = 2050;
                        *(double *)&v694[24] = v188;
                        v566 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "void UpdateLastEstimatedParameters(CLTripSegmentLocation *, CLTripSegmentLocation *, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v566);
                        if (v566 != buf) {
                          free(v566);
                        }
                      }
                    }
                    double v213 = v619;
                    id v214 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                    if (v214)
                    {
                      if ([a6 count] <= (unint64_t)(v608 + 1))
                      {
                        int v216 = v608;
                      }
                      else
                      {
                        unint64_t v215 = v608 + 1;
                        int v216 = v608;
                        do
                        {
                          objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "objectAtIndexedSubscript:", v215), "timestamp"), "timeIntervalSinceReferenceDate");
                          if (v217 > v621) {
                            break;
                          }
                          if (v217 >= v611)
                          {
                            if (v216 > v608)
                            {
                              objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "objectAtIndexedSubscript:", v216), "timestamp"), "timeIntervalSinceReferenceDate");
                              double v219 = v218;
                              objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "objectAtIndexedSubscript:", v215), "timestamp"), "timeIntervalSinceReferenceDate");
                              double v221 = v220;
                              double v222 = v220 - v219;
                              if (v220 - v219 >= 2.0)
                              {
                                LODWORD(v678) = v678 + 1;
                                *((double *)&v674 + 1) = v222 + *((double *)&v674 + 1);
                                if (qword_1E929F6D0 != -1) {
                                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                                }
                                uint64_t v223 = qword_1E929F6D8;
                                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)uint64_t buf = 134349312;
                                  *(double *)&uint8_t buf[4] = v219;
                                  *(_WORD *)&unsigned char buf[12] = 2050;
                                  *(double *)&unsigned char buf[14] = v221;
                                  _os_log_impl(&dword_1906B8000, v223, OS_LOG_TYPE_INFO, "CLTSP,II,inertialData,detected a gap in data,startTime,%{public}.3lf,endTime,%{public}.3lf", buf, 0x16u);
                                }
                                if (sub_1906CB57C(115, 2))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1E929F6D0 != -1) {
                                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                                  }
                                  *(_DWORD *)v694 = 134349312;
                                  *(double *)&v694[4] = v219;
                                  *(_WORD *)&v694[12] = 2050;
                                  *(double *)&v694[14] = v221;
                                  __int16 v229 = (char *)_os_log_send_and_compose_impl();
                                  sub_1906D4A28("Generic", 1, 0, 2, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v229);
                                  if (v229 != buf) {
                                    free(v229);
                                  }
                                }
                                if (v222 > 1.0)
                                {
                                  double v224 = 1.0;
                                  int v225 = 2;
                                  do
                                  {
                                    uint64_t v226 = -[CLTripSegmentInertialData initWithTime:dataPeriodSec:deltaCourseRad:deltaSpeedMps:deltaCourseVarRad2:deltaSpeedVarMps2:deltaCourseSpeedCovarRadMps:]([CLTripSegmentInertialData alloc], "initWithTime:dataPeriodSec:deltaCourseRad:deltaSpeedMps:deltaCourseVarRad2:deltaSpeedVarMps2:deltaCourseSpeedCovarRadMps:", [*(id *)(v117 + 2504) dateWithTimeIntervalSinceReferenceDate:v219 + v224], 1.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                    sub_19074FDBC(v226);
                                    [v214 addObject:v226];
                                    double v224 = (double)v225++;
                                  }
                                  while (v222 > v224);
                                }
                              }
                            }
                            sub_19074FDBC((void *)[a6 objectAtIndexedSubscript:v215]);
                            objc_msgSend((id)objc_msgSend(a6, "objectAtIndexedSubscript:", v215), "deltaCourseVar_rad2");
                            if (v227 <= 1.0)
                            {
                              objc_msgSend((id)objc_msgSend(a6, "objectAtIndexedSubscript:", v215), "deltaSpeedVar_mps2");
                              if (v228 <= 2.0)
                              {
                                objc_msgSend(v214, "addObject:", objc_msgSend(a6, "objectAtIndexedSubscript:", v215));
                                ++HIDWORD(v677);
                              }
                            }
                          }
                          int v216 = v215++;
                        }
                        while ([a6 count] > v215);
                      }
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      uint64_t v232 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                      {
                        int v233 = [v214 count];
                        *(_DWORD *)uint64_t buf = 67240704;
                        *(_DWORD *)&uint8_t buf[4] = v233;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(double *)&buf[10] = v611;
                        *(_WORD *)&buf[18] = 2050;
                        *(double *)&buf[20] = v621;
                        _os_log_impl(&dword_1906B8000, v232, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertialData,count,%{public}d,startTime,%{public}.3lf,endTime,%{public}.3lf", buf, 0x1Cu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        int v564 = [v214 count];
                        *(_DWORD *)v694 = 67240704;
                        *(_DWORD *)&v694[4] = v564;
                        *(_WORD *)&v694[8] = 2050;
                        *(double *)&v694[10] = v611;
                        *(_WORD *)&v694[18] = 2050;
                        *(double *)&v694[20] = v621;
                        v565 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v565);
                        if (v565 != buf) {
                          free(v565);
                        }
                      }
                      int v608 = v216;
                    }
                    else
                    {
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      int v230 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)uint64_t buf = 0;
                        _os_log_impl(&dword_1906B8000, v230, OS_LOG_TYPE_ERROR, "CLTSP,II,getInertialDataForGivenPeriod,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_1906CB57C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        *(_WORD *)v694 = 0;
                        __int16 v231 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 0, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v231);
                        if (v231 != buf) {
                          free(v231);
                        }
                      }
                    }
                    if (v619 <= 1.0 || (unint64_t)[v214 count] <= 2)
                    {
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      double v234 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                      {
                        int v235 = [v214 count];
                        *(_DWORD *)uint64_t buf = 134349568;
                        *(double *)&uint8_t buf[4] = v611;
                        *(_WORD *)&unsigned char buf[12] = 2050;
                        *(double *)&unsigned char buf[14] = v621;
                        *(_WORD *)&buf[22] = 1026;
                        *(_DWORD *)&unsigned char buf[24] = v235;
                        _os_log_impl(&dword_1906B8000, v234, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,location data skipped due to short interval between breadcrumbs,startTime,%{public}.3lf,endTime,%{public}.3lf,or low inertial data count,%{public}d", buf, 0x1Cu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        int v562 = [v214 count];
                        *(_DWORD *)v694 = 134349568;
                        *(double *)&v694[4] = v611;
                        *(_WORD *)&v694[12] = 2050;
                        *(double *)&v694[14] = v621;
                        *(_WORD *)&v694[22] = 1026;
                        *(_DWORD *)&v694[24] = v562;
                        v563 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v563);
                        if (v563 != buf) {
                          free(v563);
                        }
                      }
                      sub_1907510B8(a2, a3, a7, v116, (double *)&v680);
                      sub_1906D5C70(v665, "input");
                      sub_1907501C0(a2, a3, v119, (uint64_t *)v665);
                      if (v666 < 0)
                      {
                        double v236 = v665[0];
                        goto LABEL_378;
                      }
                      goto LABEL_800;
                    }
                    [(CLTripSegmentLocation *)v116 speed];
                    v607 = v116;
                    if (v237 >= 0.0)
                    {
                      [(CLTripSegmentLocation *)v116 speed];
                      if (v238 <= 0.2)
                      {
                        [(CLTripSegmentLocation *)v119 speed];
                        if (v239 >= 0.0)
                        {
                          [(CLTripSegmentLocation *)v119 speed];
                          if (v240 <= 0.2)
                          {
                            if (qword_1E929F6D0 != -1) {
                              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                            }
                            uint64_t v241 = qword_1E929F6D8;
                            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl(&dword_1906B8000, v241, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,two consecutive breadcrumbs are assumed stationary", buf, 2u);
                            }
                            if (sub_1906CB57C(115, 2))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1E929F6D0 != -1) {
                                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                              }
                              *(_WORD *)v694 = 0;
                              v575 = (char *)_os_log_send_and_compose_impl();
                              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v575);
                              if (v575 != buf) {
                                free(v575);
                              }
                              uint64_t v114 = v614;
                              unint64_t v117 = 0x1E4F1C000;
                              double v213 = v619;
                            }
                            if (v617 / v213 <= 0.2)
                            {
                              if (qword_1E929F6D0 != -1) {
                                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                              }
                              v531 = qword_1E929F6D8;
                              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)uint64_t buf = 0;
                                _os_log_impl(&dword_1906B8000, v531, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,clamp location points as device location has not changed between the two breadcrumbs", buf, 2u);
                              }
                              if (sub_1906CB57C(115, 2))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1E929F6D0 != -1) {
                                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                                }
                                *(_WORD *)v694 = 0;
                                v578 = (char *)_os_log_send_and_compose_impl();
                                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v578);
                                if (v578 != buf) {
                                  free(v578);
                                }
                                uint64_t v114 = v614;
                                unint64_t v117 = 0x1E4F1C000;
                              }
                              if (sub_190750980(v116))
                              {
                                [(CLTripSegmentLocation *)v116 setLocationReconstructionType:1];
                              }
                              else
                              {
                                sub_190750DC0(v116, (double *)&v680);
                                [(CLTripSegmentLocation *)v116 setLocationReconstructionType:2];
                              }
                              [(CLTripSegmentLocation *)v116 setStartLocationType:0];
                              [(CLTripSegmentLocation *)v116 setStopLocationType:0];
                              [a7 addObject:v116];
                              sub_1906D5C70(v663, "reconstructed");
                              sub_1907501C0(a2, a3, v116, (uint64_t *)v663);
                              if (v664 < 0) {
                                operator delete(v663[0]);
                              }
                              for (unint64_t j = 0; [v214 count] > j; ++j)
                              {
                                objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", j), "timestamp"), "timeIntervalSinceReferenceDate");
                                double v534 = v533;
                                v535 = [CLTripSegmentLocation alloc];
                                uint64_t v536 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v534];
                                [(CLTripSegmentLocation *)v116 latitude];
                                double v626 = v537;
                                [(CLTripSegmentLocation *)v116 longitude];
                                double v539 = v538;
                                [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                                double v541 = v540;
                                [(CLTripSegmentLocation *)v116 course];
                                double v543 = v542;
                                [(CLTripSegmentLocation *)v116 courseAccuracy];
                                double v545 = v544;
                                [(CLTripSegmentLocation *)v116 speed];
                                double v547 = v546;
                                [(CLTripSegmentLocation *)v116 speedAccuracy];
                                double v549 = v548;
                                [(CLTripSegmentLocation *)v116 altitude];
                                double v551 = v550;
                                [(CLTripSegmentLocation *)v116 altitudeAccuracy];
                                v553 = [(CLTripSegmentLocation *)v535 initWithTime:v536 latitude:[(CLTripSegmentLocation *)v116 locType] longitude:v626 horizontalAccuracy:v539 course:v541 courseAccuracy:v543 speed:v545 speedAccuracy:v547 altitude:v549 altitudeAccuracy:v551 locType:v552];
                                *(_DWORD *)uint64_t buf = [(CLTripSegmentLocation *)v116 locType];
                                *(_DWORD *)v694 = [(CLTripSegmentLocation *)v119 locType];
                                sub_190750BD0(v553, (unsigned int *)buf, (unsigned int *)v694, 2);
                                [a7 addObject:v553];
                                sub_1906D5C70(v661, "reconstructed");
                                sub_1907501C0(a2, a3, v553, (uint64_t *)v661);
                                unint64_t v117 = 0x1E4F1C000;
                                if (v662 < 0) {
                                  operator delete(v661[0]);
                                }
                              }
                              sub_1906D5C70(v659, "input");
                              sub_1907501C0(a2, a3, v119, v659);
                              if (v660 < 0)
                              {
                                double v236 = (void *)v659[0];
LABEL_378:
                                operator delete(v236);
                              }
LABEL_800:
                              __int16 v116 = v119;
                              goto LABEL_801;
                            }
                          }
                        }
                      }
                    }
                    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceDate:", -[CLTripSegmentLocation timestamp](v116, "timestamp"));
                    double v243 = v242;
                    objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", 0), "dataPeriod_s");
                    double v244 = v116;
                    if (v243 > v245)
                    {
                      if (v214)
                      {
                        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceDate:", -[CLTripSegmentLocation timestamp](v116, "timestamp"));
                        double v247 = v246;
                        objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", 0), "dataPeriod_s");
                        double v249 = v248;
                        [(NSDate *)[(CLTripSegmentLocation *)v116 timestamp] timeIntervalSinceReferenceDate];
                        double v251 = v250;
                        [(CLTripSegmentLocation *)v116 speed];
                        if ((*(void *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v252 < 0.0)
                        {
                          double v254 = *(double *)&v680;
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v116 speed];
                          double v254 = v253;
                        }
                        [(CLTripSegmentLocation *)v116 course];
                        if ((*(void *)&v257 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v257 < 0.0)
                        {
                          double v622 = *(double *)&v681;
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v116 course];
                          double v622 = v258;
                        }
                        [(CLTripSegmentLocation *)v116 speedAccuracy];
                        if ((*(void *)&v259 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v259 <= 0.0
                          || v259 >= 20.0)
                        {
                          double v261 = *((double *)&v680 + 1);
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v116 speedAccuracy];
                          double v261 = v260;
                        }
                        [(CLTripSegmentLocation *)v116 courseAccuracy];
                        if ((*(void *)&v262 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v262 <= 0.0
                          || v262 >= 180.0)
                        {
                          double v264 = *((double *)&v681 + 1);
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v116 courseAccuracy];
                          double v264 = v263;
                        }
                        double v265 = operator new(0x18uLL);
                        *double v265 = 0;
                        v265[1] = 0;
                        v265[2] = 0;
                        __int16 v266 = (double *)operator new(0x30uLL);
                        double v267 = v247 - v249;
                        double v268 = v254;
                        double v269 = (v247 - v249) * v254;
                        __double2 v270 = __sincos_stret((v622 + -90.0) * -0.0174532925);
                        v266[3] = v269 * v270.__cosval;
                        v266[4] = v269 * v270.__sinval;
                        v266[5] = 0.0;
                        v266[1] = 0.0;
                        v266[2] = 0.0;
                        *__int16 v266 = 0.0;
                        *(void *)uint64_t buf = v266;
                        *(void *)&uint8_t buf[16] = v266 + 6;
                        operator delete(v265);
                        *(void *)&uint8_t buf[8] = v266 + 6;
                        memset(v694, 0, 24);
                        sub_19074F950((uint64_t *)buf, v116, (void **)v694);
                        long long v271 = [CLTripSegmentLocation alloc];
                        uint64_t v272 = [*(id *)(v117 + 2504) dateWithTimeIntervalSinceReferenceDate:v267 + v251];
                        double v273 = *(double *)(*(void *)v694 + 24);
                        double v274 = *(double *)(*(void *)v694 + 32);
                        [(CLTripSegmentLocation *)v116 horizontalAccuracy];
                        double v276 = v275;
                        double v277 = *(double *)(*(void *)v694 + 40);
                        [(CLTripSegmentLocation *)v116 altitudeAccuracy];
                        double v244 = [(CLTripSegmentLocation *)v271 initWithTime:v272 latitude:[(CLTripSegmentLocation *)v116 locType] longitude:v273 horizontalAccuracy:v274 course:v276 courseAccuracy:v622 speed:v264 speedAccuracy:v268 altitude:v261 altitudeAccuracy:v277 locType:v278];
                        if (*(void *)v694)
                        {
                          *(void *)&v694[8] = *(void *)v694;
                          operator delete(*(void **)v694);
                        }
                        if (*(void *)buf) {
                          operator delete(*(void **)buf);
                        }
                      }
                      else
                      {
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        double v256 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v256, OS_LOG_TYPE_ERROR, "CLTSP,II,alignP0WithInertialDataArrayStartPoint,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          *(_WORD *)v694 = 0;
                          v570 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "CLTripSegmentLocation *alignP0WithInertialDataArrayStartPoint(NSMutableArray<CLTripSegmentInertialData *> *, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v570);
                          if (v570 != buf) {
                            free(v570);
                          }
                          double v244 = 0;
                          unint64_t v117 = 0x1E4F1C000;
                        }
                        else
                        {
                          double v244 = 0;
                        }
                      }
                    }
                    if (!sub_190750980(v244)) {
                      sub_190750DC0(v244, (double *)&v680);
                    }
                    -[NSDate timeIntervalSinceDate:](-[CLTripSegmentLocation timestamp](v119, "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v214, "lastObject"), "timestamp"));
                    __int16 v280 = v119;
                    v618 = v244;
                    if (fabs(v279) > 0.001)
                    {
                      if (v214)
                      {
                        -[NSDate timeIntervalSinceDate:](-[CLTripSegmentLocation timestamp](v119, "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v214, "lastObject"), "timestamp"));
                        double v282 = v281;
                        [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                        double v284 = v283;
                        [(CLTripSegmentLocation *)v119 speed];
                        if ((*(void *)&v285 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v285 < 0.0)
                        {
                          double v287 = *(double *)&v680;
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v119 speed];
                          double v287 = v286;
                        }
                        [(CLTripSegmentLocation *)v119 course];
                        if ((*(void *)&v289 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v289 < 0.0)
                        {
                          double v291 = *(double *)&v681;
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v119 course];
                          double v291 = v290;
                        }
                        [(CLTripSegmentLocation *)v119 speedAccuracy];
                        if ((*(void *)&v292 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v292 <= 0.0
                          || v292 >= 20.0)
                        {
                          double v294 = *((double *)&v680 + 1);
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v119 speedAccuracy];
                          double v294 = v293;
                        }
                        [(CLTripSegmentLocation *)v119 courseAccuracy];
                        if ((*(void *)&v295 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v295 <= 0.0
                          || v295 >= 180.0)
                        {
                          double v297 = *((double *)&v681 + 1);
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v119 courseAccuracy];
                          double v297 = v296;
                        }
                        double v298 = fmod(v291 + 180.0, 360.0);
                        if (v298 >= 0.0) {
                          double v299 = v298;
                        }
                        else {
                          double v299 = v298 + 360.0;
                        }
                        long long v300 = operator new(0x18uLL);
                        *long long v300 = 0;
                        v300[1] = 0;
                        v300[2] = 0;
                        int v301 = (double *)operator new(0x30uLL);
                        double v623 = v294;
                        double v302 = v287;
                        __double2 v303 = __sincos_stret((v299 + -90.0) * -0.0174532925);
                        v301[3] = v282 * v287 * v303.__cosval;
                        v301[4] = v282 * v287 * v303.__sinval;
                        v301[5] = 0.0;
                        v301[1] = 0.0;
                        v301[2] = 0.0;
                        *int v301 = 0.0;
                        *(void *)uint64_t buf = v301;
                        *(void *)&uint8_t buf[16] = v301 + 6;
                        operator delete(v300);
                        *(void *)&uint8_t buf[8] = v301 + 6;
                        memset(v694, 0, 24);
                        sub_19074F950((uint64_t *)buf, v119, (void **)v694);
                        long long v304 = [CLTripSegmentLocation alloc];
                        uint64_t v305 = [*(id *)(v117 + 2504) dateWithTimeIntervalSinceReferenceDate:v284 - v282];
                        double v306 = *(double *)(*(void *)v694 + 24);
                        double v307 = *(double *)(*(void *)v694 + 32);
                        [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                        double v309 = v308;
                        double v310 = *(double *)(*(void *)v694 + 40);
                        [(CLTripSegmentLocation *)v119 altitudeAccuracy];
                        __int16 v280 = [(CLTripSegmentLocation *)v304 initWithTime:v305 latitude:[(CLTripSegmentLocation *)v119 locType] longitude:v306 horizontalAccuracy:v307 course:v309 courseAccuracy:v299 speed:v297 speedAccuracy:v302 altitude:v623 altitudeAccuracy:v310 locType:v311];
                        if (*(void *)v694)
                        {
                          *(void *)&v694[8] = *(void *)v694;
                          operator delete(*(void **)v694);
                        }
                        operator delete(v301);
                      }
                      else
                      {
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        long long v288 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v288, OS_LOG_TYPE_ERROR, "CLTSP,II,alignP1WithInertialDataArrayEndPoint,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          *(_WORD *)v694 = 0;
                          v571 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "CLTripSegmentLocation *alignP1WithInertialDataArrayEndPoint(NSMutableArray<CLTripSegmentInertialData *> *, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v571);
                          if (v571 != buf) {
                            free(v571);
                          }
                          __int16 v280 = 0;
                        }
                        else
                        {
                          __int16 v280 = 0;
                        }
                      }
                    }
                    [(NSDate *)[(CLTripSegmentLocation *)v244 timestamp] timeIntervalSinceReferenceDate];
                    double v605 = v312;
                    [(NSDate *)[(CLTripSegmentLocation *)v280 timestamp] timeIntervalSinceReferenceDate];
                    [(NSDate *)[(CLTripSegmentLocation *)v280 timestamp] timeIntervalSinceDate:[(CLTripSegmentLocation *)v244 timestamp]];
                    double v612 = v313;
                    memset(v694, 0, 24);
                    v604 = v280;
                    if (v214)
                    {
                      if ([v214 count])
                      {
                        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceReferenceDate");
                        double v315 = v314 - v605;
                        long long v316 = *(char **)&v694[8];
                        if (*(void *)&v694[8] >= *(void *)&v694[16])
                        {
                          long long v320 = *(char **)v694;
                          uint64_t v321 = (uint64_t)(*(void *)&v694[8] - *(void *)v694) >> 3;
                          unint64_t v322 = v321 + 1;
                          if ((unint64_t)(v321 + 1) >> 61) {
LABEL_981:
                          }
                            sub_190718FD4();
                          uint64_t v323 = *(void *)&v694[16] - *(void *)v694;
                          if ((uint64_t)(*(void *)&v694[16] - *(void *)v694) >> 2 > v322) {
                            unint64_t v322 = v323 >> 2;
                          }
                          if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v324 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v324 = v322;
                          }
                          if (v324)
                          {
                            long long v325 = (char *)sub_190732A30((uint64_t)&v694[16], v324);
                            long long v316 = *(char **)&v694[8];
                            long long v320 = *(char **)v694;
                          }
                          else
                          {
                            long long v325 = 0;
                          }
                          long long v326 = (double *)&v325[8 * v321];
                          *long long v326 = v315;
                          long long v317 = v326 + 1;
                          while (v316 != v320)
                          {
                            uint64_t v327 = *((void *)v316 - 1);
                            v316 -= 8;
                            *((void *)v326-- - 1) = v327;
                          }
                          *(void *)v694 = v326;
                          *(void *)&v694[8] = v317;
                          *(void *)&v694[16] = &v325[8 * v324];
                          if (v320) {
                            operator delete(v320);
                          }
                        }
                        else
                        {
                          **(double **)&v694[8] = v315;
                          long long v317 = (double *)(v316 + 8);
                        }
                        *(void *)&v694[8] = v317;
                        if ((unint64_t)[v214 count] >= 2)
                        {
                          unint64_t v328 = 1;
                          do
                          {
                            objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v328), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v328 - 1), "timestamp"));
                            uint64_t v330 = v329;
                            long long v331 = *(char **)&v694[8];
                            if (*(void *)&v694[8] >= *(void *)&v694[16])
                            {
                              long long v333 = *(char **)v694;
                              uint64_t v334 = (uint64_t)(*(void *)&v694[8] - *(void *)v694) >> 3;
                              unint64_t v335 = v334 + 1;
                              if ((unint64_t)(v334 + 1) >> 61) {
                                goto LABEL_981;
                              }
                              uint64_t v336 = *(void *)&v694[16] - *(void *)v694;
                              if ((uint64_t)(*(void *)&v694[16] - *(void *)v694) >> 2 > v335) {
                                unint64_t v335 = v336 >> 2;
                              }
                              if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v337 = v335;
                              }
                              if (v337)
                              {
                                uint64_t v338 = (char *)sub_190732A30((uint64_t)&v694[16], v337);
                                long long v331 = *(char **)&v694[8];
                                long long v333 = *(char **)v694;
                              }
                              else
                              {
                                uint64_t v338 = 0;
                              }
                              long long v339 = &v338[8 * v334];
                              *(void *)long long v339 = v330;
                              long long v332 = v339 + 8;
                              while (v331 != v333)
                              {
                                uint64_t v340 = *((void *)v331 - 1);
                                v331 -= 8;
                                *((void *)v339 - 1) = v340;
                                v339 -= 8;
                              }
                              *(void *)v694 = v339;
                              *(void *)&v694[8] = v332;
                              *(void *)&v694[16] = &v338[8 * v337];
                              if (v333) {
                                operator delete(v333);
                              }
                            }
                            else
                            {
                              **(void **)&v694[8] = v329;
                              long long v332 = v331 + 8;
                            }
                            *(void *)&v694[8] = v332;
                            ++v328;
                          }
                          while ([v214 count] > v328);
                        }
                      }
                    }
                    else
                    {
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      long long v318 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)uint64_t buf = 0;
                        _os_log_impl(&dword_1906B8000, v318, OS_LOG_TYPE_ERROR, "CLTSP,II,getInertialDataTimeDiff,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_1906CB57C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        LOWORD(__p) = 0;
                        long long v319 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 0, "void getInertialDataTimeDiff(NSMutableArray<CLTripSegmentInertialData *> *, const CFAbsoluteTime &, std::vector<NSTimeInterval> &)", "CoreLocation: %s\n", v319);
                        if (v319 != buf) {
                          free(v319);
                        }
                      }
                    }
                    long long v341 = operator new(0x10uLL);
                    *(void *)long long v341 = v244;
                    *((void *)v341 + 1) = v280;
                    long long __p = 0uLL;
                    v687[0] = 0;
                    v606 = v341;
                    sub_19074F67C((id *)v341, (id *)v341 + 2, (void **)&__p);
                    double v342 = *(double *)__p;
                    double v343 = *(double *)(__p + 8);
                    long double v620 = *(double *)(__p + 32);
                    long double v624 = *(double *)(__p + 24);
                    [(CLTripSegmentLocation *)v244 speed];
                    double v345 = v344;
                    [(CLTripSegmentLocation *)v244 course];
                    double v347 = v346;
                    double v610 = atan2(v620 - v343, v624 - v342);
                    unint64_t v348 = (int)([v214 count] + 1);
                    sub_1907584C0(v691, v348);
                    sub_1907584C0(v658, v348);
                    sub_19075857C(&v656, v348);
                    sub_19075857C(&v654, v348);
                    v652 = 0;
                    v651 = 0;
                    v653 = 0;
                    if (v214)
                    {
                      if ([v214 count]) {
                        **(void **)v691 = 0;
                      }
                      if ([v214 count])
                      {
                        unint64_t v349 = 0;
                        double v350 = 0.0;
                        do
                        {
                          objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v349), "deltaCourse_rad");
                          double v350 = v350 - v351 * *(double *)(*(void *)v694 + 8 * v349);
                          *(double *)(*(void *)v691 + 8 * v349++ + 8) = v350;
                        }
                        while ([v214 count] > v349);
                      }
                    }
                    else
                    {
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      v352 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)uint64_t buf = 0;
                        _os_log_impl(&dword_1906B8000, v352, OS_LOG_TYPE_ERROR, "CLTSP,II,accumulateDeltaPhaseAngles,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_1906CB57C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        LOWORD(v689) = 0;
                        v569 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 0, "void accumulateDeltaPhaseAngles(NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, std::vector<double> &)", "CoreLocation: %s\n", v569);
                        if (v569 != buf) {
                          free(v569);
                        }
                      }
                    }
                    BOOL v353 = 0;
                    unsigned int v354 = 0;
                    double v355 = (v347 + -90.0) * -0.0174532925;
                    double v356 = 0.0;
                    while (1)
                    {
                      if (v214)
                      {
                        if (*(void *)v694 == *(void *)&v694[8])
                        {
                          double v360 = 0.0;
                        }
                        else
                        {
                          double v357 = 0.0;
                          long long v358 = *(double **)v694;
                          do
                          {
                            double v359 = *v358++;
                            double v357 = v357 + v359;
                          }
                          while (v358 != *(double **)&v694[8]);
                          double v360 = v357
                               / (double)(unint64_t)((uint64_t)(*(void *)&v694[8] - *(void *)v694) >> 3);
                        }
                        uint64_t v363 = [v214 count];
                        uint64_t v364 = [v214 count];
                        unint64_t v365 = [v214 count];
                        if ([v214 count]) {
                          *(void *)v658[0] = 0;
                        }
                        if ([v214 count])
                        {
                          unint64_t v366 = 0;
                          double v367 = 0.0;
                          do
                          {
                            objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v366), "deltaSpeed_mps");
                            double v367 = v367 + v368 * *(double *)(*(void *)v694 + 8 * v366);
                            *((double *)v658[0] + v366 + 1) = v367
                                                            + v345 * v360
                                                            + -v356
                                                            / ((double)((unint64_t)(v363 + v363 * v364) >> 1)
                                                             / (double)v365)
                                                            * (double)((int)v366 + 1)
                                                            * v360;
                            ++v366;
                          }
                          while ([v214 count] > v366);
                        }
                      }
                      else
                      {
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        uint64_t v361 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v361, OS_LOG_TYPE_ERROR, "CLTSP,II,accumulateDeltaDistance,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          LOWORD(v689) = 0;
                          char v362 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "void accumulateDeltaDistance(const double &, NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v362);
                          if (v362 != buf) {
                            free(v362);
                          }
                        }
                      }
                      long long v369 = *(double **)v691;
                      long long v370 = (float64x2_t *)v656;
                      if (*(void *)&v691[8] != *(void *)v691)
                      {
                        long long v371 = (double *)v658[0];
                        if ((unint64_t)((uint64_t)(*(void *)&v691[8] - *(void *)v691) >> 3) <= 1) {
                          uint64_t v372 = 1;
                        }
                        else {
                          uint64_t v372 = (uint64_t)(*(void *)&v691[8] - *(void *)v691) >> 3;
                        }
                        long long v373 = (double *)((char *)v656 + 8);
                        do
                        {
                          double v374 = *v369++;
                          sub_1907508B4(v374 * 0.0, v374);
                          double v375 = *v371++;
                          *(v373 - 1) = v376 * v375;
                          *long long v373 = v377 * v375;
                          v373 += 2;
                          --v372;
                        }
                        while (v372);
                      }
                      uint64_t v114 = v614;
                      if (v657 != v370)
                      {
                        long long v378 = (char *)v654;
                        if ((unint64_t)(v657 - v370) <= 1) {
                          uint64_t v379 = 1;
                        }
                        else {
                          uint64_t v379 = v657 - v370;
                        }
                        sub_1907508B4(v355 * 0.0, v355);
                        unint64_t v382 = (double *)(v378 + 8);
                        float64x2_t v383 = 0uLL;
                        do
                        {
                          float64x2_t v383 = vaddq_f64(v383, *v370);
                          *(v382 - 1) = v380 * v383.f64[0] - vmuld_lane_f64(v381, v383, 1);
                          *unint64_t v382 = vmuld_lane_f64(v380, v383, 1) + v381 * v383.f64[0];
                          v382 += 2;
                          ++v370;
                          --v379;
                        }
                        while (v379);
                      }
                      long double v384 = *(v655 - 2);
                      long double v385 = *(v655 - 1);
                      double v386 = atan2(v385, v384);
                      double v387 = hypot(v624 - v384, v620 - v385);
                      double v388 = v387;
                      v389 = v652;
                      if (v652 >= v653)
                      {
                        v391 = (double *)v651;
                        uint64_t v392 = ((char *)v652 - (unsigned char *)v651) >> 3;
                        unint64_t v393 = v392 + 1;
                        if ((unint64_t)(v392 + 1) >> 61) {
                          sub_190718FD4();
                        }
                        uint64_t v394 = (char *)v653 - (unsigned char *)v651;
                        if (((char *)v653 - (unsigned char *)v651) >> 2 > v393) {
                          unint64_t v393 = v394 >> 2;
                        }
                        if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v395 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v395 = v393;
                        }
                        if (v395)
                        {
                          v396 = (char *)sub_190732A30((uint64_t)&v653, v395);
                          v389 = v652;
                          v391 = (double *)v651;
                        }
                        else
                        {
                          v396 = 0;
                        }
                        v397 = (double *)&v396[8 * v392];
                        double *v397 = v388;
                        v390 = v397 + 1;
                        while (v389 != v391)
                        {
                          uint64_t v398 = *((void *)v389-- - 1);
                          *((void *)v397-- - 1) = v398;
                        }
                        v651 = v397;
                        v652 = v390;
                        v653 = (double *)&v396[8 * v395];
                        if (v391) {
                          operator delete(v391);
                        }
                      }
                      else
                      {
                        double *v652 = v387;
                        v390 = v389 + 1;
                      }
                      v652 = v390;
                      if (v388 < 2.0) {
                        break;
                      }
                      double v399 = v388 / v612;
                      double v400 = hypot(v624, v620);
                      if (v400 <= hypot(v384, v385)) {
                        double v401 = v399;
                      }
                      else {
                        double v401 = -v399;
                      }
                      double v356 = v356 + v401;
                      double v355 = v355 + (v610 - v386) * 0.75;
                      BOOL v353 = v354++ > 0x63;
                      if (v354 == 101)
                      {
                        BOOL v353 = 1;
                        goto LABEL_583;
                      }
                    }
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                    }
                    v402 = qword_1E929F6D8;
                    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)uint64_t buf = 134349056;
                      *(double *)&uint8_t buf[4] = v388;
                      _os_log_impl(&dword_1906B8000, v402, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,distance error,%{public}.2lf", buf, 0xCu);
                    }
                    if (sub_1906CB57C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      LODWORD(v689) = 134349056;
                      *(double *)((char *)&v689 + 4) = v388;
                      v403 = (char *)_os_log_send_and_compose_impl();
                      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v403);
                      if (v403 != buf) {
                        free(v403);
                      }
                    }
LABEL_583:
                    ++HIDWORD(v678);
                    if (v353 || v345 < 0.0 || v345 > 53.6)
                    {
                      v413 = v651;
                      if (v651 == v652)
                      {
                        v415 = v651;
                        unint64_t v117 = 0x1E4F1C000;
                        v416 = v607;
                      }
                      else
                      {
                        v414 = (double *)((char *)v651 + 8);
                        v415 = v651;
                        unint64_t v117 = 0x1E4F1C000;
                        v416 = v607;
                        if ((char *)v651 + 8 != (char *)v652)
                        {
                          double v417 = *(double *)v651;
                          v415 = v651;
                          v418 = (double *)((char *)v651 + 8);
                          do
                          {
                            double v419 = *v418++;
                            double v420 = v419;
                            if (v419 < v417)
                            {
                              double v417 = v420;
                              v415 = v414;
                            }
                            v414 = v418;
                          }
                          while (v418 != v652);
                        }
                      }
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                      }
                      int64_t v462 = v415 - v413;
                      v463 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v464 = *(void *)((char *)v651 + (v462 << 29 >> 29));
                        *(_DWORD *)uint64_t buf = 134349056;
                        *(void *)&uint8_t buf[4] = v464;
                        _os_log_impl(&dword_1906B8000, v463, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,could not find the minimum distance within accepted range,distance calculated,%{public}.2lf", buf, 0xCu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        uint64_t v567 = *(void *)((char *)v651 + (v462 << 29 >> 29));
                        LODWORD(v689) = 134349056;
                        *(void *)((char *)&v689 + 4) = v567;
                        v568 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v568);
                        if (v568 != buf) {
                          free(v568);
                        }
                      }
                      sub_1907510B8(a2, a3, a7, v416, (double *)&v680);
                      sub_1906D5C70(v649, "input");
                      sub_1907501C0(a2, a3, v119, (uint64_t *)v649);
                      if (v650 < 0) {
                        operator delete(v649[0]);
                      }
                      int v465 = 0;
                    }
                    else
                    {
                      double v404 = fmod(v355 * -57.2957795 + 90.0, 360.0);
                      if (v404 >= 0.0) {
                        double v405 = v404;
                      }
                      else {
                        double v405 = v404 + 360.0;
                      }
                      ++v679;
                      sub_1907584C0(&v689, [v214 count]);
                      if (v214)
                      {
                        unint64_t v117 = 0x1E4F1C000;
                        uint64_t v406 = [v214 count];
                        uint64_t v407 = [v214 count];
                        unint64_t v408 = [v214 count];
                        if ([v214 count])
                        {
                          unint64_t v409 = 0;
                          double v410 = -v356 / ((double)((unint64_t)(v406 + v406 * v407) >> 1) / (double)v408);
                          double v411 = 0.0;
                          do
                          {
                            objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v409), "deltaSpeed_mps");
                            double v411 = v411 + v412;
                            *(double *)(v689 + 8 * v409) = v345 + v411 + v410 * (double)((int)v409 + 1);
                            ++v409;
                          }
                          while ([v214 count] > v409);
                        }
                      }
                      else
                      {
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        unint64_t v117 = 0x1E4F1C000uLL;
                        v421 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v421, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructSpeed,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          LOWORD(v648[0]) = 0;
                          v572 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "void reconstructSpeed(const double &, NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v572);
                          if (v572 != buf) {
                            free(v572);
                          }
                          uint64_t v114 = v614;
                        }
                      }
                      sub_1907584C0(v648, [v214 count]);
                      [(CLTripSegmentLocation *)v618 speedAccuracy];
                      if ((*(void *)&v422 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                        || v422 <= 0.0
                        || v422 >= 20.0)
                      {
                        double v424 = *((double *)&v680 + 1);
                        if (v214) {
                          goto LABEL_621;
                        }
LABEL_610:
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        v425 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v425, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructSpeedAccuracy,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          LOWORD(v646) = 0;
                          v426 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "void reconstructSpeedAccuracy(NSMutableArray<CLTripSegmentInertialData *> *, const double &, std::vector<double> &)", "CoreLocation: %s\n", v426);
                          if (v426 != buf) {
                            free(v426);
                          }
                          uint64_t v114 = v614;
                          unint64_t v117 = 0x1E4F1C000;
                        }
                      }
                      else
                      {
                        [(CLTripSegmentLocation *)v618 speedAccuracy];
                        double v424 = v423;
                        if (!v214) {
                          goto LABEL_610;
                        }
LABEL_621:
                        if ([v214 count])
                        {
                          unint64_t v427 = 0;
                          do
                          {
                            objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v427), "deltaSpeedVar_mps2");
                            double v429 = sqrt(v428);
                            double v424 = sqrt(v429 * v429 + v424 * v424);
                            *((double *)v648[0] + v427++) = v424;
                          }
                          while ([v214 count] > v427);
                        }
                      }
                      sub_1907584C0(&v646, [v214 count]);
                      if (!sub_190750980(v607)) {
                        sub_190750DC0(v607, (double *)&v680);
                      }
                      if (*((void *)&v689 + 1) == (void)v689)
                      {
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                        }
                        v437 = qword_1E929F6D8;
                        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl(&dword_1906B8000, v437, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructAcceleration,speedVector is empty", buf, 2u);
                        }
                        if (sub_1906CB57C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          LOWORD(v688) = 0;
                          v573 = (char *)_os_log_send_and_compose_impl();
                          sub_1906D4A28("Generic", 1, 0, 0, "void reconstructAcceleration(CLTripSegmentLocation *, const std::vector<double> &, std::vector<double> &)", "CoreLocation: %s\n", v573);
                          if (v573 != buf) {
                            free(v573);
                          }
                          uint64_t v114 = v614;
                          unint64_t v117 = 0x1E4F1C000;
                        }
                      }
                      else
                      {
                        double v430 = *(double *)v689;
                        [(CLTripSegmentLocation *)v607 speed];
                        v432 = (char *)v646;
                        *(double *)v646 = vabdd_f64(v430, v431);
                        if (*((void *)&v689 + 1) - (void)v689 >= 9uLL)
                        {
                          unint64_t v433 = (uint64_t)(*((void *)&v689 + 1) - v689) >> 3;
                          if (v433 <= 2) {
                            unint64_t v433 = 2;
                          }
                          unint64_t v434 = v433 - 1;
                          v435 = (double *)(v432 + 8);
                          v436 = (double *)(v689 + 8);
                          do
                          {
                            *v435++ = vabdd_f64(*v436, *(v436 - 1));
                            ++v436;
                            --v434;
                          }
                          while (v434);
                        }
                      }
                      v438 = (double *)v689;
                      v439 = (double *)(v689 + 8);
                      double v440 = *(double *)v689;
                      if ((void)v689 == *((void *)&v689 + 1) || v439 == *((double **)&v689 + 1))
                      {
                        if (v440 < 0.0) {
                          goto LABEL_649;
                        }
                      }
                      else
                      {
                        double v442 = *(double *)v689;
                        v443 = (double *)(v689 + 8);
                        v444 = (double *)v689;
                        v445 = (double *)(v689 + 8);
                        do
                        {
                          double v446 = *v445++;
                          double v447 = v446;
                          if (v446 < v442)
                          {
                            double v442 = v447;
                            v444 = v443;
                          }
                          v443 = v445;
                        }
                        while (v445 != *((double **)&v689 + 1));
                        if (*v444 < 0.0)
                        {
LABEL_649:
                          BOOL v448 = 1;
                          goto LABEL_655;
                        }
                        do
                        {
                          v449 = v439 + 1;
                          if (v440 < *v439)
                          {
                            double v440 = *v439;
                            v438 = v439;
                          }
                          ++v439;
                        }
                        while (v449 != *((double **)&v689 + 1));
                        double v440 = *v438;
                      }
                      BOOL v448 = v440 >= 53.6;
LABEL_655:
                      v450 = (double *)v646;
                      v451 = (double *)((char *)v646 + 8);
                      if (v646 != v647 && v451 != (double *)v647)
                      {
                        double v453 = *(double *)v646;
                        v454 = (double *)((char *)v646 + 8);
                        do
                        {
                          double v455 = *v454++;
                          double v456 = v455;
                          if (v453 < v455)
                          {
                            double v453 = v456;
                            v450 = v451;
                          }
                          v451 = v454;
                        }
                        while (v454 != (double *)v647);
                      }
                      double v457 = *v450;
                      BOOL v458 = *v450 >= 6.0;
                      [(CLTripSegmentLocation *)v618 speed];
                      if (v459 >= 0.0)
                      {
                        [(CLTripSegmentLocation *)v604 speed];
                        if (v460 >= 0.0)
                        {
                          [(CLTripSegmentLocation *)v618 speed];
                          if (vabdd_f64(v466, *(double *)v689) >= 6.0
                            || ([(CLTripSegmentLocation *)v604 speed],
                                vabdd_f64(v467, *(double *)(*((void *)&v689 + 1) - 8)) >= 6.0))
                          {
                            BOOL v458 = 1;
                            goto LABEL_682;
                          }
                        }
                      }
                      int v461 = v457 >= 6.0 || v448;
                      if (v461 == 1)
                      {
LABEL_682:
                        if ([(CLTripSegmentLocation *)v607 isLoiLocationType]
                          || [(CLTripSegmentLocation *)v119 isLoiLocationType])
                        {
                          goto LABEL_684;
                        }
                        if (v448)
                        {
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          v526 = qword_1E929F6D8;
                          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)uint64_t buf = 134349056;
                            *(double *)&uint8_t buf[4] = v605;
                            _os_log_impl(&dword_1906B8000, v526, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,detected invalid speed,skip breadcrumb at time,%{public}.3lf", buf, 0xCu);
                          }
                          if (sub_1906CB57C(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1E929F6D0 != -1) {
                              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                            }
                            LODWORD(v688) = 134349056;
                            *(double *)((char *)&v688 + 4) = v605;
                            v576 = (char *)_os_log_send_and_compose_impl();
                            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v576);
                            if (v576 != buf) {
                              free(v576);
                            }
                            uint64_t v114 = v614;
                            unint64_t v117 = 0x1E4F1C000;
                          }
                        }
                        v527 = v607;
                        if (v458)
                        {
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          v528 = qword_1E929F6D8;
                          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)uint64_t buf = 134349056;
                            *(double *)&uint8_t buf[4] = v605;
                            _os_log_impl(&dword_1906B8000, v528, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,detected invalid acceleration,skip breadcrumb at time,%{public}.3lf", buf, 0xCu);
                          }
                          int v529 = sub_1906CB57C(115, 2);
                          v527 = v607;
                          if (v529)
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1E929F6D0 != -1) {
                              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                            }
                            LODWORD(v688) = 134349056;
                            *(double *)((char *)&v688 + 4) = v605;
                            v577 = (char *)_os_log_send_and_compose_impl();
                            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v577);
                            if (v577 != buf) {
                              free(v577);
                            }
                            uint64_t v114 = v614;
                            unint64_t v117 = 0x1E4F1C000;
                            v527 = v607;
                          }
                        }
                        [a7 addObject:v527];
                        sub_1906D5C70(v644, "reconstructed");
                        sub_1907501C0(a2, a3, v607, (uint64_t *)v644);
                        if (v645 < 0) {
                          operator delete(v644[0]);
                        }
                        sub_1906D5C70(v642, "input");
                        sub_1907501C0(a2, a3, v119, (uint64_t *)v642);
                        if (v643 < 0) {
                          operator delete(v642[0]);
                        }
                        int v465 = 0;
                      }
                      else
                      {
LABEL_684:
                        sub_1907584C0(&v688, [v214 count]);
                        if (v214)
                        {
                          if ([v214 count])
                          {
                            unint64_t v468 = 0;
                            double v469 = 0.0;
                            do
                            {
                              objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v468), "deltaCourse_rad");
                              double v469 = v469 + v470 * 57.2957795 * *(double *)(*(void *)v694 + 8 * v468);
                              double v471 = fmod(v405 + v469, 360.0);
                              if (v471 < 0.0) {
                                double v471 = v471 + 360.0;
                              }
                              *(double *)(v688 + 8 * v468++) = v471;
                            }
                            while ([v214 count] > v468);
                          }
                        }
                        else
                        {
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          v472 = qword_1E929F6D8;
                          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl(&dword_1906B8000, v472, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructCourse,detected null inertialDataArray", buf, 2u);
                          }
                          if (sub_1906CB57C(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1E929F6D0 != -1) {
                              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                            }
                            LOWORD(v641[0]) = 0;
                            v574 = (char *)_os_log_send_and_compose_impl();
                            sub_1906D4A28("Generic", 1, 0, 0, "void reconstructCourse(NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v574);
                            if (v574 != buf) {
                              free(v574);
                            }
                            uint64_t v114 = v614;
                            unint64_t v117 = 0x1E4F1C000;
                          }
                        }
                        sub_1907584C0(v641, [v214 count]);
                        [(CLTripSegmentLocation *)v618 courseAccuracy];
                        if ((*(void *)&v473 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v473 <= 0.0
                          || v473 >= 180.0)
                        {
                          double v475 = *((double *)&v681 + 1);
                          if (v214) {
                            goto LABEL_711;
                          }
LABEL_700:
                          if (qword_1E929F6D0 != -1) {
                            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                          }
                          v476 = qword_1E929F6D8;
                          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl(&dword_1906B8000, v476, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructCourseAccuracy,detected null inertialDataArray", buf, 2u);
                          }
                          if (sub_1906CB57C(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1E929F6D0 != -1) {
                              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                            }
                            LOWORD(v638) = 0;
                            v477 = (char *)_os_log_send_and_compose_impl();
                            sub_1906D4A28("Generic", 1, 0, 0, "void reconstructCourseAccuracy(NSMutableArray<CLTripSegmentInertialData *> *, const double &, std::vector<double> &)", "CoreLocation: %s\n", v477);
                            if (v477 != buf) {
                              free(v477);
                            }
                            uint64_t v114 = v614;
                            unint64_t v117 = 0x1E4F1C000;
                          }
                        }
                        else
                        {
                          [(CLTripSegmentLocation *)v618 courseAccuracy];
                          double v475 = v474;
                          if (!v214) {
                            goto LABEL_700;
                          }
LABEL_711:
                          if ([v214 count])
                          {
                            unint64_t v478 = 0;
                            do
                            {
                              objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v478), "deltaCourseVar_rad2");
                              double v480 = sqrt(v479);
                              double v475 = sqrt(v480 * 57.2957795 * (v480 * 57.2957795) + v475 * v475);
                              *((double *)v641[0] + v478++) = v475;
                            }
                            while ([v214 count] > v478);
                          }
                        }
                        memset(buf, 0, 24);
                        uint64_t v481 = v689;
                        if (*((void *)&v689 + 1) != (void)v689)
                        {
                          v482 = 0;
                          unint64_t v483 = 0;
                          double v484 = 0.0;
                          double v485 = 0.0;
                          do
                          {
                            double v486 = *(double *)(*(void *)v694 + 8 * v483) * *(double *)(v481 + 8 * v483);
                            __double2 v487 = __sincos_stret(*(double *)(v688 + 8 * v483) * 0.0174532925);
                            double v485 = v485 + v486 * v487.__sinval;
                            double v484 = v484 + v486 * v487.__cosval;
                            if ((unint64_t)v482 >= *(void *)&buf[16])
                            {
                              unint64_t v488 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v482[-*(void *)buf] >> 3);
                              unint64_t v489 = v488 + 1;
                              if (v488 + 1 > 0xAAAAAAAAAAAAAAALL) {
                                sub_190718FD4();
                              }
                              if (0x5555555555555556 * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3) > v489) {
                                unint64_t v489 = 0x5555555555555556 * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3);
                              }
                              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3) >= 0x555555555555555) {
                                unint64_t v490 = 0xAAAAAAAAAAAAAAALL;
                              }
                              else {
                                unint64_t v490 = v489;
                              }
                              if (v490) {
                                v491 = (char *)sub_1907180DC((uint64_t)&buf[16], v490);
                              }
                              else {
                                v491 = 0;
                              }
                              v492 = (double *)&v491[24 * v488];
                              double *v492 = v485;
                              v492[1] = v484;
                              v492[2] = 0.0;
                              v493 = *(double **)&buf[8];
                              v494 = *(double **)buf;
                              v495 = v492;
                              if (*(void *)&buf[8] != *(void *)buf)
                              {
                                do
                                {
                                  long long v496 = *(_OWORD *)(v493 - 3);
                                  *(v495 - 1) = *(v493 - 1);
                                  *(_OWORD *)(v495 - 3) = v496;
                                  v495 -= 3;
                                  v493 -= 3;
                                }
                                while (v493 != v494);
                                v493 = *(double **)buf;
                              }
                              v482 = (char *)(v492 + 3);
                              *(void *)uint64_t buf = v495;
                              *(void *)&uint8_t buf[8] = v492 + 3;
                              *(void *)&uint8_t buf[16] = &v491[24 * v490];
                              if (v493) {
                                operator delete(v493);
                              }
                            }
                            else
                            {
                              *(double *)v482 = v485;
                              *((double *)v482 + 1) = v484;
                              *((void *)v482 + 2) = 0;
                              v482 += 24;
                            }
                            *(void *)&uint8_t buf[8] = v482;
                            ++v483;
                            uint64_t v481 = v689;
                          }
                          while (v483 < (uint64_t)(*((void *)&v689 + 1) - v689) >> 3);
                        }
                        v638 = 0;
                        v639 = 0;
                        uint64_t v640 = 0;
                        sub_19074F950((uint64_t *)buf, v618, &v638);
                        sub_1907510B8(a2, a3, a7, v607, (double *)&v680);
                        v497 = (char *)v638;
                        if (v639 != v638)
                        {
                          uint64_t v498 = 0;
                          unint64_t v499 = 0;
                          do
                          {
                            v500 = (double *)&v497[v498];
                            double v501 = *v500;
                            double v502 = v500[1];
                            double v503 = v500[2];
                            double v625 = *(double *)(v689 + 8 * v499);
                            double v504 = fmod(*(long double *)(v688 + 8 * v499), 360.0);
                            if (v504 >= 0.0) {
                              double v505 = v504;
                            }
                            else {
                              double v505 = v504 + 360.0;
                            }
                            double v506 = *((double *)v648[0] + v499);
                            BOOL v507 = [(CLTripSegmentLocation *)v119 isLoiLocationType];
                            double v508 = 20.0;
                            if (v506 < 20.0
                              && v506 > 0.0
                              && (*(void *)&v506 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                            {
                              double v508 = v506;
                            }
                            if (v507) {
                              double v511 = -1.0;
                            }
                            else {
                              double v511 = v508;
                            }
                            double v512 = *((double *)v641[0] + v499);
                            if (v512 < 180.0
                              && v512 > 0.0
                              && (*((void *)v641[0] + v499) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                            {
                              double v515 = *((double *)v641[0] + v499);
                            }
                            else
                            {
                              double v515 = 180.0;
                            }
                            objc_msgSend((id)objc_msgSend((id)objc_msgSend(v214, "objectAtIndexedSubscript:", v499), "timestamp"), "timeIntervalSinceReferenceDate");
                            double v517 = v516;
                            v518 = [CLTripSegmentLocation alloc];
                            uint64_t v519 = [*(id *)(v117 + 2504) dateWithTimeIntervalSinceReferenceDate:v517];
                            [(CLTripSegmentLocation *)v618 horizontalAccuracy];
                            double v521 = v520;
                            [(CLTripSegmentLocation *)v618 altitudeAccuracy];
                            v523 = [(CLTripSegmentLocation *)v518 initWithTime:v519 latitude:[(CLTripSegmentLocation *)v618 locType] longitude:v501 horizontalAccuracy:v502 course:v521 courseAccuracy:v505 speed:v515 speedAccuracy:v625 altitude:v511 altitudeAccuracy:v503 locType:v522];
                            HIDWORD(v637) = [(CLTripSegmentLocation *)v607 locType];
                            LODWORD(v637) = [(CLTripSegmentLocation *)v119 locType];
                            sub_190750BD0(v523, (unsigned int *)&v637 + 1, (unsigned int *)&v637, 2);
                            [a7 addObject:v523];
                            sub_1906D5C70(v635, "reconstructed");
                            sub_1907501C0(a2, a3, v523, (uint64_t *)v635);
                            if (v636 < 0) {
                              operator delete(v635[0]);
                            }
                            *(double *)&long long v680 = v625;
                            double v524 = fmod(v505, 360.0);
                            if (v524 < 0.0) {
                              double v524 = v524 + 360.0;
                            }
                            *(double *)&long long v681 = v524;
                            *((double *)&v680 + 1) = v511;
                            *((double *)&v681 + 1) = v515;
                            char v684 = 1;
                            ++v499;
                            v497 = (char *)v638;
                            v498 += 24;
                          }
                          while (0xAAAAAAAAAAAAAAABLL * ((v639 - (unsigned char *)v638) >> 3) > v499);
                        }
                        sub_1906D5C70(v633, "input");
                        sub_1907501C0(a2, a3, v119, (uint64_t *)v633);
                        if (v634 < 0) {
                          operator delete(v633[0]);
                        }
                        if (sub_190750980(v119))
                        {
                          uint64_t v637 = 0;
                          sub_190750BD0(v119, (unsigned int *)&v637 + 1, (unsigned int *)&v637, 1);
                        }
                        else
                        {
                          sub_190750DC0(v119, (double *)&v680);
                          uint64_t v637 = 0;
                          sub_190750BD0(v119, (unsigned int *)&v637 + 1, (unsigned int *)&v637, 2);
                        }
                        uint64_t v525 = v685;
                        if ([obj count] == v525) {
                          sub_1907510B8(a2, a3, a7, v119, (double *)&v680);
                        }
                        if (v638)
                        {
                          v639 = v638;
                          operator delete(v638);
                        }
                        if (*(void *)buf)
                        {
                          *(void *)&uint8_t buf[8] = *(void *)buf;
                          operator delete(*(void **)buf);
                        }
                        if (v641[0])
                        {
                          v641[1] = v641[0];
                          operator delete(v641[0]);
                        }
                        if ((void)v688)
                        {
                          *((void *)&v688 + 1) = v688;
                          operator delete((void *)v688);
                        }
                        int v465 = 1;
                      }
                      if (v646)
                      {
                        v647 = (char *)v646;
                        operator delete(v646);
                      }
                      if (v648[0])
                      {
                        v648[1] = v648[0];
                        operator delete(v648[0]);
                      }
                      if ((void)v689)
                      {
                        *((void *)&v689 + 1) = v689;
                        operator delete((void *)v689);
                      }
                    }
                    if (v651)
                    {
                      v652 = (double *)v651;
                      operator delete(v651);
                    }
                    if (v654)
                    {
                      v655 = (double *)v654;
                      operator delete(v654);
                    }
                    if (v656)
                    {
                      v657 = (float64x2_t *)v656;
                      operator delete(v656);
                    }
                    if (v658[0])
                    {
                      v658[1] = v658[0];
                      operator delete(v658[0]);
                    }
                    if (*(void *)v691)
                    {
                      *(void *)&v691[8] = *(void *)v691;
                      operator delete(*(void **)v691);
                    }
                    if ((void)__p)
                    {
                      *((void *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                    operator delete(v606);
                    if (*(void *)v694)
                    {
                      *(void *)&v694[8] = *(void *)v694;
                      operator delete(*(void **)v694);
                    }
                    BOOL v115 = v465 != 0;
                    goto LABEL_800;
                  }
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                  }
                  uint64_t v255 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)uint64_t buf = 134349056;
                    *(double *)&uint8_t buf[4] = v621;
                    _os_log_impl(&dword_1906B8000, v255, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,possible erroneous location with large speed jump skipped,timestamp,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                    }
                    *(_DWORD *)v694 = 134349056;
                    *(double *)&v694[4] = v621;
                    __int32 v131 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
LABEL_319:
                    if (v131 != buf) {
                      free(v131);
                    }
                  }
                }
              }
            }
            else
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
              }
              double v198 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                uint64_t v200 = v199;
                [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                *(_DWORD *)uint64_t buf = 134349568;
                *(void *)&uint8_t buf[4] = v200;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = v201;
                *(_WORD *)&buf[22] = 2050;
                *(void *)&unsigned char buf[24] = 0x4059000000000000;
                _os_log_impl(&dword_1906B8000, v198, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,location with invalid or large horizontal uncertainty skipped,time,%{public}.3lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x20u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
                }
                [(NSDate *)[(CLTripSegmentLocation *)v119 timestamp] timeIntervalSinceReferenceDate];
                uint64_t v203 = v202;
                [(CLTripSegmentLocation *)v119 horizontalAccuracy];
                *(_DWORD *)v694 = 134349568;
                *(void *)&v694[4] = v203;
                *(_WORD *)&v694[12] = 2050;
                *(void *)&v694[14] = v204;
                *(_WORD *)&v694[22] = 2050;
                *(void *)&v694[24] = 0x4059000000000000;
                __int32 v131 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
                goto LABEL_319;
              }
            }
          }
          else
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
            }
            __int16 v132 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              [(CLTripSegmentLocation *)v119 latitude];
              uint64_t v134 = v133;
              [(CLTripSegmentLocation *)v119 longitude];
              *(_DWORD *)uint64_t buf = 134283777;
              *(void *)&uint8_t buf[4] = v134;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v135;
              _os_log_impl(&dword_1906B8000, v132, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,location with invalid coordinates skipped,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
              }
              [(CLTripSegmentLocation *)v119 latitude];
              uint64_t v137 = v136;
              [(CLTripSegmentLocation *)v119 longitude];
              *(_DWORD *)v694 = 134283777;
              *(void *)&v694[4] = v137;
              *(_WORD *)&v694[12] = 2049;
              *(void *)&v694[14] = v138;
              __int32 v131 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
              goto LABEL_319;
            }
          }
        }
      }
      else
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
        }
        __int16 v130 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v130, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null location object skipped", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
          }
          *(_WORD *)v694 = 0;
          __int32 v131 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v131);
          goto LABEL_319;
        }
      }
LABEL_801:
      ++v118;
    }
    while (v118 != v114);
    uint64_t v579 = [obj countByEnumeratingWithState:&v669 objects:v690 count:16];
    uint64_t v114 = v579;
  }
  while (v579);
LABEL_912:
  if (!a7)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    v587 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v587, OS_LOG_TYPE_ERROR, "CLTSP,II,invalidateLoiSpeedAccuracy,null reconstructedLocations", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_937;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    *(_WORD *)v694 = 0;
    v588 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void invalidateLoiSpeedAccuracy(NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v588);
LABEL_976:
    if (v588 != buf) {
      free(v588);
    }
    goto LABEL_937;
  }
  if ([a7 count])
  {
    if (objc_msgSend((id)objc_msgSend(a7, "firstObject"), "isLoiLocationType")
      && [a7 count])
    {
      unint64_t v580 = 0;
      do
      {
        if (!objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v580), "isLoiLocationType")) {
          break;
        }
        v581 = (void *)[a7 objectAtIndexedSubscript:v580];
        objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v580), "speed");
        objc_msgSend(v581, "updateSpeed:andSpeedAccuracy:");
        ++v580;
      }
      while (v580 < [a7 count]);
    }
    if (objc_msgSend((id)objc_msgSend(a7, "lastObject"), "isLoiLocationType"))
    {
      v582 = (void *)[a7 lastObject];
      objc_msgSend((id)objc_msgSend(a7, "lastObject"), "speed");
      objc_msgSend(v582, "updateSpeed:andSpeedAccuracy:");
      uint64_t v583 = [a7 count];
      if ((objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v583 - 2), "isOriginalLocationType") & 1) == 0)
      {
        uint64_t v584 = v583 - 3;
        do
        {
          v585 = (void *)[a7 objectAtIndexedSubscript:v584 + 1];
          objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v584 + 1), "speed");
          objc_msgSend(v585, "updateSpeed:andSpeedAccuracy:");
        }
        while (!objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v584--), "isOriginalLocationType"));
      }
    }
    goto LABEL_937;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
  }
  v589 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v589, OS_LOG_TYPE_DEBUG, "CLTSP,II,invalidateLoiSpeedAccuracy,empty reconstructedLocations", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    *(_WORD *)v694 = 0;
    v588 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void invalidateLoiSpeedAccuracy(NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v588);
    goto LABEL_976;
  }
LABEL_937:
  if (*a1 && (int)v677 >= 2)
  {
    *(_DWORD *)uint64_t buf = [a6 count];
    sub_19074F128((double **)&v673);
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
  }
  v590 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v590, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,inertial integrator completed", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005800);
    }
    *(_WORD *)v694 = 0;
    v591 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v591);
    if (v591 != buf) {
      free(v591);
    }
  }
  BOOL v46 = [a7 count] != 0;
  if ((void)v673)
  {
    *((void *)&v673 + 1) = v673;
    operator delete((void *)v673);
  }
  return v46;
}

void sub_190757F6C(_Unwind_Exception *a1)
{
  double v2 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1907583F8(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = fabs(*a1);
  if (v3 == INFINITY) {
    return 0;
  }
  double v4 = *a2;
  double v5 = fabs(*a2);
  if (v5 == INFINITY || v3 < 0.00003 && v5 < 0.00003) {
    return 0;
  }
  BOOL v7 = v2 <= 90.0;
  if (v2 < -90.0) {
    BOOL v7 = 0;
  }
  if (v4 > 180.0) {
    BOOL v7 = 0;
  }
  return v4 >= -180.0 && v7;
}

os_log_t sub_190758490()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

void *sub_1907584C0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_190758538(a1, a2);
    double v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19075851C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_190758538(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_190718FD4();
  }
  os_log_t result = (char *)sub_190732A30((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_19075857C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      sub_190718FD4();
    }
    uint64_t v4 = 16 * a2;
    double v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1907585F4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907590A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19075910C(uint64_t a1, uint64_t *a2)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  double v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [Weak handleMessage:&v5];
  if (v6) {
    sub_1906BFE48(v6);
  }
}

void sub_190759168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190759180(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));

  return [Weak handleInterruption];
}

void sub_19075BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075BF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a16) {
    sub_1906BFE48(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1906BFE48(a12);
  }
  sub_1906BFE48(v18);
  _Unwind_Resume(a1);
}

void sub_19075D850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075D9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075DB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075DC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075FA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19075FCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190760040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907602EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907605BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190760868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190760B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190760DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19076106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190761318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907615C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190761870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190761B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190761DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190762074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190762320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907625CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190762878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190762B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_190762BB8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1E929F688 = (uint64_t)result;
  return result;
}

uint64_t sub_190762BE8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  double v2 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 24);
    *(_DWORD *)uint64_t buf = 138477827;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,nil,nil", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRegulatoryConfigInternal::fetchRAEConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_190762DC0(void *a1)
{
  [a1 coordinate];
  double v3 = v2;
  [a1 coordinate];
  id v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F64660]), "initWithGEOCoordinate:", v3, v4);
  if (v5)
  {
    [a1 altitude];
    [v5 setAltitude:(int)v6];
    [a1 horizontalAccuracy];
    objc_msgSend(v5, "setHorizontalAccuracy:");
    [a1 verticalAccuracy];
    objc_msgSend(v5, "setVerticalAccuracy:");
    int v7 = [a1 referenceFrame];
    if (v7 == 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 2 * (v7 == 2);
    }
    [v5 setReferenceFrame:v8];
  }
  return v5;
}

void sub_190762E7C(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 && [a2 length])
  {
    sub_1906D5C70(__p, (char *)[a2 UTF8String]);
    unint64_t v8 = v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if (v8)
    {
      uint64_t v9 = sub_190769294(a1, (unsigned __int8 *)__p);
      if (v9)
      {
        uint64_t v10 = v9;
        if (qword_1E929F630 != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006180);
        }
        uint64_t v11 = qword_1E929F638;
        if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *((void *)v10 + 5);
          uint64_t v13 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
          *(_DWORD *)uint64_t buf = 138478083;
          uint64_t v31 = v12;
          __int16 v32 = 2113;
          uint64_t v33 = v13;
          _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,%{private}@,nil", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F630 != -1) {
            dispatch_once(&qword_1E929F630, &unk_1EE006180);
          }
          uint64_t v19 = *((void *)v10 + 5);
          uint64_t v20 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
          int v26 = 138478083;
          uint64_t v27 = v19;
          __int16 v28 = 2113;
          uint64_t v29 = v20;
          double v21 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        uint64_t v14 = v10 + 40;
      }
      else
      {
        if (qword_1E929F630 != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006180);
        }
        uint64_t v17 = qword_1E929F638;
        if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F630 != -1) {
            dispatch_once(&qword_1E929F630, &unk_1EE006180);
          }
          LOWORD(v26) = 0;
          int v23 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        a3 = 0;
        uint64_t v14 = a1 + 9;
      }
      (*(void (**)(uint64_t, void, void *, void))(a4 + 16))(a4, *v14, a3, 0);
    }
    else
    {
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006180);
      }
      double v16 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F630 != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006180);
        }
        LOWORD(v26) = 0;
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      (*(void (**)(uint64_t, void, void, void))(a4 + 16))(a4, a1[9], 0, 0);
    }
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    unint64_t v15 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006180);
      }
      LOWORD(__p[0]) = 0;
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    (*(void (**)(uint64_t, void, void, void))(a4 + 16))(a4, a1[9], 0, 0);
  }
}

void sub_1907634DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190763518(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  double v6 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
  {
    [a2 coordinate];
    uint64_t v8 = v7;
    [a2 coordinate];
    uint64_t v10 = v9;
    [a2 horizontalAccuracy];
    *(_DWORD *)uint64_t buf = 134284033;
    uint64_t v28 = v8;
    __int16 v29 = 2049;
    uint64_t v30 = v10;
    __int16 v31 = 2049;
    uint64_t v32 = v11;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "#clreg,#map,query,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    [a2 coordinate];
    uint64_t v15 = v14;
    [a2 coordinate];
    uint64_t v17 = v16;
    [a2 horizontalAccuracy];
    int v21 = 134284033;
    uint64_t v22 = v15;
    __int16 v23 = 2049;
    uint64_t v24 = v17;
    __int16 v25 = 2049;
    uint64_t v26 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  uint64_t v12 = *(void *)(a1 + 64);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_1907637A8;
  v20[3] = &unk_1E5697798;
  v20[4] = a3;
  return [MEMORY[0x1E4F645C8] fetchPossibleTerritoriesForLocation:a2 responseQueue:v12 responseBlock:v20];
}

uint64_t sub_1907637A8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    id v5 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v50 = a3;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,error,%@", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    int v44 = 138412290;
    uint64_t v45 = a3;
    goto LABEL_90;
  }
  if (!a2)
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    double v35 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v35, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,results,Nil", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    LOWORD(v44) = 0;
LABEL_90:
    double v36 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
    goto LABEL_7;
  }
  id v38 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v9 = [a2 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (!v9) {
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  uint64_t v37 = a1;
  uint64_t v39 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)v41;
  do
  {
    uint64_t v13 = 0;
    do
    {
      if (*(void *)v41 != v12) {
        objc_enumerationMutation(a2);
      }
      uint64_t v14 = *(void **)(*((void *)&v40 + 1) + 8 * v13);
      if (v14
        && (([*(id *)(*((void *)&v40 + 1) + 8 * v13) isDisputed] & 1) != 0
         || [v14 iso3166CountryCode]
         && objc_msgSend((id)objc_msgSend(v14, "iso3166CountryCode"), "length"))
        && (![v14 isDisputed]
         || [v14 disputedTerritoryName]
         && objc_msgSend((id)objc_msgSend(v14, "disputedTerritoryName"), "length")))
      {
        if ([v14 isDisputed])
        {
          if ([v14 interestedPartyIso3166CountryCodes]
            && objc_msgSend((id)objc_msgSend(v14, "interestedPartyIso3166CountryCodes"), "count"))
          {
            objc_msgSend(v38, "setByAddingObjectsFromArray:", objc_msgSend(v14, "interestedPartyIso3166CountryCodes"));
          }
          if (v11)
          {
            if (qword_1E929F630 != -1) {
              dispatch_once(&qword_1E929F630, &unk_1EE006180);
            }
            uint64_t v15 = qword_1E929F638;
            if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = [v11 UTF8String];
              uint64_t v17 = objc_msgSend((id)objc_msgSend(v14, "interestedPartyIso3166CountryCodes"), "componentsJoinedByString:", @",");
              *(_DWORD *)uint64_t buf = 136380931;
              uint64_t v50 = v16;
              __int16 v51 = 2112;
              uint64_t v52 = v17;
              _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,disputed,next,%{private}s,interested,%@", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F630 != -1) {
                goto LABEL_72;
              }
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v11 = (void *)[v14 disputedTerritoryName];
            if (qword_1E929F630 != -1) {
              dispatch_once(&qword_1E929F630, &unk_1EE006180);
            }
            __int16 v25 = qword_1E929F638;
            if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v26 = [v11 UTF8String];
              uint64_t v27 = objc_msgSend((id)objc_msgSend(v14, "interestedPartyIso3166CountryCodes"), "componentsJoinedByString:", @",");
              *(_DWORD *)uint64_t buf = 136380931;
              uint64_t v50 = v26;
              __int16 v51 = 2112;
              uint64_t v52 = v27;
              _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,disputed,first,%{private}s,interested,%@", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F630 == -1) {
                goto LABEL_33;
              }
LABEL_72:
              dispatch_once(&qword_1E929F630, &unk_1EE006180);
LABEL_33:
              uint64_t v18 = [v11 UTF8String];
              uint64_t v19 = objc_msgSend((id)objc_msgSend(v14, "interestedPartyIso3166CountryCodes"), "componentsJoinedByString:", @",");
              int v44 = 136380931;
              uint64_t v45 = v18;
              __int16 v46 = 2112;
              uint64_t v47 = v19;
LABEL_66:
              __int16 v31 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v31);
              if (v31 != (char *)buf) {
                free(v31);
              }
            }
          }
        }
        else
        {
          uint64_t v21 = [v14 iso3166CountryCode];
          if (v39)
          {
            [v38 addObject:v21];
            if (qword_1E929F630 != -1) {
              dispatch_once(&qword_1E929F630, &unk_1EE006180);
            }
            uint64_t v22 = qword_1E929F638;
            if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v23 = [v14 iso3166CountryCode];
              *(_DWORD *)uint64_t buf = 138477827;
              uint64_t v50 = v23;
              _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,nonDisputed,next,%{private}@", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F630 != -1) {
                dispatch_once(&qword_1E929F630, &unk_1EE006180);
              }
              uint64_t v24 = [v14 iso3166CountryCode];
              int v44 = 138477827;
              uint64_t v45 = v24;
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v28 = v11;
            if (qword_1E929F630 != -1) {
              dispatch_once(&qword_1E929F630, &unk_1EE006180);
            }
            __int16 v29 = qword_1E929F638;
            if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = [v14 iso3166CountryCode];
              *(_DWORD *)uint64_t buf = 138477827;
              uint64_t v50 = v30;
              _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,nonDisputed,first,%{private}@", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F630 != -1) {
                dispatch_once(&qword_1E929F630, &unk_1EE006180);
              }
              uint64_t v32 = [v14 iso3166CountryCode];
              int v44 = 138477827;
              uint64_t v45 = v32;
              uint64_t v33 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v33);
              if (v33 != (char *)buf) {
                free(v33);
              }
            }
            uint64_t v39 = v21;
            uint64_t v11 = v28;
          }
        }
      }
      else
      {
        if (qword_1E929F630 != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006180);
        }
        uint64_t v20 = qword_1E929F638;
        if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,#warning,invalidResultEntry,ignoring", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F630 != -1) {
            dispatch_once(&qword_1E929F630, &unk_1EE006180);
          }
          LOWORD(v44) = 0;
          goto LABEL_66;
        }
      }
      ++v13;
    }
    while (v10 != v13);
    uint64_t v34 = [a2 countByEnumeratingWithState:&v40 objects:v48 count:16];
    uint64_t v10 = v34;
  }
  while (v34);
  if (v11)
  {
    double v6 = *(uint64_t (**)(void))(*(void *)(v37 + 32) + 16);
    return v6();
  }
  a1 = v37;
  if (v39)
  {
    double v6 = *(uint64_t (**)(void))(*(void *)(v37 + 32) + 16);
    return v6();
  }
LABEL_7:
  double v6 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v6();
}

void sub_190764270(uint64_t a1)
{
}

void sub_190764284(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  double v6 = *(void **)(a1 + 40);
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v7 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    uint64_t v10 = a2;
    __int16 v11 = 2113;
    uint64_t v12 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbLocation,iso,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_190762E7C(v6, a2, a3, *(void *)(a1 + 32));
}

void sub_19076449C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 48);
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v7 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    uint64_t v21 = a2;
    __int16 v22 = 2113;
    uint64_t v23 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbExtendedLocation,iso,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    int v16 = 138478083;
    uint64_t v17 = a2;
    __int16 v18 = 2113;
    uint64_t v19 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (a2 && [a2 length])
  {
    if (a3 && [a3 count])
    {
      [a3 addObject:a2];
      id v8 = (id)[a3 copy];
      [*(id *)(a1 + 32) setHorizontalAccuracy:(double)*(int *)(a1 + 56)];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = sub_190764770;
      v15[3] = &unk_1E56977E8;
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      void v15[4] = v8;
      void v15[5] = v10;
      v15[6] = v6;
      sub_190763518(v6, v9, (uint64_t)v15);
      return;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)v6;
    uint64_t v13 = a2;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)v6;
    uint64_t v13 = 0;
  }
  sub_190762E7C(v12, v13, 0, v11);
}

void sub_190764770(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 48);
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v7 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "allObjects"), "componentsJoinedByString:", @",");
    *(_DWORD *)uint64_t buf = 138478339;
    uint64_t v15 = a2;
    __int16 v16 = 2113;
    uint64_t v17 = v8;
    __int16 v18 = 2113;
    uint64_t v19 = v9;
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbWrapper,isoActual,%{private}@,neighborsWithinLocation,%{private}@,extendedNeighbors,%{private}@", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    objc_msgSend((id)objc_msgSend(a3, "allObjects"), "componentsJoinedByString:", @",");
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "allObjects"), "componentsJoinedByString:", @",");
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11 && [v11 count]) {
    [v10 unionSet:*(void *)(a1 + 32)];
  }
  if (a3 && [a3 count]) {
    [v10 unionSet:a3];
  }
  if (v10)
  {
    uint64_t v12 = [v10 count];
    if (a2)
    {
      if (v12) {
        [v10 removeObject:a2];
      }
    }
  }
  sub_190762E7C(v6, a2, v10, *(void *)(a1 + 40));
}

void sub_190764A44(uint64_t a1)
{
}

void sub_190764A58(uint64_t a1)
{
}

uint64_t sub_190764A6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_190764A8C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  double v2 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 138477827;
    uint64_t v7 = v3;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,nil,nil", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendRaeInfoAsync(NSDictionary *, CLRegulatoryInfoCallback)_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [objc_alloc_init(MEMORY[0x1E4F1CA60]) setObject:@"kCLRegRegionTypeRae" forKey:@"kCLRegRegionTypeKey"];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_190764C80(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v8 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2113;
    *(void *)&unsigned char buf[14] = a3;
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "sendIsoInfoSync,region,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    int v20 = 138478083;
    uint64_t v21 = a2;
    __int16 v22 = 2113;
    uint64_t v23 = a3;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoInfoSync(CLRegulatoryRegion, CLRegulatoryRegionMutableList, CLRegulatoryInfoCallback)", "CoreLocation: %s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  uint64_t v15 = sub_190764FC0;
  __int16 v16 = &unk_1E5697838;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && [a2 objectForKey:@"kCLRegNameKey"])
  {
    sub_1906D5C70(buf, (char *)objc_msgSend((id)objc_msgSend(a2, "objectForKey:", @"kCLRegNameKey"), "UTF8String"));
    uint64_t v9 = v25;
    if ((v25 & 0x80u) != 0) {
      uint64_t v9 = *(void *)&buf[8];
    }
    if (v9)
    {
      id v10 = sub_190769294(a1, buf);
      uint64_t v11 = a1 + 9;
      if (v10)
      {
        uint64_t v11 = v10 + 40;
        uint64_t v12 = @"kCLRegRegionTypeGeo";
      }
      else
      {
        uint64_t v12 = @"kCLRegRegionTypeDefault";
      }
      ((void (*)(void *, __CFString *, void))v15)(v14, v12, *v11);
    }
    else
    {
      ((void (*)(void *, __CFString *, void))v15)(v14, @"kCLRegRegionTypeDefault", a1[9]);
    }
    if ((char)v25 < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    ((void (*)(void *, __CFString *, void))v15)(v14, @"kCLRegRegionTypeDefault", a1[9]);
  }
}

void sub_190764F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190764FC0(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (a2 && (id v5 = v4, [a2 length]))
  {
    [v5 setObject:a2 forKey:@"kCLRegRegionTypeKey"];
    if (*(void *)(a1 + 32))
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([*(id *)(a1 + 32) objectForKey:@"kCLRegNameKey"]) {
          [v5 setObject:*(void *)(a1 + 32) forKey:@"kCLRegGeoRegionMatchedKey"];
        }
      }
    }
    uint64_t v6 = *(void **)(a1 + 40);
    if (v6 && [v6 count]) {
      [v5 setObject:*(void *)(a1 + 40) forKey:@"kCLRegNeighborsKey"];
    }
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v7();
  }
  else
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    uint64_t v8 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "#clreg,invalidRegionType", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006180);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLRegulatoryConfigInternal::sendIsoInfoSync(CLRegulatoryRegion, CLRegulatoryRegionMutableList, CLRegulatoryInfoCallback)_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_19076525C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v6 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
  {
    [a2 coordinate];
    uint64_t v8 = v7;
    [a2 coordinate];
    uint64_t v10 = v9;
    [a2 horizontalAccuracy];
    *(_DWORD *)uint64_t buf = 134284033;
    uint64_t v28 = v8;
    __int16 v29 = 2049;
    uint64_t v30 = v10;
    __int16 v31 = 2049;
    uint64_t v32 = v11;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "#clreg,#map,query,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    [a2 coordinate];
    uint64_t v15 = v14;
    [a2 coordinate];
    uint64_t v17 = v16;
    [a2 horizontalAccuracy];
    int v21 = 134284033;
    uint64_t v22 = v15;
    __int16 v23 = 2049;
    uint64_t v24 = v17;
    __int16 v25 = 2049;
    uint64_t v26 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  uint64_t v12 = *(void *)(a1 + 64);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = sub_1907654EC;
  v20[3] = &unk_1E5697860;
  v20[4] = a2;
  void v20[5] = a3;
  return [MEMORY[0x1E4F645C8] fetchPossibleTerritoriesForLocation:a2 responseQueue:v12 responseBlock:v20];
}

uint64_t sub_1907654EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    id v5 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v51 = a3;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,error,%@", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    int v42 = 138412290;
    uint64_t v43 = a3;
    goto LABEL_59;
  }
  if (!a2)
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    uint64_t v28 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,results,Nil", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    LOWORD(v42) = 0;
LABEL_59:
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
    goto LABEL_7;
  }
  if (qword_1E929F630 != -1) {
    dispatch_once(&qword_1E929F630, &unk_1EE006180);
  }
  uint64_t v9 = qword_1E929F638;
  if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
  {
    [*(id *)(a1 + 32) coordinate];
    uint64_t v11 = v10;
    [*(id *)(a1 + 32) coordinate];
    uint64_t v13 = v12;
    [*(id *)(a1 + 32) horizontalAccuracy];
    *(_DWORD *)uint64_t buf = 134284291;
    uint64_t v51 = v11;
    __int16 v52 = 2049;
    uint64_t v53 = v13;
    __int16 v54 = 2049;
    uint64_t v55 = v14;
    __int16 v56 = 2113;
    uint64_t v57 = a2;
    _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f,results,%{private}@", buf, 0x2Au);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    [*(id *)(a1 + 32) coordinate];
    uint64_t v31 = v30;
    [*(id *)(a1 + 32) coordinate];
    uint64_t v33 = v32;
    [*(id *)(a1 + 32) horizontalAccuracy];
    int v42 = 134284291;
    uint64_t v43 = v31;
    __int16 v44 = 2049;
    uint64_t v45 = v33;
    __int16 v46 = 2049;
    uint64_t v47 = v34;
    __int16 v48 = 2113;
    BOOL v49 = a2;
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  id v15 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v16 = [a2 countByEnumeratingWithState:&v37 objects:v41 count:16];
  uint64_t v17 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  if (!v16) {
    goto LABEL_7;
  }
  uint64_t v18 = v16;
  uint64_t v36 = a1;
  id v19 = 0;
  char v20 = 0;
  uint64_t v21 = *(void *)v38;
  do
  {
    uint64_t v22 = 0;
    do
    {
      if (*(void *)v38 != v21) {
        objc_enumerationMutation(a2);
      }
      __int16 v23 = *(void **)(*((void *)&v37 + 1) + 8 * v22);
      if (v23
        && (([*(id *)(*((void *)&v37 + 1) + 8 * v22) isDisputed] & 1) != 0
         || [v23 iso3166CountryCode]
         && objc_msgSend((id)objc_msgSend(v23, "iso3166CountryCode"), "length"))
        && (![v23 isDisputed]
         || [v23 disputedTerritoryName]
         && objc_msgSend((id)objc_msgSend(v23, "disputedTerritoryName"), "length")))
      {
        id v24 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v24 setObject:v23 forKey:@"kCLGEOTerritoryInfoKey"];
        if ([v23 isDisputed])
        {
          [v24 setObject:objc_msgSend(NSString, "stringWithFormat:", @"%llX", objc_msgSend(v23, "uniqueIdentifier")), @"kCLRegNameKey" forKey];
          if (!((v19 == 0) | v20 & 1))
          {
            [v15 addObject:v19];
            char v20 = 1;
            id v19 = v24;
          }
          uint64_t v17 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
          if (v19)
          {
LABEL_31:
            [v15 addObject:v24];
            goto LABEL_37;
          }
        }
        else
        {
          objc_msgSend(v24, "setObject:forKey:", objc_msgSend(v23, "iso3166CountryCode"), @"kCLRegNameKey");
          if (v19) {
            goto LABEL_31;
          }
        }
        char v20 = [v23 isDisputed];
        id v19 = v24;
      }
      else
      {
        if (*((void *)v17 + 198) != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006180);
        }
        __int16 v25 = qword_1E929F638;
        if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,#warning,invalidResultEntry,ignoring", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (*((void *)v17 + 198) != -1) {
            dispatch_once(&qword_1E929F630, &unk_1EE006180);
          }
          LOWORD(v42) = 0;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
LABEL_37:
      ++v22;
    }
    while (v18 != v22);
    uint64_t v27 = [a2 countByEnumeratingWithState:&v37 objects:v41 count:16];
    uint64_t v18 = v27;
  }
  while (v27);
  a1 = v36;
  if (v19)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)(v36 + 40) + 16);
    return v6();
  }
LABEL_7:
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v6();
}

void sub_190765C9C(void *a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (uint64_t v6 = [a2 objectForKey:@"kCLRegNameKey"], a3)
    && v6
    && [a3 length])
  {
    if ((objc_msgSend(a3, "isEqual:", objc_msgSend(a2, "objectForKey:", @"kCLRegNameKey")) & 1) == 0)
    {
      [a1 addObject:a2];
    }
  }
  else
  {
    if (qword_1E929F630 != -1) {
      dispatch_once(&qword_1E929F630, &unk_1EE006180);
    }
    uint64_t v7 = qword_1E929F638;
    if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138478083;
      uint64_t v10 = a2;
      __int16 v11 = 2113;
      uint64_t v12 = a3;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "Invalid neighbor or excludeRegionName,%{private}@,%{private}@", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006180);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLRegulatoryConfigInternal::appendNeighbor(CLRegulatoryRegionMutableList, CLRegulatoryRegion, NSString *)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_190765F14(void *a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(a2);
        }
        sub_190765C9C(a1, *(void **)(*((void *)&v10 + 1) + 8 * v9++), a3);
      }
      while (v7 != v9);
      uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_190766010(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 48);
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (uint64_t v7 = [a2 objectForKey:@"kCLRegNameKey"], a3)
    && v7
    && [a3 count])
  {
    [*(id *)(a1 + 32) setHorizontalAccuracy:(double)*(int *)(a1 + 56)];
    id v8 = a2;
    id v9 = a3;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_190766138;
    void v12[3] = &unk_1E5697888;
    void v12[4] = a2;
    void v12[5] = a3;
    long long v10 = *(void **)(a1 + 32);
    v12[6] = *(void *)(a1 + 40);
    v12[7] = v6;
    sub_19076525C((uint64_t)v6, v10, (uint64_t)v12);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    sub_190764C80(v6, a2, (uint64_t)a3, v11);
  }
}

void sub_190766138(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 56);
  if (!a2
    || (uint64_t v6 = a2, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || ![v6 objectForKey:@"kCLRegNameKey"])
  {
    uint64_t v6 = *(void **)(a1 + 32);
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id v8 = (void *)[v6 objectForKey:@"kCLRegNameKey"];
  sub_190765C9C(v7, *(void **)(a1 + 32), v8);
  sub_190765F14(v7, *(void **)(a1 + 40), v8);
  sub_190765F14(v7, a3, v8);
  sub_190764C80(v5, v6, (uint64_t)v7, *(void *)(a1 + 48));

  id v9 = *(void **)(a1 + 40);
}

void sub_190766234(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_190766318(_Unwind_Exception *a1)
{
  id v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = sub_190768D38(v1);
  MEMORY[0x192FCEAD0](v5, 0x10A0C400EC8F4ABLL);
  _Unwind_Resume(a1);
}

void sub_190766D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_190768D08()
{
  os_log_t result = os_log_create("com.apple.locationd.Utility", "Utility");
  qword_1E929F638 = (uint64_t)result;
  return result;
}

uint64_t sub_190768D38(uint64_t a1)
{
  double v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      double v2 = v3;
    }
    while (v3);
  }
  id v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_190768DA0(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    id v4 = (uint64_t *)a1;
  }
  else {
    id v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v44 + v46 + v47 + v2;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v47 + v2 + v43 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v45 + v48 + v56;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      uint64_t v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v69 + v67 + v78 + v68;
        uint64_t v60 = __ROR8__(v69 + v67 + v78, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      id v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      uint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * ((v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)) ^ v40);
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_1907691F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unsigned __int8 *sub_190769294(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_190768DA0((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (unint64_t i = *v10; i; unint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (sub_1907691F0(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t *sub_190769390(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *unint64_t result = a2;
  if (v2)
  {

    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    while (v3 != v4)
    {

      v3 += 32;
    }
    for (uint64_t i = v2 + 16; ; *(id *)(i + 40))
    {
      uint64_t i = *(void *)i;
      if (!i) {
        break;
      }
    }
    dispatch_release(*(dispatch_object_t *)(v2 + 64));
    unint64_t v6 = *(void **)(v2 + 40);
    if (v6)
    {
      *(void *)(v2 + 48) = v6;
      operator delete(v6);
    }
    sub_190768D38(v2);
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

void sub_190769458(NSObject *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1[325].isa)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    int v1 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_INFO, "CLMM,Vehicle,Maps API already initialized", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 == (char *)buf) {
      return;
    }
LABEL_32:
    free(v2);
    return;
  }
  uint64_t v3 = a1;
  a1[326].isa = (Class)dispatch_queue_create("cl_geo_access_map_feature_geometry_queue", 0);
  uint64_t v4 = (objc_class *)[objc_alloc(MEMORY[0x1E4F64690]) initWithQueue:v3[326].isa];
  v3[325].isa = v4;
  if (v4)
  {
    [(objc_class *)v4 setAllowNetworkTileLoad:1];
    [(objc_class *)v3[325].isa setFlipNegativeTravelDirectionRoads:1];
    [(objc_class *)v3[325].isa setVisitDoubleTravelDirectionRoadsTwice:1];
    [(objc_class *)v3[325].isa setAllowStaleData:1];
    [(objc_class *)v3[325].isa setAllowOfflineData:1];
    int8x8_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (qword_1E929F6C0 == -1) {
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v8 = off_1E929F6C8;
    int8x8_t v5 = (int *)"assert";
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
    }
    unint64_t v9 = off_1E929F6C8;
    if (os_signpost_enabled((os_log_t)off_1E929F6C8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fGEOMapFeatureAccess != nullptr";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
    }
    uint64_t v3 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v11 = 46;
    unint64_t v12 = "initializeMapsAPI";
    int v10 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometry.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
LABEL_13:
  unint64_t v6 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = [(objc_class *)v3[325].isa allowStaleData];
    *(_DWORD *)uint64_t buf = 67240192;
    int v14 = v7;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "CLMM,Vehicle,using maps API,stale data,%{public}d", buf, 8u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((void *)v5 + 216) != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    [(objc_class *)v3[325].isa allowStaleData];
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      goto LABEL_32;
    }
  }
}

id sub_1907699AC(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v9 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v70 = v10;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v46 = *(void *)(a1 + 8);
    int v66 = 134349056;
    uint64_t v67 = v46;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v43);
    goto LABEL_65;
  }
  if (*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  if (!*(void *)(a1 + 2600) || *(void *)a2 == 0) {
    return 0;
  }
  int8x8_t v5 = (void *)MEMORY[0x192FCF260]();
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  unint64_t v6 = *(uint64_t **)(*(void *)a2 + 136);
  if (*(uint64_t **)(*(void *)a2 + 144) == v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
  }
  uint64_t v56 = v7;
  uint64_t v57 = v8;
  BOOL v13 = (void *)[MEMORY[0x1E4F1CA48] array];
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 3221225472;
  v54[2] = sub_19076A2F8;
  void v54[3] = &unk_1E5697900;
  v54[4] = v13;
  unint64_t v55 = v54;
  int v14 = operator new(0x20uLL);
  *int v14 = &unk_1EE005170;
  v14[1] = a1;
  void v14[2] = &v56;
  void v14[3] = &v55;
  uint64_t v68 = v14;
  ++*(_DWORD *)(a1 + 36);
  sub_190770D3C((uint64_t)v65, (uint64_t)&v66);
  BOOL v15 = sub_19076A36C((uint64_t)v65);
  sub_190770CB8(v65);
  if (v15)
  {
    context = v5;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v16 = [v13 countByEnumeratingWithState:&v50 objects:v64 count:16];
    if (v16)
    {
      __int16 v17 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      uint64_t v18 = *(void *)v51;
      while (2)
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v51 != v18) {
            objc_enumerationMutation(v13);
          }
          uint64_t v20 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          if ([v20 roadID] == **(void **)a2)
          {
            if ((unint64_t)[v20 coordinateCount] > 1)
            {
              uint64_t v29 = [v20 coordinateCount];
              uint64_t v30 = *(double **)(*(void *)a2 + 136);
              if (*(double **)(*(void *)a2 + 144) == v30)
              {
                double v32 = 0.0;
                double v31 = 0.0;
              }
              else
              {
                double v32 = *v30;
                double v31 = v30[1];
              }
              double v33 = *(double *)[v20 coordinates];
              uint64_t v34 = [v20 coordinates];
              if (vabdd_f64(v32, v33) < 0.00000001 && vabdd_f64(v31, *(double *)(v34 + 8)) < 0.00000001)
              {
                uint64_t v35 = *(void *)(*(void *)a2 + 144);
                if (v35 == *(void *)(*(void *)a2 + 136))
                {
                  double v37 = 0.0;
                  double v36 = 0.0;
                }
                else
                {
                  double v37 = *(double *)(v35 - 16);
                  double v36 = *(double *)(v35 - 8);
                }
                double v38 = *(double *)([v20 coordinates] + 16 * (v29 - 1));
                uint64_t v39 = [v20 coordinates];
                if (vabdd_f64(v37, v38) < 0.00000001
                  && vabdd_f64(v36, *(double *)(v39 + 16 * (v29 - 1) + 8)) < 0.00000001)
                {
                  id v11 = v20;
                  int8x8_t v5 = context;
                  goto LABEL_61;
                }
              }
            }
            else
            {
              if (*((void *)v17 + 216) != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
              }
              uint64_t v21 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v22 = *(void *)(a1 + 8);
                uint64_t v23 = [v20 roadID];
                uint64_t v24 = [v20 coordinateCount];
                *(_DWORD *)uint64_t buf = 134349569;
                uint64_t v70 = v22;
                __int16 v71 = 2049;
                uint64_t v72 = v23;
                __int16 v73 = 2050;
                uint64_t v74 = v24;
                _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", buf, 0x20u);
                __int16 v17 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (*((void *)v17 + 216) != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
                }
                uint64_t v25 = *(void *)(a1 + 8);
                uint64_t v26 = [v20 roadID];
                uint64_t v27 = [v20 coordinateCount];
                int v58 = 134349569;
                uint64_t v59 = v25;
                __int16 v60 = 2049;
                uint64_t v61 = v26;
                __int16 v62 = 2050;
                uint64_t v63 = v27;
                uint64_t v28 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v28);
                __int16 v17 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
                if (v28 != (char *)buf) {
                  free(v28);
                }
              }
            }
          }
        }
        uint64_t v16 = [v13 countByEnumeratingWithState:&v50 objects:v64 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
    sub_190770CB8(&v66);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v40 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v70 = v41;
      _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v42 = *(void *)(a1 + 8);
    int v66 = 134349056;
    uint64_t v67 = v42;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v43);
LABEL_65:
    if (v43 != (char *)buf) {
      free(v43);
    }
    return 0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  uint64_t v44 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v45 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v70 = v45;
    _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v47 = *(void *)(a1 + 8);
    int v58 = 134349056;
    uint64_t v59 = v47;
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  id v11 = 0;
LABEL_61:
  sub_190770CB8(&v66);
  return v11;
}

void sub_19076A2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
}

uint64_t sub_19076A2F8(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || (uint64_t result = [a2 travelDirection], result != 6)
    && (uint64_t result = [a2 travelDirection], result != 255))
  {
    int8x8_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

BOOL sub_19076A36C(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x3052000000;
  uint64_t v22 = sub_1907709E4;
  uint64_t v23 = sub_1907709F4;
  dispatch_group_t v24 = 0;
  dispatch_group_t v24 = dispatch_group_create();
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = sub_1906DB2D8;
  void v14[3] = &unk_1E56979A0;
  v14[4] = &v25;
  v14[5] = &v19;
  void v14[6] = &v15;
  dispatch_group_enter((dispatch_group_t)v20[5]);
  uint64_t v2 = (void *)sub_190770A00(a1, (uint64_t)v14);
  uint64_t v3 = v20[5];
  dispatch_time_t v4 = dispatch_time(0, 100000000);
  intptr_t v5 = dispatch_group_wait(v3, v4);
  v16[3] = v5;
  if (v5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = v16[3];
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v32 = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v11 = v16[3];
      int v29 = 134349056;
      uint64_t v30 = v11;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    [v2 cancel];
  }
  else if (v20[5])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v8 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      LOWORD(v29) = 0;
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }

    void v20[5] = 0;
  }
  if (v16[3]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *((unsigned char *)v26 + 24) == 0;
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
  return v9;
}

void sub_19076A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_19076A818(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4 = a1;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  double v113 = a4;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v18 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(v4 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v89 = *(void *)(v4 + 8);
      *(_DWORD *)BOOL v115 = 134349056;
      *(void *)&v115[4] = v89;
      double v90 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v90);
      if (v90 != buf) {
        free(v90);
      }
    }
    return 0;
  }
  uint64_t v7 = (void *)MEMORY[0x192FCF260]();
  long long v112 = *(_OWORD *)(a3 + 56);
  double v8 = round(a4);
  unsigned int v9 = (v8 + v8);
  if (v9 >= 0x1F4) {
    unint64_t v10 = 500;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  sub_19076BB94((uint64_t *)&v109, v10);
  uint64_t v101 = v4;
  if (*(unsigned char *)(v4 + 33))
  {
    if (!*(void *)(v4 + 16))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      unint64_t v81 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v82 = *(void *)(v4 + 8);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v82;
        _os_log_impl(&dword_1906B8000, v81, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_126;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v83 = *(void *)(v4 + 8);
      *(_DWORD *)BOOL v115 = 134349056;
      *(void *)&v115[4] = v83;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v17);
      goto LABEL_112;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v11 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336) - *(void *)(*(void *)(v4 + 16) + 328)) >> 4;
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v13;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v91 = *(void *)(v4 + 8);
      uint64_t v92 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336) - *(void *)(*(void *)(v4 + 16) + 328)) >> 4;
      *(_DWORD *)BOOL v115 = 134349312;
      *(void *)&v115[4] = v91;
      *(_WORD *)&v115[12] = 2050;
      *(void *)&v115[14] = v92;
      double v93 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v93);
      if (v93 != buf) {
        free(v93);
      }
    }
    if ((sub_190741DC4(*(void *)(v4 + 16), (uint64_t *)&v109, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), v113) & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      int v14 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(v4 + 8);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_126;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v16 = *(void *)(v4 + 8);
      *(_DWORD *)BOOL v115 = 134349056;
      *(void *)&v115[4] = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v17);
LABEL_112:
      if (v17 != buf) {
        free(v17);
      }
LABEL_126:
      uint64_t v20 = 0;
      goto LABEL_127;
    }
  }
  else
  {
    uint64_t v21 = (void *)[MEMORY[0x1E4F1CA48] array];
    v108[0] = MEMORY[0x1E4F143A8];
    v108[1] = 3221225472;
    v108[2] = sub_19076BC18;
    v108[3] = &unk_1E5697900;
    v108[4] = v21;
    *(void *)&long long v146 = v108;
    uint64_t v22 = operator new(0x28uLL);
    *uint64_t v22 = &unk_1EE005118;
    v22[1] = v4;
    v22[2] = &v112;
    v22[3] = &v113;
    void v22[4] = &v146;
    *(void *)&v115[24] = v22;
    ++*(_DWORD *)(v4 + 36);
    sub_190770D3C((uint64_t)v145, (uint64_t)v115);
    BOOL v23 = sub_19076A36C((uint64_t)v145);
    sub_190770CB8(v145);
    if (!v23)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      unint64_t v84 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v85 = *(void *)(v4 + 8);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v85;
        _os_log_impl(&dword_1906B8000, v84, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (roadsWithinDistance)", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        unint64_t v94 = *(void *)(v4 + 8);
        v138.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)v138.n128_u64 + 4) = v94;
        double v95 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v95);
        if (v95 != buf) {
          free(v95);
        }
      }
      sub_190770CB8(v115);
      goto LABEL_126;
    }
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v24 = [v21 countByEnumeratingWithState:&v104 objects:v144 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v105;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v105 != v25) {
            objc_enumerationMutation(v21);
          }
          double v27 = sub_190746754(*(void **)(*((void *)&v104 + 1) + 8 * i), 1, (std::string **)buf);
          if (*(void *)buf) {
            sub_1907458E0((uint64_t *)&v109, (long long *)buf);
          }
          if (*(void *)&buf[8]) {
            sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        uint64_t v24 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v104, v144, 16, v27);
      }
      while (v24);
    }
    sub_190770CB8(v115);
  }
  char v28 = v109;
  uint64_t v20 = 1;
  uint64_t v102 = v110;
  if (v109 == v110) {
    goto LABEL_127;
  }
  long long v98 = v7;
  int v29 = (double *)(v4 + 56);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v99 = _Q0;
  while (2)
  {
    if (!*v28)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v7 = v98;
      int v86 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = *(void *)(v4 + 8);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v87;
        _os_log_impl(&dword_1906B8000, v86, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v96 = *(void *)(v101 + 8);
        *(_DWORD *)BOOL v115 = 134349056;
        *(void *)&v115[4] = v96;
        int v97 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v97);
        if (v97 != buf) {
          free(v97);
        }
        uint64_t v7 = v98;
      }
      sub_190770ADC(a2);
      goto LABEL_126;
    }
    if (!sub_190824A00(*v28)) {
      goto LABEL_93;
    }
    __n128 v138 = 0uLL;
    float v139 = 0.0;
    __int16 v140 = 1;
    float v141 = 0.0;
    unint64_t v143 = 0;
    long long v142 = 0uLL;
    *(void *)BOOL v115 = 0;
    *(void *)&v115[8] = 0;
    *(_OWORD *)&v115[16] = v99;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v118 = 0xBFF0000000000000;
    uint64_t v130 = 0;
    int v131 = 0;
    memset(&v128[32], 0, 32);
    __int16 v129 = 0;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    memset(v135, 0, 27);
    memset(&v135[32], 0, 48);
    long long v127 = 0u;
    memset(v128, 0, 30);
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    unint64_t v137 = 0xBFF0000000000000;
    uint64_t v136 = 0;
    uint64_t v35 = *v28;
    double v36 = *(double **)(*v28 + 136);
    unint64_t v37 = *(void *)(*v28 + 144) - (void)v36;
    unint64_t v103 = 0xBFF0000000000000;
    if ((int)(v37 >> 4) <= 1)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v4 = v101;
      uint64_t v63 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v63, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        LOWORD(v146) = 0;
        unint64_t v78 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v78);
        if (v78 != buf) {
          free(v78);
        }
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v64 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = *(void *)(v101 + 8);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v65;
        _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v66 = *(void *)(v101 + 8);
        LODWORD(v146) = 134349056;
        *(void *)((char *)&v146 + 4) = v66;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      goto LABEL_87;
    }
    long long v38 = v112;
    double v39 = *v36;
    double v40 = v36[1];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)uint64_t buf = 0;
    double v41 = 0.0;
    sub_1906DA778(v29, (double *)buf, (double *)&buf[8], (double *)&v146, *(double *)&v112, *((double *)&v112 + 1), 0.0, v39, v40, 0.0);
    uint64_t v42 = 0;
    double v43 = *(double *)buf;
    double v44 = *(double *)&buf[8];
    uint64_t v45 = (v37 >> 4) - 1;
    double v46 = -1.0;
    double v47 = 0.0;
    do
    {
      double v48 = v43;
      double v49 = v44;
      uint64_t v50 = *(void *)(v35 + 136) + v42;
      double v51 = *(double *)(v50 + 16);
      double v52 = *(double *)(v50 + 24);
      long long v146 = 0uLL;
      sub_1906DA778(v29, (double *)&v146, (double *)&v146 + 1, &v114, *(double *)&v38, *((double *)&v38 + 1), 0.0, v51, v52, 0.0);
      double v44 = *((double *)&v146 + 1);
      double v43 = *(double *)&v146;
      double v53 = (v48 - *(double *)&v146) * (v48 - *(double *)&v146)
          + (v49 - *((double *)&v146 + 1)) * (v49 - *((double *)&v146 + 1));
      double v54 = 0.0;
      double v55 = 0.0 - v48;
      if (v53 < 0.001)
      {
        double v56 = v55 * v55;
        double v57 = 0.0 - v49;
LABEL_48:
        double v58 = v56 + v57 * v57;
        goto LABEL_53;
      }
      double v54 = ((0.0 - v49) * (*((double *)&v146 + 1) - v49) + v55 * (*(double *)&v146 - v48)) / v53;
      if (v54 >= 0.0)
      {
        if (v54 <= 1.0)
        {
          double v56 = (0.0 - (v48 + (*(double *)&v146 - v48) * v54)) * (0.0 - (v48 + (*(double *)&v146 - v48) * v54));
          double v57 = 0.0 - (v49 + (*((double *)&v146 + 1) - v49) * v54);
          goto LABEL_48;
        }
        double v58 = (0.0 - *(double *)&v146) * (0.0 - *(double *)&v146)
            + (0.0 - *((double *)&v146 + 1)) * (0.0 - *((double *)&v146 + 1));
        double v54 = 1.0;
      }
      else
      {
        double v58 = v55 * v55 + (0.0 - v49) * (0.0 - v49);
        double v54 = 0.0;
      }
LABEL_53:
      double v59 = sqrt(v53);
      double v60 = sqrt(v58);
      BOOL v61 = v46 < 0.0;
      if (v60 < v46) {
        BOOL v61 = 1;
      }
      double v62 = v47 + v59 * v54;
      if (v61)
      {
        double v46 = v60;
        double v41 = v62;
      }
      double v47 = v47 + v59;
      v42 += 16;
      --v45;
    }
    while (v45);
    double v68 = v41 / v47;
    if (v47 < 0.001) {
      double v68 = 0.0;
    }
    unint64_t v103 = *(void *)&v68;
    unsigned __int8 v69 = *(_DWORD *)(*v28 + 72) != 2;
    uint64_t v4 = v101;
    if (sub_19081203C(v101, (uint64_t)v115, v28, v69, (double *)&v103, 1))
    {
      unint64_t v71 = *v28;
      unint64_t v70 = v28[1];
      if (v70) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = (std::__shared_weak_count *)v138.n128_u64[1];
      v138.n128_u64[0] = v71;
      v138.n128_u64[1] = v70;
      if (v72) {
        sub_1906BFE48(v72);
      }
      float v73 = v46;
      float v139 = v73;
      long long v142 = v125;
      float v74 = *(double *)&v126;
      float v141 = v74;
      unint64_t v143 = v103;
      __int16 v140 = v69;
      sub_19076BCD4((__n128 **)a2, &v138);
      int v75 = 1;
      goto LABEL_88;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v76 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v77 = *(void *)(v101 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v77;
      _os_log_impl(&dword_1906B8000, v76, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,interpolateOnRoad returned false", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0))
    {
LABEL_87:
      int v75 = 0;
      goto LABEL_88;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v79 = *(void *)(v101 + 8);
    LODWORD(v146) = 134349056;
    *(void *)((char *)&v146 + 4) = v79;
    unint64_t v80 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v80);
    if (v80 != buf) {
      free(v80);
    }
    int v75 = 0;
    uint64_t v4 = v101;
LABEL_88:
    if (SHIBYTE(v124) < 0) {
      operator delete(*((void **)&v123 + 1));
    }
    if (v138.n128_u64[1]) {
      sub_1906BFE48((std::__shared_weak_count *)v138.n128_u64[1]);
    }
    if (v75)
    {
LABEL_93:
      v28 += 2;
      if (v28 == v102)
      {
        uint64_t v20 = 1;
        goto LABEL_130;
      }
      continue;
    }
    break;
  }
  uint64_t v20 = 0;
LABEL_130:
  uint64_t v7 = v98;
LABEL_127:
  *(void *)uint64_t buf = &v109;
  sub_1906C6BF0((void ***)buf);
  return v20;
}

void sub_19076BAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  a47 = (uint64_t)&a40;
  sub_1906C6BF0((void ***)&a47);
  _Unwind_Resume(a1);
}

void **sub_19076BB94(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19074C0B4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    sub_19074DAC0(a1, v7);
    return sub_19074DC48(v7);
  }
  return result;
}

void sub_19076BC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19076BC18(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || (uint64_t result = [a2 travelDirection], result != 6)
    && (uint64_t result = [a2 travelDirection], result != 255))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

void *sub_19076BC8C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_1906BFE48(v5);
  }
  return a1;
}

__n128 sub_19076BCD4(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x48uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[1];
  __n128 v7 = a2[2];
  _DWORD v4[2] = result;
  v4[3] = v7;
  v4[4].n128_u64[0] = a2[3].n128_u64[0];
  unint64_t v8 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v8 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_19076BD44(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v7 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsConnected(CLMapGeometry::ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return 0;
}

uint64_t sub_19076BF04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t *a6, int a7, double *a8, double a9, double a10)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  char v91 = a7;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v22 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = *(void *)(a1 + 8);
      buf.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v23;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_126;
    }
LABEL_135:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
LABEL_126:
    uint64_t v67 = *(void *)(a1 + 8);
    LODWORD(v99) = 134349056;
    *(void *)((char *)&v99 + 4) = v67;
    double v68 = (__n128 *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v68);
    if (v68 != &buf) {
      free(v68);
    }
    return 0;
  }
  uint64_t v12 = *a6;
  if (*a6)
  {
    int v14 = a7;
    double v18 = a9;
    if ((a5 & 1) == 0)
    {
      int v14 = a7 ^ 1;
      char v91 = a7 ^ 1;
    }
    uint64_t v20 = *(void *)v12;
    if (v14)
    {
      double v21 = 1.0 - a9;
      sub_19082373C(v12);
      double v18 = *(double *)(v12 + 40);
    }
    else
    {
      sub_19082373C(v12);
      double v21 = *(double *)(v12 + 40);
    }
    *a8 = v18 * v21;
    if (v18 * v21 > a10)
    {
      *a8 = -1.0;
      return 1;
    }
    double v27 = 1.0;
    if (!v14) {
      double v27 = 0.0;
    }
    double v90 = v27;
    uint64_t v28 = sub_19081203C(a1, a2, a6, v14, &v90, 1);
    if (!((unint64_t)a3 | (unint64_t)a4)) {
      return 1;
    }
    uint64_t v86 = 0;
    uint64_t v87 = &v86;
    uint64_t v88 = 0x2020000000;
    char v89 = 0;
    *(void *)&long long v99 = 0;
    *((void *)&v99 + 1) = &v99;
    uint64_t v100 = 0x4812000000;
    uint64_t v101 = sub_19076D140;
    uint64_t v102 = sub_19076D15C;
    uint64_t v103 = 0;
    v104[0] = (uint64_t)v104;
    v104[1] = (uint64_t)v104;
    v104[2] = 0;
    uint64_t v79 = 0;
    unint64_t v80 = (__n128 **)&v79;
    uint64_t v81 = 0x4812000000;
    uint64_t v82 = sub_19076D140;
    uint64_t v83 = sub_19076D15C;
    uint64_t v84 = 0;
    v85[0] = (uint64_t)v85;
    v85[1] = (uint64_t)v85;
    v85[2] = 0;
    context = (void *)MEMORY[0x192FCF260](v28);
    v78[0] = MEMORY[0x1E4F143A8];
    v78[1] = 3221225472;
    v78[2] = sub_19076D164;
    v78[3] = &unk_1E5697928;
    v78[7] = a1;
    v78[8] = v20;
    v78[4] = &v86;
    v78[5] = &v99;
    v78[6] = &v79;
    v76[0] = MEMORY[0x1E4F143A8];
    v76[1] = 3221225472;
    v76[2] = sub_19076D5FC;
    v76[3] = &unk_1E5697950;
    v76[4] = v78;
    uint64_t v77 = v76;
    v74[0] = MEMORY[0x1E4F143A8];
    v74[1] = 3221225472;
    v74[2] = sub_19076D610;
    v74[3] = &unk_1E5697950;
    uint64_t v74[4] = v78;
    int v75 = v74;
    if (!a3)
    {
LABEL_63:
      if (!a4)
      {
LABEL_97:
        BOOL v26 = *((unsigned char *)v87 + 24) == 0;
LABEL_123:
        _Block_object_dispose(&v79, 8);
        sub_190770ADC(v85);
        _Block_object_dispose(&v99, 8);
        sub_190770ADC(v104);
        _Block_object_dispose(&v86, 8);
        return v26;
      }
      if (*(unsigned char *)(a1 + 33))
      {
        long long v97 = 0uLL;
        uint64_t v98 = 0;
        sub_19076BB94((uint64_t *)&v97, 3uLL);
        uint64_t v44 = *(void *)(a1 + 16);
        if (v44)
        {
          if (v91)
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
            }
            uint64_t v45 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              unint64_t v46 = *(void *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v46;
              _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road", (uint8_t *)&buf, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
              }
              uint64_t v47 = *(void *)(a1 + 8);
              *(_DWORD *)uint64_t v96 = 134349056;
              *(void *)&v96[4] = v47;
              double v48 = (__n128 *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v48);
              if (v48 != &buf) {
                free(v48);
              }
            }
          }
          else
          {
            sub_1907459FC(v44, a6, (uint64_t *)&v97, 1);
          }
          double v54 = (unint64_t *)*((void *)&v97 + 1);
          for (uint64_t i = (unint64_t *)v97; i != v54; i += 2)
          {
            __n128 buf = 0uLL;
            char v106 = 1;
            uint64_t v107 = 0;
            char v108 = 0;
            unint64_t v55 = *i;
            unint64_t v56 = i[1];
            if (v56)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
              double v57 = (std::__shared_weak_count *)buf.n128_u64[1];
              buf.n128_u64[0] = v55;
              buf.n128_u64[1] = v56;
              if (v57) {
                sub_1906BFE48(v57);
              }
            }
            else
            {
              __n128 buf = (__n128)*i;
            }
            char v106 = 1;
            uint64_t v107 = 0;
            char v108 = 0;
            sub_19076D58C((__n128 **)(*((void *)&v99 + 1) + 48), &buf);
            if (buf.n128_u64[1]) {
              sub_1906BFE48((std::__shared_weak_count *)buf.n128_u64[1]);
            }
          }
        }
        buf.n128_u64[0] = (unint64_t)&v97;
        sub_1906C6BF0((void ***)&buf);
        goto LABEL_95;
      }
      *(void *)uint64_t v96 = 0;
      *(void *)uint64_t v96 = sub_1907699AC(a1, (uint64_t)a6);
      if (*(void *)v96)
      {
        ++*(_DWORD *)(a1 + 36);
        double v93 = 0;
        double v49 = operator new(0x28uLL);
        *double v49 = &unk_1EE0050C0;
        v49[1] = &v91;
        uint64_t v49[2] = a1;
        v49[3] = v96;
        v49[4] = &v77;
        double v93 = v49;
        BOOL v50 = sub_19076A36C((uint64_t)v92);
        sub_190770CB8(v92);

        *(void *)uint64_t v96 = 0;
        if (v50)
        {
LABEL_95:
          if ((uint64_t *)(*((void *)&v99 + 1) + 48) != a4) {
            sub_190771004(a4, *(void *)(*((void *)&v99 + 1) + 56), *((void *)&v99 + 1) + 48);
          }
          goto LABEL_97;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        double v51 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v52 = *(void *)(a1 + 8);
          buf.n128_u32[0] = 134349056;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = v52;
          _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0))
        {
LABEL_122:
          BOOL v26 = 0;
          goto LABEL_123;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_133:
          uint64_t v71 = *(void *)(a1 + 8);
          LODWORD(v97) = 134349056;
          *(void *)((char *)&v97 + 4) = v71;
          uint64_t v72 = (__n128 *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v72);
          if (v72 != &buf) {
            free(v72);
          }
          goto LABEL_122;
        }
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        double v58 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v59 = *(void *)(a1 + 8);
          buf.n128_u32[0] = 134349056;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = v59;
          _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_122;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_133;
        }
      }
LABEL_136:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      goto LABEL_133;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      long long v97 = 0uLL;
      uint64_t v98 = 0;
      sub_19076BB94((uint64_t *)&v97, 3uLL);
      uint64_t v29 = *(void *)(a1 + 16);
      if (v29)
      {
        if (v91)
        {
          sub_1907451AC(v29, a6, (uint64_t *)&v97, 1);
        }
        else
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
          }
          unint64_t v37 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            unint64_t v38 = *(void *)(a1 + 8);
            buf.n128_u32[0] = 134349056;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v38;
            _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road", (uint8_t *)&buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
            }
            uint64_t v69 = *(void *)(a1 + 8);
            *(_DWORD *)uint64_t v96 = 134349056;
            *(void *)&v96[4] = v69;
            unint64_t v70 = (__n128 *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v70);
            if (v70 != &buf) {
              free(v70);
            }
          }
        }
        double v40 = (unint64_t *)*((void *)&v97 + 1);
        for (unint64_t j = (unint64_t *)v97; j != v40; j += 2)
        {
          __n128 buf = 0uLL;
          char v106 = 1;
          uint64_t v107 = 0;
          char v108 = 0;
          unint64_t v41 = *j;
          unint64_t v42 = j[1];
          if (v42)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
            double v43 = (std::__shared_weak_count *)buf.n128_u64[1];
            buf.n128_u64[0] = v41;
            buf.n128_u64[1] = v42;
            if (v43) {
              sub_1906BFE48(v43);
            }
          }
          else
          {
            __n128 buf = (__n128)*j;
          }
          char v106 = 1;
          uint64_t v107 = 0;
          char v108 = 0;
          sub_19076D58C(v80 + 6, &buf);
          if (buf.n128_u64[1]) {
            sub_1906BFE48((std::__shared_weak_count *)buf.n128_u64[1]);
          }
        }
      }
      buf.n128_u64[0] = (unint64_t)&v97;
      sub_1906C6BF0((void ***)&buf);
      goto LABEL_61;
    }
    uint64_t v30 = sub_19074128C((uint64_t **)(a1 + 2616), (long long *)*a6, 0);
    if (v91 && (double v31 = v30) != 0)
    {
      uint64_t v33 = (unint64_t *)*((void *)v30 + 4);
      uint64_t v32 = (unint64_t *)*((void *)v30 + 5);
      if (v33 != v32)
      {
        while (*v33)
        {
          if (*(void *)*v33 != v20)
          {
            __n128 buf = 0uLL;
            char v106 = 1;
            uint64_t v107 = 0;
            char v108 = 0;
            uint64_t v34 = (void *)*v33;
            unint64_t v35 = v33[1];
            if (v35)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
              double v36 = (std::__shared_weak_count *)buf.n128_u64[1];
              buf.n128_u64[0] = (unint64_t)v34;
              buf.n128_u64[1] = v35;
              if (v36) {
                sub_1906BFE48(v36);
              }
            }
            else
            {
              __n128 buf = (__n128)*v33;
            }
            char v106 = 1;
            uint64_t v107 = 0;
            char v108 = 0;
            sub_19076D58C(v80 + 6, &buf);
            if (buf.n128_u64[1]) {
              sub_1906BFE48((std::__shared_weak_count *)buf.n128_u64[1]);
            }
          }
          v33 += 2;
          if (v33 == v32) {
            goto LABEL_106;
          }
        }
        sub_190770ADC((uint64_t *)v80 + 6);
      }
LABEL_106:
      if (v80[8])
      {
        *((void *)v31 + 7) = *(void *)(a1 + 8);
LABEL_61:
        if (v80 + 6 != (__n128 **)a3) {
          sub_190771004(a3, (uint64_t)v80[7], (uint64_t)(v80 + 6));
        }
        goto LABEL_63;
      }
    }
    else if (v80[8])
    {
      goto LABEL_61;
    }
    *(void *)uint64_t v96 = 0;
    *(void *)uint64_t v96 = sub_1907699AC(a1, (uint64_t)a6);
    if (!*(void *)v96)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v64 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v65 = *(void *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v65;
        _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_122;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_133;
      }
      goto LABEL_136;
    }
    ++*(_DWORD *)(a1 + 36);
    double v95 = 0;
    double v60 = operator new(0x28uLL);
    *double v60 = &unk_1EE005068;
    v60[1] = &v91;
    v60[2] = a1;
    v60[3] = v96;
    v60[4] = &v75;
    double v95 = v60;
    BOOL v61 = sub_19076A36C((uint64_t)v94);
    sub_190770CB8(v94);

    *(void *)uint64_t v96 = 0;
    if (!v61)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      double v62 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v63 = *(void *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v63;
        _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,outgoing roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_122;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_133;
      }
      goto LABEL_136;
    }
    goto LABEL_61;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  uint64_t v24 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    unint64_t v25 = *(void *)(a1 + 8);
    buf.n128_u32[0] = 134349056;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v25;
    _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_126;
    }
    goto LABEL_135;
  }
  return 0;
}

void sub_19076D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a36, 8);
  sub_190770ADC(a13);
  _Block_object_dispose(&a65, 8);
  sub_190770ADC(a14);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19076D140(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_1907713E8((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_19076D15C(uint64_t a1)
{
}

double sub_19076D164(void *a1, void *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[7];
  if (a2)
  {
    if ([a2 roadID] == a1[8]
      || ([a2 isRail] & 1) == 0
      && [a2 travelDirection]
      && [a2 travelDirection] != 1)
    {
      return result;
    }
    char v18 = 1;
    uint64_t v19 = 0;
    char v20 = 0;
    sub_190746754(a2, 1, (std::string **)buf);
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    __n128 v17 = *(__n128 *)buf;
    if (*(void *)buf)
    {
      if (sub_190824A00(*(uint64_t *)buf))
      {
        char v18 = 1;
        uint64_t v19 = 0;
        char v20 = 0;
        if (a3) {
          uint64_t v9 = a1[5];
        }
        else {
          uint64_t v9 = a1[6];
        }
        *(void *)&double result = sub_19076D58C((__n128 **)(*(void *)(v9 + 8) + 48), &v17).n128_u64[0];
        uint64_t v8 = (std::__shared_weak_count *)v17.n128_u64[1];
        if (!v17.n128_u64[1]) {
          return result;
        }
LABEL_23:
        sub_1906BFE48(v8);
        return result;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v12 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(v4 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    }
    if (!v8) {
      return result;
    }
    goto LABEL_23;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  unint64_t v10 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(v4 + 8);
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad is null", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v14 = *(void *)(v4 + 8);
    v17.n128_u32[0] = 134349056;
    *(unint64_t *)((char *)v17.n128_u64 + 4) = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  return result;
}

void sub_19076D560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    sub_1906BFE48(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19076D58C(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x38uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[1];
  _DWORD v4[2] = result;
  v4[3].n128_u8[0] = a2[2].n128_u8[0];
  unint64_t v7 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v7 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_19076D5FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19076D610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19076D624(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = v2 + 288;
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1907416A8(v3, Current, 0.5, 0.5);
    }
    double v5 = *(double *)(a1 + 8);
    sub_1907416A8(a1 + 2616, v5, 60.0, 60.0);
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometry::clearStoredStaleConnections()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

__n128 sub_19076D854(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_19076D878(uint64_t a1)
{
  int v1 = (void **)(a1 + 48);
  sub_1906C6BF0(&v1);
}

void sub_19076D8A4(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || ![a2 travelDirection]
    || [a2 travelDirection] == 1)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4 != [a2 roadID]
      || (int32x2_t v5 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)[a2 coordinates], *(float64x2_t *)*(void *)(a1 + 56)))), (vand_s8((int8x8_t)v5, (int8x8_t)vdup_lane_s32(v5, 1)).u32[0] & 1) == 0))
    {
      sub_190746754(a2, 1, &v26);
      if (v26 && sub_190824A00((uint64_t)v26))
      {
        LOBYTE(v28) = 1;
        sub_190771430(&v25, (uint64_t)v26, v27, (char *)&v28);
        uint64_t v6 = *(int64x2_t **)(*(void *)(a1 + 32) + 8);
        uint64_t v7 = (void *)v6[3].i64[1];
        unint64_t v8 = v6[4].u64[0];
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v11 = v6[3].i64[0];
          uint64_t v12 = ((uint64_t)v7 - v11) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            sub_190718FD4();
          }
          uint64_t v14 = v8 - v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          double v31 = v6 + 4;
          uint64_t v16 = (char *)sub_19074D830(v15);
          char v18 = &v16[16 * v12];
          uint64_t v19 = (std::__shared_weak_count *)*((void *)&v25 + 1);
          *(_OWORD *)char v18 = v25;
          uint64_t v9 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = v18 + 16;
          double v21 = (void *)v6[3].i64[0];
          char v20 = (void *)v6[3].i64[1];
          if (v20 == v21)
          {
            int64x2_t v23 = vdupq_n_s64((unint64_t)v20);
          }
          else
          {
            do
            {
              long long v22 = *((_OWORD *)v20 - 1);
              v20 -= 2;
              *((_OWORD *)v18 - 1) = v22;
              v18 -= 16;
              *char v20 = 0;
              v20[1] = 0;
            }
            while (v20 != v21);
            int64x2_t v23 = v6[3];
          }
          v6[3].i64[0] = (uint64_t)v18;
          v6[3].i64[1] = (uint64_t)v10;
          int64x2_t v29 = v23;
          uint64_t v24 = v6[4].i64[0];
          v6[4].i64[0] = (uint64_t)&v16[16 * v17];
          uint64_t v30 = v24;
          uint64_t v28 = v23.i64[0];
          sub_19074E834((uint64_t)&v28);
        }
        else
        {
          uint64_t v9 = (std::__shared_weak_count *)*((void *)&v25 + 1);
          *uint64_t v7 = v25;
          v7[1] = v9;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = v7 + 2;
        }
        v6[3].i64[1] = (uint64_t)v10;
        if (v9) {
          sub_1906BFE48(v9);
        }
      }
      if (v27) {
        sub_1906BFE48(v27);
      }
    }
  }
}

void sub_19076DAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19076DADC(double *a1, uint64_t *a2, double *a3, double *a4, double a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  int32x2_t v5 = (void *)*a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      int64x2_t v23 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if (v6 == 1) {
        return 1;
      }
      sub_19082373C(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == v6 - 1)
      {
        uint64_t v13 = *a2;
        sub_19082373C(v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          uint64_t v16 = *(void *)(v13 + 136);
          double v17 = *(double *)(v16 + 16);
          double v18 = *(double *)(v16 + 24);
LABEL_51:
          *(void *)__n128 buf = 0;
          __y[0] = 0.0;
          sub_1906DA778(a1, (double *)buf, __y, &v59, v14, v15, 0.0, v17, v18, 0.0);
          double v33 = atan2(__y[0], *(long double *)buf);
          if (v33 < 0.0) {
            double v33 = v33 + 6.28318531;
          }
          double v34 = v33 * 57.2957795;
LABEL_54:
          *a4 = v34;
          return 1;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          uint64_t v32 = *(void *)(v13 + 136) + 16 * v12;
          double v14 = *(double *)(v32 - 16);
          double v15 = *(double *)(v32 - 8);
          double v17 = *a3;
          double v18 = a3[1];
          goto LABEL_51;
        }
        long long v25 = (double *)v5[20];
        BOOL v26 = (double *)v5[21];
        if (v25 != v26)
        {
          double v27 = 0.0;
          int v28 = 2;
          uint64_t v29 = 24;
          while (1)
          {
            double v30 = *v25 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v27 + v30) < 0.000001) {
              break;
            }
            if (v27 + v30 > a5)
            {
              double v48 = (a5 - v27) / v30;
              uint64_t v49 = *(void *)(v13 + 136);
              uint64_t v50 = v49 + v29;
              double v51 = *(double *)(v49 + v29 - 16);
              double v52 = *(double *)(v49 + v29);
              *a3 = *(double *)(v49 + v29 - 24) + (*(double *)(v49 + v29 - 8) - *(double *)(v49 + v29 - 24)) * v48;
              double v53 = v51 + 360.0;
              if (v51 >= 0.0) {
                double v53 = v51;
              }
              double v54 = v52 + 360.0;
              if (v52 >= 0.0) {
                double v54 = v52;
              }
              double v55 = v54 - v53;
              if (v55 <= 180.0)
              {
                if (v55 < -180.0) {
                  double v55 = v55 + 360.0;
                }
              }
              else
              {
                double v55 = v55 + -360.0;
              }
              double v58 = fmod(v51 + v55 * v48, 360.0);
              if (v58 <= -180.0)
              {
                double v58 = v58 + 360.0;
              }
              else if (v58 > 180.0)
              {
                double v58 = v58 + -360.0;
              }
              a3[1] = v58;
              double v14 = *(double *)(v50 - 24);
              double v15 = *(double *)(v49 + v29 - 16);
              double v17 = *(double *)(v50 - 8);
              double v18 = *(double *)(v49 + v29);
              goto LABEL_51;
            }
            ++v25;
            v29 += 16;
            ++v28;
            double v27 = v27 + v30;
            if (v25 == v26) {
              goto LABEL_42;
            }
          }
          if (v28 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v29 - 8);
            uint64_t v35 = *(void *)(v13 + 136) + v29;
            double v36 = *(double *)(v35 - 24);
            double v37 = *(double *)(v35 - 16);
            double v38 = *a3;
            double v39 = a3[1];
            *(void *)__n128 buf = 0;
            __y[0] = 0.0;
            sub_1906DA778(a1, (double *)buf, __y, &v59, v36, v37, 0.0, v38, v39, 0.0);
            double v40 = atan2(__y[0], *(long double *)buf);
            if (v40 < 0.0) {
              double v40 = v40 + 6.28318531;
            }
            double v41 = v40 * 57.2957795;
            double v42 = *a3;
            double v43 = a3[1];
            uint64_t v44 = *(void *)(v13 + 136) + v29;
            double v45 = *(double *)(v44 + 8);
            double v46 = *(double *)(v44 + 16);
            *(void *)__n128 buf = 0;
            __y[0] = 0.0;
            sub_1906DA778(a1, (double *)buf, __y, &v59, v42, v43, 0.0, v45, v46, 0.0);
            double v47 = atan2(__y[0], *(long double *)buf);
            if (v47 < 0.0) {
              double v47 = v47 + 6.28318531;
            }
            sub_190715278(v41, v47 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
          }
          unint64_t v56 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
          }
          int v57 = sub_1906CB57C(115, 0);
          uint64_t result = 0;
          if (v57)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
            }
            LOWORD(__y[0]) = 0;
LABEL_15:
            long long v22 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
LABEL_33:
            if (v22 != buf) {
              free(v22);
            }
            return 0;
          }
          return result;
        }
LABEL_42:
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        double v31 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v24 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        LOWORD(__y[0]) = 0;
      }
    }
    long long v22 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  uint64_t v19 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }
  int v20 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v20)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    LOWORD(__y[0]) = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_19076E340(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_19076E3E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    int32x2_t v5 = (uint64_t *)a2;
    double v6 = 1050.0;
    if (a4 <= 1050.0)
    {
      double v6 = a4;
      if (a4 < -1050.0) {
        double v6 = -1050.0;
      }
    }
    unsigned int v7 = 0;
    double v8 = *(double *)(a2 + 48);
    uint64_t v154 = a1 + 96;
    double v155 = (uint64_t **)(a1 + 2616);
    double v156 = (double *)(a1 + 56);
    while (1)
    {
      if (v7 == 45)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        long long v126 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v127 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349312;
          *(void *)&uint8_t buf[4] = v127;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&unsigned char buf[14] = v6;
          _os_log_impl(&dword_1906B8000, v126, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
          }
          uint64_t v128 = *(void *)(a1 + 8);
          *(_DWORD *)double v171 = 134349312;
          *(void *)&v171[4] = v128;
          *(_WORD *)&v171[12] = 2050;
          *(double *)&v171[14] = v6;
          __int16 v129 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v129);
          if (v129 != buf) {
            free(v129);
          }
        }
        goto LABEL_243;
      }
      unsigned __int8 v165 = 0;
      uint64_t v9 = (void *)MEMORY[0x192FCF260]();
      uint64_t v10 = *v5;
      if (!*v5)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v130 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v131 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v131;
          _os_log_impl(&dword_1906B8000, v130, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_242;
        }
        uint64_t v132 = a1;
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_222:
          uint64_t v133 = *(void *)(v132 + 8);
          *(_DWORD *)double v171 = 134349056;
          *(void *)&v171[4] = v133;
          long long v134 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v134);
          goto LABEL_252;
        }
LABEL_256:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        goto LABEL_222;
      }
      uint64_t v11 = *(void *)v10;
      sub_19082373C(*v5);
      double v12 = *(double *)(v10 + 40);
      if (v12 <= 0.0)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v135 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v136 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v136;
          _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_242;
        }
        uint64_t v132 = a1;
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_222;
        }
        goto LABEL_256;
      }
      unsigned int v159 = v7;
      uint64_t v13 = (long long *)*v5;
      uint64_t v14 = *(void *)(*v5 + 136);
      if ((int)((unint64_t)(*(void *)(*v5 + 144) - v14) >> 4) <= 1)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        unint64_t v137 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v138 = *(void *)(a1 + 8);
          uint64_t v139 = *(void *)*v5;
          __int16 v140 = (char *)(int)((uint64_t)(*(void *)(*v5 + 144) - *(void *)(*v5 + 136)) >> 4);
          *(_DWORD *)__n128 buf = 134349569;
          *(void *)&uint8_t buf[4] = v138;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&unsigned char buf[14] = v139;
          *(_WORD *)&unsigned char buf[22] = 2050;
          double v177 = v140;
          _os_log_impl(&dword_1906B8000, v137, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          uint64_t v141 = a1;
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_251;
          }
          goto LABEL_258;
        }
LABEL_242:
LABEL_243:
        char v157 = 0;
        goto LABEL_244;
      }
      if (!v14)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        long long v142 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v143 = *(void *)(a1 + 8);
          uint64_t v144 = *(void *)*v5;
          uint64_t v145 = (char *)(int)((uint64_t)(*(void *)(*v5 + 144) - *(void *)(*v5 + 136)) >> 4);
          *(_DWORD *)__n128 buf = 134349569;
          *(void *)&uint8_t buf[4] = v143;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&unsigned char buf[14] = v144;
          *(_WORD *)&unsigned char buf[22] = 2050;
          double v177 = v145;
          _os_log_impl(&dword_1906B8000, v142, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld", buf, 0x20u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_242;
        }
        uint64_t v141 = a1;
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_251:
          uint64_t v149 = *(void *)(v141 + 8);
          uint64_t v150 = **(void **)a2;
          double v151 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(void *)(*(void *)a2 + 144)
                                                                          - *(void *)(*(void *)a2 + 136)) >> 4);
          *(_DWORD *)double v171 = 134349569;
          *(void *)&v171[4] = v149;
          *(_WORD *)&v171[12] = 2049;
          *(void *)&v171[14] = v150;
          *(_WORD *)&v171[22] = 2050;
          double v172 = v151;
          long long v134 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v134);
LABEL_252:
          if (v134 != buf) {
            free(v134);
          }
          goto LABEL_242;
        }
LABEL_258:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        goto LABEL_251;
      }
      if (v6 >= 0.0)
      {
        int v15 = v165;
      }
      else
      {
        int v15 = 1;
        unsigned __int8 v165 = 1;
      }
      double v16 = fabs(v6);
      double v17 = 1.0 - v8;
      if (v15) {
        double v17 = v8;
      }
      double v18 = v12 * v17;
      if (v12 * v17 <= v16)
      {
        if (v15) {
          double v8 = 0.0;
        }
        else {
          double v8 = 1.0;
        }
      }
      else
      {
        double v8 = v8 + v6 / v12;
      }
      long long v164 = *v13;
      *(void *)double v171 = 0;
      *(void *)&v171[8] = v171;
      *(void *)&v171[16] = 0x4812000000;
      double v172 = sub_19076D854;
      double v173 = sub_19076D878;
      double v174 = "";
      memset(v175, 0, 24);
      if (v18 > v16) {
        goto LABEL_81;
      }
      if (*(unsigned char *)(a1 + 33))
      {
        long long v169 = 0uLL;
        uint64_t v170 = 0;
        sub_19076BB94((uint64_t *)&v169, 3uLL);
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19)
        {
          if (v165) {
            sub_1907459FC(v19, (uint64_t *)a2, (uint64_t *)&v169, 1);
          }
          else {
            sub_1907451AC(v19, (uint64_t *)a2, (uint64_t *)&v169, 1);
          }
          uint64_t v46 = *((void *)&v169 + 1);
          for (uint64_t i = v169; i != v46; i += 16)
          {
            buf[0] = 1;
            sub_190771430(&v168, *(void *)i, *(std::__shared_weak_count **)(i + 8), buf);
            double v47 = *(int64x2_t **)&v171[8];
            double v48 = *(void **)(*(void *)&v171[8] + 56);
            unint64_t v49 = *(void *)(*(void *)&v171[8] + 64);
            if ((unint64_t)v48 >= v49)
            {
              uint64_t v52 = *(void *)(*(void *)&v171[8] + 48);
              uint64_t v53 = ((uint64_t)v48 - v52) >> 4;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 60) {
                sub_190718FD4();
              }
              uint64_t v55 = v49 - v52;
              if (v55 >> 3 > v54) {
                unint64_t v54 = v55 >> 3;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v54;
              }
              uint64_t i64 = *(void *)&v171[8] + 64;
              int v57 = (char *)sub_19074D830(v56);
              double v59 = &v57[16 * v53];
              double v60 = (std::__shared_weak_count *)*((void *)&v168 + 1);
              *(_OWORD *)double v59 = v168;
              uint64_t v50 = v60;
              if (v60) {
                atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v62 = (void *)v47[3].i64[0];
              BOOL v61 = (void *)v47[3].i64[1];
              if (v61 == v62)
              {
                int64x2_t v65 = vdupq_n_s64((unint64_t)v61);
                unint64_t v63 = &v57[16 * v53];
              }
              else
              {
                unint64_t v63 = &v57[16 * v53];
                do
                {
                  long long v64 = *((_OWORD *)v61 - 1);
                  v61 -= 2;
                  *((_OWORD *)v63 - 1) = v64;
                  v63 -= 16;
                  *BOOL v61 = 0;
                  v61[1] = 0;
                }
                while (v61 != v62);
                int64x2_t v65 = v47[3];
              }
              double v51 = v59 + 16;
              v47[3].i64[0] = (uint64_t)v63;
              v47[3].i64[1] = (uint64_t)(v59 + 16);
              *(int64x2_t *)&uint8_t buf[8] = v65;
              uint64_t v66 = (char *)v47[4].i64[0];
              v47[4].i64[0] = (uint64_t)&v57[16 * v58];
              double v177 = v66;
              *(void *)__n128 buf = v65.i64[0];
              sub_19074E834((uint64_t)buf);
            }
            else
            {
              *double v48 = v168;
              uint64_t v50 = (std::__shared_weak_count *)*((void *)&v168 + 1);
              v48[1] = *((void *)&v168 + 1);
              if (v50) {
                atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              double v51 = v48 + 2;
            }
            v47[3].i64[1] = (uint64_t)v51;
            if (v50) {
              sub_1906BFE48(v50);
            }
          }
        }
        *(void *)__n128 buf = &v169;
        sub_1906C6BF0((void ***)buf);
        goto LABEL_81;
      }
      int v20 = sub_19074128C(v155, &v164, 0);
      if (!v20)
      {
        uint64_t v85 = *(void *)(*(void *)&v171[8] + 48);
        uint64_t v86 = *(void *)(*(void *)&v171[8] + 56);
        uint64_t v44 = a1;
        if (v85 == v86) {
          goto LABEL_122;
        }
LABEL_125:
        if (v85 != v86)
        {
          char v89 = sub_19074128C(v155, &v164, 1);
          uint64_t v90 = (uint64_t)v89;
          if (v89)
          {
            sub_1907413D4((uint64_t)v89, v165);
            *(void *)(v90 + 56) = *(void *)(a1 + 8);
            uint64_t v91 = *(void *)(*(void *)&v171[8] + 48);
            uint64_t v92 = *(void *)(*(void *)&v171[8] + 56);
            if (v91 != v92)
            {
              do
              {
                double v93 = v9;
                unint64_t v94 = *(long long **)v91;
                double v95 = *(std::__shared_weak_count **)(v91 + 8);
                if (v95) {
                  atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v96 = *(void *)v94;
                if (*(void *)v94)
                {
                  if (v165)
                  {
                    *(unsigned char *)(v90 + 1) = 1;
                    long long v97 = (uint64_t *)(v90 + 8);
                  }
                  else
                  {
                    *(unsigned char *)uint64_t v90 = 1;
                    long long v97 = (uint64_t *)(v90 + 32);
                  }
                  sub_1907458E0(v97, v94);
                }
                else
                {
                  sub_1907413D4(v90, v165 != 0);
                  *(void *)(v90 + 56) = 0xBFF0000000000000;
                }
                if (v95) {
                  sub_1906BFE48(v95);
                }
                v91 += 16;
                if (v96) {
                  BOOL v98 = v91 == v92;
                }
                else {
                  BOOL v98 = 1;
                }
                uint64_t v9 = v93;
              }
              while (!v98);
            }
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
            }
            double v113 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v114 = *(void *)(a1 + 8);
              *(_DWORD *)__n128 buf = 134349056;
              *(void *)&uint8_t buf[4] = v114;
              _os_log_impl(&dword_1906B8000, v113, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
              }
              uint64_t v115 = *(void *)(a1 + 8);
              LODWORD(v169) = 134349056;
              *(void *)((char *)&v169 + 4) = v115;
              uint64_t v116 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v116);
              if (v116 != buf) {
                free(v116);
              }
            }
          }
        }
LABEL_81:
        if (v165)
        {
          uint64_t v67 = *(void *)(*(void *)&v171[8] + 48);
          uint64_t v68 = *(void *)(*(void *)&v171[8] + 56);
          unsigned int v69 = v159;
          if (v67 == v68)
          {
            unint64_t v71 = 0xFFFFFFFFLL;
          }
          else
          {
            unint64_t v70 = 0;
            unint64_t v71 = 0xFFFFFFFFLL;
            do
            {
              float v73 = *(void ***)v67;
              uint64_t v72 = *(std::__shared_weak_count **)(v67 + 8);
              if (v72) {
                atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v74 = a3;
              while (1)
              {
                uint64_t v74 = *(void *)(v74 + 8);
                if (v74 == a3) {
                  break;
                }
                if (*(void *)(v74 + 16) == **v73)
                {
                  unint64_t v71 = v70;
                  break;
                }
              }
              if (v72) {
                sub_1906BFE48(v72);
              }
              if ((v71 & 0x80000000) == 0) {
                break;
              }
              ++v70;
              v67 += 16;
            }
            while (v67 != v68);
          }
        }
        else
        {
          unint64_t v71 = 0xFFFFFFFFLL;
          unsigned int v69 = v159;
        }
        if (v18 > v16
          || v69 > 0x2B
          || (uint64_t v78 = *(void *)(*(void *)&v171[8] + 48), v79 = *(void *)(*(void *)&v171[8] + 56), v78 == v79)
          || (int v80 = v165, v71 == 0xFFFFFFFF) && v165)
        {
          long long v169 = 0uLL;
          double v163 = -1.0;
          int32x2_t v5 = (uint64_t *)a2;
          int v75 = *(std::__shared_weak_count **)(a2 + 8);
          v161[0] = *(void *)a2;
          v161[1] = (uint64_t)v75;
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v76 = sub_19076DADC(v156, v161, (double *)&v169, &v163, v8);
          if (v75) {
            sub_1906BFE48(v75);
          }
          if (v76)
          {
            *(double *)(a2 + 48) = v8;
            *(_OWORD *)(a2 + 32) = v169;
            float v77 = v163;
            *(float *)(a2 + 24) = v77;
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
            }
            uint64_t v82 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v83 = *(void *)(a1 + 8);
              *(_DWORD *)__n128 buf = 134349056;
              *(void *)&uint8_t buf[4] = v83;
              _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
              }
              uint64_t v117 = *(void *)(a1 + 8);
              LODWORD(v168) = 134349056;
              *(void *)((char *)&v168 + 4) = v117;
              unint64_t v118 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v118);
              if (v118 != buf) {
                free(v118);
              }
            }
          }
          char v157 = v76;
          char v84 = 0;
          goto LABEL_119;
        }
        double v81 = -v18;
        if (v165) {
          double v81 = v18;
        }
        double v6 = v6 + v81;
        int32x2_t v5 = (uint64_t *)a2;
        if ((v71 & 0x80000000) != 0)
        {
          unsigned int v99 = sub_19076E340(v154);
          uint64_t v78 = *(void *)(*(void *)&v171[8] + 48);
          unint64_t v71 = v99 % (unint64_t)((*(void *)(*(void *)&v171[8] + 56) - v78) >> 4);
          int v80 = v165;
        }
        else if (v71 >= (v79 - v78) >> 4)
        {
          goto LABEL_154;
        }
        if (v80) {
          double v8 = 1.0;
        }
        else {
          double v8 = 0.0;
        }
        uint64_t v100 = 16 * v71;
        uint64_t v101 = *(uint64_t **)(v78 + v100);
        uint64_t v102 = *v101;
        uint64_t v103 = v101[1];
        if (v103) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
        }
        long long v104 = *(std::__shared_weak_count **)(a2 + 8);
        *(void *)a2 = v102;
        *(void *)(a2 + 8) = v103;
        if (v104)
        {
          sub_1906BFE48(v104);
          uint64_t v102 = *(void *)a2;
        }
        if (v102)
        {
          *(unsigned char *)(a2 + 20) = *(unsigned char *)(*(void *)(*(void *)(*(void *)&v171[8] + 48) + v100) + 16);
LABEL_154:
          char v84 = 1;
          goto LABEL_119;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        long long v105 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v106 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v106;
          _os_log_impl(&dword_1906B8000, v105, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_177;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v107 = *(void *)(a1 + 8);
        LODWORD(v169) = 134349056;
        *(void *)((char *)&v169 + 4) = v107;
        char v108 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v108);
        if (v108 != buf) {
          free(v108);
        }
        char v84 = 0;
        char v157 = 0;
        int32x2_t v5 = (uint64_t *)a2;
LABEL_171:
        unsigned int v69 = v159;
        goto LABEL_119;
      }
      uint64_t v152 = v20;
      double v153 = v9;
      double v21 = (_OWORD *)((char *)v20 + 8);
      uint64_t v22 = 8;
      if (!v165)
      {
        uint64_t v22 = 32;
        double v21 = v20 + 2;
      }
      int64x2_t v23 = *(uint64_t **)((char *)v20 + v22);
      uint64_t v24 = (uint64_t *)*((void *)v21 + 1);
      while (v23 != v24)
      {
        uint64_t v25 = *v23;
        BOOL v26 = (std::__shared_weak_count *)v23[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v27 = *(int64x2_t **)&v171[8];
        if (v25)
        {
          LOBYTE(v168) = 1;
          sub_190771430(&v169, v25, v26, (char *)&v168);
          unint64_t v28 = v27[4].u64[0];
          uint64_t v29 = (_OWORD *)v27[3].i64[1];
          if ((unint64_t)v29 >= v28)
          {
            uint64_t v31 = v27[3].i64[0];
            uint64_t v32 = ((uint64_t)v29 - v31) >> 4;
            if ((unint64_t)(v32 + 1) >> 60) {
              sub_190718FD4();
            }
            uint64_t v33 = v28 - v31;
            uint64_t v34 = v33 >> 3;
            if (v33 >> 3 <= (unint64_t)(v32 + 1)) {
              uint64_t v34 = v32 + 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            uint64_t i64 = (uint64_t)v27[4].i64;
            double v36 = (char *)sub_19074D830(v35);
            double v37 = &v36[16 * v32];
            double v177 = &v36[16 * v38];
            *(_OWORD *)double v37 = v169;
            double v30 = v37 + 16;
            *(void *)&uint8_t buf[16] = v37 + 16;
            double v40 = (void *)v27[3].i64[0];
            double v39 = (void *)v27[3].i64[1];
            if (v39 == v40)
            {
              int64x2_t v42 = vdupq_n_s64((unint64_t)v39);
            }
            else
            {
              do
              {
                long long v41 = *((_OWORD *)v39 - 1);
                v39 -= 2;
                *((_OWORD *)v37 - 1) = v41;
                v37 -= 16;
                *double v39 = 0;
                v39[1] = 0;
              }
              while (v39 != v40);
              int64x2_t v42 = v27[3];
              double v30 = *(_OWORD **)&buf[16];
            }
            v27[3].i64[0] = (uint64_t)v37;
            v27[3].i64[1] = (uint64_t)v30;
            *(int64x2_t *)&uint8_t buf[8] = v42;
            double v43 = (char *)v27[4].i64[0];
            v27[4].i64[0] = (uint64_t)v177;
            double v177 = v43;
            *(void *)__n128 buf = v42.i64[0];
            sub_19074E834((uint64_t)buf);
          }
          else
          {
            _OWORD *v29 = v169;
            double v30 = v29 + 1;
          }
          v27[3].i64[1] = (uint64_t)v30;
          if (v26) {
LABEL_50:
          }
            sub_1906BFE48(v26);
        }
        else
        {
          sub_19074C1F8((uint64_t *)(*(void *)&v171[8] + 48));
          if (v26) {
            goto LABEL_50;
          }
        }
        if (!v25) {
          break;
        }
        v23 += 2;
      }
      uint64_t v44 = a1;
      uint64_t v9 = v153;
      if (*(void *)(*(void *)&v171[8] + 48) != *(void *)(*(void *)&v171[8] + 56))
      {
        *((void *)v152 + 7) = *(void *)(a1 + 8);
        goto LABEL_81;
      }
LABEL_122:
      *(void *)&long long v168 = 0;
      int32x2_t v5 = (uint64_t *)a2;
      *(void *)&long long v168 = sub_1907699AC(v44, a2);
      if (!(void)v168)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v109 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v110 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v110;
          _os_log_impl(&dword_1906B8000, v109, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
          }
          uint64_t v119 = *(void *)(a1 + 8);
          LODWORD(v169) = 134349056;
          *(void *)((char *)&v169 + 4) = v119;
          long long v120 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v120);
          if (v120 != buf) {
            free(v120);
          }
          int32x2_t v5 = (uint64_t *)a2;
        }
        char v84 = 0;
        char v157 = 0;
        goto LABEL_171;
      }
      v162[0] = MEMORY[0x1E4F143A8];
      v162[1] = 3221225472;
      v162[2] = sub_19076D8A4;
      v162[3] = &unk_1E5697978;
      v162[6] = v11;
      v162[7] = v14;
      v162[4] = v171;
      v162[5] = a1;
      double v163 = COERCE_DOUBLE(v162);
      ++*(_DWORD *)(a1 + 36);
      long double v167 = 0;
      uint64_t v87 = operator new(0x28uLL);
      unsigned int v69 = v159;
      *uint64_t v87 = &unk_1EE005010;
      v87[1] = &v165;
      v87[2] = a1;
      v87[3] = &v168;
      v87[4] = &v163;
      long double v167 = v87;
      BOOL v88 = sub_19076A36C((uint64_t)v166);
      sub_190770CB8(v166);

      *(void *)&long long v168 = 0;
      if (v88)
      {
        uint64_t v85 = *(void *)(*(void *)&v171[8] + 48);
        uint64_t v86 = *(void *)(*(void *)&v171[8] + 56);
        goto LABEL_125;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v111 = off_1E929F6C8;
      int32x2_t v5 = (uint64_t *)a2;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v112 = *(void *)(a1 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v112;
        _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (moveOnRoad)", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
        }
        uint64_t v121 = *(void *)(a1 + 8);
        LODWORD(v169) = 134349056;
        *(void *)((char *)&v169 + 4) = v121;
        long long v122 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v122);
        if (v122 != buf) {
          free(v122);
        }
        int32x2_t v5 = (uint64_t *)a2;
        unsigned int v69 = v159;
      }
LABEL_177:
      char v84 = 0;
      char v157 = 0;
LABEL_119:
      _Block_object_dispose(v171, 8);
      *(void *)__n128 buf = v175;
      sub_1906C6BF0((void ***)buf);
      unsigned int v7 = v69 + 1;
      if ((v84 & 1) == 0)
      {
LABEL_244:
        char v125 = v157;
        return v125 & 1;
      }
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  long long v123 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v124 = *(void *)(a1 + 8);
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v124;
    _os_log_impl(&dword_1906B8000, v123, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v147 = *(void *)(a1 + 8);
    *(_DWORD *)double v171 = 134349056;
    *(void *)&v171[4] = v147;
    uint64_t v148 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "CoreLocation: %s\n", v148);
    if (v148 != buf) {
      free(v148);
    }
  }
  char v125 = 0;
  return v125 & 1;
}

void sub_19076FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  a49 = a27;
  sub_1906C6BF0(&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_19076FE34(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, double a5, double a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    uint64_t v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_84;
    }
    goto LABEL_33;
  }
  uint64_t v8 = *a2;
  if (!*a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    BOOL v26 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_84;
    }
LABEL_33:
    uint64_t v30 = *(void *)(a1 + 8);
    *(_DWORD *)double v59 = 134349056;
    *(void *)&v59[4] = v30;
    int64x2_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
LABEL_34:
    if (v23 != buf) {
      free(v23);
    }
    return 0;
  }
  sub_19082373C(*a2);
  double v13 = *(double *)(v8 + 40);
  if (v13 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v28 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_33;
    }
LABEL_84:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    goto LABEL_33;
  }
  uint64_t v14 = *a2;
  if ((int)((*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4) <= 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    int v15 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = *(void *)*a2;
      uint64_t v18 = (int)((uint64_t)(*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4);
      *(_DWORD *)__n128 buf = 134349569;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v17;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v18;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v21 = *(void *)*a2;
      uint64_t v22 = (int)((uint64_t)(*(void *)(*a2 + 144) - *(void *)(*a2 + 136)) >> 4);
      *(_DWORD *)double v59 = 134349569;
      *(void *)&v59[4] = v20;
      __int16 v60 = 2049;
      *(void *)BOOL v61 = v21;
      *(_WORD *)&v61[8] = 2050;
      *(void *)&v61[10] = v22;
      int64x2_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  double v31 = 1.0 - a5;
  if (!*((unsigned char *)a2 + 20)) {
    double v31 = a5;
  }
  double v32 = v13 * v31;
  if (v13 * v31 > fabs(a6))
  {
    double v33 = a6 / v13;
    if (!*((unsigned char *)a2 + 20)) {
      double v33 = -v33;
    }
    *(void *)__n128 buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v34 = (std::__shared_weak_count *)a2[1];
    double v35 = v33 + a5;
    v58[0] = v14;
    v58[1] = (uint64_t)v34;
    *(void *)double v59 = 0xBFF0000000000000;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_19076DADC((double *)(a1 + 56), v58, (double *)buf, (double *)v59, v33 + a5);
    if (v34) {
      sub_1906BFE48(v34);
    }
    *((double *)a2 + 6) = v35;
    *((_OWORD *)a2 + 2) = *(_OWORD *)buf;
    float v36 = *(double *)v59;
    *((float *)a2 + 6) = v36;
    if (!*((unsigned char *)a2 + 20))
    {
      double v37 = fmod((float)(v36 + 180.0), 360.0);
      if (v37 < 0.0) {
        double v37 = v37 + 360.0;
      }
      float v38 = v37;
      *((float *)a2 + 6) = v38;
    }
    return 1;
  }
  uint64_t v39 = *a4;
  unint64_t v40 = v39 + 1;
  *a4 = v39 + 1;
  if ((int)v39 > 9 || a3[2] <= v40)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
    }
    unint64_t v49 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = *(void *)(a1 + 8);
      int v51 = *a4;
      uint64_t v52 = a3[2];
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v50;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v51;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v52;
      _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu", buf, 0x1Cu);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
      }
      uint64_t v53 = *(void *)(a1 + 8);
      int v54 = *a4;
      uint64_t v55 = a3[2];
      *(_DWORD *)double v59 = 134349568;
      *(void *)&v59[4] = v53;
      __int16 v60 = 1026;
      *(_DWORD *)BOOL v61 = v54;
      *(_WORD *)&v61[4] = 2050;
      *(void *)&v61[6] = v55;
      int64x2_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  long long v41 = (uint64_t *)a3[1];
  if ((int)v39 <= -2)
  {
    do
      long long v41 = (uint64_t *)*v41;
    while (!__CFADD__(v40++, 1));
  }
  else if (v39 != -1)
  {
    unint64_t v42 = v39 + 2;
    do
    {
      long long v41 = (uint64_t *)v41[1];
      --v42;
    }
    while (v42 > 1);
  }
  if (v41 != a3)
  {
    int v44 = *((unsigned __int8 *)v41 + 36);
    sub_19076BC8C(a2, v41 + 2);
    *((unsigned char *)a2 + 20) = *((unsigned char *)v41 + 36);
    v46.n128_u64[0] = 0;
    if (!v44)
    {
      v46.n128_f64[0] = fmod((float)(*((float *)a2 + 6) + 180.0), 360.0);
      if (v46.n128_f64[0] < 0.0) {
        v46.n128_f64[0] = v46.n128_f64[0] + 360.0;
      }
      float v47 = v46.n128_f64[0];
      *((float *)a2 + 6) = v47;
      v46.n128_u64[0] = 1.0;
    }
    double v48 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, __n128, __n128))(*(void *)a1 + 56);
    v45.n128_f64[0] = a6 - v32;
    return v48(a1, a2, a3, a4, v46, v45);
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005860);
  }
  unint64_t v56 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v57 = *(void *)(a1 + 8);
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v57;
    _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList", buf, 0xCu);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }
  return result;
}

void sub_190770940(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_190770964(uint64_t a1)
{
  sub_1908111B8(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_19077099C()
{
  return 1;
}

uint64_t sub_1907709A4()
{
  return 0;
}

uint64_t sub_1907709AC()
{
  return 0;
}

os_log_t sub_1907709B4()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_1907709E4(uint64_t a1, uint64_t a2)
{
}

void sub_1907709F4(uint64_t a1)
{
}

uint64_t sub_190770A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_190770A54();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_190770A54()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1EE0051C8;
  __cxa_throw(exception, (struct type_info *)&unk_1EE003678, (void (*)(void *))std::exception::~exception);
}

void sub_190770AA4(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_190770ADC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unsigned int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        int32x2_t v5 = (uint64_t *)v3[1];
        double v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          sub_1906BFE48(v6);
        }
        operator delete(v3);
        unsigned int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_190770B58()
{
}

__n128 sub_190770B6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE005170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_190770BC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE005170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190770BF8(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(void **)(a1 + 24), *a2, **(double **)(a1 + 16), *(double *)(*(void *)(a1 + 16) + 8), 10.0);
}

uint64_t sub_190770C1C(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE003800)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190770C5C()
{
  return &unk_1EE003800;
}

BOOL sub_190770C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_190770CB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_190770D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_190770DD8()
{
}

__n128 sub_190770DEC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE005118;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190770E40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE005118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190770E78(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(void **)(a1 + 32), *a2, **(double **)(a1 + 16), *(double *)(*(void *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_190770E9C(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE0037F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190770EDC()
{
  return &unk_1EE0037F0;
}

void sub_190770EEC()
{
}

__n128 sub_190770F00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE005068;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190770F54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE005068;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190770F8C(uint64_t a1)
{
  int v1 = **(unsigned __int8 **)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 2600);
  if (v1) {
    return MEMORY[0x1F4181798](v2, sel_findRoadsFromNextIntersectionOf_handler_completionHandler_);
  }
  else {
    return MEMORY[0x1F4181798](v2, sel_findRoadsFromPreviousIntersectionOf_handler_completionHandler_);
  }
}

uint64_t sub_190770FB8(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE0037D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190770FF8()
{
  return &unk_1EE0037D0;
}

uint64_t *sub_190771004(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (a2 != a3 && (uint64_t *)v6 != a1)
  {
    do
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v8;
      *(void *)(v6 + 24) = v7;
      if (v9) {
        sub_1906BFE48(v9);
      }
      long long v10 = *(_OWORD *)(v4 + 32);
      *(unsigned char *)(v6 + 48) = *(unsigned char *)(v4 + 48);
      *(_OWORD *)(v6 + 32) = v10;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v4 != a3 && (uint64_t *)v6 != a1);
  }
  if ((uint64_t *)v6 == a1)
  {
    return sub_1907710F0((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return sub_190771248((uint64_t)a1, (void *)v6, a1);
  }
}

uint64_t *sub_1907710F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x38uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *(void *)(a3 + 24);
    _DWORD v8[2] = *(void *)(a3 + 16);
    void v8[3] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    long long v11 = *(_OWORD *)(a3 + 32);
    *((unsigned char *)v8 + 48) = *(unsigned char *)(a3 + 48);
    *((_OWORD *)v8 + 2) = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    if (v12 == a4)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = v8;
      do
      {
        uint64_t v8 = operator new(0x38uLL);
        *uint64_t v8 = v14;
        v8[1] = 0;
        uint64_t v15 = *(void *)(v12 + 24);
        _DWORD v8[2] = *(void *)(v12 + 16);
        void v8[3] = v15;
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        long long v16 = *(_OWORD *)(v12 + 32);
        *((unsigned char *)v8 + 48) = *(unsigned char *)(v12 + 48);
        *((_OWORD *)v8 + 2) = v16;
        v14[1] = v8;
        ++v13;
        uint64_t v12 = *(void *)(v12 + 8);
        uint64_t v14 = v8;
      }
      while (v12 != a4);
    }
    uint64_t v17 = *a2;
    *(void *)(v17 + 8) = v9;
    *uint64_t v9 = v17;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v13;
    return v9;
  }
  return a2;
}

void sub_190771208(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    uint64_t v2 = (void *)*v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      sub_1906BFE48(v3);
    }
    operator delete(v1);
    int v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_190771234(_Unwind_Exception *a1)
{
}

void *sub_190771248(uint64_t a1, void *__p, void *a3)
{
  if (__p != a3)
  {
    uint64_t v4 = __p;
    uint64_t v6 = *a3;
    uint64_t v7 = *__p;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      uint64_t v9 = (std::__shared_weak_count *)v4[3];
      if (v9) {
        sub_1906BFE48(v9);
      }
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_1907712D0()
{
}

__n128 sub_1907712E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE0050C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190771338(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE0050C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190771370(uint64_t a1)
{
  int v1 = **(unsigned __int8 **)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 2600);
  if (v1) {
    return MEMORY[0x1F4181798](v2, sel_findRoadsToNextIntersectionOf_handler_completionHandler_);
  }
  else {
    return MEMORY[0x1F4181798](v2, sel_findRoadsToPreviousIntersectionOf_handler_completionHandler_);
  }
}

uint64_t sub_19077139C(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE0037E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1907713DC()
{
  return &unk_1EE0037E0;
}

uint64_t sub_1907713E8(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void sub_190771430(void *a1, uint64_t a2, std::__shared_weak_count *a3, char *a4)
{
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v9 = v8;
  v8[1] = 0;
  _DWORD v8[2] = 0;
  *uint64_t v8 = &unk_1EE005340;
  uint64_t v10 = (char *)(v8 + 3);
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    char v11 = *a4;
    void v8[3] = a2;
    v8[4] = a3;
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v8 + 40) = v11;
    sub_1906BFE48(a3);
  }
  else
  {
    char v12 = *a4;
    void v8[3] = a2;
    v8[4] = 0;
    *((unsigned char *)v8 + 40) = v12;
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_1907714D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907714F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19077154C(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1906BFE48(v1);
  }
}

void sub_190771564()
{
}

__n128 sub_190771578(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE005010;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1907715CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE005010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190771604(uint64_t a1)
{
  int v1 = **(unsigned __int8 **)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 2600);
  if (v1) {
    return MEMORY[0x1F4181798](v2, sel_findRoadsToPreviousIntersectionOf_handler_completionHandler_);
  }
  else {
    return MEMORY[0x1F4181798](v2, sel_findRoadsFromNextIntersectionOf_handler_completionHandler_);
  }
}

uint64_t sub_190771630(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE0037C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190771670()
{
  return &unk_1EE0037C0;
}

void *sub_190771690(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_190809390((uint64_t)a1, v6, a3);
  if (v4) {
    sub_1906BFE48(v4);
  }
  *a1 = &unk_1EE0049A8;
  return a1;
}

void sub_190771708(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_190771724(uint64_t a1)
{
  sub_190809450(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_19077175C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 100);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v5 + 48))(v5, a2, 450.0);
  uint64_t v12 = (uint64_t)&v12;
  uint64_t v13 = &v12;
  uint64_t v14 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void, double))(*(void *)v5 + 64))(v5, &v12, a2, 0, 30.0);
  if (v6)
  {
    uint64_t v7 = v13;
    double v8 = *(double *)(a2 + 104);
    if (v13 == &v12) {
      goto LABEL_17;
    }
    uint64_t v9 = &v12;
    do
    {
      if (v8 == -1.0) {
        goto LABEL_11;
      }
      double v10 = vabdd_f64(v8, *((float *)v7 + 10));
      if (v10 > 180.0) {
        double v10 = 360.0 - v10;
      }
      if (v10 <= 15.0)
      {
LABEL_11:
        if (v9 == &v12 || *((float *)v7 + 8) < *((float *)v9 + 8)) {
          uint64_t v9 = v7;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v12);
    if (v9 == &v12)
    {
LABEL_17:
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(double *)(a2 + 168) = v8;
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      sub_19081179C(a2, v9 + 2);
      *(_DWORD *)(a2 + 176) = *((_DWORD *)v9 + 8);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
  }
  sub_190770ADC(&v12);
  if (v4) {
    sub_1906BFE48(v4);
  }
  return v6;
}

void sub_190771944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190770ADC((uint64_t *)va);
  if (v2) {
    sub_1906BFE48(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190771970()
{
  return 0;
}

__n128 sub_190771988(__n128 *a1, uint64_t a2)
{
  a1[3].n128_u64[0] = *(void *)a2;
  if (&a1[3] != (__n128 *)a2) {
    sub_190719034(&a1[3].n128_i8[8], *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  __n128 result = *(__n128 *)(a2 + 32);
  a1[5] = result;
  return result;
}

BOOL sub_1907719E8(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 88);
  double v3 = vabdd_f64(a2, v2);
  return v2 >= 0.0 && v3 <= 6.0 && *(_DWORD *)(a1 + 48) == 1;
}

double sub_190771A18(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 108);
  double result = *(double *)(a1 + 100);
  *(double *)(a2 + 40) = result;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t sub_190771A34(uint64_t result, char a2)
{
  *(unsigned char *)(result + 96) = a2;
  return result;
}

uint64_t sub_190771A3C()
{
  return 0;
}

uint64_t sub_190771A44()
{
  return 0;
}

uint64_t sub_190771A4C()
{
  return 0;
}

uint64_t sub_190771A54()
{
  return 0;
}

void sub_190771A64(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_190771A6C()
{
  return 1;
}

uint64_t sub_190771A74(id *a1, id *a2, void **a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a1;
  int v6 = 0;
  uint64_t v7 = (uint64_t)(a3 + 2);
  uint64_t v50 = 0x3F91DF46A2529D39;
  double v53 = 0.0;
  double v54 = 0.0;
  double v8 = 0.0;
  do
  {
    objc_msgSend(*v5, "latitude_deg", v50);
    double v10 = v9;
    objc_msgSend(*v5, "longitude_deg");
    BOOL v12 = sub_190771D68(v10, v11);
    if (!v12) {
      break;
    }
    objc_msgSend(*v5, "latitude_deg");
    double v14 = v13;
    objc_msgSend(*v5, "longitude_deg");
    double v16 = v15;
    __double2 v17 = __sincos_stret(v14 * 0.0174532925);
    __double2 v18 = __sincos_stret(v16 * 0.0174532925);
    double v19 = 6378137.0 / sqrt(v17.__sinval * -0.00669437999 * v17.__sinval + 1.0);
    double v20 = v17.__cosval * (v19 + 0.0);
    double v21 = v18.__cosval * v20;
    double v22 = v19 * 0.99330562 + 0.0;
    double v23 = v17.__sinval * v22;
    double v24 = v53;
    if (!v6)
    {
      double v24 = v18.__sinval * v20;
      double v8 = v17.__sinval * v22;
    }
    double v51 = v18.__sinval * v20;
    double v52 = v8;
    double v25 = v54;
    if (!v6) {
      double v25 = v18.__cosval * v20;
    }
    objc_msgSend(*v5, "latitude_deg");
    double v27 = v26;
    objc_msgSend(*v5, "longitude_deg");
    double v29 = v28;
    __double2 v30 = __sincos_stret(v27 * 0.0174532925);
    __double2 v31 = __sincos_stret(v29 * 0.0174532925);
    double v53 = v24;
    double v54 = v25;
    double v32 = v21 - v25;
    double v8 = v52;
    double v33 = v31.__cosval * (v51 - v24) - v31.__sinval * v32;
    double v34 = -(v30.__sinval * v31.__sinval) * (v51 - v24)
        + -(v30.__sinval * v31.__cosval) * v32
        + v30.__cosval * (v23 - v52);
    double v35 = v30.__cosval * v31.__sinval * (v51 - v24) + v30.__cosval * v31.__cosval * v32 + v30.__sinval * (v23 - v52);
    double v37 = (double *)a3[1];
    unint64_t v36 = (unint64_t)a3[2];
    if ((unint64_t)v37 >= v36)
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (unsigned char *)*a3) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_190718FD4();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)*a3) >> 3);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 >= 0x555555555555555) {
        unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42) {
        double v43 = (char *)sub_1907180DC(v7, v42);
      }
      else {
        double v43 = 0;
      }
      int v44 = (double *)&v43[24 * v39];
      *int v44 = v33;
      v44[1] = v34;
      v44[2] = v35;
      __n128 v46 = (double *)*a3;
      __n128 v45 = (double *)a3[1];
      float v47 = v44;
      if (v45 != *a3)
      {
        do
        {
          long long v48 = *(_OWORD *)(v45 - 3);
          *(v47 - 1) = *(v45 - 1);
          *(_OWORD *)(v47 - 3) = v48;
          v47 -= 3;
          v45 -= 3;
        }
        while (v45 != v46);
        __n128 v45 = (double *)*a3;
      }
      float v38 = v44 + 3;
      *a3 = v47;
      a3[1] = v44 + 3;
      a3[2] = &v43[24 * v42];
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *double v37 = v33;
      v37[1] = v34;
      float v38 = v37 + 3;
      v37[2] = v35;
    }
    ++v6;
    a3[1] = v38;
    ++v5;
  }
  while (v5 != a2);
  return v12;
}

BOOL sub_190771D68(double a1, double a2)
{
  double v2 = fabs(a1);
  if (v2 == INFINITY) {
    return 0;
  }
  double v3 = fabs(a2);
  if (v3 == INFINITY || v2 < 0.00003 && v3 < 0.00003) {
    return 0;
  }
  BOOL v5 = a1 <= 90.0;
  if (a1 < -90.0) {
    BOOL v5 = 0;
  }
  if (a2 > 180.0) {
    BOOL v5 = 0;
  }
  return a2 >= -180.0 && v5;
}

void *sub_190771DF8(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_190718FD4();
    }
    double v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 2;
    v5[0] = sub_1907812D8(a2);
    v5[1] = v5[0] + v3;
    _DWORD v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_190781268(v2, v5);
    return (void *)sub_190781320((uint64_t)v5);
  }
  return result;
}

uint64_t sub_190771E9C(uint64_t a1, double a2, double a3)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(_DWORD *)(a1 + 36);
  if (v5 < 1 || fabs(a2) < 0.00003 && fabs(a3) < 0.00003) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 >= -180.0 && a2 <= 90.0 && a2 >= -90.0 && a3 <= 180.0)
  {
    double v7 = *(double *)(a1 + 8);
    double v8 = (v7 - *(double *)a1) / (double)v3;
    float64x2_t v9 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)(a1 + 16)), (int8x16_t)vaddq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), *(int8x16_t *)(a1 + 16));
    double v10 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1), v9).f64[0];
    if (v10 <= 180.0)
    {
      if (v10 >= -180.0)
      {
LABEL_15:
        if (fabs(v8) > 0.0000001)
        {
          double v12 = fabs(v10) / (double)v5;
          if (fabs(v12) > 0.0000001)
          {
            if (a3 < 0.0) {
              a3 = a3 + 360.0;
            }
            double v13 = a3 - v9.f64[0];
            if (v13 <= 180.0)
            {
              if (v13 < -180.0) {
                double v13 = v13 + 360.0;
              }
            }
            else
            {
              double v13 = v13 + -360.0;
            }
            int v14 = (int)(floor(fabs(v13) / v12) + floor((v7 - a2) / v8) * (double)v5);
            if (v5 * v3 <= v14 || v14 <= -1) {
              return 0xFFFFFFFFLL;
            }
            else {
              return v14;
            }
          }
        }
        return result;
      }
      double v11 = 360.0;
    }
    else
    {
      double v11 = -360.0;
    }
    double v10 = v10 + v11;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_190772020(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = xmmword_1908820F0;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 470) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 524) = -1;
  *(void *)(a1 + 532) = -1;
  *(_DWORD *)(a1 + 540) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 544) = _Q0;
  *(_OWORD *)(a1 + 560) = _Q0;
  *(void *)(a1 + 576) = 0x4044000000000000;
  *(void *)(a1 + 48) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  return a1;
}

void sub_190772104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 96);
  sub_1907813BC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_190772120(uint64_t a1)
{
  sub_190772174(a1);
  sub_1907723C0(a1);

  int v3 = (void **)(a1 + 96);
  sub_1907813BC(&v3);
  return a1;
}

void sub_190772174(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 481) && *(_DWORD *)(a1 + 508))
  {
    if (objc_opt_class()) {
      int v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F74228], "sharedConnection"), "isHealthDataSubmissionAllowed");
    }
    else {
      int v2 = 0;
    }
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v3 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 67240192;
      int v6 = v2;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "CLRR,hasIHAPermission,isPermissionGranted,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::hasIHAPermission() const", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    if (v2)
    {
      AnalyticsSendEventLazy();
      *(unsigned char *)(a1 + 481) = 1;
    }
  }
}

void sub_1907723C0(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 48))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v2 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 88);
      int v4 = *(_DWORD *)(a1 + 92);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 80);
      *(_DWORD *)__n128 buf = 67241473;
      *(_DWORD *)double v28 = v3;
      *(_WORD *)&v28[4] = 1026;
      *(_DWORD *)&v28[6] = v4;
      *(_WORD *)double v29 = 2049;
      *(void *)&v29[2] = v5;
      *(_WORD *)__double2 v30 = 2049;
      *(void *)&_OWORD v30[2] = v6;
      *(_WORD *)__double2 v31 = 2049;
      *(void *)&v31[2] = v7;
      *(_WORD *)double v32 = 2049;
      *(void *)&v32[2] = v8;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLRR,printRoutePointArray,boxRows,%{public}d,boxColumns,%{public}d,boxMinLat,%{private}.7lf,boxMaxLat,%{private}.7lf,boxMinLon,%{private}.7lf,boxMaxLon,%{private}.7lf", buf, 0x36u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    if ([*(id *)(a1 + 48) count])
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (void *)[*(id *)(a1 + 48) objectAtIndex:v9];
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        double v11 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v10, "timestamp_s");
          uint64_t v13 = v12;
          objc_msgSend(v10, "latitude_deg");
          uint64_t v15 = v14;
          objc_msgSend(v10, "longitude_deg");
          uint64_t v17 = v16;
          objc_msgSend(v10, "altitude_m");
          uint64_t v19 = v18;
          objc_msgSend(v10, "odometer_m");
          uint64_t v21 = v20;
          int v22 = [v10 signalEnvironmentType];
          *(_DWORD *)__n128 buf = 134350593;
          *(void *)double v28 = v13;
          *(_WORD *)&v28[8] = 2049;
          *(void *)double v29 = v15;
          *(_WORD *)&v29[8] = 2049;
          *(void *)__double2 v30 = v17;
          *(_WORD *)&v30[8] = 2049;
          *(void *)__double2 v31 = v19;
          *(_WORD *)&v31[8] = 2050;
          *(void *)double v32 = v21;
          *(_WORD *)&_OWORD v32[8] = 1026;
          int v33 = v22;
          __int16 v34 = 1026;
          int v35 = v9;
          _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEFAULT, "CLRR,printRoutePointArray,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{public}.2lf,signalEnv,%{public}d,pointCount,%{public}d", buf, 0x40u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          objc_msgSend(v10, "timestamp_s");
          objc_msgSend(v10, "latitude_deg");
          objc_msgSend(v10, "longitude_deg");
          objc_msgSend(v10, "altitude_m");
          objc_msgSend(v10, "odometer_m");
          [v10 signalEnvironmentType];
          double v23 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        ++v9;
      }
      while ([*(id *)(a1 + 48) count] > v9);
    }
  }
  else
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v24 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLRR,printRoutePointArray,fRoutePoints is a null pointer", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
}

uint64_t sub_1907729B8(uint64_t a1)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  v10[0] = @"raceRoutePercentageOfMatchedPoints";
  int v2 = *(_DWORD *)(v1 + 508);
  if (v2) {
    double v3 = (double)*(int *)(v1 + 500) * 100.0 / (double)v2;
  }
  else {
    double v3 = 0.0;
  }
  v11[0] = [NSNumber numberWithDouble:v3];
  v10[1] = @"raceRouteTimeTraveledOnRoute";
  v11[1] = [NSNumber numberWithDouble:*(double *)(v1 + 336)];
  _DWORD v10[2] = @"raceRouteTimeTraveledOffRoute";
  CFTypeRef v11[2] = [NSNumber numberWithDouble:*(double *)(v1 + 344)];
  void v10[3] = @"raceRouteDistanceTraveledOnRoute";
  void v11[3] = [NSNumber numberWithDouble:*(double *)(v1 + 352)];
  v10[4] = @"raceRouteDistanceTraveledOffRoute";
  v11[4] = [NSNumber numberWithDouble:*(double *)(v1 + 360)];
  v10[5] = @"raceRouteOnRouteAveragePace";
  v11[5] = [NSNumber numberWithDouble:*(double *)(v1 + 368)];
  void v10[6] = @"signalEnvironmentType";
  void v11[6] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 40)];
  v10[7] = @"workoutActivityType";
  v11[7] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 44)];
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:8];
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  uint64_t v5 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 138477827;
    uint64_t v9 = v4;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLRR,sendRacingRouteAnalytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::sendRacingRouteAnalytics()_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v4;
}

uint64_t sub_190772C90(uint64_t a1, void *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    unint64_t v49 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,null data point", buf, 2u);
    }
    int v50 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v50) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v48 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v48);
    if (v48 != (char *)buf) {
      goto LABEL_17;
    }
    return 0;
  }
  objc_msgSend(a2, "latitude_deg");
  double v11 = v10;
  objc_msgSend(a2, "longitude_deg");
  if (!sub_190771D68(v11, v12)
    || (objc_msgSend(a3, "latitude_deg"), double v14 = v13, objc_msgSend(a3, "longitude_deg"), !sub_190771D68(v14, v15)))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    unint64_t v39 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(a2, "latitude_deg");
      uint64_t v41 = v40;
      objc_msgSend(a2, "longitude_deg");
      uint64_t v43 = v42;
      objc_msgSend(a3, "latitude_deg");
      uint64_t v45 = v44;
      objc_msgSend(a3, "longitude_deg");
      *(_DWORD *)__n128 buf = 134284289;
      uint64_t v76 = v41;
      __int16 v77 = 2049;
      uint64_t v78 = v43;
      __int16 v79 = 2049;
      uint64_t v80 = v45;
      __int16 v81 = 2049;
      uint64_t v82 = v46;
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid data point,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
    }
    int v47 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v47) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    objc_msgSend(a2, "latitude_deg");
    objc_msgSend(a2, "longitude_deg");
    objc_msgSend(a3, "latitude_deg");
    objc_msgSend(a3, "longitude_deg");
    long long v48 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v48);
    if (v48 != (char *)buf) {
LABEL_17:
    }
      free(v48);
    return 0;
  }
  if (!*a4)
  {
    objc_msgSend(a2, "latitude_deg");
    *(void *)(a1 + 120) = v51;
    objc_msgSend(a2, "longitude_deg");
    *(void *)(a1 + 128) = v52;
    objc_msgSend(a2, "altitude_m");
    *(void *)(a1 + 136) = v53;
    objc_msgSend(a2, "timestamp_s");
    *(void *)(a1 + 152) = v54;
    objc_msgSend(a2, "odometer_m");
    *(void *)(a1 + 144) = v55;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(void *)(a1 + 192) = 0;
    objc_msgSend(a3, "odometer_m");
    *(void *)(a1 + 200) = v56;
    objc_msgSend(a3, "latitude_deg");
    *(void *)(a1 + 208) = v57;
    objc_msgSend(a3, "longitude_deg");
    *(void *)(a1 + 216) = v58;
    objc_msgSend(a3, "altitude_m");
    *(void *)(a1 + 224) = v59;
    objc_msgSend(a3, "timestamp_s");
    *(void *)(a1 + 240) = v60;
    objc_msgSend(a3, "odometer_m");
    *(void *)(a1 + 232) = v61;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)(a1 + 280) = 0;
    objc_msgSend(a3, "odometer_m");
    *(void *)(a1 + 288) = v62;
    long long v63 = *(_OWORD *)(a1 + 168);
    long long v64 = *(_OWORD *)(a1 + 184);
    uint64_t v65 = *(void *)(a1 + 200);
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 152);
    long long v66 = *(_OWORD *)(a1 + 136);
    long long v67 = *(_OWORD *)(a1 + 120);
    *(void *)(a5 + 80) = v65;
    *(_OWORD *)(a5 + 48) = v63;
    *(_OWORD *)(a5 + 64) = v64;
    *(_OWORD *)a5 = v67;
    *(_OWORD *)(a5 + 16) = v66;
    long long v69 = *(_OWORD *)(a1 + 256);
    long long v68 = *(_OWORD *)(a1 + 272);
    long long v70 = *(_OWORD *)(a1 + 240);
    *(void *)(a5 + 168) = *(void *)(a1 + 288);
    *(_OWORD *)(a5 + 120) = v70;
    *(_OWORD *)(a5 + 152) = v68;
    *(_OWORD *)(a5 + 136) = v69;
    long long v71 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a5 + 88) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a5 + 104) = v71;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 184);
    *(void *)(a1 + 376) = *(void *)(a1 + 200);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a1 + 136);
    *(void *)(a1 + 464) = *(void *)(a1 + 288);
    long long v72 = *(_OWORD *)(a1 + 272);
    long long v73 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a1 + 448) = v72;
    long long v74 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 400) = v74;
    *(_OWORD *)(a1 + 416) = v73;
    return 1;
  }
  objc_msgSend(a2, "latitude_deg");
  *(void *)a5 = v16;
  objc_msgSend(a2, "longitude_deg");
  *(void *)(a5 + 8) = v17;
  objc_msgSend(a2, "altitude_m");
  *(void *)(a5 + 16) = v18;
  objc_msgSend(a2, "timestamp_s");
  *(void *)(a5 + 32) = v19;
  objc_msgSend(a2, "odometer_m");
  *(void *)(a5 + 24) = v20;
  objc_msgSend(a2, "timestamp_s");
  *(double *)(a5 + 40) = v21 - *(double *)(a1 + 152);
  *(void *)(a5 + 48) = *(void *)(a1 + 344);
  objc_msgSend(a2, "odometer_m");
  *(double *)(a5 + 56) = v22 - *(double *)(a1 + 144);
  *(void *)(a5 + 64) = *(void *)(a1 + 360);
  objc_msgSend(a3, "latitude_deg");
  *(void *)(a5 + 88) = v23;
  objc_msgSend(a3, "longitude_deg");
  *(void *)(a5 + 96) = v24;
  objc_msgSend(a3, "altitude_m");
  *(void *)(a5 + 104) = v25;
  objc_msgSend(a3, "timestamp_s");
  *(void *)(a5 + 120) = v26;
  objc_msgSend(a3, "odometer_m");
  *(void *)(a5 + 112) = v27;
  objc_msgSend(a3, "timestamp_s");
  *(double *)(a5 + 128) = v28 - *(double *)(a1 + 240);
  *(void *)(a5 + 136) = *(void *)(a1 + 432);
  objc_msgSend(a3, "odometer_m");
  *(double *)(a5 + 144) = v29 - *(double *)(a1 + 232);
  *(void *)(a5 + 152) = *(void *)(a1 + 448);
  if (*a4 == 1) {
    sub_19077334C(a1, (double *)a5, (double *)(a5 + 88));
  }
  uint64_t result = sub_1907733A8(a1, a5, a5 + 88);
  if (result)
  {
    sub_1907737A8(a1, a5, (double *)(a5 + 88));
    long long v31 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)a5;
    *(_OWORD *)(a1 + 312) = v31;
    long long v32 = *(_OWORD *)(a5 + 32);
    long long v33 = *(_OWORD *)(a5 + 48);
    long long v34 = *(_OWORD *)(a5 + 64);
    *(void *)(a1 + 376) = *(void *)(a5 + 80);
    *(_OWORD *)(a1 + 344) = v33;
    *(_OWORD *)(a1 + 360) = v34;
    *(_OWORD *)(a1 + 328) = v32;
    long long v36 = *(_OWORD *)(a5 + 136);
    long long v35 = *(_OWORD *)(a5 + 152);
    long long v37 = *(_OWORD *)(a5 + 120);
    *(void *)(a1 + 464) = *(void *)(a5 + 168);
    *(_OWORD *)(a1 + 432) = v36;
    *(_OWORD *)(a1 + 448) = v35;
    *(_OWORD *)(a1 + 416) = v37;
    long long v38 = *(_OWORD *)(a5 + 104);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a1 + 400) = v38;
    return 1;
  }
  return result;
}

double sub_19077334C(uint64_t a1, double *a2, double *a3)
{
  if (*(unsigned char *)(a1 + 476))
  {
    a2[6] = a2[6] + a2[5] - *(double *)(a1 + 336);
    a3[6] = a3[6] + a3[5] - *(double *)(a1 + 424);
    a2[8] = a2[8] + a2[7] - *(double *)(a1 + 352);
    double result = a3[8] + a3[7] - *(double *)(a1 + 440);
    a3[8] = result;
  }
  return result;
}

uint64_t sub_1907733A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL v6 = vabdd_f64(*(double *)a3, *(double *)(a1 + 384)) > 0.0000001
    || vabdd_f64(*(double *)(a3 + 8), *(double *)(a1 + 392)) > 0.0000001;
  BOOL v7 = vabdd_f64(*(double *)a2, *(double *)(a1 + 296)) <= 0.0000001
    && vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 304)) <= 0.0000001;
  if (*(unsigned char *)(a1 + 475)) {
    BOOL v6 = 1;
  }
  uint64_t v8 = v6 | v7;
  if (v6 || v7)
  {
    if (*(double *)(a3 + 32) < *(double *)(a1 + 416))
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v9 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a2 + 32);
        *(_DWORD *)__n128 buf = 134283521;
        uint64_t v28 = v10;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "CLRR,EvaluateProjectionStatus,projection went backward,timestamp,%{private}.1lf", buf, 0xCu);
      }
      uint64_t v11 = a1 + 384;
      uint64_t v12 = a1 + 296;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::EvaluateProjectionStatus(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      long long v13 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v11;
      *(_OWORD *)(a3 + 16) = v13;
      long long v14 = *(_OWORD *)(v11 + 32);
      long long v15 = *(_OWORD *)(v11 + 48);
      long long v16 = *(_OWORD *)(v11 + 64);
      *(void *)(a3 + 80) = *(void *)(v11 + 80);
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v16;
      *(_OWORD *)(a3 + 32) = v14;
      long long v17 = *(_OWORD *)(a2 + 32);
      long long v19 = *(_OWORD *)(v12 + 48);
      long long v18 = *(_OWORD *)(v12 + 64);
      uint64_t v20 = *(void *)(v12 + 80);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v12 + 32);
      long long v21 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v12;
      *(_OWORD *)(a2 + 16) = v21;
      *(void *)(a2 + 80) = v20;
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)(a2 + 64) = v18;
      *(_OWORD *)(a2 + 32) = v17;
    }
  }
  else
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v22 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a2 + 32);
      *(_DWORD *)__n128 buf = 134283521;
      uint64_t v28 = v23;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEFAULT, "CLRR,EvaluateProjectionStatus,user moved but its projection on reference route is same as before,skip this point,timestamp,%{private}.1lf", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::EvaluateProjectionStatus(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  return v8;
}

void sub_1907737A8(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  double v5 = *(double *)(a2 + 56);
  double v6 = a3[7];
  double v7 = *(double *)(a2 + 40);
  double v8 = a3[5];
  double v9 = fabs(v5);
  double v10 = v7 / v5;
  uint64_t v11 = (uint64_t *)(a1 + 376);
  BOOL v12 = v9 > 0.0000001;
  double v13 = 0.0;
  if (v9 <= 0.0000001) {
    double v14 = 0.0;
  }
  else {
    double v14 = v10;
  }
  if (v12) {
    uint64_t v11 = (uint64_t *)(a3 + 3);
  }
  uint64_t v15 = *v11;
  *(double *)(a2 + 72) = v14;
  *(void *)(a2 + 80) = v15;
  if (fabs(v6) <= 0.0000001)
  {
    double v16 = *(double *)(a1 + 464);
  }
  else
  {
    double v13 = v8 / v6;
    double v16 = a3[3] - (v8 - v7) / (v8 / v6);
  }
  a3[9] = v13;
  a3[10] = v16;
  if (*(unsigned char *)(a1 + 483) && v16 > *(double *)(a1 + 544))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v17 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "CLRR,updateDistanceAndAveragePace,DistanceAlongReferenceRoute passed upper threshold", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::updateDistanceAndAveragePace(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v18 = *(void *)(a1 + 544);
  }
  else
  {
    if (v16 >= 0.0) {
      return;
    }
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v19 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEBUG, "CLRR,updateDistanceAndAveragePace,DistanceAlongReferenceRoute passed lower threshold", buf, 2u);
    }
    uint64_t v18 = 0;
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::updateDistanceAndAveragePace(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  *((void *)a3 + 10) = v18;
}

uint64_t sub_190773B10(uint64_t a1, void *a2, void *a3, void *a4, double *a5, int *a6, uint64_t a7)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  if (!a3 || !a4)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v33 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,null input data or segment point", buf, 2u);
    }
    int v34 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v34) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  objc_msgSend(a2, "latitude_deg");
  double v15 = v14;
  objc_msgSend(a2, "longitude_deg");
  if (!sub_190771D68(v15, v16)
    || (objc_msgSend(a3, "latitude_deg"), double v18 = v17, objc_msgSend(a3, "longitude_deg"), !sub_190771D68(v18, v19))
    || (objc_msgSend(a4, "latitude_deg"), double v21 = v20, objc_msgSend(a4, "longitude_deg"), !sub_190771D68(v21, v22)))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v36 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(a2, "latitude_deg");
      uint64_t v38 = v37;
      objc_msgSend(a2, "longitude_deg");
      uint64_t v40 = v39;
      objc_msgSend(a3, "latitude_deg");
      uint64_t v42 = v41;
      objc_msgSend(a3, "longitude_deg");
      uint64_t v44 = v43;
      objc_msgSend(a4, "latitude_deg");
      uint64_t v46 = v45;
      objc_msgSend(a4, "longitude_deg");
      *(_DWORD *)__n128 buf = 134284801;
      uint64_t v122 = v38;
      __int16 v123 = 2049;
      uint64_t v124 = v40;
      __int16 v125 = 2049;
      uint64_t v126 = v42;
      __int16 v127 = 2049;
      uint64_t v128 = v44;
      __int16 v129 = 2049;
      uint64_t v130 = v46;
      __int16 v131 = 2049;
      uint64_t v132 = v47;
      _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid input data or segment point,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
    }
    int v48 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v48) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    objc_msgSend(a2, "latitude_deg");
    objc_msgSend(a2, "longitude_deg");
    objc_msgSend(a3, "latitude_deg");
    objc_msgSend(a3, "longitude_deg");
    objc_msgSend(a4, "latitude_deg");
    objc_msgSend(a4, "longitude_deg");
    goto LABEL_53;
  }
  int v23 = *a6;
  objc_msgSend(a4, "latitude_deg");
  double v25 = v24;
  objc_msgSend(a3, "latitude_deg");
  double v27 = v26;
  objc_msgSend(a3, "longitude_deg");
  double v29 = v28;
  objc_msgSend(a4, "longitude_deg");
  double v31 = v29 + 360.0;
  if (v29 >= 0.0) {
    double v31 = v29;
  }
  if (v30 < 0.0) {
    double v30 = v30 + 360.0;
  }
  double v32 = v30 - v31;
  if (v30 - v31 <= 180.0)
  {
    if (v32 < -180.0) {
      double v32 = v32 + 360.0;
    }
  }
  else
  {
    double v32 = v32 + -360.0;
  }
  double v49 = v25 - v27;
  objc_msgSend(a4, "altitude_m");
  double v51 = v50;
  objc_msgSend(a3, "altitude_m");
  double v53 = v52;
  objc_msgSend(a4, "timestamp_s");
  double v55 = v54;
  objc_msgSend(a3, "timestamp_s");
  double v57 = v56;
  objc_msgSend(a4, "odometer_m");
  double v59 = v58;
  objc_msgSend(a3, "odometer_m");
  double v61 = v60;
  objc_msgSend(a2, "latitude_deg");
  if (v23)
  {
    *(void *)a7 = v62;
    objc_msgSend(a2, "longitude_deg");
    *(void *)(a7 + 8) = v63;
    objc_msgSend(a2, "altitude_m");
    *(void *)(a7 + 16) = v64;
    objc_msgSend(a2, "timestamp_s");
    *(void *)(a7 + 32) = v65;
    objc_msgSend(a2, "odometer_m");
    *(void *)(a7 + 24) = v66;
    objc_msgSend(a2, "timestamp_s");
    *(double *)(a7 + 40) = v67 - *(double *)(a1 + 152);
    *(void *)(a7 + 48) = *(void *)(a1 + 344);
    objc_msgSend(a2, "odometer_m");
    *(double *)(a7 + 56) = v68 - *(double *)(a1 + 144);
    *(void *)(a7 + 64) = *(void *)(a1 + 360);
    objc_msgSend(a3, "latitude_deg");
    *(double *)(a7 + 88) = v69 + *a5 * v49;
    objc_msgSend(a3, "longitude_deg");
    double v71 = v70 + *a5 * v32;
    *(double *)(a7 + 96) = v71;
    if (sub_190771D68(*(double *)(a7 + 88), v71))
    {
      objc_msgSend(a3, "altitude_m");
      *(double *)(a7 + 104) = v72 + *a5 * (v51 - v53);
      objc_msgSend(a3, "timestamp_s");
      *(double *)(a7 + 120) = v73 + *a5 * (v55 - v57);
      objc_msgSend(a3, "odometer_m");
      double v75 = v74 + *a5 * (v59 - v61);
      *(double *)(a7 + 112) = v75;
      *(double *)(a7 + 128) = *(double *)(a7 + 120) - *(double *)(a1 + 240);
      *(void *)(a7 + 136) = *(void *)(a1 + 432);
      *(double *)(a7 + 144) = v75 - *(double *)(a1 + 232);
      *(void *)(a7 + 152) = *(void *)(a1 + 448);
      if (*a6 == 1) {
        sub_19077334C(a1, (double *)a7, (double *)(a7 + 88));
      }
      uint64_t result = sub_1907733A8(a1, a7, a7 + 88);
      if (result)
      {
        sub_1907737A8(a1, a7, (double *)(a7 + 88));
        long long v76 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)a7;
        *(_OWORD *)(a1 + 312) = v76;
        long long v77 = *(_OWORD *)(a7 + 32);
        long long v78 = *(_OWORD *)(a7 + 48);
        long long v79 = *(_OWORD *)(a7 + 64);
        *(void *)(a1 + 376) = *(void *)(a7 + 80);
        *(_OWORD *)(a1 + 344) = v78;
        *(_OWORD *)(a1 + 360) = v79;
        *(_OWORD *)(a1 + 328) = v77;
        long long v81 = *(_OWORD *)(a7 + 136);
        long long v80 = *(_OWORD *)(a7 + 152);
        long long v82 = *(_OWORD *)(a7 + 120);
        *(void *)(a1 + 464) = *(void *)(a7 + 168);
        *(_OWORD *)(a1 + 432) = v81;
        *(_OWORD *)(a1 + 448) = v80;
        *(_OWORD *)(a1 + 416) = v82;
        long long v83 = *(_OWORD *)(a7 + 104);
        *(_OWORD *)(a1 + 384) = *(_OWORD *)(a7 + 88);
        *(_OWORD *)(a1 + 400) = v83;
        return 1;
      }
      return result;
    }
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v112 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)(a7 + 88);
      uint64_t v114 = *(void *)(a7 + 96);
      *(_DWORD *)__n128 buf = 134283777;
      uint64_t v122 = v113;
      __int16 v123 = 2049;
      uint64_t v124 = v114;
      _os_log_impl(&dword_1906B8000, v112, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid referenceState,%{private}.7lf,%{private}.7lf", buf, 0x16u);
    }
    int v115 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v115) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1)
    {
LABEL_53:
      long long v120 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, CLRoutePoint *, const double &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v120);
      if (v120 != (char *)buf) {
        free(v120);
      }
      return 0;
    }
LABEL_56:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_53;
  }
  double v84 = v59 - v61;
  *(void *)(a1 + 120) = v62;
  uint64_t v85 = (_OWORD *)(a1 + 120);
  objc_msgSend(a2, "longitude_deg");
  *(void *)(a1 + 128) = v86;
  objc_msgSend(a2, "altitude_m");
  *(void *)(a1 + 136) = v87;
  objc_msgSend(a2, "timestamp_s");
  *(void *)(a1 + 152) = v88;
  objc_msgSend(a2, "odometer_m");
  *(void *)(a1 + 144) = v89;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  objc_msgSend(a3, "odometer_m");
  *(double *)(a1 + 200) = v90 + *a5 * v84;
  objc_msgSend(a3, "latitude_deg");
  *(double *)(a1 + 208) = v91 + *a5 * v49;
  uint64_t v92 = (long long *)(a1 + 208);
  objc_msgSend(a3, "longitude_deg");
  double v94 = v93 + *a5 * v32;
  *(double *)(a1 + 216) = v94;
  if (sub_190771D68(*(double *)(a1 + 208), v94))
  {
    objc_msgSend(a3, "altitude_m");
    *(double *)(a1 + 224) = v95 + *a5 * (v51 - v53);
    objc_msgSend(a3, "timestamp_s");
    *(double *)(a1 + 240) = v96 + *a5 * (v55 - v57);
    objc_msgSend(a3, "odometer_m");
    *(double *)(a1 + 232) = v97 + *a5 * v84;
    *(void *)(a1 + 280) = 0;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    objc_msgSend(a3, "odometer_m");
    *(double *)(a1 + 288) = v98 + *a5 * v84;
    long long v99 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)a7 = *v85;
    *(_OWORD *)(a7 + 16) = v99;
    long long v100 = *(_OWORD *)(a1 + 152);
    long long v101 = *(_OWORD *)(a1 + 168);
    long long v102 = *(_OWORD *)(a1 + 184);
    *(void *)(a7 + 80) = *(void *)(a1 + 200);
    *(_OWORD *)(a7 + 48) = v101;
    *(_OWORD *)(a7 + 64) = v102;
    *(_OWORD *)(a7 + 32) = v100;
    uint64_t v103 = *(void *)(a1 + 288);
    long long v105 = *(_OWORD *)(a1 + 240);
    long long v104 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a7 + 152) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a7 + 120) = v105;
    *(void *)(a7 + 168) = v103;
    *(_OWORD *)(a7 + 136) = v104;
    long long v106 = *v92;
    *(_OWORD *)(a7 + 104) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a7 + 88) = v106;
    long long v107 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 344) = v107;
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 184);
    *(void *)(a1 + 376) = *(void *)(a1 + 200);
    long long v108 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 296) = *v85;
    *(_OWORD *)(a1 + 312) = v108;
    *(void *)(a1 + 464) = *(void *)(a1 + 288);
    long long v109 = *(_OWORD *)(a1 + 272);
    long long v110 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a1 + 448) = v109;
    long long v111 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 384) = *v92;
    *(_OWORD *)(a1 + 400) = v111;
    *(_OWORD *)(a1 + 416) = v110;
    return 1;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  uint64_t v116 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v117 = *(void *)(a1 + 208);
    uint64_t v118 = *(void *)(a1 + 216);
    *(_DWORD *)__n128 buf = 134283777;
    uint64_t v122 = v117;
    __int16 v123 = 2049;
    uint64_t v124 = v118;
    _os_log_impl(&dword_1906B8000, v116, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid raceStartPointOnReferenceRoute,%{private}.7lf,%{private}.7lf", buf, 0x16u);
  }
  int v119 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v119)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  return result;
}

uint64_t sub_190774598(uint64_t a1, void *a2, void *a3, _DWORD *a4, int *a5, uint64_t a6)
{
  uint64_t v271 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    long long v33 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,input data array is null", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_440;
    }
    goto LABEL_475;
  }
  unint64_t v7 = *a4;
  if ((v7 & 0x80000000) != 0
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3) <= v7)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v32 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid matrix index", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1)
    {
LABEL_440:
      LOWORD(v262[1]) = 0;
      uint64_t v232 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v232);
      if (v232 != (char *)buf) {
        free(v232);
      }
      return 0;
    }
LABEL_475:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_440;
  }
  double v10 = a3;
  uint64_t v12 = [a3 count];
  int v247 = *(_DWORD *)(a1 + 524);
  char v259 = 0;
  *(unsigned char *)(a1 + 482) = 0;
  double v256 = 0;
  double v257 = 0;
  double v258 = 0;
  long long __p = 0;
  double v254 = 0;
  uint64_t v255 = 0;
  double v251 = v10;
  if (*a5 >= 2)
  {
    if (*a5 == 2)
    {
      uint64_t v245 = a6;
      unint64_t v246 = v12;
      double v248 = a2;
      double v31 = (char *)operator new(4uLL);
      *(_DWORD *)double v31 = *a4;
      double v15 = v31 + 4;
      double v254 = v31 + 4;
      uint64_t v255 = v31 + 4;
      long long __p = v31;
      char v250 = 1;
      goto LABEL_51;
    }
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v172 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v172, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,unknown point type", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_402;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1)
    {
LABEL_297:
      LOWORD(v262[1]) = 0;
      long long v164 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v164);
      goto LABEL_450;
    }
LABEL_476:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_297;
  }
  int v13 = *(_DWORD *)(a1 + 88);
  if (v13 < 1 || (int v14 = *(_DWORD *)(a1 + 92), v14 < 1) || (*a4 & 0x80000000) != 0 || *a4 >= v14 * v13)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v163 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v163, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,failed to determine neighboring cells index", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_402;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_297;
    }
    goto LABEL_476;
  }
  uint64_t v245 = a6;
  unint64_t v246 = v12;
  double v248 = a2;
  double v15 = 0;
  for (int i = -1; i != 2; ++i)
  {
    int v17 = *a4 / *(_DWORD *)(a1 + 92) + i;
    if (v17 >= 0 && v17 < *(_DWORD *)(a1 + 88))
    {
      for (int j = -1; j != 2; ++j)
      {
        int v19 = *(_DWORD *)(a1 + 92);
        int v20 = *a4 % v19 + j;
        if (v20 >= 0 && v20 < v19)
        {
          int v21 = v20 + v19 * v17;
          if (v15 >= v255)
          {
            int v23 = __p;
            uint64_t v24 = (v15 - __p) >> 2;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v26 = v255 - __p;
            if ((v255 - __p) >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              double v28 = (char *)sub_19074E100((uint64_t)&v255, v27);
              int v23 = __p;
              double v15 = v254;
            }
            else
            {
              double v28 = 0;
            }
            double v29 = (int *)&v28[4 * v24];
            int *v29 = v21;
            double v22 = (char *)(v29 + 1);
            while (v15 != v23)
            {
              int v30 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *--double v29 = v30;
            }
            long long __p = (char *)v29;
            uint64_t v255 = &v28[4 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(_DWORD *)double v15 = v21;
            double v22 = v15 + 4;
          }
          double v254 = v22;
          double v15 = v22;
        }
      }
    }
  }
  char v250 = 0;
  double v31 = __p;
  double v10 = v251;
LABEL_51:
  double v252 = (int *)(a1 + 524);
  unint64_t v36 = v15 - v31;
  if (v15 != v31)
  {
    unint64_t v37 = 0;
    while (1)
    {
      if (v36 >= 5)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v38 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
        {
          int v39 = *(_DWORD *)&__p[4 * v37];
          *(_DWORD *)__n128 buf = 67240192;
          *(_DWORD *)double v269 = v39;
          _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,processing matrix cell index,%{public}d", buf, 8u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v159 = *(_DWORD *)&__p[4 * v37];
          LODWORD(v262[1]) = 67240192;
          HIDWORD(v262[1]) = v159;
          double v160 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v160);
          if (v160 != (char *)buf) {
            free(v160);
          }
        }
      }
      if (v250)
      {
        unsigned int v40 = *v252;
        int v41 = *v252 + 10;
      }
      else
      {
        int v42 = *(_DWORD *)&__p[4 * v37];
        uint64_t v43 = *(void *)(a1 + 96);
        uint64_t v44 = *(void *)(v43 + 24 * v42);
        uint64_t v45 = *(void *)(v43 + 24 * v42 + 8);
        if (v45 == v44)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          double v96 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            int v97 = *(_DWORD *)&__p[4 * v37];
            *(_DWORD *)__n128 buf = 67109120;
            *(_DWORD *)double v269 = v97;
            _os_log_impl(&dword_1906B8000, v96, OS_LOG_TYPE_DEBUG, "CLRR,updateSearchRange,empty matrix cell at index,%d,", buf, 8u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_261;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v98 = *(_DWORD *)&__p[4 * v37];
          LODWORD(v262[1]) = 67109120;
          HIDWORD(v262[1]) = v98;
          long long v99 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::updateSearchRange(const int &, int &, int &, BOOL &) const", "CoreLocation: %s\n", v99);
          goto LABEL_285;
        }
        unint64_t v46 = 0;
        unsigned int v40 = -1;
        uint64_t v47 = 16;
        int v41 = -1;
        while (1)
        {
          if (((v45 - v44) >> 3) - 1 <= v46)
          {
            unint64_t v51 = v46;
          }
          else
          {
            unint64_t v48 = v46 + 1;
            unsigned int v49 = *(_DWORD *)(v44 + 8 * (v46 + 1)) - *(_DWORD *)(v44 + 8 * v46 + 4);
            uint64_t v50 = v47;
            unint64_t v51 = v46;
            while (v49 <= 0x3C)
            {
              unint64_t v51 = v48;
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              double v52 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__n128 buf = 0;
                _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEFAULT, "CLRR,updateSearchRange,detected a short segment across the cell border,expanding the search range", buf, 2u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                LOWORD(v262[1]) = 0;
                double v53 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::updateSearchRange(const int &, int &, int &, BOOL &) const", "CoreLocation: %s\n", v53);
                if (v53 != (char *)buf) {
                  free(v53);
                }
              }
              int v42 = *(_DWORD *)&__p[4 * v37];
              uint64_t v43 = *(void *)(a1 + 96);
              uint64_t v44 = *(void *)(v43 + 24 * v42);
              if (((*(void *)(v43 + 24 * v42 + 8) - v44) >> 3) - 1 <= v51) {
                break;
              }
              unint64_t v48 = v51 + 1;
              unsigned int v49 = *(_DWORD *)(v44 + v50) - *(_DWORD *)(v44 + 8 * v46 + 4);
              v50 += 8;
            }
          }
          int v54 = *(_DWORD *)(v44 + 8 * v46);
          int v55 = *(_DWORD *)(v44 + 8 * v51 + 4);
          if (v55 >= v54)
          {
            unsigned int v56 = *v252;
            if (v54 > *v252) {
              unsigned int v56 = v54;
            }
            if (v56 - v54 <= v55 - v54) {
              break;
            }
          }
          ++v46;
          uint64_t v44 = *(void *)(v43 + 24 * v42);
          uint64_t v45 = *(void *)(v43 + 24 * v42 + 8);
          v47 += 8;
          if ((v45 - v44) >> 3 <= v46) {
            goto LABEL_85;
          }
        }
        unsigned int v40 = v56;
        int v41 = v55;
      }
LABEL_85:
      if ((v40 & 0x80000000) == 0 && v41 >= (int)v40) {
        break;
      }
LABEL_261:
      ++v37;
      unint64_t v36 = v254 - __p;
      double v10 = v251;
      if (v37 >= (v254 - __p) >> 2) {
        goto LABEL_298;
      }
    }
    int v57 = v40 - 3;
    if (v40 < 3) {
      int v57 = 0;
    }
    if (v57 <= *v252) {
      unint64_t v58 = *v252;
    }
    else {
      unint64_t v58 = v57;
    }
    int v59 = v41 + 3;
    if ([v251 count] <= (unint64_t)v59) {
      int v59 = [v251 count] - 1;
    }
    if (v59 < (int)v58)
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v60 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 67240448;
        *(_DWORD *)double v269 = v58;
        *(_WORD *)&v269[4] = 1026;
        *(_DWORD *)&v269[6] = v59;
        _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid search range index,fromIndex,%{public}d,toIndex,%{public}d", buf, 0xEu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LODWORD(v262[1]) = 67240448;
        HIDWORD(v262[1]) = v58;
        LOWORD(v262[2]) = 1026;
        *(_DWORD *)((char *)&v262[2] + 2) = v59;
        double v61 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v61);
        goto LABEL_180;
      }
LABEL_256:
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v149 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
      {
        int v150 = *(_DWORD *)&__p[4 * v37];
        *(_DWORD *)__n128 buf = 67240192;
        *(_DWORD *)double v269 = v150;
        _os_log_impl(&dword_1906B8000, v149, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,no points within the accepted distance in matrix cell index,%{public}d", buf, 8u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_261;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v161 = *(_DWORD *)&__p[4 * v37];
      LODWORD(v262[1]) = 67240192;
      HIDWORD(v262[1]) = v161;
      long long v99 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v99);
LABEL_285:
      if (v99 != (char *)buf) {
        free(v99);
      }
      goto LABEL_261;
    }
    objc_msgSend(v248, "latitude_deg");
    double v63 = v62;
    objc_msgSend(v248, "longitude_deg");
    double v65 = v64;
    if (sub_190771D68(v63, v64))
    {
      if ([v251 count] > v58)
      {
        if ([v251 count] <= (unint64_t)v59) {
          int v59 = [v251 count] - 1;
        }
        double v260 = 0;
        double v261 = 0;
        memset(v262, 0, sizeof(v262));
        if (*a5)
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          BOOL v68 = 0;
        }
        else
        {
          for (uint64_t k = 0; k != 11; ++k)
          {
            objc_msgSend((id)objc_msgSend(v251, "objectAtIndex:", k), "latitude_deg");
            double v107 = v106;
            objc_msgSend((id)objc_msgSend(v251, "objectAtIndex:", k), "longitude_deg");
            double v109 = sub_1906DA618((double *)a1, v63, v65, v107, v108, 0.0);
            if (v109 <= *(double *)(a1 + 576))
            {
              long long v110 = (char *)v262[2];
              if (v262[2] >= v262[3])
              {
                uint64_t v112 = (char *)v262[1];
                uint64_t v113 = (uint64_t)(v262[2] - v262[1]) >> 2;
                unint64_t v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62) {
                  sub_190718FD4();
                }
                uint64_t v115 = v262[3] - v262[1];
                if ((uint64_t)(v262[3] - v262[1]) >> 1 > v114) {
                  unint64_t v114 = v115 >> 1;
                }
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v116 = v114;
                }
                if (v116)
                {
                  uint64_t v117 = (char *)sub_19074E100((uint64_t)&v262[3], v116);
                  uint64_t v112 = (char *)v262[1];
                  long long v110 = (char *)v262[2];
                }
                else
                {
                  uint64_t v117 = 0;
                }
                uint64_t v118 = &v117[4 * v113];
                *(_DWORD *)uint64_t v118 = k;
                long long v111 = v118 + 4;
                while (v110 != v112)
                {
                  int v119 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *((_DWORD *)v118 - 1) = v119;
                  v118 -= 4;
                }
                v262[1] = v118;
                v262[2] = v111;
                v262[3] = &v117[4 * v116];
                if (v112) {
                  operator delete(v112);
                }
              }
              else
              {
                *(_DWORD *)v262[2] = k;
                long long v111 = v110 + 4;
              }
              v262[2] = v111;
              long long v120 = v261;
              if ((unint64_t)v261 >= v262[0])
              {
                uint64_t v122 = (double *)v260;
                uint64_t v123 = ((char *)v261 - (unsigned char *)v260) >> 3;
                unint64_t v124 = v123 + 1;
                if ((unint64_t)(v123 + 1) >> 61) {
                  sub_190718FD4();
                }
                uint64_t v125 = v262[0] - (void)v260;
                if ((uint64_t)(v262[0] - (void)v260) >> 2 > v124) {
                  unint64_t v124 = v125 >> 2;
                }
                if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v126 = v124;
                }
                if (v126)
                {
                  __int16 v127 = (char *)sub_190732A30((uint64_t)v262, v126);
                  uint64_t v122 = (double *)v260;
                  long long v120 = v261;
                }
                else
                {
                  __int16 v127 = 0;
                }
                uint64_t v128 = (double *)&v127[8 * v123];
                *uint64_t v128 = v109;
                uint64_t v121 = v128 + 1;
                while (v120 != v122)
                {
                  uint64_t v129 = *((void *)v120-- - 1);
                  *((void *)v128-- - 1) = v129;
                }
                double v260 = v128;
                double v261 = v121;
                v262[0] = &v127[8 * v126];
                if (v122) {
                  operator delete(v122);
                }
              }
              else
              {
                *double v261 = v109;
                uint64_t v121 = v120 + 1;
              }
              double v261 = v121;
            }
          }
          uint64_t v66 = v262[1];
          uint64_t v67 = v262[2];
          BOOL v68 = v262[2] != v262[1];
          if (v262[2] != v262[1] && !*a5)
          {
            BOOL v68 = 1;
            goto LABEL_221;
          }
        }
        if ((int)v58 <= v59)
        {
          int v69 = v59 + 1;
          unint64_t v70 = v58;
          do
          {
            objc_msgSend((id)objc_msgSend(v251, "objectAtIndex:", v70), "latitude_deg");
            double v72 = v71;
            objc_msgSend((id)objc_msgSend(v251, "objectAtIndex:", v70), "longitude_deg");
            double v74 = sub_1906DA618((double *)a1, v63, v65, v72, v73, 0.0);
            if (v74 <= *(double *)(a1 + 576))
            {
              int v75 = v70 - v58;
              long long v76 = (char *)v262[2];
              if (v262[2] >= v262[3])
              {
                long long v78 = (char *)v262[1];
                uint64_t v79 = (uint64_t)(v262[2] - v262[1]) >> 2;
                unint64_t v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 62) {
                  sub_190718FD4();
                }
                uint64_t v81 = v262[3] - v262[1];
                if ((uint64_t)(v262[3] - v262[1]) >> 1 > v80) {
                  unint64_t v80 = v81 >> 1;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v82 = v80;
                }
                if (v82)
                {
                  long long v83 = (char *)sub_19074E100((uint64_t)&v262[3], v82);
                  long long v78 = (char *)v262[1];
                  long long v76 = (char *)v262[2];
                }
                else
                {
                  long long v83 = 0;
                }
                double v84 = &v83[4 * v79];
                *(_DWORD *)double v84 = v75;
                long long v77 = v84 + 4;
                while (v76 != v78)
                {
                  int v85 = *((_DWORD *)v76 - 1);
                  v76 -= 4;
                  *((_DWORD *)v84 - 1) = v85;
                  v84 -= 4;
                }
                v262[1] = v84;
                v262[2] = v77;
                v262[3] = &v83[4 * v82];
                if (v78) {
                  operator delete(v78);
                }
              }
              else
              {
                *(_DWORD *)v262[2] = v75;
                long long v77 = v76 + 4;
              }
              v262[2] = v77;
              uint64_t v86 = v261;
              if ((unint64_t)v261 >= v262[0])
              {
                uint64_t v88 = (double *)v260;
                uint64_t v89 = ((char *)v261 - (unsigned char *)v260) >> 3;
                unint64_t v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 61) {
                  sub_190718FD4();
                }
                uint64_t v91 = v262[0] - (void)v260;
                if ((uint64_t)(v262[0] - (void)v260) >> 2 > v90) {
                  unint64_t v90 = v91 >> 2;
                }
                if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v92 = v90;
                }
                if (v92)
                {
                  double v93 = (char *)sub_190732A30((uint64_t)v262, v92);
                  uint64_t v88 = (double *)v260;
                  uint64_t v86 = v261;
                }
                else
                {
                  double v93 = 0;
                }
                double v94 = (double *)&v93[8 * v89];
                *double v94 = v74;
                uint64_t v87 = v94 + 1;
                while (v86 != v88)
                {
                  uint64_t v95 = *((void *)v86-- - 1);
                  *((void *)v94-- - 1) = v95;
                }
                double v260 = v94;
                double v261 = v87;
                v262[0] = &v93[8 * v92];
                if (v88) {
                  operator delete(v88);
                }
              }
              else
              {
                *double v261 = v74;
                uint64_t v87 = v86 + 1;
              }
              double v261 = v87;
            }
            ++v70;
          }
          while (v69 != v70);
          uint64_t v66 = v262[1];
          uint64_t v67 = v262[2];
        }
LABEL_221:
        if (v67 == v66)
        {
          int v143 = -1;
          goto LABEL_248;
        }
        uint64_t v130 = (double *)((char *)v260 + 8);
        double v131 = *(double *)v260;
        if (v260 == v261 || v130 == v261)
        {
          double v138 = *(double *)v260;
          uint64_t v139 = v260;
        }
        else
        {
          double v132 = *(double *)v260;
          uint64_t v133 = (double *)((char *)v260 + 8);
          long long v134 = (double *)v260;
          uint64_t v135 = (double *)((char *)v260 + 8);
          do
          {
            double v136 = *v135++;
            double v137 = v136;
            if (v136 < v132)
            {
              double v132 = v137;
              long long v134 = v133;
            }
            uint64_t v133 = v135;
          }
          while (v135 != v261);
          double v138 = *v134;
          uint64_t v139 = v260;
          __int16 v140 = (double *)((char *)v260 + 8);
          do
          {
            double v141 = *v140++;
            double v142 = v141;
            if (v141 < v131)
            {
              double v131 = v142;
              uint64_t v139 = v130;
            }
            uint64_t v130 = v140;
          }
          while (v140 != v261);
        }
        int v143 = *(_DWORD *)(v66 + ((v139 - (unsigned char *)v260) << 29 >> 30));
        if (v68)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v144 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349312;
            *(double *)double v269 = v138;
            *(_WORD *)&v269[8] = 1026;
            *(_DWORD *)&v269[10] = v143;
            _os_log_impl(&dword_1906B8000, v144, OS_LOG_TYPE_DEBUG, "CLRR,findNearestPointIndex,start point is matched to reference head section,min distance,%{public}.2lf,index from start of reference route,%{public}d", buf, 0x12u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 == -1)
            {
LABEL_288:
              int v264 = 134349312;
              double v265 = v138;
              __int16 v266 = 1026;
              int v267 = v143;
              double v162 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v162);
              if (v162 != (char *)buf) {
                free(v162);
              }
              goto LABEL_248;
            }
LABEL_290:
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            goto LABEL_288;
          }
        }
        else
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v145 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349312;
            *(double *)double v269 = v138;
            *(_WORD *)&v269[8] = 1026;
            *(_DWORD *)&v269[10] = v143;
            _os_log_impl(&dword_1906B8000, v145, OS_LOG_TYPE_DEBUG, "CLRR,findNearestPointIndex,min distance,%{public}.2lf,index from start of search window,%{public}d", buf, 0x12u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 == -1) {
              goto LABEL_288;
            }
            goto LABEL_290;
          }
        }
LABEL_248:
        if (v260)
        {
          double v261 = (double *)v260;
          operator delete(v260);
        }
        if (v262[1])
        {
          v262[2] = v262[1];
          operator delete((void *)v262[1]);
        }
        if (v67 != v66)
        {
          if ((v143 & 0x80000000) == 0)
          {
            int v146 = v143 + v58;
            uint64_t v147 = v257;
            if (v257 >= v258)
            {
              double v151 = (char *)v256;
              uint64_t v152 = (v257 - (unsigned char *)v256) >> 2;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
                sub_190718FD4();
              }
              uint64_t v154 = v258 - (unsigned char *)v256;
              if ((v258 - (unsigned char *)v256) >> 1 > v153) {
                unint64_t v153 = v154 >> 1;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              if (v155)
              {
                double v156 = (char *)sub_19074E100((uint64_t)&v258, v155);
                double v151 = (char *)v256;
                uint64_t v147 = v257;
              }
              else
              {
                double v156 = 0;
              }
              char v157 = &v156[4 * v152];
              *(_DWORD *)char v157 = v146;
              uint64_t v148 = v157 + 4;
              while (v147 != v151)
              {
                int v158 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v157 - 1) = v158;
                v157 -= 4;
              }
              double v256 = v157;
              double v257 = v148;
              double v258 = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(_DWORD *)double v257 = v146;
              uint64_t v148 = v147 + 4;
            }
            double v257 = v148;
          }
          goto LABEL_261;
        }
        goto LABEL_256;
      }
      if (*(unsigned char *)(a1 + 479))
      {
        *(unsigned char *)(a1 + 475) = 1;
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        long long v101 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_DEFAULT, "CLRR,findNearestPointIndex,reached end of reference route", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_256;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LOWORD(v262[1]) = 0;
        double v61 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v61);
      }
      else
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        long long v102 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v103 = [v251 count];
          *(_DWORD *)__n128 buf = 67240448;
          *(_DWORD *)double v269 = v58;
          *(_WORD *)&v269[4] = 2050;
          *(void *)&v269[6] = v103;
          _os_log_impl(&dword_1906B8000, v102, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid search index,%{public}d,array size,%{public}lu", buf, 0x12u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_256;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v104 = [v251 count];
        LODWORD(v262[1]) = 67240448;
        HIDWORD(v262[1]) = v58;
        LOWORD(v262[2]) = 2050;
        *(void *)((char *)&v262[2] + 2) = v104;
        double v61 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v61);
      }
    }
    else
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      long long v100 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134283777;
        *(double *)double v269 = v63;
        *(_WORD *)&v269[8] = 2049;
        *(double *)&v269[10] = v65;
        _os_log_impl(&dword_1906B8000, v100, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_256;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      LODWORD(v262[1]) = 134283777;
      *(double *)((char *)&v262[1] + 4) = v63;
      WORD2(v262[2]) = 2049;
      *(double *)((char *)&v262[2] + 6) = v65;
      double v61 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v61);
    }
LABEL_180:
    if (v61 != (char *)buf) {
      free(v61);
    }
    goto LABEL_256;
  }
LABEL_298:
  unsigned __int8 v165 = (int *)v256;
  if (v257 == v256)
  {
    *(unsigned char *)(a1 + 484) = 1;
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v173 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v173, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,no matched point is found in the current or neighboring cells.Skip this point.", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_402;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_449;
    }
    goto LABEL_479;
  }
  double v166 = (char *)v256 + 4;
  if ((char *)v256 + 4 == v257)
  {
    unint64_t v169 = v246;
  }
  else
  {
    int v167 = *(_DWORD *)v256;
    long long v168 = (char *)v256 + 4;
    unint64_t v169 = v246;
    do
    {
      int v171 = *(_DWORD *)v168;
      v168 += 4;
      int v170 = v171;
      if (v171 < v167)
      {
        int v167 = v170;
        unsigned __int8 v165 = (int *)v166;
      }
      double v166 = v168;
    }
    while (v168 != v257);
  }
  int v174 = *v165;
  *(_DWORD *)(a1 + 524) = v174;
  if (v174 >= *(_DWORD *)(a1 + 488))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v179 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      int v180 = *(_DWORD *)(a1 + 524);
      int v181 = *(_DWORD *)(a1 + 488);
      *(_DWORD *)__n128 buf = 67240448;
      *(_DWORD *)double v269 = v180;
      *(_WORD *)&v269[4] = 1026;
      *(_DWORD *)&v269[6] = v181;
      _os_log_impl(&dword_1906B8000, v179, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,index exceeded buffer range,last matched index,%{public}d,buffer size,%{public}d", buf, 0xEu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_402;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v182 = *(_DWORD *)(a1 + 524);
    int v183 = *(_DWORD *)(a1 + 488);
    LODWORD(v262[1]) = 67240448;
    HIDWORD(v262[1]) = v182;
    LOWORD(v262[2]) = 1026;
    *(_DWORD *)((char *)&v262[2] + 2) = v183;
    long long v164 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v164);
    goto LABEL_450;
  }
  if ((*a5 - 1) >= 2)
  {
    if (!*a5)
    {
      unint64_t v184 = *(unsigned int *)(a1 + 540);
      if ((v184 & 0x80000000) != 0 || [v10 count] <= v184)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        long double v189 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          int v190 = *(_DWORD *)(a1 + 540);
          *(_DWORD *)__n128 buf = 67240192;
          *(_DWORD *)double v269 = v190;
          _os_log_impl(&dword_1906B8000, v189, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid raceStartLineProximityIndex,%{public}d", buf, 8u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_402;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v191 = *(_DWORD *)(a1 + 540);
        LODWORD(v262[1]) = 67240192;
        HIDWORD(v262[1]) = v191;
        long long v164 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v164);
        goto LABEL_450;
      }
      if (*(_DWORD *)(a1 + 524) > *(_DWORD *)(a1 + 540))
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        long double v185 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          int v186 = *(_DWORD *)(a1 + 524);
          int v187 = *(_DWORD *)(a1 + 540);
          *(_DWORD *)__n128 buf = 67240448;
          *(_DWORD *)double v269 = v186;
          *(_WORD *)&v269[4] = 1026;
          *(_DWORD *)&v269[6] = v187;
          _os_log_impl(&dword_1906B8000, v185, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,user joined the race at a wrong location,lastMatchedPointIndex,%{public}d,raceStartLineProximityIndex,%{public}d", buf, 0xEu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v240 = *(_DWORD *)(a1 + 524);
          int v241 = *(_DWORD *)(a1 + 540);
          LODWORD(v262[1]) = 67240448;
          HIDWORD(v262[1]) = v240;
          LOWORD(v262[2]) = 1026;
          *(_DWORD *)((char *)&v262[2] + 2) = v241;
          double v242 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v242);
          if (v242 != (char *)buf) {
            free(v242);
          }
        }
        uint64_t v34 = 0;
        *double v252 = v247;
        goto LABEL_403;
      }
    }
LABEL_375:
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v202 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v203 = *a5;
      int v204 = *v252;
      *(_DWORD *)__n128 buf = 67240448;
      *(_DWORD *)double v269 = v203;
      *(_WORD *)&v269[4] = 1026;
      *(_DWORD *)&v269[6] = v204;
      _os_log_impl(&dword_1906B8000, v202, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,pointType,%{public}d,last matched index,%{public}d", buf, 0xEu);
    }
    double v205 = v251;
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v233 = *a5;
      int v234 = *v252;
      LODWORD(v262[1]) = 67240448;
      HIDWORD(v262[1]) = v233;
      LOWORD(v262[2]) = 1026;
      *(_DWORD *)((char *)&v262[2] + 2) = v234;
      int v235 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v235);
      if (v235 != (char *)buf) {
        free(v235);
      }
      double v205 = v251;
    }
    uint64_t v206 = *v252;
    if ([v205 count] - 1 == v206 && *(unsigned char *)(a1 + 479))
    {
      *(unsigned char *)(a1 + 475) = 1;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v207 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v207, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,reached end of reference route", buf, 2u);
      }
      double v205 = v251;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LOWORD(v262[1]) = 0;
        double v236 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v236);
        if (v236 != (char *)buf) {
          free(v236);
        }
        double v205 = v251;
      }
    }
    double v208 = v248;
    if (!*(unsigned char *)(a1 + 475)
      && *(unsigned char *)(a1 + 483)
      && *(double *)(a1 + 376) >= *(double *)(a1 + 544) - *(double *)(a1 + 576))
    {
      int v211 = [v205 count];
      double v212 = *(double *)v245;
      double v213 = *(double *)(v245 + 8);
      uint64_t v214 = v211 - 1;
      objc_msgSend((id)objc_msgSend(v205, "objectAtIndexedSubscript:", v214), "latitude_deg");
      double v216 = v215;
      objc_msgSend((id)objc_msgSend(v251, "objectAtIndexedSubscript:", v214), "longitude_deg");
      double v218 = sub_1906DA618((double *)a1, v212, v213, v216, v217, 0.0);
      double v205 = v251;
      if (*(double *)(a1 + 568) < 0.0 && v218 <= *(double *)(a1 + 576))
      {
        *(double *)(a1 + 568) = v218 * *(double *)(v245 + 72) + 2.0;
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        double v219 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v220 = *(void *)(a1 + 568);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)double v269 = v220;
          _os_log_impl(&dword_1906B8000, v219, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,end the race in %{public}.2lf seconds if it did not happen naturally", buf, 0xCu);
        }
        double v205 = v251;
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v243 = *(void *)(a1 + 568);
          LODWORD(v262[1]) = 134349056;
          *(void *)((char *)&v262[1] + 4) = v243;
          double v244 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v244);
          if (v244 != (char *)buf) {
            free(v244);
          }
          double v205 = v251;
        }
        *(void *)(a1 + 560) = *(void *)(v245 + 32);
      }
      if (*(double *)(a1 + 376) >= *(double *)(a1 + 544) + -2.0)
      {
        *double v252 = [v205 count] - 1;
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        __int16 v231 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v231, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,too close to finish line,jump to the end of the reference route", buf, 2u);
        }
        double v205 = v251;
        if (sub_1906CB57C(115, 2))
        {
          double v222 = v248;
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          LOWORD(v262[1]) = 0;
          int v230 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v230);
          goto LABEL_436;
        }
      }
      else if (*(double *)(a1 + 560) > 0.0)
      {
        objc_msgSend(v248, "timestamp_s");
        double v205 = v251;
        if (v221 - *(double *)(a1 + 560) > *(double *)(a1 + 568))
        {
          double v222 = v248;
          *double v252 = [v251 count] - 1;
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v223 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v248, "timestamp_s");
            uint64_t v224 = *(void *)(a1 + 560);
            uint64_t v225 = *(void *)(a1 + 568);
            *(_DWORD *)__n128 buf = 134349568;
            *(void *)double v269 = v226;
            *(_WORD *)&v269[8] = 2050;
            *(void *)&v269[10] = v224;
            *(_WORD *)&v269[18] = 2050;
            uint64_t v270 = v225;
            _os_log_impl(&dword_1906B8000, v223, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,timeout,jump to the end of the reference route,current time,%{public}.2lf,registeredTimeAtThreshold,%{public}.2lf,endOfRaceTimeThreshold,%{public}.2lf", buf, 0x20u);
          }
          double v205 = v251;
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            objc_msgSend(v248, "timestamp_s");
            uint64_t v227 = *(void *)(a1 + 560);
            uint64_t v228 = *(void *)(a1 + 568);
            LODWORD(v262[1]) = 134349568;
            *(void *)((char *)&v262[1] + 4) = v229;
            WORD2(v262[2]) = 2050;
            *(void *)((char *)&v262[2] + 6) = v227;
            HIWORD(v262[3]) = 2050;
            uint64_t v263 = v228;
            int v230 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v230);
LABEL_436:
            if (v230 != (char *)buf) {
              free(v230);
            }
            double v205 = v251;
            double v208 = v222;
          }
        }
      }
    }
    if (sub_1907777F8(a1, v208, v205, v252, &v259, a5, v245))
    {
      uint64_t v34 = 1;
      if (sub_1906DA618((double *)a1, *(double *)v245, *(double *)(v245 + 8), *(double *)(v245 + 88), *(double *)(v245 + 96), 0.0) <= *(double *)(a1 + 576))goto LABEL_403; {
      *(unsigned char *)(a1 + 484) = 1;
      }
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v209 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v209, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,failed to process the most recent point,the matched point is too far away", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2))
      {
LABEL_402:
        uint64_t v34 = 0;
        goto LABEL_403;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1) {
        goto LABEL_449;
      }
    }
    else
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      long double v210 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v210, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,failed to set the most recent point", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_402;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1) {
        goto LABEL_449;
      }
    }
LABEL_479:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_449:
    LOWORD(v262[1]) = 0;
    long long v164 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v164);
LABEL_450:
    if (v164 != (char *)buf) {
      free(v164);
    }
    goto LABEL_402;
  }
  int v175 = (int)((double)v169 * 0.75);
  if (v175 < 0 || [v10 count] <= (unint64_t)v175)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v188 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 67240192;
      *(_DWORD *)double v269 = v175;
      _os_log_impl(&dword_1906B8000, v188, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid prematureRaceEndIndex,%{public}d", buf, 8u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_402;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    LODWORD(v262[1]) = 67240192;
    HIDWORD(v262[1]) = v175;
    long long v164 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v164);
    goto LABEL_450;
  }
  unint64_t v176 = [v10 count];
  int v177 = *v252;
  if (v247 > (int)((double)v176 * 0.25) || v177 < v175)
  {
    if ([v10 count] - 1 == v177)
    {
      *(unsigned char *)(a1 + 477) = 0;
    }
    else if (*v252 == v247 && *(unsigned char *)(a1 + 477))
    {
      char v259 = 1;
    }
    goto LABEL_375;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  double v192 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v193 = [v10 count];
    int v194 = *v252;
    *(_DWORD *)__n128 buf = 134349824;
    *(void *)double v269 = v193;
    *(_WORD *)&v269[8] = 1026;
    *(_DWORD *)&v269[10] = v175;
    *(_WORD *)&v269[14] = 1026;
    *(_DWORD *)&v269[16] = v194;
    LOWORD(v270) = 1026;
    *(_DWORD *)((char *)&v270 + 2) = v247;
    _os_log_impl(&dword_1906B8000, v192, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,race start point already detected,most recent matched point jumped from head to tail of the reference route,skip this data point to avoid premature race ending,reference route count,%{public}lu,premature race ending index,%{public}d,last matched index,%{public}d,matched index before update,%{public}d", buf, 0x1Eu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v237 = [v251 count];
    int v238 = *v252;
    LODWORD(v262[1]) = 134349824;
    *(void *)((char *)&v262[1] + 4) = v237;
    WORD2(v262[2]) = 1026;
    *(_DWORD *)((char *)&v262[2] + 6) = v175;
    WORD1(v262[3]) = 1026;
    HIDWORD(v262[3]) = v238;
    LOWORD(v263) = 1026;
    *(_DWORD *)((char *)&v263 + 2) = v247;
    double v239 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v239);
    if (v239 != (char *)buf) {
      free(v239);
    }
    double v10 = v251;
  }
  *double v252 = v247;
  objc_msgSend(v248, "latitude_deg");
  double v196 = v195;
  objc_msgSend(v248, "longitude_deg");
  double v198 = v197;
  objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", *v252), "latitude_deg");
  double v200 = v199;
  objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", *v252), "longitude_deg");
  if (sub_1906DA618((double *)a1, v196, v198, v200, v201, 0.0) <= *(double *)(a1 + 576)) {
    goto LABEL_402;
  }
  uint64_t v34 = 0;
  *(unsigned char *)(a1 + 484) = 1;
LABEL_403:
  if (__p) {
    operator delete(__p);
  }
  if (v256)
  {
    double v257 = (char *)v256;
    operator delete(v256);
  }
  return v34;
}

void sub_1907776F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907777F8(uint64_t a1, void *a2, void *a3, int *a4, unsigned char *a5, int *a6, uint64_t a7)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *a4;
  if ((v9 & 0x80000000) != 0 || [a3 count] <= v9)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v19 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = [a3 count];
      int v21 = *a4;
      *(_DWORD *)__n128 buf = 134349312;
      uint64_t v121 = v20;
      __int16 v122 = 1026;
      int v123 = v21;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,index out of bounds,input array size,%{public}lu,index,%{public}d", buf, 0x12u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_253;
    }
    goto LABEL_269;
  }
  *(unsigned char *)(a1 + 477) = 0;
  if (*a6 || (uint64_t v15 = *a4, [a3 count] - 1 != v15))
  {
    int v22 = *a4;
    if (!*a4)
    {
      unint64_t v23 = [a3 count];
      int v22 = *a4;
      if (v23 >= 2)
      {
        uint64_t v24 = (void *)[a3 objectAtIndex:v22];
        unint64_t v25 = (void *)[a3 objectAtIndex:*a4 + 1];
        uint64_t v115 = 0;
        goto LABEL_28;
      }
    }
    uint64_t v26 = [a3 count];
    uint64_t v27 = *a4;
    if (v26 - 1 == v22)
    {
      if ((int)v27 >= 1)
      {
        uint64_t v115 = (void *)[a3 objectAtIndex:(v27 - 1)];
        uint64_t v24 = (void *)[a3 objectAtIndex:*a4];
        unint64_t v25 = 0;
        goto LABEL_28;
      }
    }
    else if ((int)v27 >= 1 && [a3 count] > (unint64_t)(v27 + 1))
    {
      uint64_t v115 = (void *)[a3 objectAtIndex:*a4 - 1];
      uint64_t v24 = (void *)[a3 objectAtIndex:*a4];
      unint64_t v25 = (void *)[a3 objectAtIndex:*a4 + 1];
LABEL_28:
      uint64_t v28 = *a4;
      if (v28)
      {
        if ([a3 count] - 1 == v28)
        {
          memset(__p, 0, 24);
          double v29 = operator new(0x18uLL);
          *(void *)double v29 = v115;
          *((void *)v29 + 1) = v24;
          *((void *)v29 + 2) = a2;
          if (sub_190771A74((id *)v29, (id *)v29 + 3, __p))
          {
            double v30 = *(double *)__p[0];
            double v31 = *((double *)__p[0] + 1);
            double v32 = *((double *)__p[0] + 3);
            double v33 = *((double *)__p[0] + 4);
            double v34 = *((double *)__p[0] + 6);
            double v35 = *((double *)__p[0] + 7);
            if (vabdd_f64(*(double *)__p[0], v32) > 0.0000001 || vabdd_f64(v31, v33) > 0.0000001)
            {
              double v36 = (v33 - v31) * (v35 - v31) + (v32 - v30) * (v34 - v30);
              if (v36 >= 0.0 && v36 <= (v33 - v31) * (v33 - v31) + (v32 - v30) * (v32 - v30))
              {
                v118[0] = 0.0;
                char v70 = sub_190779FA8(v118, v30, v31, v32, v33, v34, v35);
                if (v70)
                {
                  if ((sub_190773B10(a1, a2, v115, v24, v118, a6, a7) & 1) == 0)
                  {
                    if (qword_1E929F6A0 != -1) {
                      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                    }
                    double v71 = qword_1E929F6A8;
                    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
                    {
                      int v72 = *a4;
                      *(_DWORD *)__n128 buf = 67240192;
                      LODWORD(v121) = v72;
                      _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,projectionOnPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                    }
                    if (!sub_1906CB57C(115, 2)) {
                      goto LABEL_94;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6A0 == -1) {
                      goto LABEL_200;
                    }
LABEL_283:
                    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_200:
                    int v93 = *a4;
                    LODWORD(v117) = 67240192;
                    HIDWORD(v117) = v93;
                    uint64_t v79 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
                    goto LABEL_267;
                  }
                  goto LABEL_251;
                }
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                uint64_t v87 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
                {
                  int v88 = *a4;
                  *(_DWORD *)__n128 buf = 67240192;
                  LODWORD(v121) = v88;
                  _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,endOfArray,projectionOnPreviousSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
                }
                if (!sub_1906CB57C(115, 0)) {
                  goto LABEL_94;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 == -1) {
                  goto LABEL_224;
                }
LABEL_275:
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_224:
                int v101 = *a4;
                LODWORD(v117) = 67240192;
                HIDWORD(v117) = v101;
                uint64_t v79 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
                goto LABEL_267;
              }
            }
            if (*a5)
            {
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              uint64_t v38 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)__n128 buf = 0;
                _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,this matched point has already been the projected point,skip this point", buf, 2u);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_94;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 == -1) {
                goto LABEL_162;
              }
LABEL_272:
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_162:
              LOWORD(v118[0]) = 0;
              uint64_t v79 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
              goto LABEL_267;
            }
            if ((sub_190772C90(a1, a2, v24, a6, a7) & 1) == 0)
            {
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              long long v83 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
              {
                int v84 = *a4;
                *(_DWORD *)__n128 buf = 67240192;
                LODWORD(v121) = v84;
                _os_log_impl(&dword_1906B8000, v83, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,failed to update scoreboard at index,%{public}d", buf, 8u);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_94;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 == -1) {
                goto LABEL_231;
              }
LABEL_282:
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_231:
              int v104 = *a4;
              LODWORD(v118[0]) = 67240192;
              HIDWORD(v118[0]) = v104;
              uint64_t v79 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
              goto LABEL_267;
            }
            goto LABEL_202;
          }
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          double v62 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
          {
            int v63 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v63;
            _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,endOfArray,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_266;
          }
LABEL_271:
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_266:
          int v114 = *a4;
          LODWORD(v118[0]) = 67240192;
          HIDWORD(v118[0]) = v114;
          uint64_t v79 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
LABEL_267:
          if (v79 != (char *)buf) {
            free(v79);
          }
LABEL_94:
          char v66 = 0;
          goto LABEL_95;
        }
        memset(__p, 0, 24);
        double v29 = operator new(0x20uLL);
        *(void *)double v29 = v115;
        *((void *)v29 + 1) = v24;
        *((void *)v29 + 2) = v25;
        *((void *)v29 + 3) = a2;
        if ((sub_190771A74((id *)v29, (id *)v29 + 4, __p) & 1) == 0)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          double v64 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
          {
            int v65 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v65;
            _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_266;
          }
          goto LABEL_271;
        }
        double v51 = *(double *)__p[0];
        double v53 = *((double *)__p[0] + 3);
        double v52 = *((double *)__p[0] + 4);
        double v54 = *((double *)__p[0] + 6);
        double v55 = *((double *)__p[0] + 7);
        double v57 = *((double *)__p[0] + 9);
        double v56 = *((double *)__p[0] + 10);
        if (vabdd_f64(v53, v54) <= 0.0000001 && vabdd_f64(v52, v55) <= 0.0000001)
        {
          BOOL v59 = 0;
        }
        else
        {
          double v58 = (v55 - v52) * (v56 - v52) + (v54 - v53) * (v57 - v53);
          BOOL v59 = v58 >= 0.0;
          if (v58 > (v55 - v52) * (v55 - v52) + (v54 - v53) * (v54 - v53)) {
            BOOL v59 = 0;
          }
        }
        double v75 = *((double *)__p[0] + 1);
        if (vabdd_f64(v51, v53) <= 0.0000001 && vabdd_f64(v75, v52) <= 0.0000001)
        {
          BOOL v77 = 0;
        }
        else
        {
          double v76 = (v52 - v75) * (v56 - v75) + (v53 - v51) * (v57 - v51);
          BOOL v77 = v76 >= 0.0;
          if (v76 > (v52 - v75) * (v52 - v75) + (v53 - v51) * (v53 - v51)) {
            BOOL v77 = 0;
          }
          if (v59 && v77)
          {
            v118[0] = 0.0;
            if ((sub_190779FA8(v118, v53, v52, v54, v55, v57, v56) & 1) == 0)
            {
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              uint64_t v89 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
              {
                int v90 = *a4;
                *(_DWORD *)__n128 buf = 67240192;
                LODWORD(v121) = v90;
                _os_log_impl(&dword_1906B8000, v89, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnBothSegments,wrt n1,failed to get projection ratio at index,%{public}d", buf, 8u);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_94;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 == -1) {
                goto LABEL_224;
              }
              goto LABEL_275;
            }
            double v117 = 0.0;
            if ((sub_190779FA8(&v117, v51, v75, v53, v52, v57, v56) & 1) == 0)
            {
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              double v94 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
              {
                int v95 = *a4;
                *(_DWORD *)__n128 buf = 67240192;
                LODWORD(v121) = v95;
                _os_log_impl(&dword_1906B8000, v94, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnBothSegments,wrt n0,failed to get projection ratio at index,%{public}d", buf, 8u);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_94;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              int v96 = *a4;
              LODWORD(v116[0]) = 67240192;
              HIDWORD(v116[0]) = v96;
              uint64_t v79 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
              goto LABEL_267;
            }
            if (vabdd_f64(v118[0], 1.0 - v117) < 0.0000001)
            {
              if (*a5)
              {
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                long long v78 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)__n128 buf = 0;
                  _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNearestPoint,this matched point has already been the projected point,skip this point", buf, 2u);
                }
                if (!sub_1906CB57C(115, 2)) {
                  goto LABEL_94;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                LOWORD(v116[0]) = 0;
                uint64_t v79 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
                goto LABEL_267;
              }
              if ((sub_190772C90(a1, a2, v24, a6, a7) & 1) == 0)
              {
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                long long v111 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
                {
                  int v112 = *a4;
                  *(_DWORD *)__n128 buf = 67240192;
                  LODWORD(v121) = v112;
                  _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNearestPoint,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_1906CB57C(115, 2)) {
                  goto LABEL_94;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                int v113 = *a4;
                LODWORD(v116[0]) = 67240192;
                HIDWORD(v116[0]) = v113;
                uint64_t v79 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
                goto LABEL_267;
              }
              *(unsigned char *)(a1 + 477) = 1;
              goto LABEL_251;
            }
            if (v118[0] >= 1.0 - v117)
            {
              v116[0] = v117;
              if ((sub_190773B10(a1, a2, v115, v24, v116, a6, a7) & 1) == 0)
              {
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                double v107 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
                {
                  int v108 = *a4;
                  *(_DWORD *)__n128 buf = 67240192;
                  LODWORD(v121) = v108;
                  _os_log_impl(&dword_1906B8000, v107, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_1906CB57C(115, 2)) {
                  goto LABEL_94;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 == -1) {
                  goto LABEL_240;
                }
                goto LABEL_284;
              }
            }
            else
            {
              v116[0] = v118[0];
              if ((sub_190773B10(a1, a2, v24, v25, v116, a6, a7) & 1) == 0)
              {
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                long long v105 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
                {
                  int v106 = *a4;
                  *(_DWORD *)__n128 buf = 67240192;
                  LODWORD(v121) = v106;
                  _os_log_impl(&dword_1906B8000, v105, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_1906CB57C(115, 2)) {
                  goto LABEL_94;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 == -1) {
                  goto LABEL_240;
                }
LABEL_284:
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_240:
                uint64_t v79 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v79);
                goto LABEL_267;
              }
            }
LABEL_251:
            char v66 = 1;
LABEL_95:
            operator delete(v29);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            return (v66 & 1) != 0;
          }
        }
        if (!v59 && !v77)
        {
          if (*a5)
          {
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            unint64_t v82 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNearestPoint,this matched point has already been the projected point,skip this point", buf, 2u);
            }
            if (!sub_1906CB57C(115, 2)) {
              goto LABEL_94;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 == -1) {
              goto LABEL_162;
            }
            goto LABEL_272;
          }
          if ((sub_190772C90(a1, a2, v24, a6, a7) & 1) == 0)
          {
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            long long v102 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
            {
              int v103 = *a4;
              *(_DWORD *)__n128 buf = 67240192;
              LODWORD(v121) = v103;
              _os_log_impl(&dword_1906B8000, v102, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNearestPoint,failed to update scoreboard at index,%{public}d", buf, 8u);
            }
            if (!sub_1906CB57C(115, 2)) {
              goto LABEL_94;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 == -1) {
              goto LABEL_231;
            }
            goto LABEL_282;
          }
LABEL_202:
          char v66 = 1;
          *(unsigned char *)(a1 + 477) = 1;
          goto LABEL_95;
        }
        if (v59)
        {
          v118[0] = 0.0;
          if (sub_190779FA8(v118, v53, v52, v54, v55, v57, v56))
          {
            if ((sub_190773B10(a1, a2, v24, v25, v118, a6, a7) & 1) == 0)
            {
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              unint64_t v80 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
              {
                int v81 = *a4;
                *(_DWORD *)__n128 buf = 67240192;
                LODWORD(v121) = v81;
                _os_log_impl(&dword_1906B8000, v80, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_94;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 == -1) {
                goto LABEL_200;
              }
              goto LABEL_283;
            }
            goto LABEL_251;
          }
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v97 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
          {
            int v98 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v98;
            _os_log_impl(&dword_1906B8000, v97, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnNextSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_224;
          }
          goto LABEL_275;
        }
        v118[0] = 0.0;
        if ((sub_190779FA8(v118, v51, v75, v53, v52, v57, v56) & 1) == 0)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          long long v99 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
          {
            int v100 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v100;
            _os_log_impl(&dword_1906B8000, v99, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnPreviousSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_224;
          }
          goto LABEL_275;
        }
        if ((sub_190773B10(a1, a2, v115, v24, v118, a6, a7) & 1) == 0)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v91 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            int v92 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v92;
            _os_log_impl(&dword_1906B8000, v91, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_200;
          }
          goto LABEL_283;
        }
        goto LABEL_251;
      }
      memset(__p, 0, 24);
      double v29 = operator new(0x18uLL);
      *(void *)double v29 = v24;
      *((void *)v29 + 1) = v25;
      *((void *)v29 + 2) = a2;
      if ((sub_190771A74((id *)v29, (id *)v29 + 3, __p) & 1) == 0)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        double v60 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          int v61 = *a4;
          *(_DWORD *)__n128 buf = 67240192;
          LODWORD(v121) = v61;
          _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,startOfArray,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_94;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1) {
          goto LABEL_266;
        }
        goto LABEL_271;
      }
      double v42 = *(double *)__p[0];
      double v43 = *((double *)__p[0] + 1);
      double v44 = *((double *)__p[0] + 3);
      double v45 = *((double *)__p[0] + 4);
      double v46 = *((double *)__p[0] + 6);
      double v47 = *((double *)__p[0] + 7);
      if (vabdd_f64(*(double *)__p[0], v44) <= 0.0000001 && vabdd_f64(v43, v45) <= 0.0000001
        || ((double v48 = (v45 - v43) * (v47 - v43) + (v44 - v42) * (v46 - v42), v48 >= 0.0)
          ? (BOOL v49 = v48 > (v45 - v43) * (v45 - v43) + (v44 - v42) * (v44 - v42))
          : (BOOL v49 = 1),
            v49))
      {
        if (*a5)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v50 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,this matched point has already been the projected point,skip this point", buf, 2u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_162;
          }
          goto LABEL_272;
        }
        if ((sub_190772C90(a1, a2, v24, a6, a7) & 1) == 0)
        {
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          double v73 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
          {
            int v74 = *a4;
            *(_DWORD *)__n128 buf = 67240192;
            LODWORD(v121) = v74;
            _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,failed to update scoreboard at index,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_231;
          }
          goto LABEL_282;
        }
        goto LABEL_202;
      }
      v118[0] = 0.0;
      char v67 = sub_190779FA8(v118, v42, v43, v44, v45, v46, v47);
      if ((v67 & 1) == 0)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v85 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          int v86 = *a4;
          *(_DWORD *)__n128 buf = 67240192;
          LODWORD(v121) = v86;
          _os_log_impl(&dword_1906B8000, v85, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,startOfArray,projectionOnNextSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_94;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1) {
          goto LABEL_224;
        }
        goto LABEL_275;
      }
      if ((sub_190773B10(a1, a2, v24, v25, v118, a6, a7) & 1) == 0)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        BOOL v68 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
        {
          int v69 = *a4;
          *(_DWORD *)__n128 buf = 67240192;
          LODWORD(v121) = v69;
          _os_log_impl(&dword_1906B8000, v68, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,projectionOnNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_94;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1) {
          goto LABEL_200;
        }
        goto LABEL_283;
      }
      goto LABEL_251;
    }
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v39 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = [a3 count];
      int v41 = *a4;
      *(_DWORD *)__n128 buf = 134349312;
      uint64_t v121 = v40;
      __int16 v122 = 1026;
      int v123 = v41;
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,index out of bounds,input array size,%{public}lu,index,%{public}d", buf, 0x12u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1)
    {
LABEL_253:
      double v109 = (void *)[a3 count];
      int v110 = *a4;
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v109;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v110;
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v18);
LABEL_254:
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
LABEL_269:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_253;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  double v16 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "CLRR,setLocationPoint,reached end of route", buf, 2u);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    LOWORD(__p[0]) = 0;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v18);
    goto LABEL_254;
  }
  return result;
}

void sub_190779EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  operator delete(v22);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190779FA8(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (vabdd_f64(a2, a4) <= 0.0000001 && vabdd_f64(a3, a5) <= 0.0000001) {
    return 0;
  }
  if (vabdd_f64(a2, a6) <= 0.0000001)
  {
    double v7 = 0.0;
    if (vabdd_f64(a3, a7) <= 0.0000001) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = 0;
  double v9 = a4 - a2;
  double v10 = a5 - a3;
  double v11 = a6 - a2;
  double v12 = a7 - a3;
  double v13 = sqrt(v10 * v10 + v9 * v9);
  double v14 = sqrt(v12 * v12 + v11 * v11);
  if (fabs(v13 * v14) > 0.0000001 && fabs(v13) > 0.0000001)
  {
    double v7 = v14 * ((v10 * v12 + v9 * v11) / (v13 * v14)) / v13;
LABEL_8:
    *a1 = v7;
    return 1;
  }
  return v8;
}

uint64_t sub_19077A058(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 484)) {
    ++*(_DWORD *)(a1 + 512);
  }
  else {
    ++*(_DWORD *)(a1 + 516);
  }
  if (!*(unsigned char *)(a1 + 476) && *(_DWORD *)(a1 + 512) >= 5u) {
    *(unsigned char *)(a1 + 476) = 1;
  }
  if (!*(unsigned char *)(a1 + 485) && *(_DWORD *)(a1 + 516) >= 0xAu) {
    *(unsigned char *)(a1 + 485) = 1;
  }
  return sub_19077A0BC(a1);
}

uint64_t sub_19077A0BC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 512) > *(_DWORD *)(a1 + 496) << ((*(_DWORD *)(a1 + 40) - 3) < 2)) {
    *(unsigned char *)(a1 + 478) = 1;
  }
  double v2 = (double)*(int *)(a1 + 524);
  uint64_t result = [*(id *)(a1 + 48) count];
  int v4 = *(_DWORD *)(a1 + 488);
  if (v4 >= (int)result) {
    int v4 = result;
  }
  if ((double)v4 * 0.75 <= v2
    || (unint64_t v5 = *(int *)(a1 + 512), result = [*(id *)(a1 + 48) count], result - *(int *)(a1 + 524) <= v5))
  {
    *(_DWORD *)(a1 + 492) = 0;
    if (!*(unsigned char *)(a1 + 479)) {
      *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 524);
    }
  }
  return result;
}

uint64_t sub_19077A170(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 500);
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 524) + (*(_DWORD *)(a1 + 532) & ~(*(int *)(a1 + 532) >> 31));
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:"), "timestamp_s");
  *(void *)(a1 + 552) = v2;
  *(unsigned char *)(a1 + 476) = 0;
  *(unsigned char *)(a1 + 485) = 0;
  *(void *)(a1 + 512) = 0;

  return sub_19077A0BC(a1);
}

uint64_t sub_19077A1E4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 492) >= 1)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v2 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 492);
      *(_DWORD *)__n128 buf = 67240192;
      int v7 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLRR,getNumberOfRoutePointsToAdd,required number of points,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "int CLRacingRoute::getNumberOfRoutePointsToAdd() const", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return *(unsigned int *)(a1 + 492);
}

uint64_t sub_19077A3A8(uint64_t a1, void *a2)
{
  uint64_t v251 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v7 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,input data array is null", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      LOWORD(v238) = 0;
      uint64_t v154 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v154);
      if (v154 != buf) {
        free(v154);
      }
    }
    return 4;
  }
  int v4 = [a2 count];
  if (!*(unsigned char *)(a1 + 473))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v9 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 492);
      *(_DWORD *)__n128 buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v4;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,update started,number of requested points,%{public}d,number of given points,%{public}d", buf, 0xEu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_273;
    }
    goto LABEL_361;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  unint64_t v5 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 492);
    *(_DWORD *)__n128 buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v4;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,recovery mode,update started,number of requested points,%{public}d,number of given points,%{public}d", buf, 0xEu);
  }
  if (!sub_1906CB57C(115, 2)) {
    goto LABEL_21;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6A0 != -1) {
LABEL_361:
  }
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_273:
  int v162 = *(_DWORD *)(a1 + 492);
  int v238 = 67240448;
  *(_DWORD *)double v239 = v162;
  *(_WORD *)&v239[4] = 1026;
  *(_DWORD *)&v239[6] = v4;
  double v163 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v163);
  if (v163 != buf) {
    free(v163);
  }
LABEL_21:
  if (v4)
  {
    int v11 = *(_DWORD *)(a1 + 492);
    if (v11 < v4)
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v12 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        int v13 = *(_DWORD *)(a1 + 488);
        int v14 = *(_DWORD *)(a1 + 492);
        *(_DWORD *)__n128 buf = 67240704;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v14;
        *(_WORD *)&unsigned char buf[14] = 1026;
        *(_DWORD *)&uint8_t buf[16] = v4;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,numberOfPointsToAdd,%{public}d,routePointsCount,%{public}d", buf, 0x14u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v15 = *(_DWORD *)(a1 + 488);
      int v16 = *(_DWORD *)(a1 + 492);
      int v238 = 67240704;
      *(_DWORD *)double v239 = v15;
      *(_WORD *)&v239[4] = 1026;
      *(_DWORD *)&v239[6] = v16;
      *(_WORD *)int v240 = 1026;
      *(_DWORD *)&v240[2] = v4;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v17);
LABEL_58:
      if (v17 == buf) {
        return 1;
      }
LABEL_59:
      free(v17);
      return 1;
    }
    if (v11 > v4)
    {
      *(unsigned char *)(a1 + 479) = 1;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v19 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,rolling buffer includes the end of the reference route", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LOWORD(v238) = 0;
        int v175 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v175);
        if (v175 != buf) {
          free(v175);
        }
      }
    }
    if (*(unsigned char *)(a1 + 472))
    {
      if ((*(_DWORD *)(a1 + 524) & 0x80000000) == 0)
      {
        [*(id *)(a1 + 48) removeObjectsInRange:0];
        int v20 = *(_DWORD *)(a1 + 532);
        if (v20 == -1) {
          int v20 = 0;
        }
        *(_DWORD *)(a1 + 532) = v20 + *(_DWORD *)(a1 + 524);
        *(_DWORD *)(a1 + 524) = 0;
      }
      if ([*(id *)(a1 + 48) count] + v4 > (unint64_t)*(int *)(a1 + 488))
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v21 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          int v22 = *(_DWORD *)(a1 + 488);
          int v23 = [*(id *)(a1 + 48) count];
          *(_DWORD *)__n128 buf = 67240704;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v23;
          *(_WORD *)&unsigned char buf[14] = 1026;
          *(_DWORD *)&uint8_t buf[16] = v4;
          _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,bufferedRoutePointsCount,%{public}u,routePointsCount,%{public}d", buf, 0x14u);
        }
        if (!sub_1906CB57C(115, 0)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v24 = *(_DWORD *)(a1 + 488);
        int v25 = [*(id *)(a1 + 48) count];
        int v238 = 67240704;
        *(_DWORD *)double v239 = v24;
        *(_WORD *)&v239[4] = 1026;
        *(_DWORD *)&v239[6] = v25;
        *(_WORD *)int v240 = 1026;
        *(_DWORD *)&v240[2] = v4;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v17);
        goto LABEL_58;
      }
      long long v235 = 0u;
      long long v236 = 0u;
      long long v233 = 0u;
      long long v234 = 0u;
      uint64_t v32 = [a2 countByEnumeratingWithState:&v233 objects:v237 count:16];
      if (v32)
      {
        uint64_t v33 = *(void *)v234;
        do
        {
          for (uint64_t i = 0; i != v32; ++i)
          {
            if (*(void *)v234 != v33) {
              objc_enumerationMutation(a2);
            }
            [*(id *)(a1 + 48) addObject:*(void *)(*((void *)&v233 + 1) + 8 * i)];
            ++*(_DWORD *)(a1 + 504);
          }
          uint64_t v32 = [a2 countByEnumeratingWithState:&v233 objects:v237 count:16];
        }
        while (v32);
      }
LABEL_92:
      uint64_t v38 = *(void **)(a1 + 48);
      if (v38)
      {
        if ([*(id *)(a1 + 48) count])
        {
          if (![v38 objectAtIndex:0])
          {
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            double v62 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__n128 buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = 0;
              _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data point is null at index,%{public}d", buf, 8u);
            }
            if (!sub_1906CB57C(115, 0)) {
              goto LABEL_257;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            int v238 = 67240192;
            *(_DWORD *)double v239 = 0;
            double v60 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
            goto LABEL_155;
          }
          objc_msgSend((id)objc_msgSend(v38, "objectAtIndex:", 0), "latitude_deg");
          double v40 = v39;
          objc_msgSend((id)objc_msgSend(v38, "objectAtIndex:", 0), "longitude_deg");
          double v42 = v41;
          if (!sub_190771D68(v40, v41))
          {
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            int v63 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__n128 buf = 134284033;
              *(double *)&uint8_t buf[4] = v40;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(double *)&unsigned char buf[14] = v42;
              *(_WORD *)&unsigned char buf[22] = 1026;
              *(_DWORD *)&unsigned char buf[24] = 0;
              _os_log_impl(&dword_1906B8000, v63, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf,at index,%{public}d", buf, 0x1Cu);
            }
            if (!sub_1906CB57C(115, 0)) {
              goto LABEL_257;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            int v238 = 134284033;
            *(double *)double v239 = v40;
            *(_WORD *)&v239[8] = 2049;
            *(double *)int v240 = v42;
            *(_WORD *)&v240[8] = 1026;
            *(_DWORD *)&v240[10] = 0;
            double v60 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
            goto LABEL_155;
          }
          if ((unint64_t)[v38 count] >= 2)
          {
            uint64_t v43 = 1;
            double v44 = v40;
            double v45 = v42;
            while (1)
            {
              double v46 = (void *)[v38 objectAtIndex:v43];
              double v47 = v46;
              if (!v46) {
                break;
              }
              objc_msgSend(v46, "latitude_deg");
              double v49 = v48;
              objc_msgSend(v47, "longitude_deg");
              double v51 = v50;
              objc_msgSend(v47, "altitude_m");
              double v53 = v52;
              if (!sub_190771D68(v49, v51) || fabs(v53) == INFINITY || v53 <= -430.5 || v53 >= 8848.86)
              {
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                double v73 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__n128 buf = 134284289;
                  *(double *)&uint8_t buf[4] = v49;
                  *(_WORD *)&unsigned char buf[12] = 2049;
                  *(double *)&unsigned char buf[14] = v51;
                  *(_WORD *)&unsigned char buf[22] = 2049;
                  *(double *)&unsigned char buf[24] = v53;
                  *(_WORD *)&unsigned char buf[32] = 1026;
                  *(_DWORD *)&buf[34] = v43;
                  _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid reference point,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,at index,%{public}d", buf, 0x26u);
                }
                if (sub_1906CB57C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6A0 != -1) {
                    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                  }
                  int v238 = 134284289;
                  *(double *)double v239 = v49;
                  *(_WORD *)&v239[8] = 2049;
                  *(double *)int v240 = v51;
                  *(_WORD *)&v240[8] = 2049;
                  *(double *)&v240[10] = v53;
                  *(_WORD *)&v240[18] = 1026;
                  *(_DWORD *)int v241 = v43;
                  double v60 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
                  goto LABEL_155;
                }
                goto LABEL_257;
              }
              if (v49 >= v44)
              {
                if (v49 > v40) {
                  double v40 = v49;
                }
              }
              else
              {
                double v44 = v49;
              }
              if (v51 >= v45)
              {
                if (v51 > v42) {
                  double v42 = v51;
                }
              }
              else
              {
                double v45 = v51;
              }
              objc_msgSend(v47, "odometer_m");
              if (v54 >= 350.0 && !*(unsigned char *)(a1 + 474) && (*(_DWORD *)(a1 + 540) & 0x80000000) != 0)
              {
                *(_DWORD *)(a1 + 540) = v43;
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                double v55 = qword_1E929F6A8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
                {
                  int v56 = *(_DWORD *)(a1 + 540);
                  *(_DWORD *)__n128 buf = 67240192;
                  *(_DWORD *)&uint8_t buf[4] = v56;
                  _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,raceStartLineProximityIndex,%{public}d", buf, 8u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6A0 != -1) {
                    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                  }
                  int v57 = *(_DWORD *)(a1 + 540);
                  int v238 = 67240192;
                  *(_DWORD *)double v239 = v57;
                  double v58 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v58);
                  if (v58 != buf) {
                    free(v58);
                  }
                }
              }
              if ([v38 count] <= (unint64_t)++v43) {
                goto LABEL_158;
              }
            }
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            int v74 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__n128 buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = v43;
              _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data point is null at index,%{public}d", buf, 8u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              int v238 = 67240192;
              *(_DWORD *)double v239 = v43;
              double v60 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
              goto LABEL_155;
            }
            goto LABEL_257;
          }
          double v45 = v42;
          double v44 = v40;
LABEL_158:
          double v64 = v44 + -0.0004;
          *(double *)(a1 + 56) = v44 + -0.0004;
          double v65 = v40 + 0.0004;
          *(double *)(a1 + 64) = v40 + 0.0004;
          double v66 = fmod(v45 + -0.0004, 360.0);
          double v67 = v66;
          if (v66 <= -180.0)
          {
            double v67 = v66 + 360.0;
          }
          else if (v66 > 180.0)
          {
            double v67 = v66 + -360.0;
          }
          *(double *)(a1 + 72) = v67;
          double v68 = fmod(v42 + 0.0004, 360.0);
          double v69 = v68;
          if (v68 <= -180.0)
          {
            double v69 = v68 + 360.0;
          }
          else if (v68 > 180.0)
          {
            double v69 = v68 + -360.0;
          }
          *(double *)(a1 + 80) = v69;
          if (!sub_190771D68(v64, v67) || !sub_190771D68(v65, v69))
          {
LABEL_257:
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            double v142 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl(&dword_1906B8000, v142, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,unable to convert reference route to matrix", buf, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              LOWORD(v238) = 0;
              unint64_t v176 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v176);
              if (v176 != buf) {
                free(v176);
              }
            }
            return 2;
          }
          *(void *)(a1 + 88) = 0x500000005;
          double v70 = v67 + 360.0;
          if (v67 >= 0.0) {
            double v70 = v67;
          }
          double v71 = v69 + 360.0;
          if (v69 >= 0.0) {
            double v71 = v69;
          }
          double v72 = v71 - v70;
          if (v72 <= 180.0)
          {
            if (v72 < -180.0) {
              double v72 = v72 + 360.0;
            }
          }
          else
          {
            double v72 = v72 + -360.0;
          }
          double v75 = fabs(v72);
          if (v65 - v64 < 0.0009) {
            *(_DWORD *)(a1 + 88) = 1;
          }
          if (v75 < 0.0009) {
            *(_DWORD *)(a1 + 92) = 1;
          }
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          double v76 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
          {
            int v77 = *(_DWORD *)(a1 + 88);
            int v78 = *(_DWORD *)(a1 + 92);
            uint64_t v79 = *(void *)(a1 + 56);
            uint64_t v80 = *(void *)(a1 + 64);
            uint64_t v81 = *(void *)(a1 + 72);
            uint64_t v82 = *(void *)(a1 + 80);
            *(_DWORD *)__n128 buf = 67241473;
            *(_DWORD *)&uint8_t buf[4] = v77;
            *(_WORD *)&uint8_t buf[8] = 1026;
            *(_DWORD *)&buf[10] = v78;
            *(_WORD *)&unsigned char buf[14] = 2049;
            *(void *)&uint8_t buf[16] = v79;
            *(_WORD *)&unsigned char buf[24] = 2049;
            *(void *)&buf[26] = v80;
            *(_WORD *)&buf[34] = 2049;
            *(void *)&buf[36] = v81;
            *(_WORD *)int v247 = 2049;
            *(void *)&v247[2] = v82;
            _os_log_impl(&dword_1906B8000, v76, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,boxRows,%{public}d,boxColumns,%{public}d,boxMinLat,%{private}.7lf,boxMaxLat,%{private}.7lf,boxMinLon,%{private}.7lf,boxMaxLon,%{private}.7lf", buf, 0x36u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            int v222 = *(_DWORD *)(a1 + 88);
            int v223 = *(_DWORD *)(a1 + 92);
            uint64_t v224 = *(void *)(a1 + 56);
            uint64_t v225 = *(void *)(a1 + 64);
            uint64_t v226 = *(void *)(a1 + 72);
            uint64_t v227 = *(void *)(a1 + 80);
            int v238 = 67241473;
            *(_DWORD *)double v239 = v222;
            *(_WORD *)&v239[4] = 1026;
            *(_DWORD *)&v239[6] = v223;
            *(_WORD *)int v240 = 2049;
            *(void *)&v240[2] = v224;
            *(_WORD *)&v240[10] = 2049;
            *(void *)&v240[12] = v225;
            *(_WORD *)int v241 = 2049;
            *(void *)&v241[2] = v226;
            *(_WORD *)double v242 = 2049;
            *(void *)&v242[2] = v227;
            uint64_t v228 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v228);
            if (v228 != buf) {
              free(v228);
            }
          }
          sub_190781210((uint64_t *)(a1 + 96));
          int v83 = *(_DWORD *)(a1 + 92) * *(_DWORD *)(a1 + 88);
          uint64_t v232 = (uint64_t *)(a1 + 96);
          sub_190771DF8((void *)(a1 + 96), *(int *)(a1 + 92) * (uint64_t)*(int *)(a1 + 88));
          if (v83 >= 1)
          {
            int v84 = (void *)(a1 + 112);
            int v85 = *(void **)(a1 + 104);
            do
            {
              if ((unint64_t)v85 >= *v84)
              {
                unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v85 - *v232) >> 3);
                unint64_t v87 = v86 + 1;
                if (v86 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_190718FD4();
                }
                if (0x5555555555555556 * ((*v84 - *v232) >> 3) > v87) {
                  unint64_t v87 = 0x5555555555555556 * ((*v84 - *v232) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((*v84 - *v232) >> 3) >= 0x555555555555555) {
                  unint64_t v88 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v88 = v87;
                }
                *(void *)&unsigned char buf[32] = a1 + 112;
                if (v88) {
                  unint64_t v88 = (unint64_t)sub_1907812D8(v88);
                }
                else {
                  uint64_t v89 = 0;
                }
                int v90 = (void *)(v88 + 24 * v86);
                *(void *)__n128 buf = v88;
                *(void *)&uint8_t buf[8] = v90;
                *(void *)&uint8_t buf[16] = v90;
                *(void *)&unsigned char buf[24] = v88 + 24 * v89;
                *int v90 = 0;
                v90[1] = 0;
                v90[2] = 0;
                *(void *)&buf[16] += 24;
                sub_190781268(v232, buf);
                int v85 = *(void **)(a1 + 104);
                sub_190781320((uint64_t)buf);
              }
              else
              {
                *int v85 = 0;
                v85[1] = 0;
                v85[2] = 0;
                v85 += 3;
                *(void *)(a1 + 104) = v85;
              }
              *(void *)(a1 + 104) = v85;
              --v83;
            }
            while (v83);
          }
          if ([v38 count])
          {
            unint64_t v91 = 0;
            uint64_t v92 = 0xFFFFFFFFLL;
            uint64_t v93 = 0xFFFFFFFFLL;
            while (1)
            {
              double v94 = (void *)[v38 objectAtIndex:v91];
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              int v95 = qword_1E929F6A8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend(v94, "timestamp_s");
                uint64_t v97 = v96;
                objc_msgSend(v94, "latitude_deg");
                uint64_t v99 = v98;
                objc_msgSend(v94, "longitude_deg");
                uint64_t v101 = v100;
                objc_msgSend(v94, "altitude_m");
                uint64_t v103 = v102;
                objc_msgSend(v94, "odometer_m");
                uint64_t v105 = v104;
                int v106 = [v94 signalEnvironmentType];
                *(_DWORD *)__n128 buf = 134350593;
                *(void *)&uint8_t buf[4] = v97;
                *(_WORD *)&unsigned char buf[12] = 2049;
                *(void *)&unsigned char buf[14] = v99;
                *(_WORD *)&unsigned char buf[22] = 2049;
                *(void *)&unsigned char buf[24] = v101;
                *(_WORD *)&unsigned char buf[32] = 2049;
                *(void *)&buf[34] = v103;
                *(_WORD *)&buf[42] = 2050;
                *(void *)int v247 = v105;
                *(_WORD *)&v247[8] = 1026;
                int v248 = v106;
                __int16 v249 = 1026;
                int v250 = v91;
                _os_log_impl(&dword_1906B8000, v95, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{public}.2lf,signalEnv,%{public}d,pointCount,%{public}d", buf, 0x40u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6A0 != -1) {
                  dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
                }
                objc_msgSend(v94, "timestamp_s");
                uint64_t v127 = v126;
                objc_msgSend(v94, "latitude_deg");
                uint64_t v129 = v128;
                objc_msgSend(v94, "longitude_deg");
                uint64_t v131 = v130;
                objc_msgSend(v94, "altitude_m");
                uint64_t v133 = v132;
                objc_msgSend(v94, "odometer_m");
                uint64_t v135 = v134;
                int v136 = [v94 signalEnvironmentType];
                int v238 = 134350593;
                *(void *)double v239 = v127;
                *(_WORD *)&v239[8] = 2049;
                *(void *)int v240 = v129;
                *(_WORD *)&v240[8] = 2049;
                *(void *)&v240[10] = v131;
                *(_WORD *)&v240[18] = 2049;
                *(void *)int v241 = v133;
                *(_WORD *)&v241[8] = 2050;
                *(void *)double v242 = v135;
                *(_WORD *)&v242[8] = 1026;
                int v243 = v136;
                __int16 v244 = 1026;
                int v245 = v91;
                double v137 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v137);
                if (v137 != buf) {
                  free(v137);
                }
              }
              objc_msgSend(v94, "latitude_deg");
              double v108 = v107;
              objc_msgSend(v94, "longitude_deg");
              uint64_t v110 = sub_190771E9C(a1 + 56, v108, v109);
              if (v110 == -1) {
                break;
              }
              uint64_t v111 = v110;
              if (v91)
              {
                if ([v38 count] - 1 == v91)
                {
                  int v143 = v93;
                  uint64_t v144 = *v232;
                  uint64_t v145 = (void **)(*v232 + 24 * (int)v93);
                  unint64_t v146 = v91 << 32;
                  if (v111 == v93)
                  {
                    uint64_t v147 = v146 | v92;
                    uint64_t v148 = v144 + 24 * v143;
                    double v151 = *(uint64_t **)(v148 + 8);
                    uint64_t v149 = (void **)(v148 + 8);
                    int v150 = v151;
                    unint64_t v152 = (unint64_t)v149[1];
                    if ((unint64_t)v151 >= v152)
                    {
                      uint64_t v165 = ((char *)v150 - (unsigned char *)*v145) >> 3;
                      if ((unint64_t)(v165 + 1) >> 61) {
                        sub_190718FD4();
                      }
                      uint64_t v166 = v152 - (void)*v145;
                      uint64_t v167 = v166 >> 2;
                      if (v166 >> 2 <= (unint64_t)(v165 + 1)) {
                        uint64_t v167 = v165 + 1;
                      }
                      if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v168 = v167;
                      }
                      if (v168) {
                        unint64_t v168 = (unint64_t)sub_190781384(v168);
                      }
                      else {
                        uint64_t v169 = 0;
                      }
                      double v178 = (uint64_t *)(v168 + 8 * v165);
                      unint64_t v179 = v168 + 8 * v169;
                      *double v178 = v147;
                      unint64_t v153 = v178 + 1;
                      int v180 = (char *)*v149;
                      int v181 = (char *)*v145;
                      if (*v149 != *v145)
                      {
                        do
                        {
                          uint64_t v182 = *((void *)v180 - 1);
                          v180 -= 8;
                          *--double v178 = v182;
                        }
                        while (v180 != v181);
                        int v180 = (char *)*v145;
                      }
                      *uint64_t v145 = v178;
                      *uint64_t v149 = v153;
                      v149[1] = (void *)v179;
                      if (v180) {
                        operator delete(v180);
                      }
                    }
                    else
                    {
                      uint64_t *v150 = v147;
                      unint64_t v153 = v150 + 1;
                    }
                    *uint64_t v149 = v153;
                  }
                  else
                  {
                    uint64_t v155 = (v146 - 0x100000000) | v92;
                    uint64_t v156 = v144 + 24 * (int)v93;
                    int v159 = *(uint64_t **)(v156 + 8);
                    char v157 = (void **)(v156 + 8);
                    int v158 = v159;
                    unint64_t v160 = (unint64_t)v157[1];
                    if ((unint64_t)v159 >= v160)
                    {
                      uint64_t v170 = ((char *)v158 - (unsigned char *)*v145) >> 3;
                      if ((unint64_t)(v170 + 1) >> 61) {
                        sub_190718FD4();
                      }
                      uint64_t v171 = v160 - (void)*v145;
                      uint64_t v172 = v171 >> 2;
                      if (v171 >> 2 <= (unint64_t)(v170 + 1)) {
                        uint64_t v172 = v170 + 1;
                      }
                      if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v173 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v173 = v172;
                      }
                      if (v173) {
                        unint64_t v173 = (unint64_t)sub_190781384(v173);
                      }
                      else {
                        uint64_t v174 = 0;
                      }
                      int v183 = (uint64_t *)(v173 + 8 * v170);
                      unint64_t v184 = v173 + 8 * v174;
                      *int v183 = v155;
                      int v161 = v183 + 1;
                      long double v185 = (char *)*v157;
                      int v186 = (char *)*v145;
                      if (*v157 != *v145)
                      {
                        do
                        {
                          uint64_t v187 = *((void *)v185 - 1);
                          v185 -= 8;
                          *--int v183 = v187;
                        }
                        while (v185 != v186);
                        long double v185 = (char *)*v145;
                      }
                      *uint64_t v145 = v183;
                      *char v157 = v161;
                      v157[1] = (void *)v184;
                      if (v185) {
                        operator delete(v185);
                      }
                    }
                    else
                    {
                      *int v158 = v155;
                      int v161 = v158 + 1;
                    }
                    *char v157 = v161;
                    double v188 = (void **)(*v232 + 24 * (int)v111);
                    uint64_t v189 = 0x100000001 * v91;
                    int v190 = v188 + 1;
                    int v191 = (uint64_t *)v188[1];
                    unint64_t v192 = (unint64_t)v188[2];
                    if ((unint64_t)v191 >= v192)
                    {
                      uint64_t v194 = ((char *)v191 - (unsigned char *)*v188) >> 3;
                      if ((unint64_t)(v194 + 1) >> 61) {
                        sub_190718FD4();
                      }
                      uint64_t v195 = v192 - (void)*v188;
                      uint64_t v196 = v195 >> 2;
                      if (v195 >> 2 <= (unint64_t)(v194 + 1)) {
                        uint64_t v196 = v194 + 1;
                      }
                      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v197 = v196;
                      }
                      if (v197) {
                        unint64_t v197 = (unint64_t)sub_190781384(v197);
                      }
                      else {
                        uint64_t v198 = 0;
                      }
                      double v199 = (uint64_t *)(v197 + 8 * v194);
                      unint64_t v200 = v197 + 8 * v198;
                      *double v199 = v189;
                      uint64_t v193 = v199 + 1;
                      double v201 = (char *)*v190;
                      uint64_t v202 = (char *)*v188;
                      if (*v190 != *v188)
                      {
                        do
                        {
                          uint64_t v203 = *((void *)v201 - 1);
                          v201 -= 8;
                          *--double v199 = v203;
                        }
                        while (v201 != v202);
                        double v201 = (char *)*v188;
                      }
                      *double v188 = v199;
                      *int v190 = v193;
                      v188[2] = (void *)v200;
                      if (v201) {
                        operator delete(v201);
                      }
                    }
                    else
                    {
                      uint64_t *v191 = v189;
                      uint64_t v193 = v191 + 1;
                    }
                    *int v190 = v193;
                  }
                  goto LABEL_338;
                }
                if (v111 == v93)
                {
                  uint64_t v111 = v93;
                }
                else
                {
                  int v112 = (void **)(*v232 + 24 * (int)v93);
                  int v113 = v112 + 1;
                  int v114 = (unint64_t *)v112[1];
                  unint64_t v115 = (unint64_t)v112[2];
                  if ((unint64_t)v114 >= v115)
                  {
                    uint64_t v117 = ((char *)v114 - (unsigned char *)*v112) >> 3;
                    if ((unint64_t)(v117 + 1) >> 61) {
                      sub_190718FD4();
                    }
                    uint64_t v118 = v115 - (void)*v112;
                    uint64_t v119 = v118 >> 2;
                    if (v118 >> 2 <= (unint64_t)(v117 + 1)) {
                      uint64_t v119 = v117 + 1;
                    }
                    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v120 = v119;
                    }
                    if (v120) {
                      unint64_t v120 = (unint64_t)sub_190781384(v120);
                    }
                    else {
                      uint64_t v121 = 0;
                    }
                    __int16 v122 = (unint64_t *)(v120 + 8 * v117);
                    unint64_t *v122 = ((v91 << 32) - 0x100000000) | v92;
                    unint64_t v116 = v122 + 1;
                    int v123 = (char *)*v113;
                    uint64_t v124 = (char *)*v112;
                    if (*v113 != *v112)
                    {
                      do
                      {
                        unint64_t v125 = *((void *)v123 - 1);
                        v123 -= 8;
                        *--__int16 v122 = v125;
                      }
                      while (v123 != v124);
                      int v123 = (char *)*v112;
                    }
                    *int v112 = v122;
                    *int v113 = v116;
                    v112[2] = (void *)(v120 + 8 * v121);
                    if (v123) {
                      operator delete(v123);
                    }
                  }
                  else
                  {
                    *int v114 = ((v91 << 32) - 0x100000000) | v92;
                    unint64_t v116 = v114 + 1;
                  }
                  *int v113 = v116;
                  uint64_t v92 = v91;
                }
              }
              else
              {
                uint64_t v92 = 0;
              }
              ++v91;
              uint64_t v93 = v111;
              if ([v38 count] <= v91) {
                goto LABEL_338;
              }
            }
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            double v138 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend(v94, "latitude_deg");
              uint64_t v140 = v139;
              objc_msgSend(v94, "longitude_deg");
              *(_DWORD *)__n128 buf = 134283777;
              *(void *)&uint8_t buf[4] = v140;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v141;
              _os_log_impl(&dword_1906B8000, v138, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid index for location,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
            }
            if (!sub_1906CB57C(115, 0)) {
              goto LABEL_257;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            objc_msgSend(v94, "latitude_deg");
            uint64_t v230 = v229;
            objc_msgSend(v94, "longitude_deg");
            int v238 = 134283777;
            *(void *)double v239 = v230;
            *(_WORD *)&v239[8] = 2049;
            *(void *)int v240 = v231;
            double v60 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
            goto LABEL_155;
          }
LABEL_338:
          ++*(_DWORD *)(a1 + 520);
          *(_DWORD *)(a1 + 492) = 0;
          *(_WORD *)(a1 + 472) = 1;
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v204 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
          {
            int v205 = *(_DWORD *)(a1 + 520);
            int v206 = *(_DWORD *)(a1 + 524);
            int v207 = *(_DWORD *)(a1 + 532);
            int v208 = *(_DWORD *)(a1 + 504);
            int v209 = *(_DWORD *)(a1 + 492);
            int v210 = *(unsigned __int8 *)(a1 + 472);
            *(_DWORD *)__n128 buf = 67241472;
            *(_DWORD *)&uint8_t buf[4] = v205;
            *(_WORD *)&uint8_t buf[8] = 1026;
            *(_DWORD *)&buf[10] = v206;
            *(_WORD *)&unsigned char buf[14] = 1026;
            *(_DWORD *)&uint8_t buf[16] = v207;
            *(_WORD *)&buf[20] = 1026;
            *(_DWORD *)&unsigned char buf[22] = v208;
            *(_WORD *)&buf[26] = 1026;
            *(_DWORD *)&buf[28] = v209;
            *(_WORD *)&unsigned char buf[32] = 1026;
            *(_DWORD *)&buf[34] = v210;
            _os_log_impl(&dword_1906B8000, v204, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,update completed,rollingBufferUpdateCounter,%{public}d,lastMatchedPointIndex,%{public}d,rollingBufferStartIndexOnReferenceRoute,%{public}d,referenceRouteDataPointCounter,%{public}d,numberOfRoutePointsToAdd,%{public}d,routePointsArrayInitialized,%{public}d", buf, 0x26u);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          int v211 = *(_DWORD *)(a1 + 520);
          int v212 = *(_DWORD *)(a1 + 524);
          int v213 = *(_DWORD *)(a1 + 532);
          int v214 = *(_DWORD *)(a1 + 504);
          int v215 = *(_DWORD *)(a1 + 492);
          int v216 = *(unsigned __int8 *)(a1 + 472);
          int v238 = 67241472;
          *(_DWORD *)double v239 = v211;
          *(_WORD *)&v239[4] = 1026;
          *(_DWORD *)&v239[6] = v212;
          *(_WORD *)int v240 = 1026;
          *(_DWORD *)&v240[2] = v213;
          *(_WORD *)&v240[6] = 1026;
          *(_DWORD *)&v240[8] = v214;
          *(_WORD *)&v240[12] = 1026;
          *(_DWORD *)&v240[14] = v215;
          *(_WORD *)&v240[18] = 1026;
          *(_DWORD *)int v241 = v216;
          long long v164 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v164);
LABEL_278:
          if (v164 != buf) {
            free(v164);
          }
          return 0;
        }
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v61 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v61, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data array is empty", buf, 2u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_257;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1)
        {
LABEL_131:
          LOWORD(v238) = 0;
          double v60 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v60);
LABEL_155:
          if (v60 != buf) {
            free(v60);
          }
          goto LABEL_257;
        }
      }
      else
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        BOOL v59 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v59, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data array is null", buf, 2u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_257;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1) {
          goto LABEL_131;
        }
      }
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      goto LABEL_131;
    }
    id v27 = (id)[a2 mutableCopy];
    *(void *)(a1 + 48) = v27;
    if ([v27 count] > (unint64_t)*(int *)(a1 + 492))
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v28 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        int v29 = *(_DWORD *)(a1 + 488);
        int v30 = *(_DWORD *)(a1 + 492);
        int v31 = [*(id *)(a1 + 48) count];
        *(_DWORD *)__n128 buf = 67240704;
        *(_DWORD *)&uint8_t buf[4] = v29;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v30;
        *(_WORD *)&unsigned char buf[14] = 1026;
        *(_DWORD *)&uint8_t buf[16] = v31;
        _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,numberOfPointsToAdd,%{public}d,bufferedRoutePointsCount,%{public}u", buf, 0x14u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v217 = *(_DWORD *)(a1 + 488);
      int v218 = *(_DWORD *)(a1 + 492);
      int v219 = [*(id *)(a1 + 48) count];
      int v238 = 67240704;
      *(_DWORD *)double v239 = v217;
      *(_WORD *)&v239[4] = 1026;
      *(_DWORD *)&v239[6] = v218;
      *(_WORD *)int v240 = 1026;
      *(_DWORD *)&v240[2] = v219;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v17);
      if (v17 == buf) {
        return 1;
      }
      goto LABEL_59;
    }
    if ((unint64_t)[*(id *)(a1 + 48) count] > 9)
    {
      if (!*(unsigned char *)(a1 + 473))
      {
        *(_DWORD *)(a1 + 504) = [*(id *)(a1 + 48) count];
        goto LABEL_92;
      }
    }
    else if (!*(unsigned char *)(a1 + 473))
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v35 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        int v36 = [*(id *)(a1 + 48) count];
        *(_DWORD *)__n128 buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = 10;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v36;
        _os_log_impl(&dword_1906B8000, v35, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,location series too short,minimumPointsToProcess,%{public}u,bufferedRoutePointsCount,%{public}u", buf, 0xEu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v220 = [*(id *)(a1 + 48) count];
        int v238 = 67240448;
        *(_DWORD *)double v239 = 10;
        *(_WORD *)&v239[4] = 1026;
        *(_DWORD *)&v239[6] = v220;
        double v221 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v221);
        if (v221 != buf) {
          free(v221);
        }
      }
      return 5;
    }
    int v37 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a1 + 504) = v37 + [*(id *)(a1 + 48) count];
    *(_DWORD *)(a1 + 524) = 0;
    goto LABEL_92;
  }
  if (*(_DWORD *)(a1 + 504))
  {
    *(unsigned char *)(a1 + 479) = 1;
    *(_DWORD *)(a1 + 492) = 0;
    *(unsigned char *)(a1 + 473) = 0;
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v18 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,no more data available,rolling buffer includes the end of the reference route", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    LOWORD(v238) = 0;
    long long v164 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v164);
    goto LABEL_278;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  uint64_t v26 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,input data array is empty", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    LOWORD(v238) = 0;
    int v177 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v177);
    if (v177 != buf) {
      free(v177);
    }
  }
  return 3;
}

uint64_t sub_19077CCD8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(unsigned int *)(a1 + 524);
  if ((v4 & 0x80000000) != 0 || [*(id *)(a1 + 48) count] < v4)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v7 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a1 + 524);
      *(_DWORD *)__n128 buf = 67240192;
      LODWORD(v33) = v8;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "CLRR,getDistanceDuringOffRoutePeriod,invalid array index, %{public}d", buf, 8u);
    }
    int v9 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1)
    {
LABEL_36:
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateDistanceDuringOffRoutePeriod(const CLRoutePoint *, RacingRouteScoreboard &) const", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
      return 0;
    }
LABEL_42:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_36;
  }
  objc_msgSend(a2, "timestamp_s");
  double v12 = v11 - *(double *)(a1 + 328);
  if (v12 >= 0.0)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", *(int *)(a1 + 524)), "timestamp_s");
    double v14 = v12 + v13;
    *(void *)(a3 + 80) = *(void *)(a1 + 376);
    *(void *)(a3 + 168) = *(void *)(a1 + 464);
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 48), "count") - 1), "timestamp_s");
    if (v15 >= v14)
    {
      unint64_t v22 = *(int *)(a1 + 524);
      if ([*(id *)(a1 + 48) count] <= v22) {
        return 1;
      }
      while (1)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", v22), "timestamp_s");
        int v23 = *(void **)(a1 + 48);
        if (v24 >= v14) {
          break;
        }
        ++v22;
        unint64_t v25 = [v23 count];
        uint64_t result = 1;
        if (v25 <= v22) {
          return result;
        }
      }
      objc_msgSend((id)objc_msgSend(v23, "objectAtIndexedSubscript:", v22), "odometer_m");
      *(void *)(a3 + 168) = v26;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      id v27 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        double v28 = *(double *)(a3 + 80);
        uint64_t v29 = *(void *)(a3 + 168);
        *(_DWORD *)__n128 buf = 134283777;
        double v33 = v28;
        __int16 v34 = 2049;
        uint64_t v35 = v29;
        _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_DEFAULT, "CLRR,getDistanceDuringOffRoutePeriod,distAlongRefRoute,%{private}.2lf,refDistAlongRefRoute,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1) {
        goto LABEL_40;
      }
    }
    else
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 48), "count") - 1), "odometer_m");
      *(void *)(a3 + 168) = v16;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      int v17 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        double v18 = *(double *)(a3 + 80);
        uint64_t v19 = *(void *)(a3 + 168);
        *(_DWORD *)__n128 buf = 134283777;
        double v33 = v18;
        __int16 v34 = 2049;
        uint64_t v35 = v19;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "CLRR,getDistanceDuringOffRoutePeriod,distAlongRefRoute,%{private}.2lf,refDistAlongRefRoute,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1)
      {
LABEL_40:
        int v31 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::updateDistanceDuringOffRoutePeriod(const CLRoutePoint *, RacingRouteScoreboard &) const", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
        return 1;
      }
    }
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_40;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  int v20 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349056;
    double v33 = v12;
    _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLRR,getDistanceDuringOffRoutePeriod,invalid time, %{public}.2lf", buf, 0xCu);
  }
  int v21 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v21)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_42;
  }
  return result;
}

void sub_19077D31C(uint64_t a1, double *a2, uint64_t *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  double v6 = a2[16];
  double v7 = a2[5];
  double v8 = a2[10];
  double v9 = a2[21];
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  double v10 = v6 - v7;
  double v11 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = a3;
    if (*((char *)a3 + 23) < 0) {
      double v12 = (uint64_t *)*a3;
    }
    double v13 = *a2;
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 4);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v17 = *((void *)a2 + 6);
    uint64_t v18 = *((void *)a2 + 7);
    uint64_t v19 = *((void *)a2 + 8);
    uint64_t v20 = *((void *)a2 + 9);
    uint64_t v21 = *((void *)a2 + 2);
    uint64_t v22 = *((void *)a2 + 3);
    uint64_t v23 = *((void *)a2 + 10);
    uint64_t v24 = *((void *)a2 + 11);
    uint64_t v25 = *((void *)a2 + 12);
    uint64_t v26 = *((void *)a2 + 13);
    uint64_t v27 = *((void *)a2 + 16);
    uint64_t v28 = *((void *)a2 + 17);
    uint64_t v29 = *((void *)a2 + 18);
    uint64_t v30 = *((void *)a2 + 19);
    uint64_t v32 = *((void *)a2 + 14);
    uint64_t v31 = *((void *)a2 + 15);
    uint64_t v34 = *((void *)a2 + 20);
    uint64_t v33 = *((void *)a2 + 21);
    int v36 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)__n128 buf = 136452611;
    uint64_t v38 = v12;
    __int16 v39 = 2050;
    uint64_t v40 = v15;
    __int16 v41 = 2049;
    double v42 = v13;
    __int16 v43 = 2049;
    uint64_t v44 = v14;
    __int16 v45 = 2049;
    uint64_t v46 = v21;
    __int16 v47 = 2050;
    uint64_t v48 = v16;
    __int16 v49 = 2050;
    uint64_t v50 = v17;
    __int16 v51 = 2050;
    uint64_t v52 = v18;
    __int16 v53 = 2050;
    uint64_t v54 = v19;
    __int16 v55 = 2049;
    uint64_t v56 = v20;
    __int16 v57 = 2050;
    uint64_t v58 = v22;
    __int16 v59 = 2050;
    uint64_t v60 = v23;
    __int16 v61 = 2050;
    uint64_t v62 = v31;
    __int16 v63 = 2049;
    uint64_t v64 = v24;
    __int16 v65 = 2049;
    uint64_t v66 = v25;
    __int16 v67 = 2049;
    uint64_t v68 = v26;
    __int16 v69 = 2050;
    uint64_t v70 = v27;
    __int16 v71 = 2050;
    uint64_t v72 = v28;
    __int16 v73 = 2050;
    uint64_t v74 = v29;
    __int16 v75 = 2050;
    uint64_t v76 = v30;
    __int16 v77 = 2049;
    uint64_t v78 = v34;
    __int16 v79 = 2050;
    uint64_t v80 = v32;
    __int16 v81 = 2050;
    uint64_t v82 = v33;
    __int16 v83 = 1026;
    int v84 = v36;
    __int16 v85 = 2050;
    double v86 = v10;
    __int16 v87 = 2050;
    double v88 = v8 - v9;
    _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEFAULT, "CLRR,printDebugLog,pointType,%{public}s,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,timeFromStart,%{public}.1lf,offRouteTime,%{public}.1lf,distFromStart,%{public}.2lf,offRouteDist,%{public}.2lf,pace,%{private}.2lf,odom,%{public}.2lf,distAlongRefRoute,%{public}.2lf,refTime,%{public}.1lf,refLat,%{private}.7lf,refLon,%{private}.7lf,refAlt,%{private}.2lf,refTimeFromStart,%{public}.1lf,refOffRouteTime,%{public}.1lf,refDistFromStart,%{public}.2lf,refOffRouteDist,%{public}.2lf,refPace,%{private}.2lf,refOdom,%{public}.2lf,refDistAlongRefRoute,%{public}.2lf,signalEnv,%{public}d,timeAhead,%{public}.2lf,distanceAhead,%{public}.2lf", buf, 0x102u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLRacingRoute::printDebugLog(const RacingRouteScoreboard &, const std::string) const", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
}

uint64_t sub_19077D760(uint64_t a1, int *a2, int *a3, _DWORD *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  if (*a2 <= 8 && ((1 << *a2) & 0x150) != 0 || v4 == 90603)
  {
    int v8 = *a3;
    if (*a3 > 9)
    {
      *(_DWORD *)(a1 + 44) = v4;
      *(_DWORD *)(a1 + 488) = v8;
      *(_DWORD *)(a1 + 496) = *a4;
      *(_DWORD *)(a1 + 492) = v8;
      *(unsigned char *)(a1 + 480) = 1;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v13 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(_DWORD *)(a1 + 44);
        int v15 = *(_DWORD *)(a1 + 488);
        int v16 = *(_DWORD *)(a1 + 492);
        int v17 = *(_DWORD *)(a1 + 496);
        *(_DWORD *)__n128 buf = 67240960;
        int v25 = v14;
        __int16 v26 = 1026;
        int v27 = v15;
        __int16 v28 = 1026;
        int v29 = v16;
        __int16 v30 = 1026;
        int v31 = v17;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "CLRR,configureRouteModel,configuration succeeded,workout activity type,%{public}u,route points rolling buffer size,%{public}d,number of route points to add,%{public}d,off route grace duration,%{public}d", buf, 0x1Au);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      return 0;
    }
    else
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v9 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        int v10 = *a3;
        *(_DWORD *)__n128 buf = 67240192;
        int v25 = v10;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLRR,configureRouteModel,buffer size is too small,%{public}d", buf, 8u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      return 2;
    }
  }
  else
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v19 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      int v20 = *a2;
      *(_DWORD *)__n128 buf = 67240192;
      int v25 = v20;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLRR,configureRouteModel,unsupported activity type,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    return 1;
  }
}

uint64_t sub_19077DC74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 480))
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v6 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,route model has NOT been configured successfully,expire the race session", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      LOWORD(v128) = 0;
      unint64_t v91 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v91);
      if (v91 != (char *)buf) {
        free(v91);
      }
    }
    *(unsigned char *)(a1 + 478) = 1;
  }
  if (*(unsigned char *)(a1 + 475))
  {
    sub_190772174(a1);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v7 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,passed finish line", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      LOWORD(v128) = 0;
      double v86 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v86);
      if (v86 != (char *)buf) {
        free(v86);
      }
    }
    return 3;
  }
  if (a2)
  {
    objc_msgSend(a2, "timestamp_s");
    if (v9 < *(double *)(a1 + 328) || (objc_msgSend(a2, "odometer_m"), v10 < *(double *)(a1 + 320)))
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      double v11 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(a2, "timestamp_s");
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(a1 + 328);
        objc_msgSend(a2, "odometer_m");
        uint64_t v15 = *(void *)(a1 + 320);
        *(_DWORD *)__n128 buf = 134349824;
        uint64_t v143 = v13;
        __int16 v144 = 2050;
        uint64_t v145 = v14;
        __int16 v146 = 2050;
        uint64_t v147 = v16;
        __int16 v148 = 2050;
        uint64_t v149 = v15;
        _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid input data,time,%{public}.1lf,lastOnRouteTime,%{public}.1lf,odom,%{public}.2lf,lastOnRouteOdom,%{public}.2lf", buf, 0x2Au);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 5;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      objc_msgSend(a2, "timestamp_s");
      uint64_t v94 = v93;
      uint64_t v95 = *(void *)(a1 + 328);
      objc_msgSend(a2, "odometer_m");
      uint64_t v96 = *(void *)(a1 + 320);
      int v128 = 134349824;
      uint64_t v129 = v94;
      __int16 v130 = 2050;
      uint64_t v131 = v95;
      __int16 v132 = 2050;
      uint64_t v133 = v97;
      __int16 v134 = 2050;
      uint64_t v135 = v96;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v35);
      if (v35 == (char *)buf) {
        return 5;
      }
LABEL_180:
      free(v35);
      return 5;
    }
    objc_msgSend(a2, "latitude_deg");
    double v19 = v18;
    objc_msgSend(a2, "longitude_deg");
    if (!sub_190771D68(v19, v20)
      || (objc_msgSend(a2, "altitude_m"), fabs(v21) == INFINITY)
      || v21 <= -430.5
      || v21 >= 8848.86)
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v24 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(a2, "latitude_deg");
        uint64_t v26 = v25;
        objc_msgSend(a2, "longitude_deg");
        uint64_t v28 = v27;
        objc_msgSend(a2, "altitude_m");
        *(_DWORD *)__n128 buf = 134284033;
        uint64_t v143 = v26;
        __int16 v144 = 2049;
        uint64_t v145 = v28;
        __int16 v146 = 2049;
        uint64_t v147 = v29;
        _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid input data,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 5;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      objc_msgSend(a2, "latitude_deg");
      uint64_t v31 = v30;
      objc_msgSend(a2, "longitude_deg");
      uint64_t v33 = v32;
      objc_msgSend(a2, "altitude_m");
      int v128 = 134284033;
      uint64_t v129 = v31;
      __int16 v130 = 2049;
      uint64_t v131 = v33;
      __int16 v132 = 2049;
      uint64_t v133 = v34;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v35);
      goto LABEL_56;
    }
    if (*(unsigned char *)(a1 + 478))
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v22 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race session expired", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LOWORD(v128) = 0;
        uint64_t v102 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v102);
        if (v102 != (char *)buf) {
          free(v102);
        }
      }
      if (*(unsigned char *)(a1 + 474) && (sub_19077CCD8(a1, a2, a3) & 1) == 0)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v23 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,race session expired but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          LOWORD(v128) = 0;
          unint64_t v116 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v116);
          if (v116 != (char *)buf) {
            free(v116);
          }
        }
      }
      return 6;
    }
    ++*(_DWORD *)(a1 + 508);
    *(unsigned char *)(a1 + 484) = 0;
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    int v36 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(a2, "timestamp_s");
      uint64_t v38 = v37;
      objc_msgSend(a2, "latitude_deg");
      uint64_t v40 = v39;
      objc_msgSend(a2, "longitude_deg");
      uint64_t v42 = v41;
      objc_msgSend(a2, "altitude_m");
      uint64_t v44 = v43;
      objc_msgSend(a2, "odometer_m");
      uint64_t v46 = v45;
      int v47 = [a2 signalEnvironmentType];
      int v48 = *(_DWORD *)(a1 + 508);
      *(_DWORD *)__n128 buf = 134285057;
      uint64_t v143 = v38;
      __int16 v144 = 2049;
      uint64_t v145 = v40;
      __int16 v146 = 2049;
      uint64_t v147 = v42;
      __int16 v148 = 2049;
      uint64_t v149 = v44;
      __int16 v150 = 2049;
      uint64_t v151 = v46;
      __int16 v152 = 1025;
      int v153 = v47;
      __int16 v154 = 1026;
      int v155 = v48;
      _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,pointType,currentLocation,time,%{private}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{private}.2lf,signalEnv,%{private}d,pointCount,%{public}d", buf, 0x40u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      objc_msgSend(a2, "timestamp_s");
      uint64_t v104 = v103;
      objc_msgSend(a2, "latitude_deg");
      uint64_t v106 = v105;
      objc_msgSend(a2, "longitude_deg");
      uint64_t v108 = v107;
      objc_msgSend(a2, "altitude_m");
      uint64_t v110 = v109;
      objc_msgSend(a2, "odometer_m");
      uint64_t v112 = v111;
      int v113 = [a2 signalEnvironmentType];
      int v114 = *(_DWORD *)(a1 + 508);
      int v128 = 134285057;
      uint64_t v129 = v104;
      __int16 v130 = 2049;
      uint64_t v131 = v106;
      __int16 v132 = 2049;
      uint64_t v133 = v108;
      __int16 v134 = 2049;
      uint64_t v135 = v110;
      __int16 v136 = 2049;
      uint64_t v137 = v112;
      __int16 v138 = 1025;
      int v139 = v113;
      __int16 v140 = 1026;
      int v141 = v114;
      unint64_t v115 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v115);
      if (v115 != (char *)buf) {
        free(v115);
      }
    }
    if (!*(unsigned char *)(a1 + 483) && *(unsigned char *)(a1 + 479) && [*(id *)(a1 + 48) count])
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 48), "count") - 1), "odometer_m");
      *(void *)(a1 + 544) = v52;
      *(unsigned char *)(a1 + 483) = 1;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      __int16 v53 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = *(void *)(a1 + 544);
        *(_DWORD *)__n128 buf = 134283521;
        uint64_t v143 = v54;
        _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,reference route total length,%{private}.2lf", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v55 = *(void *)(a1 + 544);
        int v128 = 134283521;
        uint64_t v129 = v55;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
    }
    int v49 = *(_DWORD *)(a1 + 40);
    if (v49 != [a2 signalEnvironmentType])
    {
      unsigned int v50 = [a2 signalEnvironmentType];
      *(_DWORD *)(a1 + 40) = 0;
      if (v50 >= 5 && v50 != 6)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        __int16 v83 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          int v84 = [a2 signalEnvironmentType];
          *(_DWORD *)__n128 buf = 67240192;
          LODWORD(v143) = v84;
          _os_log_impl(&dword_1906B8000, v83, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid signal environment type,%{public}d", buf, 8u);
        }
        if (!sub_1906CB57C(115, 0)) {
          return 5;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        int v128 = 67240192;
        LODWORD(v129) = [a2 signalEnvironmentType];
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v35);
LABEL_56:
        if (v35 == (char *)buf) {
          return 5;
        }
        goto LABEL_180;
      }
      *(_DWORD *)(a1 + 40) = v50;
      if (v50 - 1 > 5) {
        uint64_t v51 = 0x4044000000000000;
      }
      else {
        uint64_t v51 = qword_190883428[v50 - 1];
      }
      *(void *)(a1 + 576) = v51;
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      __int16 v57 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v58 = *(void *)(a1 + 576);
        *(_DWORD *)__n128 buf = 134283521;
        uint64_t v143 = v58;
        _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_DEBUG, "CLRR,getPerformanceResults,nearest neighbor maximum accepted distance,%{private}.2lf", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v117 = *(void *)(a1 + 576);
        int v128 = 134283521;
        uint64_t v129 = v117;
        uint64_t v118 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v118);
        if (v118 != (char *)buf) {
          free(v118);
        }
      }
    }
    objc_msgSend(a2, "latitude_deg");
    double v60 = v59;
    objc_msgSend(a2, "longitude_deg");
    if (sub_19077FCF0((double *)(a1 + 56), v60, v61))
    {
      objc_msgSend(a2, "latitude_deg");
      double v63 = v62;
      objc_msgSend(a2, "longitude_deg");
      unsigned int v65 = sub_190771E9C(a1 + 56, v63, v64);
      unsigned int v127 = v65;
      if ((v65 & 0x80000000) != 0
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3) <= v65)
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v74 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend(a2, "latitude_deg");
          uint64_t v76 = v75;
          objc_msgSend(a2, "longitude_deg");
          *(_DWORD *)__n128 buf = 134283777;
          uint64_t v143 = v76;
          __int16 v144 = 2049;
          uint64_t v145 = v77;
          _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,unspecified state,invalid index for location,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
        }
        if (!sub_1906CB57C(115, 0)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        objc_msgSend(a2, "latitude_deg");
        uint64_t v79 = v78;
        objc_msgSend(a2, "longitude_deg");
        int v128 = 134283777;
        uint64_t v129 = v79;
        __int16 v130 = 2049;
        uint64_t v131 = v80;
        __int16 v81 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v81);
        if (v81 == (char *)buf) {
          return 0;
        }
        goto LABEL_225;
      }
      unint64_t v66 = *(unsigned int *)(a1 + 524);
      if ((v66 & 0x80000000) == 0 && [*(id *)(a1 + 48) count] > v66)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", *(int *)(a1 + 524)), "latitude_deg");
        double v68 = v67;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", *(int *)(a1 + 524)), "longitude_deg");
        *(_DWORD *)(a1 + 536) = sub_190771E9C(a1 + 56, v68, v69);
      }
      if (*(unsigned char *)(a1 + 474))
      {
        if (*(unsigned char *)(a1 + 476) || *(unsigned char *)(a1 + 485))
        {
          uint64_t v70 = *(void **)(a1 + 48);
          *(_DWORD *)__n128 buf = 1;
          if (sub_190774598(a1, a2, v70, &v127, (int *)buf, a3))
          {
            sub_19077A170(a1);
            sub_1906D5C70(v123, "rejoin");
            sub_19077D31C(a1, (double *)a3, v123);
            if (v124 < 0)
            {
              __int16 v71 = (void *)v123[0];
LABEL_149:
              operator delete(v71);
              return 1;
            }
            return 1;
          }
          *(_OWORD *)(a3 + 144) = 0u;
          *(_OWORD *)(a3 + 160) = 0u;
          *(_OWORD *)(a3 + 112) = 0u;
          *(_OWORD *)(a3 + 128) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 96) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          sub_19077A058(a1);
          if (*(unsigned char *)(a1 + 476))
          {
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            double v88 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl(&dword_1906B8000, v88, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,user is off-route", buf, 2u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6A0 != -1) {
                dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
              }
              LOWORD(v128) = 0;
              unint64_t v120 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v120);
              if (v120 != (char *)buf) {
                free(v120);
              }
            }
            if (sub_19077CCD8(a1, a2, a3)) {
              return 2;
            }
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            uint64_t v89 = qword_1E929F6A8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl(&dword_1906B8000, v89, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,user is off-route but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
            }
            if (!sub_1906CB57C(115, 0)) {
              return 2;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6A0 != -1) {
              dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
            }
            LOWORD(v128) = 0;
            int v90 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v90);
LABEL_229:
            if (v90 != (char *)buf) {
              free(v90);
            }
            return 2;
          }
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v98 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v98, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,unspecified state", buf, 2u);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_201;
          }
        }
        else
        {
          uint64_t v100 = *(void **)(a1 + 48);
          *(_DWORD *)__n128 buf = 2;
          if (sub_190774598(a1, a2, v100, &v127, (int *)buf, a3))
          {
            sub_19077A170(a1);
            sub_1906D5C70(v121, "onRoute");
            sub_19077D31C(a1, (double *)a3, v121);
            if ((v122 & 0x80000000) == 0) {
              return 1;
            }
            __int16 v71 = (void *)v121[0];
            goto LABEL_149;
          }
          *(_OWORD *)(a3 + 144) = 0u;
          *(_OWORD *)(a3 + 160) = 0u;
          *(_OWORD *)(a3 + 112) = 0u;
          *(_OWORD *)(a3 + 128) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 96) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          sub_19077A058(a1);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          uint64_t v101 = qword_1E929F6A8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,unspecified state", buf, 2u);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 == -1) {
            goto LABEL_201;
          }
        }
      }
      else
      {
        __int16 v87 = *(void **)(a1 + 48);
        *(_DWORD *)__n128 buf = 0;
        if (sub_190774598(a1, a2, v87, &v127, (int *)buf, a3))
        {
          *(unsigned char *)(a1 + 474) = 1;
          sub_19077A170(a1);
          sub_1906D5C70(__p, "start");
          sub_19077D31C(a1, (double *)a3, (uint64_t *)__p);
          if (v126 < 0)
          {
            __int16 v71 = __p[0];
            goto LABEL_149;
          }
          return 1;
        }
        *(_OWORD *)(a3 + 144) = 0u;
        *(_OWORD *)(a3 + 160) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)(a3 + 128) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v92 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v92, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race not started yet,unspecified state", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 == -1) {
          goto LABEL_201;
        }
      }
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_201:
      LOWORD(v128) = 0;
      __int16 v81 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v81);
      goto LABEL_224;
    }
    *(unsigned char *)(a1 + 484) = 1;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    if (*(unsigned char *)(a1 + 474))
    {
      sub_19077A058(a1);
      if (*(unsigned char *)(a1 + 476))
      {
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        uint64_t v72 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,current location outside of bounding box,user is off-route", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6A0 != -1) {
            dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
          }
          LOWORD(v128) = 0;
          uint64_t v119 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v119);
          if (v119 != (char *)buf) {
            free(v119);
          }
        }
        if (sub_19077CCD8(a1, a2, a3)) {
          return 2;
        }
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        __int16 v73 = qword_1E929F6A8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,user is off-route but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
        }
        if (!sub_1906CB57C(115, 0)) {
          return 2;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6A0 != -1) {
          dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
        }
        LOWORD(v128) = 0;
        int v90 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v90);
        goto LABEL_229;
      }
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      __int16 v85 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v85, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,current location outside of bounding box,unspecified state", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1) {
        goto LABEL_223;
      }
    }
    else
    {
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v82 = qword_1E929F6A8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race not started yet,current location outside of bounding box,unspecified state", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 == -1) {
        goto LABEL_223;
      }
    }
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
LABEL_223:
    LOWORD(v128) = 0;
    __int16 v81 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v81);
LABEL_224:
    if (v81 != (char *)buf) {
LABEL_225:
    }
      free(v81);
    return 0;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  int v17 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,current data point is null", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    LOWORD(v128) = 0;
    uint64_t v99 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v99);
    if (v99 != (char *)buf) {
      free(v99);
    }
  }
  return 4;
}

void sub_19077FCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19077FCF0(double *a1, double a2, double a3)
{
  if (fabs(a2) < 0.00003 && fabs(a3) < 0.00003) {
    return 0;
  }
  BOOL result = 0;
  if (a3 >= -180.0 && a2 <= 90.0 && a2 >= -90.0 && a3 <= 180.0)
  {
    if (*a1 > a2 || a1[1] < a2) {
      return 0;
    }
    double v5 = a1[2];
    double v6 = a1[3];
    if (v5 >= 0.0 && v6 >= 0.0 || v5 <= 0.0 && v6 <= 0.0) {
      return v6 >= a3 && v5 <= a3;
    }
    double v7 = 360.0;
    if (v5 < 0.0) {
      double v5 = v5 + 360.0;
    }
    double v8 = v6 + 360.0;
    if (v6 >= 0.0) {
      double v8 = a1[3];
    }
    double v9 = v8 - v5;
    if (v8 - v5 <= 180.0)
    {
      if (v9 < -180.0) {
        double v9 = v9 + 360.0;
      }
    }
    else
    {
      double v9 = v9 + -360.0;
    }
    double v10 = a3 + 360.0;
    if (a3 >= 0.0) {
      double v10 = a3;
    }
    double v11 = v8 - v10;
    if (v11 <= 180.0)
    {
      if (v11 < -180.0) {
        double v11 = v11 + 360.0;
      }
    }
    else
    {
      double v11 = v11 + -360.0;
    }
    double v12 = fabs(v9);
    double v13 = fabs(v11);
    double v14 = v5 - v10;
    if (v14 <= 180.0)
    {
      if (v14 >= -180.0) {
        return fabs(v14) <= v12 && v13 <= v12;
      }
    }
    else
    {
      double v7 = -360.0;
    }
    double v14 = v14 + v7;
    return fabs(v14) <= v12 && v13 <= v12;
  }
  return result;
}

__n128 sub_19077FE70(uint64_t a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;

  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  sub_190781210((uint64_t *)(v1 + 96));
  *(_OWORD *)(v1 + 120) = 0u;
  v1 += 120;
  *(_DWORD *)(v1 + 400) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 350) = 0u;
  *(_DWORD *)(v1 + 420) = -1;
  *(void *)(v1 + 404) = -1;
  *(void *)(v1 + 412) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(v1 + 424) = result;
  *(__n128 *)(v1 + 440) = result;
  *(void *)(v1 + 456) = 0x4044000000000000;
  return result;
}

uint64_t sub_19077FF28(uint64_t a1, void *a2)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  int v4 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "CLRR,setRacingRouteParameters,set race parameters", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v76 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v76);
    if (v76 != (char *)buf) {
      free(v76);
    }
  }
  if (!a2)
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v60 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters is null", buf, 2u);
    }
    int v61 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v61) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 routeMatrixIndexVec])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v62 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.routeMatrixIndexVec is null", buf, 2u);
    }
    int v63 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v63) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 racingRouteVariables])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v64 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.racingRouteVariables is null", buf, 2u);
    }
    int v65 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v65) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 routeBoundingBox])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    unint64_t v66 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v66, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.routeBoundingBox is null", buf, 2u);
    }
    int v67 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v67) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 startPointOnCurrentRoute])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    double v68 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v68, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.startPointOnCurrentRoute is null", buf, 2u);
    }
    int v69 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v69) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 startPointOnReferenceRoute])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v70 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v70, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.startPointOnReferenceRoute is null", buf, 2u);
    }
    int v71 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v71) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  if (![a2 lastOnRouteDataPoint])
  {
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v72 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.lastOnRouteDataPoint is null", buf, 2u);
    }
    int v73 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v73) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 != -1) {
      goto LABEL_87;
    }
LABEL_84:
    uint64_t v78 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v78);
    if (v78 != (char *)buf) {
      free(v78);
    }
    return 0;
  }
  if ([a2 lastProjectedDataPoint])
  {
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "latitude");
    *(void *)(a1 + 120) = v5;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "longitude");
    *(void *)(a1 + 128) = v6;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "altitude");
    *(void *)(a1 + 136) = v7;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "odometer");
    *(void *)(a1 + 144) = v8;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "timestamp");
    *(void *)(a1 + 152) = v9;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "timeSinceStart");
    *(void *)(a1 + 160) = v10;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "offRouteTime");
    *(void *)(a1 + 168) = v11;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "distanceSinceStart");
    *(void *)(a1 + 176) = v12;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "offRouteDistance");
    *(void *)(a1 + 184) = v13;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "averagePace");
    *(void *)(a1 + 192) = v14;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnCurrentRoute"), "distanceAlongReference");
    *(void *)(a1 + 200) = v15;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "latitude");
    *(void *)(a1 + 208) = v16;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "longitude");
    *(void *)(a1 + 216) = v17;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "altitude");
    *(void *)(a1 + 224) = v18;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "odometer");
    *(void *)(a1 + 232) = v19;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "timestamp");
    *(void *)(a1 + 240) = v20;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "timeSinceStart");
    *(void *)(a1 + 248) = v21;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "offRouteTime");
    *(void *)(a1 + 256) = v22;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "distanceSinceStart");
    *(void *)(a1 + 264) = v23;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "offRouteDistance");
    *(void *)(a1 + 272) = v24;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "averagePace");
    *(void *)(a1 + 280) = v25;
    objc_msgSend((id)objc_msgSend(a2, "startPointOnReferenceRoute"), "distanceAlongReference");
    *(void *)(a1 + 288) = v26;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "latitude");
    *(void *)(a1 + 296) = v27;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "longitude");
    *(void *)(a1 + 304) = v28;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "altitude");
    *(void *)(a1 + 312) = v29;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "odometer");
    *(void *)(a1 + 320) = v30;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "timestamp");
    *(void *)(a1 + 328) = v31;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "timeSinceStart");
    *(void *)(a1 + 336) = v32;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "offRouteTime");
    *(void *)(a1 + 344) = v33;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "distanceSinceStart");
    *(void *)(a1 + 352) = v34;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "offRouteDistance");
    *(void *)(a1 + 360) = v35;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "averagePace");
    *(void *)(a1 + 368) = v36;
    objc_msgSend((id)objc_msgSend(a2, "lastOnRouteDataPoint"), "distanceAlongReference");
    *(void *)(a1 + 376) = v37;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "latitude");
    *(void *)(a1 + 384) = v38;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "longitude");
    *(void *)(a1 + 392) = v39;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "altitude");
    *(void *)(a1 + 400) = v40;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "odometer");
    *(void *)(a1 + 408) = v41;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "timestamp");
    *(void *)(a1 + 416) = v42;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "timeSinceStart");
    *(void *)(a1 + 424) = v43;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "offRouteTime");
    *(void *)(a1 + 432) = v44;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "distanceSinceStart");
    *(void *)(a1 + 440) = v45;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "offRouteDistance");
    *(void *)(a1 + 448) = v46;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "averagePace");
    *(void *)(a1 + 456) = v47;
    objc_msgSend((id)objc_msgSend(a2, "lastProjectedDataPoint"), "distanceAlongReference");
    *(void *)(a1 + 464) = v48;
    *(unsigned char *)(a1 + 474) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "raceStartPointDetected");
    *(unsigned char *)(a1 + 475) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "raceEndPointDetected");
    *(unsigned char *)(a1 + 476) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "userIsOffRoute");
    *(unsigned char *)(a1 + 477) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "projectedOnNearestPoint");
    *(unsigned char *)(a1 + 478) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "raceSessionExpired");
    *(unsigned char *)(a1 + 479) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "rollingBufferReachedEndOfReferenceRoute");
    *(unsigned char *)(a1 + 480) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "routeConfigurationSuccessful");
    *(unsigned char *)(a1 + 481) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "racingRouteAnalyticsSent");
    *(unsigned char *)(a1 + 482) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "prematureRaceEndDetected");
    *(unsigned char *)(a1 + 483) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "referenceRouteTotalLengthDetermined");
    *(unsigned char *)(a1 + 484) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "locationPointIsOutsideOfAcceptedRange");
    *(unsigned char *)(a1 + 485) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "locationPointNotMatched");
    *(_DWORD *)(a1 + 488) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "routePointsBufferSize");
    *(_DWORD *)(a1 + 492) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "numberOfRoutePointsToAdd");
    *(_DWORD *)(a1 + 496) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "offRouteGraceDuration");
    *(_DWORD *)(a1 + 500) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "matchedPointCounter");
    *(_DWORD *)(a1 + 504) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "referenceRouteDataPointCounter");
    *(_DWORD *)(a1 + 508) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "currentRouteDataPointCounter");
    *(_DWORD *)(a1 + 512) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "offRouteDataPointCounter");
    *(_DWORD *)(a1 + 516) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "inutileDataPointCounter");
    *(_DWORD *)(a1 + 520) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "rollingBufferUpdateCounter");
    *(_DWORD *)(a1 + 524) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "lastMatchedPointIndex");
    *(_DWORD *)(a1 + 528) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "lastMatchedPointIndexOnReferenceRoute");
    *(_DWORD *)(a1 + 532) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "rollingBufferStartIndexOnReferenceRoute");
    *(_DWORD *)(a1 + 536) = objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "matrixCellIndexForLastMatchedPoint");
    objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "referenceRouteTotalLength");
    *(void *)(a1 + 544) = v49;
    objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "timestampOfLastMatchedPointOnReferenceRoute");
    *(void *)(a1 + 552) = v50;
    objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "registeredTimeAtThresholdDistance");
    *(void *)(a1 + 560) = v51;
    objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "endOfRaceTimeThreshold");
    *(void *)(a1 + 568) = v52;
    objc_msgSend((id)objc_msgSend(a2, "racingRouteVariables"), "nearestNeighborMaximumAcceptedDistance");
    *(void *)(a1 + 576) = v53;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 488);
    *(unsigned char *)(a1 + 473) = 1;
    *(unsigned char *)(a1 + 479) = 0;
    *(unsigned char *)(a1 + 483) = 0;
    *(void *)(a1 + 544) = 0xBFF0000000000000;
    if (qword_1E929F6A0 != -1) {
      dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    }
    uint64_t v54 = qword_1E929F6A8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v55 = *(unsigned __int8 *)(a1 + 473);
      int v56 = *(_DWORD *)(a1 + 524);
      int v57 = *(_DWORD *)(a1 + 528);
      uint64_t v58 = *(void *)(a1 + 552);
      *(_DWORD *)__n128 buf = 67240960;
      int v80 = v55;
      __int16 v81 = 1026;
      int v82 = v56;
      __int16 v83 = 1026;
      int v84 = v57;
      __int16 v85 = 2050;
      uint64_t v86 = v58;
      _os_log_impl(&dword_1906B8000, v54, OS_LOG_TYPE_DEFAULT, "CLRR,setRacingRouteParameters,recoveryMode,%{public}d,lastMatchedPointIndex,%{public}d,lastMatchedPointIndexOnReferenceRoute,%{public}d,timestampOfLastMatchedPointOnReferenceRoute,%{public}.1lf", buf, 0x1Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6A0 != -1) {
        dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
      }
      uint64_t v77 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v77);
      if (v77 != (char *)buf) {
        free(v77);
      }
    }
    return 1;
  }
  if (qword_1E929F6A0 != -1) {
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
  }
  uint64_t v74 = qword_1E929F6A8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.lastProjectedDataPoint is null", buf, 2u);
  }
  int v75 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v75)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6A0 == -1) {
      goto LABEL_84;
    }
LABEL_87:
    dispatch_once(&qword_1E929F6A0, &unk_1EE005880);
    goto LABEL_84;
  }
  return result;
}

CLRacingRouteParameters *sub_190780E98(uint64_t a1)
{
  id v18 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3)];
  if (*(void *)(a1 + 104) != *(void *)(a1 + 96))
  {
    unint64_t v2 = 0;
    do
    {
      id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      if (*(void *)(*(void *)(a1 + 96) + 24 * v2 + 8) != *(void *)(*(void *)(a1 + 96) + 24 * v2))
      {
        uint64_t v4 = 0;
        unint64_t v5 = 0;
        do
        {
          uint64_t v6 = [CLPair alloc];
          uint64_t v7 = (unsigned int *)(*(void *)(*(void *)(a1 + 96) + 24 * v2) + v4);
          objc_msgSend(v3, "addObject:", -[CLPair initWithFirst:second:](v6, "initWithFirst:second:", *v7, v7[1]));
          ++v5;
          v4 += 8;
        }
        while (v5 < (uint64_t)(*(void *)(*(void *)(a1 + 96) + 24 * v2 + 8)
                             - *(void *)(*(void *)(a1 + 96) + 24 * v2)) >> 3);
      }
      [v18 addObject:v3];
      ++v2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3) > v2);
  }
  uint64_t v8 = [[CLRacingRouteState alloc] initWithLatitude:*(double *)(a1 + 120) longitude:*(double *)(a1 + 128) altitude:*(double *)(a1 + 136) odometer:*(double *)(a1 + 144) timestamp:*(double *)(a1 + 152) timeSinceStart:*(double *)(a1 + 160) offRouteTime:*(double *)(a1 + 168) distanceSinceStart:*(double *)(a1 + 176) offRouteDistance:*(void *)(a1 + 184) averagePace:*(void *)(a1 + 192) distanceAlongReference:*(void *)(a1 + 200)];
  uint64_t v9 = [[CLRacingRouteState alloc] initWithLatitude:*(double *)(a1 + 208) longitude:*(double *)(a1 + 216) altitude:*(double *)(a1 + 224) odometer:*(double *)(a1 + 232) timestamp:*(double *)(a1 + 240) timeSinceStart:*(double *)(a1 + 248) offRouteTime:*(double *)(a1 + 256) distanceSinceStart:*(double *)(a1 + 264) offRouteDistance:*(void *)(a1 + 272) averagePace:*(void *)(a1 + 280) distanceAlongReference:*(void *)(a1 + 288)];
  uint64_t v10 = [[CLRacingRouteState alloc] initWithLatitude:*(double *)(a1 + 296) longitude:*(double *)(a1 + 304) altitude:*(double *)(a1 + 312) odometer:*(double *)(a1 + 320) timestamp:*(double *)(a1 + 328) timeSinceStart:*(double *)(a1 + 336) offRouteTime:*(double *)(a1 + 344) distanceSinceStart:*(double *)(a1 + 352) offRouteDistance:*(void *)(a1 + 360) averagePace:*(void *)(a1 + 368) distanceAlongReference:*(void *)(a1 + 376)];
  uint64_t v11 = [[CLRacingRouteState alloc] initWithLatitude:*(double *)(a1 + 384) longitude:*(double *)(a1 + 392) altitude:*(double *)(a1 + 400) odometer:*(double *)(a1 + 408) timestamp:*(double *)(a1 + 416) timeSinceStart:*(double *)(a1 + 424) offRouteTime:*(double *)(a1 + 432) distanceSinceStart:*(double *)(a1 + 440) offRouteDistance:*(void *)(a1 + 448) averagePace:*(void *)(a1 + 456) distanceAlongReference:*(void *)(a1 + 464)];
  uint64_t v12 = [[CLRouteBoundingBox alloc] initWithMinLatitude:*(unsigned int *)(a1 + 88) maxLatitude:*(unsigned int *)(a1 + 92) minLongitude:*(double *)(a1 + 56) maxLongitude:*(double *)(a1 + 64) nRows:*(double *)(a1 + 72) nColumns:*(double *)(a1 + 80)];
  uint64_t v13 = [CLRacingRouteVariables alloc];
  LODWORD(v17) = *(_DWORD *)(a1 + 536);
  *(_DWORD *)((char *)&v16 + 2) = *(_DWORD *)(a1 + 482);
  LOWORD(v16) = *(_WORD *)(a1 + 480);
  uint64_t v14 = -[CLRacingRouteParameters initWithRouteMatrixIndexVec:racingRouteVariables:startPointOnCurrentRoute:startPointOnReferenceRoute:lastOnRouteDataPoint:lastProjectedDataPoint:routeBoundingBox:]([CLRacingRouteParameters alloc], "initWithRouteMatrixIndexVec:racingRouteVariables:startPointOnCurrentRoute:startPointOnReferenceRoute:lastOnRouteDataPoint:lastProjectedDataPoint:routeBoundingBox:", [v18 copy], -[CLRacingRouteVariables copy](objc_autorelease(-[CLRacingRouteVariables initWithRaceStartPointDetected:raceEndPointDetected:userIsOffRoute:projectedOnNearestPoint:raceSessionExpired:rollingBufferReachedEndOfReferenceRoute:routeConfigurationSuccessful:racingRouteAnalyticsSent:prematureRaceEndDetected:referenceRouteTotalLengthDetermined:locationPointIsOutsideOfAcceptedRange:locationPointNotMatched:routePointsBufferSize:numberOfRoutePointsToAdd:offRouteGraceDuration:matchedPointCounter:referenceRouteDataPointCounter:currentRouteDataPointCounter:offRouteDataPointCounter:inutileDataPointCounter:rollingBufferUpdateCounter:lastMatchedPointIndex:lastMatchedPointIndexOnReferenceRoute:rollingBufferStartIndexOnReferenceRoute:matrixCellIndexForLastMatchedPoint:referenceRouteTotalLength:timestampOfLastMatchedPointOnReferenceRoute:registeredTimeAtThresholdDistance:endOfRaceTimeThreshold:nearestNeighborMaximumAcceptedDistance:](v13, "initWithRaceStartPointDetected:raceEndPointDetected:userIsOffRoute:projectedOnNearestPoint:raceSessionExpired:rollingBufferReachedEndOfReferenceRoute:routeConfigurationSuccessful:racingRouteAnalyticsSent:prematureRaceEndDetected:referenceRouteTotalLengthDetermined:locationPointIsOutsideOfAcceptedRange:locationPointNotMatched:routePointsBufferSize:numberOfRoutePointsToAdd:offRouteGraceDuration:matchedPointCounter:referenceRouteDataPointCounter:currentRouteDataPointCounter:offRouteDataPointCounter:inutileDataPointCounter:rollingBufferUpdateCounter:lastMatchedPointIndex:lastMatchedPointIndexOnReferenceRoute:rollingBufferStartIndexOnReferenceRoute:matrixCellIndexForLastMatchedPoint:referenceRouteTotalLength:timestampOfLastMatchedPointOnReferenceRoute:registeredTimeAtThresholdDistance:endOfRaceTimeThreshold:nearestNeighborMaximumAcceptedDistance:", *(unsigned __int8 *)(a1 + 474), *(unsigned __int8 *)(a1 + 475),
                *(unsigned __int8 *)(a1 + 476),
                *(unsigned __int8 *)(a1 + 477),
                *(unsigned __int8 *)(a1 + 478),
                *(unsigned __int8 *)(a1 + 479),
                *(double *)(a1 + 544),
                *(double *)(a1 + 552),
                *(double *)(a1 + 560),
                *(double *)(a1 + 568),
                *(double *)(a1 + 576),
                v16,
                *(void *)(a1 + 488),
                *(void *)(a1 + 496),
                *(void *)(a1 + 504),
                *(void *)(a1 + 512),
                *(void *)(a1 + 520),
                *(void *)(a1 + 528),
                v17)),
            "copy"),
          [(CLRacingRouteState *)v8 copy],
          [(CLRacingRouteState *)v9 copy],
          [(CLRacingRouteState *)v10 copy],
          [(CLRacingRouteState *)v11 copy],
          [(CLRouteBoundingBox *)v12 copy]);

  return v14;
}

os_log_t sub_1907811E0()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "RacingRoute");
  qword_1E929F6A8 = (uint64_t)result;
  return result;
}

void sub_190781210(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *sub_190781268(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *os_log_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1907812D8(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_190718124();
  }
  return operator new(24 * a1);
}

uint64_t sub_190781320(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_190781384(unint64_t a1)
{
  if (a1 >> 61) {
    sub_190718124();
  }
  return operator new(8 * a1);
}

void sub_1907813BC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_190781210((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_190781414(void *a1)
{
  sub_1906BFEBC(a1);

  JUMPOUT(0x192FCEAD0);
}

__CFString *sub_19078144C()
{
  return @"Memory";
}

uint64_t sub_190781458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 928))(a3, a1, a2);
}

uint64_t sub_190781494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 896))(a3, a1, a2);
}

uint64_t sub_1907814D0(void *context, uint64_t a2, int a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a2 + 8);
  if (a3) {
    long long v5 = (void (__cdecl *)(const void *, const void *, void *))sub_190781494;
  }
  else {
    long long v5 = (void (__cdecl *)(const void *, const void *, void *))sub_190781458;
  }
  CFDictionaryApplyFunction(v4, v5, context);
  uint64_t v6 = *(uint64_t (**)(void *))(*(void *)context + 848);

  return v6(context);
}

BOOL sub_190781568(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", objc_msgSend(NSString, "stringWithUTF8String:", a2), 0);
  id v21 = 0;
  if ([MEMORY[0x1E4F1C9B8] instancesRespondToSelector:sel_dataWithContentsOfURL_options_error_])uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithContentsOfURL:options:error:", v4, 0, &v21); {
  else
  }
    uint64_t v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v4];
  if (!v5)
  {
    if (!v21) {
      return 0;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 872))(a1, 0);
    uint64_t v7 = (void *)[v21 domain];
    if ([v7 isEqual:*MEMORY[0x1E4F281F8]] && objc_msgSend(v21, "code") == 260)
    {
      if (qword_1EB2713D8 != -1) {
        dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
      }
      uint64_t v8 = qword_1EB2713D0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = objc_msgSend((id)objc_msgSend(v21, "description"), "UTF8String");
        *(_DWORD *)__n128 buf = 68289538;
        int v23 = 0;
        __int16 v24 = 2082;
        uint64_t v25 = "";
        __int16 v26 = 2082;
        uint64_t v27 = a2;
        __int16 v28 = 2082;
        uint64_t v29 = v9;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB2713D8 != -1) {
          dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
        }
      }
      uint64_t v10 = qword_1EB2713D0;
      BOOL result = os_signpost_enabled((os_log_t)qword_1EB2713D0);
      if (!result) {
        return result;
      }
      uint64_t v11 = objc_msgSend((id)objc_msgSend(v21, "description"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      uint64_t v27 = a2;
      __int16 v28 = 2082;
      uint64_t v29 = v11;
      uint64_t v12 = "file does not exist... clearing";
      uint64_t v13 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_1EB2713D8 != -1) {
        dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
      }
      id v18 = qword_1EB2713D0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = objc_msgSend((id)objc_msgSend(v21, "description"), "UTF8String");
        *(_DWORD *)__n128 buf = 68289538;
        int v23 = 0;
        __int16 v24 = 2082;
        uint64_t v25 = "";
        __int16 v26 = 2082;
        uint64_t v27 = a2;
        __int16 v28 = 2082;
        uint64_t v29 = v19;
        _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1EB2713D8 != -1) {
          dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
        }
      }
      uint64_t v10 = qword_1EB2713D0;
      BOOL result = os_signpost_enabled((os_log_t)qword_1EB2713D0);
      if (!result) {
        return result;
      }
      uint64_t v20 = objc_msgSend((id)objc_msgSend(v21, "description"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      uint64_t v27 = a2;
      __int16 v28 = 2082;
      uint64_t v29 = v20;
      uint64_t v12 = "#Warning Error reading file";
      uint64_t v13 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    uint64_t v16 = v10;
    uint32_t v17 = 38;
    goto LABEL_32;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 784))(a1, v5)) {
    return 1;
  }
  if (qword_1EB2713D8 != -1) {
    dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
  }
  uint64_t v14 = qword_1EB2713D0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__n128 buf = 68289282;
    int v23 = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    __int16 v26 = 2082;
    uint64_t v27 = a2;
    _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB2713D8 != -1) {
      dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
    }
  }
  uint64_t v15 = qword_1EB2713D0;
  BOOL result = os_signpost_enabled((os_log_t)qword_1EB2713D0);
  if (result)
  {
    *(_DWORD *)__n128 buf = 68289282;
    int v23 = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    __int16 v26 = 2082;
    uint64_t v27 = a2;
    uint64_t v12 = "could not deserialize property list";
    uint64_t v13 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    uint64_t v16 = v15;
    uint32_t v17 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, v17);
    return 0;
  }
  return result;
}

uint64_t sub_190781A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 872))();
}

uint64_t sub_190781AB0(uint64_t a1, void *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x192FCF260]();
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", objc_msgSend(NSString, "stringWithUTF8String:", a1), 0);
  if (v7)
  {
    uint64_t v8 = 536870913;
    if (a3) {
      uint64_t v8 = 1;
    }
    if (a3 == 1) {
      uint64_t v9 = 1073741825;
    }
    else {
      uint64_t v9 = v8;
    }
    id v18 = 0;
    uint64_t v10 = [a2 writeToURL:v7 options:v9 error:&v18];
    if ((v10 & 1) == 0)
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v11 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = objc_msgSend((id)objc_msgSend(v18, "description"), "UTF8String");
        *(_DWORD *)__n128 buf = 136446466;
        uint64_t v24 = a1;
        __int16 v25 = 2082;
        uint64_t v26 = v12;
        _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "Could not write data to disk %{public}s, %{public}s", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        uint64_t v13 = objc_msgSend((id)objc_msgSend(v18, "description"), "UTF8String");
        int v19 = 136446466;
        uint64_t v20 = a1;
        __int16 v21 = 2082;
        uint64_t v22 = v13;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v15 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 136446210;
      uint64_t v24 = a1;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_FAULT, "Could not create NSURL for file: %{public}s", buf, 0xCu);
    }
    uint64_t v10 = 0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      int v19 = 136446210;
      uint64_t v20 = a1;
      uint32_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      uint64_t v10 = 0;
    }
  }
  return v10;
}

uint64_t sub_190781E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 768))(a1, &cf))
  {
    uint64_t v3 = sub_190781AB0(a2, (void *)cf, 2);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v4 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 136446210;
      uint64_t v11 = a2;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "Could not serialize data for file %{public}s", buf, 0xCu);
    }
    uint64_t v3 = 0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      int v8 = 136446210;
      uint64_t v9 = a2;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::saveToFile(const char *) const", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      uint64_t v3 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t sub_190782080(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v6 = sub_190717AFC((uint64_t *)v12, (uint64_t)"CLNameValuePair.SaveToBinaryFile", 0);
  uint64_t v7 = (void *)MEMORY[0x192FCF260](v6);
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 776))(a1, &cf))
  {
    uint64_t v8 = sub_190781AB0(a2, (void *)cf, a3);
  }
  else
  {
    if (qword_1EB2713D8 != -1) {
      dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
    }
    uint64_t v9 = qword_1EB2713D0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint32_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = a2;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1EB2713D8 != -1) {
        dispatch_once(&qword_1EB2713D8, &unk_1EE0063A0);
      }
    }
    uint64_t v10 = qword_1EB2713D0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713D0))
    {
      *(_DWORD *)__n128 buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint32_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not serialize data", "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v8 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  sub_190717D2C(v12);
  return v8;
}

void sub_1907822A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1907822C0(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 880))(a1, v5, a3);

  CFRelease(v5);
}

uint64_t sub_190782354(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 880))();
}

uint64_t sub_190782380(CFMutableDictionaryRef *a1)
{
  CFDictionaryRemoveAllValues(a1[1]);
  uint64_t v2 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v2(a1);
}

void sub_1907823E4(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) == 0)
  {
    CFTypeRef cf = 0;
    if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf))return; {
    CFTypeID v6 = CFGetTypeID(cf);
    }
    if (v6 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount((CFArrayRef)cf) > a3)
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, a3);
        (*(void (**)(uint64_t))(*(void *)a1 + 848))(a1);
LABEL_42:
        CFRelease(cf);
        return;
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      __int16 v18 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        sub_1907829B4(a2, (uint64_t)__p);
        int v19 = SBYTE3(v34);
        uint64_t v20 = *(unsigned char **)__p;
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        uint64_t v22 = __p;
        *(_DWORD *)__n128 buf = 136446722;
        if (v19 < 0) {
          uint64_t v22 = v20;
        }
        uint64_t v36 = v22;
        __int16 v37 = 1026;
        unsigned int v38 = a3;
        __int16 v39 = 2050;
        CFTypeID v40 = Count;
        _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in array of size %{public}ld", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)v27);
      int v23 = v28;
      uint64_t v24 = (void **)v27[0];
      CFIndex v25 = CFArrayGetCount((CFArrayRef)cf);
      uint64_t v26 = v27;
      *(_DWORD *)long long __p = 136446722;
      if (v23 < 0) {
        uint64_t v26 = v24;
      }
      *(void *)&__p[4] = v26;
      __int16 v31 = 1026;
      unsigned int v32 = a3;
      __int16 v33 = 2050;
      CFTypeID v34 = v25;
      uint32_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    else
    {
      if (!a3)
      {
        (*(void (**)(uint64_t, const __CFString *))(*(void *)a1 + 888))(a1, a2);
        goto LABEL_42;
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v8 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        sub_1907829B4(a2, (uint64_t)__p);
        int v9 = SBYTE3(v34);
        uint64_t v10 = *(unsigned char **)__p;
        CFTypeID v11 = CFGetTypeID(cf);
        uint64_t v12 = __p;
        *(_DWORD *)__n128 buf = 136446722;
        if (v9 < 0) {
          uint64_t v12 = v10;
        }
        uint64_t v36 = v12;
        __int16 v37 = 1026;
        unsigned int v38 = a3;
        __int16 v39 = 2050;
        CFTypeID v40 = v11;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in non-array type %{public}lu", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)v27);
      int v13 = v28;
      uint64_t v14 = (void **)v27[0];
      CFTypeID v15 = CFGetTypeID(cf);
      __int16 v16 = v27;
      *(_DWORD *)long long __p = 136446722;
      if (v13 < 0) {
        __int16 v16 = v14;
      }
      *(void *)&__p[4] = v16;
      __int16 v31 = 1026;
      unsigned int v32 = a3;
      __int16 v33 = 2050;
      CFTypeID v34 = v15;
      uint32_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLNameValuePair::clearInternal(const CFStringRef, int)", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    goto LABEL_42;
  }
  uint64_t v7 = *(void (**)(void))(*(void *)a1 + 888);

  v7();
}

void sub_190782974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1907829B4@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_190785ACC(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_190782A08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190782A24(CFMutableDictionaryRef *a1, const void *a2)
{
  CFDictionaryRemoveValue(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v3(a1);
}

void sub_190782A88(uint64_t a1)
{
}

void sub_190782BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190782C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [NSString stringWithUTF8String:a2];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 920);

  return v4(a1, v3);
}

uint64_t sub_190782C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 920))();
}

uint64_t sub_190782CB8(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_190782D2C(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_190782D2C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  *(_DWORD *)__n128 buf = 0;
  uint64_t v6 = sub_1906C18F4(cf, buf);
  if (v6)
  {
    *a3 = *(_WORD *)buf;
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    uint64_t v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint16_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_190782FD8(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_19078304C(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_19078304C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  CFNumberRef v6 = (const __CFNumber *)cf;
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberSInt16Type, a3))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v8 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        LOWORD(v18) = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, short &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    CFTypeID v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_1906C1EE4(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v12 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)__n128 buf = 138412546;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        uint64_t v25 = a2;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      uint64_t v10 = 0;
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        int v18 = 138412546;
        uint64_t v19 = v15;
        __int16 v20 = 2112;
        uint64_t v21 = a2;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, short &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        uint64_t v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  uint64_t v10 = 1;
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t sub_190783470(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1907834E4(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1907834E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  *(void *)__n128 buf = 0;
  uint64_t v6 = sub_190785570(cf, buf);
  if (v6)
  {
    *a3 = *(_DWORD *)buf;
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v18 = 2112;
      uint64_t v19 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint32_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_190783790(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_190783804(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_190783804(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_190785570(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int64_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_190783AA0(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_190783B14(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_190783B14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  CFNumberRef v6 = (const __CFNumber *)cf;
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberLongType, a3))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v8 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        LOWORD(v18) = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, long &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    CFTypeID v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_1906C1EE4(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v12 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)__n128 buf = 138412546;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        uint64_t v25 = a2;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      uint64_t v10 = 0;
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        int v18 = 138412546;
        uint64_t v19 = v15;
        __int16 v20 = 2112;
        uint64_t v21 = a2;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, long &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        uint64_t v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  uint64_t v10 = 1;
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t sub_190783F38(uint64_t a1, const char *a2, float *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  double v9 = 0.0;
  uint64_t v6 = sub_190784080(a1, (uint64_t)v5, &v9);
  if (v6)
  {
    float v7 = v9;
    *a3 = v7;
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

float sub_190783FC4(uint64_t a1, uint64_t a2, float *a3)
{
  double v5 = 0.0;
  if (sub_190784080(a1, a2, &v5))
  {
    float result = v5;
    *a3 = result;
  }
  return result;
}

uint64_t sub_19078400C(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_190784080(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_190784080(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_190785774(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    float v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

BOOL sub_19078431C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190784390(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190784390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  BOOL v6 = sub_190785ACC((const __CFString *)cf, a3);
  if (!v6)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    float v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, std::string &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_19078462C(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v6 = sub_1907846A0(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1907846A0(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf);
  if (result)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      CFTypeRef v8 = cf;
      *a3 = cf;
      CFAutorelease(v8);
      return 1;
    }
    else
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      double v9 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        sub_1907829B4(a2, (uint64_t)__p);
        uint64_t v10 = v27 >= 0 ? __p : *(unsigned char **)__p;
        CFTypeID v11 = CFGetTypeID(cf);
        CFTypeID TypeID = CFStringGetTypeID();
        *(_DWORD *)__n128 buf = 136446722;
        uint64_t v30 = v10;
        __int16 v31 = 2050;
        CFTypeID v32 = v11;
        __int16 v33 = 2050;
        CFTypeID v34 = TypeID;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
        if (SHIBYTE(v27) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        sub_1907829B4(a2, (uint64_t)v21);
        if (v22 >= 0) {
          __int16 v15 = v21;
        }
        else {
          __int16 v15 = (void **)v21[0];
        }
        CFTypeID v16 = CFGetTypeID(cf);
        CFTypeID v17 = CFStringGetTypeID();
        *(_DWORD *)long long __p = 136446722;
        *(void *)&__p[4] = v15;
        __int16 v25 = 2050;
        CFTypeID v26 = v16;
        __int16 v27 = 2050;
        CFTypeID v28 = v17;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      int v13 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)__n128 buf = 138412546;
        uint64_t v30 = (unsigned char *)v14;
        __int16 v31 = 2112;
        CFTypeID v32 = (CFTypeID)a2;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)long long __p = 138412546;
        *(void *)&__p[4] = v19;
        __int16 v25 = 2112;
        CFTypeID v26 = (CFTypeID)a2;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_190784B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_190784B68(uint64_t a1, const char *a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v10 = sub_190784BE8(a1, (CFTypeID)v9, a3, a4, a5);
  CFRelease(v9);
  return v10;
}

BOOL sub_190784BE8(uint64_t a1, CFTypeID a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *, uint64_t))(*(void *)a1 + 904))(a1, a2, &cf, a5))return 0; {
  CFDataRef v9 = (const __CFData *)cf;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  BOOL v11 = v10 == CFDataGetTypeID();
  BOOL v12 = v11;
  if (v11)
  {
    *a3 = CFDataGetBytePtr(v9);
    *a4 = CFDataGetLength(v9);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v13 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      CFTypeID v14 = CFGetTypeID(v9);
      CFTypeID TypeID = CFDataGetTypeID();
      *(_DWORD *)__n128 buf = 134349312;
      CFTypeID v30 = v14;
      __int16 v31 = 2050;
      CFTypeID v32 = TypeID;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      CFTypeID v19 = CFGetTypeID(v9);
      CFTypeID v20 = CFDataGetTypeID();
      int v25 = 134349312;
      CFTypeID v26 = v19;
      __int16 v27 = 2050;
      CFTypeID v28 = v20;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v16 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      CFTypeID v30 = v17;
      __int16 v31 = 2112;
      CFTypeID v32 = a2;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v25 = 138412546;
      CFTypeID v26 = v22;
      __int16 v27 = 2112;
      CFTypeID v28 = a2;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, const char *&, unsigned int &, int) const", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  CFRelease(cf);
  return v12;
}

BOOL sub_190785034(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907850A8(a1, (CFTypeID)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907850A8(uint64_t a1, CFTypeID a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)cf;
  CFTypeID v7 = CFGetTypeID(cf);
  BOOL v8 = v7 == CFDictionaryGetTypeID();
  BOOL v9 = v8;
  if (v8)
  {
    if (v6)
    {
      CFTypeID v10 = (const void *)a3[1];
      if (v10) {
        CFRelease(v10);
      }
      a3[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
      (*(void (**)(void *))(*a3 + 848))(a3);
    }
    else
    {
      (*(void (**)(void *))(*a3 + 872))(a3);
    }
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v11 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      CFTypeID v12 = CFGetTypeID(v6);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      *(_DWORD *)__n128 buf = 134349312;
      CFTypeID v28 = v12;
      __int16 v29 = 2050;
      CFTypeID v30 = TypeID;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      CFTypeID v19 = CFGetTypeID(v6);
      CFTypeID v20 = CFDictionaryGetTypeID();
      int v23 = 134349312;
      CFTypeID v24 = v19;
      __int16 v25 = 2050;
      CFTypeID v26 = v20;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v14 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)__n128 buf = 138412546;
      CFTypeID v28 = v15;
      __int16 v29 = 2112;
      CFTypeID v30 = a2;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v23 = 138412546;
      CFTypeID v24 = v16;
      __int16 v25 = 2112;
      CFTypeID v26 = a2;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CLNameValuePair &, int) const", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t sub_190785570(const void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1906C1EE4(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, a2)) {
    return 1;
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
  }
  CFStringRef v5 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  int v6 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_190785774(const void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134349312;
      CFTypeID v12 = CFGetTypeID(a1);
      __int16 v13 = 2050;
      CFTypeID TypeID = CFNumberGetTypeID();
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    int v7 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFGetTypeID(a1);
    CFNumberGetTypeID();
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf) {
      return 0;
    }
LABEL_12:
    free(v8);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, a2)) {
    return 1;
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
  }
  CFTypeID v9 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  int v10 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

BOOL sub_190785ACC(const __CFString *cf, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    goto LABEL_19;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFDataGetTypeID())
    {
      BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
      int Length = CFDataGetLength((CFDataRef)cf);
      if (BytePtr)
      {
        int v10 = xmlBufferCreate();
        if (v10)
        {
          BOOL v11 = v10;
          CFTypeID v12 = xmlNewTextWriterMemory(v10, 0);
          if (!v12)
          {
            BOOL v6 = 0;
LABEL_49:
            xmlBufferFree(v11);
            return v6;
          }
          __int16 v13 = v12;
          int v14 = xmlTextWriterWriteBase64(v12, BytePtr, 0, Length);
          BOOL v6 = v14 != -1;
          if (v14 == -1)
          {
LABEL_48:
            xmlFreeTextWriter(v13);
            goto LABEL_49;
          }
          xmlTextWriterFlush(v13);
          uint64_t v15 = xmlBufferContent(v11);
          int v16 = xmlBufferLength(v11);
          if (qword_1EB2713B8 != -1) {
            dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
          }
          uint64_t v17 = off_1EB2713B0;
          if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134218498;
            *(void *)&uint8_t buf[4] = v15;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v16;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v15;
            _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713B8 != -1) {
              dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
            }
            *(_DWORD *)bufferSize = 134218498;
            *(void *)&bufferSize[4] = v15;
            __int16 v31 = 1024;
            int v32 = v16;
            __int16 v33 = 2080;
            CFTypeID v34 = v15;
            __int16 v29 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "CoreLocation: %s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
          if (v16 < 0) {
            sub_1906F442C();
          }
          size_t v18 = v16;
          if (v16 >= 0x17)
          {
            uint64_t v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17) {
              uint64_t v25 = v16 | 7;
            }
            uint64_t v26 = v25 + 1;
            CFTypeID v19 = operator new(v25 + 1);
            *(void *)&uint8_t buf[8] = v18;
            *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
            *(void *)__n128 buf = v19;
          }
          else
          {
            buf[23] = v16;
            CFTypeID v19 = buf;
            if (!v16) {
              goto LABEL_45;
            }
          }
          memmove(v19, v15, v18);
LABEL_45:
          v19[v18] = 0;
          if (*(char *)(a2 + 23) < 0) {
            operator delete(*(void **)a2);
          }
          *(_OWORD *)a2 = *(_OWORD *)buf;
          *(void *)(a2 + 16) = *(void *)&buf[16];
          goto LABEL_48;
        }
      }
      else
      {
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
        }
        int v23 = off_1EB2713B0;
        if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__n128 buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = Length;
          _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713B8 != -1) {
            dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
          }
          *(_DWORD *)bufferSize = 67240192;
          *(_DWORD *)&bufferSize[4] = Length;
          CFTypeID v24 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
        }
      }
      return 0;
    }
LABEL_19:
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    CFTypeID v20 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      if (cf) {
        CFTypeID v21 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v21 = -1;
      }
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      if (cf) {
        CFTypeID v27 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v27 = -1;
      }
      *(_DWORD *)bufferSize = 134349056;
      *(void *)&bufferSize[4] = v27;
      CFTypeID v28 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
    MEMORY[0x192FCE920](a2, "");
    return 0;
  }
  CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
  if (!CStringPtr)
  {
    *(void *)bufferSize = 0;
    v37.length = CFStringGetLength(cf);
    v37.location = 0;
    CFStringGetBytes(cf, v37, 0x8000100u, 0, 0, 0, 0, (CFIndex *)bufferSize);
    ++*(void *)bufferSize;
    operator new[]();
  }
  MEMORY[0x192FCE920](a2, CStringPtr);
  return 1;
}

BOOL sub_1907862F0(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf)) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  BOOL v6 = v5 == CFArrayGetTypeID();
  BOOL v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v8 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      CFTypeID v9 = v23 >= 0 ? __p : *(unsigned char **)__p;
      CFTypeID v10 = CFGetTypeID(cf);
      CFTypeID TypeID = CFArrayGetTypeID();
      *(_DWORD *)__n128 buf = 136446722;
      uint64_t v26 = v9;
      __int16 v27 = 2050;
      CFTypeID v28 = v10;
      __int16 v29 = 2050;
      CFTypeID v30 = TypeID;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      __int16 v13 = v17;
      sub_1907829B4(a2, (uint64_t)v17);
      if (v18 < 0) {
        __int16 v13 = (void **)v17[0];
      }
      CFTypeID v14 = CFGetTypeID(cf);
      CFTypeID v15 = CFArrayGetTypeID();
      *(_DWORD *)long long __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v21 = 2050;
      CFTypeID v22 = v14;
      __int16 v23 = 2050;
      CFTypeID v24 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFArrayRef &) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_1907865C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1907865FC(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  BOOL v6 = v5 == CFDataGetTypeID();
  BOOL v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v8 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      CFTypeID v9 = v23 >= 0 ? __p : *(unsigned char **)__p;
      CFTypeID v10 = CFGetTypeID(cf);
      CFTypeID TypeID = CFDataGetTypeID();
      *(_DWORD *)__n128 buf = 136446722;
      uint64_t v26 = v9;
      __int16 v27 = 2050;
      CFTypeID v28 = v10;
      __int16 v29 = 2050;
      CFTypeID v30 = TypeID;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      __int16 v13 = v17;
      sub_1907829B4(a2, (uint64_t)v17);
      if (v18 < 0) {
        __int16 v13 = (void **)v17[0];
      }
      CFTypeID v14 = CFGetTypeID(cf);
      CFTypeID v15 = CFDataGetTypeID();
      *(_DWORD *)long long __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v21 = 2050;
      CFTypeID v22 = v14;
      __int16 v23 = 2050;
      CFTypeID v24 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFDataRef &, int) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_1907868D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_190786908(uint64_t a1, const void *a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), a2) != 0;
}

uint64_t sub_19078692C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 896))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1907869BC(uint64_t a1)
{
  return 1;
}

BOOL sub_190786A00(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190786A6C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190786A6C(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(valuePtr[0]) = *a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190786D00(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190786D6C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190786D6C(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190786FF4(uint64_t a1, const char *a2, unsigned int *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190787060(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787060(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  valuePtr[0] = (void *)*a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1907872F4(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190787360(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787360(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1907875E8(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190787654(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787654(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1907878DC(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1906C0684(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787948(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return sub_1906C0684(a1, a2, a3);
}

uint64_t sub_19078795C(uint64_t a1)
{
  return 1;
}

BOOL sub_1907879A0(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190787A0C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787A0C(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 896))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return Copy != 0;
}

uint64_t sub_190787C94(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 928))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_190787D24(uint64_t a1)
{
  return 1;
}

BOOL sub_190787D68(uint64_t a1, const char *a2, unsigned char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190787DD4(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190787DD4(uint64_t a1, const __CFString *a2, unsigned char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!*a3) {
    CFStringRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(void *)a1 + 928))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v13 >= 0) {
        CFTypeID v10 = buf;
      }
      else {
        CFTypeID v10 = *(unsigned char **)buf;
      }
      int v14 = 136446210;
      CFTypeID v15 = v10;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
  }
  return v6 != 0;
}

BOOL sub_19078806C(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907880D8(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907880D8(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  LODWORD(valuePtr[0]) = *a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_19078836C(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907883D8(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907883D8(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190788660(uint64_t a1, const char *a2, unsigned int *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907886CC(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907886CC(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  valuePtr[0] = (void *)*a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190788960(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907889CC(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907889CC(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190788C54(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190788CC0(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190788CC0(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190788F48(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_190788FB4(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_190788FB4(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_19078923C(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907892A8(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907892A8(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_190789530(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_19078959C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_19078959C(uint64_t a1, const __CFString *a2, char *cStr)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_19078982C(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  if (a3[23] >= 0) {
    BOOL v6 = a3;
  }
  else {
    BOOL v6 = *(char **)a3;
  }
  BOOL v7 = sub_19078959C(a1, v5, v6);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

BOOL sub_1907898A4(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return sub_19078959C(a1, a2, a3);
}

uint64_t sub_1907898B8(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 928))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_190789948(uint64_t a1)
{
  return 1;
}

BOOL sub_19078998C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  BOOL v6 = sub_1907899F8(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1907899F8(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 928))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    BOOL v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      sub_1907829B4(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return Copy != 0;
}

uint64_t sub_190789C80(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeRef arg = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &arg))
  {
    CFAutorelease(arg);
    CFTypeID v6 = CFGetTypeID(arg);
    if (v6 == CFArrayGetTypeID())
    {
      CFMutableDictionaryRef Mutable = (void *)arg;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFAutorelease(Mutable);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, arg);
    }
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFArrayGetTypeID())
    {
      v11.length = CFArrayGetCount((CFArrayRef)a3);
      v11.location = 0;
      CFArrayAppendArray((CFMutableArrayRef)Mutable, (CFArrayRef)a3, v11);
    }
    else
    {
      CFArrayAppendValue((CFMutableArrayRef)Mutable, a3);
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = (void *)a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 896))(a1, a2, Mutable);
}

uint64_t sub_190789DD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 856))();
}

CFIndex sub_190789E00(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
}

uint64_t sub_190789E1C(uint64_t a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, CFStringRef))(*(void *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return v4;
}

uint64_t sub_190789E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 864))();
}

uint64_t sub_190789EC8(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf)) {
    return 0xFFFFFFFFLL;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  }
  else {
    CFIndex Count = 1;
  }
  CFRelease(cf);
  return Count;
}

BOOL sub_190789F64(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(void *)a1 + 856))(a1) < 1;
}

BOOL sub_190789FAC(uint64_t a1, const char *a2)
{
  return (int)sub_190789E1C(a1, a2) < 1;
}

BOOL sub_190789FCC(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(void *)a1 + 864))(a1) < 1;
}

BOOL sub_19078A014(uint64_t a1, CFDataRef *a2)
{
  CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFPropertyListRef *)(a1 + 8), kCFPropertyListXMLFormat_v1_0, 0, 0);
  *a2 = Data;
  return Data != 0;
}

uint64_t sub_19078A064(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = CFWriteStreamCreateWithAllocatedBuffers((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  CFErrorRef error = 0;
  if (v4)
  {
    CFStringRef v5 = v4;
    if (!CFWriteStreamOpen(v4))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      CFTypeID v9 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "could not open write stream", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
      }
      *(_WORD *)CFTypeID v19 = 0;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
      if (v10 == (char *)buf) {
        goto LABEL_35;
      }
LABEL_51:
      free(v10);
LABEL_35:
      uint64_t v7 = 0;
LABEL_36:
      CFRelease(v5);
      if (error) {
        CFRelease(error);
      }
      return v7;
    }
    CFIndex v6 = CFPropertyListWrite(*(CFPropertyListRef *)(a1 + 8), v5, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!error && v6)
    {
      *a2 = CFWriteStreamCopyProperty(v5, (CFStreamPropertyKey)*MEMORY[0x1E4F1D440]);
      CFWriteStreamClose(v5);
      uint64_t v7 = 1;
      goto LABEL_36;
    }
    if (error)
    {
      CFIndex Code = CFErrorGetCode(error);
      if (error)
      {
        CFStringRef Domain = CFErrorGetDomain(error);
        goto LABEL_26;
      }
    }
    else
    {
      CFIndex Code = 0;
    }
    CFStringRef Domain = @"unknown error";
LABEL_26:
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    int v13 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      sub_1907829B4(Domain, (uint64_t)buf);
      int v14 = v28 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)CFTypeID v19 = 134349314;
      *(void *)&v19[4] = Code;
      __int16 v20 = 2082;
      __int16 v21 = v14;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "could not write data, error code, %{public}ld, error domain, %{public}s", v19, 0x16u);
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    sub_1907829B4(Domain, (uint64_t)v19);
    if (v22 >= 0) {
      uint64_t v17 = v19;
    }
    else {
      uint64_t v17 = *(unsigned char **)v19;
    }
    int v23 = 134349314;
    CFIndex v24 = Code;
    __int16 v25 = 2082;
    uint64_t v26 = v17;
    CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)v19);
    }
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
    if (v10 == (char *)buf) {
      goto LABEL_35;
    }
    goto LABEL_51;
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
  }
  CFTypeID v8 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_FAULT, "could not create write stream", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    *(_WORD *)CFTypeID v19 = 0;
    char v16 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0;
}

BOOL sub_19078A5BC(void *a1, const __CFData *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  CFErrorRef error = 0;
  CFPropertyListRef v5 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 1uLL, 0, &error);
  if (v5)
  {
    CFIndex v6 = (const void *)a1[1];
    if (v6) {
      CFRelease(v6);
    }
    a1[1] = v5;
    (*(void (**)(void *))(*a1 + 848))(a1);
    goto LABEL_21;
  }
  if (!error)
  {
    CFIndex Code = 0;
    goto LABEL_9;
  }
  CFIndex Code = CFErrorGetCode(error);
  if (!error)
  {
LABEL_9:
    CFStringRef Domain = @"unknown error";
    goto LABEL_10;
  }
  CFStringRef Domain = CFErrorGetDomain(error);
LABEL_10:
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
  }
  CFTypeID v9 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    if (Domain)
    {
      sub_1907829B4(Domain, (uint64_t)__p);
      if (v24 >= 0) {
        CFTypeID v10 = __p;
      }
      else {
        CFTypeID v10 = (void **)__p[0];
      }
      *(_DWORD *)__n128 buf = 134349314;
      *(void *)&uint8_t buf[4] = Code;
      __int16 v16 = 2082;
      uint64_t v17 = (const char *)v10;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)__n128 buf = 134349314;
      *(void *)&uint8_t buf[4] = Code;
      __int16 v16 = 2082;
      uint64_t v17 = "unknown error";
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
    }
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE0058A0);
    }
    if (Domain)
    {
      sub_1907829B4(Domain, (uint64_t)buf);
      if (v18 >= 0) {
        char v12 = buf;
      }
      else {
        char v12 = *(const char **)buf;
      }
    }
    else
    {
      char v12 = "unknown error";
    }
    int v19 = 134349314;
    CFIndex v20 = Code;
    __int16 v21 = 2082;
    char v22 = v12;
    int v13 = (char *)_os_log_send_and_compose_impl();
    if (Domain && v18 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::deserialize(const CFDataRef)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)__p) {
      free(v13);
    }
  }
LABEL_21:
  if (error) {
    CFRelease(error);
  }

  return v5 != 0;
}

void sub_19078A924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19078A960(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 800))(a1, __p);
  if (qword_1E929F700 != -1) {
    dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
  }
  uint64_t v1 = qword_1E929F708;
  if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
  {
    CFTypeID v2 = __p;
    if (v6 < 0) {
      CFTypeID v2 = (void **)__p[0];
    }
    *(_DWORD *)__n128 buf = 136315138;
    CFTypeID v10 = v2;
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F700 != -1) {
      dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
    }
    CFStringRef v3 = __p;
    if (v6 < 0) {
      CFStringRef v3 = (void **)__p[0];
    }
    int v7 = 136315138;
    CFTypeID v8 = v3;
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLNameValuePair::print() const", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19078AB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19078AB90(uint64_t a1, std::string *a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 8);
  if (!v4 || !CFDictionaryGetCount(v4))
  {
    JUMPOUT(0x192FCE920);
  }
  memset(&context, 0, sizeof(context));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)sub_19078AC54, &context);
  std::string::operator=(a2, &context);
  if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(context.__r_.__value_.__l.__data_);
  }
}

void sub_19078AC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19078AC54(const __CFString *a1, const __CFString *a2, std::string *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v27 = 0;
    sub_190785ACC(a1, (uint64_t)__p);
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      int v8 = SHIBYTE(v27);
      CFTypeID v9 = (void **)__p[0];
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      uint64_t v11 = __p;
      if (v8 < 0) {
        uint64_t v11 = v9;
      }
      snprintf(__str, 0x100uLL, "%s = <dictionary (%ld entries)>:\n", (const char *)v11, Count);
      std::string::append(a3, __str);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_19078AC54, a3);
    }
    else
    {
      CFTypeID v14 = CFGetTypeID(a2);
      if (v14 == CFArrayGetTypeID())
      {
        v15.length = CFArrayGetCount((CFArrayRef)a2);
        __int16 v16 = __p;
        if (v27 < 0) {
          __int16 v16 = (void **)__p[0];
        }
        std::string context = v16;
        uint64_t v24 = 0;
        uint64_t v25 = a3;
        v15.location = 0;
        CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_19078BA88, &context);
      }
      else
      {
        CFTypeID v17 = CFGetTypeID(a2);
        if (v17 == CFStringGetTypeID())
        {
          std::string context = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          if (sub_190785ACC(a2, (uint64_t)&context))
          {
            char v18 = __p;
            if (v27 < 0) {
              char v18 = (void **)__p[0];
            }
            p_std::string context = (const char *)&context;
            if (SHIBYTE(v25) < 0) {
              p_std::string context = (const char *)context;
            }
            snprintf(__str, 0x100uLL, "%s = %s\n", (const char *)v18, p_context);
          }
          std::string::append(a3, __str);
          if (SHIBYTE(v25) < 0) {
            operator delete(context);
          }
        }
        else
        {
          CFTypeID v20 = CFGetTypeID(a2);
          if (v20 == CFNumberGetTypeID())
          {
            std::string context = 0;
            if (sub_190785774(a2, &context))
            {
              __int16 v21 = __p;
              if (v27 < 0) {
                __int16 v21 = (void **)__p[0];
              }
              snprintf(__str, 0x100uLL, "%s = %0.6f\n", (const char *)v21, *(double *)&context);
            }
            std::string::append(a3, __str);
          }
          else
          {
            CFTypeID v22 = CFGetTypeID(a2);
            if (v22 == CFBooleanGetTypeID())
            {
              CFBooleanGetValue((CFBooleanRef)a2);
              snprintf(__str, 0x100uLL, "%s = %d\n");
            }
            else
            {
              CFGetTypeID(a2);
              snprintf(__str, 0x100uLL, "%s = <unhandled value type %lu>\n");
            }
            std::string::append(a3, __str);
          }
        }
      }
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    CFTypeID v12 = CFGetTypeID(a1);
    CFTypeID TypeID = CFStringGetTypeID();
    snprintf(__str, 0x100uLL, "type ID does not match - %lu vs %lu\n", v12, TypeID);
    std::string::append(a3, __str);
  }
}

void sub_19078AF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19078AFD4(const __CFString *a1, const __CFString *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    v50[0] = 0;
    v50[1] = 0;
    uint64_t v51 = 0;
    sub_190785ACC(a1, (uint64_t)v50);
    CFTypeID v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (qword_1E929F700 != -1) {
        dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
      }
      CFTypeID v6 = qword_1E929F708;
      if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
      {
        int v7 = SHIBYTE(v51);
        int v8 = (void **)v50[0];
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
        CFTypeID v10 = v50;
        if (v7 < 0) {
          CFTypeID v10 = v8;
        }
        *(_DWORD *)__n128 buf = 136315394;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = Count;
        _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "\t%s = <dictionary (%ld entries)>:", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        int v38 = SHIBYTE(v51);
        __int16 v39 = (void **)v50[0];
        CFTypeID v40 = (void *)CFDictionaryGetCount((CFDictionaryRef)a2);
        uint64_t v41 = v50;
        if (v38 < 0) {
          uint64_t v41 = v39;
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v41;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v40;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_19078AFD4, 0);
      goto LABEL_63;
    }
    CFTypeID v11 = CFGetTypeID(a2);
    if (v11 == CFArrayGetTypeID())
    {
      v12.length = CFArrayGetCount((CFArrayRef)a2);
      *(_OWORD *)&uint8_t buf[8] = 0uLL;
      int v13 = v50;
      if (v51 < 0) {
        int v13 = (void **)v50[0];
      }
      *(void *)__n128 buf = v13;
      v12.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v12, (CFArrayApplierFunction)sub_19078BA00, buf);
      goto LABEL_63;
    }
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      memset(__p, 0, 24);
      if (sub_190785ACC(a2, (uint64_t)__p))
      {
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        CFRange v15 = qword_1E929F708;
        if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
        {
          __int16 v16 = v50;
          if (v51 < 0) {
            __int16 v16 = (void **)v50[0];
          }
          CFTypeID v17 = __p;
          if (SHIBYTE(__p[2]) < 0) {
            CFTypeID v17 = (void **)__p[0];
          }
          *(_DWORD *)__n128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v17;
          _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "\t%s = %s", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F700 != -1) {
            dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
          }
          uint64_t v43 = v50;
          if (v51 < 0) {
            uint64_t v43 = (void **)v50[0];
          }
          uint64_t v44 = __p;
          if (SHIBYTE(__p[2]) < 0) {
            uint64_t v44 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v52 = 136315394;
          *(void *)&v52[4] = v43;
          __int16 v53 = 2080;
          uint64_t v54 = v44;
          uint64_t v45 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_63;
    }
    CFTypeID v18 = CFGetTypeID(a2);
    if (v18 == CFNumberGetTypeID())
    {
      *(void *)uint64_t v52 = 0;
      if (!sub_190785774(a2, v52)) {
        goto LABEL_63;
      }
      if (qword_1E929F700 != -1) {
        dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
      }
      int v19 = qword_1E929F708;
      if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
      {
        CFTypeID v20 = v50;
        if (v51 < 0) {
          CFTypeID v20 = (void **)v50[0];
        }
        *(_DWORD *)__n128 buf = 136315394;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = *(void *)v52;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEBUG, "\t%s = %0.6f", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_63;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F700 != -1) {
        dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
      }
      __int16 v21 = v50;
      if (v51 < 0) {
        __int16 v21 = (void **)v50[0];
      }
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v21;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = *(void **)v52;
      CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      if (v22 == buf) {
        goto LABEL_63;
      }
    }
    else
    {
      CFTypeID v23 = CFGetTypeID(a2);
      if (v23 == CFBooleanGetTypeID())
      {
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        uint64_t v24 = qword_1E929F708;
        if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
        {
          int v25 = SHIBYTE(v51);
          uint64_t v26 = (void **)v50[0];
          int Value = CFBooleanGetValue((CFBooleanRef)a2);
          char v28 = v50;
          if (v25 < 0) {
            char v28 = v26;
          }
          *(_DWORD *)__n128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = Value;
          _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "\t%s = %d", buf, 0x12u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        int v29 = SHIBYTE(v51);
        CFTypeID v30 = (void **)v50[0];
        int v31 = CFBooleanGetValue((CFBooleanRef)a2);
        int v32 = v50;
        if (v29 < 0) {
          int v32 = v30;
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v32;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v31;
        CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      else
      {
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        __int16 v33 = qword_1E929F708;
        if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
        {
          int v34 = SHIBYTE(v51);
          uint64_t v35 = (void **)v50[0];
          CFTypeID v36 = CFGetTypeID(a2);
          CFRange v37 = v50;
          if (v34 < 0) {
            CFRange v37 = v35;
          }
          *(_DWORD *)__n128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v36;
          _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_DEBUG, "\t%s = <unhandled value type %lu>", buf, 0x16u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE0063C0);
        }
        int v46 = SHIBYTE(v51);
        uint64_t v47 = (void **)v50[0];
        uint64_t v48 = (void *)CFGetTypeID(a2);
        uint64_t v49 = v50;
        if (v46 < 0) {
          uint64_t v49 = v47;
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v49;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v48;
        CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      if (v22 == buf)
      {
LABEL_63:
        if (SHIBYTE(v51) < 0) {
          operator delete(v50[0]);
        }
        return;
      }
    }
    free(v22);
    goto LABEL_63;
  }
}

void sub_19078B994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19078BA00(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s[%d]", *(void *)a2, *(unsigned int *)(a2 + 8));
  sub_19078AFD4(v4, a1);
  ++*(_DWORD *)(a2 + 8);

  CFRelease(v4);
}

void sub_19078BA88(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s[%d]", *(void *)a2, *(unsigned int *)(a2 + 8));
  sub_19078AC54(v4, a1, *(void *)(a2 + 16));
  ++*(_DWORD *)(a2 + 8);

  CFRelease(v4);
}

os_log_t sub_19078BB14()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

os_log_t sub_19078BB44()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

os_log_t sub_19078BB74()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1E929F708 = (uint64_t)result;
  return result;
}

os_log_t sub_19078D218()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Position");
  qword_1E929F678 = (uint64_t)result;
  return result;
}

BOOL sub_19078D248()
{
  uint64_t v0 = (void *)MEMORY[0x192FCF260]();
  sub_19078D290();
  BOOL v1 = qword_1E92A0120 != 0;
  [(id)qword_1E92A0120 showCalibrationAlert];
  return v1;
}

void sub_19078D290()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1E92A0498) {
    return;
  }
  qword_1E92A0498 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompassUI.framework/CompassUI", 1);
  if (qword_1E92A0498)
  {
    qword_1E92A0120 = (uint64_t)NSClassFromString(&cfstr_Cuicalibration.isa);
    if (!qword_1E92A0120)
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0058E0);
      }
      uint64_t v0 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "Could not load CUICalibrationClass from CompassUI framework", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 == -1)
        {
LABEL_18:
          CFTypeID v2 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLClientLoadCompassUIIfNecessary(void)", "CoreLocation: %s\n", v2);
          if (v2 != (char *)buf) {
            free(v2);
          }
          return;
        }
LABEL_20:
        dispatch_once(&qword_1EB2713E8, &unk_1EE0058E0);
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0058E0);
    }
    BOOL v1 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_FAULT, "Unable to load CompassUI framework", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

void sub_19078D528()
{
  uint64_t v0 = (void *)MEMORY[0x192FCF260]();
  sub_19078D290();
  [(id)qword_1E92A0120 dismissCalibrationAlert];
}

uint64_t sub_19078D570(uint64_t a1)
{
  *(void *)a1 = &unk_1EE003820;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  CFStringRef v3 = *(void **)(v2 + 104);
  if (v3)
  {
    free(v3);
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(v2 + 104) = 0;
  }
  [*(id *)(v2 + 64) assertInside];

  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    MEMORY[0x192FCEAD0](v4, 0x10B0C4016A090D5);
  }
  return a1;
}

void sub_19078D608(uint64_t a1)
{
  sub_19078D570(a1);

  JUMPOUT(0x192FCEAD0);
}

pthread_t sub_19078D640(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFTypeID v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "error == 0";
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v10 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v11 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "error == 0";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  pthread_t result = pthread_self();
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(v3 + 72);
  if (v4 < 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFRange v12 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "info->fCount >= 0";
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    int v13 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "info->fCount >= 0";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v14 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "info->fCount >= 0";
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  CFTypeID v5 = *(_opaque_pthread_t **)(v3 + 80);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_17;
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFRange v15 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    __int16 v16 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v17 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_50:
    abort_report_np();
  }
  if (v5 != result)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFTypeID v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    int v7 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    int v8 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      CFTypeID v23 = "assert";
      __int16 v24 = 2081;
      int v25 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
LABEL_17:
  *(_DWORD *)(v3 + 72) = v4 + 1;
  *(void *)(v3 + 80) = result;
  return result;
}

uint64_t sub_19078DF50(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 72);
  if (v3 <= 0)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFTypeID v6 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "info->fCount > 0";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    int v7 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "info->fCount > 0";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    int v8 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "info->fCount > 0";
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_27:
    abort_report_np();
  }
  int v4 = v3 - 1;
  *(_DWORD *)(v2 + 72) = v4;
  if (!v4) {
    *(void *)(v2 + 80) = 0;
  }
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)v2);
  if (result)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
    }
    CFTypeID v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "error == 0";
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v10 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005900);
      }
    }
    CFTypeID v11 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      CFRange v15 = "";
      __int16 v16 = 2082;
      CFTypeID v17 = "assert";
      __int16 v18 = 2081;
      int v19 = "error == 0";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_27;
  }
  return result;
}

BOOL sub_19078E42C(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 8) + 72) == a2;
}

BOOL sub_19078E46C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  pthread_t v2 = *(pthread_t *)(*(void *)(a1 + 8) + 80);
  return v2 == pthread_self();
}

BOOL sub_19078E4AC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  pthread_t v2 = *(pthread_t *)(*(void *)(a1 + 8) + 80);
  return v2 != pthread_self();
}

uint64_t sub_19078E4EC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

os_log_t sub_19078E4F4()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

uint64_t sub_19078E730(uint64_t a1)
{
  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)&OBJC_METACLASS___CLMapsXPCServiceManager;
  qword_1EB2723E0 = objc_msgSend(objc_msgSendSuper2(&v2, sel_allocWithZone_, 0), "init");
  return [(id)qword_1EB2723E0 createConnection];
}

void sub_19078EED4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19078EEEC(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
  }
  int v4 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349571;
    uint64_t v8 = [a2 code];
    __int16 v9 = 2114;
    uint64_t v10 = [a2 domain];
    __int16 v11 = 2113;
    uint64_t v12 = [a2 localizedDescription];
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService synchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    CFTypeID v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19078F12C(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
  }
  int v4 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349571;
    uint64_t v8 = [a2 code];
    __int16 v9 = 2114;
    uint64_t v10 = [a2 domain];
    __int16 v11 = 2113;
    uint64_t v12 = [a2 localizedDescription];
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService asynchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    CFTypeID v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19078F36C(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_continuous_time();
  double v5 = (sub_1907E1770(v4) - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    CFTypeID v6 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        int v7 = [a2 count];
      }
      else {
        int v7 = -1;
      }
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)__n128 buf = 67241729;
      int v15 = v7;
      __int16 v16 = 1026;
      BOOL v17 = a2 == 0;
      __int16 v18 = 2050;
      double v19 = v5;
      __int16 v20 = 2049;
      uint64_t v21 = v8;
      __int16 v22 = 2049;
      uint64_t v23 = v9;
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 1026;
      int v27 = v11;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned data,roadCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
      }
      if (a2) {
        [a2 count];
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19078F638(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_continuous_time();
  double v5 = (sub_1907E1770(v4) - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    CFTypeID v6 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        int v7 = [a2 count];
      }
      else {
        int v7 = -1;
      }
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)__n128 buf = 67241729;
      int v15 = v7;
      __int16 v16 = 1026;
      BOOL v17 = a2 == 0;
      __int16 v18 = 2050;
      double v19 = v5;
      __int16 v20 = 2049;
      uint64_t v21 = v8;
      __int16 v22 = 2049;
      uint64_t v23 = v9;
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 1026;
      int v27 = v11;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Basic style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
      }
      if (a2) {
        [a2 count];
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19078F904(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_continuous_time();
  double v5 = (sub_1907E1770(v4) - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    CFTypeID v6 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        int v7 = [a2 count];
      }
      else {
        int v7 = -1;
      }
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)__n128 buf = 67241729;
      int v15 = v7;
      __int16 v16 = 1026;
      BOOL v17 = a2 == 0;
      __int16 v18 = 2050;
      double v19 = v5;
      __int16 v20 = 2049;
      uint64_t v21 = v8;
      __int16 v22 = 2049;
      uint64_t v23 = v9;
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 1026;
      int v27 = v11;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Extended style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
      }
      if (a2) {
        [a2 count];
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19078FDB0(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
  }
  int v3 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349571;
    uint64_t v6 = [a2 code];
    __int16 v7 = 2114;
    uint64_t v8 = [a2 domain];
    __int16 v9 = 2113;
    uint64_t v10 = [a2 localizedDescription];
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager clearMemoryAndExitHelperProcessCleanly]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_19079022C(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F1CB00] scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:sel_onTimerFire_ selector:0 userInfo:0 repeats:300.0];
  *(void *)(*(void *)(a1 + 32) + 8) = result;
  return result;
}

void sub_19079072C(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
  }
  int v3 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349571;
    uint64_t v6 = [a2 code];
    __int16 v7 = 2114;
    uint64_t v8 = [a2 domain];
    __int16 v9 = 2113;
    uint64_t v10 = [a2 localizedDescription];
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006400);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager releaseMapHelperServiceOSTransaction]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

os_log_t sub_190790964()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

uint64_t sub_190790FFC(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1906D5844((void *)a1);
  *uint64_t v8 = &unk_1EE003D80;
  *((unsigned char *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  __int16 v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((unsigned char *)v8 + 96) = a3;
  sub_1906D5844(v8 + 13);
  *(void *)(a1 + 104) = &unk_1EE004C58;
  sub_1906D5844((void *)(a1 + 120));
  *(void *)(a1 + 120) = &unk_1EE004C58;
  *(void *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_1907829B4(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0) {
    uint64_t v10 = (const char *)&v57;
  }
  else {
    uint64_t v10 = (const char *)v57;
  }
  uint64_t v11 = getpwnam(v10);
  if (v11)
  {
    *(void *)(a1 + 88) = *(void *)&v11->pw_uid;
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    uint64_t v12 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = &v57;
      if (v58 < 0) {
        uint64_t v13 = (long long *)v57;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      uint64_t v44 = &v57;
      if (v58 < 0) {
        uint64_t v44 = (long long *)v57;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      uint64_t v45 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "CoreLocation: %s\n", (const char *)v45);
      if (v45 != buf) {
        free(v45);
      }
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_1906C00FC(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = v57;
    uint64_t v55 = v58;
  }
  sub_1907AA64C((uint64_t)__dst, &v56);
  __int16 v14 = std::string::append(&v56, "/Library/Preferences/");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1907829B4(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    __int16 v16 = (const std::string::value_type *)&v51;
  }
  else {
    __int16 v16 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v17 = v53;
  }
  else {
    std::string::size_type v17 = v52;
  }
  __int16 v18 = std::string::append(&v59, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1906D5C70(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v21 = v50;
  }
  else {
    std::string::size_type v21 = v49;
  }
  __int16 v22 = std::string::append(buf, p_p, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v9);
  }
  uint64_t v25 = v60[0];
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 39) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 47) = v24;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_1906C00FC(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)int v46 = v57;
    uint64_t v47 = v58;
  }
  sub_1907AA7F8((uint64_t)v46, &v56);
  __int16 v26 = std::string::append(&v56, "/");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_1907829B4(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    uint64_t v28 = (const std::string::value_type *)&v51;
  }
  else {
    uint64_t v28 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v29 = v53;
  }
  else {
    std::string::size_type v29 = v52;
  }
  CFTypeID v30 = std::string::append(&v59, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_1906D5C70(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    int v32 = (const std::string::value_type *)&__p;
  }
  else {
    int v32 = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v33 = v50;
  }
  else {
    std::string::size_type v33 = v49;
  }
  int v34 = std::string::append(buf, v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v37 = v60[0];
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 63) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 71) = v36;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  int v38 = getpwnam("root");
  BOOL v42 = 0;
  if (v38)
  {
    __int16 v39 = v38;
    uid_t pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      gid_t pw_gid = v39->pw_gid;
      if (pw_gid == getgid()) {
        BOOL v42 = 1;
      }
    }
  }
  *(unsigned char *)(a1 + 16) = v42;
  sub_1907917B8(a1);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  return a1;
}

void sub_190791620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_1906BFEBC(v65);
  sub_1906BFEBC(v64);
  if (*(char *)(v63 + 71) < 0) {
    operator delete(*(void **)(v63 + 48));
  }
  if (*(char *)(v63 + 47) < 0) {
    operator delete(*v66);
  }
  sub_1906BFEBC((void *)v63);
  _Unwind_Resume(a1);
}

BOOL sub_1907917B8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E929FFD0);
  objc_super v2 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    objc_super v2 = (void *)*v2;
  }
  sub_190781568(a1 + 120, (uint64_t)v2);
  int v3 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (*(unsigned char *)(a1 + 16)) {
    sub_190791930((char *)a1, 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E929FFD0);
  return v3 != 0;
}

void sub_190791840(_Unwind_Exception *a1)
{
}

void *sub_190791860(uint64_t a1)
{
  *(void *)a1 = &unk_1EE003D80;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_1906BFEBC((void *)(a1 + 120));
  sub_1906BFEBC((void *)(a1 + 104));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return sub_1906BFEBC((void *)a1);
}

void sub_1907918F8(uint64_t a1)
{
  sub_190791860(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_190791930(char *a1, int a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a1[96]) {
    return;
  }
  objc_super v2 = a1;
  if (a2)
  {
    int v3 = (void **)(a1 + 24);
    int v4 = a1[47];
    double v5 = a1 + 24;
    if (v4 < 0) {
      double v5 = (const char *)*v3;
    }
    if (stat(v5, &v48))
    {
      p_cache = (__CFString *)CLCircularRegion.cache;
      if (qword_1EB2713B8 == -1) {
        goto LABEL_8;
      }
      goto LABEL_80;
    }
    if (v48.st_uid == *((_DWORD *)v2 + 22) && v48.st_gid == *((_DWORD *)v2 + 23) && (~v48.st_mode & 0x1B6) == 0) {
      return;
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    uint64_t v12 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = v2 + 24;
      if (v2[47] < 0) {
        uint64_t v13 = (char *)*v3;
      }
      gid_t v14 = *((_DWORD *)v2 + 22);
      int v15 = *((_DWORD *)v2 + 23);
      buf[0].st_dev = 136316674;
      *(void *)&buf[0].int st_mode = v13;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v48.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v14;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v48.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v15;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v48.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEFAULT, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (uint8_t *)buf, 0x30u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      if (v2[47] < 0) {
        int v3 = (void **)*v3;
      }
      int v40 = *((_DWORD *)v2 + 22);
      int v41 = *((_DWORD *)v2 + 23);
      int v49 = 136316674;
      unsigned __int8 v50 = v3;
      __int16 v51 = 1024;
      uid_t st_uid = v48.st_uid;
      __int16 v53 = 1024;
      *(_DWORD *)uint64_t v54 = v40;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v48.st_gid;
      __int16 v55 = 1024;
      int v56 = v41;
      __int16 v57 = 1024;
      int st_mode = v48.st_mode;
      __int16 v59 = 1024;
      int v60 = 438;
      BOOL v42 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
  }
  __int16 v16 = (const char **)(v2 + 24);
  std::string::size_type v17 = v2 + 24;
  if (v2[47] < 0) {
    std::string::size_type v17 = *v16;
  }
  __int16 v18 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v17, 0x8000100u);
  if (v18)
  {
    long long v19 = v18;
    unint64_t v20 = objc_msgSend((id)-[__CFString pathComponents](v18, "pathComponents"), "count") - 1;
    if (v20 >= 2)
    {
      std::string::size_type v21 = v19;
      p_cache = @"/tmp";
      while (1)
      {
        std::string::size_type v21 = (__CFString *)[(__CFString *)v21 stringByDeletingLastPathComponent];
        if (([(__CFString *)v21 isEqualToString:@"/var"] & 1) == 0
          && ([(__CFString *)v21 isEqualToString:@"/tmp"] & 1) == 0
          && !lstat((const char *)[(__CFString *)v21 fileSystemRepresentation], buf)
          && (buf[0].st_mode & 0xF000) == 0xA000)
        {
          break;
        }
        if (--v20 <= 1) {
          goto LABEL_38;
        }
      }
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      int v3 = CLCircularRegion.cache;
      int v38 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].int st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(void *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
        }
      }
      __int16 v39 = off_1EB2713B0;
      if (os_signpost_enabled((os_log_t)off_1EB2713B0))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].int st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(void *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_signpost_emit_with_name_impl(&dword_1906B8000, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
        }
      }
      objc_super v2 = (char *)off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].int st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(void *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_1906B8000, (os_log_t)v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      }
      abort_report_np();
LABEL_80:
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
LABEL_8:
      __int16 v7 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = v3;
        if (v2[47] < 0) {
          uint64_t v8 = *v3;
        }
        int v9 = *__error();
        buf[0].st_dev = 136315394;
        *(void *)&buf[0].int st_mode = v8;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v9;
        _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "#Warning could not check %s (errno %d)", (uint8_t *)buf, 0x12u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (p_cache[29].length != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
        }
        if (v2[47] < 0) {
          int v3 = (void **)*v3;
        }
        int v10 = *__error();
        int v49 = 136315394;
        unsigned __int8 v50 = v3;
        __int16 v51 = 1024;
        uid_t st_uid = v10;
        uint64_t v11 = (stat *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
LABEL_67:
        if (v11 != buf) {
          free(v11);
        }
        return;
      }
      return;
    }
LABEL_38:
    CFRelease(v19);
  }
  __int16 v22 = v2 + 24;
  if (v2[47] < 0) {
    __int16 v22 = *v16;
  }
  if (!lstat(v22, &v48))
  {
    std::string::size_type v23 = v2 + 24;
    if (v2[47] < 0) {
      std::string::size_type v23 = *v16;
    }
    if (lchmod(v23, 0x1B6u))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      char v24 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        uint64_t v25 = v2 + 24;
        if (v2[47] < 0) {
          uint64_t v25 = *v16;
        }
        int v26 = *__error();
        long long v27 = __error();
        uint64_t v28 = strerror(*v27);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v25;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v26;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v28;
        _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_FAULT, "could not lchmod %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
        }
        uint64_t v43 = v2 + 24;
        if (v2[47] < 0) {
          uint64_t v43 = *v16;
        }
        int v44 = *__error();
        uint64_t v45 = __error();
        int v46 = strerror(*v45);
        int v49 = 136446722;
        unsigned __int8 v50 = (void *)v43;
        __int16 v51 = 1026;
        uid_t st_uid = v44;
        __int16 v53 = 2082;
        *(void *)uint64_t v54 = v46;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
    }
    std::string::size_type v29 = v2 + 24;
    if (v2[47] < 0) {
      std::string::size_type v29 = *v16;
    }
    if (lchown(v29, *((_DWORD *)v2 + 22), *((_DWORD *)v2 + 23)))
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      CFTypeID v30 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
      {
        long long v31 = v2 + 24;
        if (v2[47] < 0) {
          long long v31 = *v16;
        }
        int v32 = *__error();
        std::string::size_type v33 = __error();
        int v34 = strerror(*v33);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v31;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v32;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v34;
        _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_FAULT, "could not lchown %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713B8 != -1) {
          dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
        }
        if (v2[47] < 0) {
          __int16 v16 = (const char **)*v16;
        }
        int v35 = *__error();
        char v36 = __error();
        uint64_t v37 = strerror(*v36);
        int v49 = 136446722;
        unsigned __int8 v50 = v16;
        __int16 v51 = 1026;
        uid_t st_uid = v35;
        __int16 v53 = 2082;
        *(void *)uint64_t v54 = v37;
        uint64_t v11 = (stat *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
        goto LABEL_67;
      }
    }
  }
}

uint64_t sub_19079242C(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

CFArrayRef sub_190792434(CFStringRef *a1)
{
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFArrayRef result = CFPreferencesCopyKeyList(a1[9], a1[10], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (result)
  {
    CFArrayRef v4 = result;
    CFPreferencesSetMultiple(0, result, a1[9], a1[10], v2);
    CFRelease(v4);
    data = (*a1)[26].data;
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))data)(a1);
  }
  return result;
}

uint64_t sub_1907924F4(CFStringRef *a1, CFStringRef key)
{
  CFPreferencesSetValue(key, 0, a1[9], a1[10], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  data = (*a1)[26].data;

  return ((uint64_t (*)(CFStringRef *))data)(a1);
}

CFIndex sub_190792578(uint64_t a1)
{
  CFArrayRef v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

CFIndex sub_1907925D0(uint64_t a1, CFStringRef key)
{
  CFArrayRef v2 = (const __CFArray *)CFPreferencesCopyValue(key, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 1;
  }
  CFRelease(v3);
  return Count;
}

uint64_t sub_19079264C()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_1907927D8()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_190792964()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_190792AF0(const __CFString *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a2 + 912))(a2, a1, &cf))
  {
    sub_19078AFD4(a1, (const __CFString *)cf);
    CFRelease(cf);
  }
}

void sub_190792B70(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F700 != -1) {
    dispatch_once(&qword_1E929F700, &unk_1EE006200);
  }
  if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
  {
    if ((*(int (**)(uint64_t))(*(void *)(a1 + 120) + 856))(a1 + 120) >= 1) {
      sub_19078A960(a1 + 120);
    }
    CFArrayRef v2 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    CFArrayRef v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v11.length = CFArrayGetCount(v3);
      v11.location = 0;
      CFArrayApplyFunction(v3, v11, (CFArrayApplierFunction)sub_190792AF0, (void *)a1);
      CFRelease(v3);
      uint64_t v5 = *(void *)(a1 + 104);
      uint64_t v4 = a1 + 104;
      if ((*(int (**)(uint64_t))(v5 + 856))(v4) >= 1)
      {
        sub_19078A960(v4);
      }
    }
    else
    {
      if (qword_1E929F700 != -1) {
        dispatch_once(&qword_1E929F700, &unk_1EE006200);
      }
      uint64_t v6 = qword_1E929F708;
      if (os_log_type_enabled((os_log_t)qword_1E929F708, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F700 != -1) {
          dispatch_once(&qword_1E929F700, &unk_1EE006200);
        }
        __int16 v7 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLPreferences::print() const", "CoreLocation: %s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      if (v3) {
        CFRelease(v3);
      }
    }
  }
}

void sub_190792E6C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_190792FF4()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::loadFromFile(const char *)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_190793180()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_19079330C()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
  uint64_t v0 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_190793498(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
    }
    uint64_t v5 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v6 = v24;
      sub_1907829B4(key, (uint64_t)v24);
      if (v27 < 0) {
        uint64_t v6 = *(unsigned char **)v24;
      }
      sub_1907829B4(*(const __CFString **)(a1 + 72), (uint64_t)v22);
      int v7 = v23;
      uint64_t v8 = (void **)v22[0];
      sub_1907829B4(*(const __CFString **)(a1 + 80), (uint64_t)__p);
      uint64_t v9 = v22;
      if (v7 < 0) {
        uint64_t v9 = v8;
      }
      if (v21 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)__n128 buf = 136446722;
      CFTypeID v30 = v6;
      __int16 v31 = 2082;
      int v32 = v9;
      __int16 v33 = 2082;
      int v34 = v10;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", buf, 0x20u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)v24);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
      sub_1907829B4(key, (uint64_t)v22);
      if (v23 >= 0) {
        uint64_t v12 = v22;
      }
      else {
        uint64_t v12 = (void **)v22[0];
      }
      sub_1907829B4(*(const __CFString **)(a1 + 72), (uint64_t)__p);
      int v13 = v21;
      gid_t v14 = (void **)__p[0];
      sub_1907829B4(*(const __CFString **)(a1 + 80), (uint64_t)v18);
      int v15 = __p;
      if (v13 < 0) {
        int v15 = v14;
      }
      if (v19 >= 0) {
        __int16 v16 = v18;
      }
      else {
        __int16 v16 = (void **)v18[0];
      }
      *(_DWORD *)char v24 = 136446722;
      *(void *)&v24[4] = v12;
      __int16 v25 = 2082;
      int v26 = v15;
      __int16 v27 = 2082;
      uint64_t v28 = v16;
      std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    CFRange v11 = *(void (**)(uint64_t))(*(void *)a1 + 848);
    v11(a1);
  }
}

void sub_19079384C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1907938B4(uint64_t a1, const __CFString *a2, void *a3)
{
  if (sub_1906C18B0(a1 + 120, a2, a3)) {
    return 1;
  }
  CFPropertyListRef v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  *a3 = v6;
  if (v6) {
    return 1;
  }

  return sub_1906C18B0(a1 + 104, a2, a3);
}

void sub_190793944()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713B8 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      uint64_t v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
    }
    CFArrayRef v1 = off_1EB2713B0;
    if (os_signpost_enabled((os_log_t)off_1EB2713B0))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      uint64_t v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
      }
    }
    CFArrayRef v2 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      uint64_t v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1EB2713B8, &unk_1EE005940);
  }
}

__CFString *sub_190793B68()
{
  return @"OtherPref";
}

void sub_190793B74(void *a1)
{
  sub_1906BFEBC(a1);

  JUMPOUT(0x192FCEAD0);
}

os_log_t sub_190793BAC()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

os_log_t sub_190793BDC()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1E929F708 = (uint64_t)result;
  return result;
}

void sub_190793C10()
{
}

BOOL sub_190793C24()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

void sub_190793C98(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB272418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB272418))
  {
    unk_1EB2724C0 = 0;
    xmmword_1EB2724B0 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB2724B0, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB272418);
  }
  if (qword_1EB272420 != -1) {
    dispatch_once(&qword_1EB272420, &unk_1EE002BE0);
  }
  if (byte_1EB2724C7 < 0)
  {
    long long v2 = xmmword_1EB2724B0;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB2724B0;
    *(void *)(a1 + 16) = unk_1EB2724C0;
  }
}

void *sub_190793D88()
{
  v19[2] = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopyServerVersionDictionary();
  if (!v0)
  {
    CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
    if (!v0)
    {
      JUMPOUT(0x192FCE920);
    }
  }
  sub_1906BFF0C(v18, v0);
  CFRelease(v0);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  long long __p = 0;
  std::string::size_type v12 = 0;
  uint64_t v13 = 0;
  if (!sub_190784390((uint64_t)v18, *MEMORY[0x1E4F1CD18], (uint64_t)v14)) {
    MEMORY[0x192FCE920](v14, "<name>");
  }
  if (!sub_190784390((uint64_t)v18, *MEMORY[0x1E4F1CD30], (uint64_t)v16)) {
    MEMORY[0x192FCE920](v16, "<version>");
  }
  if (!sub_190784390((uint64_t)v18, *MEMORY[0x1E4F1CD10], (uint64_t)&__p)) {
    MEMORY[0x192FCE920](&__p, "<build>");
  }
  sub_190794090((const void **)v14, v16, (uint64_t)&v9);
  CFBooleanRef v1 = std::string::append(&v9, "/");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v13 >= 0) {
    std::string::size_type v4 = HIBYTE(v13);
  }
  else {
    std::string::size_type v4 = v12;
  }
  __int16 v5 = std::string::append(&v10, p_p, v4);
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
  v19[0] = v5->__r_.__value_.__l.__size_;
  *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (byte_1EB2724C7 < 0) {
    operator delete((void *)xmmword_1EB2724B0);
  }
  *(void *)&xmmword_1EB2724B0 = v6;
  *((void *)&xmmword_1EB2724B0 + 1) = v19[0];
  *(void *)((char *)&xmmword_1EB2724B0 + 15) = *(void *)((char *)v19 + 7);
  byte_1EB2724C7 = v7;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16[0]);
  }
  return sub_1906BFEBC(v18);
}

void sub_190794008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  sub_1906BFEBC((void *)(v34 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_190794090@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = sub_190796A90(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      std::string v9 = a1;
    }
    else {
      std::string v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  std::string v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_19079415C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB272428, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = a1;
    int v4 = __cxa_guard_acquire(&qword_1EB272428);
    a1 = v3;
    if (v4)
    {
      unk_1EB2724D8 = 0;
      xmmword_1EB2724C8 = 0uLL;
      __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB2724C8, &dword_1906B8000);
      __cxa_guard_release(&qword_1EB272428);
      a1 = v3;
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19079429C;
  block[3] = &unk_1E5696EA0;
  block[4] = a1;
  if (qword_1EB272430 != -1) {
    dispatch_once(&qword_1EB272430, block);
  }
  if (byte_1EB2724DF < 0)
  {
    sub_1906C00FC((unsigned char *)a2, (void *)xmmword_1EB2724C8, *((unint64_t *)&xmmword_1EB2724C8 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1EB2724C8;
    *(void *)(a2 + 16) = unk_1EB2724D8;
  }
}

double sub_19079429C()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  size_t v4 = 128;
  if (sysctlbyname("hw.model", v5, &v4, 0, 0)) {
    CFDictionaryRef v0 = "";
  }
  else {
    CFDictionaryRef v0 = v5;
  }
  sub_1906D5C70(&v2, v0);
  if (byte_1EB2724DF < 0) {
    operator delete((void *)xmmword_1EB2724C8);
  }
  double result = *(double *)&v2;
  xmmword_1EB2724C8 = v2;
  unk_1EB2724D8 = v3;
  return result;
}

void sub_190794360(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB272438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB272438))
  {
    unk_1EB2724F0 = 0;
    xmmword_1EB2724E0 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB2724E0, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB272438);
  }
  if (qword_1EB272440 != -1) {
    dispatch_once(&qword_1EB272440, &unk_1EE0064C0);
  }
  if (byte_1EB2724F7 < 0)
  {
    long long v2 = xmmword_1EB2724E0;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB2724E0;
    *(void *)(a1 + 16) = unk_1EB2724F0;
  }
}

void sub_190794450()
{
  sub_1907AAE48(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v2)
  {
    CFTypeID v3 = CFGetTypeID(v2);
    if (v3 == CFStringGetTypeID())
    {
      CFURLRef v4 = CFURLCreateWithFileSystemPath(v1, v2, kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        CFStringRef v5 = (const __CFString *)v4;
        uint64_t v6 = CFBundleCreate(v1, v4);
        if (v6)
        {
          char v7 = v6;
          CFStringRef ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v6, (CFStringRef)*MEMORY[0x1E4F1D020]);
          if (ValueForInfoDictionaryKey)
          {
            CFStringRef v9 = ValueForInfoDictionaryKey;
            CFTypeID v10 = CFGetTypeID(ValueForInfoDictionaryKey);
            if (v10 == CFStringGetTypeID())
            {
              sub_1907829B4(v9, (uint64_t)&__p);
              if (byte_1EB2724E0[23] < 0) {
                operator delete(*(void **)byte_1EB2724E0);
              }
              *(std::string *)byte_1EB2724E0 = __p;
            }
          }
          CFRelease(v2);
          CFStringRef v2 = v5;
        }
        else
        {
          char v7 = (__CFBundle *)v5;
        }
        CFRelease(v2);
        CFStringRef v2 = (CFStringRef)v7;
      }
    }
    CFRelease(v2);
  }
}

void sub_1907945AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907945C8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB272448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB272448))
  {
    unk_1EB272508 = 0;
    xmmword_1EB2724F8 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB2724F8, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB272448);
  }
  if (qword_1EB272450 != -1) {
    dispatch_once(&qword_1EB272450, &unk_1EE002C20);
  }
  if (byte_1EB27250F < 0)
  {
    long long v2 = xmmword_1EB2724F8;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB2724F8;
    *(void *)(a1 + 16) = unk_1EB272508;
  }
}

uint64_t sub_1907946B8()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("IOPlatformExpertDevice");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  if (result)
  {
    io_object_t v3 = result;
    CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, @"IOPlatformSerialNumber", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFProperty)
    {
      CFStringRef v5 = CFProperty;
      sub_1907829B4(CFProperty, (uint64_t)&v6);
      if (byte_1EB27250F < 0) {
        operator delete((void *)xmmword_1EB2724F8);
      }
      xmmword_1EB2724F8 = v6;
      unk_1EB272508 = v7;
      CFRelease(v5);
    }
    return IOObjectRelease(v3);
  }
  return result;
}

uint64_t sub_190794774()
{
  if (qword_1EB272458[0] != -1) {
    dispatch_once(qword_1EB272458, &unk_1EE0064E0);
  }
  return dword_1EB2723FC;
}

void sub_1907947B8()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  int v0 = 7381266;
  switch(dword_1EB2723F8)
  {
    case 1:
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      int v0 = 33562886;
      break;
    case 2:
    case 5:
    case 19:
    case 20:
    case 52:
    case 53:
    case 60:
    case 61:
    case 158:
    case 159:
    case 160:
    case 162:
    case 163:
    case 164:
    case 165:
    case 185:
    case 195:
    case 196:
      int v0 = 532482;
      break;
    case 3:
    case 43:
    case 148:
      break;
    case 4:
      int v0 = 8454;
      break;
    case 6:
    case 166:
    case 167:
      goto LABEL_37;
    case 7:
    case 10:
    case 13:
    case 14:
    case 29:
    case 31:
    case 33:
    case 35:
    case 44:
    case 46:
    case 48:
    case 62:
    case 64:
    case 76:
    case 134:
    case 136:
    case 144:
    case 146:
    case 154:
    case 156:
    case 186:
    case 188:
    case 197:
    case 199:
    case 201:
    case 203:
    case 205:
    case 207:
    case 209:
    case 211:
    case 212:
    case 213:
    case 215:
    case 217:
    case 226:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 239:
    case 242:
      int v0 = 7905558;
      break;
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
      int v0 = 8236319;
      break;
    case 9:
    case 17:
    case 18:
      int v0 = 16624927;
      break;
    case 21:
      int v0 = 4202498;
      break;
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 63:
    case 65:
    case 77:
    case 135:
    case 137:
    case 145:
    case 155:
    case 157:
    case 187:
    case 189:
    case 190:
    case 202:
    case 204:
    case 206:
    case 208:
    case 210:
    case 214:
    case 216:
    case 218:
    case 240:
    case 241:
    case 243:
      int v0 = 16624923;
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      int v0 = 37789954;
      break;
    case 50:
    case 51:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 89:
    case 90:
    case 95:
    case 96:
      int v0 = 37789962;
      break;
    case 57:
    case 58:
    case 59:
      int v0 = 8234271;
      break;
    case 66:
    case 67:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 98:
      int v0 = 38120715;
      break;
    case 68:
    case 69:
    case 70:
    case 78:
    case 79:
    case 80:
    case 139:
    case 141:
    case 142:
    case 143:
      int v0 = 41788703;
      break;
    case 71:
    case 72:
    case 73:
      int v0 = 41790751;
      break;
    case 99:
    case 100:
    case 103:
    case 104:
    case 107:
    case 108:
    case 111:
    case 112:
    case 116:
    case 117:
    case 120:
    case 121:
    case 126:
    case 127:
    case 130:
    case 131:
      int v0 = 38314250;
      break;
    case 101:
    case 102:
    case 105:
    case 106:
    case 109:
    case 110:
    case 113:
    case 114:
    case 115:
    case 118:
    case 119:
    case 122:
    case 123:
    case 124:
    case 125:
    case 128:
    case 129:
    case 132:
    case 133:
    case 260:
      int v0 = 38645003;
      break;
    case 149:
      int v0 = 4235530;
      break;
    case 150:
    case 151:
    case 152:
    case 153:
      int v0 = 41226;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      int v0 = 108899615;
      break;
    case 198:
    case 200:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
    case 238:
      int v0 = 83733787;
      break;
    default:
      if (qword_1E929F630 != -1) {
        dispatch_once(&qword_1E929F630, &unk_1EE006560);
      }
      CFDictionaryRef v1 = qword_1E929F638;
      if (os_log_type_enabled((os_log_t)qword_1E929F638, OS_LOG_TYPE_FAULT))
      {
        if (qword_1EB272410 != -1) {
          dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
        }
        *(_DWORD *)__n128 buf = 67174657;
        int v5 = dword_1EB2723F8;
        _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_FAULT, "unknown hardware type %{private}d", buf, 8u);
      }
      int v2 = sub_1906CB57C(115, 0);
      int v0 = 0;
      if (v2)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F630 != -1) {
          dispatch_once(&qword_1E929F630, &unk_1EE006560);
        }
        if (qword_1EB272410 != -1) {
          dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
        }
        io_object_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke", "CoreLocation: %s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
LABEL_37:
        int v0 = 0;
      }
      break;
  }
  dword_1EB2723FC = v0;
}

BOOL sub_190794F30()
{
  if (sub_19079506C() || sub_190795108()) {
    return 1;
  }

  return sub_190795180();
}

uint64_t sub_190794F70()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t result = 1;
  if (((dword_1EB2723F8 - 184) > 0x36
     || ((1 << (dword_1EB2723F8 + 72)) & 0x50000000000001) == 0)
    && (dword_1EB2723F8 - 174) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t sub_190795014()
{
  if ((sub_190795218() & 1) != 0
    || (sub_1907952EC() & 1) != 0
    || sub_190794F30()
    || sub_190795378() && !sub_190795180())
  {
    return 1;
  }

  return sub_190794F70();
}

BOOL sub_19079506C()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  BOOL result = 1;
  if ((dword_1EB2723F8 - 82) > 0x14 || ((1 << (dword_1EB2723F8 - 82)) & 0x1FFFD5) == 0) {
    return (dword_1EB2723F8 - 150) < 4;
  }
  return result;
}

BOOL sub_190795108()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return (dword_1EB2723F8 - 103) < 4;
}

BOOL sub_190795180()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  BOOL result = 1;
  if ((dword_1EB2723F8 - 107) >= 0x1B && (dword_1EB2723F8 - 178) >= 6) {
    return dword_1EB2723F8 == 260;
  }
  return result;
}

uint64_t sub_190795218()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t result = 1;
  if (dword_1EB2723F8 > 134)
  {
    if (((dword_1EB2723F8 - 135) > 0xA || ((1 << (dword_1EB2723F8 + 121)) & 0x405) == 0)
      && dword_1EB2723F8 != 202
      && dword_1EB2723F8 != 204)
    {
      return 0;
    }
  }
  else if ((dword_1EB2723F8 - 34) > 0x2E {
         || ((1 << (dword_1EB2723F8 - 34)) & 0x700000008001) == 0)
  }
  {
    return 0;
  }
  return result;
}

uint64_t sub_1907952EC()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 139) < 0x34) & (0x900000005001DuLL >> (dword_1EB2723F8
                                                                                              + 117));
}

uint64_t sub_190795378()
{
  if ((sub_1907953D0() & 1) != 0
    || (sub_19079545C() & 1) != 0
    || (sub_1907954E8() & 1) != 0
    || sub_190795574()
    || (sub_1907955E8() & 1) != 0)
  {
    return 1;
  }

  return sub_190795678();
}

uint64_t sub_1907953D0()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 168) < 0x21) & (0x14000000FuLL >> (dword_1EB2723F8
                                                                                          + 88));
}

uint64_t sub_19079545C()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 172) < 0x27) & (0x4400020033uLL >> (dword_1EB2723F8
                                                                                           + 84));
}

uint64_t sub_1907954E8()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 178) < 0x35) & (0x140C0000000003uLL >> (dword_1EB2723F8
                                                                                               + 78));
}

BOOL sub_190795574()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return dword_1EB2723F8 == 219;
}

uint64_t sub_1907955E8()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 180) < 0x40) & (0xB0500C5410000003 >> (dword_1EB2723F8
                                                                                                + 76));
}

uint64_t sub_190795678()
{
  if (qword_1EB272408 != -1) {
    dispatch_once(&qword_1EB272408, &unk_1EE005960);
  }
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  return ((dword_1EB2723F8 - 182) < 0x2C) & (0xC0000000003uLL >> (dword_1EB2723F8
                                                                                            + 74));
}

void sub_190795700()
{
  int v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    if (CFEqual(v0, @"iPhone")) {
      byte_1EB2723F2 = 1;
    }
    CFRelease(v1);
  }
}

uint64_t sub_190795894()
{
  uint64_t result = sub_190795014();
  if (result)
  {
    if ((sub_190795218() & 1) != 0
      || (sub_1907952EC() & 1) != 0
      || sub_190794F30() && !sub_19079506C() && !sub_190795108())
    {
      if (qword_1EB272470 != -1) {
        dispatch_once(&qword_1EB272470, &unk_1EE006500);
      }
      if (byte_1EB2723F2) {
        return 1;
      }
    }
    if (sub_190795378() && !sub_190795180())
    {
      return 1;
    }
    else
    {
      return sub_190794F70();
    }
  }
  return result;
}

uint64_t sub_19079593C()
{
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  uint64_t result = 1;
  switch(dword_1EB2723F8)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 50:
    case 51:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 141:
    case 142:
    case 143:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 204:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
    case 243:
    case 260:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_190795DAC()
{
  if (qword_1EB272480 != -1) {
    dispatch_once(&qword_1EB272480, &unk_1EE006520);
  }
  return byte_1EB2723F4;
}

void sub_190795DF0()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) == 1) {
      byte_1EB2723F4 = 1;
    }
    CFRelease(v1);
  }
}

uint64_t sub_190795E74()
{
  if (qword_1EB272410 != -1) {
    dispatch_once(&qword_1EB272410, &unk_1EE002CE0);
  }
  switch(dword_1EB2723F8)
  {
    case 7:
    case 8:
    case 9:
    case 10:
    case 23:
    case 26:
    case 27:
    case 43:
      return -56;
    case 11:
    case 12:
    case 19:
    case 20:
    case 21:
    case 28:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
      return -59;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 24:
      return -57;
    case 22:
      return -58;
    case 25:
    case 46:
    case 47:
      return -54;
    case 31:
      return -53;
    default:
      if ((dword_1EB2723F8 - 62) >= 2)
      {
        if (dword_1EB2723F8 == 148) {
          return -56;
        }
        else {
          return -59;
        }
      }
      else
      {
        return -51;
      }
  }
}

uint64_t sub_190795FD4()
{
  if (qword_1EB272470 != -1) {
    dispatch_once(&qword_1EB272470, &unk_1EE006500);
  }
  return byte_1EB2723F2;
}

void sub_190796430()
{
  v6[1] = *MEMORY[0x1E4F143B8];
  int v5 = @"IOPropertyMatch";
  v6[0] = &unk_1EE023930;
  CFBooleanRef v0 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1];
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], (CFDictionaryRef)v0);
  if (MatchingService)
  {
    byte_1EB2723F7 = 1;
    IOObjectRelease(MatchingService);
  }
  else
  {
    if (qword_1E929F640 != -1) {
      dispatch_once(&qword_1E929F640, &unk_1EE006580);
    }
    CFTypeID v2 = qword_1E929F648;
    if (os_log_type_enabled((os_log_t)qword_1E929F648, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "Compass service missing", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F640 != -1) {
        dispatch_once(&qword_1E929F640, &unk_1EE006580);
      }
      io_object_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsCompass()_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

os_log_t sub_190796A30()
{
  os_log_t result = os_log_create("com.apple.locationd.Utility", "Utility");
  qword_1E929F638 = (uint64_t)result;
  return result;
}

os_log_t sub_190796A60()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1E929F648 = (uint64_t)result;
  return result;
}

uint64_t sub_190796A90(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1906F442C();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_190796B18(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v15[0] = *a2;
  v15[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_190771690((void *)a1, v15, a3);
  if (v4) {
    sub_1906BFE48(v4);
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = &unk_1EE0048E8;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 544) = 0xBFF0000000000000;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(unsigned char *)(a1 + 568) = 1;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_1908820F0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 680) = 0xBFF0000000000000;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = _Q1;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 816) = 0;
  *(_WORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(unsigned char *)(a1 + 600) = sub_190794F30();
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
  }
  CFTypeID v10 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(unsigned __int8 *)(a1 + 600);
    *(_DWORD *)__n128 buf = 67240192;
    int v19 = v11;
    _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d", buf, 8u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    int v13 = *(unsigned __int8 *)(a1 + 600);
    int v16 = 67240192;
    int v17 = v13;
    gid_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return a1;
}

void sub_190796E1C(_Unwind_Exception *a1)
{
  io_object_t v3 = *(std::__shared_weak_count **)(v1 + 560);
  if (v3) {
    sub_1906BFE48(v3);
  }
  if (*(char *)(v1 + 271) < 0) {
    operator delete(*(void **)(v1 + 248));
  }
  sub_190809450(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190796E68(uint64_t a1)
{
  *(void *)a1 = &unk_1EE0048E8;
  CFTypeID v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2) {
    sub_1906BFE48(v2);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }

  return sub_190809450(a1);
}

void sub_190796ED8(uint64_t a1)
{
  sub_190796E68(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_190796F10(uint64_t a1)
{
  *(unsigned char *)(a1 + 568) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v7 = _Q0;
  *(void *)uint64_t v8 = 0xBFF0000000000000;
  v10[15] = 0;
  LODWORD(v10[16]) = 0;
  memset(&v10[10], 0, 34);
  memset(&v10[17], 0, 75);
  memset(&v10[27], 0, 56);
  memset(&v8[8], 0, 80);
  memset(v10, 0, 78);
  long long v9 = 0u;
  v10[34] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v8[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v8[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v8[80]);
  memcpy((void *)(a1 + 272), v10, 0x118uLL);
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 736) = v7;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(*(void **)&v8[80]);
  }
}

void sub_19079707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190797098(uint64_t a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 840))
  {
    *a2 = 0x4066800000000000;
    return 1;
  }
  if (*(unsigned char *)(a1 + 776))
  {
    if (!*(unsigned char *)(a1 + 808) || (double v5 = *(double *)(a1 + 792), v5 > 15.0) && v5 > *(double *)(a1 + 800) * 0.5)
    {
      *a2 = 0x4066800000000000;
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
        }
        uint64_t v6 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          int v7 = *(unsigned __int8 *)(a1 + 776);
          uint64_t v8 = *(void *)(a1 + 792);
          uint64_t v9 = *(void *)(a1 + 800);
          uint64_t v10 = *a2;
          *(_DWORD *)__n128 buf = 67240960;
          int v13 = v7;
          __int16 v14 = 2050;
          uint64_t v15 = v8;
          __int16 v16 = 2050;
          uint64_t v17 = v9;
          __int16 v18 = 2050;
          uint64_t v19 = v10;
          _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCourseUnc,%{public}.1f", buf, 0x26u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
          }
          int v11 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::shouldOverrideCourseUnc(double &)", "CoreLocation: %s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      return 1;
    }
  }
  return 0;
}

void sub_190797308(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a1 + 128);
  uint64_t v6 = (double *)(a1 + 608);
  double v8 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 176), *(double *)(a1 + 184), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  *(unsigned char *)(a1 + 840) = 0;
  double v9 = *(double *)(a2 + 192);
  if (v9 > 179.0) {
    *(unsigned char *)(a1 + 840) = 1;
  }
  double v10 = *(double *)(a2 + 104);
  if (v9 > 0.0 || v10 < 0.0)
  {
    double v12 = *(double *)(a2 + 192);
  }
  else
  {
    double v11 = *(double *)(a2 + 96);
    if (v11 >= 0.0)
    {
      double v12 = 1.0;
      if (v11 <= 15.0)
      {
        double v12 = 4.0;
        if (v11 <= 10.0)
        {
          double v12 = 10.0;
          if (v11 <= 8.0)
          {
            double v12 = 15.0;
            if (v11 <= 5.0)
            {
              if (v11 <= 3.0)
              {
                double v12 = 25.0;
                if (v11 <= 2.5) {
                  double v12 = dbl_190882100[v11 > 1.0];
                }
              }
              else
              {
                double v12 = 19.9;
              }
            }
          }
        }
      }
    }
    else
    {
      double v12 = 180.0;
    }
    *(double *)(a2 + 192) = v12;
  }
  double v13 = vabdd_f64(v4, v5);
  if (v10 < 0.0 && v12 > 0.0 && *(double *)(a2 + 96) < 0.001 && v13 < 2.2)
  {
    double v14 = *(double *)(a1 + 224);
    if (v14 >= 0.0)
    {
      double v15 = *(double *)(a1 + 312);
      if (v15 > 0.0 && v15 < 90.0)
      {
        *(double *)(a2 + 104) = v14;
        double v10 = v14;
      }
    }
  }
  if (v10 >= 0.0 && v9 > 179.0)
  {
    if (*(unsigned char *)(a1 + 652))
    {
      double v10 = *(double *)(a1 + 424);
      *(double *)(a2 + 104) = v10;
      double v12 = 29.9;
    }
    else if (v13 >= 2.2 {
           || (double v10 = *(double *)(a1 + 224), v10 < 0.0)
    }
           || (double v94 = *(double *)(a1 + 312), v94 <= 0.0)
           || v94 >= 90.0)
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000;
      double v12 = -1.0;
      double v10 = -1.0;
    }
    else
    {
      *(double *)(a2 + 104) = v10;
      if (v94 >= 29.9) {
        double v12 = v94;
      }
      else {
        double v12 = 29.9;
      }
    }
    *(double *)(a2 + 192) = v12;
    *(double *)(a1 + 848) = v10;
    *(double *)(a1 + 856) = v12;
  }
  double v16 = *(double *)(a2 + 96);
  double v17 = 12.0;
  if (v12 < 12.0 && (v12 > 0.0 ? (_NF = v16 < 2.0) : (_NF = 0), _NF)
    || ((v17 = 6.5, v12 > 0.0) ? (BOOL v19 = v12 < 6.5) : (BOOL v19 = 0), v19))
  {
    *(double *)(a2 + 192) = v17;
    double v12 = v17;
  }
  double v20 = v4 - v5;
  if (v10 >= 0.0 && v12 > 0.0 && v12 < 30.0)
  {
    double v36 = *(double *)(a1 + 224);
    if (v36 >= 0.0 && v20 != 0.0)
    {
      double v37 = fmod(v10 - v36, 360.0);
      if (v37 < 0.0) {
        double v37 = v37 + 360.0;
      }
      if (v37 > 180.0) {
        double v37 = v37 + -360.0;
      }
      if (fabs(v37 / v20) > 45.0)
      {
        *(void *)(a2 + 192) = 0x403E000000000000;
        double v12 = 30.0;
      }
    }
  }
  float v21 = v8;
  if (!*(unsigned char *)(a1 + 776))
  {
    if (*(unsigned char *)(a1 + 384))
    {
      if (v20 != 0.0 && v13 < 1.4 && v10 >= 0.0 && v16 < 5.0 && v21 < 5.0)
      {
        double v39 = *(double *)(a1 + 224);
        if (v39 >= 0.0)
        {
          double v40 = *(double *)(a1 + 312);
          if (v40 > 0.0 && v40 <= 29.9)
          {
            double v41 = fmod(v10 - v39, 360.0);
            if (v41 < 0.0) {
              double v41 = v41 + 360.0;
            }
            if (v41 > 180.0) {
              double v41 = v41 + -360.0;
            }
            double v42 = fabs(v41 / v20);
            if (v42 > 135.0)
            {
              if (*(unsigned char *)(a1 + 96))
              {
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                }
                uint64_t v43 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v44 = *(void *)(a2 + 8);
                  uint64_t v45 = *(void *)(a1 + 224);
                  uint64_t v47 = *(void *)(a2 + 96);
                  uint64_t v46 = *(void *)(a2 + 104);
                  *(_DWORD *)__n128 buf = 134350080;
                  *(void *)&uint8_t buf[4] = v44;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = v46;
                  *(_WORD *)&unsigned char buf[22] = 2050;
                  *(void *)&unsigned char buf[24] = v45;
                  __int16 v126 = 2050;
                  uint64_t v127 = v47;
                  __int16 v128 = 2050;
                  double v129 = v42;
                  _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1lf,fabsCourseRate,%{public}.1lf", buf, 0x34u);
                }
                uint64_t v7 = sub_1906CB57C(115, 2);
                if (v7)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                  }
                  uint64_t v110 = *(void *)(a2 + 8);
                  uint64_t v111 = *(void *)(a1 + 224);
                  uint64_t v113 = *(void *)(a2 + 96);
                  uint64_t v112 = *(void *)(a2 + 104);
                  *(_DWORD *)unint64_t v116 = 134350080;
                  *(void *)&v116[4] = v110;
                  *(_WORD *)&v116[12] = 2050;
                  *(void *)&v116[14] = v112;
                  *(_WORD *)&v116[22] = 2050;
                  *(void *)&v116[24] = v111;
                  __int16 v117 = 2050;
                  uint64_t v118 = v113;
                  __int16 v119 = 2050;
                  double v120 = v42;
                  int v114 = (char *)_os_log_send_and_compose_impl();
                  uint64_t v7 = sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v114);
                  if (v114 != buf) {
                    free(v114);
                  }
                }
              }
              double v10 = *(double *)(a1 + 224);
              *(double *)(a2 + 104) = v10;
              double v12 = *(double *)(a1 + 312);
              *(double *)(a2 + 192) = v12;
              *(double *)(a1 + 848) = v10;
              *(double *)(a1 + 856) = v12;
            }
          }
        }
      }
    }
  }
  if (v10 < 0.0) {
    goto LABEL_47;
  }
  double v38 = *(double *)(a2 + 96);
  if (v12 <= 0.0 || v12 >= 20.0 || v38 <= 5.0)
  {
    double v48 = *(double *)(a1 + 736);
    if (v48 >= 0.0)
    {
      double v49 = fmod(v10 - v48, 360.0);
      if (v49 < 0.0) {
        double v49 = v49 + 360.0;
      }
      if (v49 > 180.0) {
        double v49 = v49 + -360.0;
      }
      if (fabs(v49) < 30.0 && v38 < 5.0)
      {
        double v90 = *(double *)(a1 + 744);
        if (v90 < v12) {
          *(double *)(a2 + 192) = v90;
        }
      }
      else
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 736) = _Q0;
      }
    }
  }
  else
  {
    *(double *)(a1 + 736) = v10;
    *(double *)(a1 + 744) = v12;
  }
  double v91 = *(double *)(a1 + 224);
  if (v91 < 0.0 || vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 128)) >= 2.2)
  {
LABEL_47:
    *(unsigned char *)(a1 + 752) = 0;
    goto LABEL_48;
  }
  double v92 = fmod(v10 - v91, 360.0);
  if (v92 < 0.0) {
    double v92 = v92 + 360.0;
  }
  if (v92 > 180.0) {
    double v92 = v92 + -360.0;
  }
  double v93 = fabs(v92);
  if (*(unsigned char *)(a1 + 752))
  {
    if (v93 >= 8.0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v93 > 14.0) {
    *(unsigned char *)(a1 + 752) = 1;
  }
LABEL_48:
  if (!*(unsigned char *)(a1 + 652) || v13 > 4.9)
  {
    *(_WORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 780) = 0;
    *(unsigned char *)(a1 + 784) = 0;
    *(void *)(a1 + 800) = 0;
    *(void *)(a1 + 792) = 0;
    *(unsigned char *)(a1 + 808) = 0;
    return;
  }
  float v22 = sub_19079877C(v7, *(_DWORD *)(a1 + 780), *(unsigned __int8 *)(a1 + 777));
  if (v22 >= 11.1000001) {
    float v23 = v22;
  }
  else {
    float v23 = 11.1;
  }
  *(void *)__n128 buf = 0;
  *(void *)unint64_t v116 = 0;
  sub_1906DA778(v6, (double *)v116, (double *)buf, &v115, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  double v24 = *(double *)(a1 + 424);
  float v25 = *(double *)v116 * *(double *)v116 + *(double *)buf * *(double *)buf;
  float v26 = sqrtf(v25);
  float v27 = *(double *)buf;
  float v28 = *(double *)v116;
  float v29 = atan2f(v27, v28);
  float v30 = v24 * -0.0174532925;
  float v31 = sinf(v29 + v30) * v26;
  float v32 = fabsf(v31);
  float v33 = (float)(v23 * 0.5) + 7.5;
  if (*(unsigned char *)(a1 + 777) && v32 < v33) {
    goto LABEL_110;
  }
  int v34 = *(_DWORD *)(a1 + 760);
  if (v34 == 1)
  {
    BOOL v35 = v31 <= (float)-v33;
    float v33 = 7.5;
  }
  else
  {
    if (v34 != 2) {
      goto LABEL_109;
    }
    BOOL v35 = v31 <= -7.5;
  }
  if (!v35 && v31 < v33) {
    goto LABEL_110;
  }
LABEL_109:
  if (v32 < (float)((float)(v23 * 0.5) * 0.5))
  {
LABEL_110:
    int v55 = 1;
    goto LABEL_111;
  }
  int v55 = 0;
LABEL_111:
  double v56 = *(double *)(a2 + 104);
  double v57 = 0.0;
  if (v56 >= 0.0)
  {
    double v58 = fmod(v56 - v24, 360.0);
    if (v58 < 0.0) {
      double v58 = v58 + 360.0;
    }
    if (v58 > 180.0) {
      double v58 = v58 + -360.0;
    }
    double v57 = fabs(v58);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    __int16 v59 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v60 = *(void *)(a2 + 192);
      uint64_t v61 = *(void *)(a1 + 424);
      uint64_t v63 = *(void *)(a2 + 96);
      uint64_t v62 = *(void *)(a2 + 104);
      *(_DWORD *)__n128 buf = 134350592;
      *(void *)&uint8_t buf[4] = v62;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v60;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v61;
      __int16 v126 = 2050;
      uint64_t v127 = v63;
      __int16 v128 = 2050;
      double v129 = v31;
      __int16 v130 = 1026;
      int v131 = v55;
      __int16 v132 = 2050;
      double v133 = v23;
      _os_log_impl(&dword_1906B8000, v59, OS_LOG_TYPE_DEBUG, "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,%{public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf", buf, 0x44u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      uint64_t v95 = *(void *)(a2 + 192);
      uint64_t v96 = *(void *)(a1 + 424);
      uint64_t v98 = *(void *)(a2 + 96);
      uint64_t v97 = *(void *)(a2 + 104);
      *(_DWORD *)unint64_t v116 = 134350592;
      *(void *)&v116[4] = v97;
      *(_WORD *)&v116[12] = 2050;
      *(void *)&v116[14] = v95;
      *(_WORD *)&v116[22] = 2050;
      *(void *)&v116[24] = v96;
      __int16 v117 = 2050;
      uint64_t v118 = v98;
      __int16 v119 = 2050;
      double v120 = v31;
      __int16 v121 = 1026;
      int v122 = v55;
      __int16 v123 = 2050;
      double v124 = v23;
      uint64_t v99 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v99);
      if (v99 != buf) {
        free(v99);
      }
    }
  }
  if (*(unsigned char *)(a2 + 228))
  {
    int v64 = 1;
  }
  else
  {
    double v65 = *(double *)(a2 + 96);
    int v64 = v65 >= 0.0 && v65 < 0.35;
  }
  int v66 = sub_190795894();
  double v67 = *(double *)(a2 + 96);
  if (v66 && *(double *)(a2 + 184) > 0.0 && v67 >= 0.0 && v64 && v67 < 0.002)
  {
    BOOL v69 = v13 >= 1.1 || *(unsigned char *)(a2 + 228) != 0;
    int v64 = v21 <= 0.7 || v69;
  }
  if (v13 >= 3.0) {
    int v70 = (v57 > 135.0) & ~v64;
  }
  else {
    int v70 = 0;
  }
  if (v57 > 30.0) {
    int v71 = v55;
  }
  else {
    int v71 = 0;
  }
  if (v71 != 1
    || (v70 & 1) != 0
    || *(unsigned char *)(a2 + 229)
    || *(unsigned char *)(a1 + 816)
    || (double v72 = *(double *)(a1 + 824) - *(double *)(a1 + 832), v72 < 0.0)
    || v72 >= 30.0)
  {
    if (*(unsigned char *)(a1 + 776))
    {
      if (v67 > 3.0 || ((v55 | v64) ^ 1 | v70) == 1)
      {
        *(_WORD *)(a1 + 776) = 0;
        *(_DWORD *)(a1 + 780) = 0;
        *(unsigned char *)(a1 + 784) = 0;
        *(void *)(a1 + 800) = 0;
        *(void *)(a1 + 792) = 0;
        int v75 = 1;
        *(unsigned char *)(a1 + 808) = 0;
        goto LABEL_170;
      }
    }
    else
    {
      int v75 = 1;
      if (!v55 || v67 >= 1.5 && v21 >= 1.5)
      {
LABEL_170:
        if (*(double *)(a2 + 192) >= 30.0) {
          int v76 = v64;
        }
        else {
          int v76 = 0;
        }
        if (v76 == 1)
        {
          *(unsigned char *)(a1 + 776) = 1;
        }
        else
        {
          if (!*(unsigned char *)(a2 + 228)) {
            int v75 = 0;
          }
          if (v75 == 1)
          {
            double v77 = *(double *)(a2 + 96);
            if (v77 < 0.0 || v77 < 0.35)
            {
              if (*(unsigned char *)(a1 + 384))
              {
                if (v13 < 2.2 && v57 > 30.0)
                {
                  *(unsigned char *)(a1 + 776) = 1;
                  if (*(unsigned char *)(a1 + 96))
                  {
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                    }
                    uint64_t v78 = off_1E929F6C8;
                    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)__n128 buf = 134349056;
                      *(double *)&uint8_t buf[4] = v57;
                      _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                    }
                    if (sub_1906CB57C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                      }
                      *(_DWORD *)unint64_t v116 = 134349056;
                      *(double *)&v116[4] = v57;
                      uint64_t v108 = (char *)_os_log_send_and_compose_impl();
                      sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v108);
                      if (v108 != buf) {
                        free(v108);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (sub_190795894())
        {
          if (!*(unsigned char *)(a1 + 776) && v13 < 1.1 && *(double *)(a2 + 184) > 0.0)
          {
            double v79 = *(double *)(a2 + 96);
            if (v79 >= 0.0 && v79 < 5.0 && v21 < 5.0)
            {
              char v80 = *(double *)(a2 + 104) < 0.0 ? 1 : v70;
              if ((v80 & 1) == 0 && v57 >= 135.0)
              {
                if (*(unsigned char *)(a1 + 96))
                {
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                  }
                  __int16 v81 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)__n128 buf = 134349056;
                    *(double *)&uint8_t buf[4] = v57;
                    _os_log_impl(&dword_1906B8000, v81, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                    }
                    *(_DWORD *)unint64_t v116 = 134349056;
                    *(double *)&v116[4] = v57;
                    uint64_t v109 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v109);
                    if (v109 != buf) {
                      free(v109);
                    }
                  }
                }
                uint64_t v82 = *(void *)(a1 + 224);
                *(void *)(a2 + 104) = v82;
                uint64_t v83 = *(void *)(a1 + 312);
                *(void *)(a2 + 192) = v83;
                *(void *)(a1 + 848) = v82;
                *(void *)(a1 + 856) = v83;
              }
            }
          }
        }
        goto LABEL_208;
      }
      *(unsigned char *)(a1 + 776) = 1;
    }
    int v75 = 0;
    goto LABEL_170;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    int v73 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      double v74 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)__n128 buf = 134349056;
      *(double *)&uint8_t buf[4] = v74;
      _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      double v106 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)unint64_t v116 = 134349056;
      *(double *)&v116[4] = v106;
      uint64_t v107 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v107);
      if (v107 != buf) {
        free(v107);
      }
    }
  }
  *(unsigned char *)(a1 + 776) = 1;
LABEL_208:
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    int v84 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v85 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v86 = *(void *)(a2 + 96);
      *(_DWORD *)__n128 buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v85;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v86;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v21;
      _os_log_impl(&dword_1906B8000, v84, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf", buf, 0x1Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      int v100 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v101 = *(void *)(a2 + 96);
      *(_DWORD *)unint64_t v116 = 67240704;
      *(_DWORD *)&v116[4] = v100;
      *(_WORD *)&v116[8] = 2050;
      *(void *)&v116[10] = v101;
      *(_WORD *)&v116[18] = 2050;
      *(double *)&v116[20] = v21;
      uint64_t v102 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v102);
      if (v102 != buf) {
        free(v102);
      }
    }
  }
  if (*(unsigned char *)(a1 + 776))
  {
    *(unsigned char *)(a1 + 808) = *(double *)(a2 + 104) >= 0.0;
    *(double *)(a1 + 792) = v57;
    *(void *)(a1 + 800) = *(void *)(a2 + 192);
    *(void *)(a2 + 104) = *(void *)(a1 + 424);
    *(void *)(a2 + 192) = 0x403DE66666666666;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      uint64_t v87 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v88 = *(void *)(a2 + 104);
        uint64_t v89 = *(void *)(a2 + 192);
        *(_DWORD *)__n128 buf = 134349568;
        *(void *)&uint8_t buf[4] = v88;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v89;
        *(_WORD *)&unsigned char buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v57;
        _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
        }
        uint64_t v103 = *(void *)(a2 + 104);
        uint64_t v104 = *(void *)(a2 + 192);
        *(_DWORD *)unint64_t v116 = 134349568;
        *(void *)&v116[4] = v103;
        *(_WORD *)&v116[12] = 2050;
        *(void *)&v116[14] = v104;
        *(_WORD *)&v116[22] = 2050;
        *(double *)&v116[24] = v57;
        uint64_t v105 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v105);
        if (v105 != buf) {
          free(v105);
        }
      }
    }
  }
}

float sub_19079877C(uint64_t a1, unsigned int a2, int a3)
{
  float result = 1.0;
  if ((a2 & 0xFFFFFFFE) != 8)
  {
    float result = 7.4;
    if (a3) {
      float result = 5.55;
    }
    if (a2 <= 7)
    {
      double v4 = (float *)&unk_1908847D0;
      if (a3) {
        double v4 = (float *)&unk_1908847B0;
      }
      return v4[a2];
    }
  }
  return result;
}

uint64_t sub_1907987CC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  double v6 = fabs(*(double *)(a2 + 240));
  double v7 = *(double *)(a1 + 360);
  int v8 = (int)*(double *)(a2 + 232);
  if (v6 >= 25.0 && a3 == 0)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
LABEL_9:
        int v10 = 0;
        int v11 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      case 11:
      case 12:
LABEL_10:
        int v12 = 2;
        goto LABEL_12;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_7:
        int v12 = 3;
        goto LABEL_12;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_8:
        int v12 = 4;
        goto LABEL_12;
      default:
LABEL_11:
        int v12 = 10;
LABEL_12:
        int v10 = 1;
        int v11 = v12;
        break;
    }
  }
  else
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_9;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_12;
      case 14:
        goto LABEL_10;
      case 15:
      case 16:
        goto LABEL_7;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_8;
      default:
        goto LABEL_11;
    }
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    double v13 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)__n128 buf = 67240448;
      *(_DWORD *)int v85 = v14;
      *(_WORD *)&v85[4] = 1026;
      *(_DWORD *)&v85[6] = v14 + v11;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEBUG, "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      int v75 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v75);
      if (v75 != (char *)buf) {
        free(v75);
      }
    }
  }
  *(_DWORD *)(a1 + 648) = (*(_DWORD *)(a1 + 648) + v11) & ~((*(_DWORD *)(a1 + 648) + v11) >> 31);
  double v15 = *(double *)(a2 + 192);
  double v16 = *(double *)(a2 + 104);
  if (v15 <= 0.0 || v16 < 0.0)
  {
    if (v16 >= 0.0)
    {
      char v21 = 0;
      LOBYTE(v20) = 1;
    }
    else
    {
      LOBYTE(v20) = 0;
      char v21 = 0;
    }
    goto LABEL_41;
  }
  if (v15 >= 180.0)
  {
    LOBYTE(v20) = 0;
LABEL_40:
    char v21 = 1;
    goto LABEL_41;
  }
  double v17 = *(double *)(a2 + 96);
  if (v17 <= 0.0 && *(unsigned char *)(a2 + 228) != 0)
  {
LABEL_39:
    LOBYTE(v20) = 1;
    goto LABEL_40;
  }
  if (a3)
  {
    if (v6 <= 67.5) {
      goto LABEL_39;
    }
    if (v17 > 8.33333333 || v15 < 20.0) {
      int v20 = 6;
    }
    else {
      int v20 = 4;
    }
    goto LABEL_183;
  }
  if (v15 >= 20.0 && v17 <= 8.33333333) {
    goto LABEL_123;
  }
  if (v6 <= 67.5)
  {
    if (v6 > 45.0)
    {
LABEL_179:
      int v20 = 6;
      goto LABEL_183;
    }
    if (v6 > 30.0)
    {
LABEL_182:
      int v20 = 2;
      goto LABEL_183;
    }
    if (v6 > 20.0)
    {
      int v20 = 1;
      goto LABEL_183;
    }
LABEL_123:
    if (v6 <= 67.5)
    {
      if (v6 <= 45.0)
      {
        int v20 = 1;
        char v21 = 1;
        if (v6 <= 30.0) {
          goto LABEL_41;
        }
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    goto LABEL_179;
  }
  int v20 = 18;
LABEL_183:
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    int v73 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v74 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)__n128 buf = 67240448;
      *(_DWORD *)int v85 = v74;
      *(_WORD *)&v85[4] = 1026;
      *(_DWORD *)&v85[6] = v74 + v20;
      _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      double v79 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v79);
      if (v79 != (char *)buf) {
        free(v79);
      }
    }
  }
  *(_DWORD *)(a1 + 648) += v20;
  LOBYTE(v20) = 1;
  char v21 = 1;
  int v10 = 1;
LABEL_41:
  double v22 = *(double *)(a2 + 80);
  double v23 = *(double *)(a2 + 200);
  if (v23 > 0.0)
  {
    double v24 = *(double *)(a2 + 208);
    if (v24 > 0.0) {
      double v22 = sqrt(v24 / 2.45 * (v24 / 2.45) + v23 / 2.45 * (v23 / 2.45));
    }
  }
  if (v22 >= 10.0) {
    double v25 = v22;
  }
  else {
    double v25 = 10.0;
  }
  if (!v10 && v25 < 50.0)
  {
    if (fabs(*(double *)(a2 + 256)) <= 75.0 && fabs(*(double *)(a2 + 248)) <= 150.0)
    {
      int v10 = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
        }
        float v26 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          int v27 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)__n128 buf = 67240448;
          *(_DWORD *)int v85 = v27;
          *(_WORD *)&v85[4] = 1026;
          *(_DWORD *)&v85[6] = v27 + 1;
          _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
          }
          double v77 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v77);
          if (v77 != (char *)buf) {
            free(v77);
          }
        }
      }
      ++*(_DWORD *)(a1 + 648);
      int v10 = 1;
    }
  }
  float v28 = (_OWORD *)(a1 + 120);
  double v29 = *(double *)(a1 + 128);
  double v30 = *(double *)(a2 + 8) - v29;
  if (v29 == 0.0) {
    double v30 = 0.0;
  }
  if (v30 >= 0.0) {
    double v31 = v30;
  }
  else {
    double v31 = 0.0;
  }
  if (v31 <= 4.9)
  {
    if (v31 <= 75.0) {
      goto LABEL_69;
    }
  }
  else if (v31 <= 75.0 && *(unsigned char *)(a2 + 228) != 0)
  {
LABEL_69:
    double v33 = 10000.0;
    if (*(unsigned char *)(a1 + 384) && *(unsigned char *)(a1 + 481))
    {
      if (*(unsigned char *)(a2 + 361)) {
        int v34 = a3;
      }
      else {
        int v34 = 1;
      }
      if (v34) {
        double v33 = 10000.0;
      }
      else {
        double v33 = 40000.0;
      }
    }
    double v35 = *(double *)(a2 + 256) * *(double *)(a2 + 256) + *(double *)(a2 + 248) * *(double *)(a2 + 248);
    if (v35 > v33)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
        }
        double v36 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__n128 buf = 134349312;
          *(void *)int v85 = sqrt(v33);
          *(_WORD *)&v85[8] = 1026;
          *(_DWORD *)&unsigned char v85[10] = a3;
          _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x12u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
          }
          uint64_t v78 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v78);
          if (v78 != (char *)buf) {
            free(v78);
          }
        }
      }
      char v37 = 0;
      double v38 = (char *)(a1 + 652);
      *(unsigned char *)(a1 + 652) = 0;
      goto LABEL_167;
    }
    double v47 = fabs(v7);
    double v38 = (char *)(a1 + 652);
    if (*(unsigned char *)(a1 + 652))
    {
      double v48 = *(double *)(a2 + 232);
      if (!*(unsigned char *)(a1 + 384)) {
        goto LABEL_109;
      }
      if (v48 > 13.0)
      {
        double v49 = *(double *)(a1 + 216);
        double v50 = v49 <= 0.0 ? *(double *)(a2 + 96) : (v49 + *(double *)(a2 + 96)) * 0.5;
        if (sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 272), *(double *)(a1 + 280), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 72))- v31 * v50 > 100.0)
        {
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
            }
            __int16 v51 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              int v52 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)__n128 buf = 67240448;
              *(_DWORD *)int v85 = v52;
              *(_WORD *)&v85[4] = 2050;
              *(double *)&v85[6] = (double)v52 + 18.0;
              _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f", buf, 0x12u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
              }
              __int16 v81 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v81);
              if (v81 != (char *)buf) {
                free(v81);
              }
            }
          }
          *(_DWORD *)(a1 + 648) += 18;
          int v10 = 1;
        }
      }
      if (*v38)
      {
        double v48 = *(double *)(a2 + 232);
LABEL_109:
        if (v48 <= 70.0)
        {
          if (*(int *)(a1 + 648) < 18)
          {
            if (!*(unsigned char *)(a2 + 265) || (double v61 = v22 * 3.5, fabs(*(double *)(a2 + 256)) <= v61))
            {
              if (!v10 && v48 < 6.5)
              {
                *(_DWORD *)(a1 + 648) = 0;
                if (*(unsigned char *)(a1 + 96))
                {
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                  }
                  int v71 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    int v72 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)__n128 buf = 67240192;
                    *(_DWORD *)int v85 = v72;
                    _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_DEBUG, "CLMM,reseting offRoadCount,%{public}d", buf, 8u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
                    }
                    uint64_t v82 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v82);
                    if (v82 != (char *)buf) {
                      free(v82);
                    }
                  }
                }
                LOBYTE(v10) = 0;
              }
              goto LABEL_160;
            }
            if (!*(unsigned char *)(a1 + 96)) {
              goto LABEL_159;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
            }
            uint64_t v62 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v63 = *(void *)(a2 + 256);
              *(_DWORD *)__n128 buf = 134349312;
              *(void *)int v85 = v63;
              *(_WORD *)&v85[8] = 2050;
              *(double *)&unsigned char v85[10] = v61;
              _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf", buf, 0x16u);
            }
            if (!sub_1906CB57C(115, 2))
            {
LABEL_159:
              *double v38 = 0;
LABEL_160:
              if (*(unsigned char *)(a1 + 841))
              {
                char v37 = *v38;
                if (*v38 && !*(unsigned char *)(a2 + 265) && fabs(*(double *)(a2 + 256)) <= 10.0) {
                  char v37 = 1;
                }
                else {
                  *(unsigned char *)(a1 + 841) = 0;
                }
              }
              else
              {
                *(unsigned char *)(a1 + 841) = sub_190799E68(a1, a2, v20, v21, v10, v35, 400.0, 0.5, v25, v6, v47);
                char v37 = *(unsigned char *)(a1 + 652);
              }
LABEL_167:
              long long v64 = *(_OWORD *)a2;
              long long v65 = *(_OWORD *)(a2 + 16);
              long long v66 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 168) = v66;
              _OWORD *v28 = v64;
              *(_OWORD *)(a1 + 136) = v65;
              long long v67 = *(_OWORD *)(a2 + 64);
              long long v68 = *(_OWORD *)(a2 + 80);
              long long v69 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 232) = v69;
              *(_OWORD *)(a1 + 184) = v67;
              *(_OWORD *)(a1 + 200) = v68;
              std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
              memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
              *(unsigned char *)(a1 + 384) = v37;
              return *v38;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 == -1)
            {
LABEL_225:
              uint64_t v83 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v83);
              if (v83 != (char *)buf) {
                free(v83);
              }
              goto LABEL_159;
            }
          }
          else
          {
            if (!*(unsigned char *)(a1 + 96)) {
              goto LABEL_159;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
            }
            double v56 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              int v57 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)__n128 buf = 67240448;
              *(_DWORD *)int v85 = v57;
              *(_WORD *)&v85[4] = 2050;
              *(void *)&v85[6] = 0x4032000000000000;
              _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f", buf, 0x12u);
            }
            if (!sub_1906CB57C(115, 2)) {
              goto LABEL_159;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 == -1) {
              goto LABEL_225;
            }
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 96)) {
            goto LABEL_159;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
          }
          __int16 v53 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v54 = *(void *)(a2 + 232);
            *(_DWORD *)__n128 buf = 134349312;
            *(void *)int v85 = v54;
            *(_WORD *)&v85[8] = 2050;
            *(void *)&unsigned char v85[10] = 0x4051800000000000;
            _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x16u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_159;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_225;
          }
        }
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
        goto LABEL_225;
      }
    }
    if (*(unsigned char *)(a2 + 348))
    {
      double v55 = 7.5;
      if (v22 <= 7.5) {
        goto LABEL_140;
      }
    }
    else
    {
      double v55 = 35.0;
      double v58 = 1225.0;
      if (v25 >= 30.0 || *(unsigned char *)(a1 + 600))
      {
LABEL_141:
        BOOL v59 = sub_190799E68(a1, a2, v20, v21, v10, v35, v58, v55, v25, v6, v47);
        *(unsigned char *)(a1 + 652) = v59;
        if (v59)
        {
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
            }
            uint64_t v60 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)__n128 buf = 0;
              _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_DEBUG, "CLMM,startSnapping", buf, 2u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
              }
              char v80 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v80);
              if (v80 != (char *)buf) {
                free(v80);
              }
            }
          }
          *(_DWORD *)(a1 + 648) = 0;
        }
        goto LABEL_160;
      }
      if (v22 <= 7.5)
      {
        double v55 = 13.5;
        goto LABEL_140;
      }
    }
    double v55 = 20.0;
LABEL_140:
    double v58 = 400.0;
    goto LABEL_141;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    double v39 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v40 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)__n128 buf = 134349824;
      *(double *)int v85 = v31;
      *(_WORD *)&v85[8] = 2050;
      *(void *)&unsigned char v85[10] = 0x401399999999999ALL;
      __int16 v86 = 2050;
      uint64_t v87 = 0x4052C00000000000;
      __int16 v88 = 1026;
      int v89 = v40;
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d", buf, 0x26u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      int v76 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v76);
      if (v76 != (char *)buf) {
        free(v76);
      }
    }
  }
  double v38 = (char *)(a1 + 652);
  *(unsigned char *)(a1 + 652) = 0;
  long long v41 = *(_OWORD *)a2;
  long long v42 = *(_OWORD *)(a2 + 16);
  long long v43 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 168) = v43;
  _OWORD *v28 = v41;
  *(_OWORD *)(a1 + 136) = v42;
  long long v44 = *(_OWORD *)(a2 + 64);
  long long v45 = *(_OWORD *)(a2 + 80);
  long long v46 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 232) = v46;
  *(_OWORD *)(a1 + 184) = v44;
  *(_OWORD *)(a1 + 200) = v45;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
  *(unsigned char *)(a1 + 384) = 0;
  return *v38;
}

BOOL sub_190799E68(uint64_t a1, uint64_t a2, char a3, char a4, unsigned __int8 a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  if (a5 | *(unsigned __int8 *)(a2 + 265)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 385) || a6 >= a7) {
    return 0;
  }
  BOOL result = 0;
  if (fabs(*(double *)(a2 + 256)) < a8 && a9 < 101.0)
  {
    double v14 = *(double *)(a2 + 232);
    if (v14 < 3.0)
    {
      BOOL result = 0;
      double v15 = *(double *)(a1 + 352);
      if (v15 >= 3.0) {
        return result;
      }
      if (*(double *)(a2 + 96) <= 1.67) {
        return result;
      }
      BOOL result = 0;
      if (*(double *)(a1 + 216) <= 1.67) {
        return result;
      }
      if (*(double *)(a2 + 104) < 0.0) {
        return result;
      }
      BOOL result = 0;
      if (*(double *)(a1 + 224) < 0.0 || a10 >= 30.0 || a11 >= 30.0) {
        return result;
      }
      if (!a3 || !a4 || *(double *)(a2 + 192) >= 20.0)
      {
        float v16 = *(float *)(a2 + 180);
        float v17 = 3.0;
LABEL_23:
        if (v16 > v17) {
          return 1;
        }
        BOOL result = 0;
        if (v14 < 1.0 && v15 < 1.0) {
          return v16 > 1.1 || v16 == 0.0;
        }
        return result;
      }
      if (a10 < 40.0)
      {
        float v16 = *(float *)(a2 + 180);
        float v17 = 2.5;
        goto LABEL_23;
      }
    }
    return 0;
  }
  return result;
}

void sub_190799FB8(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8, char a9)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(void *)a8 = 0;
  *(void *)(a8 + 16) = 0;
  float v16 = (double *)(a8 + 40);
  float v17 = (double *)(a8 + 32);
  uint64_t v18 = sub_1906DA778((double *)(a1 + 608), (double *)(a8 + 40), (double *)(a8 + 32), (double *)(a8 + 48), *((double *)a3 + 4), *((double *)a3 + 5), a4[9], a4[7], a4[8], a4[9]);
  if (!*a3)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
    }
    BOOL v19 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLMM, NULL road", buf, 2u);
    }
    uint64_t v18 = sub_1906CB57C(115, 2);
    if (v18)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005980);
      }
      double v47 = (char *)_os_log_send_and_compose_impl();
      uint64_t v18 = sub_1906D4A28("Generic", 1, 0, 2, "void CLScoredMapMatcher::calculateScoreAndVarFactor(CLMapDataUtil::CovarInvDet &, const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, CLMapDataUtil::MapMatcherScore &, BOOL)", "CoreLocation: %s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
  }
  double v20 = *(double *)a3;
  float v21 = *((float *)a3 + 6);
  double v22 = *v16;
  double v23 = *v17;
  if (*v16 == 0.0 && v23 == 0.0)
  {
    *a5 = 0.0;
    double v24 = 0.0;
    goto LABEL_32;
  }
  if (a9) {
    float v25 = 80.0;
  }
  else {
    float v25 = sub_19079877C(v18, *(_DWORD *)(*(void *)&v20 + 20), *(unsigned __int8 *)(*(void *)&v20 + 16));
  }
  float v26 = v22 * v22 + v23 * v23;
  float v27 = sqrtf(v26);
  float v28 = v23;
  float v29 = v22;
  float v30 = atan2f(v28, v29);
  float v31 = v21 * 0.0174532925;
  __float2 v32 = __sincosf_stret(v30 - v31);
  float v33 = v27 * v32.__cosval;
  float v34 = v27 * v32.__sinval;
  if (*(unsigned char *)(a1 + 753))
  {
    float v35 = v25 * 0.5;
    float v36 = fabsf(v34);
    if (*(unsigned char *)(*(void *)&v20 + 16))
    {
      if (v36 < v35) {
        goto LABEL_16;
      }
      float v42 = -v35;
      if (v34 < 0.0) {
        float v42 = v25 * 0.5;
      }
      goto LABEL_29;
    }
    double v39 = *(double *)(a1 + 768);
    double v40 = a4[1];
    if (v39 == 0.0 || vabdd_f64(v40, v39) > 120.0)
    {
      int v41 = sub_1907BA824(a4[7], a4[8]);
      *(_DWORD *)(a1 + 760) = v41;
      *(double *)(a1 + 768) = v40;
      if (v41) {
        goto LABEL_23;
      }
    }
    else
    {
      int v41 = *(_DWORD *)(a1 + 760);
      if (v41)
      {
LABEL_23:
        if (v41 != 2 || v34 <= 0.0)
        {
          if (v34 >= 0.0) {
            goto LABEL_30;
          }
          if (v36 >= v35)
          {
            *a7 = v35;
            float v34 = v35 + v34;
            goto LABEL_30;
          }
          double v38 = v36;
          goto LABEL_19;
        }
        if (v34 >= v35)
        {
          *a7 = (float)-v35;
          float v34 = v34 - v35;
          goto LABEL_30;
        }
        float v37 = -v36;
LABEL_18:
        double v38 = v37;
LABEL_19:
        *a7 = v38;
        float v34 = 0.0;
LABEL_30:
        float v43 = sqrtf((float)(v33 * v33) + (float)(v34 * v34));
        float v44 = atan2f(v34, v33);
        __float2 v45 = __sincosf_stret(v44 + v31);
        double *v16 = (float)(v43 * v45.__cosval);
        double *v17 = (float)(v43 * v45.__sinval);
        goto LABEL_31;
      }
    }
    float v42 = v25 * 0.25;
    if (v36 < (float)(v25 * 0.25))
    {
LABEL_16:
      float v37 = -v36;
      if (v34 < 0.0) {
        float v37 = v36;
      }
      goto LABEL_18;
    }
    if (v34 >= 0.0) {
      float v42 = -v42;
    }
LABEL_29:
    *a7 = v42;
    float v34 = v34 + v42;
    goto LABEL_30;
  }
LABEL_31:
  *a5 = v33;
  double v24 = v34;
LABEL_32:
  *a6 = v24;
  if (*(unsigned char *)(a2 + 40))
  {
    double v46 = fmod(a4[13] - v21, 360.0);
    if (v46 < 0.0) {
      double v46 = v46 + 360.0;
    }
    if (v46 > 180.0) {
      double v46 = v46 + -360.0;
    }
    *(double *)(a8 + 56) = fabs(v46);
  }
  sub_190802DC4(a2, a8);
}

uint64_t sub_19079A438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  double v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(unsigned __int8 *)(a2 + 229);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 816) != v6 || *(double *)(a1 + 832) == 0.0)
  {
    *(void *)(a1 + 832) = v7;
    *(unsigned char *)(a1 + 816) = v6;
  }
  *(void *)(a1 + 824) = v7;
  ++*(_DWORD *)(a1 + 100);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 48))(v4, a2, 450.0);
  uint64_t v54 = (uint64_t)&v54;
  double v55 = &v54;
  uint64_t v56 = 0;
  uint64_t v50 = (void *)(a1 + 552);
  if (!*(void *)(a1 + 552)
    || (double v8 = *(double *)(a2 + 8) - *(double *)(a1 + 592), v8 > 5.0)
    || ((*(uint64_t (**)(uint64_t, uint64_t *, void *, void, uint64_t, double, double))(*(void *)v4 + 72))(v4, &v54, v50, *(unsigned __int8 *)(a1 + 568), 1, *(double *)(a1 + 576), v8 * ((*(double *)(a2 + 96) + *(double *)(a1 + 584)) * 0.5)) & 1) != 0)
  {
    sub_190797308(a1, a2);
    uint64_t v49 = a1 + 656;
    sub_190802558(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
    v9.n128_u64[0] = *(void *)(a2 + 80);
    double v10 = *(double *)(a2 + 200);
    if (v10 > 0.0)
    {
      double v11 = *(double *)(a2 + 208);
      if (v11 > 0.0) {
        v9.n128_f64[0] = sqrt(v11 / 2.45 * (v11 / 2.45) + v10 / 2.45 * (v10 / 2.45));
      }
    }
    double v12 = v9.n128_f64[0] * 4.0;
    v9.n128_u64[0] = 0x4052C00000000000;
    if (v12 >= 75.0)
    {
      v9.n128_f64[0] = v12;
      if (v12 > 249.9999) {
        v9.n128_u64[0] = 0x406F3FFF2E48E8A7;
      }
    }
    uint64_t v51 = (uint64_t)&v51;
    int v52 = &v51;
    uint64_t v53 = 0;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(void *)v4 + 64))(v4, &v51, a2, 1, v9);
    uint64_t v14 = v13;
    if ((v13 & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_84;
    }
    uint64_t v48 = a2;
    double v15 = v52;
    if (v52 == &v51) {
      goto LABEL_81;
    }
    unsigned int v47 = v13;
    char v16 = 0;
    int v17 = 0;
    char v18 = 0;
    int v19 = 0;
    double v20 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
    double v23 = &v51;
    while (*(unsigned char *)(v15[2] + 17))
    {
LABEL_64:
      double v15 = (uint64_t *)v15[1];
      if (v15 == &v51)
      {
        uint64_t v14 = v47;
        if (v23 != &v51)
        {
          sub_19081179C(v48, v23 + 2);
          double v37 = v22 * 500.0;
          if (v18) {
            double v37 = v22;
          }
          double v38 = v21 * 500.0;
          if (v19) {
            double v38 = v21;
          }
          if ((v16 & 1) == 0) {
            double v37 = v37 * 10.0;
          }
          if ((v17 & 1) == 0) {
            double v38 = v38 * 10.0;
          }
          float v39 = v37 / v20;
          float v40 = v37 / v38;
          *(float *)(v48 + 176) = v39;
          *(float *)(v48 + 180) = v40;
          uint64_t v42 = v23[2];
          uint64_t v41 = v23[3];
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 552) = v42;
          float v43 = *(std::__shared_weak_count **)(a1 + 560);
          *(void *)(a1 + 560) = v41;
          if (v43) {
            sub_1906BFE48(v43);
          }
          *(unsigned char *)(a1 + 568) = *((unsigned char *)v23 + 36);
          *(void *)(a1 + 576) = v23[8];
          *(void *)(a1 + 584) = *(void *)(v48 + 96);
          *(void *)(a1 + 592) = *(void *)(v48 + 8);
          uint64_t v65 = 0;
          v66[0] = 0.0;
          uint64_t v64 = 0;
          double v57 = 0.0;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          uint64_t v60 = 0x3FF0000000000000;
          long long v61 = 0u;
          long long v62 = 0u;
          int v63 = 0;
          sub_190799FB8(a1, v49, v23 + 2, (double *)v48, v66, (double *)&v65, (double *)&v64, (uint64_t)&v57, 0);
          *(_OWORD *)(v48 + 288) = *(_OWORD *)(v48 + 152);
          *(void *)(v48 + 304) = *(void *)(v48 + 168);
          char v44 = sub_1907987CC(a1, v48, 0);
          *(unsigned char *)(v48 + 264) = v44;
          if (v44)
          {
LABEL_84:
            sub_190770ADC(&v51);
            goto LABEL_85;
          }
LABEL_83:
          ++*(_DWORD *)(a1 + 104);
          goto LABEL_84;
        }
LABEL_81:
        *(_OWORD *)(v48 + 152) = *(_OWORD *)(v48 + 56);
        *(void *)(v48 + 168) = *(void *)(v48 + 104);
        __float2 v45 = *(std::__shared_weak_count **)(a1 + 560);
        *uint64_t v50 = 0;
        *(void *)(a1 + 560) = 0;
        if (v45) {
          sub_1906BFE48(v45);
        }
        goto LABEL_83;
      }
    }
    double v57 = 0.0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0x3FF0000000000000;
    long long v61 = 0u;
    long long v62 = 0u;
    int v63 = 0;
    sub_190799FB8(a1, v49, v15 + 2, (double *)v48, v66, (double *)&v65, (double *)&v64, (uint64_t)&v57, 0);
    double v24 = (void *)*v50;
    if (!*v50)
    {
      int v28 = 1;
      double v29 = v57;
      goto LABEL_33;
    }
    uint64_t v25 = *(void *)v15[2];
    if (*v24 == v25) {
      goto LABEL_30;
    }
    float v26 = v55;
    if (v55 == &v54) {
      goto LABEL_28;
    }
    char v27 = 0;
    do
    {
      if (v26[2] == v25 && *((unsigned __int8 *)v26 + 24) == *((unsigned __int8 *)v15 + 36)) {
        char v27 = 1;
      }
      float v26 = (uint64_t *)v26[1];
    }
    while (v26 != &v54);
    if (v27)
    {
LABEL_30:
      int v28 = 1;
      double v29 = v57;
      if (!*((unsigned char *)v15 + 37)) {
LABEL_31:
      }
        double v29 = v29 / 10.0;
    }
    else
    {
LABEL_28:
      int v28 = 0;
      double v29 = v57 / 500.0;
      if (!*((unsigned char *)v15 + 37)) {
        goto LABEL_31;
      }
    }
LABEL_33:
    double v20 = v20 + v57;
    if (*((unsigned char *)v15 + 37)) {
      BOOL v30 = 1;
    }
    else {
      BOOL v30 = v24 == 0;
    }
    int v31 = v30;
    if (v29 > v21) {
      int v32 = v28;
    }
    else {
      int v32 = v19;
    }
    if (v29 > v21) {
      double v33 = v29;
    }
    else {
      double v33 = v21;
    }
    if (v29 <= v21) {
      int v31 = v17;
    }
    if (*((unsigned char *)v15 + 37)) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = v24 == 0;
    }
    char v35 = v34;
    BOOL v36 = v29 <= v22;
    if (v29 <= v22) {
      int v19 = v32;
    }
    else {
      double v23 = v15;
    }
    if (v29 > v22) {
      double v21 = v22;
    }
    else {
      double v21 = v33;
    }
    if (v29 > v22)
    {
      double v22 = v29;
      char v18 = v28;
    }
    if (v36) {
      int v17 = v31;
    }
    else {
      char v16 = v35;
    }
    goto LABEL_64;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v14 = 0;
  ++*(_DWORD *)(a1 + 108);
LABEL_85:
  sub_19079AA88(&v54);
  if (v5) {
    sub_1906BFE48(v5);
  }
  return v14;
}

void sub_19079A9FC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_190770ADC((uint64_t *)va);
  sub_19079AA88((uint64_t *)va1);
  if (a3) {
    sub_1906BFE48(a3);
  }
  _Unwind_Resume(a1);
}

os_log_t sub_19079AA58()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_19079AA88(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    io_object_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        int v6 = (std::__shared_weak_count *)v3[5];
        if (v6) {
          sub_1906BFE48(v6);
        }
        operator delete(v3);
        io_object_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_19079AB00()
{
}

void sub_19079AC2C(void *a1)
{
}

void sub_19079AC38(_Unwind_Exception *a1)
{
}

void sub_19079AC6C(void *a1@<X8>)
{
  if (qword_1EB272510 != -1) {
    dispatch_once_f(&qword_1EB272510, 0, (dispatch_function_t)sub_19079AB00);
  }
  uint64_t v2 = *(void *)(qword_1EB272518 + 144);
  *a1 = *(void *)(qword_1EB272518 + 136);
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void *sub_19079ACE0(void *a1)
{
  *a1 = &unk_1EE004520;
  uint64_t v2 = (std::__shared_weak_count *)a1[18];
  if (v2) {
    sub_1906BFE48(v2);
  }

  return sub_190791860((uint64_t)a1);
}

void sub_19079AD40(void *a1)
{
  sub_19079ACE0(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_19079AD7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_19079ADB8(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE003578)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_19079B57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

uint64_t sub_19079B618(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdentityToken:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setStorageToken:0];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel_manageConnection);
}

void sub_19079B87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_19079B894(uint64_t a1)
{
  [*(id *)(a1 + 32) destroyConnection];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 tearDown];
}

void sub_19079BAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_19079BAC4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0059A0);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#serviceSession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0059A0);
      }
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#serviceSession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#serviceSession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_19073BF10("kCLConnectionMessageDestroyUponDisconnection", buf);
    int v6 = *(std::__shared_weak_count **)v8;
    if (*(void *)v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v8 + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v6) {
      sub_1906BFE48(v6);
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    if (*(void *)v8) {
      sub_1906BFE48(*(std::__shared_weak_count **)v8);
    }
  }
}

void sub_19079BCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19079BE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19079C224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a13) {
    sub_1906BFE48(a13);
  }
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19079C2B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    uint64_t v5 = Weak;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0059A0);
    }
    int v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      double v20 = v5;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#serviceSession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0059A0);
      }
    }
    double v8 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v9;
      __int16 v19 = 2050;
      double v20 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#serviceSession Default handler received message", "{\"msg%{public}.0s\":\"#serviceSession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    double v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 handleMessage:&v11];
    if (v12) {
      sub_1906BFE48(v12);
    }
  }
}

void sub_19079C4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19079C860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19079CAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, os_activity_scope_state_s state)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_19079CC1C@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x70uLL);
  os_log_t result = sub_19079CC80(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19079CC6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19079CC80(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_19079CCF4((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_19079CCE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19079CCF4(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1906D5C70(__p, __s);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19079CD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19079D7EC()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  qword_1EB272520 = (uint64_t)v0;

  return [v0 setDateFormat:@"yyyy,MM,dd,HH,mm,ss.SSS"];
}

os_log_t sub_19079DD94()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Gathering");
  qword_1E929F610 = (uint64_t)result;
  return result;
}

os_log_t sub_1907A0F90()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1E929F600 = (uint64_t)result;
  return result;
}

uint64_t sub_1907A15C4(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = xmmword_1908824F0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0xBFF0000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 87) = 0;
  if ([a2 timestamp])
  {
    objc_msgSend((id)objc_msgSend(a2, "timestamp"), "timeIntervalSinceReferenceDate");
    double v10 = v9;
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005A00);
    }
    uint64_t v11 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLGeoMapLocation,loc timestamp is unexpectedly nil,setting fiOSTime to -1.0", buf, 2u);
    }
    double v10 = -1.0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005A00);
      }
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLGeoMapLocation::CLGeoMapLocation(const CLTripSegmentLocation * _Nonnull)", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  *(double *)a1 = v10;
  [a2 latitude];
  *(void *)(a1 + 8) = v12;
  [a2 longitude];
  *(void *)(a1 + 16) = v13;
  [a2 course];
  *(void *)(a1 + 32) = v14;
  [a2 courseAccuracy];
  *(void *)(a1 + 40) = v15;
  [a2 speed];
  *(void *)(a1 + 48) = v16;
  [a2 speedAccuracy];
  *(void *)(a1 + 56) = v17;
  [a2 altitude];
  *(void *)(a1 + 64) = v18;
  [a2 altitudeAccuracy];
  *(void *)(a1 + 72) = v19;
  [a2 horizontalAccuracy];
  *(void *)(a1 + 24) = v20;
  *(_DWORD *)(a1 + 88) = [a2 locType];
  *(_DWORD *)(a1 + 96) = [a2 referenceFrame];
  *(unsigned char *)(a1 + 92) = [a2 isOriginalLocationType];
  *(unsigned char *)(a1 + 93) = [a2 isInertialIntegrated];
  *(unsigned char *)(a1 + 94) = [a2 isLinearInterpolated];
  *(_DWORD *)(a1 + 100) = [a2 signalEnvironmentType];
  return a1;
}

BOOL sub_1907A1874(uint64_t a1, void *a2)
{
  sub_19074C1F8((uint64_t *)(a1 + 40));
  if ([a2 count])
  {
    unint64_t v4 = 0;
    do
    {
      if (v4) {
        uint64_t v5 = [a2 objectAtIndexedSubscript:v4 - 1];
      }
      else {
        uint64_t v5 = 0;
      }
      sub_1907A1910(a1, v5, (void *)[a2 objectAtIndexedSubscript:v4++]);
    }
    while ([a2 count] > v4);
  }
  return *(void *)(a1 + 40) != *(void *)(a1 + 48);
}

BOOL sub_1907A1910(uint64_t a1, uint64_t a2, void *a3)
{
  double v9 = a3;
  if (a3)
  {
    sub_1907A2044(&v9, &v8);
    if (a2)
    {
      [v9 distanceFromLocation:a2];
      *(void *)(v8 + 80) = v6;
    }
    sub_1907A19B0((uint64_t *)(a1 + 40), &v8);
    if (*((void *)&v8 + 1)) {
      sub_1906BFE48(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  return a3 != 0;
}

void sub_1907A1998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1907A19B0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  os_log_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_19074C0B4((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    CFTypeRef v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_1907A217C(a1, v18);
    double v9 = (void *)a1[1];
    os_log_t result = sub_19074DC48(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    double v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1907A1AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1907A1ACC(uint64_t a1, uint64_t *a2, int a3, int a4, double a5, double a6)
{
  char v7 = *(long long **)(a1 + 40);
  for (uint64_t i = *(long long **)(a1 + 48); v7 != i; ++v7)
  {
    unint64_t v13 = *(double **)v7;
    if (*(void *)v7)
    {
      double v14 = *v13;
      if (*v13 > a6) {
        return *a2 != a2[1];
      }
      if (v14 > a5 || a3 != 0)
      {
        if (v14 >= a6 && a4 == 0) {
          return *a2 != a2[1];
        }
        if (v14 >= a5 && v14 <= a6) {
          sub_1907A19B0(a2, v7);
        }
      }
    }
  }
  return *a2 != a2[1];
}

void sub_1907A1B7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005A00);
  }
  unint64_t v4 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 120);
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *(void *)(a1 + 136);
    uint64_t v8 = *(void *)(a1 + 144);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 104);
    uint64_t v13 = *(void *)(a1 + 112);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    int v17 = *(unsigned __int8 *)(a1 + 64);
    int v18 = *(unsigned __int8 *)(a1 + 65);
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 88);
    int v22 = *(unsigned __int8 *)(a1 + 96);
    if (*((char *)a2 + 23) >= 0) {
      double v23 = a2;
    }
    else {
      double v23 = (uint64_t *)*a2;
    }
    *(_DWORD *)__n128 buf = 134353667;
    uint64_t v26 = v9;
    __int16 v27 = 1026;
    int v28 = v5;
    __int16 v29 = 2049;
    uint64_t v30 = v6;
    __int16 v31 = 2049;
    uint64_t v32 = v7;
    __int16 v33 = 2050;
    uint64_t v34 = v8;
    __int16 v35 = 2050;
    uint64_t v36 = v14;
    __int16 v37 = 2049;
    uint64_t v38 = v10;
    __int16 v39 = 2049;
    uint64_t v40 = v11;
    __int16 v41 = 2050;
    uint64_t v42 = v12;
    __int16 v43 = 2050;
    uint64_t v44 = v13;
    __int16 v45 = 2050;
    uint64_t v46 = v15;
    __int16 v47 = 2050;
    uint64_t v48 = v16;
    __int16 v49 = 1026;
    int v50 = v17;
    __int16 v51 = 1026;
    int v52 = v18;
    __int16 v53 = 2050;
    uint64_t v54 = v19;
    __int16 v55 = 2050;
    uint64_t v56 = v20;
    __int16 v57 = 2050;
    uint64_t v58 = v21;
    __int16 v59 = 1026;
    int v60 = v22;
    __int16 v61 = 2082;
    long long v62 = v23;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,%{public}.1lf,type,%{public}d,rawLL,%{private}.8lf,%{private}.8lf,rawCourse,%{public}.3lf,speed,%{public}.3lf,snapLL,%{private}.8lf,%{private}.8lf,snapCourse,%{public}.3lf,ratio,%{public}.6lf,projection,%{public}.6lf,score,%{public}.12lf,valid,%{public}d,forward,%{public}d,deltaN,%{public}.3lf,deltaE,%{public}.3lf,deltaCourse,%{public}.3lf,original,%{public}d,str,%{public}s", buf, 0xB0u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005A00);
    }
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLGeoMapSnapData::outputDebugLog(const std::string &) const", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

CLTripSegmentLocation *sub_1907A1F04(uint64_t a1, int a2)
{
  unint64_t v4 = -[CLTripSegmentLocation initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:]([CLTripSegmentLocation alloc], "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:", (id)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 16)], *(unsigned int *)(a1 + 120), *(double *)(a1 + 24), *(double *)(a1 + 32), -1.0, *(double *)(a1 + 40), -1.0, *(double *)(a1 + 104), -1.0, -1.0, 0xBFF0000000000000);
  [(CLTripSegmentLocation *)v4 setSignalEnvironmentType:*(unsigned int *)(a1 + 160)];
  if (*(void *)a1)
  {
    [(CLTripSegmentLocation *)v4 setMapsRoadClass:*(unsigned int *)(*(void *)a1 + 20)];
    [(CLTripSegmentLocation *)v4 setMapsFormOfWay:*(unsigned int *)(*(void *)a1 + 24)];
  }
  [(CLTripSegmentLocation *)v4 setRawLatitude:*(double *)(a1 + 128)];
  [(CLTripSegmentLocation *)v4 setRawLongitude:*(double *)(a1 + 136)];
  if (a2)
  {
    [(CLTripSegmentLocation *)v4 setCourseAccuracy:*(double *)(a1 + 144)];
    [(CLTripSegmentLocation *)v4 setSpeedAccuracy:*(double *)(a1 + 112)];
    [(CLTripSegmentLocation *)v4 setAltitude:*(double *)(a1 + 48)];
    [(CLTripSegmentLocation *)v4 setAltitudeAccuracy:*(double *)(a1 + 56)];
  }
  return v4;
}

os_log_t sub_1907A2014()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void *sub_1907A2044@<X0>(void **a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x80uLL);
  os_log_t result = sub_1907A20A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1907A208C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1907A20A0(void *a1, void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005228;
  sub_1907A15C4((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1907A20EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1907A2100(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907A2120(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005228;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907A217C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907A21F4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1907A21F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  id v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1907A2288((uint64_t)v12);
  return v10;
}

uint64_t sub_1907A2288(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074DC04(a1);
  }
  return a1;
}

id *sub_1907A22C0(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1907A22F8(id *a1, int a2, double *a3, double *a4, double *a5, int a6, double a7, double a8, double a9)
{
  *a3 = a7;
  *a4 = a8;
  *a5 = a9;
  if (a2 == 2) {
    return 2;
  }
  uint64_t result = sub_19073C6B8(a7, a8);
  if (result)
  {
    uint64_t result = objc_msgSend(MEMORY[0x1E4F64670], "isLocationShiftRequiredForCoordinate:", a7, a8);
    if (result)
    {
      double v20 = a7;
      double v21 = a8;
      double v19 = a9;
      if (!*a1) {
        *a1 = objc_alloc_init(MEMORY[0x1E4F64670]);
      }
      if (a6 >= 1)
      {
        while (!objc_msgSend(*a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v20, &v19, a7, a8, a9))
        {
          if (!--a6) {
            return 1;
          }
        }
        double v18 = v21;
        *a3 = v20;
        *a4 = v18;
        *a5 = v19;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_1907A2404(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = 0.0;
  double v18 = 0.0;
  double v16 = 0.0;
  BOOL result = sub_1906DA778(a1, &v17, &v18, &v16, a6, a7, 0.0, a8, a9, 0.0);
  if (result) {
    return sub_190839874(a1, a2, a3, &v15, a4, a5, 0.0, v17, v18, v16);
  }
  return result;
}

uint64_t sub_1907A24B0(unsigned __int8 *a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a3;
  uint64_t v418 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = [a3 count];
  double v387 = a2;
  unint64_t v8 = [a2 count];
  uint64_t v9 = 0;
  if (v7 < 2) {
    return v9;
  }
  unint64_t v10 = v8;
  if (v8 < 2) {
    return v9;
  }
  if (!a1[64])
  {
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      double v201 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v201, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Origin is not set.", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        LOWORD(v403[0]) = 0;
        double v367 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v367);
        if (v367 != __p) {
          free(v367);
        }
      }
    }
    return 0;
  }
  *((void *)a1 + 18) = *((void *)a1 + 17);
  *((void *)a1 + 47) = 0;
  double v375 = (double *)(a1 + 376);
  *((void *)a1 + 48) = 0;
  v389 = (uint64_t *)(a1 + 136);
  if (a1[200]) {
    a1[200] = 0;
  }
  if (a1[248]) {
    a1[248] = 0;
  }
  if (a1[344]) {
    a1[344] = 0;
  }
  if (a1[360]) {
    a1[360] = 0;
  }
  if (a1[400]) {
    a1[400] = 0;
  }
  a1[128] = 0;
  *((_WORD *)a1 + 164) = 0;
  *((void *)a1 + 51) = 0;
  *((void *)a1 + 52) = 0;
  *((void *)a1 + 53) = 0;
  *((void *)a1 + 54) = 0x10000000000000;
  uint64_t v11 = (void *)*((void *)a1 + 55);
  if (v11)
  {
    *((void *)a1 + 56) = v11;
    operator delete(v11);
  }
  *((void *)a1 + 55) = 0;
  *((void *)a1 + 56) = 0;
  *((void *)a1 + 57) = 0;
  uint64_t v12 = sub_190731FBC(v387, v4);
  if (v13)
  {
    *((void *)a1 + 40) = v12;
    a1[329] = 1;
  }
  unint64_t v14 = v10 + v7;
  uint64_t v15 = *((void *)a1 + 17);
  if (v10 + v7 > (*((void *)a1 + 19) - v15) >> 6)
  {
    if (v14 >> 58) {
      sub_190718FD4();
    }
    uint64_t v16 = *((void *)a1 + 18) - v15;
    *(void *)v414 = a1 + 152;
    *(void *)std::string __p = sub_1907A7A4C(v14);
    *(void *)&__p[8] = *(void *)__p + v16;
    *(void *)&__p[16] = *(void *)__p + v16;
    *(void *)&__p[24] = *(void *)__p + (v17 << 6);
    sub_1907A79B0(v389, __p);
    if (*(void *)__p) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v382 = 0;
  uint64_t v18 = 0;
  double v386 = (double *)(a1 + 160);
  memset(v391, 0, sizeof(v391));
  double v19 = (double *)(a1 + 72);
  int v392 = 1065353216;
  long double v385 = a1 + 336;
  double v376 = a1 + 208;
  v390 = v4;
  do
  {
    double v20 = (void *)[v387 objectAtIndexedSubscript:v18];
    [v20 horizontalAccuracy];
    if (v21 < 0.0)
    {
      if (!*a1) {
        goto LABEL_403;
      }
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      uint64_t v202 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
      {
        [v20 horizontalAccuracy];
        *(_DWORD *)std::string __p = 134349056;
        *(void *)&__p[4] = v203;
        _os_log_impl(&dword_1906B8000, v202, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Negative horizontal uncertainty. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_403;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      [v20 horizontalAccuracy];
      LODWORD(v403[0]) = 134349056;
      *(void *)((char *)v403 + 4) = v204;
      int v205 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v205);
      goto LABEL_434;
    }
    if (!a1[200]) {
      goto LABEL_27;
    }
    objc_msgSend((id)objc_msgSend(v20, "timestamp"), "timeIntervalSinceReferenceDate");
    if (!a1[200]) {
      sub_1907A7964();
    }
    double v23 = v22;
    if (v22 <= *v386)
    {
      if (*a1)
      {
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        uint64_t v40 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
        {
          if (!a1[200]) {
            sub_1907A7964();
          }
          double v41 = *v386;
          *(_DWORD *)std::string __p = 134349312;
          *(double *)&__p[4] = v41;
          *(_WORD *)&unsigned char __p[12] = 2050;
          *(double *)&__p[14] = v23;
          _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Location sample timestamp does not increase, skipping, previousTime, %{public}.2f, currentTime, %{public}.2f", __p, 0x16u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          if (!a1[200]) {
            sub_1907A7964();
          }
          double v42 = *v386;
          LODWORD(v403[0]) = 134349312;
          *(double *)((char *)v403 + 4) = v42;
          WORD6(v403[0]) = 2050;
          *(double *)((char *)v403 + 14) = v23;
          LODWORD(v374) = 22;
          __int16 v43 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v43);
          if (v43 != __p) {
            free(v43);
          }
        }
      }
    }
    else
    {
LABEL_27:
      *(_DWORD *)double v404 = 0;
      memset(v403, 0, sizeof(v403));
      if (!sub_1907311B0((uint64_t)v403, v20, *((double *)a1 + 6), *((double *)a1 + 7))) {
        goto LABEL_182;
      }
      if (a1[128])
      {
        if (!a1[200])
        {
          if (*a1)
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            __int16 v266 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string __p = 0;
              _os_log_impl(&dword_1906B8000, v266, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Last consumed measurement is not initialized.", __p, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1E929F660 == -1) {
                goto LABEL_309;
              }
              goto LABEL_471;
            }
          }
LABEL_403:
          uint64_t v9 = 0;
          goto LABEL_404;
        }
        double v24 = *v19;
        if (*v19 != *v386)
        {
          if (!*a1) {
            goto LABEL_403;
          }
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          int v267 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
          {
            if (!a1[200]) {
              sub_1907A7964();
            }
            double v268 = *v19;
            double v269 = *v386;
            *(_DWORD *)std::string __p = 134349312;
            *(double *)&__p[4] = v268;
            *(_WORD *)&unsigned char __p[12] = 2050;
            *(double *)&__p[14] = v269;
            _os_log_impl(&dword_1906B8000, v267, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Timestamp of estimated state %{public}.3f is not equal to timestamp of last consumed measurement, %{public}.3f.", __p, 0x16u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_403;
          }
          bzero(__p, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          if (!a1[200]) {
            sub_1907A7964();
          }
          double v270 = *v19;
          double v271 = *v386;
          LODWORD(v417[0]) = 134349312;
          *(double *)((char *)v417 + 4) = v270;
          WORD6(v417[0]) = 2050;
          *(double *)((char *)v417 + 14) = v271;
          int v205 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v205);
          goto LABEL_434;
        }
        double v25 = *(double *)v403;
        v395[0] = v382;
        v394[0] = v382;
        sub_190730A28(v4, v395, v394, v24, *(double *)v403);
        uint64_t v382 = v394[0];
        uint64_t v26 = v395[0];
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v395[0]), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
        double v28 = v27;
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v382), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
        if (v28 < v24 || v28 > v25 || v29 < v25)
        {
          if (*a1)
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            __int16 v51 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
            {
              if (!a1[200]) {
                sub_1907A7964();
              }
              double v52 = *v386;
              *(_DWORD *)std::string __p = 134349312;
              *(void *)&__p[4] = *(void *)&v403[0];
              *(_WORD *)&unsigned char __p[12] = 2050;
              *(double *)&__p[14] = v52;
              _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] There is no inertialOdometry sample between consecutive location samples. timestamp of coming location sample %{public}.3f, timestamp of consumed location sample %{public}.3f.", __p, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
              }
              if (!a1[200]) {
                sub_1907A7964();
              }
              double v197 = *v386;
              LODWORD(v417[0]) = 134349312;
              *(void *)((char *)v417 + 4) = *(void *)&v403[0];
              WORD6(v417[0]) = 2050;
              *(double *)((char *)v417 + 14) = v197;
              LODWORD(v374) = 22;
              uint64_t v198 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v198);
              if (v198 != __p) {
                free(v198);
              }
            }
          }
          unint64_t v53 = 0;
          double v54 = *(double *)v403;
          double v401 = 0.0;
          long long v400 = 0x3FF0000000000000uLL;
          double v402 = 1.0;
          double v396 = (v54 - *v19) * 4.0 * ((v54 - *v19) * 4.0);
          double v397 = v396;
          char v55 = 1;
          do
          {
            char v56 = v55;
            double v57 = *(double *)sub_190730CAC((uint64_t)&v400, v53, 0);
            double v58 = *((double *)a1 + 15);
            __int16 v59 = (double *)sub_190730CAC((uint64_t)&v400, v53, 1uLL);
            *__int16 v59 = *v59 + v57 * v58;
            *(void *)sub_190730CAC((uint64_t)v417, v53, 1uLL) = 0;
            *(void *)sub_190730CAC((uint64_t)v417, v53, 0) = 0;
            int v60 = (void *)sub_190730CAC((uint64_t)v417, v53, v53);
            char v55 = 0;
            *int v60 = 0x3FF0000000000000;
            unint64_t v53 = 1;
          }
          while ((v56 & 1) != 0);
          for (unint64_t i = 1; ; --i)
          {
            unint64_t v62 = 0;
            *((void *)&v410 + i) = 0;
            char v63 = 1;
            double v64 = 0.0;
            do
            {
              char v65 = v63;
              double v66 = *(double *)sub_190730CAC((uint64_t)&v400, i, v62);
              double v67 = *(double *)sub_190730CAC((uint64_t)&v400, i, v62);
              double v68 = *(double *)sub_1907A85C8((uint64_t)(a1 + 104), v62);
              double v69 = *(double *)sub_190730CAC((uint64_t)v417, i, v62);
              int v70 = (double *)sub_190730CAC((uint64_t)v417, i, v62);
              char v63 = 0;
              double v64 = v64 + v66 * v67 * v68 + v69 * *v70 * *(&v396 + v62);
              *((double *)&v410 + i) = v64;
              unint64_t v62 = 1;
            }
            while ((v65 & 1) != 0);
            unint64_t v4 = v390;
            if (v64 <= 0.0) {
              break;
            }
            if (!i)
            {
              *(_OWORD *)(a1 + 104) = v410;
              goto LABEL_161;
            }
            unint64_t v71 = 0;
            double v72 = 0.0;
            char v73 = 1;
            do
            {
              char v74 = v73;
              double v75 = *(double *)sub_190730CAC((uint64_t)&v400, 0, v71);
              double v76 = *(double *)sub_1907A85C8((uint64_t)(a1 + 104), v71);
              double v77 = *(double *)sub_190730CAC((uint64_t)&v400, i, v71);
              double v78 = *(double *)sub_190730CAC((uint64_t)v417, 0, v71);
              double v79 = *(&v396 + v71);
              char v80 = (double *)sub_190730CAC((uint64_t)v417, i, v71);
              char v73 = 0;
              double v72 = v72 + v75 * v76 * v77 + v78 * v79 * *v80;
              unint64_t v71 = 1;
            }
            while ((v74 & 1) != 0);
            unint64_t v81 = 0;
            *(double *)sub_1907A826C((uint64_t)(a1 + 120), 0, i) = v72 / v64;
            char v82 = 1;
            do
            {
              char v83 = v82;
              double v84 = *(double *)sub_1907A826C((uint64_t)(a1 + 120), 0, i);
              double v85 = *(double *)sub_190730CAC((uint64_t)&v400, i, v81);
              __int16 v86 = (double *)sub_190730CAC((uint64_t)&v400, 0, v81);
              *__int16 v86 = *v86 - v84 * v85;
              double v87 = *(double *)sub_1907A826C((uint64_t)(a1 + 120), 0, i);
              double v88 = *(double *)sub_190730CAC((uint64_t)v417, i, v81);
              int v89 = (double *)sub_190730CAC((uint64_t)v417, 0, v81);
              char v82 = 0;
              *int v89 = *v89 - v87 * v88;
              unint64_t v81 = 1;
            }
            while ((v83 & 1) != 0);
          }
          if (qword_1EB2713B8 != -1) {
            dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
          }
          long long v164 = off_1EB2713B0;
          if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string __p = 134217984;
            *(void *)&__p[4] = i;
            _os_log_impl(&dword_1906B8000, v164, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", __p, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EB2713B8 != -1) {
              dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
            }
            LODWORD(v407) = 134217984;
            *(void *)((char *)&v407 + 4) = i;
            LODWORD(v374) = 12;
            uint64_t v165 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "void CMFactoredMatrix<double, 2>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = double, N = 2]", "CoreLocation: %s\n", v165);
            unint64_t v4 = v390;
            if (v165 != __p) {
              free(v165);
            }
          }
LABEL_161:
          *((double *)a1 + 9) = v54;
          if (a1[200])
          {
            int v166 = *((_DWORD *)a1 + 48);
          }
          else
          {
            int v166 = *a1;
            if (*a1)
            {
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
              }
              uint64_t v167 = qword_1E929F668;
              if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string __p = 0;
                _os_log_impl(&dword_1906B8000, v167, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[forwardPropagate ZOH] LastConsumedMeasurement is not initialized.", __p, 2u);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1E929F660 != -1) {
                  dispatch_once(&qword_1E929F660, &unk_1EE003358);
                }
                LOWORD(v417[0]) = 0;
                LODWORD(v374) = 2;
                unint64_t v200 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::forwardPropagate(const CFAbsoluteTime)", "CoreLocation: %s\n", v200);
                if (v200 != __p) {
                  free(v200);
                }
                int v166 = 0;
                unint64_t v4 = v390;
              }
              else
              {
                int v166 = 0;
              }
            }
          }
          *((_DWORD *)a1 + 24) = v166;
          unint64_t v168 = *((void *)a1 + 18);
          unint64_t v169 = *((void *)a1 + 19);
          if (v168 >= v169)
          {
            uint64_t v172 = (uint64_t)(v168 - *v389) >> 6;
            unint64_t v173 = v172 + 1;
            if ((unint64_t)(v172 + 1) >> 58) {
LABEL_440:
            }
              sub_190718FD4();
            uint64_t v174 = v169 - *v389;
            if (v174 >> 5 > v173) {
              unint64_t v173 = v174 >> 5;
            }
            if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v175 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v175 = v173;
            }
            *(void *)v414 = a1 + 152;
            unint64_t v176 = (char *)sub_1907A7A4C(v175);
            unint64_t v4 = v390;
            int v177 = &v176[64 * v172];
            *(void *)std::string __p = v176;
            *(void *)&__p[8] = v177;
            *(void *)&__p[24] = &v176[64 * v178];
            long long v179 = *(_OWORD *)(a1 + 84);
            *(_OWORD *)int v177 = *(_OWORD *)v19;
            *(_OWORD *)(v177 + 12) = v179;
            *((void *)v177 + 4) = *((void *)a1 + 13);
            *((void *)v177 + 5) = *((void *)a1 + 14);
            *((void *)v177 + 6) = *((void *)a1 + 15);
            v177[56] = 0;
            *(void *)&__p[16] = v177 + 64;
            sub_1907A79B0(v389, __p);
            unint64_t v171 = *((void *)a1 + 18);
            if (*(void *)__p) {
              operator delete(*(void **)__p);
            }
          }
          else
          {
            long long v170 = *(_OWORD *)v19;
            *(_OWORD *)(v168 + 12) = *(_OWORD *)(a1 + 84);
            *(_OWORD *)unint64_t v168 = v170;
            *(void *)(v168 + 32) = *((void *)a1 + 13);
            *(void *)(v168 + 40) = *((void *)a1 + 14);
            *(void *)(v168 + 48) = *((void *)a1 + 15);
            *(unsigned char *)(v168 + 56) = 0;
            unint64_t v171 = v168 + 64;
          }
          *((void *)a1 + 18) = v171;
          sub_1907A60D0((uint64_t)a1, v403);
          *(unsigned char *)(*((void *)a1 + 18) - 8) = 1;
          uint64_t v127 = *((void *)a1 + 10);
          uint64_t v126 = *((void *)a1 + 11);
          uint64_t v128 = *((void *)a1 + 13);
          uint64_t v129 = *((void *)a1 + 14);
          uint64_t v130 = *((void *)a1 + 15);
          int v131 = sub_1907A7AD0((float *)v391, (void *)a1 + 9, *((double *)a1 + 9));
        }
        else
        {
          sub_1907A6604((uint64_t)a1, v4, v26, 1, *((double *)a1 + 9));
          sub_1907A6604((uint64_t)a1, v4, v382, 0, *(double *)v403);
          double v30 = *((double *)a1 + 33);
          __double2 v31 = __sincos_stret(*((double *)a1 + 34));
          double v32 = v30 * v31.__cosval;
          double v33 = v30 * v31.__sinval;
          for (unint64_t j = *((void *)a1 + 32) + 1; j < *((void *)a1 + 35); ++j)
          {
            __int16 v35 = (void *)[v4 objectAtIndexedSubscript:j];
            int v36 = objc_msgSend((id)objc_msgSend(v35, "deltaPosition_m"), "isValid");
            double v37 = 0.0;
            double v38 = 0.0;
            if (v36)
            {
              objc_msgSend((id)objc_msgSend(v35, "deltaPosition_m", 0.0), "X");
              double v37 = v39;
              objc_msgSend((id)objc_msgSend(v35, "deltaPosition_m"), "Y");
            }
            double v32 = v32 + v37;
            double v33 = v33 + v38;
          }
          double v90 = *((double *)a1 + 36);
          __double2 v91 = __sincos_stret(*((double *)a1 + 37));
          *(float32x2_t *)&long long v400 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)((char *)v403 + 8), *((float64x2_t *)a1 + 5)));
          *(float *)&unsigned int v92 = v32 + v90 * v91.__cosval;
          *(float *)&unsigned int v93 = v33 + v90 * v91.__sinval;
          *(void *)&long long v410 = __PAIR64__(v93, v92);
          sub_190731008((float *)&v400, (float *)&v410);
          double v95 = v94;
          *((double *)a1 + 42) = v94;
          a1[344] = 1;
          if (a1[1])
          {
            ++*((void *)a1 + 51);
            __double2 v96 = __sincos_stret(v94);
            double v97 = *((double *)a1 + 53);
            *((double *)a1 + 52) = v96.__cosval + *((double *)a1 + 52);
            *((double *)a1 + 53) = v96.__sinval + v97;
            if (a1[360])
            {
              double v98 = *((double *)a1 + 44);
              __double2 v99 = __sincos_stret(v95);
              float cosval = v99.__cosval;
              float sinval = v99.__sinval;
              *(float *)std::string __p = cosval;
              *(float *)&__p[4] = sinval;
              __double2 v102 = __sincos_stret(v98);
              *(float *)&unsigned int v103 = v102.__cosval;
              *(float *)&unsigned int v104 = v102.__sinval;
              *(void *)&v417[0] = __PAIR64__(v104, v103);
              sub_190731008((float *)__p, (float *)v417);
              double v106 = fabs(v105);
              if (*((double *)a1 + 54) < v106) {
                *((double *)a1 + 54) = v106;
              }
            }
            *((void *)a1 + 44) = *v385;
            a1[360] = a1[344];
          }
          float v107 = sqrtf((float)(*(float *)&v400 * *(float *)&v400) + (float)(*((float *)&v400 + 1) * *((float *)&v400 + 1)));
          double v108 = v107;
          float v109 = sqrtf((float)(*(float *)&v410 * *(float *)&v410) + (float)(*((float *)&v410 + 1) * *((float *)&v410 + 1)));
          double v110 = v109;
          if (v107 > 100.0)
          {
            if (a1[400])
            {
              if (!a1[344]) {
LABEL_441:
              }
                sub_1907A7964();
              double v111 = *((double *)a1 + 49);
              __double2 v112 = __sincos_stret(*((double *)a1 + 42));
              float v113 = v112.__cosval;
              float v114 = v112.__sinval;
              *(float *)std::string __p = v113;
              *(float *)&__p[4] = v114;
              __double2 v115 = __sincos_stret(v111);
              *(float *)&unsigned int v116 = v115.__cosval;
              *(float *)&unsigned int v117 = v115.__sinval;
              *(void *)&v417[0] = __PAIR64__(v117, v116);
              sub_190731008((float *)__p, (float *)v417);
              double v119 = fabs(v118);
              if (*((double *)a1 + 48) > v119) {
                double v119 = *((double *)a1 + 48);
              }
              *((double *)a1 + 48) = v119;
              unint64_t v4 = v390;
            }
            *((void *)a1 + 49) = *v385;
            a1[400] = a1[344];
            if (v109 > 2.2204e-16)
            {
              if (v107 <= v109) {
                double v120 = v109;
              }
              else {
                double v120 = v107;
              }
              if (v107 >= v109) {
                double v121 = v109;
              }
              else {
                double v121 = v107;
              }
              double v122 = v120 / v121;
              if (*v375 > v122) {
                double v122 = *v375;
              }
              *double v375 = v122;
            }
          }
          double v123 = 1.0;
          if (v109 > 2.2204e-16)
          {
            double v123 = v108 / v110;
            if (v108 / v110 > 1.0) {
              double v123 = 1.0;
            }
          }
          *((double *)a1 + 46) = v123;
          if (!a1[344])
          {
            if (*a1)
            {
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
              }
              double v274 = qword_1E929F668;
              if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)std::string __p = 0;
                _os_log_impl(&dword_1906B8000, v274, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Course offset is not initialized.", __p, 2u);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1E929F660 == -1)
                {
LABEL_309:
                  LOWORD(v417[0]) = 0;
                  int v205 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v205);
                  goto LABEL_434;
                }
LABEL_471:
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
                goto LABEL_309;
              }
            }
            goto LABEL_403;
          }
          unint64_t v124 = *((void *)a1 + 32);
          if (!a1[328])
          {
            *((void *)a1 + 38) = v124;
            *((void *)a1 + 39) = *((void *)a1 + 33);
            a1[328] = 1;
          }
          *(void *)&v417[1] = 0;
          v417[0] = 0x3FF0000000000000uLL;
          for (*((void *)&v417[1] + 1) = 0x3FF0000000000000; v124 <= *((void *)a1 + 35); unint64_t v4 = v390)
          {
            __int16 v132 = (void *)[v4 objectAtIndexedSubscript:v124];
            if (objc_msgSend((id)objc_msgSend(v132, "deltaPosition_m"), "isValid"))
            {
              objc_msgSend((id)objc_msgSend(v132, "deltaPosition_m"), "X");
              double v134 = v133;
              objc_msgSend((id)objc_msgSend(v132, "deltaPosition_m"), "Y");
              if (!a1[344]) {
                goto LABEL_441;
              }
              double v136 = v135;
              double v137 = atan2(v135, v134) - *(double *)v385;
              double v138 = 16.0;
              uint64_t v139 = 0x3FF0CCCCCCCCCCCDLL;
            }
            else
            {
              double v138 = 25.0;
              double v136 = 0.0;
              uint64_t v139 = 0x3FF999999999999ALL;
              double v134 = 0.0;
              double v137 = 0.0;
            }
            objc_msgSend((id)objc_msgSend(v132, "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
            uint64_t v141 = v140;
            if (v124 == *((void *)a1 + 32)) {
              double v142 = *((double *)a1 + 33);
            }
            else {
              double v142 = sqrt(v136 * v136 + v134 * v134);
            }
            if (v124 == *((void *)a1 + 35)) {
              double v142 = *((double *)a1 + 36);
            }
            double v143 = *((double *)a1 + 46) * v142;
            *(void *)&long long v410 = v139;
            *((double *)&v410 + 1) = v138;
            __double2 v144 = __sincos_stret(v137);
            *(double *)&long long v400 = -(v143 * v144.__sinval);
            *((double *)&v400 + 1) = v144.__cosval * v143;
            double v401 = v144.__cosval;
            double v402 = v144.__sinval;
            sub_1907A7398((uint64_t)(a1 + 104), (double *)v417, (double *)&v400, (uint64_t)&v410);
            double v145 = *((double *)a1 + 11);
            *((double *)a1 + 10) = v144.__cosval * v143 + *((double *)a1 + 10);
            *((double *)a1 + 11) = v144.__sinval * v143 + v145;
            *((void *)a1 + 9) = v141;
            if (a1[200])
            {
              int v146 = *((_DWORD *)a1 + 48);
            }
            else
            {
              int v146 = *a1;
              if (*a1)
              {
                if (qword_1E929F660 != -1) {
                  dispatch_once(&qword_1E929F660, &unk_1EE003358);
                }
                uint64_t v147 = qword_1E929F668;
                if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)std::string __p = 0;
                  _os_log_impl(&dword_1906B8000, v147, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[forwardPropagate with IO] LastConsumedMeasurement is not initialized.", __p, 2u);
                }
                if (sub_1906CB57C(115, 0))
                {
                  bzero(__p, 0x65CuLL);
                  if (qword_1E929F660 != -1) {
                    dispatch_once(&qword_1E929F660, &unk_1EE003358);
                  }
                  LOWORD(v396) = 0;
                  LODWORD(v374) = 2;
                  unint64_t v160 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::forwardPropagate(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable)", "CoreLocation: %s\n", v160);
                  if (v160 != __p) {
                    free(v160);
                  }
                }
                int v146 = 0;
              }
            }
            *((_DWORD *)a1 + 24) = v146;
            unint64_t v148 = *((void *)a1 + 18);
            unint64_t v149 = *((void *)a1 + 19);
            if (v148 >= v149)
            {
              uint64_t v152 = (uint64_t)(v148 - *v389) >> 6;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 58) {
                goto LABEL_440;
              }
              uint64_t v154 = v149 - *v389;
              if (v154 >> 5 > v153) {
                unint64_t v153 = v154 >> 5;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              *(void *)v414 = a1 + 152;
              uint64_t v156 = (char *)sub_1907A7A4C(v155);
              char v157 = &v156[64 * v152];
              *(void *)std::string __p = v156;
              *(void *)&__p[8] = v157;
              *(void *)&__p[24] = &v156[64 * v158];
              long long v159 = *(_OWORD *)(a1 + 84);
              *(_OWORD *)char v157 = *(_OWORD *)v19;
              *(_OWORD *)(v157 + 12) = v159;
              *((void *)v157 + 4) = *((void *)a1 + 13);
              *((void *)v157 + 5) = *((void *)a1 + 14);
              *((void *)v157 + 6) = *((void *)a1 + 15);
              v157[56] = 0;
              *(void *)&__p[16] = v157 + 64;
              sub_1907A79B0(v389, __p);
              unint64_t v151 = *((void *)a1 + 18);
              if (*(void *)__p) {
                operator delete(*(void **)__p);
              }
            }
            else
            {
              long long v150 = *(_OWORD *)v19;
              *(_OWORD *)(v148 + 12) = *(_OWORD *)(a1 + 84);
              *(_OWORD *)unint64_t v148 = v150;
              *(void *)(v148 + 32) = *((void *)a1 + 13);
              *(void *)(v148 + 40) = *((void *)a1 + 14);
              *(void *)(v148 + 48) = *((void *)a1 + 15);
              *(unsigned char *)(v148 + 56) = 0;
              unint64_t v151 = v148 + 64;
            }
            *((void *)a1 + 18) = v151;
            ++v124;
          }
          sub_1907A60D0((uint64_t)a1, v403);
          uint64_t v125 = *((void *)a1 + 18);
          *(void *)(v125 - 64) = *((void *)a1 + 9);
          *(unsigned char *)(v125 - 8) = 1;
          uint64_t v127 = *((void *)a1 + 10);
          uint64_t v126 = *((void *)a1 + 11);
          uint64_t v128 = *((void *)a1 + 13);
          uint64_t v129 = *((void *)a1 + 14);
          uint64_t v130 = *((void *)a1 + 15);
          int v131 = sub_1907A7AD0((float *)v391, (void *)a1 + 9, *((double *)a1 + 9));
        }
        *((void *)v131 + 3) = v127;
        *((void *)v131 + 4) = v126;
        *((void *)v131 + 5) = v128;
        *((void *)v131 + 6) = v129;
        *((void *)v131 + 7) = v130;
      }
      else
      {
        *((void *)&v417[0] + 1) = 0;
        *(void *)&v417[1] = 0;
        *(double *)double v417 = *((double *)&v403[1] + 1) * *((double *)&v403[1] + 1) * 0.5;
        *((double *)&v417[1] + 1) = *(double *)v417;
        if (sub_1907A70EC((uint64_t)&v400, (uint64_t)v417))
        {
          uint64_t v44 = *(void *)&v403[1];
          int v45 = *(_DWORD *)v404;
          double v46 = v401;
          *(_OWORD *)(a1 + 72) = v403[0];
          *((void *)a1 + 11) = v44;
          *((_DWORD *)a1 + 24) = v45;
          *(_OWORD *)(a1 + 104) = v400;
          *((double *)a1 + 15) = v46;
          a1[128] = 1;
          unint64_t v47 = *((void *)a1 + 18);
          unint64_t v48 = *((void *)a1 + 19);
          if (v47 >= v48)
          {
            uint64_t v180 = (uint64_t)(v47 - *v389) >> 6;
            unint64_t v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 58) {
              sub_190718FD4();
            }
            uint64_t v182 = v48 - *v389;
            if (v182 >> 5 > v181) {
              unint64_t v181 = v182 >> 5;
            }
            if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v183 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v183 = v181;
            }
            *(void *)v414 = a1 + 152;
            unint64_t v184 = (char *)sub_1907A7A4C(v183);
            long double v185 = &v184[64 * v180];
            *(void *)std::string __p = v184;
            *(void *)&__p[8] = v185;
            *(void *)&__p[24] = &v184[64 * v186];
            long long v187 = *(_OWORD *)(a1 + 84);
            *(_OWORD *)long double v185 = *(_OWORD *)v19;
            *(_OWORD *)(v185 + 12) = v187;
            *((void *)v185 + 4) = *((void *)a1 + 13);
            *((void *)v185 + 5) = *((void *)a1 + 14);
            *((void *)v185 + 6) = *((void *)a1 + 15);
            v185[56] = 1;
            *(void *)&__p[16] = v185 + 64;
            sub_1907A79B0(v389, __p);
            unint64_t v50 = *((void *)a1 + 18);
            if (*(void *)__p) {
              operator delete(*(void **)__p);
            }
          }
          else
          {
            long long v49 = *(_OWORD *)v19;
            *(_OWORD *)(v47 + 12) = *(_OWORD *)(a1 + 84);
            *(_OWORD *)unint64_t v47 = v49;
            *(void *)(v47 + 32) = *((void *)a1 + 13);
            *(void *)(v47 + 40) = *((void *)a1 + 14);
            *(void *)(v47 + 48) = *((void *)a1 + 15);
            *(unsigned char *)(v47 + 56) = 1;
            unint64_t v50 = v47 + 64;
          }
          *((void *)a1 + 18) = v50;
          uint64_t v189 = *((void *)a1 + 10);
          uint64_t v188 = *((void *)a1 + 11);
          uint64_t v190 = *((void *)a1 + 13);
          uint64_t v191 = *((void *)a1 + 14);
          uint64_t v192 = *((void *)a1 + 15);
          uint64_t v193 = sub_1907A7AD0((float *)v391, (void *)a1 + 9, *((double *)a1 + 9));
          *((void *)v193 + 3) = v189;
          *((void *)v193 + 4) = v188;
          *((void *)v193 + 5) = v190;
          *((void *)v193 + 6) = v191;
          *((void *)v193 + 7) = v192;
          long long v194 = v403[1];
          if (a1[248])
          {
            *double v376 = v403[0];
            *((_OWORD *)a1 + 14) = v194;
            *((_DWORD *)a1 + 60) = *(_DWORD *)v404;
          }
          else
          {
            *double v376 = v403[0];
            *((_OWORD *)a1 + 14) = v194;
            *((void *)a1 + 30) = *(void *)v404;
            a1[248] = 1;
          }
          long long v195 = v403[1];
          if (a1[200])
          {
            *(_OWORD *)double v386 = v403[0];
            *((_OWORD *)a1 + 11) = v195;
            *((_DWORD *)a1 + 48) = *(_DWORD *)v404;
          }
          else
          {
            *(_OWORD *)double v386 = v403[0];
            *((_OWORD *)a1 + 11) = v195;
            *((void *)a1 + 24) = *(void *)v404;
            a1[200] = 1;
          }
          if (*a1)
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            uint64_t v196 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string __p = 134349056;
              *(void *)&__p[4] = *((void *)&v403[1] + 1);
              _os_log_impl(&dword_1906B8000, v196, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Forward state initialized successfully. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
              }
              LODWORD(v417[0]) = 134349056;
              *(void *)((char *)v417 + 4) = *((void *)&v403[1] + 1);
              LODWORD(v374) = 12;
              double v163 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v163);
LABEL_207:
              if (v163 != __p) {
                free(v163);
              }
              unint64_t v4 = v390;
            }
          }
        }
        else if (*a1)
        {
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          int v161 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 134349056;
            *(void *)&__p[4] = *((void *)&v403[1] + 1);
            _os_log_impl(&dword_1906B8000, v161, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[initializePositionState] Forward state initialization failed. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            LODWORD(v410) = 134349056;
            *(void *)((char *)&v410 + 4) = *((void *)&v403[1] + 1);
            LODWORD(v374) = 12;
            double v199 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::initializePositionState(const CLPTSUtility::LocationInNWU &, std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &)", "CoreLocation: %s\n", v199);
            unint64_t v4 = v390;
            if (v199 != __p) {
              free(v199);
            }
          }
          if (*a1)
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            int v162 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 134349056;
              *(void *)&__p[4] = *((void *)&v403[1] + 1);
              _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Forward state initialization failed. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE003358);
              }
              LODWORD(v417[0]) = 134349056;
              *(void *)((char *)v417 + 4) = *((void *)&v403[1] + 1);
              LODWORD(v374) = 12;
              double v163 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v163);
              goto LABEL_207;
            }
          }
        }
      }
    }
LABEL_182:
    ++v18;
  }
  while (v18 != v10);
  uint64_t v206 = *((void *)a1 + 18);
  if ((unint64_t)(v206 - *((void *)a1 + 17)) <= 0x7F)
  {
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      int v207 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v207, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] Not enough forward estimation, returned false", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          goto LABEL_472;
        }
        goto LABEL_449;
      }
      goto LABEL_397;
    }
    goto LABEL_403;
  }
  if (!*(unsigned char *)(v206 - 8))
  {
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      uint64_t v272 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v272, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] last forward estimate is not corrected, returned false", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          goto LABEL_472;
        }
        goto LABEL_449;
      }
      goto LABEL_397;
    }
    goto LABEL_403;
  }
  double v208 = *(double *)(v206 - 64);
  int v209 = sub_1907A87A4(v391[0], v391[1], v208);
  if (!v209)
  {
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      double v273 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v273, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] key for initialization does not exist, returned false", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          goto LABEL_472;
        }
        goto LABEL_449;
      }
      goto LABEL_397;
    }
    goto LABEL_403;
  }
  double v210 = v209[3];
  double v211 = v209[4];
  double v212 = 0.0;
  double v213 = v209[6];
  double v214 = v209[7];
  double v215 = v209[5] + 0.0 + v214 * v213 * v214;
  double v216 = v214 * v213 + 0.0;
  double v217 = v213 * v214 + 0.0;
  double v218 = v213 + 0.0;
  *(double *)&long long v410 = v215;
  *((double *)&v410 + 1) = v217;
  double v411 = v216;
  double v412 = v218;
  if (!a1[64])
  {
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      double v275 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v275, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] origin is not set, returned false", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          goto LABEL_472;
        }
        goto LABEL_449;
      }
    }
    goto LABEL_397;
  }
  unint64_t v219 = 0;
  uint64_t v220 = *(unsigned int *)(v206 - 40);
  *(double *)std::string __p = v215;
  *(double *)&__p[8] = v217;
  char v221 = 1;
  *(double *)&__p[16] = v216;
  *(double *)&__p[24] = v218;
  do
  {
    char v222 = v221;
    double v223 = sub_1907A7F10((uint64_t)__p, v219, v219);
    char v221 = 0;
    double v212 = v212 + v223;
    unint64_t v219 = 1;
  }
  while ((v222 & 1) != 0);
  uint64_t v224 = sub_19073148C(v220, v208, sqrt(v212), v210, v211, *((double *)a1 + 6), *((double *)a1 + 7));
  [a4 addObject:v224];

  uint64_t v225 = (*((void *)a1 + 18) - *((void *)a1 + 17)) >> 6;
  uint64_t v226 = v390;
  if ((int)v225 >= 2)
  {
    uint64_t v276 = (v225 - 2);
    long long v277 = 0uLL;
LABEL_354:
    unint64_t v278 = 0;
    uint64_t v279 = v276 + 1;
    uint64_t v398 = 0;
    uint64_t v399 = 0;
    uint64_t v280 = *v389 + ((v276 + 1) << 6);
    double v281 = (uint64_t *)(v280 + 32);
    double v282 = -*(double *)(v280 + 48);
    v403[0] = v277;
    v403[1] = v277;
    char v283 = 1;
    while (1)
    {
      uint64_t v284 = *v281;
      uint64_t v285 = v281[1];
      *(void *)std::string __p = *v281;
      *(void *)&__p[8] = v285;
      if (*(double *)&__p[8 * v278] <= 0.0) {
        break;
      }
      char v286 = v283;
      *(void *)std::string __p = v284;
      *(void *)&__p[8] = v285;
      double v287 = *(double *)&__p[8 * v278];
      long long v288 = (double *)sub_190730CAC((uint64_t)v403, v278, v278);
      char v283 = 0;
      *long long v288 = 1.0 / v287;
      unint64_t v278 = 1;
      if ((v286 & 1) == 0)
      {
        double v379 = v211;
        double v383 = v210;
        *(void *)std::string __p = 0x3FF0000000000000;
        *(double *)&__p[8] = v282;
        *(_OWORD *)&__p[16] = xmmword_190884910;
        long long v400 = xmmword_190884920;
        double v401 = v282;
        double v402 = 1.0;
        *(void *)&v417[0] = sub_1907A77FC((uint64_t)v403, (uint64_t)&v400);
        *((void *)&v417[0] + 1) = v289;
        *(void *)&v417[1] = v290;
        *((void *)&v417[1] + 1) = v291;
        double v396 = sub_1907A77FC((uint64_t)__p, (uint64_t)v417);
        double v397 = v292;
        uint64_t v398 = v293;
        uint64_t v399 = v294;
        uint64_t v295 = *v389 + (v276 << 6);
        memset(v417, 0, sizeof(v417));
        if (*(unsigned char *)(v295 + 56))
        {
          double v296 = sub_1907A87A4(v391[0], v391[1], *(double *)v295);
          if (v296)
          {
            double v377 = v296[4];
            double v378 = v296[3];
            double v297 = v296[6];
            double v298 = v296[7];
            double v299 = v296[5] + 0.0 + v297 * v298 * v298;
            double v300 = v297 * v298 + 0.0;
            double v301 = v300;
            double v302 = v297 + 0.0;
            *(double *)double v417 = v299;
            *((double *)v417 + 1) = v300;
            *(double *)&v417[1] = v300;
            *((double *)&v417[1] + 1) = v297 + 0.0;
            goto LABEL_361;
          }
          if (*a1)
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            unint64_t v366 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string __p = 0;
              _os_log_impl(&dword_1906B8000, v366, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] key during back propagation does not exist , returned false", __p, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1E929F660 == -1) {
                goto LABEL_449;
              }
LABEL_472:
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
LABEL_449:
              LOWORD(v403[0]) = 0;
              long long v370 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::backPropagate(const std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v370);
              if (v370 != __p) {
                free(v370);
              }
            }
          }
          goto LABEL_397;
        }
        double v303 = *(double *)(v295 + 40);
        double v304 = *(double *)(v295 + 48);
        double v299 = *(double *)(v295 + 32) + 0.0 + v304 * v303 * v304;
        double v300 = v304 * v303 + 0.0;
        double v301 = v303 * v304 + 0.0;
        double v302 = v303 + 0.0;
        *(double *)double v417 = v299;
        *((double *)v417 + 1) = v301;
        *(double *)&v417[1] = v300;
        *((double *)&v417[1] + 1) = v303 + 0.0;
        double v377 = *(double *)(v295 + 16);
        double v378 = *(double *)(v295 + 8);
LABEL_361:
        double v305 = sub_1907A77FC((uint64_t)v417, (uint64_t)&v396);
        double v388 = v306;
        double v307 = v305;
        double v309 = v308;
        double v311 = v310;
        *(double *)&long long v400 = v305;
        *((double *)&v400 + 1) = v308;
        double v401 = v306;
        double v402 = v310;
        *(double *)&long long v407 = v305;
        *((double *)&v407 + 1) = v306;
        double v408 = v308;
        double v409 = v310;
        double v312 = (double *)(*v389 + (v279 << 6));
        v395[0] = sub_1907A78F8((uint64_t)&v410, v312[4] + 0.0 + v312[6] * v312[5] * v312[6], v312[5] * v312[6] + 0.0, v312[6] * v312[5] + 0.0, v312[5] + 0.0);
        v395[1] = v313;
        v395[2] = v314;
        v395[3] = v315;
        v394[0] = sub_1907A77FC((uint64_t)&v400, (uint64_t)v395);
        v394[1] = v316;
        v394[2] = v317;
        v394[3] = v318;
        v393[0] = sub_1907A77FC((uint64_t)v394, (uint64_t)&v407);
        v393[1] = v319;
        v393[2] = v320;
        v393[3] = v321;
        double v322 = sub_1907A78F8((uint64_t)v393, v299, v301, v300, v302);
        double v324 = v323;
        double v326 = v325;
        double v328 = v327;
        unint64_t v329 = 0;
        uint64_t v330 = *v389 + (v279 << 6);
        double v331 = v383 - *(double *)(v330 + 8);
        double v332 = v379 - *(double *)(v330 + 16);
        double v380 = v307 * v331;
        double v384 = *(double *)v295;
        uint64_t v333 = *(unsigned int *)(v295 + 24);
        double v334 = v309 * v331 + v311 * v332;
        double v335 = v332;
        *(double *)&long long v410 = v322;
        *((double *)&v410 + 1) = v323;
        double v411 = v326;
        double v412 = v327;
        *(double *)std::string __p = v322;
        *(double *)&__p[8] = v323;
        *(double *)&__p[16] = v326;
        *(double *)&__p[24] = v327;
        double v336 = 0.0;
        char v337 = 1;
        do
        {
          char v338 = v337;
          double v339 = sub_1907A7F10((uint64_t)__p, v329, v329);
          char v337 = 0;
          double v336 = v336 + v339;
          unint64_t v329 = 1;
        }
        while ((v338 & 1) != 0);
        if (v322 >= 0.0 && v328 >= 0.0)
        {
          double v340 = v326 - v324;
          if (v326 - v324 < 0.0) {
            double v340 = -(v326 - v324);
          }
          if (v340 <= 0.00100000005 && v336 > 0.0)
          {
            double v341 = sqrt(v336);
            goto LABEL_380;
          }
        }
        double v341 = 10.0;
        if (*a1)
        {
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          uint64_t v226 = v390;
          double v342 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
          {
            double v343 = *(double *)v295;
            *(_DWORD *)std::string __p = 134219008;
            *(double *)&__p[4] = v343;
            *(_WORD *)&unsigned char __p[12] = 2048;
            *(double *)&__p[14] = v322;
            *(_WORD *)&unsigned char __p[22] = 2048;
            *(double *)&__p[24] = v328;
            *(_WORD *)v414 = 2048;
            *(double *)&v414[2] = v326;
            __int16 v415 = 2048;
            double v416 = v324;
            _os_log_impl(&dword_1906B8000, v342, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] updated covariance is not positive definite, reporting a default value. timestamp,%.2f,diagonals,%.2f,%.2f,off-diagonals,%.2f,%.2f.", __p, 0x34u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            double v344 = *(double *)v295;
            LODWORD(v403[0]) = 134219008;
            *(double *)((char *)v403 + 4) = v344;
            WORD6(v403[0]) = 2048;
            *(double *)((char *)v403 + 14) = v322;
            WORD3(v403[1]) = 2048;
            *((double *)&v403[1] + 1) = v328;
            *(_WORD *)double v404 = 2048;
            *(double *)&v404[2] = v326;
            __int16 v405 = 2048;
            double v406 = v324;
            LODWORD(v374) = 52;
            double v345 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::backPropagate(const std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v345);
            if (v345 != __p) {
              free(v345);
            }
            goto LABEL_380;
          }
        }
        else
        {
LABEL_380:
          uint64_t v226 = v390;
        }
        double v346 = v378 + v380 + v388 * v335;
        double v347 = v377 + v334;
        unint64_t v348 = sub_19073148C(v333, v384, v341, v346, v377 + v334, *((double *)a1 + 6), *((double *)a1 + 7));
        unint64_t v349 = (void *)[a4 lastObject];
        [(CLTripSegmentLocation *)v348 latitude];
        double v351 = v350;
        [(CLTripSegmentLocation *)v348 longitude];
        double v353 = v352;
        [v349 latitude];
        double v355 = v354;
        [v349 longitude];
        objc_msgSend(v349, "setCourse:", sub_190839D14((double *)a1 + 1, v351, v353, v355, v356));
        [v349 course];
        BOOL v358 = v357 <= 0.0;
        double v359 = -1.0;
        if (!v358) {
          double v359 = 10.0;
        }
        [v349 setCourseAccuracy:v359];
        [a4 addObject:v348];

        BOOL v358 = v276-- < 1;
        long long v277 = 0uLL;
        double v210 = v346;
        double v211 = v347;
        if (v358) {
          goto LABEL_255;
        }
        goto LABEL_354;
      }
    }
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    double v360 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string __p = 134217984;
      *(void *)&__p[4] = v278;
      _os_log_impl(&dword_1906B8000, v360, OS_LOG_TYPE_DEBUG, "non-invertible matrix, D(%zu) <= 0 non-positive definite matrix!", __p, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      LODWORD(v417[0]) = 134217984;
      *(void *)((char *)v417 + 4) = v278;
      double v368 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 2>::inverse(CMMatrix<T, N> &) const [T = double, N = 2]", "CoreLocation: %s\n", v368);
      if (v368 != __p) {
        free(v368);
      }
    }
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      uint64_t v361 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v361, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] matrix inversion failed, returned false", __p, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          goto LABEL_472;
        }
        goto LABEL_449;
      }
    }
LABEL_397:
    if (!*a1) {
      goto LABEL_403;
    }
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE003358);
    }
    char v362 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl(&dword_1906B8000, v362, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Backpropagation failed.", __p, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_403;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE003358);
    }
    LOWORD(v403[0]) = 0;
    int v205 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v205);
LABEL_434:
    if (v205 != __p) {
      free(v205);
    }
    goto LABEL_403;
  }
LABEL_255:
  if (a1[328])
  {
    if (*((void *)a1 + 38))
    {
      if (a1[329])
      {
        sub_1907A6B40((uint64_t)a1, v226, a4);
        if (*a1)
        {
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          uint64_t v227 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string __p = 0;
            _os_log_impl(&dword_1906B8000, v227, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Open loop propagation for HEAD performed.", __p, 2u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            LOWORD(v403[0]) = 0;
            LODWORD(v374) = 2;
            long long v373 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v373);
            if (v373 != __p) {
              free(v373);
            }
            uint64_t v226 = v390;
          }
        }
      }
    }
  }
  [a4 sortUsingComparator:&unk_1EE005A20];
  if (*a1)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE003358);
    }
    uint64_t v228 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl(&dword_1906B8000, v228, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] reconstructedLocation array elements are now in ascending temporal order.", __p, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      LOWORD(v403[0]) = 0;
      LODWORD(v374) = 2;
      long long v369 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v369);
      if (v369 != __p) {
        free(v369);
      }
      uint64_t v226 = v390;
    }
  }
  unint64_t v229 = *((void *)a1 + 35);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v226, "objectAtIndex:", v229), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
  if (!a1[200]) {
    goto LABEL_468;
  }
  if (v230 <= *v386 || v229 >= v7)
  {
LABEL_412:
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      unint64_t v365 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v365, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Returned true. Pedestrian trajectory smoothing performed successfully.", __p, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        LOWORD(v403[0]) = 0;
        long long v371 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v371);
        if (v371 != __p) {
          free(v371);
        }
      }
    }
  }
  else
  {
    objc_msgSend((id)objc_msgSend(a4, "lastObject"), "horizontalAccuracy");
    double v232 = v231 * v231 * 0.5;
    *(void *)&v403[1] = 0;
    v403[0] = *(unint64_t *)&v232;
    *((double *)&v403[1] + 1) = v232;
    sub_1907A70EC((uint64_t)&v410, (uint64_t)v403);
    v417[0] = 0x3FF0000000000000uLL;
    *(void *)&v417[1] = 0;
    *((void *)&v417[1] + 1) = 0x3FF0000000000000;
    unint64_t v233 = *((void *)a1 + 35);
    if (v233 < [v226 count])
    {
      while (1)
      {
        long long v234 = (void *)[v226 objectAtIndexedSubscript:v233];
        int v235 = objc_msgSend((id)objc_msgSend(v234, "deltaPosition_m"), "isValid");
        double v236 = 0.0;
        double v237 = 0.0;
        if (v235)
        {
          objc_msgSend((id)objc_msgSend(v234, "deltaPosition_m", 0.0), "X");
          double v236 = v238;
          objc_msgSend((id)objc_msgSend(v234, "deltaPosition_m"), "Y");
        }
        double v239 = sqrt(v237 * v237 + v236 * v236);
        if (v233 == *((void *)a1 + 35)) {
          double v239 = v239 - *((double *)a1 + 36);
        }
        if (v235)
        {
          double v240 = atan2(v237, v236);
          double v241 = 16.0;
          *(double *)&uint64_t v242 = 1.05;
        }
        else
        {
          double v240 = 0.0;
          double v241 = 25.0;
          *(double *)&uint64_t v242 = 1.6;
        }
        if (!a1[344]) {
          break;
        }
        __double2 v243 = __sincos_stret(v240 - *(double *)v385);
        objc_msgSend((id)objc_msgSend(a4, "lastObject"), "latitude");
        double v245 = v244;
        objc_msgSend((id)objc_msgSend(a4, "lastObject"), "longitude");
        double v246 = v239 * v243.__cosval;
        double v247 = -(v239 * v243.__sinval);
        *(void *)&long long v407 = 0;
        v395[0] = 0;
        sub_190839874((double *)a1 + 1, (double *)&v407, (double *)v395, (double *)v394, v245, v248, 0.0, v246, v247, 0.0);
        *(double *)&long long v400 = v247;
        *((double *)&v400 + 1) = v246;
        double v401 = v243.__cosval;
        double v402 = v243.__sinval;
        double v396 = *(double *)&v242;
        double v397 = v241;
        sub_1907A7398((uint64_t)&v410, (double *)v417, (double *)&v400, (uint64_t)&v396);
        unint64_t v249 = 0;
        double v250 = 0.0;
        *(double *)std::string __p = *(double *)&v410 + 0.0 + v411 * *((double *)&v410 + 1) * v411;
        *(double *)&__p[8] = *((double *)&v410 + 1) * v411 + 0.0;
        *(double *)&__p[16] = v411 * *((double *)&v410 + 1) + 0.0;
        *(double *)&__p[24] = *((double *)&v410 + 1) + 0.0;
        char v251 = 1;
        do
        {
          char v252 = v251;
          double v253 = sub_1907A7F10((uint64_t)__p, v249, v249);
          char v251 = 0;
          double v250 = v250 + v253;
          unint64_t v249 = 1;
        }
        while ((v252 & 1) != 0);
        uint64_t v226 = v390;
        objc_msgSend((id)objc_msgSend(a4, "lastObject"), "latitude");
        double v255 = v254;
        objc_msgSend((id)objc_msgSend(a4, "lastObject"), "longitude");
        double v256 = *(double *)&v407;
        double v257 = *(double *)v395;
        double v259 = sub_190839D14((double *)a1 + 1, v255, v258, *(double *)&v407, *(double *)v395);
        double v260 = [CLTripSegmentLocation alloc];
        uint64_t v261 = [v234 cfAbsTimestamp];
        if (v259 <= 0.0) {
          double v262 = -1.0;
        }
        else {
          double v262 = 10.0;
        }
        uint64_t v263 = -[CLTripSegmentLocation initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:](v260, "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:", v261, 1, v256, v257, sqrt(v250), v259, v262, -1.0, -1.0, -1.0, 0xBFF0000000000000, v374);
        [(CLTripSegmentLocation *)v263 setLocationReconstructionType:2];
        if (a1[200])
        {
          [(CLTripSegmentLocation *)v263 setSignalEnvironmentType:*((unsigned int *)a1 + 48)];
        }
        else if (*a1)
        {
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          int v264 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string __p = 0;
            _os_log_impl(&dword_1906B8000, v264, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[openLoopPropagationTail] LastConsumedMeasurement is not initialized.", __p, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE003358);
            }
            LOWORD(v393[0]) = 0;
            LODWORD(v374) = 2;
            double v265 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::openLoopPropagationTail(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v265);
            if (v265 != __p) {
              free(v265);
            }
            uint64_t v226 = v390;
          }
        }
        [a4 addObject:v263];

        if (++v233 >= [v226 count]) {
          goto LABEL_406;
        }
      }
LABEL_468:
      sub_1907A7964();
    }
LABEL_406:
    if (*a1)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE003358);
      }
      uint64_t v364 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_1906B8000, v364, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Open loop propagation for TAIL performed.", __p, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        LOWORD(v403[0]) = 0;
        uint64_t v372 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v372);
        if (v372 != __p) {
          free(v372);
        }
      }
      goto LABEL_412;
    }
  }
  uint64_t v9 = 1;
LABEL_404:
  sub_1907A7A84((uint64_t)v391);
  return v9;
}

void sub_1907A5FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1907A60D0(uint64_t a1, long long *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  float64x2_t v4 = vsubq_f64(*(float64x2_t *)((char *)a2 + 8), *(float64x2_t *)(a1 + 80));
  float64x2_t v47 = v4;
  if (*(unsigned char *)(a1 + 1))
  {
    double v5 = sqrt(vaddvq_f64(vmulq_f64(v4, v4)));
    uint64_t v6 = *(double **)(a1 + 448);
    unint64_t v7 = *(void *)(a1 + 456);
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v9 = *(double **)(a1 + 440);
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_190718FD4();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        unint64_t v14 = (char *)sub_190732A30(a1 + 456, v13);
        uint64_t v9 = *(double **)(a1 + 440);
        uint64_t v6 = *(double **)(a1 + 448);
      }
      else
      {
        unint64_t v14 = 0;
      }
      uint64_t v15 = (double *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = v5;
      unint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *((void *)v6-- - 1);
        *((void *)v15-- - 1) = v17;
      }
      *(void *)(a1 + 440) = v15;
      *(void *)(a1 + 448) = v8;
      *(void *)(a1 + 456) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *uint64_t v6 = v5;
      unint64_t v8 = v6 + 1;
    }
    *(void *)(a1 + 448) = v8;
  }
  unint64_t v18 = 0;
  v46[0] = *((double *)a2 + 3) * *((double *)a2 + 3) * 0.5;
  v46[1] = v46[0];
  v45[0] = 0x3FF0000000000000;
  v45[1] = 0;
  v45[2] = 0;
  v45[3] = 0x3FF0000000000000;
  char v19 = 1;
  double v20 = 0.0;
  double v21 = 0.0;
  while (1)
  {
    char v22 = v19;
    double v23 = sub_1907A7F10((uint64_t)v45, v18, 0);
    double v24 = *(double *)(a1 + 104);
    double v25 = sub_1907A7F10((uint64_t)v45, v18, 1uLL);
    double v26 = sub_1907A7F10((uint64_t)v45, v18, 0);
    double v27 = v23 * v24;
    double v28 = v46[v18];
    double v29 = v28 + v23 * (v23 * v24);
    if (v29 <= 0.0)
    {
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      double v38 = off_1EB2713B0;
      if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__n128 buf = 134217984;
        unint64_t v51 = v18;
        _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
      }
      double v21 = 0.0;
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_36;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 == -1)
      {
LABEL_41:
        int v48 = 134217984;
        unint64_t v49 = v18;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<double, 2>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = double, N = 2, P = 2UL]", "CoreLocation: %s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
        goto LABEL_36;
      }
LABEL_44:
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      goto LABEL_41;
    }
    double v31 = *(double *)(a1 + 112);
    double v30 = *(double *)(a1 + 120);
    double v32 = v25 + v26 * v30;
    double v33 = v32 * v31;
    *(double *)(a1 + 104) = v28 * (1.0 / v29) * *(double *)(a1 + 104);
    double v34 = v29 + v32 * (v32 * v31);
    if (v34 <= 0.0) {
      break;
    }
    char v19 = 0;
    double v35 = 1.0 / v34;
    *(double *)(a1 + 112) = v31 * (v29 * v35);
    *(double *)(a1 + 120) = v30 + v27 * -(v32 * (1.0 / v29));
    double v36 = v27 + v33 * v30;
    double v37 = v35 * v47.f64[v18];
    double v20 = v20 + v37 * v36;
    double v21 = v21 + v37 * v33;
    unint64_t v18 = 1;
    if ((v22 & 1) == 0) {
      goto LABEL_37;
    }
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
  }
  double v39 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    unint64_t v51 = v18;
    _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
  }
  double v21 = 0.0;
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 == -1) {
      goto LABEL_41;
    }
    goto LABEL_44;
  }
LABEL_36:
  double v20 = 0.0;
LABEL_37:
  double v40 = v21 + *(double *)(a1 + 88);
  *(double *)(a1 + 80) = v20 + *(double *)(a1 + 80);
  *(double *)(a1 + 88) = v40;
  *(void *)(a1 + 72) = *(void *)a2;
  double v41 = (_OWORD *)(a1 + 160);
  long long v42 = *a2;
  long long v43 = a2[1];
  if (*(unsigned char *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 8);
    *double v41 = v42;
    *(_OWORD *)(a1 + 176) = v43;
  }
  else
  {
    *(void *)(a1 + 192) = *((void *)a2 + 4);
    *double v41 = v42;
    *(_OWORD *)(a1 + 176) = v43;
    *(unsigned char *)(a1 + 200) = 1;
  }
}

void sub_1907A6604(uint64_t a1, void *a2, uint64_t a3, int a4, double a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:"), "deltaPosition_m"), "isValid");
  if (a3 && ((v10 | a4 ^ 1) & 1) != 0)
  {
    if ((v10 | a4))
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", a3), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      double v12 = v11;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", a3 - 1), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
      double v14 = v12 - v13;
      double v15 = v12 - a5;
      if (v15 < 0.0 && *(unsigned char *)a1)
      {
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        uint64_t v16 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] time between first inertial to next location is negative.", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          double v25 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
      }
      double v17 = v15 / v14;
      if (fabs(v14) < 2.22044605e-16 && *(unsigned char *)a1)
      {
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        unint64_t v18 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] repeated timestamps of inertialOdometry.", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          double v26 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
      if (v17 > 1.0 && *(unsigned char *)a1)
      {
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        char v19 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] interpolationScaleFactor is greater than 1.", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          double v27 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
      }
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", a3), "deltaPosition_m"), "X");
      long double v21 = v20;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", a3), "deltaPosition_m"), "Y");
      double v23 = sqrt(v22 * v22 + v21 * v21);
      double v24 = atan2(v22, v21);
      if (a4)
      {
        *(void *)(a1 + 256) = a3;
        *(double *)(a1 + 264) = v17 * v23;
        *(double *)(a1 + 272) = v24;
      }
      else
      {
        *(void *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = (1.0 - v17) * v23;
        *(double *)(a1 + 296) = v24;
      }
    }
    else
    {
      *(void *)(a1 + 288) = 0;
      *(void *)(a1 + 296) = 0;
      *(void *)(a1 + 280) = a3;
    }
  }
  else
  {
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 256) = a3;
  }
}

unint64_t sub_1907A6B40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  objc_msgSend((id)objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
  v64[1] = 0.0;
  uint64_t v64[2] = 0.0;
  v64[0] = v6 * v6 * 0.5;
  v64[3] = v64[0];
  sub_1907A70EC((uint64_t)&v61, (uint64_t)v64);
  v60[0] = 1.0;
  v60[1] = 0.0;
  void v60[2] = 0.0;
  v60[3] = 1.0;
  if ((*(void *)(a1 + 304) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 304);
    do
    {
      unint64_t v8 = (void *)[a2 objectAtIndexedSubscript:v7];
      int v9 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v7), "deltaPosition_m"), "isValid");
      double v10 = 0.0;
      double v11 = 0.0;
      if (v9)
      {
        objc_msgSend((id)objc_msgSend(v8, "deltaPosition_m", 0.0), "X");
        double v10 = v12;
        objc_msgSend((id)objc_msgSend(v8, "deltaPosition_m"), "Y");
      }
      double v13 = sqrt(v11 * v11 + v10 * v10);
      if (*(void *)(a1 + 304) == v7) {
        double v13 = v13 - *(double *)(a1 + 312);
      }
      double v14 = 0.0;
      if (v9) {
        double v14 = atan2(v11, v10);
      }
      __double2 v15 = __sincos_stret(v14 - *(double *)(a1 + 320));
      objc_msgSend((id)objc_msgSend(a3, "lastObject"), "latitude");
      double v17 = v16;
      objc_msgSend((id)objc_msgSend(a3, "lastObject"), "longitude");
      double v58 = 0.0;
      double v59 = 0.0;
      sub_190839874((double *)(a1 + 8), &v59, &v58, &v57, v17, v18, 0.0, -(v13 * v15.__cosval), v13 * v15.__sinval, 0.0);
      char v19 = [CLTripSegmentLocation alloc];
      uint64_t v20 = [v8 cfAbsTimestamp];
      long double v21 = [(CLTripSegmentLocation *)v19 initWithTime:v20 latitude:1 longitude:v59 horizontalAccuracy:v58 course:-1.0 courseAccuracy:-1.0 speed:-1.0 speedAccuracy:-1.0 altitude:-1.0 altitudeAccuracy:-1.0 locType:0xBFF0000000000000];
      [(CLTripSegmentLocation *)v21 setLocationReconstructionType:2];
      if (*(unsigned char *)(a1 + 248))
      {
        [(CLTripSegmentLocation *)v21 setSignalEnvironmentType:*(unsigned int *)(a1 + 240)];
      }
      else if (*(unsigned char *)a1)
      {
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE003358);
        }
        long double v22 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[openLoopPropagationHead] FirstConsumedMeasurement is not initialized.", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE003358);
          }
          LOWORD(v56[0]) = 0;
          uint64_t v52 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::openLoopPropagationHead(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
      }
      double v23 = (void *)[a3 lastObject];
      [(CLTripSegmentLocation *)v21 latitude];
      double v25 = v24;
      [(CLTripSegmentLocation *)v21 longitude];
      double v27 = v26;
      [v23 latitude];
      double v29 = v28;
      [v23 longitude];
      objc_msgSend(v23, "setCourse:", sub_190839D14((double *)(a1 + 8), v25, v27, v29, v30));
      [v23 course];
      BOOL v32 = v31 <= 0.0;
      double v33 = -1.0;
      if (!v32) {
        double v33 = 10.0;
      }
      [v23 setCourseAccuracy:v33];
      [v23 course];
      double v35 = v34 * 0.0174532924;
      [v23 latitude];
      double v37 = v36;
      [v23 longitude];
      double v39 = v38;
      [(CLTripSegmentLocation *)v21 latitude];
      double v41 = v40;
      [(CLTripSegmentLocation *)v21 longitude];
      double v42 = 0.0;
      double v44 = sub_1906DA618((double *)(a1 + 8), v37, v39, v41, v43, 0.0);
      __double2 v45 = __sincos_stret(v35);
      v56[0] = -(v44 * v45.__sinval);
      v56[1] = v45.__cosval * v44;
      void v56[2] = v45.__cosval;
      void v56[3] = v45.__sinval;
      if (v9) {
        double v46 = 1.05;
      }
      else {
        double v46 = 1.6;
      }
      double v47 = 25.0;
      if (v9) {
        double v47 = 16.0;
      }
      *(double *)char v55 = v46;
      *(double *)&v55[1] = v47;
      sub_1907A7398((uint64_t)&v61, v60, v56, (uint64_t)v55);
      unint64_t v48 = 0;
      *(double *)__n128 buf = v61 + 0.0 + v63 * v62 * v63;
      double v66 = v62 * v63 + 0.0;
      double v67 = v63 * v62 + 0.0;
      double v68 = v62 + 0.0;
      char v49 = 1;
      do
      {
        char v50 = v49;
        double v51 = sub_1907A7F10((uint64_t)buf, v48, v48);
        char v49 = 0;
        double v42 = v42 + v51;
        unint64_t v48 = 1;
      }
      while ((v50 & 1) != 0);
      [v23 setHorizontalAccuracy:sqrt(v42)];
      [a3 addObject:v21];

      BOOL v32 = v7-- <= 0;
    }
    while (!v32);
  }
  unint64_t result = [a3 count];
  if (result > 1)
  {
    objc_msgSend((id)objc_msgSend(a3, "objectAtIndex:", result - 2), "horizontalAccuracy");
    return objc_msgSend((id)objc_msgSend(a3, "lastObject"), "setHorizontalAccuracy:", v54);
  }
  return result;
}

uint64_t sub_1907A70A0(uint64_t a1, void *a2, void *a3)
{
  float64x2_t v4 = (void *)[a2 timestamp];
  uint64_t v5 = [a3 timestamp];

  return [v4 compare:v5];
}

uint64_t sub_1907A70EC(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(a2 + 16) - *(double *)(a2 + 8);
  if (v2 < 0.0) {
    double v2 = -v2;
  }
  if (v2 > 1.00000002e-16) {
    return 0;
  }
  uint64_t v5 = a1 + 16;
  for (unint64_t i = 1; ; --i)
  {
    double v7 = sub_1907A7F10(a2, i, i);
    if (!i)
    {
      double v8 = *(double *)sub_1907A826C(v5, 0, 1uLL);
      double v7 = v7 + -(v8 * *(double *)sub_1907A826C(v5, 0, 1uLL)) * *(double *)(a1 + 8);
    }
    *(double *)sub_1907A85C8(a1, i) = v7;
    if (*(double *)sub_1907A85C8(a1, i) <= 0.0) {
      break;
    }
    if (!i) {
      return 1;
    }
    double v9 = sub_1907A7F10(a2, i - 1, i);
    double v10 = v9 / *(double *)sub_1907A85C8(a1, i);
    *(double *)sub_1907A826C(v5, i - 1, i) = v10;
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
  }
  double v11 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    unint64_t v15 = i;
    _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 2>::factor(const CMMatrix<T, N, N> &) [T = double, N = 2]", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
    return 0;
  }
  return result;
}

void sub_1907A7398(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 16;
  double v9 = a2[1];
  double v10 = a2[3];
  a2[2] = a2[2] + *a2 * *(double *)(a1 + 16);
  a2[3] = v10 + v9 * *(double *)(a1 + 16);
  for (unint64_t i = 1; ; --i)
  {
    unint64_t v12 = 0;
    *((void *)&v44 + i) = 0;
    char v13 = 1;
    double v14 = 0.0;
    do
    {
      char v15 = v13;
      double v16 = *(double *)sub_190730CAC((uint64_t)a2, i, v12);
      double v17 = v16 * *(double *)sub_190730CAC((uint64_t)a2, i, v12);
      double v18 = (double *)sub_1907A85C8(a1, v12);
      char v13 = 0;
      double v14 = v14 + v17 * *v18;
      *((double *)&v44 + i) = v14;
      unint64_t v12 = 1;
    }
    while ((v15 & 1) != 0);
    unint64_t v19 = 0;
    char v20 = 1;
    do
    {
      char v21 = v20;
      double v22 = *(double *)sub_190730CAC((uint64_t)a3, i, v19);
      double v23 = (double *)sub_190730CAC((uint64_t)a3, i, v19);
      char v20 = 0;
      double v14 = v14 + v22 * *v23 * *(double *)(a4 + 8 * v19);
      *((double *)&v44 + i) = v14;
      unint64_t v19 = 1;
    }
    while ((v21 & 1) != 0);
    if (v14 <= 0.0) {
      break;
    }
    if (!i)
    {
      *(_OWORD *)a1 = v44;
      return;
    }
    unint64_t v24 = 0;
    double v25 = 0.0;
    char v26 = 1;
    do
    {
      char v27 = v26;
      double v28 = *(double *)sub_190730CAC((uint64_t)a2, 0, v24);
      double v29 = v28 * *(double *)sub_1907A85C8(a1, v24);
      double v30 = (double *)sub_190730CAC((uint64_t)a2, i, v24);
      char v26 = 0;
      double v25 = v25 + v29 * *v30;
      unint64_t v24 = 1;
    }
    while ((v27 & 1) != 0);
    unint64_t v31 = 0;
    char v32 = 1;
    do
    {
      char v33 = v32;
      double v34 = *(double *)sub_190730CAC((uint64_t)a3, 0, v31) * *(double *)(a4 + 8 * v31);
      double v35 = (double *)sub_190730CAC((uint64_t)a3, i, v31);
      char v32 = 0;
      double v25 = v25 + v34 * *v35;
      unint64_t v31 = 1;
    }
    while ((v33 & 1) != 0);
    *(double *)sub_1907A826C(v8, 0, i) = v25 / v14;
    double v36 = *(double *)sub_1907A826C(v8, 0, i);
    *a2 = *a2 - v36 * *(double *)sub_190730CAC((uint64_t)a2, i, 0);
    double v37 = *(double *)sub_1907A826C(v8, 0, i);
    a2[2] = a2[2] - v37 * *(double *)sub_190730CAC((uint64_t)a2, i, 1uLL);
    double v38 = *(double *)sub_1907A826C(v8, 0, i);
    *a3 = *a3 - v38 * *(double *)sub_190730CAC((uint64_t)a3, i, 0);
    double v39 = *(double *)sub_1907A826C(v8, 0, i);
    a3[2] = a3[2] - v39 * *(double *)sub_190730CAC((uint64_t)a3, i, 1uLL);
  }
  if (qword_1EB2713B8 != -1) {
    dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
  }
  double v40 = off_1EB2713B0;
  if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    unint64_t v43 = i;
    _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    double v41 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CMFactoredMatrix<double, 2>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, CMMatrix<T, N, M> &, const CMVector<T, M> &) [T = double, N = 2, M = 2UL]", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
}

double sub_1907A77FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  char v5 = 1;
  do
  {
    unint64_t v6 = 0;
    char v7 = v5;
    char v8 = 1;
    do
    {
      char v9 = v8;
      double v10 = sub_1907A7F10(a1, v4, 0);
      double v11 = v10 * sub_1907A7F10(a2, 0, v6);
      *(double *)sub_190730CAC((uint64_t)&v16, v4, v6) = v11;
      double v12 = sub_1907A7F10(a1, v4, 1uLL);
      double v13 = sub_1907A7F10(a2, 1uLL, v6);
      double v14 = (double *)sub_190730CAC((uint64_t)&v16, v4, v6);
      char v8 = 0;
      *double v14 = *v14 + v12 * v13;
      unint64_t v6 = 1;
    }
    while ((v9 & 1) != 0);
    char v5 = 0;
    unint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v16;
}

double sub_1907A78F8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = 0;
  *(double *)&void v7[2] = a4;
  *(double *)&void v7[3] = a5;
  do
  {
    *(float64x2_t *)&v7[v5] = vsubq_f64(*(float64x2_t *)&v7[v5], *(float64x2_t *)(a1 + v5 * 8));
    v5 += 2;
  }
  while (v5 != 4);
  return *(double *)v7;
}

os_log_t sub_1907A7934()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1E929F668 = (uint64_t)result;
  return result;
}

void sub_1907A7964()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t *sub_1907A79B0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 52) = *(_OWORD *)(v2 + v5 - 52);
      *(_OWORD *)(v6 - 64) = v7;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v2 + v5 - 8);
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *os_log_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_1907A7A4C(unint64_t a1)
{
  if (a1 >> 58) {
    sub_190718124();
  }
  return operator new(a1 << 6);
}

uint64_t sub_1907A7A84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

char *sub_1907A7AD0(float *a1, void *a2, double a3)
{
  if (a3 == 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = a3;
  }
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      double v3 = v6;
      if (*(void *)&v6 >= v7) {
        *(void *)&double v3 = *(void *)&v6 % v7;
      }
    }
    else
    {
      *(void *)&double v3 = (v7 - 1) & *(void *)&v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * *(void *)&v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == *(void *)&v6)
          {
            if (*((double *)v10 + 2) == a3) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != *(void *)&v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v10 = 0;
  *((double *)v10 + 1) = v6;
  *((void *)v10 + 2) = *a2;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 7) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            sub_190718124();
          }
          double v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          char v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            char v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_58;
                  }
                  *char v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  char v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_58:
                char v21 = v27;
                char v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        char v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*(void *)&v6 >= v7) {
        *(void *)&double v3 = *(void *)&v6 % v7;
      }
      else {
        double v3 = v6;
      }
    }
    else
    {
      *(void *)&double v3 = (v7 - 1) & *(void *)&v6;
    }
  }
  double v29 = *(void **)a1;
  double v30 = *(void **)(*(void *)a1 + 8 * *(void *)&v3);
  if (v30)
  {
    *(void *)uint64_t v10 = *v30;
LABEL_75:
    *double v30 = v10;
    goto LABEL_76;
  }
  *(void *)uint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[*(void *)&v3] = a1 + 4;
  if (*(void *)v10)
  {
    unint64_t v31 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    double v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_75;
  }
LABEL_76:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1907A7ECC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

os_log_t sub_1907A7EE0()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

double sub_1907A7F10(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    unint64_t v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      uint8x8_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T CMMatrix<double, 2>::operator()(size_t, size_t) const [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    uint64_t v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 2;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T CMMatrix<double, 2>::operator()(size_t, size_t) const [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return *(double *)(a1 + 8 * (a2 + 2 * a3));
}

uint64_t sub_1907A826C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    unint64_t v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      uint8x8_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    uint64_t v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_1907A85C8(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
    }
    uint64_t v5 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 2;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE002D80);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::DiagonalMatrix::operator()(size_t) [T = double, N = 2]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 8 * a2;
}

double *sub_1907A87A4(uint64_t a1, unint64_t a2, double a3)
{
  double v3 = a3;
  if (a3 == 0.0) {
    double v3 = 0.0;
  }
  if (!a2) {
    return 0;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    double v5 = v3;
    if (*(void *)&v3 >= a2) {
      *(void *)&double v5 = *(void *)&v3 % a2;
    }
  }
  else
  {
    *(void *)&double v5 = *(void *)&v3 & (a2 - 1);
  }
  double v6 = *(double ***)(a1 + 8 * *(void *)&v5);
  if (!v6) {
    return 0;
  }
  for (os_log_t result = *v6; result; os_log_t result = *(double **)result)
  {
    unint64_t v8 = *((void *)result + 1);
    if (*(void *)&v3 == v8)
    {
      if (result[2] == a3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      if (v8 != *(void *)&v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1907A8C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907A8CC0(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdentityToken:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setStorageToken:0];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel_manageConnection);
}

void sub_1907A8F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1907A8F3C(uint64_t a1)
{
  [*(id *)(a1 + 32) destroyConnection];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 tearDown];
}

void sub_1907A9150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_1907A916C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005A40);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#backgroundActivitySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005A40);
      }
    }
    uint8x8_t v4 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#backgroundActivitySession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#backgroundActivitySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_19073BF10("kCLConnectionMessageDestroyUponDisconnection", buf);
    double v6 = *(std::__shared_weak_count **)v8;
    if (*(void *)v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v8 + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v6) {
      sub_1906BFE48(v6);
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    if (*(void *)v8) {
      sub_1906BFE48(*(std::__shared_weak_count **)v8);
    }
  }
}

void sub_1907A935C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907A9514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907A98A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a13) {
    sub_1906BFE48(a13);
  }
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907A9934(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    uint64_t v5 = Weak;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005A40);
    }
    double v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      unint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      uint64_t v20 = v5;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#backgroundActivitySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005A40);
      }
    }
    unint64_t v8 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      unint64_t v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v9;
      __int16 v19 = 2050;
      uint64_t v20 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#backgroundActivitySession Default handler received message", "{\"msg%{public}.0s\":\"#backgroundActivitySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    unint64_t v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 handleMessage:&v11];
    if (v12) {
      sub_1906BFE48(v12);
    }
  }
}

void sub_1907A9B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907A9EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AA13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, os_activity_scope_state_s state)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_1907AA2C0@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  double v6 = operator new(0x70uLL);
  os_log_t result = sub_1907AA324(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1907AA310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1907AA324(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_1907AA398((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1907AA384(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1907AA398(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1906D5C70(__p, __s);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1907AA3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AA64C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (const char *)a1;
  void v14[2] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8))
    {
LABEL_7:
      uint64_t v4 = CFCopyUserName();
      goto LABEL_8;
    }
    uint64_t v2 = *(const char **)a1;
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    goto LABEL_7;
  }
  uint64_t v4 = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0x8000100u);
LABEL_8:
  char v5 = (const void *)v4;
  sub_1906D54D4();
  if (sub_190795DAC() && (double v6 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    char v7 = NSString;
    v14[0] = [NSString stringWithUTF8String:v6];
    v14[1] = v5;
    sub_1906D5C70(&v12, (char *)objc_msgSend((id)objc_msgSend(v7, "pathWithComponents:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v14, 2)), "UTF8String"));
    *(_OWORD *)a2 = v12;
    a2[2] = v13;
  }
  else if (v5)
  {
    CFURLRef v8 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
    CFURLRef v9 = v8;
    if (v8)
    {
      CFStringRef v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
      CFStringRef v11 = v10;
      if (v10)
      {
        sub_1907829B4(v10, (uint64_t)&v12);
        *(_OWORD *)a2 = v12;
        a2[2] = v13;
        CFRelease(v11);
      }
      CFRelease(v9);
    }
    CFRelease(v5);
  }
}

void sub_1907AA7C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AA7F8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  CFStringRef v4 = (const __CFString *)CFCopyUserName();
  sub_1907829B4(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  unint64_t v5 = v15.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v15.__r_.__value_.__l + 2);
  a2 = (void *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  if (!*(void *)(a1 + 8)) {
    return;
  }
LABEL_11:
  sub_1907AA954(&v14);
  double v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    CFURLRef v9 = (const std::string::value_type *)a1;
  }
  else {
    CFURLRef v9 = *(const std::string::value_type **)a1;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 8);
  }
  CFStringRef v11 = std::string::append(&v15, v9, v10);
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  *uint64_t v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(void *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((unsigned char *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((unsigned char *)v3 + 23) = size;
  if (v13 < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1907AA920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1907AA954@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_1EB272538 != -1) {
    dispatch_once(&qword_1EB272538, &unk_1EE005A60);
  }
  if (qword_1EB272530)
  {
    sub_1907829B4((const __CFString *)qword_1EB272530, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

void sub_1907AA9D0(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 == 3)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE003378);
    }
    long long v7 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      v12.__r_.__value_.__r.__words[0] = 0x304020100;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "no mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_28;
    }
    bzero(&v12, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE003378);
    }
    v13[0] = (void *)0x304020100;
    int v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
    goto LABEL_33;
  }
  if (a1)
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE003378);
    }
    CFURLRef v9 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v12.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v12.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "could not get mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_28;
    }
    bzero(&v12, 0x65CuLL);
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE003378);
    }
    LODWORD(v13[0]) = 67240192;
    HIDWORD(v13[0]) = a1;
    int v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
LABEL_33:
    if (v8 != &v12) {
      free(v8);
    }
LABEL_28:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  sub_1906D5C70(__p, "root");
  sub_1907AA64C((uint64_t)__p, &v12);
  sub_1906D5C70(v13, "/Library/Caches/locationd/");
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = (const std::string::value_type *)v13;
  }
  else {
    uint64_t v4 = (const std::string::value_type *)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  double v6 = std::string::append(&v12, v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1907AAD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AADC4(std::string *a1@<X8>)
{
  sub_1907AA954(&v3);
  uint64_t v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework/Support/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1907AAE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AAE48(std::string *a1@<X8>)
{
  sub_1907AA954(&v3);
  uint64_t v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_1907AAEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AAECC()
{
  qword_1EB272530 = @"/";
}

os_log_t sub_1907AAEE0()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

void sub_1907AB9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907AB9CC(uint64_t a1, uint64_t a2)
{
}

void sub_1907AB9DC(uint64_t a1)
{
}

void sub_1907AB9E8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[*(id *)(a1 + 32) processTripSegmentData:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) withOptions:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) outputHandler:*(void *)(a1 + 40)];
  if (v2)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005A80);
    }
    std::string v3 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134349571;
      uint64_t v6 = [v2 code];
      __int16 v7 = 2114;
      uint64_t v8 = [v2 domain];
      __int16 v9 = 2113;
      uint64_t v10 = [v2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "CLTSP,processTripData returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005A80);
      }
      [v2 code];
      [v2 domain];
      [v2 localizedDescription];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLTripSegmentProcessorManager processTripSegmentData:withOptions:outputHandler:completionHandler:]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) createSparseDataFromOneHzData]&& objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "isAutomotiveModeOfTransport"))
  {
    [*(id *)(a1 + 32) simulateSparseTrajectoryAndSubmitCoreAnalytics:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1907ACDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907ACE78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

void sub_1907ACE88(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005A80);
    }
    uint64_t v4 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripSegmentID"), "UUIDString"), "UTF8String");
      objc_msgSend(a2, "distance_m");
      uint64_t v7 = v6;
      objc_msgSend(a2, "distanceUnc_m");
      uint64_t v9 = v8;
      objc_msgSend((id)objc_msgSend(a2, "startDate"), "timeIntervalSinceReferenceDate");
      uint64_t v11 = v10;
      objc_msgSend((id)objc_msgSend(a2, "endDate"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)__n128 buf = 136447746;
      uint64_t v24 = v5;
      __int16 v25 = 2050;
      uint64_t v26 = v7;
      __int16 v27 = 2050;
      uint64_t v28 = v9;
      __int16 v29 = 2050;
      uint64_t v30 = v11;
      __int16 v31 = 2050;
      uint64_t v32 = v12;
      __int16 v33 = 1026;
      int v34 = [a2 modeOfTransport];
      __int16 v35 = 1026;
      int v36 = objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "CLTSP,simulatedSparse,received reconstructed trip,ID,%{public}s,distance,%{public}.2lf,distance unc,%{public}.2lf,startTime,%{public}.2lf,endTime, %{public}.2lf,modeOfTransport,%{public}d,locations,%{public}d", buf, 0x40u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005A80);
      }
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripSegmentID"), "UUIDString"), "UTF8String");
      objc_msgSend(a2, "distance_m");
      objc_msgSend(a2, "distanceUnc_m");
      objc_msgSend((id)objc_msgSend(a2, "startDate"), "timeIntervalSinceReferenceDate");
      objc_msgSend((id)objc_msgSend(a2, "endDate"), "timeIntervalSinceReferenceDate");
      [a2 modeOfTransport];
      objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
      unint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLTripSegmentProcessorManager simulateSparseTrajectoryAndSubmitCoreAnalytics:]_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    uint64_t v13 = sub_190859358();
    unsigned __int8 v14 = (void *)[*(id *)(a1 + 32) tripSegmentID];
    uint64_t v15 = (void *)[a2 tripSegmentID];
    int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v17 = (void *)[*(id *)(a1 + 32) tripLocations];
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
    double v19 = 0.0;
    if (*(double *)(v18 + 48) >= 0.0)
    {
      uint64_t v20 = mach_continuous_time();
      double v19 = vabdd_f64(sub_1907E1770(v20), *(double *)(v18 + 48)) * 1000.0;
    }
    sub_1908594B8(v13, v14, v15, v16, v17, a2, v19);
    if ([*(id *)(a1 + 32) isFinalPart])
    {
      uint64_t v21 = sub_190859358();
      sub_19085A1E4(v21);
    }
  }
}

void sub_1907AD2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1907AD318()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

void sub_1907AD6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1907AD878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1907AD890(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdentityToken:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setStorageToken:0];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel_manageConnection);
}

void sub_1907ADA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1907ADE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a13) {
    sub_1906BFE48(a13);
  }
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907ADE9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    uint64_t v5 = Weak;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005AA0);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      uint64_t v20 = v5;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fullAccuracySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005AA0);
      }
    }
    uint64_t v8 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "identityToken"), "UTF8String");
      *(_DWORD *)__n128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = v9;
      __int16 v19 = 2050;
      uint64_t v20 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#fullAccuracySession Default handler received message", "{\"msg%{public}.0s\":\"#fullAccuracySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 handleMessage:&v11];
    if (v12) {
      sub_1906BFE48(v12);
    }
  }
}

void sub_1907AE09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AE2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, os_activity_scope_state_s state)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1907AE510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1907AE924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AEB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_1907AEB44(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE005AA0);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fullAccuracySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005AA0);
      }
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&_DWORD v8[2] = "";
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#fullAccuracySession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#fullAccuracySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_19073BF10("kCLConnectionMessageDestroyUponDisconnection", buf);
    uint64_t v6 = *(std::__shared_weak_count **)v8;
    if (*(void *)v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v8 + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v6) {
      sub_1906BFE48(v6);
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    if (*(void *)v8) {
      sub_1906BFE48(*(std::__shared_weak_count **)v8);
    }
  }
}

void sub_1907AED34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1906BFE48(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AEF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_1907AEF30(uint64_t a1)
{
  [*(id *)(a1 + 32) destroyConnection];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 tearDown];
}

void *sub_1907AEFD4@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_1907AF038(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1907AF024(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1907AF038(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE005260;
  sub_1907AF0AC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1907AF098(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1907AF0AC(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1906D5C70(__p, __s);
  MEMORY[0x192FCE840](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1907AF104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907AF2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    sub_1906BFE48(a12);
  }
  if (a14) {
    sub_1906BFE48(a14);
  }
  MEMORY[0x192FCEAD0](v28, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

CLBBTimeFreqTransferCallbackAssertion *sub_1907AF414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
    }
    uint64_t v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,reason missing\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
      }
    }
    char v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    uint64_t v8 = "CLBBTFTA,reason missing";
    __int16 v9 = "{\"msg%{public}.0s\":\"CLBBTFTA,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
    }
    uint64_t v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
      }
    }
    char v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    uint64_t v8 = "CLBBTFTA,bundleID or bundlePath needed";
    __int16 v9 = "{\"msg%{public}.0s\":\"CLBBTFTA,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
    }
    uint64_t v11 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback queue\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
      }
    }
    char v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    uint64_t v8 = "CLBBTFTA,nil callback queue";
    __int16 v9 = "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v13[0] = @"kCLConnectionMessageBundleIdentifierKey";
    v13[1] = @"kCLConnectionMessageBundlePathKey";
    v14[0] = a1;
    v14[1] = a2;
    v13[2] = @"kCLConnectionMessagePurposeKey";
    void v14[2] = a3;
    return -[CLBBTimeFreqTransferCallbackAssertion initWithRegistrationMessageName:messageDictionary:dispatchQueue:codeBlock:]([CLBBTimeFreqTransferCallbackAssertion alloc], "initWithRegistrationMessageName:messageDictionary:dispatchQueue:codeBlock:", "kCLConnectionMessageBBTimeFreqTransferAssert", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3], a4, a5);
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
  }
  uint64_t v12 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback block\"}", buf, 0x12u);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
    }
  }
  char v7 = qword_1EB2713E0;
  if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
  {
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    uint64_t v8 = "CLBBTFTA,nil callback block";
    __int16 v9 = "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, buf, 0x12u);
  }
  return 0;
}

void sub_1907AF9F0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)__n128 buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "CLBBTFTA,unexpected message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLCallbackAssertionInternal::CLCallbackAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, BBTimeFreqTransferCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_1907AFBD0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006380);
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    v19[0] = 68289282;
    v19[1] = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2082;
    uint64_t v23 = v6;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"Connection Message\":%{public, location:escape_only}s}", (uint8_t *)v19, 0x1Cu);
  }
  char v7 = (void *)CLConnectionMessage::name(*a2);
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 49) {
      goto LABEL_14;
    }
    char v7 = (void *)*v7;
  }
  else if (v8 != 49)
  {
    goto LABEL_14;
  }
  if (!memcmp(v7, "kCLConnectionMessageBBTimeFreqTransferAssertError", 0x31uLL))
  {
    uint64_t result = CLConnectionMessage::getDictionary(*a2);
    if (*(void *)(v3 + 8))
    {
      id v17 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"CLBBTFTA Error" code:0 userInfo:result];
      return (*(uint64_t (**)(void))(*(void *)(v3 + 8) + 16))();
    }
    return result;
  }
LABEL_14:
  uint64_t v9 = (void *)CLConnectionMessage::name(*a2);
  int v10 = *((char *)v9 + 23);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10 != 49) {
      goto LABEL_20;
    }
LABEL_19:
    if (!memcmp(v9, "kCLConnectionMessageBBTimeFreqTransferMeasurement", 0x31uLL))
    {
      uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
      uint64_t result = *(void *)(v3 + 8);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(result + 16))(result, Dictionary, 0, 0);
      }
      return result;
    }
    goto LABEL_20;
  }
  if (v9[1] == 49)
  {
    uint64_t v9 = (void *)*v9;
    goto LABEL_19;
  }
LABEL_20:
  uint64_t result = CLConnectionMessage::name(*a2);
  int v12 = *(char *)(result + 23);
  if (v12 < 0)
  {
    if (*(void *)(result + 8) != 31) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else if (v12 != 31)
  {
    return result;
  }
  if (*(void *)result == 0x656E6E6F434C436BLL
    && *(void *)(result + 8) == 0x73654D6E6F697463
    && *(void *)(result + 16) == 0x53534E4765676173
    && *(void *)(result + 23) == 0x70614D7461654853)
  {
    uint64_t v16 = CLConnectionMessage::getDictionary(*a2);
    uint64_t result = *(void *)(v3 + 8);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(result + 16))(result, 0, v16, 0);
    }
  }
  return result;
}

os_log_t sub_1907B02B8()
{
  os_log_t result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1E929F6F8 = (uint64_t)result;
  return result;
}

void *sub_1907B1024(void *a1, const std::string *a2)
{
  *a1 = 0;
  uint64_t v4 = (std::string *)sub_1906D5C70(a1 + 1, (char *)&unk_1908D7E77);
  std::string::operator=(v4, a2);
  return a1;
}

void sub_1907B1074(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907B1090(uint64_t a1)
{
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1907B10D8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1)
  {
    if (qword_1EB2713D8 != -1) {
      dispatch_once(&qword_1EB2713D8, &unk_1EE005B40);
    }
    uint64_t v2 = qword_1EB2713D0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)__n128 buf = 136315138;
      char v7 = v3;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "%s,os_transaction already taken, not taking another", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713D8 != -1) {
        dispatch_once(&qword_1EB2713D8, &unk_1EE005B40);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLOSTransactionWrapper::Create()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(void *)a1 = [[CLOSTransaction alloc] initWithDescription:v5];
  }
}

os_log_t sub_1907B12D4()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

void sub_1907B2058()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (byte_1E92A04A0 == 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B60);
    }
    id v0 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEBUG, "CLMM, memory cache and tile count limit already set", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B60);
      }
      uint64_t v1 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "CoreLocation: %s\n", v1);
      if (v1 != (char *)buf) {
        free(v1);
      }
    }
  }
  else
  {
    [MEMORY[0x1E4F64AC8] setMemoryCacheCountLimit:9];
    [MEMORY[0x1E4F64AC8] setMemoryCacheTotalCostLimit:153600];
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B60);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 67109376;
      int v5 = 153600;
      __int16 v6 = 1024;
      int v7 = 9;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d", buf, 0xEu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B60);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    byte_1E92A04A0 = 1;
  }
}

os_log_t sub_1907B2398()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

uint64_t sub_1907B2AA0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  int v5 = *(_OWORD **)a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_OWORD *)a1 = *v5;
    *(unsigned char *)(a1 + 16) = a3;
    sub_1906BFE48(v4);
  }
  else
  {
    *(_OWORD *)a1 = *v5;
    *(unsigned char *)(a1 + 16) = a3;
  }
  return a1;
}

BOOL sub_1907B2B04(unsigned __int8 *a1, uint64_t *a2, void *a3, int a4, double a5)
{
  int v5 = a4;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  *a2 = 0xBFF0000000000000;
  if (!*a1
    || (uint64_t v7 = *((void *)a1 + 8)) == 0
    || !*(unsigned char *)(v7 + 18)
    || (double v11 = *((double *)a1 + 22), v11 > 0.0) && vabdd_f64(a5, v11) <= 0.9)
  {
    if (!a4) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    int v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *((void *)a1 + 8);
      if (v15) {
        int v16 = *(unsigned __int8 *)(v15 + 18);
      }
      else {
        int v16 = -1;
      }
      int v48 = *a1;
      uint64_t v49 = *((void *)a1 + 22);
      *(_DWORD *)__n128 buf = 67240704;
      *(_DWORD *)long double v135 = v16;
      *(_WORD *)&v135[4] = 1026;
      *(_DWORD *)&v135[6] = v48;
      *(_WORD *)double v136 = 2050;
      *(void *)&v136[2] = v49;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,isTunnel,%{public}d,isSnapUsable,%{public}d,lastAssistanceTime,%{public}.1lf", buf, 0x18u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v83 = *((void *)a1 + 8);
    if (v83) {
      int v84 = *(unsigned __int8 *)(v83 + 18);
    }
    else {
      int v84 = -1;
    }
    int v85 = *a1;
    uint64_t v86 = *((void *)a1 + 22);
    *(_DWORD *)double v110 = 67240704;
    *(_DWORD *)&v110[4] = v84;
    *(_WORD *)&v110[8] = 1026;
    *(_DWORD *)&v110[10] = v85;
    *(_WORD *)&v110[14] = 2050;
    *(void *)&v110[16] = v86;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v13);
    goto LABEL_148;
  }
  if (objc_msgSend(MEMORY[0x1E4F64670], "isLocationShiftRequiredForCoordinate:", *((double *)a1 + 12), *((double *)a1 + 13)))
  {
    if (!v5) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    int v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 134349056;
      *(double *)long double v135 = a5;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no TEPA, shifted coordinates", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    *(_DWORD *)double v110 = 134349056;
    *(double *)&v110[4] = a5;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v13);
LABEL_148:
    if (v13 != (char *)buf) {
      free(v13);
    }
    return 0;
  }
  uint64_t v17 = *((void *)a1 + 8);
  uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 9);
  uint64_t v106 = v17;
  float v107 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v101 = a3;
  int v19 = *(unsigned __int8 *)(v17 + 18);
  double v20 = *((double *)a1 + 14);
  *((unsigned char *)a2 + 72) = 0;
  int v100 = v5;
  int v21 = 0;
  if (!v19)
  {
    double v22 = 0.0;
    goto LABEL_88;
  }
  double v22 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v99 = _Q0;
  while (1)
  {
    uint64_t v28 = v106;
    if (!v106) {
      goto LABEL_88;
    }
    if (v21 == 200) {
      break;
    }
    sub_19082373C(v106);
    double v29 = *(double *)(v28 + 40);
    *(double *)a2 = a5;
    uint64_t v30 = v106;
    uint64_t v31 = *(void *)(v106 + 144);
    unint64_t v32 = v31 - *(void *)(v106 + 136);
    if (v32) {
      long long v33 = *(_OWORD *)(v31 - 16);
    }
    else {
      long long v33 = 0uLL;
    }
    *(_OWORD *)(a2 + 1) = v33;
    unint64_t v34 = v32 >> 4;
    double v35 = -1.0;
    if ((int)v34 >= 2)
    {
      double v35 = sub_190823B08(v30, (int)v34 - 2);
      uint64_t v30 = v106;
    }
    *((double *)a2 + 4) = v35;
    a2[8] = *(void *)(v30 + 96);
    if ((int)sub_190824208(v30) >= 1) {
      *((unsigned char *)a2 + 72) = 1;
    }
    double v36 = fmod(*((float *)a1 + 22) - *((double *)a2 + 4), 360.0);
    if (v36 < 0.0) {
      double v36 = v36 + 360.0;
    }
    if (v36 > 180.0) {
      double v36 = v36 + -360.0;
    }
    if (fabs(v36) > 7.5) {
      *((unsigned char *)a2 + 72) = 1;
    }
    uint64_t v37 = v106;
    sub_19082373C(v106);
    double v38 = 1.0 - v20;
    double v39 = *(double *)(v37 + 40);
    uint64_t v104 = 0;
    double v105 = 0.0;
    uint64_t v102 = (uint64_t)&v102;
    unsigned int v103 = &v102;
    *(void *)double v110 = 0;
    *(_OWORD *)&v110[16] = v99;
    *(_OWORD *)double v111 = 0uLL;
    *(void *)&v111[16] = 0xBFF0000000000000;
    uint64_t v123 = 0;
    int v124 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    __int16 v122 = 0;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    memset(v128, 0, sizeof(v128));
    long long v129 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v118 = 0u;
    memset(v119, 0, sizeof(v119));
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v113 = 0u;
    *(_OWORD *)&v111[24] = 0u;
    memset(v112, 0, sizeof(v112));
    unint64_t v133 = 0xBFF0000000000000;
    uint64_t v132 = 0;
    *(double *)&v110[8] = a5;
    if ((*(unsigned int (**)(void, unsigned char *, uint64_t *, void, uint64_t, uint64_t *, uint64_t, double *, double, double))(*(void *)*a3 + 80))(*a3, v110, &v102, 0, 1, &v106, 1, &v105, v20, v39 * (1.0 - v20) + 1.0))
    {
      if (v104 == 1 && v105 >= 0.0)
      {
        uint64_t v40 = v103[2];
        double v41 = (std::__shared_weak_count *)v103[3];
        if (v41) {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v42 = v107;
        uint64_t v106 = v40;
        float v107 = v41;
        int v5 = v100;
        if (v42)
        {
          sub_1906BFE48(v42);
          uint64_t v40 = v106;
        }
        double v43 = sub_19082418C(v40, 0, 1u);
        if (v43 < 0.0) {
          goto LABEL_54;
        }
        double v44 = fmod(v43 - *((double *)a2 + 4), 360.0);
        if (v44 < 0.0) {
          double v44 = v44 + 360.0;
        }
        if (v44 > 180.0) {
          double v44 = v44 + -360.0;
        }
        if (fabs(v44) > 7.5) {
LABEL_54:
        }
          *((unsigned char *)a2 + 72) = 1;
        double v20 = 0.0;
        if (v106) {
          BOOL v45 = *(unsigned char *)(v106 + 18) != 0;
        }
        else {
          BOOL v45 = 0;
        }
        goto LABEL_66;
      }
      if (v100)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
        }
        double v46 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__n128 buf = 67240192;
          *(_DWORD *)long double v135 = v104;
          _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-outbound,%{public}d", buf, 8u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
          }
          int v108 = 67240192;
          int v109 = v104;
          double v47 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
      }
      BOOL v45 = 0;
      *a2 = 0xBFF0000000000000;
    }
    else
    {
      BOOL v45 = 0;
    }
    int v5 = v100;
LABEL_66:
    if (SHIBYTE(v115) < 0) {
      operator delete(*((void **)&v114 + 1));
    }
    double v22 = v22 + v29 * v38;
    sub_190770ADC(&v102);
    ++v21;
    if (!v45) {
      goto LABEL_88;
    }
  }
  *a2 = 0xBFF0000000000000;
  if (v5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v52 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 67240192;
      *(_DWORD *)long double v135 = 201;
      _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,outgoing reached max iterations,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
      }
      *(void *)double v110 = 0xC904020100;
      __double2 v96 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v96);
      if (v96 != (char *)buf) {
        free(v96);
      }
      int v21 = 201;
      int v5 = v100;
    }
    else
    {
      int v21 = 201;
    }
LABEL_88:
    uint64_t v53 = *a2;
    if (*(double *)a2 > 0.0)
    {
      *((double *)a2 + 14) = v22;
      a2[3] = 0x4039000000000000;
      *(_OWORD *)(a2 + 5) = xmmword_190884990;
      a2[7] = 0xBFF0000000000000;
      double v54 = *((double *)a1 + 4);
      if (v54 > 0.0)
      {
        a2[6] = *((void *)a1 + 5);
        *((double *)a2 + 7) = v54;
      }
      *((void *)a1 + 22) = v53;
      a2[11] = 0;
      a2[12] = 0;
      char v55 = a2 + 11;
      *((double *)a2 + 13) = v22;
      uint64_t v56 = *((void *)a1 + 8);
      double v57 = (std::__shared_weak_count *)*((void *)a1 + 9);
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v58 = v107;
      uint64_t v106 = v56;
      float v107 = v57;
      if (v58)
      {
        sub_1906BFE48(v58);
        uint64_t v56 = v106;
      }
      if (*(unsigned char *)(v56 + 18))
      {
        int v59 = 0;
        double v60 = *((double *)a1 + 14);
        __asm { FMOV            V0.2D, #-1.0 }
        long long v98 = _Q0;
        while (1)
        {
          uint64_t v62 = v106;
          if (!v106) {
            goto LABEL_135;
          }
          if (v59 == 200)
          {
            a2[13] = 0xBFF0000000000000;
            void *v55 = 0;
            a2[12] = 0;
            if (v5)
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
              }
              char v73 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 67240192;
                *(_DWORD *)long double v135 = 201;
                _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,incoming reached max iterations,%{public}d", buf, 8u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
                }
                *(void *)double v110 = 0xC904020100;
                double v97 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v97);
                if (v97 != (char *)buf) {
                  free(v97);
                }
              }
            }
            int v59 = 201;
            goto LABEL_135;
          }
          sub_19082373C(v106);
          *((double *)a2 + 13) = *((double *)a2 + 13) + *(double *)(v62 + 40) * v60;
          uint64_t v63 = v106;
          double v64 = *(long long **)(v106 + 136);
          if (*(long long **)(v106 + 144) == v64) {
            long long v65 = 0uLL;
          }
          else {
            long long v65 = *v64;
          }
          *(_OWORD *)char v55 = v65;
          sub_19082373C(v63);
          double v66 = *(double *)(v63 + 40);
          uint64_t v104 = 0;
          double v105 = 0.0;
          uint64_t v102 = (uint64_t)&v102;
          unsigned int v103 = &v102;
          *(void *)double v110 = 0;
          *(_OWORD *)&v110[16] = v98;
          *(_OWORD *)double v111 = 0uLL;
          *(void *)&v111[16] = 0xBFF0000000000000;
          uint64_t v123 = 0;
          int v124 = 0;
          long long v120 = 0u;
          long long v121 = 0u;
          __int16 v122 = 0;
          long long v125 = 0u;
          long long v126 = 0u;
          long long v127 = 0u;
          memset(v128, 0, sizeof(v128));
          long long v129 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v118 = 0u;
          memset(v119, 0, sizeof(v119));
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v113 = 0u;
          *(_OWORD *)&v111[24] = 0u;
          memset(v112, 0, sizeof(v112));
          unint64_t v133 = 0xBFF0000000000000;
          uint64_t v132 = 0;
          *(double *)&v110[8] = a5;
          if (!(*(unsigned int (**)(void, unsigned char *, void, uint64_t *, void, uint64_t *, uint64_t, double *, double, double))(*(void *)*v101 + 80))(*v101, v110, 0, &v102, 0, &v106, 1, &v105, v60, v66 * v60 + 1.0))goto LABEL_117; {
          if (v104 != 1 || v105 < 0.0)
          }
            break;
          uint64_t v67 = v103[2];
          double v68 = (std::__shared_weak_count *)v103[3];
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v69 = v107;
          uint64_t v106 = v67;
          float v107 = v68;
          if (v69)
          {
            sub_1906BFE48(v69);
            uint64_t v67 = v106;
          }
          double v60 = 1.0;
          if (!v67) {
            goto LABEL_117;
          }
          BOOL v70 = *(unsigned char *)(v67 + 18) != 0;
LABEL_118:
          if (SHIBYTE(v115) < 0) {
            operator delete(*((void **)&v114 + 1));
          }
          sub_190770ADC(&v102);
          ++v59;
          if (!v70) {
            goto LABEL_135;
          }
        }
        a2[13] = 0xBFF0000000000000;
        void *v55 = 0;
        a2[12] = 0;
        if (v5)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
          }
          unint64_t v71 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 67240192;
            *(_DWORD *)long double v135 = v104;
            _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-inbound,%{public}d", buf, 8u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
            }
            int v108 = 67240192;
            int v109 = v104;
            double v72 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v72);
            if (v72 != (char *)buf) {
              free(v72);
            }
            BOOL v70 = 0;
            int v5 = v100;
            goto LABEL_118;
          }
        }
LABEL_117:
        BOOL v70 = 0;
        goto LABEL_118;
      }
      int v59 = 0;
LABEL_135:
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
      }
      char v74 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v75 = a2[1];
        uint64_t v76 = a2[2];
        uint64_t v77 = a2[11];
        uint64_t v78 = a2[12];
        uint64_t v79 = a2[6];
        uint64_t v80 = a2[7];
        uint64_t v81 = a2[13];
        uint64_t v82 = a2[14];
        *(_DWORD *)__n128 buf = 134351617;
        *(double *)long double v135 = a5;
        *(_WORD *)&v135[8] = 2049;
        *(void *)double v136 = v75;
        *(_WORD *)&v136[8] = 2049;
        uint64_t v137 = v76;
        __int16 v138 = 2049;
        uint64_t v139 = v77;
        __int16 v140 = 2049;
        uint64_t v141 = v78;
        __int16 v142 = 2050;
        uint64_t v143 = v79;
        __int16 v144 = 2050;
        uint64_t v145 = v80;
        __int16 v146 = 2050;
        uint64_t v147 = v81;
        __int16 v148 = 2050;
        uint64_t v149 = v82;
        __int16 v150 = 1026;
        int v151 = v21;
        __int16 v152 = 1026;
        int v153 = v59;
        _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,TEPA,ell,%{private}.7lf,%{private}.7lf,sll,%{private}.7lf,%{private}.7lf,alt,%{public}.1lf,vUnc,%{public}.1lf,length,%{public}.2lf,distFromCurrentParticle,%{public}.1lf,iterCountOut,%{public}d,iterCountIn,%{public}d", buf, 0x68u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
        }
        uint64_t v87 = a2[1];
        uint64_t v88 = a2[2];
        uint64_t v89 = a2[11];
        uint64_t v90 = a2[12];
        uint64_t v91 = a2[6];
        uint64_t v92 = a2[7];
        uint64_t v93 = a2[13];
        uint64_t v94 = a2[14];
        *(_DWORD *)double v110 = 134351617;
        *(double *)&v110[4] = a5;
        *(_WORD *)&v110[12] = 2049;
        *(void *)&v110[14] = v87;
        *(_WORD *)&v110[22] = 2049;
        *(void *)&v110[24] = v88;
        *(_WORD *)double v111 = 2049;
        *(void *)&v111[2] = v89;
        *(_WORD *)&v111[10] = 2049;
        *(void *)&v111[12] = v90;
        *(_WORD *)&v111[20] = 2050;
        *(void *)&v111[22] = v91;
        *(_WORD *)&v111[30] = 2050;
        *(void *)&v111[32] = v92;
        LOWORD(v112[0]) = 2050;
        *(void *)((char *)v112 + 2) = v93;
        HIWORD(v112[2]) = 2050;
        *(void *)&v112[3] = v94;
        LOWORD(v112[5]) = 1026;
        *(_DWORD *)((char *)&v112[5] + 2) = v21;
        HIWORD(v112[6]) = 1026;
        v112[7] = v59;
        double v95 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v95);
        if (v95 != (char *)buf) {
          free(v95);
        }
      }
    }
  }
  BOOL v50 = *(double *)a2 > 0.0;
  if (v107) {
    sub_1906BFE48(v107);
  }
  return v50;
}

void sub_1907B3C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24) {
    sub_1906BFE48(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907B3CC8(double *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a2 + 96);
  double v9 = *(double *)(a2 + 76);
  double v10 = *(double *)(a2 + 44);
  if (v10 >= 0.0)
  {
    a1[6] = v9;
    a1[1] = v10;
  }
  if (!*(unsigned char *)a1
    || (uint64_t v11 = *((void *)a1 + 8)) == 0
    || ((double v12 = a1[7], v13 = v9 - v12, v12 > 0.0) ? (v14 = v13 > 5.0) : (v14 = 1),
        v14
     || !*(unsigned char *)(v11 + 18)
     || (v8 == 3 || a1[2] <= 0.0) && ((v15 = a1[6], v15 <= 0.0) || (double v13 = a1[1], v13 < 0.0) || v9 - v15 > 15.0)))
  {
    if (!a4) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v21 = *(void *)(a2 + 76);
      uint64_t v22 = *((void *)a1 + 8);
      if (v22) {
        int v23 = *(unsigned __int8 *)(v22 + 18);
      }
      else {
        int v23 = -1;
      }
      int v24 = *(unsigned __int8 *)a1;
      uint64_t v26 = *((void *)a1 + 6);
      uint64_t v25 = *((void *)a1 + 7);
      uint64_t v27 = *((void *)a1 + 1);
      uint64_t v28 = *((void *)a1 + 2);
      *(_DWORD *)__n128 buf = 134351104;
      unint64_t v126 = v21;
      __int16 v127 = 1026;
      *(_DWORD *)uint64_t v128 = v23;
      *(_WORD *)&v128[4] = 1026;
      *(_DWORD *)&v128[6] = v24;
      *(_WORD *)long long v129 = 2050;
      *(void *)&v129[2] = v25;
      *(_WORD *)long long v130 = 2050;
      *(void *)&v130[2] = 0x4014000000000000;
      *(_WORD *)long long v131 = 2050;
      *(void *)&v131[2] = v27;
      *(_WORD *)uint64_t v132 = 2050;
      *(void *)&v132[2] = v26;
      __int16 v133 = 2050;
      uint64_t v134 = 0x402E000000000000;
      __int16 v135 = 2050;
      uint64_t v136 = v28;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,isTunnel,%{public}d,isSnapUsable,%{public}d,particleTime,%{public}.2lf,particleTimeOut,%{public}.1lf,speed,%{public}.2lf,speedTime,%{public}.2lf,speedTimeOut,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x54u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v71 = *(void *)(a2 + 76);
    uint64_t v72 = *((void *)a1 + 8);
    if (v72) {
      int v73 = *(unsigned __int8 *)(v72 + 18);
    }
    else {
      int v73 = -1;
    }
    int v74 = *(unsigned __int8 *)a1;
    uint64_t v76 = *((void *)a1 + 6);
    uint64_t v75 = *((void *)a1 + 7);
    uint64_t v77 = *((void *)a1 + 1);
    uint64_t v78 = *((void *)a1 + 2);
    *(_DWORD *)float v107 = 134351104;
    *(void *)&v107[4] = v71;
    *(_WORD *)&v107[12] = 1026;
    *(_DWORD *)&v107[14] = v73;
    *(_WORD *)&v107[18] = 1026;
    *(_DWORD *)&v107[20] = v74;
    *(_WORD *)&v107[24] = 2050;
    *(void *)&v107[26] = v75;
    *(_WORD *)&v107[34] = 2050;
    *(void *)&v107[36] = 0x4014000000000000;
    *(_WORD *)&v107[44] = 2050;
    *(void *)&v107[46] = v77;
    *(_WORD *)&v107[54] = 2050;
    *(void *)&v107[56] = v76;
    *(_WORD *)&v107[64] = 2050;
    *(void *)&v107[66] = 0x402E000000000000;
    *(_WORD *)&v107[74] = 2050;
    *(void *)&v107[76] = v78;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
    goto LABEL_140;
  }
  if (objc_msgSend(MEMORY[0x1E4F64670], "isLocationShiftRequiredForCoordinate:", a1[12], a1[13], v13)
    && *(_DWORD *)(a2 + 132) != 2)
  {
    if (!a4) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    int v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v17 = *(void *)(a2 + 76);
      *(_DWORD *)__n128 buf = 134349056;
      unint64_t v126 = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v18 = *(void *)(a2 + 76);
    *(_DWORD *)float v107 = 134349056;
    *(void *)&v107[4] = v18;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
LABEL_140:
    if (v19 != (char *)buf) {
      free(v19);
    }
    return 0;
  }
  double v31 = *(double *)(a2 + 76) - a1[7];
  if (v31 < 0.0)
  {
    if (!a4) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    unint64_t v32 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v33 = *(void *)(a2 + 76);
      uint64_t v34 = *((void *)a1 + 7);
      *(_DWORD *)__n128 buf = 134349312;
      unint64_t v126 = v33;
      __int16 v127 = 2050;
      *(void *)uint64_t v128 = v34;
      _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,time lower than particleTime, %{public}.2lf", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v35 = *(void *)(a2 + 76);
    uint64_t v36 = *((void *)a1 + 7);
    *(_DWORD *)float v107 = 134349312;
    *(void *)&v107[4] = v35;
    *(_WORD *)&v107[12] = 2050;
    *(void *)&v107[14] = v36;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
    goto LABEL_140;
  }
  if (v8 == 3 || (double v37 = a1[2], v37 <= 0.0))
  {
    double v37 = a1[1];
  }
  else if (a1[1] >= v37)
  {
    double v37 = a1[1];
  }
  double v38 = v31 * v37;
  if (v31 * v37 <= 225.0) {
    double v39 = v31 * v37;
  }
  else {
    double v39 = 225.0;
  }
  if (v31 * v37 > 225.0 && a4 != 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v41 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v42 = *(void *)(a2 + 76);
      *(_DWORD *)__n128 buf = 134349568;
      unint64_t v126 = v42;
      __int16 v127 = 2050;
      *(double *)uint64_t v128 = v38;
      *(_WORD *)&v128[8] = 2050;
      *(void *)long long v129 = 0x406C200000000000;
      _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,limit distance to propagate,orig,%{public}.1lf,new,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
      }
      uint64_t v79 = *(void *)(a2 + 76);
      *(_DWORD *)float v107 = 134349568;
      *(void *)&v107[4] = v79;
      *(_WORD *)&v107[12] = 2050;
      *(double *)&v107[14] = v38;
      *(_WORD *)&v107[22] = 2050;
      *(void *)&v107[24] = 0x406C200000000000;
      uint64_t v80 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v80);
      if (v80 != (char *)buf) {
        free(v80);
      }
    }
    double v39 = 225.0;
  }
  *(void *)float v107 = 0;
  *(void *)&v107[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v85 = _Q0;
  *(_OWORD *)&v107[16] = _Q0;
  *(void *)&v107[32] = 0;
  *(void *)&unsigned char v107[40] = 0;
  *(void *)&v107[48] = 0xBFF0000000000000;
  uint64_t v117 = 0;
  int v118 = 0;
  memset(&v115[32], 0, 32);
  __int16 v116 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  memset(v122, 0, 27);
  memset(&v122[32], 0, 48);
  memset(v115, 0, 30);
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  memset(&v107[56], 0, 32);
  unint64_t v124 = 0xBFF0000000000000;
  uint64_t v123 = 0;
  v88[0] = (uint64_t)v88;
  v88[1] = (uint64_t)v88;
  unint64_t v89 = 0;
  uint64_t v87 = 0;
  if (((*(uint64_t (**)(void, unsigned char *, uint64_t *, void, uint64_t, unsigned __int8 *, void, uint64_t *, double, double))(*(void *)*a3 + 80))(*a3, v107, v88, 0, 1, (unsigned __int8 *)a1 + 64, *((unsigned __int8 *)a1 + 84), &v87, a1[14], v39) & 1) == 0)
  {
    if (!a4) {
      goto LABEL_83;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v49 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,roadsAtIntersection returned false", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_83;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    *(_WORD *)uint64_t v102 = 0;
    int v48 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v48);
    goto LABEL_149;
  }
  if (v89 >= 2)
  {
    if (!a4) {
      goto LABEL_83;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v47 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 134349312;
      unint64_t v126 = v89;
      __int16 v127 = 2050;
      *(double *)uint64_t v128 = v39;
      _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,multi-outbound,%{public}lu,intersection within the distance,%{public}.2lf, needed to be travelled returned", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_83;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    *(_DWORD *)uint64_t v102 = 134349312;
    *(void *)&v102[4] = v89;
    __int16 v103 = 2050;
    double v104 = v39;
    int v48 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v48);
LABEL_149:
    if (v48 != (char *)buf) {
      free(v48);
    }
LABEL_83:
    uint64_t v29 = 0;
    goto LABEL_124;
  }
  sub_1907B4FC4((uint64_t)v102, (uint64_t)(a1 + 8));
  v86[0] = v86;
  v86[1] = v86;
  v86[2] = 0;
  if (((*(uint64_t (**)(void, unsigned char *, void *, double))(*(void *)*a3 + 88))(*a3, v102, v86, v39) & 1) == 0)
  {
    if (!a4) {
      goto LABEL_122;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v61 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v61, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,moveOnRoad returned false", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_122;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_156;
    }
    goto LABEL_159;
  }
  if (!*(void *)v102)
  {
    if (!a4) {
      goto LABEL_122;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    uint64_t v62 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_FAULT, "CLMM,NotPropagating,NULL road", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_122;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    LOWORD(v90) = 0;
    uint64_t v63 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v63);
    goto LABEL_157;
  }
  if (*(unsigned char *)(*(void *)v102 + 18))
  {
    if (a4)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
      }
      BOOL v50 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v51 = *(void *)(a2 + 76);
        uint64_t v52 = *((void *)a1 + 1);
        uint64_t v53 = *((void *)a1 + 2);
        *(_DWORD *)__n128 buf = 134350337;
        unint64_t v126 = v51;
        __int16 v127 = 2049;
        *(void *)uint64_t v128 = v106;
        *(_WORD *)&v128[8] = 2049;
        *(void *)long long v129 = *((void *)&v106 + 1);
        *(_WORD *)&v129[8] = 2050;
        *(double *)long long v130 = v105;
        *(_WORD *)&v130[8] = 2050;
        *(void *)long long v131 = v52;
        *(_WORD *)&v131[8] = 2050;
        *(void *)uint64_t v132 = v53;
        _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Propagating,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,speed,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x3Eu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
        }
        uint64_t v81 = *(void *)(a2 + 76);
        uint64_t v82 = *((void *)a1 + 1);
        uint64_t v83 = *((void *)a1 + 2);
        int v90 = 134350337;
        uint64_t v91 = v81;
        __int16 v92 = 2049;
        uint64_t v93 = v106;
        __int16 v94 = 2049;
        uint64_t v95 = *((void *)&v106 + 1);
        __int16 v96 = 2050;
        double v97 = v105;
        __int16 v98 = 2050;
        uint64_t v99 = v82;
        __int16 v100 = 2050;
        uint64_t v101 = v83;
        int v84 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v84);
        if (v84 != (char *)buf) {
          free(v84);
        }
      }
    }
    double v54 = *(double *)(a2 + 76);
    a1[6] = v54;
    *(_OWORD *)(a2 + 4) = v106;
    *(double *)(a2 + 60) = v105;
    *(void *)(a2 + 52) = 0x3FC999999999999ALL;
    *(void *)(a2 + 68) = 0x4008000000000000;
    *(_OWORD *)(a2 + 28) = xmmword_190882480;
    int v55 = *(_DWORD *)(a2 + 96);
    if (v55 != 3) {
      *(_OWORD *)(a2 + 44) = v85;
    }
    double v56 = a1[4];
    if (v56 <= 0.0)
    {
      double v58 = 0.0;
      double v60 = -1.0;
    }
    else
    {
      double v57 = (double *)(a2 + 36);
      double v58 = a1[5];
      *(double *)(a2 + 28) = v58;
      double v59 = v56 + v31 * 0.15;
      *(double *)(a2 + 36) = v59;
      if (v59 > 200.0) {
        double v57 = (double *)&unk_1908849A0;
      }
      double v60 = *v57;
      *(double *)(a2 + 36) = *v57;
    }
    *(void *)(a2 + 20) = 0x4024000000000000;
    long long v65 = (double *)(a2 + 20);
    double v66 = 10.0;
    if ((v55 & 0xFFFFFFF7) == 1)
    {
      double v67 = a1[3] + v31 * 0.5;
      double *v65 = v67;
      double v68 = (double *)&unk_1908849A8;
      if (v67 >= 10.0) {
        double v68 = v65;
      }
      double v69 = *v68;
      double *v65 = *v68;
      BOOL v70 = (double *)&unk_1908849B0;
      if (v69 <= 149.0) {
        BOOL v70 = v65;
      }
      double v66 = *v70;
      double *v65 = *v70;
    }
    uint64_t v29 = 1;
    sub_1907B506C((uint64_t)a1, (uint64_t *)v102, 1, v54, v66, v58, v60);
    goto LABEL_123;
  }
  if (a4)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v64 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,solution moved away from tunnel", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_156:
        LOWORD(v90) = 0;
        uint64_t v63 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v63);
LABEL_157:
        if (v63 != (char *)buf) {
          free(v63);
        }
        goto LABEL_122;
      }
LABEL_159:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
      goto LABEL_156;
    }
  }
LABEL_122:
  uint64_t v29 = 0;
LABEL_123:
  sub_1907B5AD8(v86);
  sub_1907B515C(v102);
LABEL_124:
  sub_190770ADC(v88);
  if (SHIBYTE(v111) < 0) {
    operator delete(*((void **)&v110 + 1));
  }
  return v29;
}

void sub_1907B4F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  sub_1907B5AD8(&a14);
  sub_1907B515C(&a29);
  sub_190770ADC(&a18);
  if (a64 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907B4FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 65);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 65) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1907B5854((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  return a1;
}

void sub_1907B5054(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1906BFE48(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907B506C(uint64_t a1, uint64_t *a2, char a3, double a4, double a5, double a6, double a7)
{
  *(double *)(a1 + 56) = a4;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  double v15 = (uint64_t *)(a1 + 64);
  int v16 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  if (v16) {
    sub_1906BFE48(v16);
  }
  long long v17 = *((_OWORD *)a2 + 1);
  long long v18 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 112) = a2[6];
  *(_OWORD *)(a1 + 80) = v17;
  *(_OWORD *)(a1 + 96) = v18;
  long long v19 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 120) = v19;
  if (v15 != a2) {
    sub_1907B5974((char *)(a1 + 152), (char *)a2[11], a2[12], 0x8E38E38E38E38E39 * ((a2[12] - a2[11]) >> 3));
  }
  *(unsigned char *)a1 = a3;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 24) = a5;
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20)
  {
    double v21 = *(double *)(v20 + 32);
    if (v21 <= 0.0) {
      double v21 = -1.0;
    }
    *(double *)(a1 + 16) = v21;
  }
}

void *sub_1907B515C(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

void sub_1907B519C(uint64_t a1, long long *a2)
{
  double v3 = *((double *)a2 + 1);
  *(double *)a1 = v3;
  if (!*((unsigned char *)a2 + 264))
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v8 = a1 + 64;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
    goto LABEL_9;
  }
  double v26 = 0.0;
  double v27 = 0.0;
  double v24 = 0.0;
  double v25 = 0.0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 8))
  {
    double v5 = v3 - *(double *)(a1 + 72);
    if (v5 >= 0.0
      && v5 <= 2.2
      && sub_1906DA778((double *)(a1 + 496), &v25, &v24, &v28, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *(double *)(a1 + 352), *(double *)(a1 + 360), *(double *)(a1 + 136)))
    {
      double v6 = v24;
      double v7 = v25;
      if (sqrt(v6 * v6 + v7 * v7) / v5 <= 3.8
        && (*((unsigned char *)a2 + 228)
         || *((double *)a2 + 12) <= 2.2
         || sub_1906DA778((double *)(a1 + 496), &v27, &v26, &v28, *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9), *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 136))))
      {
        double v22 = 0.0;
        sub_190839A78((double *)(a1 + 496), &v23, &v22, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *((double *)a2 + 21), *((double *)a2 + 7), *((double *)a2 + 8));
        double v21 = v22;
        if (v22 > *(double *)(a1 + 48)) {
          *(unsigned char *)(a1 + 56) = 1;
        }
        *(double *)(a1 + 48) = v21;
        double v10 = v26;
        double v11 = v27;
        int v9 = *(_DWORD *)(a1 + 8) + 1;
        goto LABEL_13;
      }
    }
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
    uint64_t v8 = a1 + 64;
LABEL_9:
    sub_1907B5B3C(v8);
    return;
  }
  int v9 = 1;
  double v6 = 0.0;
  double v7 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
LABEL_13:
  double v12 = *(double *)(a1 + 24);
  double v13 = v11 + *(double *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v13;
  *(double *)(a1 + 24) = v10 + v12;
  double v14 = v6 + *(double *)(a1 + 40);
  *(double *)(a1 + 32) = v7 + *(double *)(a1 + 32);
  *(double *)(a1 + 40) = v14;
  long long v15 = *a2;
  long long v16 = a2[1];
  long long v17 = a2[3];
  *(_OWORD *)(a1 + 96) = a2[2];
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  long long v18 = a2[4];
  long long v19 = a2[5];
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 160) = a2[6];
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 128) = v18;
  *(_OWORD *)(a1 + 144) = v19;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 8));

  memcpy((void *)(a1 + 216), (char *)a2 + 152, 0x118uLL);
}

uint64_t sub_1907B53E4(uint64_t *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a1 + 2) < 4u) {
    return 0;
  }
  double v3 = sqrt(*((double *)a1 + 3) * *((double *)a1 + 3) + *((double *)a1 + 2) * *((double *)a1 + 2));
  double v4 = sqrt(*((double *)a1 + 5) * *((double *)a1 + 5) + *((double *)a1 + 4) * *((double *)a1 + 4));
  if (*((unsigned char *)a1 + 56))
  {
    double v5 = v3 - v4;
    if (*((double *)a1 + 6) > 15.0 && v5 > 29.0)
    {
      if (a2)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
        }
        double v6 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *a1;
          uint64_t v8 = a1[6];
          *(_DWORD *)__n128 buf = 134350080;
          uint64_t v17 = v7;
          __int16 v18 = 2050;
          *(void *)long long v19 = v8;
          *(_WORD *)&v19[8] = 2050;
          *(double *)&v19[10] = v3;
          *(_WORD *)&v19[18] = 2050;
          *(double *)&v19[20] = v4;
          *(_WORD *)&v19[28] = 2050;
          *(void *)&v19[30] = 0x403D000000000000;
          _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_INFO, "CLMM,%{public}.1lf,detected stuck,alongTrackRawToSnap,%{public}.1lf,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x34u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
          }
          long long v15 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "CoreLocation: %s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      return 1;
    }
  }
  else
  {
    double v5 = v3 - v4;
  }
  if (v5 <= 5.0 || a2 == 0) {
    return 0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
  }
  double v11 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *a1;
    int v13 = *((unsigned __int8 *)a1 + 56);
    *(_DWORD *)__n128 buf = 134350080;
    uint64_t v17 = v12;
    __int16 v18 = 1026;
    *(_DWORD *)long long v19 = v13;
    *(_WORD *)&v19[4] = 2050;
    *(double *)&void v19[6] = v3;
    *(_WORD *)&v19[14] = 2050;
    *(double *)&v19[16] = v4;
    *(_WORD *)&v19[24] = 2050;
    *(void *)&v19[26] = 0x403D000000000000;
    _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf,isMovingAway,%{public}d,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x30u);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005B80);
    }
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

os_log_t sub_1907B5824()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void *sub_1907B5854(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    os_log_t result = sub_1907B58D0(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      os_log_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1907B58B4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1907B58D0(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_190718FD4();
  }
  os_log_t result = (char *)sub_1907B5928((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_1907B5928(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_190718124();
  }
  return operator new(72 * a2);
}

char *sub_1907B5974(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_190718FD4();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v12 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v12 = v11;
    }
    os_log_t result = sub_1907B58D0(v7, v12);
    double v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    int v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      long long v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    os_log_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    int v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    long long v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    os_log_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *int v13 = &v9[v17];
  return result;
}

void *sub_1907B5AD8(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    os_log_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        os_log_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_1907B5B3C(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(void *)uint64_t v7 = 0xBFF0000000000000;
  *(void *)&v9[120] = 0;
  *(_DWORD *)&v9[128] = 0;
  memset(&v9[80], 0, 34);
  memset(&v9[136], 0, 75);
  memset(&v9[216], 0, 56);
  memset(&v7[8], 0, 80);
  memset(v9, 0, 78);
  long long v8 = 0u;
  *(void *)&v9[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  *(_OWORD *)a1 = 0uLL;
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&v7[48];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&v7[64];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v7[16];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&v7[32];
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)&v7[80]);
  memcpy((void *)(a1 + 152), v9, 0x118uLL);
  if (SHIBYTE(v8) < 0) {
    operator delete(*(void **)&v7[80]);
  }
}

void sub_1907B5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CLGetUncertaintyScaleFactors(unsigned int a1, double *a2, double *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    if (a1 - 100 > 0xFFFFFF9C)
    {
      *a2 = sub_1907B6C90(a1, dbl_1908849B8);
      *a3 = sub_1907B6C90(a1, dbl_190884A48);
      if (qword_1E929F608 != -1) {
        dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
      }
      unint64_t v12 = qword_1E929F600;
      if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEBUG))
      {
        double v13 = *a2;
        double v14 = *a3;
        *(_DWORD *)__n128 buf = 67240704;
        unsigned int v17 = a1;
        __int16 v18 = 2050;
        double v19 = v13;
        __int16 v20 = 2050;
        double v21 = v14;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "#CLEU,CLGetUncertaintyScaleFactors,conf,%{public}d,horzSF,%{public}f,vertSF,%{public}f", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F608 != -1) {
          dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
        }
        long long v15 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGetUncertaintyScaleFactors(unsigned int, double *, double *)", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      return 1;
    }
    else
    {
      if (qword_1E929F608 != -1) {
        dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
      }
      double v5 = qword_1E929F600;
      if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 67240192;
        unsigned int v17 = a1;
        _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_ERROR, "#CLEU,CLGetUncertaintyScaleFactors,confidence out of bounds,%{public}d", buf, 8u);
      }
      int v6 = sub_1906CB57C(115, 0);
      uint64_t result = 0;
      if (v6)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F608 == -1) {
          goto LABEL_17;
        }
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
    }
    long long v8 = qword_1E929F600;
    if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "#CLEU,CLGetUncertaintyScaleFactors,input horzontal or vertical SF pointer is NULL", buf, 2u);
    }
    int v9 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F608 == -1)
      {
LABEL_17:
        unint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGetUncertaintyScaleFactors(unsigned int, double *, double *)", "CoreLocation: %s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return 0;
      }
LABEL_31:
      dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
      goto LABEL_17;
    }
  }
  return result;
}

double sub_1907B6C90(unsigned int a1, double *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 <= a1)
  {
    if (*((_DWORD *)a2 + 32) >= a1)
    {
      for (uint64_t i = 0; i != 18; i += 2)
      {
        unsigned int v10 = LODWORD(a2[i]);
        if (v10 == a1) {
          return a2[i + 1];
        }
        if (i * 8 && v10 > a1) {
          return a2[i + 1] + -(a2[i + 1] - a2[i - 1]) / (double)(v10 - LODWORD(a2[i - 2])) * (double)(v10 - a1);
        }
      }
      if (qword_1E929F608 != -1) {
        dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
      }
      uint64_t v11 = qword_1E929F600;
      if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,failed to find table points bounding x", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return a2[17];
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F608 == -1) {
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1E929F608 != -1) {
        dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
      }
      uint64_t v7 = qword_1E929F600;
      if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
      {
        int v8 = *((_DWORD *)a2 + 32);
        *(_DWORD *)__n128 buf = 67240448;
        unsigned int v15 = a1;
        __int16 v16 = 1026;
        int v17 = v8;
        _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,x is greater than the last point in table,x,%{public}d,table[size-1].first,%{public}d", buf, 0xEu);
      }
      if (!sub_1906CB57C(115, 0)) {
        return a2[17];
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F608 == -1)
      {
LABEL_34:
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "double linearInterp(unsigned int, std::array<std::pair<unsigned int, double>, size>) [std::string::size_type size = 9UL]", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return a2[17];
      }
    }
    dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
    goto LABEL_34;
  }
  if (qword_1E929F608 != -1) {
    dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
  }
  uint64_t v4 = qword_1E929F600;
  if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)a2;
    *(_DWORD *)__n128 buf = 67240448;
    unsigned int v15 = a1;
    __int16 v16 = 1026;
    int v17 = v5;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,x is less than the first point in table,x,%{public}d,table[0].first,%{public}d", buf, 0xEu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F608 != -1) {
      dispatch_once(&qword_1E929F608, &unk_1EE005BA0);
    }
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "double linearInterp(unsigned int, std::array<std::pair<unsigned int, double>, size>) [std::string::size_type size = 9UL]", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return a2[1];
}

os_log_t sub_1907B713C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1E929F600 = (uint64_t)result;
  return result;
}

CLBeaconRegion *sub_1907B71B4()
{
  os_log_t result = [[CLBeaconRegion alloc] initWithIdentifier:@"CLBeaconRegionAnyIdentifier"];
  qword_1E92A04A8 = (uint64_t)result;
  return result;
}

void sub_1907B8648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    sub_1906BFE48(a12);
  }
  if (a14) {
    sub_1906BFE48(a14);
  }
  MEMORY[0x192FCEAD0](v28, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

CLGnssExtensionsClient *sub_1907B8760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
    }
    int v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,reason missing\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "CLGnssExtensions,reason missing";
    int v9 = "{\"msg%{public}.0s\":\"CLGnssExtensions,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
    }
    unsigned int v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "CLGnssExtensions,bundleID or bundlePath needed";
    int v9 = "{\"msg%{public}.0s\":\"CLGnssExtensions,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
    }
    uint64_t v11 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback queue\"}", buf, 0x12u);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
      }
    }
    uint64_t v7 = qword_1EB2713E0;
    if (!os_signpost_enabled((os_log_t)qword_1EB2713E0)) {
      return 0;
    }
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "CLGnssExtensions,nil callback queue";
    int v9 = "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v13[0] = @"kCLConnectionMessageBundleIdentifierKey";
    v13[1] = @"kCLConnectionMessageBundlePathKey";
    v14[0] = a1;
    v14[1] = a2;
    v13[2] = @"kCLConnectionMessagePurposeKey";
    void v14[2] = a3;
    return -[CLGnssExtensionsClient initWithRegistrationMessageName:messageDictionary:dispatchQueue:codeBlock:]([CLGnssExtensionsClient alloc], "initWithRegistrationMessageName:messageDictionary:dispatchQueue:codeBlock:", "kCLConnectionMessageGnssExtensionsClient", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3], a4, a5);
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
  }
  unint64_t v12 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback block\"}", buf, 0x12u);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
    }
  }
  uint64_t v7 = qword_1EB2713E0;
  if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
  {
    *(_DWORD *)__n128 buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    int v8 = "CLGnssExtensions,nil callback block";
    int v9 = "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, buf, 0x12u);
  }
  return 0;
}

void sub_1907B8CCC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)__n128 buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "CLGnssExtensions,unexpected message,%s", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
    }
    CLConnectionMessage::name(*a2);
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLGnssExtensionsCallbackAssertionInternal::CLGnssExtensionsCallbackAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, GnssExtensionsCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_1907B8EAC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006360);
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    v13[0] = 68289282;
    v13[1] = 0;
    __int16 v14 = 2082;
    unsigned int v15 = "";
    __int16 v16 = 2082;
    uint64_t v17 = v6;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"Connection Message\":%{public, location:escape_only}s}", (uint8_t *)v13, 0x1Cu);
  }
  uint64_t v7 = (void *)CLConnectionMessage::name(*a2);
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 45) {
      goto LABEL_14;
    }
    uint64_t v7 = (void *)*v7;
  }
  else if (v8 != 45)
  {
    goto LABEL_14;
  }
  if (!memcmp(v7, "kCLConnectionMessageGnssExtensionsClientError", 0x2DuLL))
  {
    uint64_t result = CLConnectionMessage::getDictionary(*a2);
    if (*(void *)(v3 + 8))
    {
      id v12 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"CLGnssExtensions Error" code:0 userInfo:result];
      return (*(uint64_t (**)(void))(*(void *)(v3 + 8) + 16))();
    }
    return result;
  }
LABEL_14:
  uint64_t result = CLConnectionMessage::name(*a2);
  int v10 = *(char *)(result + 23);
  if (v10 < 0)
  {
    if (*(void *)(result + 8) != 38) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else if (v10 != 38)
  {
    return result;
  }
  uint64_t result = memcmp((const void *)result, "kCLConnectionMessageGnssExtensionsData", 0x26uLL);
  if (!result)
  {
    uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
    uint64_t result = *(void *)(v3 + 8);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, Dictionary, 0);
    }
  }
  return result;
}

BOOL sub_1907B90B0(double *a1, double *a2)
{
  double v2 = *a1;
  if (*a1 >= 51.1 && v2 <= 61.1 && *a2 >= -13.2 && *a2 <= 1.87) {
    return 1;
  }
  if (v2 >= 49.866 && v2 <= 61.1 && *a2 >= -6.48 && *a2 <= 0.15) {
    return 1;
  }
  if (v2 >= 50.688 && v2 <= 61.1 && *a2 >= 0.15 && *a2 <= 1.43) {
    return 1;
  }
  if (v2 >= 29.32 && v2 <= 35.8 && *a2 >= 130.0 && *a2 <= 141.0) {
    return 1;
  }
  if (v2 >= 35.8 && v2 <= 41.3 && *a2 >= 135.8 && *a2 <= 142.95) {
    return 1;
  }
  if (v2 >= 41.3 && v2 <= 45.7 && *a2 >= 139.5 && *a2 <= 145.8) {
    return 1;
  }
  if (v2 >= 25.7 && v2 <= 34.756 && *a2 >= 128.837 && *a2 <= 130.0) {
    return 1;
  }
  if (v2 >= 23.861 && v2 <= 27.891 && *a2 >= 122.927 && *a2 <= 131.426) {
    return 1;
  }
  if (v2 >= -45.0 && v2 <= 4.3 && *a2 >= 104.0 && *a2 <= 156.25) {
    return 1;
  }
  if (v2 >= 0.0 && v2 <= 7.408 && *a2 >= 108.75 && *a2 <= 119.215) {
    return 1;
  }
  if (v2 >= -14.25 && v2 <= 8.35 && *a2 >= 88.9289 && *a2 <= 108.75) {
    return 1;
  }
  if (v2 >= -56.4 && v2 <= -28.0)
  {
    double v3 = *a2;
    if (*a2 >= 155.0 && v3 <= 180.1) {
      return 1;
    }
    if (v3 >= -180.1 && v3 <= -175.74) {
      return 1;
    }
  }
  if (v2 >= -9.0 && v2 <= 27.3 && *a2 >= 67.0 && *a2 <= 92.17) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 35.44 && *a2 >= 71.746 && *a2 <= 77.876) {
    return 1;
  }
  if (v2 >= 26.29 && v2 <= 27.8959 && *a2 >= 79.734 && *a2 <= 88.251) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 29.15 && *a2 >= 77.83 && *a2 <= 84.154) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 30.0 && *a2 >= 77.83 && *a2 <= 82.4) {
    return 1;
  }
  if (v2 >= 24.18 && v2 <= 29.338 && *a2 >= 63.36 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= 29.338 && v2 <= 30.917 && *a2 >= 66.437 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= 30.917 && v2 <= 33.0 && *a2 >= 69.584 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= -36.08 && v2 <= -18.04 && *a2 >= 11.32 && *a2 <= 37.9) {
    return 1;
  }
  if (v2 >= -18.5 && v2 <= -13.45 && *a2 >= 23.5008 && *a2 <= 41.892382) {
    return 1;
  }
  if (v2 >= -13.45 && v2 <= 1.68 && *a2 >= 30.905 && *a2 <= 40.987) {
    return 1;
  }
  if (v2 >= 1.68 && v2 <= 3.388 && *a2 >= 31.324836 && *a2 <= 40.987) {
    return 1;
  }
  if (v2 >= -13.8 && v2 <= -12.44 && *a2 >= 24.07 && *a2 <= 28.33) {
    return 1;
  }
  if (v2 >= 11.671 && v2 <= 14.258 && *a2 >= -62.322 && *a2 <= -59.263) {
    return 1;
  }
  if (v2 >= 22.950919 && v2 <= 27.567702 && *a2 >= -79.487787 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 21.74346 && v2 <= 27.567702 && *a2 >= -76.173118 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 20.668412 && v2 <= 27.567702 && *a2 >= -73.949372 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 8.3 && v2 <= 17.45 && *a2 >= 99.675 && *a2 <= 102.316) {
    return 1;
  }
  if (v2 >= 14.481 && v2 <= 17.51 && *a2 >= 102.286 && *a2 <= 104.683) {
    return 1;
  }
  if (v2 >= 17.45 && v2 <= 19.45 && *a2 >= 98.1 && *a2 <= 100.94) {
    return 1;
  }
  if (v2 >= 18.142198 && v2 <= 18.315026 && *a2 >= -63.184398 && *a2 <= -62.912807) {
    return 1;
  }
  if (v2 >= 16.914842 && v2 <= 17.240077 && *a2 >= -61.964541 && *a2 <= -61.607641) {
    return 1;
  }
  if (v2 >= 21.497173 && v2 <= 26.635702 && *a2 >= 88.025462 && *a2 <= 92.577511) {
    return 1;
  }
  if (v2 >= 32.166353 && v2 <= 32.577428 && *a2 >= -65.0 && *a2 <= -64.50204) {
    return 1;
  }
  if (v2 >= 26.902547 && v2 <= 27.854393 && *a2 >= 89.351473 && *a2 <= 91.521758) {
    return 1;
  }
  if (v2 >= 19.103 && v2 <= 20.058 && *a2 >= -81.654 && *a2 <= -79.5) {
    return 1;
  }
  if (v2 >= -23.5 && v2 <= -8.32 && *a2 >= -166.288 && *a2 <= -155.88) {
    return 1;
  }
  if (v2 >= 34.3297 && v2 <= 35.757 && *a2 >= 32.09 && *a2 <= 34.6509) {
    return 1;
  }
  if (v2 >= 15.06 && v2 <= 15.816 && *a2 >= -61.61 && *a2 <= -60.984) {
    return 1;
  }
  if (v2 >= -53.02 && v2 <= -50.229 && *a2 >= -61.937 && *a2 <= -56.853) {
    return 1;
  }
  if (v2 >= -21.1769 && v2 <= -12.1 && *a2 >= 176.19 && *a2 <= 180.1) {
    return 1;
  }
  if (v2 >= -21.1769 && v2 <= -15.057 && *a2 >= -180.1 && *a2 <= -178.097) {
    return 1;
  }
  BOOL v4 = v2 > 49.589 || v2 < 49.07;
  if (!v4 && *a2 >= -2.82 && *a2 <= -1.96) {
    return 1;
  }
  BOOL v5 = v2 < 2.6019;
  if (v2 > 8.469) {
    BOOL v5 = 1;
  }
  return !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= 22.178 && v2 <= 22.4435 && *a2 >= 113.828 && *a2 <= 114.4585
      || v2 >= 22.4435 && v2 <= 22.502 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 17.366 && v2 <= 18.926 && *a2 >= -78.498 && *a2 <= -75.908
      || !v4 && *a2 >= -2.82 && *a2 <= -1.96
      || v2 >= 22.175 && v2 <= 22.203 && *a2 >= 113.53 && *a2 <= 113.6
      || v2 >= 22.107 && v2 <= 22.175 && *a2 >= 113.548 && *a2 <= 113.6
      || v2 >= 35.656 && v2 <= 36.201 && *a2 >= 14.04 && *a2 <= 14.713
      || v2 >= -20.76 && v2 <= -19.6 && *a2 >= 56.9 && *a2 <= 58.4
      || v2 >= 16.61 && v2 <= 16.91 && *a2 >= -62.3 && *a2 <= -62.06
      || v2 >= -0.6 && v2 <= -0.42 && *a2 >= 166.866 && *a2 <= 167.028
      || v2 >= -19.3 && v2 <= -18.67 && *a2 >= -170.126 && *a2 <= -169.6
      || v2 >= -25.858 && v2 <= -23.42 && *a2 >= -131.33 && *a2 <= -123.664
      || v2 >= -14.457 && v2 <= -12.864 && *a2 >= -173.081 && *a2 <= -171.117
      || v2 >= -16.4 && v2 <= -15.4 && *a2 >= -6.2 && *a2 <= -5.0
      || v2 >= 16.986 && v2 <= 17.508 && *a2 >= -62.918 && *a2 <= -62.478
      || v2 >= -5.4 && v2 <= -3.15 && *a2 >= 54.5 && *a2 <= 56.8
      || v2 >= -12.139 && v2 <= -6.353 && *a2 >= 156.267 && *a2 <= 167.87
      || !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= -9.8 && v2 <= -8.01 && *a2 >= -172.9 && *a2 <= -170.9
      || v2 >= -22.115 && v2 <= -14.7 && *a2 >= -176.47 && *a2 <= -172.98
      || v2 >= 10.0 && v2 <= 11.585 && *a2 >= -61.8316 && *a2 <= -60.32
      || v2 >= 20.8 && v2 <= 22.35 && *a2 >= -72.56 && *a2 <= -70.81
      || v2 >= 17.555 && v2 <= 18.9639 && *a2 >= -65.11 && *a2 <= -64.14;
}

BOOL sub_1907BA29C(double *a1, double *a2)
{
  double v2 = *a1;
  return *a1 >= 22.4434 && v2 <= 22.62 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 22.088 && v2 <= 22.244 && *a2 >= 113.511 && *a2 <= 113.621
      || v2 >= 20.439 && v2 <= 29.709 && *a2 >= 92.078 && *a2 <= 97.72
      || v2 >= 26.211 && v2 <= 30.6 && *a2 >= 77.862 && *a2 <= 97.72
      || v2 >= 8.42 && v2 <= 20.553 && *a2 >= 97.2 && *a2 <= 105.72
      || v2 >= 30.6 && v2 <= 37.23 && *a2 >= 69.13 && *a2 <= 80.725
      || v2 >= 24.09 && v2 <= 31.9 && *a2 >= 60.726 && *a2 <= 69.13
      || v2 >= -18.347 && v2 <= -16.74 && *a2 >= 11.05 && *a2 <= 23.74
      || v2 >= -17.067 && v2 <= -10.64 && *a2 >= 21.69 && *a2 <= 24.313
      || v2 >= -13.672 && v2 <= -10.44 && *a2 >= 23.327 && *a2 <= 31.131
      || v2 >= -10.65 && v2 <= 4.07 && *a2 >= 28.115 && *a2 <= 31.96
      || v2 >= -3.03 && v2 <= 5.2 && *a2 >= 31.65 && *a2 <= 42.51
      || v2 >= 0.96 && v2 <= 8.6 && *a2 >= -61.6 && *a2 <= -53.7;
}

BOOL sub_1907BA620(double *a1, double *a2)
{
  double v2 = *a1;
  BOOL result = 1;
  if ((*a1 < 27.6 || v2 > 90.0 || *a2 < -180.0 || *a2 > -65.0) && (v2 < 37.1 || v2 > 90.0 || *a2 < 2.75 || *a2 > 129.7))
  {
    if (v2 < -49.0 || v2 > 0.0 || (*a2 >= -93.0 ? (BOOL v3 = *a2 > -30.0) : (BOOL v3 = 1), v3))
    {
      if ((v2 < 22.7 || v2 > 90.0 || *a2 < 97.7 || *a2 > 122.7)
        && (v2 < 5.24 || v2 > 33.0 || *a2 < -29.8 || *a2 > 54.475)
        && (v2 < 31.75 || v2 > 49.0 || *a2 < -13.0 || *a2 > 3.0))
      {
        BOOL v4 = v2 < -1.0 || v2 > 28.0;
        if ((v4 || *a2 < -120.0 || *a2 > -81.67) && (v2 < 14.3 || v2 > 25.4 || *a2 < -163.4 || *a2 > -150.8)) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1907BA824(double a1, double a2)
{
  double v3 = a2;
  double v4 = a1;
  if (sub_1907BA620(&v4, &v3)) {
    return 2;
  }
  if (sub_1907B90B0(&v4, &v3)) {
    return 1;
  }
  if (sub_1907BA29C(&v4, &v3)) {
    return 0;
  }
  return 2;
}

long double CLClientGetDistanceCoordinates(double a1, double a2, double a3, double a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E92A0158, memory_order_acquire) & 1) == 0)
  {
    double v8 = a4;
    double v6 = a3;
    double v9 = a2;
    double v7 = a1;
    int v5 = __cxa_guard_acquire(&qword_1E92A0158);
    a3 = v6;
    a1 = v7;
    a2 = v9;
    a4 = v8;
    if (v5)
    {
      qword_1E92A0140 = 0;
      unk_1E92A0148 = 0;
      xmmword_1E92A0130 = xmmword_1908820F0;
      qword_1E92A0150 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1E92A0158);
      a3 = v6;
      a1 = v7;
      a2 = v9;
      a4 = v8;
    }
  }

  return sub_1906DA618((double *)&xmmword_1E92A0130, a1, a2, a3, a4, 0.0);
}

CFStringRef CLClientCreateIso6709Notation(uint64_t a1)
{
  double v2 = *(double *)(a1 + 36);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v4 = *(double *)(a1 + 4);
  if (v2 >= 0.0) {
    return CFStringCreateWithFormat(v3, 0, @"%+08.4lf%+09.4lf%+08.3lf/", v4, *(void *)&v4, *(void *)(a1 + 12), *(void *)(a1 + 28));
  }
  else {
    return CFStringCreateWithFormat(v3, 0, @"%+08.4lf%+09.4lf/", v4, *(void *)(a1 + 4), *(void *)(a1 + 12));
  }
}

double sub_1907BC0C0(_OWORD *a1, uint64_t a2, double a3)
{
  long long v5 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v5;
  long long v6 = a1[2];
  long long v7 = a1[3];
  long long v8 = a1[5];
  *(_OWORD *)(a2 + 64) = a1[4];
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  long long v9 = a1[6];
  long long v10 = a1[7];
  long long v11 = a1[8];
  *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)a1 + 140);
  *(_OWORD *)(a2 + 112) = v10;
  *(_OWORD *)(a2 + 128) = v11;
  *(_OWORD *)(a2 + 96) = v9;
  double v12 = *(double *)(a2 + 44);
  if (v12 > 0.0 && a3 != 0.0)
  {
    double v13 = *(double *)(a2 + 60);
    if (v13 >= 0.0) {
      sub_190716B28((double *)(a2 + 4), (double *)(a2 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12), a3, v12, v13);
    }
  }
  double result = *(double *)(a2 + 76) + a3;
  *(double *)(a2 + 76) = result;
  return result;
}

uint64_t sub_1907BC160(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v19 = *a2;
  __int16 v20 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_190796B18(a1, &v19, a3);
  if (v20) {
    sub_1906BFE48(v20);
  }
  *(void *)a1 = &unk_1EE004A68;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = a1 + 912;
  *(void *)(a1 + 920) = a1 + 912;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 976) = 0;
  sub_1907D4E50(a1 + 1008);
  sub_1907D4E50(a1 + 1848);
  *(unsigned char *)(a1 + 2688) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_DWORD *)(a1 + 2728) = 0;
  *(_WORD *)(a1 + 2732) = 1;
  *(_DWORD *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(unsigned char *)(a1 + 2792) = 0;
  *(void *)(a1 + 2800) = 0;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_DWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_DWORD *)(a1 + 2872) = 0;
  *(unsigned char *)(a1 + 2848) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_WORD *)(a1 + 2876) = 1;
  *(_DWORD *)(a1 + 2880) = 0;
  *(void *)(a1 + 2952) = 0;
  *(void *)(a1 + 2944) = 0;
  *(void *)(a1 + 2960) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(unsigned char *)(a1 + 2936) = 0;
  *(void *)(a1 + 2968) = 0xFFFFFFFFLL;
  *(void *)(a1 + 2976) = &unk_1EE004B28;
  *(void *)(a1 + 2984) = 30;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(void *)(a1 + 3040) = 0;
  *(void *)(a1 + 3048) = a1 + 3048;
  *(void *)(a1 + 3056) = a1 + 3048;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3072) = a1 + 3072;
  *(void *)(a1 + 3080) = a1 + 3072;
  *(void *)(a1 + 3088) = 0;
  *(void *)(a1 + 3096) = a1 + 3096;
  *(void *)(a1 + 3104) = a1 + 3096;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3120) = a1 + 3120;
  *(void *)(a1 + 3128) = a1 + 3120;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3136) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3160) = 0xBFF0000000000000;
  *(void *)(a1 + 3184) = 0;
  *(_DWORD *)(a1 + 3192) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3225) = 0u;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3248) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3264) = _Q0;
  *(void *)(a1 + 3280) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0xBFF0000000000000;
  *(void *)(a1 + 3520) = 0;
  *(_DWORD *)(a1 + 3528) = 0;
  *(_WORD *)(a1 + 3512) = 0;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3595) = 0u;
  *(_OWORD *)(a1 + 3584) = 0u;
  *(_OWORD *)(a1 + 3568) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3462) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(void *)(a1 + 3672) = 0xBFF0000000000000;
  *(void *)(a1 + 3664) = 0;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3696) = 0;
  *(_OWORD *)(a1 + 3680) = xmmword_1908820F0;
  *(void *)(a1 + 3712) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 3720) = 0;
  *(unsigned char *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3840) = _Q0;
  *(void *)(a1 + 3864) = 0;
  *(void *)(a1 + 3856) = 0;
  *(void *)(a1 + 3872) = 0;
  *(void *)(a1 + 3880) = 0xBFF0000000000000;
  *(void *)(a1 + 3888) = 0xBFF0000000000000;
  *(void *)(a1 + 3904) = 0;
  *(void *)(a1 + 3896) = 0;
  *(_DWORD *)(a1 + 3912) = 0;
  *(_WORD *)(a1 + 3916) = 1;
  *(_DWORD *)(a1 + 3920) = 0;
  *(void *)(a1 + 3992) = 0;
  *(void *)(a1 + 3984) = 0;
  *(void *)(a1 + 4000) = 0;
  *(unsigned char *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(void *)(a1 + 4008) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4016) = _Q0;
  *(void *)(a1 + 4032) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4040) = 0;
  *(void *)(a1 + 4112) = 0;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(void *)(a1 + 4120) = 0xBFF0000000000000;
  *(void *)(a1 + 4128) = 0xBFF0000000000000;
  if (sub_190794F30())
  {
    *(unsigned char *)(a1 + 3168) = 0;
LABEL_8:
    double v11 = 30.0;
    goto LABEL_10;
  }
  int v10 = sub_190795894();
  *(unsigned char *)(a1 + 3168) = v10 ^ 1;
  if (((v10 ^ 1) & 1) == 0) {
    goto LABEL_8;
  }
  double v11 = 70.0;
LABEL_10:
  *(double *)(a1 + 3176) = v11;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  double v12 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v14 = *(void *)(a1 + 3176);
    *(_DWORD *)__n128 buf = 67240448;
    int v26 = v13;
    __int16 v27 = 2050;
    uint64_t v28 = v14;
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    int v16 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v17 = *(void *)(a1 + 3176);
    int v21 = 67240448;
    int v22 = v16;
    __int16 v23 = 2050;
    uint64_t v24 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  srandom(0);
  bzero((void *)(a1 + 3728), 0x68uLL);
  return a1;
}

void sub_1907BC674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)(v23 + 4096);
  sub_1907D5DA4(&a23);
  a23 = (void **)(v23 + 4072);
  sub_1907D5DA4(&a23);
  a23 = (void **)(v23 + 4048);
  sub_1907D5D50(&a23);
  sub_1907BC788(v25);
  if (*(char *)(v23 + 3399) < 0) {
    operator delete(*(void **)(v23 + 3376));
  }
  sub_190770ADC(v24);
  sub_190770ADC(v29);
  sub_190770ADC(v28);
  sub_190770ADC(a12);
  *(void *)(v23 + 2976) = a13;
  sub_1907D5C88(v23 + 3000);
  sub_1907BC80C(v27);
  sub_1907BC84C(v26);
  sub_1907BC88C(a14);
  sub_1907BC88C(a15);
  sub_1907D5BA0(*(void **)(v23 + 992));
  double v31 = *(void **)(v23 + 960);
  if (v31)
  {
    *(void *)(v23 + 968) = v31;
    operator delete(v31);
  }
  unint64_t v32 = *(void **)(v23 + 936);
  if (v32)
  {
    *(void *)(v23 + 944) = v32;
    operator delete(v32);
  }
  sub_1907B5AD8(a16);
  a23 = (void **)(v23 + 888);
  sub_1907D5AB4(&a23);
  a23 = (void **)(v23 + 864);
  sub_1907D5AB4(&a23);
  sub_190796E68(v23);
  _Unwind_Resume(a1);
}

void *sub_1907BC788(void *a1)
{
  double v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  CFAllocatorRef v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

void *sub_1907BC7C8(void *a1)
{
  *a1 = &unk_1EE004B28;
  sub_1907D5C88((uint64_t)(a1 + 3));
  return a1;
}

void *sub_1907BC80C(void *a1)
{
  double v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  CFAllocatorRef v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

void *sub_1907BC84C(void *a1)
{
  double v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  CFAllocatorRef v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

uint64_t sub_1907BC88C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 760);
  if (v2)
  {
    *(void *)(a1 + 768) = v2;
    operator delete(v2);
  }
  CFAllocatorRef v3 = *(std::__shared_weak_count **)(a1 + 680);
  if (v3) {
    sub_1906BFE48(v3);
  }
  double v4 = *(std::__shared_weak_count **)(a1 + 656);
  if (v4) {
    sub_1906BFE48(v4);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  long long v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    sub_1906BFE48(v6);
  }
  return a1;
}

uint64_t sub_1907BC904(uint64_t a1)
{
  *(void *)a1 = &unk_1EE004A68;
  int v21 = (void **)(a1 + 4096);
  sub_1907D5DA4(&v21);
  int v21 = (void **)(a1 + 4072);
  sub_1907D5DA4(&v21);
  int v21 = (void **)(a1 + 4048);
  sub_1907D5D50(&v21);
  double v2 = *(void **)(a1 + 3984);
  if (v2)
  {
    *(void *)(a1 + 3992) = v2;
    operator delete(v2);
  }
  CFAllocatorRef v3 = *(std::__shared_weak_count **)(a1 + 3904);
  if (v3) {
    sub_1906BFE48(v3);
  }
  if (*(char *)(a1 + 3399) < 0) {
    operator delete(*(void **)(a1 + 3376));
  }
  sub_190770ADC((uint64_t *)(a1 + 3120));
  sub_190770ADC((uint64_t *)(a1 + 3096));
  sub_190770ADC((uint64_t *)(a1 + 3072));
  sub_190770ADC((uint64_t *)(a1 + 3048));
  *(void *)(a1 + 2976) = &unk_1EE004B28;
  sub_1907D5C88(a1 + 3000);
  double v4 = *(void **)(a1 + 2944);
  if (v4)
  {
    *(void *)(a1 + 2952) = v4;
    operator delete(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 2864);
  if (v5) {
    sub_1906BFE48(v5);
  }
  long long v6 = *(void **)(a1 + 2800);
  if (v6)
  {
    *(void *)(a1 + 2808) = v6;
    operator delete(v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 2720);
  if (v7) {
    sub_1906BFE48(v7);
  }
  long long v8 = *(void **)(a1 + 2608);
  if (v8)
  {
    *(void *)(a1 + 2616) = v8;
    operator delete(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 2528);
  if (v9) {
    sub_1906BFE48(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 2504);
  if (v10) {
    sub_1906BFE48(v10);
  }
  if (*(char *)(a1 + 2119) < 0) {
    operator delete(*(void **)(a1 + 2096));
  }
  double v11 = *(void **)(a1 + 1944);
  if (v11)
  {
    *(void *)(a1 + 1952) = v11;
    operator delete(v11);
  }
  double v12 = *(std::__shared_weak_count **)(a1 + 1864);
  if (v12) {
    sub_1906BFE48(v12);
  }
  int v13 = *(void **)(a1 + 1768);
  if (v13)
  {
    *(void *)(a1 + 1776) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1688);
  if (v14) {
    sub_1906BFE48(v14);
  }
  unsigned int v15 = *(std::__shared_weak_count **)(a1 + 1664);
  if (v15) {
    sub_1906BFE48(v15);
  }
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  int v16 = *(void **)(a1 + 1104);
  if (v16)
  {
    *(void *)(a1 + 1112) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 1024);
  if (v17) {
    sub_1906BFE48(v17);
  }
  sub_1907D5BA0(*(void **)(a1 + 992));
  uint64_t v18 = *(void **)(a1 + 960);
  if (v18)
  {
    *(void *)(a1 + 968) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 936);
  if (v19)
  {
    *(void *)(a1 + 944) = v19;
    operator delete(v19);
  }
  sub_1907B5AD8((void *)(a1 + 912));
  int v21 = (void **)(a1 + 888);
  sub_1907D5AB4(&v21);
  int v21 = (void **)(a1 + 864);
  sub_1907D5AB4(&v21);
  return sub_190796E68(a1);
}

void sub_1907BCB28(uint64_t a1)
{
  sub_1907BC904(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907BCB60(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  LODWORD(v23) = 0;
  BYTE5(v23) = 0;
  DWORD2(v23) = 0;
  long long v24 = 0uLL;
  long long v7 = *(uint64_t **)a2;
  long long v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = v7;
  int v22 = v6;
  uint64_t v8 = *(void *)(a2 + 48);
  BYTE4(v23) = *(unsigned char *)(a2 + 20);
  uint64_t v25 = v8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  void v18[2] = 0;
  v17[0] = (__n128 *)v17;
  v17[1] = (__n128 *)v17;
  v17[2] = 0;
  *a3 = 0;
  unsigned int v9 = sub_1907BCCB4(*(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v21, a3, v18, v17, &v20, &v19, a4);
  if (*a3 > 1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    double v11 = v21;
    double v12 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v12;
    if (v13) {
      sub_1906BFE48(v13);
    }
    long long v14 = v24;
    *(_OWORD *)(a2 + 16) = v23;
    *(_OWORD *)(a2 + 32) = v14;
    *(void *)(a2 + 48) = v25;
    uint64_t v15 = v19;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = v15;
    *(_DWORD *)(a2 + 24) = -1082130432;
  }
  sub_190770ADC((uint64_t *)v17);
  sub_190770ADC(v18);
  if (v22) {
    sub_1906BFE48(v22);
  }
  return v10;
}

void sub_1907BCC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1906BFE48(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907BCCB4(uint64_t a1, std::__shared_weak_count *a2, uint64_t **a3, int *a4, uint64_t *a5, __n128 **a6, void *a7, void *a8, double a9)
{
  uint64_t v13 = a1;
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = 0;
  *a7 = 0;
  *a8 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v43 = _Q0;
  while (1)
  {
    sub_190770ADC(a5);
    *a4 = 0;
    v68[0] = 0.0;
    v44[0] = 0;
    v44[1] = 0;
    long long v45 = v43;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0xBFF0000000000000;
    double v60 = 0;
    int v61 = 0;
    memset(&v58[32], 0, 32);
    __int16 v59 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    memset(v65, 0, 27);
    memset(&v65[32], 0, 48);
    long long v57 = 0u;
    memset(v58, 0, 30);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v66 = 0;
    unint64_t v67 = 0xBFF0000000000000;
    if ((*(uint64_t (**)(uint64_t, void *, uint64_t *, void, uint64_t, uint64_t **, void, double *, double, double))(*(void *)v13 + 80))(v13, v44, a5, 0, 1, a3, *((unsigned __int8 *)a3 + 20), v68, *((double *)a3 + 6), a9))
    {
      double v20 = v68[0];
      if (v68[0] == -1.0) {
        goto LABEL_6;
      }
      uint64_t v22 = a5[1];
      int v23 = *a4;
      if ((uint64_t *)v22 == a5)
      {
        uint64_t v24 = 0;
        __int16 v27 = a5;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = **a3;
        int v26 = *((unsigned __int8 *)a3 + 20);
        __int16 v27 = a5;
        do
        {
          if (**(void **)(v22 + 16) == v25 && *(unsigned __int8 *)(v22 + 32) != v26)
          {
            __int16 v27 = (uint64_t *)v22;
          }
          else
          {
            *a4 = ++v23;
            uint64_t v24 = v22;
          }
          uint64_t v22 = *(void *)(v22 + 8);
        }
        while ((uint64_t *)v22 != a5);
      }
      a9 = a9 - v20;
      if (v23 < 2)
      {
        uint64_t v13 = a1;
        if (v23 != 1)
        {
          sub_190770ADC(a5);
LABEL_6:
          char v21 = 0;
          char v42 = 1;
          goto LABEL_37;
        }
        unint64_t v32 = *(uint64_t **)(v24 + 16);
        double v31 = *(uint64_t **)(v24 + 24);
        if (v31) {
          atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
        }
        unint64_t v33 = (std::__shared_weak_count *)a3[1];
        *a3 = v32;
        a3[1] = v31;
        if (v33) {
          sub_1906BFE48(v33);
        }
        *((unsigned char *)a3 + 20) = *(unsigned char *)(v24 + 32);
        a3[6] = *(uint64_t **)(v24 + 40);
        *a4 = 0;
        uint64_t v34 = (__n128 *)a5[1];
        if (v34 == (__n128 *)a5)
        {
          char v21 = 1;
        }
        else
        {
          do
          {
            if (*(void *)v34[1].n128_u64[0] != **a3 || v34[2].n128_u8[0] == *((unsigned __int8 *)a3 + 20)) {
              sub_19076D58C(a6, v34 + 1);
            }
            uint64_t v34 = (__n128 *)v34->n128_u64[1];
            char v21 = 1;
          }
          while (v34 != (__n128 *)a5);
        }
      }
      else
      {
        if (v27 != a5)
        {
          uint64_t v28 = *v27;
          *(void *)(v28 + 8) = v27[1];
          *(void *)v27[1] = v28;
          --a5[2];
          uint64_t v29 = (std::__shared_weak_count *)v27[3];
          if (v29) {
            sub_1906BFE48(v29);
          }
          operator delete(v27);
        }
        char v21 = 0;
        uint64_t v30 = *((void *)&v55 + 1);
        *a7 = v55;
        *a8 = v30;
        a3[6] = v60;
        char v42 = 1;
      }
      uint64_t v13 = a1;
    }
    else
    {
      char v21 = 0;
      char v42 = 0;
    }
LABEL_37:
    if (SHIBYTE(v54) < 0) {
      operator delete(*((void **)&v53 + 1));
    }
    if ((v21 & 1) == 0) {
      break;
    }
    if (++v14 == 30)
    {
      char v35 = 1;
      goto LABEL_43;
    }
  }
  char v35 = v42;
LABEL_43:
  if (a2) {
    sub_1906BFE48(a2);
  }
  return v35 & 1;
}

void sub_1907BD01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a9) {
    sub_1906BFE48(a9);
  }
  _Unwind_Resume(exception_object);
}

double sub_1907BD04C(uint64_t a1, double a2)
{
  if (!*(unsigned char *)(a1 + 1008)) {
    return -1.0;
  }
  int v15 = 0;
  char v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  CFAllocatorRef v3 = *(uint64_t **)(a1 + 1016);
  double v4 = *(std::__shared_weak_count **)(a1 + 1024);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v3;
  int v14 = v4;
  uint64_t v5 = *(void *)(a1 + 1064);
  char v16 = *(unsigned char *)(a1 + 1036);
  uint64_t v21 = v5;
  double v11 = 0.0;
  double v12 = 0.0;
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  _DWORD v10[2] = 0;
  v9[0] = (__n128 *)v9;
  v9[1] = (__n128 *)v9;
  _DWORD v9[2] = 0;
  int v8 = 0;
  double v6 = -1.0;
  if (sub_1907BCCB4(*(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v13, &v8, v10, v9, &v12, &v11, a2)&& (fabs(v12) >= 0.00003 || fabs(v11) >= 0.00003))
  {
    double v6 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), v12, v11, *(double *)(a1 + 1200));
  }
  sub_190770ADC((uint64_t *)v9);
  sub_190770ADC(v10);
  if (v14) {
    sub_1906BFE48(v14);
  }
  return v6;
}

void sub_1907BD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1906BFE48(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1907BD194()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  uint64_t v10 = v0;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  double v11 = (long long *)*v8;
  double v12 = (std::__shared_weak_count *)v8[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v85 = *v11;
    LOBYTE(v86) = v1;
    sub_1906BFE48(v12);
    sub_1906BFE48(v12);
  }
  else
  {
    long long v85 = *v11;
    LOBYTE(v86) = v1;
  }
  uint64_t v13 = sub_1907D5E44(v10 + 984, (uint64_t *)&v85);
  uint64_t v14 = v13;
  if (v10 + 992 != v13)
  {
    if (*(int *)(v13 + 72) > 95)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      __int16 v27 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v87) = 0;
        _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_ERROR, "CLMM,Unexpected out of bounds array access attempt", (uint8_t *)&v87, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(&v87, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, BOOL, double, double, double)", "CoreLocation: %s\n", v28);
        if (v28 != (char *)&v87) {
          free(v28);
        }
      }
    }
    else
    {
      uint64_t v15 = *v9;
      uint64_t v16 = v9[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      char v17 = *(std::__shared_weak_count **)(v13 + 64);
      *(void *)(v14 + 56) = v15;
      *(void *)(v14 + 64) = v16;
      if (v17) {
        sub_1906BFE48(v17);
      }
      uint64_t v18 = *(int *)(v14 + 72);
      uint64_t v19 = (void *)(v14 + 32 + 8 * v18);
      v19[137] = v5;
      v19[233] = v3;
      v19[329] = v7;
      *(_DWORD *)(v14 + 72) = v18 + 1;
    }
    return;
  }
  long long v63 = (void **)(v10 + 984);
  uint64_t v64 = v10;
  memset(v65, 0, 28);
  v65[14] = 1;
  *(_DWORD *)&v65[16] = 0;
  memset(&v65[28], 0, 33);
  HIDWORD(v66) = 0;
  LOBYTE(v66) = 0;
  *(void *)&long long v67 = 0;
  DWORD2(v67) = 0;
  v68[0] = 1;
  memset(&v68[8], 0, 24);
  __asm { FMOV            V2.2D, #-1.0 }
  long long v69 = _Q2;
  *(void *)&v70[0] = 0xBFF0000000000000;
  *(void *)&v71[120] = 0;
  *(_DWORD *)&v71[128] = 0;
  memset(&v71[80], 0, 34);
  memset(&v71[136], 0, 75);
  memset(&v71[216], 0, 56);
  memset(v71, 0, 78);
  memset((char *)v70 + 8, 0, 88);
  *(void *)&v71[272] = 0xBFF0000000000000;
  long long v72 = 0u;
  *(void *)&long long v73 = 0xBFF0000000000000;
  *((void *)&v73 + 1) = 0xBFF0000000000000;
  long long v74 = 0u;
  *(void *)uint64_t v75 = 0xBFF0000000000000;
  *(void *)&v76[120] = 0;
  *(_DWORD *)&v76[128] = 0;
  memset(&v76[80], 0, 34);
  memset(&v76[136], 0, 75);
  memset(&v76[216], 0, 56);
  memset(v76, 0, 78);
  memset(&v75[8], 0, 96);
  *(_OWORD *)&v76[272] = xmmword_1908824F0;
  long long v78 = 0u;
  long long v79 = _Q2;
  long long v80 = 0u;
  *(void *)uint64_t v81 = 0xBFF0000000000000;
  v82[15] = 0;
  LODWORD(v82[16]) = 0;
  memset(&v82[10], 0, 34);
  memset(&v82[17], 0, 75);
  memset(&v82[27], 0, 56);
  memset(v82, 0, 78);
  memset(&v81[8], 0, 96);
  v82[34] = 0xBFF0000000000000;
  *(void *)&long long v84 = 0;
  long long v83 = 0u;
  *((void *)&v84 + 1) = 0x3FF0000000000000;
  bzero(v77, 0xC00uLL);
  uint64_t v26 = *v9;
  uint64_t v25 = (std::__shared_weak_count *)v9[1];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v77[0] = v5;
  v77[96] = v3;
  v77[192] = v7;
  *(_DWORD *)long long v65 = 1;
  long long v87 = v85;
  uint64_t v88 = v86;
  *(void *)&long long v89 = v26;
  *((void *)&v89 + 1) = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v90 = *(void *)v65;
  long long v91 = *(_OWORD *)&v65[4];
  if (*(void *)&v65[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)8, 1uLL, memory_order_relaxed);
  }
  long long v92 = *(_OWORD *)&v65[12];
  long long v93 = 0u;
  v95[0] = *(_OWORD *)&v65[32];
  *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)((char *)&v65[36] + 1);
  uint64_t v94 = *(void *)&v65[28];
  long long v96 = 0uLL;
  uint64_t v97 = 0;
  sub_1907B5854(&v96, 0, 0, 0);
  uint64_t v98 = v66;
  char v99 = 0;
  long long v100 = v67;
  long long v101 = 0u;
  long long v105 = 0u;
  long long v104 = v69;
  long long v102 = *(_OWORD *)v68;
  long long v103 = *(_OWORD *)&v68[16];
  long long v110 = v70[4];
  long long v109 = v70[3];
  long long v108 = v70[2];
  long long v106 = v70[0];
  long long v107 = v70[1];
  long long v111 = v70[5];
  uint64_t v112 = 0;
  memcpy(v113, v71, sizeof(v113));
  long long v118 = *(_OWORD *)&v75[16];
  long long v119 = *(_OWORD *)&v75[32];
  long long v120 = *(_OWORD *)&v75[48];
  long long v121 = *(_OWORD *)&v75[64];
  long long v114 = v72;
  long long v115 = v73;
  long long v116 = v74;
  long long v117 = *(_OWORD *)v75;
  if ((v75[103] & 0x80000000) != 0)
  {
    sub_1906C00FC(&v122, *(void **)&v75[80], *(unint64_t *)&v75[88]);
  }
  else
  {
    long long v122 = *(_OWORD *)&v75[80];
    uint64_t v123 = *(void *)&v75[96];
  }
  memcpy(v124, v76, sizeof(v124));
  uint64_t v125 = *(void *)&v76[280];
  memcpy(v126, v77, sizeof(v126));
  long long v131 = *(_OWORD *)&v81[16];
  long long v132 = *(_OWORD *)&v81[32];
  long long v133 = *(_OWORD *)&v81[48];
  long long v134 = *(_OWORD *)&v81[64];
  long long v127 = v78;
  long long v128 = v79;
  long long v129 = v80;
  long long v130 = *(_OWORD *)v81;
  if ((v81[103] & 0x80000000) != 0)
  {
    sub_1906C00FC(&__p, *(void **)&v81[80], *(unint64_t *)&v81[88]);
  }
  else
  {
    long long __p = *(_OWORD *)&v81[80];
    uint64_t v136 = *(void *)&v81[96];
  }
  memcpy(v137, v82, sizeof(v137));
  long long v139 = v84;
  long long v138 = v83;
  uint64_t v29 = *(uint64_t **)v14;
  if (!*(void *)v14)
  {
    unint64_t v33 = (char **)v14;
    uint64_t v30 = (uint64_t *)v14;
    goto LABEL_57;
  }
  do
  {
    while (1)
    {
      uint64_t v30 = v29;
      uint64_t v31 = v29[4];
      if ((void)v87 != v31)
      {
        if ((uint64_t)v87 >= v31)
        {
          if (v31 >= (uint64_t)v87) {
            goto LABEL_60;
          }
          goto LABEL_54;
        }
        goto LABEL_46;
      }
      if (!(_BYTE)v88 || !*((unsigned char *)v30 + 48)) {
        break;
      }
      if (*((void *)&v87 + 1) >= (unint64_t)v30[5]) {
        goto LABEL_48;
      }
LABEL_46:
      uint64_t v29 = (uint64_t *)*v30;
      unint64_t v33 = (char **)v30;
      if (!*v30) {
        goto LABEL_57;
      }
    }
    if (*((unsigned char *)v30 + 48)) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = (_BYTE)v88 != 0;
    }
    if (v32) {
      goto LABEL_46;
    }
LABEL_48:
    if (*((unsigned char *)v30 + 48) && (_BYTE)v88)
    {
      if ((unint64_t)v30[5] >= *((void *)&v87 + 1)) {
        goto LABEL_60;
      }
    }
    else if (!*((unsigned char *)v30 + 48) || (_BYTE)v88)
    {
      goto LABEL_60;
    }
LABEL_54:
    uint64_t v29 = (uint64_t *)v30[1];
  }
  while (v29);
  unint64_t v33 = (char **)(v30 + 1);
LABEL_57:
  uint64_t v34 = (char *)operator new(0x1538uLL);
  uint64_t v35 = v90;
  *((void *)v34 + 6) = v88;
  *((_OWORD *)v34 + 2) = v87;
  long long v36 = v89;
  long long v89 = 0uLL;
  *(_OWORD *)(v34 + 56) = v36;
  *((void *)v34 + 9) = v35;
  long long v37 = v91;
  long long v91 = 0uLL;
  long long v38 = v92;
  long long v39 = v93;
  *((_OWORD *)v34 + 5) = v37;
  *((_OWORD *)v34 + 6) = v38;
  *((_OWORD *)v34 + 7) = v39;
  *((void *)v34 + 16) = v94;
  *(_OWORD *)(v34 + 145) = *(_OWORD *)((char *)v95 + 9);
  *(_OWORD *)(v34 + 136) = v95[0];
  *(_OWORD *)(v34 + 168) = v96;
  uint64_t v40 = v97;
  uint64_t v97 = 0;
  long long v96 = 0uLL;
  v34[200] = v99;
  uint64_t v41 = v98;
  *((void *)v34 + 23) = v40;
  *((void *)v34 + 24) = v41;
  long long v42 = v101;
  long long v43 = v102;
  *((_OWORD *)v34 + 13) = v100;
  *((_OWORD *)v34 + 14) = v42;
  long long v44 = v103;
  long long v45 = v105;
  long long v46 = v106;
  *((_OWORD *)v34 + 17) = v104;
  *((_OWORD *)v34 + 18) = v45;
  *((_OWORD *)v34 + 15) = v43;
  *((_OWORD *)v34 + 16) = v44;
  long long v47 = v107;
  long long v48 = v109;
  long long v49 = v110;
  *((_OWORD *)v34 + 21) = v108;
  *((_OWORD *)v34 + 22) = v48;
  *((_OWORD *)v34 + 19) = v46;
  *((_OWORD *)v34 + 20) = v47;
  long long v50 = v111;
  *((void *)v34 + 50) = v112;
  *((_OWORD *)v34 + 23) = v49;
  *((_OWORD *)v34 + 24) = v50;
  long long v111 = 0uLL;
  uint64_t v112 = 0;
  memcpy(v34 + 408, v113, 0x118uLL);
  long long v51 = v119;
  *((_OWORD *)v34 + 47) = v118;
  *((_OWORD *)v34 + 48) = v51;
  long long v52 = v121;
  *((_OWORD *)v34 + 49) = v120;
  *((_OWORD *)v34 + 50) = v52;
  long long v53 = v115;
  *((_OWORD *)v34 + 43) = v114;
  *((_OWORD *)v34 + 44) = v53;
  long long v54 = v117;
  *((_OWORD *)v34 + 45) = v116;
  *((_OWORD *)v34 + 46) = v54;
  long long v55 = v122;
  *((void *)v34 + 104) = v123;
  *((_OWORD *)v34 + 51) = v55;
  uint64_t v123 = 0;
  long long v122 = 0uLL;
  memcpy(v34 + 840, v124, 0x118uLL);
  *((void *)v34 + 140) = v125;
  memcpy(v34 + 1128, v126, 0xF00uLL);
  long long v56 = v132;
  *(_OWORD *)(v34 + 5032) = v131;
  *(_OWORD *)(v34 + 5048) = v56;
  long long v57 = v134;
  *(_OWORD *)(v34 + 5064) = v133;
  *(_OWORD *)(v34 + 5080) = v57;
  long long v58 = v128;
  *(_OWORD *)(v34 + 4968) = v127;
  *(_OWORD *)(v34 + 4984) = v58;
  long long v59 = v130;
  *(_OWORD *)(v34 + 5000) = v129;
  *(_OWORD *)(v34 + 5016) = v59;
  long long v60 = __p;
  *((void *)v34 + 639) = v136;
  *(_OWORD *)(v34 + 5096) = v60;
  uint64_t v136 = 0;
  long long __p = 0uLL;
  memcpy(v34 + 5120, v82, 0x118uLL);
  long long v61 = v84;
  *(_OWORD *)(v34 + 5400) = v83;
  *(_OWORD *)(v34 + 5416) = v61;
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  *((void *)v34 + 2) = v30;
  std::__shared_weak_count *v33 = v34;
  long long v62 = (void *)**v63;
  if (v62)
  {
    *long long v63 = v62;
    uint64_t v34 = *v33;
  }
  sub_19074BCA4(*(uint64_t **)v14, (uint64_t *)v34);
  ++*(void *)(v64 + 1000);
LABEL_60:
  if (SHIBYTE(v136) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete((void *)v122);
  }
  if (SHIBYTE(v112) < 0) {
    operator delete((void *)v111);
  }
  if ((void)v96)
  {
    *((void *)&v96 + 1) = v96;
    operator delete((void *)v96);
  }
  if (*((void *)&v91 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v91 + 1));
  }
  if (*((void *)&v89 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v89 + 1));
  }
  if ((v81[103] & 0x80000000) != 0) {
    operator delete(*(void **)&v81[80]);
  }
  if ((v75[103] & 0x80000000) != 0) {
    operator delete(*(void **)&v75[80]);
  }
  if (v25) {
    sub_1906BFE48(v25);
  }
}

void sub_1907BDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1907D4F70(a9);
  sub_1907B515C(a14);
  if (STACK[0x15B0]) {
    sub_1906BFE48((std::__shared_weak_count *)STACK[0x15B0]);
  }
  sub_1907BDDFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907BDD7C(uint64_t a1)
{
  if (*(char *)(a1 + 5087) < 0) {
    operator delete(*(void **)(a1 + 5064));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    sub_1906BFE48(v4);
  }
  return a1;
}

uint64_t sub_1907BDDFC(uint64_t a1)
{
  if (*(char *)(a1 + 5063) < 0) {
    operator delete(*(void **)(a1 + 5040));
  }
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    sub_1906BFE48(v4);
  }
  return a1;
}

void sub_1907BDE7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3[0] = *(void *)a1;
  v3[1] = v2;
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1907B2AA0(a2, (uint64_t)v3, *(unsigned char *)(a1 + 20));
    sub_1906BFE48(v2);
  }
  else
  {
    sub_1907B2AA0(a2, (uint64_t)v3, *(unsigned char *)(a1 + 20));
  }
}