uint64_t __RKEntityHideActionArguments.ease.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.ease.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.ease.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.easeType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityHideActionArguments.easeType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.easeType.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.easeType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.fadeOut.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityHideActionArguments(0) + 36));
}

uint64_t __RKEntityHideActionArguments.fadeOut.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.fadeOut.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.finalOpacity.getter()
{
  return __RKEntityShowActionArguments.finalOpacity.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.finalOpacity.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 40));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.finalOpacity.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.finalOpacity.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.finalOpacity.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.finalOpacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.respectPhysics.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityHideActionArguments(0) + 44));
}

uint64_t __RKEntityHideActionArguments.respectPhysics.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.respectPhysics.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 48));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.physicsLinearCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 52));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.physicsAngularCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.animationStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t __RKEntityHideActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.animationStyle.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.animationStyle.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 56)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.animationStyle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 60));
  return result;
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.buildInAnimationType.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 60)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.buildOutAnimationType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      unint64_t result = 0x65636E6174736964;
      break;
    case 3:
      unint64_t result = 1702060389;
      break;
    case 4:
      unint64_t result = 0x6570795465736165;
      break;
    case 5:
      unint64_t result = 0x74754F65646166;
      break;
    case 6:
      unint64_t result = 0x61704F6C616E6966;
      break;
    case 7:
      unint64_t result = 0x5074636570736572;
      break;
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    case 10:
      unint64_t result = 0x6F6974616D696E61;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityHideActionArguments.CodingKeys()
{
  return __RKEntityHideActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityHideActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityHideActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityHideActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityHideActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityHideActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityHideActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
    char v10 = *(unsigned char *)(v3 + v9[5] + 4);
    char v18 = 1;
    char v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[6] + 4);
    char v18 = 2;
    char v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[7]);
    char v17 = 3;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[8]);
    char v17 = 4;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = *(unsigned char *)(v3 + v9[10] + 4);
    char v18 = 6;
    char v17 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = *(unsigned char *)(v3 + v9[12] + 4);
    char v18 = 8;
    char v17 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + v9[13] + 4);
    char v18 = 9;
    char v17 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[14]);
    char v17 = 10;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[15]);
    char v17 = 11;
    lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityHideActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  v48 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityHideActionArguments.CodingKeys>);
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  v51 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v7[v8[7]];
  *(_DWORD *)v9 = 0;
  v45 = v9;
  v9[4] = 1;
  char v10 = &v7[v8[8]];
  *(_DWORD *)char v10 = 0;
  v44 = v10;
  v10[4] = 1;
  uint64_t v42 = v8[9];
  v7[v42] = 10;
  uint64_t v41 = v8[10];
  v7[v41] = 3;
  uint64_t v40 = v8[11];
  v7[v40] = 2;
  char v11 = &v7[v8[12]];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v12 = v8[13];
  v7[v12] = 2;
  char v13 = &v7[v8[14]];
  *(_DWORD *)char v13 = 0;
  v13[4] = 1;
  char v14 = &v7[v8[15]];
  *(_DWORD *)char v14 = 0;
  v14[4] = 1;
  uint64_t v38 = v8[16];
  uint64_t v39 = v12;
  v7[v38] = 3;
  uint64_t v15 = v8[17];
  v7[v15] = 10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  uint64_t v16 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v17 = (uint64_t)a1;
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  v19 = v44;
  char v18 = v45;
  v35 = v13;
  v36 = v7;
  uint64_t v33 = v15;
  v34 = v14;
  uint64_t v20 = v46;
  uint64_t v50 = v17;
  char v53 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v36;
  (*(void (**)(void))(v43 + 32))();
  char v53 = 1;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v18 = v22;
  v18[4] = BYTE4(v22) & 1;
  char v53 = 2;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v19 = v23;
  v19[4] = BYTE4(v23) & 1;
  char v52 = 3;
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v42] = v53;
  char v52 = 4;
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v41] = v53;
  char v53 = 5;
  v21[v40] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v53 = 6;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v11 = v24;
  v11[4] = BYTE4(v24) & 1;
  char v53 = 7;
  v21[v39] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v53 = 8;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v26 = v35;
  *(_DWORD *)v35 = v25;
  v26[4] = BYTE4(v25) & 1;
  char v53 = 9;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v28 = v34;
  *(_DWORD *)v34 = v27;
  v28[4] = BYTE4(v27) & 1;
  char v52 = 10;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v36[v38] = v53;
  char v52 = 11;
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v51, v49);
  uint64_t v30 = (uint64_t)v36;
  uint64_t v29 = v37;
  v36[v33] = v53;
  outlined init with copy of __RKEntityTriggerSpecification(v30, v29, type metadata accessor for __RKEntityHideActionArguments);
  __swift_destroy_boxed_opaque_existential_1(v50);
  return outlined destroy of __RKEntityTriggerSpecification(v30, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityHideActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityHideActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityHideActionArguments(void *a1)
{
  return __RKEntityHideActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityHideActionArguments(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t (*__RKEntityEmphasisActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityEmphasisActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t __RKEntityEmphasisActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityEmphasisActionArguments.iterations.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t __RKEntityEmphasisActionArguments.iterations.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.iterations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.animationStyle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.emphasisAnimationType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      unsigned int v2 = 1919251561;
      goto LABEL_5;
    case 3:
      unsigned int v2 = 1835626081;
LABEL_5:
      uint64_t result = v2 | 0x6F69746100000000;
      break;
    case 4:
      uint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityEmphasisActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityEmphasisActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityEmphasisActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityEmphasisActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
    char v10 = *(unsigned char *)(v3 + v9[5] + 4);
    v13[14] = 1;
    v13[12] = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[6] + 4);
    v13[11] = 2;
    v13[8] = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[7] = *(unsigned char *)(v3 + v9[7]);
    v13[6] = 3;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13[5] = *(unsigned char *)(v3 + v9[8]);
    v13[4] = 4;
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityEmphasisActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v30 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityEmphasisActionArguments.CodingKeys>);
  uint64_t v28 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v6 - 8);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = &v8[v9[7]];
  *(_DWORD *)char v10 = 0;
  v10[4] = 1;
  char v11 = &v8[v9[8]];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v27 = v9[9];
  v8[v27] = 3;
  uint64_t v12 = v9[10];
  v8[v12] = 8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  uint64_t v32 = v5;
  uint64_t v13 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v14 = v10;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  uint64_t v16 = v28;
  uint64_t v15 = v29;
  v34 = a1;
  char v41 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v17 = v30;
  uint64_t v18 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v17, v18);
  char v40 = 1;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v14 = v19;
  v14[4] = BYTE4(v19) & 1;
  char v39 = 2;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v21 = v25;
  *(_DWORD *)uint64_t v25 = v20;
  v21[4] = BYTE4(v20) & 1;
  char v37 = 3;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v8[v27] = v38;
  char v35 = 4;
  lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v33);
  v8[v24] = v36;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v8, v26, type metadata accessor for __RKEntityEmphasisActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v8, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityEmphasisActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityEmphasisActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityEmphasisActionArguments(void *a1)
{
  return __RKEntityEmphasisActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityAudioActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.path.getter()
{
  return __RKEntityCustomActionArguments.actionIdentifier.getter(type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t __RKEntityAudioActionArguments.path.setter(uint64_t a1, uint64_t a2)
{
  return __RKEntityCustomActionArguments.actionIdentifier.setter(a1, a2, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.path.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.type.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t __RKEntityAudioActionArguments.type.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.type.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.volume.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 28));
}

uint64_t __RKEntityAudioActionArguments.volume.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.volume.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.loops.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 32));
}

uint64_t __RKEntityAudioActionArguments.loops.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.loops.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.spatialMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t __RKEntityAudioActionArguments.spatialMode.setter(char *a1)
{
  return __RKEntityAudioActionArguments.spatialMode.setter(a1, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t (*__RKEntityAudioActionArguments.spatialMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.multiplePerformBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

unint64_t __RKEntityAudioActionArguments.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unint64_t result = 1752457584;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 0x656D756C6F76;
      break;
    case 4:
      unint64_t result = 0x73706F6F6CLL;
      break;
    case 5:
      unint64_t result = 0x4D6C616974617073;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityAudioActionArguments.CodingKeys()
{
  return __RKEntityAudioActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityAudioActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityAudioActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityAudioActionArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityAudioActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityAudioActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityAudioActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityAudioActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
    v11[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[13] = *(unsigned char *)(v3 + v9[6]);
    v11[12] = 2;
    lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[11] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[10] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[9] = *(unsigned char *)(v3 + v9[9]);
    v11[8] = 5;
    lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[7] = *(unsigned char *)(v3 + v9[10]);
    v11[6] = 6;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityAudioActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityAudioActionArguments.CodingKeys>);
  uint64_t v30 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v9[6];
  v8[v29] = 3;
  char v10 = &v8[v9[7]];
  *(void *)char v10 = 0;
  v10[8] = 1;
  uint64_t v28 = v9[8];
  v8[v28] = 2;
  uint64_t v11 = v9[9];
  v8[v11] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  v34 = v5;
  uint64_t v12 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v25 = v11;
  uint64_t v26 = (uint64_t *)v10;
  uint64_t v14 = v30;
  uint64_t v13 = v31;
  char v36 = a1;
  char v46 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v16 = v32;
  uint64_t v15 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v8, v16, v15);
  char v45 = 1;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  *uint64_t v18 = v17;
  v18[1] = v19;
  char v43 = 2;
  lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v8[v29] = v44;
  char v42 = 3;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v21 = v26;
  uint64_t *v26 = v20;
  *((unsigned char *)v21 + 8) = v22 & 1;
  char v41 = 4;
  v8[v28] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v39 = 5;
  lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v8[v25] = v40;
  char v37 = 6;
  lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v34, v35);
  v8[*(int *)(v6 + 40)] = v38;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v8, v27, type metadata accessor for __RKEntityAudioActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v8, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityAudioActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityAudioActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityAudioActionArguments(void *a1)
{
  return __RKEntityAudioActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityTransformActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.location.getter()
{
  return __RKEntityTransformActionArguments.location.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntityTransformActionArguments.location.setter(a1, a2, a3, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.location.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.orientation.getter()
{
  uint64_t v1 = type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t result = 0;
  uint64_t v3 = (unsigned char *)(v0 + *(int *)(v1 + 24));
  if ((v3[16] & 1) == 0) {
    return *(void *)v3;
  }
  return result;
}

uint64_t __RKEntityTransformActionArguments.orientation.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v8 = v3 + *(int *)(result + 24);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 1;
  if ((a3 & 1) == 0)
  {
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 8) = a2;
    *(unsigned char *)(v8 + 16) = 0;
  }
  return result;
}

void (*__RKEntityTransformActionArguments.orientation.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 24);
  *((_DWORD *)v3 + 5) = v4;
  uint64_t v5 = (long long *)(v1 + v4);
  char v6 = *(unsigned char *)(v1 + v4 + 16);
  long long v7 = 0uLL;
  if ((v6 & 1) == 0) {
    long long v7 = *v5;
  }
  *(_OWORD *)uint64_t v3 = v7;
  *((unsigned char *)v3 + 16) = v6;
  return __RKEntityTransformActionArguments.orientation.modify;
}

void __RKEntityTransformActionArguments.orientation.modify(void **a1)
{
  uint64_t v1 = (int *)*a1;
  uint64_t v2 = *((void *)v1 + 3) + v1[5];
  long long v3 = *(_OWORD *)v1;
  char v4 = *((unsigned char *)v1 + 16);
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 1;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)v1 + 3) + v1[5];
    *(_OWORD *)uint64_t v5 = v3;
    *(unsigned char *)(v5 + 16) = 0;
  }
  free(v1);
}

unint64_t __RKEntityTransformActionArguments.scale.getter()
{
  return __RKEntityTransformActionArguments.scale.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.scale.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.scale.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.duration.getter()
{
  return __RKEntityTransformActionArguments.duration.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.duration.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.moveType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t __RKEntityTransformActionArguments.moveType.setter(char *a1)
{
  return __RKEntityAudioActionArguments.spatialMode.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityAudioActionArguments.spatialMode.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = v3;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.moveType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.ease.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t __RKEntityTransformActionArguments.ease.setter(char *a1)
{
  return __RKEntityTransformActionArguments.ease.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.ease.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.easeType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 44));
  return result;
}

uint64_t __RKEntityTransformActionArguments.easeType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = v2;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.easeType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.respectPhysics.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 48));
}

uint64_t __RKEntityTransformActionArguments.respectPhysics.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.respectPhysics.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.physicsLinearCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.physicsAngularCoefficient.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 56));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t __RKEntityTransformActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.physicsAngularCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);

  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);

  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityTransformActionArguments.relativeToEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, char *a13, char *a14, char *a15, char a16)
{
  char v47 = *a14;
  char v48 = *a13;
  char v46 = *a15;
  uint64_t v25 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v26 = a9 + v25[15];
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  char v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v45(v26, 1, 1, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(a9, a1, v27);
  float v29 = 1.0;
  if (a10 >= 0.0) {
    float v29 = a10;
  }
  uint64_t v30 = a9 + v25[5];
  uint64_t v31 = a9 + v25[6];
  uint64_t v32 = a9 + v25[8];
  *(float *)uint64_t v32 = v29;
  *(unsigned char *)(v32 + 4) = 0;
  *(void *)uint64_t v30 = a2;
  *(void *)(v30 + 8) = a3;
  *(unsigned char *)(v30 + 16) = a4 & 1;
  *(void *)uint64_t v31 = 0;
  *(void *)(v31 + 8) = 0;
  *(unsigned char *)(v31 + 16) = 1;
  if ((a7 & 1) == 0)
  {
    *(void *)uint64_t v31 = a5;
    *(void *)(v31 + 8) = a6;
    *(unsigned char *)(v31 + 16) = 0;
  }
  uint64_t v33 = a9 + v25[7];
  uint64_t v34 = v25[9];
  uint64_t v35 = v25[10];
  uint64_t v36 = v25[11];
  uint64_t v37 = v25[12];
  uint64_t v38 = v25[14];
  uint64_t v39 = a9 + v25[13];
  *(_DWORD *)uint64_t v33 = a8;
  *(unsigned char *)(v33 + 4) = BYTE4(a8) & 1;
  *(unsigned char *)(a9 + v34) = v48;
  uint64_t v40 = a9 + v38;
  *(unsigned char *)(a9 + v35) = v47;
  *(unsigned char *)(a9 + v36) = v46;
  *(unsigned char *)(a9 + v37) = a16 & 1;
  *(float *)uint64_t v39 = a11;
  *(unsigned char *)(v39 + 4) = 0;
  *(float *)uint64_t v40 = a12;
  *(unsigned char *)(v40 + 4) = 0;
  outlined destroy of BodyTrackingComponent?(v26, &demangling cache variable for type metadata for UUID?);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v45)(v26, 1, 1, v27);
}

uint64_t __RKEntityTransformActionArguments.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1633906540;
      return v3 | 0x6E6F697400000000;
    case 2:
      return 0x61746E6569726F5FLL;
    case 3:
      return 0x656C616373;
    case 4:
      unsigned int v3 = 1634891108;
      return v3 | 0x6E6F697400000000;
    case 5:
      unsigned int v4 = 1702260589;
      goto LABEL_10;
    case 6:
      return 1702060389;
    case 7:
      unsigned int v4 = 1702060389;
LABEL_10:
      uint64_t result = v4 | 0x6570795400000000;
      break;
    case 8:
      uint64_t result = 0x5074636570736572;
      break;
    case 9:
      uint64_t result = 0xD000000000000018;
      break;
    case 10:
      uint64_t result = 0xD000000000000019;
      break;
    case 11:
      uint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTransformActionArguments.CodingKeys()
{
  return __RKEntityTransformActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTransformActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityTransformActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTransformActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTransformActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityTransformActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTransformActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v19 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
    v9 = (long long *)(v3 + v19[5]);
    char v10 = *((unsigned char *)v9 + 16);
    long long v20 = *v9;
    char v21 = v10;
    char v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = (long long *)(v3 + v19[6]);
    char v12 = *((unsigned char *)v11 + 16);
    long long v20 = *v11;
    char v21 = v12;
    char v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v13 = *(unsigned char *)(v3 + v19[7] + 4);
    LOBYTE(v20) = 3;
    char v22 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + v19[8] + 4);
    LOBYTE(v20) = 4;
    char v22 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v20) = *(unsigned char *)(v3 + v19[9]);
    char v22 = 5;
    lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = *(unsigned char *)(v3 + v19[10]);
    char v22 = 6;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = *(unsigned char *)(v3 + v19[11]);
    char v22 = 7;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = *(unsigned char *)(v3 + v19[13] + 4);
    LOBYTE(v20) = 9;
    char v22 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = *(unsigned char *)(v3 + v19[14] + 4);
    LOBYTE(v20) = 10;
    char v22 = v16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v20) = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityTransformActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v43 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v52 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTransformActionArguments.CodingKeys>);
  uint64_t v51 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  v57 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityTransformActionArguments(0);
  __n128 v10 = MEMORY[0x270FA5388](v9 - 8);
  char v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = &v12[v13[7]];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  char v15 = &v12[v13[8]];
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  char v16 = &v12[v13[9]];
  *(_DWORD *)char v16 = 0;
  char v48 = v16;
  v16[4] = 1;
  uint64_t v17 = &v12[v13[10]];
  *(_DWORD *)uint64_t v17 = 0;
  uint64_t v49 = v17;
  v17[4] = 1;
  uint64_t v47 = v13[11];
  v12[v47] = 2;
  uint64_t v46 = v13[12];
  v12[v46] = 10;
  uint64_t v18 = v13[13];
  v12[v18] = 3;
  uint64_t v44 = v13[14];
  uint64_t v45 = v18;
  v12[v44] = 2;
  uint64_t v19 = &v12[v13[15]];
  *(_DWORD *)uint64_t v19 = 0;
  v19[4] = 1;
  long long v20 = &v12[v13[16]];
  *(_DWORD *)long long v20 = 0;
  v20[4] = 1;
  uint64_t v21 = (uint64_t)&v12[v13[17]];
  uint64_t v50 = v6;
  char v22 = *(void (**)(__n128))(v6 + 56);
  uint64_t v55 = v21;
  uint64_t v53 = v5;
  v22(v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  uint64_t v23 = (uint64_t)v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of BodyTrackingComponent?(v55, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v56 = v12;
    uint64_t v40 = v20;
    char v41 = v19;
    uint64_t v25 = v49;
    uint64_t v24 = v50;
    uint64_t v26 = (uint64_t)a1;
    LOBYTE(v58) = 0;
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v27 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v56, v52, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    char v60 = 1;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v28 = v59;
    *(_OWORD *)char v14 = v58;
    v14[16] = v28;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    char v60 = 2;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v29 = v59;
    *(_OWORD *)char v15 = v58;
    v15[16] = v29;
    LOBYTE(v58) = 3;
    uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v31 = v48;
    *(_DWORD *)char v48 = v30;
    v31[4] = BYTE4(v30) & 1;
    LOBYTE(v58) = 4;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(_DWORD *)uint64_t v25 = v32;
    v25[4] = BYTE4(v32) & 1;
    char v60 = 5;
    lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v33 = (uint64_t)v56;
    v56[v47] = v58;
    char v60 = 6;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(unsigned char *)(v33 + v46) = v58;
    char v60 = 7;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(unsigned char *)(v33 + v45) = v58;
    LOBYTE(v58) = 8;
    *(unsigned char *)(v33 + v44) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v58) = 9;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v35 = v41;
    *(_DWORD *)char v41 = v34;
    v35[4] = BYTE4(v34) & 1;
    LOBYTE(v58) = 10;
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v37 = v40;
    *(_DWORD *)uint64_t v40 = v36;
    v37[4] = BYTE4(v36) & 1;
    LOBYTE(v58) = 11;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v54);
    outlined assign with take of UUID?(v43, v55);
    uint64_t v38 = (uint64_t)v56;
    outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v56, v42, type metadata accessor for __RKEntityTransformActionArguments);
    __swift_destroy_boxed_opaque_existential_1(v26);
    return outlined destroy of __RKEntityTriggerSpecification(v38, type metadata accessor for __RKEntityTransformActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityTransformActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityTransformActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityTransformActionArguments(void *a1)
{
  return __RKEntityTransformActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityForceActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityForceActionArguments.force.getter()
{
  return __RKEntityTransformActionArguments.location.getter(type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 20));
}

uint64_t __RKEntityForceActionArguments.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntityTransformActionArguments.location.setter(a1, a2, a3, type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.setter(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v9 = v4 + *(int *)(result + 20);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceActionArguments.force.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityForceActionArguments.velocity.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityForceActionArguments(0) + 24));
}

uint64_t __RKEntityForceActionArguments.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for __RKEntityForceActionArguments(0);
  uint64_t v8 = v3 + *(int *)(result + 24);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceActionArguments.velocity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityForceActionArguments.CodingKeys()
{
  uint64_t v1 = 0x6563726F66;
  if (*v0 != 1) {
    uint64_t v1 = 0x797469636F6C6576;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityForceActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityForceActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityForceActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityForceActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityForceActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityForceActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for __RKEntityForceActionArguments(0);
    __n128 v10 = (long long *)(v3 + *(int *)(v9 + 20));
    char v11 = *((unsigned char *)v10 + 16);
    long long v15 = *v10;
    char v16 = v11;
    char v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = (long long *)(v3 + *(int *)(v9 + 24));
    char v13 = *((unsigned char *)v12 + 16);
    long long v15 = *v12;
    char v16 = v13;
    char v17 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityForceActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v26 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityForceActionArguments.CodingKeys>);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = &v9[*(int *)(v10 + 28)];
  *(void *)char v11 = 0;
  *((void *)v11 + 1) = 0;
  unsigned char v11[16] = 1;
  char v12 = &v9[*(int *)(v10 + 32)];
  *(void *)char v12 = 0;
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  char v28 = v6;
  uint64_t v13 = (uint64_t)v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v22 = v9;
  uint64_t v14 = v25;
  char v29 = a1;
  LOBYTE(v30) = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  long long v15 = v26;
  uint64_t v16 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v15, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v32 = 1;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v17 = v31;
  *(_OWORD *)char v11 = v30;
  unsigned char v11[16] = v17;
  char v32 = 2;
  uint64_t v18 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v16);
  char v19 = v31;
  *(_OWORD *)char v12 = v30;
  v12[16] = v19;
  uint64_t v20 = (uint64_t)v22;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v22, v23, type metadata accessor for __RKEntityForceActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return outlined destroy of __RKEntityTriggerSpecification(v20, type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityForceActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityForceActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityForceActionArguments(void *a1)
{
  return __RKEntityForceActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntitySwapEntityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.newTarget.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntitySwapEntityActionArguments, a1);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t __RKEntitySwapEntityActionArguments.newTarget.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntitySwapEntityActionArguments);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*__RKEntitySwapEntityActionArguments.newTarget.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.buildOutAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined init with copy of __RKEntityTriggerSpecification(v1 + *(int *)(v3 + 24), a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntitySwapEntityActionArguments.buildOutAction.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 24), type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t (*__RKEntitySwapEntityActionArguments.buildOutAction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.buildInAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined init with copy of __RKEntityTriggerSpecification(v1 + *(int *)(v3 + 28), a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntitySwapEntityActionArguments.buildInAction.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 28), type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntitySwapEntityActionArguments.buildInAction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.init(target:newTarget:buildOutAction:buildInAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  char v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(a5, a1, v10);
  char v12 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  v11(a5 + v12[5], a2, v10);
  outlined init with take of __RKEntityTriggerSpecification(a3, a5 + v12[6], type metadata accessor for __RKEntityHideActionArguments);
  return outlined init with take of __RKEntityTriggerSpecification(a4, a5 + v12[7], type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656772615477656ELL;
      break;
    case 2:
      uint64_t result = 0x74754F646C697562;
      break;
    case 3:
      uint64_t result = 0x416E49646C697562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySwapEntityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntitySwapEntityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntitySwapEntityActionArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntitySwapEntityActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySwapEntityActionArguments.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntitySwapEntityActionArguments(0);
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v10 = 2;
    type metadata accessor for __RKEntityHideActionArguments(0);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityHideActionArguments);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v9 = 3;
    type metadata accessor for __RKEntityShowActionArguments(0);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityShowActionArguments);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntitySwapEntityActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v29);
  long long v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v34 = (char *)&v25 - v9;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySwapEntityActionArguments.CodingKeys>);
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  uint64_t v37 = v11;
  uint64_t v15 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v25 = v5;
  uint64_t v26 = v7;
  uint64_t v38 = a1;
  uint64_t v27 = v14;
  char v42 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v16 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v36;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v18(v27, v16, v36);
  char v41 = 1;
  char v19 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = v12;
  v18(&v27[*(int *)(v12 + 20)], v19, v17);
  char v40 = 2;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityHideActionArguments);
  uint64_t v21 = (uint64_t)v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = (uint64_t)v27;
  outlined init with take of __RKEntityTriggerSpecification(v21, (uint64_t)&v27[*(int *)(v20 + 24)], type metadata accessor for __RKEntityHideActionArguments);
  char v39 = 3;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityShowActionArguments);
  uint64_t v24 = (uint64_t)v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v35);
  outlined init with take of __RKEntityTriggerSpecification(v24, v23 + *(int *)(v20 + 28), type metadata accessor for __RKEntityShowActionArguments);
  outlined init with copy of __RKEntityTriggerSpecification(v23, v28, type metadata accessor for __RKEntitySwapEntityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return outlined destroy of __RKEntityTriggerSpecification(v23, type metadata accessor for __RKEntitySwapEntityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySwapEntityActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySwapEntityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySwapEntityActionArguments(void *a1)
{
  return __RKEntitySwapEntityActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (static UUID.== infix(_:_:)() & 1) != 0
    && (specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0)
  {
    char v6 = specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t (*__RKEntitySpinActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntitySpinActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntitySpinActionArguments.iterations.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.iterations.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.iterations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySpinActionArguments.direction.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntitySpinActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntitySpinActionArguments.direction.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.direction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySpinActionArguments.axis.getter()
{
  return __RKEntitySpinActionArguments.axis.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntitySpinActionArguments.axis.setter(a1, a2, a3, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.axis.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySpinActionArguments.CodingKeys()
{
  uint64_t result = 0x746567726174;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      uint64_t result = 0x6F69746172657469;
      break;
    case 3:
      uint64_t result = 0x6F69746365726964;
      break;
    case 4:
      uint64_t result = 1936291937;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySpinActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntitySpinActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySpinActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySpinActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntitySpinActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySpinActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
    char v10 = *(unsigned char *)(v3 + v9[5] + 4);
    LOBYTE(v15) = 1;
    char v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[6] + 4);
    LOBYTE(v15) = 2;
    char v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = *(unsigned char *)(v3 + v9[7]);
    char v17 = 3;
    lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = (long long *)(v3 + v9[8]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v15 = *v12;
    char v16 = v13;
    char v17 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntitySpinActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v27 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySpinActionArguments.CodingKeys>);
  uint64_t v24 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = &v9[v10[7]];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v12 = &v9[v10[8]];
  *(_DWORD *)uint64_t v12 = 0;
  v12[4] = 1;
  uint64_t v23 = v10[9];
  v9[v23] = 2;
  char v13 = &v9[v10[10]];
  *(void *)char v13 = 0;
  *((void *)v13 + 1) = 0;
  unsigned char v13[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  uint64_t v28 = v6;
  uint64_t v14 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v15 = v25;
  long long v30 = a1;
  LOBYTE(v31) = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v27, v16);
  LOBYTE(v31) = 1;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v11 = v17;
  v11[4] = BYTE4(v17) & 1;
  LOBYTE(v31) = 2;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)uint64_t v12 = v18;
  v12[4] = BYTE4(v18) & 1;
  char v33 = 3;
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v9[v23] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v33 = 4;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v29);
  char v19 = v32;
  *(_OWORD *)char v13 = v31;
  unsigned char v13[16] = v19;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v9, v22, type metadata accessor for __RKEntitySpinActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v9, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySpinActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySpinActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySpinActionArguments(void *a1)
{
  return __RKEntitySpinActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments, a1);
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.pivotTarget.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.duration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.rotations.getter()
{
  return __RKEntityTransformActionArguments.scale.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

unint64_t __RKEntityTransformActionArguments.scale.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 28));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityOrbitEntityActionArguments.rotations.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.scale.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityTransformActionArguments.scale.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.rotations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.getter()
{
  return __RKEntitySpinActionArguments.axis.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 32));
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntitySpinActionArguments.axis.setter(a1, a2, a3, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.setter(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v9 = v4 + *(int *)(result + 32);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.orbitalAxis.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityOrbitEntityActionArguments(0) + 36));
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.orientToPath.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.setter(char *a1)
{
  return __RKEntityTransformActionArguments.ease.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityTransformActionArguments.ease.setter(char *a1, uint64_t (*a2)(void))
{
  char v3 = *a1;
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.spinDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.respectPhysics.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityOrbitEntityActionArguments(0) + 44));
}

uint64_t __RKEntityOrbitEntityActionArguments.respectPhysics.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.respectPhysics.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x726154746F766970;
      break;
    case 2:
      unsigned int v3 = 1634891108;
      goto LABEL_5;
    case 3:
      unsigned int v3 = 1635020658;
LABEL_5:
      uint64_t result = v3 | 0x6E6F697400000000;
      break;
    case 4:
      uint64_t result = 0x416C61746962726FLL;
      break;
    case 5:
      uint64_t result = 0x6F54746E6569726FLL;
      break;
    case 6:
      uint64_t result = 0x657269446E697073;
      break;
    case 7:
      uint64_t result = 0x5074636570736572;
      break;
    case 8:
      uint64_t result = 0xD000000000000018;
      break;
    case 9:
      uint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  return __RKEntityOrbitEntityActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityOrbitEntityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityOrbitEntityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityOrbitEntityActionArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityOrbitEntityActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityOrbitEntityActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
    LOBYTE(v17) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v10 = *(unsigned char *)(v3 + v9[6] + 4);
    LOBYTE(v17) = 2;
    char v19 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[7] + 4);
    LOBYTE(v17) = 3;
    char v19 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = (long long *)(v3 + v9[8]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v17 = *v12;
    char v18 = v13;
    char v19 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v17) = *(unsigned char *)(v3 + v9[10]);
    char v19 = 6;
    lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + v9[12] + 4);
    LOBYTE(v17) = 8;
    char v19 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = *(unsigned char *)(v3 + v9[13] + 4);
    LOBYTE(v17) = 9;
    char v19 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityOrbitEntityActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v50 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v51 = (char *)&v38 - v5;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityOrbitEntityActionArguments.CodingKeys>);
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = &v10[v11[6]];
  *(_DWORD *)uint64_t v12 = 0;
  char v48 = v12;
  v12[4] = 1;
  char v13 = &v10[v11[7]];
  *(_DWORD *)char v13 = 0;
  uint64_t v47 = v13;
  v13[4] = 1;
  char v14 = &v10[v11[8]];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v46 = v11[9];
  v10[v46] = 2;
  uint64_t v45 = v11[10];
  v10[v45] = 2;
  uint64_t v44 = v11[11];
  v10[v44] = 2;
  char v15 = &v10[v11[12]];
  *(_DWORD *)char v15 = 0;
  v15[4] = 1;
  uint64_t v16 = &v10[v11[13]];
  *(_DWORD *)uint64_t v16 = 0;
  v16[4] = 1;
  uint64_t v17 = a1[3];
  uint64_t v56 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  uint64_t v54 = v7;
  uint64_t v18 = (uint64_t)v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = v50;
  char v41 = v14;
  char v42 = v10;
  uint64_t v56 = v8;
  char v40 = v15;
  char v39 = v16;
  v57 = a1;
  LOBYTE(v58) = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v20 = v51;
  uint64_t v21 = v52;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = (uint64_t)v42;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  v23(v42, v20, v21);
  LOBYTE(v58) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v23((char *)(v22 + *(int *)(v56 + 20)), v19, v21);
  LOBYTE(v58) = 2;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = v48;
  *(_DWORD *)char v48 = v24;
  v25[4] = BYTE4(v24) & 1;
  LOBYTE(v58) = 3;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v27 = v47;
  *(_DWORD *)uint64_t v47 = v26;
  v27[4] = BYTE4(v26) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v60 = 4;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v28 = v59;
  uint64_t v29 = v41;
  *(_OWORD *)char v41 = v58;
  v29[16] = v28;
  LOBYTE(v58) = 5;
  char v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v51 = 0;
  uint64_t v31 = (uint64_t)v42;
  v42[v46] = v30;
  char v60 = 6;
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(unsigned char *)(v31 + v45) = v58;
  LOBYTE(v58) = 7;
  *(unsigned char *)(v31 + v44) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v58) = 8;
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v33 = v40;
  *(_DWORD *)char v40 = v32;
  v33[4] = BYTE4(v32) & 1;
  LOBYTE(v58) = 9;
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  uint64_t v35 = v39;
  *(_DWORD *)char v39 = v34;
  v35[4] = BYTE4(v34) & 1;
  uint64_t v36 = (uint64_t)v42;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v42, v43, type metadata accessor for __RKEntityOrbitEntityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  return outlined destroy of __RKEntityTriggerSpecification(v36, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityOrbitEntityActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityOrbitEntityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityOrbitEntityActionArguments(void *a1)
{
  return __RKEntityOrbitEntityActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityLookAtCameraActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.animationDuration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityLookAtCameraActionArguments.animationDuration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.animationDuration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 28));
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  uint64_t v8 = v3 + *(int *)(result + 28);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.direction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.rotation.getter()
{
  return __RKEntityTransformActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

unint64_t __RKEntityTransformActionArguments.duration.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 32));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityLookAtCameraActionArguments.rotation.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityTransformActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.rotation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 36));
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  uint64_t v8 = v3 + *(int *)(result + 36);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.upVector.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.loops.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 40));
}

uint64_t __RKEntityLookAtCameraActionArguments.loops.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.loops.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1634891108;
      goto LABEL_6;
    case 2:
      uint64_t result = 0xD000000000000011;
      break;
    case 3:
      uint64_t result = 0x6F69746365726964;
      break;
    case 4:
      unsigned int v3 = 1635020658;
LABEL_6:
      uint64_t result = v3 | 0x6E6F697400000000;
      break;
    case 5:
      uint64_t result = 0x726F746365567075;
      break;
    case 6:
      uint64_t result = 0x73706F6F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  return __RKEntityLookAtCameraActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityLookAtCameraActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityLookAtCameraActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityLookAtCameraActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityLookAtCameraActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
    char v10 = *(unsigned char *)(v3 + v9[5] + 4);
    LOBYTE(v18) = 1;
    char v20 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[6] + 4);
    LOBYTE(v18) = 2;
    char v20 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = (long long *)(v3 + v9[7]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v18 = *v12;
    char v19 = v13;
    char v20 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + v9[8] + 4);
    LOBYTE(v18) = 4;
    char v20 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = (long long *)(v3 + v9[9]);
    char v16 = *((unsigned char *)v15 + 16);
    long long v18 = *v15;
    char v19 = v16;
    char v20 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityLookAtCameraActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityLookAtCameraActionArguments.CodingKeys>);
  uint64_t v36 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = &v8[v9[7]];
  *(_DWORD *)char v10 = 0;
  uint64_t v35 = v10;
  v10[4] = 1;
  char v11 = &v8[v9[8]];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v12 = &v8[v9[9]];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  char v13 = &v8[v9[10]];
  *(_DWORD *)char v13 = 0;
  v13[4] = 1;
  char v14 = &v8[v9[11]];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v32 = v9[12];
  v8[v32] = 2;
  uint64_t v15 = a1[3];
  char v41 = (char *)a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  char v39 = v5;
  uint64_t v16 = (uint64_t)v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v41 = v11;
  char v42 = a1;
  uint64_t v31 = v14;
  long long v18 = v35;
  uint64_t v17 = v36;
  LOBYTE(v43) = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v19 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v8, v38, v19);
  LOBYTE(v43) = 1;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)long long v18 = v20;
  v18[4] = BYTE4(v20) & 1;
  LOBYTE(v43) = 2;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v22 = v41;
  *(_DWORD *)char v41 = v21;
  v22[4] = BYTE4(v21) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v45 = 3;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v23 = v44;
  *(_OWORD *)uint64_t v12 = v43;
  v12[16] = v23;
  LOBYTE(v43) = 4;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v13 = v24;
  v13[4] = BYTE4(v24) & 1;
  char v45 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v25 = v17;
  char v26 = v44;
  uint64_t v27 = v31;
  *(_OWORD *)uint64_t v31 = v43;
  v27[16] = v26;
  LOBYTE(v43) = 6;
  char v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v39, v40);
  uint64_t v29 = v33;
  v8[v32] = v28;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v8, v29, type metadata accessor for __RKEntityLookAtCameraActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v8, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityLookAtCameraActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityLookAtCameraActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityLookAtCameraActionArguments(void *a1)
{
  return __RKEntityLookAtCameraActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntitySetOpacityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntitySetOpacityActionArguments.duration.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntitySetOpacityActionArguments(0) + 20));
}

uint64_t __RKEntitySetOpacityActionArguments.duration.setter(float a1)
{
  uint64_t result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*__RKEntitySetOpacityActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntitySetOpacityActionArguments.opacity.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntitySetOpacityActionArguments(0) + 24));
}

uint64_t __RKEntitySetOpacityActionArguments.opacity.setter(float a1)
{
  uint64_t result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*__RKEntitySetOpacityActionArguments.opacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySetOpacityActionArguments.init(target:duration:opacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  uint64_t result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(a2 + *(int *)(result + 20)) = a3;
  *(float *)(a2 + *(int *)(result + 24)) = a4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  uint64_t v1 = 0x6E6F697461727564;
  if (*v0 != 1) {
    uint64_t v1 = 0x7974696361706FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySetOpacityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntitySetOpacityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntitySetOpacityActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySetOpacityActionArguments.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntitySetOpacityActionArguments(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntitySetOpacityActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySetOpacityActionArguments.CodingKeys>);
  uint64_t v19 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v20;
  char v25 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v13 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v22, v4);
  char v24 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)(v11 + *(int *)(v8 + 20)) = v14;
  char v23 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v16 = v15;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v13);
  *(_DWORD *)(v11 + *(int *)(v8 + 24)) = v16;
  outlined init with copy of __RKEntityTriggerSpecification(v11, v18, type metadata accessor for __RKEntitySetOpacityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityTriggerSpecification(v11, type metadata accessor for __RKEntitySetOpacityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySetOpacityActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySetOpacityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySetOpacityActionArguments(void *a1)
{
  return __RKEntitySetOpacityActionArguments.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)() & 1) != 0
      && *(float *)(a1 + *(int *)(a3 + 20)) == *(float *)(a2 + *(int *)(a3 + 20))
      && *(float *)(a1 + *(int *)(a3 + 24)) == *(float *)(a2 + *(int *)(a3 + 24));
}

uint64_t __RKChangeSceneActionArguments.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t __RKEntityCustomActionArguments.target.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntityPlayTimelineActionArguments, a1);
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntityPlayTimelineActionArguments);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKey.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKey.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 28);

  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 28);

  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  uint64_t v13 = a8 + v12[7];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  int v16 = (void *)(a8 + v12[8]);
  *int v16 = 0;
  v16[1] = 0;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v17(a8, a1, v14);
  v17(a8 + v12[5], a2, v14);
  uint64_t v18 = (void *)(a8 + v12[6]);
  *uint64_t v18 = a3;
  v18[1] = a4;
  outlined assign with take of UUID?(a5, v13);
  uint64_t result = swift_bridgeObjectRelease();
  *int v16 = a6;
  v16[1] = a7;
  return result;
}

unint64_t __RKEntityPlayTimelineActionArguments.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  return __RKEntityPlayTimelineActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityPlayTimelineActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityPlayTimelineActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityPlayTimelineActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityPlayTimelineActionArguments.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
    char v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntityPlayTimelineActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  char v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v44 = (char *)&v38 - v10;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityPlayTimelineActionArguments.CodingKeys>);
  uint64_t v42 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  char v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v16[*(int *)(v17 + 28)];
  uint64_t v43 = v6;
  uint64_t v19 = *(void (**)(__n128))(v6 + 56);
  uint64_t v47 = v18;
  v19(v14);
  uint64_t v20 = &v16[*(int *)(v13 + 32)];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  char v48 = v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  uint64_t v46 = v12;
  uint64_t v21 = (uint64_t)v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of BodyTrackingComponent?(v47, &demangling cache variable for type metadata for UUID?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = v13;
    uint64_t v22 = v43;
    uint64_t v49 = a1;
    char v54 = 0;
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v23 = v5;
    char v24 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    char v25 = v16;
    v24(v16, v44, v23);
    char v53 = 1;
    char v26 = v8;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v27 = v39;
    v24(&v25[*(int *)(v39 + 20)], v26, v23);
    char v52 = 2;
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v29 = (uint64_t *)&v25[*(int *)(v27 + 24)];
    *uint64_t v29 = v28;
    v29[1] = v30;
    char v51 = 3;
    uint64_t v31 = (uint64_t)v41;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = (uint64_t)v25;
    outlined assign with take of UUID?(v31, v47);
    char v50 = 4;
    uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v45);
    uint64_t v36 = (uint64_t *)v48;
    swift_bridgeObjectRelease();
    uint64_t *v36 = v33;
    v36[1] = v35;
    outlined init with copy of __RKEntityTriggerSpecification(v32, v40, type metadata accessor for __RKEntityPlayTimelineActionArguments);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    return outlined destroy of __RKEntityTriggerSpecification(v32, type metadata accessor for __RKEntityPlayTimelineActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityPlayTimelineActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityPlayTimelineActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityPlayTimelineActionArguments(void *a1)
{
  return __RKEntityPlayTimelineActionArguments.encode(to:)(a1);
}

uint64_t __RKEntityInteractionSpecification.trigger.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __RKEntityTriggerSpecification(v1, a1, type metadata accessor for __RKEntityTriggerSpecification);
}

uint64_t __RKEntityInteractionSpecification.trigger.setter(uint64_t a1)
{
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1, type metadata accessor for __RKEntityTriggerSpecification);
}

uint64_t (*__RKEntityInteractionSpecification.trigger.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for __RKEntityInteractionSpecification(0);
  return outlined init with copy of __RKEntityTriggerSpecification(v1 + *(int *)(v3 + 20), a1, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityInteractionSpecification.action.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for __RKEntityInteractionSpecification(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 20), type metadata accessor for __RKEntityActionSpecification);
}

uint64_t (*__RKEntityInteractionSpecification.action.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.accessibilityDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityInteractionSpecification.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityInteractionSpecification.accessibilityDescription.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v7 = (void *)(a3 + *(int *)(v6 + 24));
  outlined init with take of __RKEntityTriggerSpecification(a1, a3, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t result = outlined init with take of __RKEntityTriggerSpecification(a2, a3 + *(int *)(v6 + 20), type metadata accessor for __RKEntityActionSpecification);
  *uint64_t v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v7 = (void *)(a3 + *(int *)(v6 + 24));
  outlined init with take of __RKEntityTriggerSpecification(a1, a3, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t result = outlined init with take of __RKEntityTriggerSpecification(a2, a3 + *(int *)(v6 + 20), type metadata accessor for __RKEntityActionSpecification);
  *uint64_t v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:accessibilityDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v11 = (void *)(a5 + *(int *)(v10 + 24));
  outlined init with take of __RKEntityTriggerSpecification(a1, a5, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t result = outlined init with take of __RKEntityTriggerSpecification(a2, a5 + *(int *)(v10 + 20), type metadata accessor for __RKEntityActionSpecification);
  *uint64_t v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v11 = (void *)(a5 + *(int *)(v10 + 24));
  outlined init with take of __RKEntityTriggerSpecification(a1, a5, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t result = outlined init with take of __RKEntityTriggerSpecification(a2, a5 + *(int *)(v10 + 20), type metadata accessor for __RKEntityActionSpecification);
  *uint64_t v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t __RKEntityInteractionSpecification.description.getter()
{
  type metadata accessor for __RKEntityTriggerSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  type metadata accessor for __RKEntityInteractionSpecification(0);
  type metadata accessor for __RKEntityActionSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityInteractionSpecification.CodingKeys()
{
  unint64_t v1 = 0x6E6F69746361;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000018;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72656767697274;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityInteractionSpecification.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityInteractionSpecification.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityInteractionSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityInteractionSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityInteractionSpecification.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityInteractionSpecification.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for __RKEntityTriggerSpecification(0);
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityTriggerSpecification);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntityInteractionSpecification(0);
    v8[14] = 1;
    type metadata accessor for __RKEntityActionSpecification(0);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityActionSpecification);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntityInteractionSpecification.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v26 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v28 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityInteractionSpecification.CodingKeys>);
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = &v12[*(int *)(v13 + 24)];
  *(void *)__n128 v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v29 = a1;
  uint64_t v30 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = v10;
    uint64_t v15 = v25;
    uint64_t v16 = (uint64_t)v12;
    char v33 = 0;
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v17 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of __RKEntityTriggerSpecification(v28, v16, type metadata accessor for __RKEntityTriggerSpecification);
    char v32 = 1;
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityActionSpecification);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of __RKEntityTriggerSpecification((uint64_t)v5, v16 + *(int *)(v23 + 20), type metadata accessor for __RKEntityActionSpecification);
    char v31 = 2;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v17);
    uint64_t v21 = (uint64_t *)v30;
    swift_bridgeObjectRelease();
    uint64_t *v21 = v18;
    v21[1] = v20;
    outlined init with copy of __RKEntityTriggerSpecification(v16, v24, type metadata accessor for __RKEntityInteractionSpecification);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return outlined destroy of __RKEntityTriggerSpecification(v16, type metadata accessor for __RKEntityInteractionSpecification);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityInteractionSpecification@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityInteractionSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityInteractionSpecification(void *a1)
{
  return __RKEntityInteractionSpecification.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityInteractionSpecification()
{
  type metadata accessor for __RKEntityTriggerSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  type metadata accessor for __RKEntityActionSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

BOOL specialized static __RKEntityAudioActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  uint64_t v12 = v4[6];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3) {
      return 0;
    }
    goto LABEL_25;
  }
  if (v14 == 3) {
    return 0;
  }
  uint64_t v15 = 2036427888;
  if (!v13)
  {
    unint64_t v16 = 0xE400000000000000;
    uint64_t v17 = 2036427888;
    if (v14) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (v13 != 1)
  {
    unint64_t v16 = 0xE400000000000000;
    uint64_t v17 = 1886352499;
    if (v14) {
      goto LABEL_16;
    }
LABEL_19:
    unint64_t v18 = 0xE400000000000000;
    goto LABEL_21;
  }
  unint64_t v16 = 0xE500000000000000;
  uint64_t v17 = 0x6573756170;
  if (!v14) {
    goto LABEL_19;
  }
LABEL_16:
  if (v14 == 1)
  {
    unint64_t v18 = 0xE500000000000000;
    uint64_t v15 = 0x6573756170;
  }
  else
  {
    unint64_t v18 = 0xE400000000000000;
    uint64_t v15 = 1886352499;
  }
LABEL_21:
  if (v17 == v15 && v16 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v19 & 1) == 0) {
      return result;
    }
  }
LABEL_25:
  uint64_t v20 = v4[7];
  uint64_t v21 = (double *)(a1 + v20);
  char v22 = *(unsigned char *)(a1 + v20 + 8);
  uint64_t v23 = (double *)(a2 + v20);
  int v24 = *(unsigned __int8 *)(a2 + v20 + 8);
  if (v22)
  {
    if (!v24) {
      return 0;
    }
  }
  else
  {
    if (*v21 != *v23) {
      LOBYTE(v24) = 1;
    }
    if (v24) {
      return 0;
    }
  }
  uint64_t v25 = v4[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 != 2) {
      return 0;
    }
    goto LABEL_36;
  }
  BOOL result = 0;
  BOOL v28 = (v26 & 1) == 0;
  if (v27 != 2 && ((v28 ^ v27) & 1) != 0)
  {
LABEL_36:
    uint64_t v29 = v4[9];
    int v30 = *(unsigned __int8 *)(a1 + v29);
    int v31 = *(unsigned __int8 *)(a2 + v29);
    if (v30 == 3)
    {
      if (v31 != 3) {
        return 0;
      }
    }
    else
    {
      if (v31 == 3) {
        return 0;
      }
      unint64_t v32 = 0xEC00000065637275;
      uint64_t v33 = 0x6F7320746E696F70;
      if (v30)
      {
        if (v30 == 1)
        {
          unint64_t v34 = 0xE700000000000000;
          uint64_t v35 = 0x746E6569626D61;
        }
        else
        {
          unint64_t v34 = 0xE500000000000000;
          uint64_t v35 = 0x636973756DLL;
        }
      }
      else
      {
        uint64_t v35 = 0x6F7320746E696F70;
        unint64_t v34 = 0xEC00000065637275;
      }
      if (v31)
      {
        if (v31 == 1)
        {
          unint64_t v32 = 0xE700000000000000;
          uint64_t v33 = 0x746E6569626D61;
        }
        else
        {
          unint64_t v32 = 0xE500000000000000;
          uint64_t v33 = 0x636973756DLL;
        }
      }
      if (v35 == v33 && v34 == v32)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL result = 0;
        if ((v36 & 1) == 0) {
          return result;
        }
      }
    }
    uint64_t v37 = v4[10];
    int v38 = *(unsigned __int8 *)(a1 + v37);
    int v39 = *(unsigned __int8 *)(a2 + v37);
    if (v38 == 3) {
      return v39 == 3;
    }
    if (v39 != 3)
    {
      unint64_t v40 = 0xED00007473657571;
      unint64_t v41 = 0x657220776F6C6C61;
      if (v38)
      {
        if (v38 == 1)
        {
          unint64_t v42 = 0x722065726F6E6769;
          unint64_t v43 = 0xEE00747365757165;
        }
        else
        {
          unint64_t v43 = 0x800000022834DAE0;
          unint64_t v42 = 0xD000000000000014;
        }
      }
      else
      {
        unint64_t v42 = 0x657220776F6C6C61;
        unint64_t v43 = 0xED00007473657571;
      }
      if (v39)
      {
        if (v39 == 1)
        {
          unint64_t v41 = 0x722065726F6E6769;
          unint64_t v40 = 0xEE00747365757165;
        }
        else
        {
          unint64_t v40 = 0x800000022834DAE0;
          unint64_t v41 = 0xD000000000000014;
        }
      }
      if (v42 == v41 && v43 == v40)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v44) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized static __RKEntityEmphasisActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
  uint64_t v5 = v4;
  uint64_t v6 = v4[5];
  uint64_t v7 = (float *)(a1 + v6);
  char v8 = *(unsigned char *)(a1 + v6 + 4);
  uint64_t v9 = (float *)(a2 + v6);
  int v10 = *(unsigned __int8 *)(a2 + v6 + 4);
  if (v8)
  {
    if (!v10) {
      return 0;
    }
  }
  else
  {
    if (*v7 != *v9) {
      LOBYTE(v10) = 1;
    }
    if (v10) {
      return 0;
    }
  }
  uint64_t v11 = v4[6];
  uint64_t v12 = (float *)(a1 + v11);
  char v13 = *(unsigned char *)(a1 + v11 + 4);
  int v14 = (float *)(a2 + v11);
  int v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if (v13)
  {
    if (!v15) {
      return 0;
    }
  }
  else
  {
    if (*v12 != *v14) {
      LOBYTE(v15) = 1;
    }
    if (v15) {
      return 0;
    }
  }
  uint64_t v16 = v4[7];
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 3)
  {
    if (v18 != 3) {
      return 0;
    }
LABEL_32:
    uint64_t v25 = v5[8];
    int v26 = *(unsigned __int8 *)(a1 + v25);
    int v27 = *(unsigned __int8 *)(a2 + v25);
    if (v26 == 8)
    {
      if (v27 != 8) {
        return 0;
      }
    }
    else if (v27 == 8 || (specialized == infix<A>(_:_:)(v26, v27) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  if (v18 != 3)
  {
    uint64_t v19 = 0x6369736162;
    if (v17)
    {
      if (v17 == 1)
      {
        unint64_t v20 = 0xE700000000000000;
        uint64_t v21 = 0x6C756679616C70;
      }
      else
      {
        unint64_t v20 = 0xE400000000000000;
        uint64_t v21 = 1684826487;
      }
    }
    else
    {
      unint64_t v20 = 0xE500000000000000;
      uint64_t v21 = 0x6369736162;
    }
    if (v18)
    {
      if (v18 == 1)
      {
        unint64_t v22 = 0xE700000000000000;
        uint64_t v19 = 0x6C756679616C70;
      }
      else
      {
        unint64_t v22 = 0xE400000000000000;
        uint64_t v19 = 1684826487;
      }
    }
    else
    {
      unint64_t v22 = 0xE500000000000000;
    }
    if (v21 == v19 && v20 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v23 & 1) == 0) {
        return result;
      }
    }
    goto LABEL_32;
  }
  return 0;
}

uint64_t specialized static __RKEntityForceActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for __RKEntityForceActionArguments(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (long long *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 16);
  char v8 = (long long *)(a2 + v5);
  char v9 = *(unsigned char *)(a2 + v5 + 16);
  if (v7)
  {
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v9) {
      return 0;
    }
    uint64_t v10 = 0;
    long long v11 = *v6;
    long long v12 = *v8;
    while (1)
    {
      long long v31 = v11;
      float v15 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      long long v32 = v12;
      float v16 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      BOOL v13 = v15 == v16;
      if (v10 == 2) {
        break;
      }
      while (1)
      {
        ++v10;
        if (v13) {
          break;
        }
        BOOL v13 = 0;
        uint64_t v14 = 0;
        if (v10 == 2) {
          return v14;
        }
      }
    }
    if (v15 != v16) {
      return 0;
    }
  }
  uint64_t v17 = *(int *)(v4 + 24);
  int v18 = (long long *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 16);
  unint64_t v20 = (long long *)(a2 + v17);
  char v21 = *(unsigned char *)(a2 + v17 + 16);
  if (v19)
  {
    if ((v21 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v21) {
      return 0;
    }
    uint64_t v22 = 0;
    long long v23 = *v18;
    long long v24 = *v20;
    while (1)
    {
      long long v29 = v23;
      float v26 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
      long long v30 = v24;
      float v27 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
      BOOL v25 = v26 == v27;
      if (v22 == 2) {
        break;
      }
      while (1)
      {
        ++v22;
        if (v25) {
          break;
        }
        if (v22 == 2) {
          return 0;
        }
        BOOL v25 = 0;
      }
    }
    if (v26 != v27) {
      return 0;
    }
  }
  return 1;
}

uint64_t specialized static __RKEntityHideActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  char v8 = (int *)a3(0);
  char v9 = v8;
  uint64_t v10 = v8[5];
  long long v11 = (float *)(a1 + v10);
  char v12 = *(unsigned char *)(a1 + v10 + 4);
  BOOL v13 = (float *)(a2 + v10);
  int v14 = *(unsigned __int8 *)(a2 + v10 + 4);
  if (v12)
  {
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (*v11 != *v13) {
      LOBYTE(v14) = 1;
    }
    if (v14) {
      return 0;
    }
  }
  uint64_t v15 = v8[6];
  float v16 = (float *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 4);
  int v18 = (float *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 4);
  if (v17)
  {
    if (!v19) {
      return 0;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      return 0;
    }
  }
  uint64_t v20 = v8[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 != 10) {
      return 0;
    }
  }
  else if (v22 == 10 || (specialized == infix<A>(_:_:)(v21, v22) & 1) == 0)
  {
    return 0;
  }
  uint64_t v23 = v9[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 3)
  {
    if (v25 != 3) {
      return 0;
    }
  }
  else
  {
    if (v25 == 3) {
      return 0;
    }
    unint64_t v26 = 0x6E692065736165;
    if (v24)
    {
      if (v24 == 1)
      {
        unint64_t v27 = 0xE800000000000000;
        unint64_t v28 = 0x74756F2065736165;
      }
      else
      {
        unint64_t v27 = 0x800000022834D880;
        unint64_t v28 = 0xD000000000000010;
      }
    }
    else
    {
      unint64_t v27 = 0xE700000000000000;
      unint64_t v28 = 0x6E692065736165;
    }
    if (v25)
    {
      if (v25 == 1)
      {
        unint64_t v29 = 0xE800000000000000;
        unint64_t v26 = 0x74756F2065736165;
      }
      else
      {
        unint64_t v29 = 0x800000022834D880;
        unint64_t v26 = 0xD000000000000010;
      }
    }
    else
    {
      unint64_t v29 = 0xE700000000000000;
    }
    if (v28 == v26 && v27 == v29)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v30 & 1) == 0) {
        return result;
      }
    }
  }
  uint64_t v32 = v9[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v35 = (v33 & 1) == 0;
    if (v34 == 2 || ((v35 ^ v34) & 1) == 0) {
      return result;
    }
  }
  uint64_t v36 = v9[10];
  uint64_t v37 = (float *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 4);
  int v39 = (float *)(a2 + v36);
  int v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if (v38)
  {
    if (!v40) {
      return 0;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      return 0;
    }
  }
  uint64_t v41 = v9[11];
  int v42 = *(unsigned __int8 *)(a1 + v41);
  int v43 = *(unsigned __int8 *)(a2 + v41);
  if (v42 == 2)
  {
    if (v43 != 2) {
      return 0;
    }
    goto LABEL_53;
  }
  uint64_t result = 0;
  BOOL v44 = (v42 & 1) == 0;
  if (v43 != 2 && ((v44 ^ v43) & 1) != 0)
  {
LABEL_53:
    uint64_t v45 = v9[12];
    uint64_t v46 = (float *)(a1 + v45);
    char v47 = *(unsigned char *)(a1 + v45 + 4);
    char v48 = (float *)(a2 + v45);
    int v49 = *(unsigned __int8 *)(a2 + v45 + 4);
    if (v47)
    {
      if (!v49) {
        return 0;
      }
    }
    else
    {
      if (*v46 != *v48) {
        LOBYTE(v49) = 1;
      }
      if (v49) {
        return 0;
      }
    }
    uint64_t v50 = v9[13];
    char v51 = (float *)(a1 + v50);
    char v52 = *(unsigned char *)(a1 + v50 + 4);
    char v53 = (float *)(a2 + v50);
    int v54 = *(unsigned __int8 *)(a2 + v50 + 4);
    if (v52)
    {
      if (!v54) {
        return 0;
      }
    }
    else
    {
      if (*v51 != *v53) {
        LOBYTE(v54) = 1;
      }
      if (v54) {
        return 0;
      }
    }
    uint64_t v55 = v9[14];
    int v56 = *(unsigned __int8 *)(a1 + v55);
    int v57 = *(unsigned __int8 *)(a2 + v55);
    if (v56 == 3)
    {
      if (v57 != 3) {
        return 0;
      }
LABEL_83:
      uint64_t v63 = v9[15];
      int v64 = *(unsigned __int8 *)(a2 + v63);
      if (*(unsigned char *)(a1 + v63) == 10)
      {
        if (v64 != 10) {
          return 0;
        }
      }
      else if (v64 == 10 || (a4() & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    if (v57 != 3)
    {
      uint64_t v58 = 0x6369736162;
      if (v56)
      {
        if (v56 == 1)
        {
          unint64_t v59 = 0xE700000000000000;
          uint64_t v60 = 0x6C756679616C70;
        }
        else
        {
          unint64_t v59 = 0xE400000000000000;
          uint64_t v60 = 1684826487;
        }
      }
      else
      {
        unint64_t v59 = 0xE500000000000000;
        uint64_t v60 = 0x6369736162;
      }
      if (v57)
      {
        if (v57 == 1)
        {
          unint64_t v61 = 0xE700000000000000;
          uint64_t v58 = 0x6C756679616C70;
        }
        else
        {
          unint64_t v61 = 0xE400000000000000;
          uint64_t v58 = 1684826487;
        }
      }
      else
      {
        unint64_t v61 = 0xE500000000000000;
      }
      if (v60 == v58 && v59 == v61)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        if ((v62 & 1) == 0) {
          return result;
        }
      }
      goto LABEL_83;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static __RKEntityFadeActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for __RKEntityFadeActionArguments(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = (float *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 4);
  char v8 = (float *)(a2 + v5);
  char v9 = *(unsigned char *)(a2 + v5 + 4);
  if (v7)
  {
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v6 != *v8) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  return 1;
}

BOOL specialized static __RKEntitySpinActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  uint64_t v5 = v4;
  uint64_t v6 = v4[5];
  char v7 = (float *)(a1 + v6);
  char v8 = *(unsigned char *)(a1 + v6 + 4);
  char v9 = (float *)(a2 + v6);
  int v10 = *(unsigned __int8 *)(a2 + v6 + 4);
  if (v8)
  {
    if (!v10) {
      return 0;
    }
  }
  else
  {
    if (*v7 != *v9) {
      LOBYTE(v10) = 1;
    }
    if (v10) {
      return 0;
    }
  }
  uint64_t v11 = v4[6];
  char v12 = (float *)(a1 + v11);
  char v13 = *(unsigned char *)(a1 + v11 + 4);
  int v14 = (float *)(a2 + v11);
  int v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if (v13)
  {
    if (!v15) {
      return 0;
    }
  }
  else
  {
    if (*v12 != *v14) {
      LOBYTE(v15) = 1;
    }
    if (v15) {
      return 0;
    }
  }
  uint64_t v16 = v4[7];
  int v17 = *(unsigned __int8 *)(a1 + v16);
  int v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2) {
      return 0;
    }
    goto LABEL_37;
  }
  if (v18 == 2) {
    return 0;
  }
  if (v17) {
    unint64_t v19 = 0xD000000000000010;
  }
  else {
    unint64_t v19 = 0x7369776B636F6C63;
  }
  if (v17) {
    unint64_t v20 = 0x800000022834DC80;
  }
  else {
    unint64_t v20 = 0xE900000000000065;
  }
  if (v18) {
    unint64_t v21 = 0xD000000000000010;
  }
  else {
    unint64_t v21 = 0x7369776B636F6C63;
  }
  if (v18) {
    unint64_t v22 = 0x800000022834DC80;
  }
  else {
    unint64_t v22 = 0xE900000000000065;
  }
  if (v19 == v21 && v20 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL result = 0;
  if (v24)
  {
LABEL_37:
    uint64_t v26 = v5[8];
    unint64_t v27 = (long long *)(a1 + v26);
    char v28 = *(unsigned char *)(a1 + v26 + 16);
    unint64_t v29 = (long long *)(a2 + v26);
    char v30 = *(unsigned char *)(a2 + v26 + 16);
    if ((v28 & 1) == 0)
    {
      if (v30) {
        return 0;
      }
      uint64_t v31 = 0;
      long long v32 = *v27;
      long long v33 = *v29;
      while (1)
      {
        long long v37 = v32;
        float v35 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        long long v38 = v33;
        float v36 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        BOOL v34 = v35 == v36;
        if (v31 == 2) {
          break;
        }
        while (1)
        {
          ++v31;
          if (v34) {
            break;
          }
          if (v31 == 2) {
            return 0;
          }
          BOOL v34 = 0;
        }
      }
      return v35 == v36;
    }
    return (v30 & 1) != 0;
  }
  return result;
}

BOOL specialized static __RKEntityOrbitEntityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = (float *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 4);
  char v8 = (float *)(a2 + v5);
  int v9 = *(unsigned __int8 *)(a2 + v5 + 4);
  if (v7)
  {
    if (!v9) {
      return 0;
    }
  }
  else
  {
    if (*v6 != *v8) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v10 = v4[7];
  uint64_t v11 = (float *)(a1 + v10);
  char v12 = *(unsigned char *)(a1 + v10 + 4);
  char v13 = (float *)(a2 + v10);
  int v14 = *(unsigned __int8 *)(a2 + v10 + 4);
  if (v12)
  {
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (*v11 != *v13) {
      LOBYTE(v14) = 1;
    }
    if (v14) {
      return 0;
    }
  }
  uint64_t v15 = v4[8];
  uint64_t v16 = (long long *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 16);
  int v18 = (long long *)(a2 + v15);
  char v19 = *(unsigned char *)(a2 + v15 + 16);
  if (v17)
  {
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v19) {
      return 0;
    }
    uint64_t v20 = 0;
    long long v21 = *v16;
    long long v22 = *v18;
    while (1)
    {
      long long v53 = v21;
      float v25 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      long long v54 = v22;
      float v26 = *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      BOOL v23 = v25 == v26;
      if (v20 == 2) {
        break;
      }
      while (1)
      {
        ++v20;
        if (v23) {
          break;
        }
        BOOL v23 = 0;
        BOOL result = 0;
        if (v20 == 2) {
          return result;
        }
      }
    }
    if (v25 != v26) {
      return 0;
    }
  }
  uint64_t v27 = v4[9];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    BOOL v30 = (v28 & 1) == 0;
    if (v29 == 2 || ((v30 ^ v29) & 1) == 0) {
      return result;
    }
  }
  uint64_t v31 = v4[10];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 2)
  {
    if (v33 != 2) {
      return 0;
    }
  }
  else
  {
    if (v33 == 2) {
      return 0;
    }
    if (v32) {
      unint64_t v34 = 0xD000000000000010;
    }
    else {
      unint64_t v34 = 0x7369776B636F6C63;
    }
    if (v32) {
      unint64_t v35 = 0x800000022834DC80;
    }
    else {
      unint64_t v35 = 0xE900000000000065;
    }
    if (v33) {
      unint64_t v36 = 0xD000000000000010;
    }
    else {
      unint64_t v36 = 0x7369776B636F6C63;
    }
    if (v33) {
      unint64_t v37 = 0x800000022834DC80;
    }
    else {
      unint64_t v37 = 0xE900000000000065;
    }
    if (v34 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v38 & 1) == 0) {
        return result;
      }
    }
  }
  uint64_t v39 = v4[11];
  int v40 = *(unsigned __int8 *)(a1 + v39);
  int v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 != 2) {
      return 0;
    }
    goto LABEL_57;
  }
  BOOL result = 0;
  BOOL v42 = (v40 & 1) == 0;
  if (v41 != 2 && ((v42 ^ v41) & 1) != 0)
  {
LABEL_57:
    uint64_t v43 = v4[12];
    BOOL v44 = (float *)(a1 + v43);
    char v45 = *(unsigned char *)(a1 + v43 + 4);
    uint64_t v46 = (float *)(a2 + v43);
    int v47 = *(unsigned __int8 *)(a2 + v43 + 4);
    if (v45)
    {
      if (!v47) {
        return 0;
      }
    }
    else
    {
      if (*v44 != *v46) {
        LOBYTE(v47) = 1;
      }
      if (v47) {
        return 0;
      }
    }
    uint64_t v48 = v4[13];
    int v49 = (float *)(a1 + v48);
    char v50 = *(unsigned char *)(a1 + v48 + 4);
    char v51 = (float *)(a2 + v48);
    char v52 = *(unsigned char *)(a2 + v48 + 4);
    if ((v50 & 1) == 0)
    {
      if (*v49 != *v51) {
        char v52 = 1;
      }
      return (v52 & 1) == 0;
    }
    return (v52 & 1) != 0;
  }
  return result;
}

uint64_t specialized static __RKEntityLookAtCameraActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = (float *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 4);
  char v8 = (float *)(a2 + v5);
  uint64_t v9 = *(unsigned __int8 *)(a2 + v5 + 4);
  if (v7)
  {
    if (!v9) {
      return v9;
    }
  }
  else
  {
    if (*v6 != *v8) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v10 = v4[6];
  uint64_t v11 = (float *)(a1 + v10);
  char v12 = *(unsigned char *)(a1 + v10 + 4);
  char v13 = (float *)(a2 + v10);
  uint64_t v9 = *(unsigned __int8 *)(a2 + v10 + 4);
  if (v12)
  {
    if (!v9) {
      return v9;
    }
  }
  else
  {
    if (*v11 != *v13) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v14 = v4[7];
  uint64_t v15 = (long long *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 16);
  char v17 = (long long *)(a2 + v14);
  char v18 = *(unsigned char *)(a2 + v14 + 16);
  if (v16)
  {
    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v18) {
      return 0;
    }
    uint64_t v19 = 0;
    long long v20 = *v15;
    long long v21 = *v17;
    while (1)
    {
      long long v47 = v20;
      float v24 = *(float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      long long v48 = v21;
      float v25 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      BOOL v22 = v24 == v25;
      if (v19 == 2) {
        break;
      }
      while (1)
      {
        ++v19;
        if (v22) {
          break;
        }
        BOOL v22 = 0;
        uint64_t v9 = 0;
        if (v19 == 2) {
          return v9;
        }
      }
    }
    if (v24 != v25) {
      return 0;
    }
  }
  uint64_t v26 = v4[8];
  uint64_t v27 = (float *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 4);
  int v29 = (float *)(a2 + v26);
  uint64_t v9 = *(unsigned __int8 *)(a2 + v26 + 4);
  if (v28)
  {
    if (!v9) {
      return v9;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v30 = v4[9];
  uint64_t v31 = (long long *)(a1 + v30);
  char v32 = *(unsigned char *)(a1 + v30 + 16);
  int v33 = (long long *)(a2 + v30);
  char v34 = *(unsigned char *)(a2 + v30 + 16);
  if (v32)
  {
    if (v34) {
      goto LABEL_41;
    }
  }
  else if ((v34 & 1) == 0)
  {
    uint64_t v35 = 0;
    long long v36 = *v31;
    long long v37 = *v33;
    while (1)
    {
      long long v45 = v36;
      float v39 = *(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
      long long v46 = v37;
      float v40 = *(float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
      BOOL v38 = v39 == v40;
      if (v35 == 2) {
        break;
      }
      while (1)
      {
        ++v35;
        if (v38) {
          break;
        }
        BOOL v38 = 0;
        uint64_t v9 = 0;
        if (v35 == 2) {
          return v9;
        }
      }
    }
    if (v39 == v40)
    {
LABEL_41:
      uint64_t v41 = v4[10];
      int v42 = *(unsigned __int8 *)(a1 + v41);
      int v43 = *(unsigned __int8 *)(a2 + v41);
      if (v42 == 2)
      {
        if (v43 == 2) {
          return 1;
        }
      }
      else
      {
        BOOL v44 = (v42 & 1) == 0;
        if (v43 != 2 && ((v44 ^ v43) & 1) != 0) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t specialized static __RKEntityPlayTimelineActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  char v17 = (char *)&v36 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v36 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v39 = v5;
  uint64_t v20 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v21 = *(int *)(v20 + 24);
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a1 + v21 + 8);
  float v24 = (void *)(a2 + v21);
  if (v22 == *v24 && v23 == v24[1]
    || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v25 & 1) != 0))
  {
    outlined init with copy of UUID?(a1 + *(int *)(v20 + 28), (uint64_t)v19);
    uint64_t v37 = v20;
    outlined init with copy of UUID?(a2 + *(int *)(v20 + 28), (uint64_t)v17);
    uint64_t v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
    uint64_t v38 = v27;
    outlined init with copy of UUID?((uint64_t)v17, v27);
    char v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    if (v28((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v28(v38, 1, v4) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        goto LABEL_13;
      }
    }
    else
    {
      outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v14);
      if (v28(v38, 1, v4) != 1)
      {
        uint64_t v29 = v39;
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v7, v38, v4);
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        LODWORD(v38) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v30 = *(void (**)(char *, uint64_t))(v29 + 8);
        v30(v7, v4);
        outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        v30(v14, v4);
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        if (v38)
        {
LABEL_13:
          uint64_t v31 = *(int *)(v37 + 32);
          char v32 = (void *)(a1 + v31);
          uint64_t v33 = *(void *)(a1 + v31 + 8);
          char v34 = (void *)(a2 + v31);
          uint64_t v35 = v34[1];
          if (v33)
          {
            if (v35 && (*v32 == *v34 && v33 == v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
              return 1;
            }
          }
          else if (!v35)
          {
            return 1;
          }
        }
        return 0;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v4);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
    return 0;
  }
  return result;
}

BOOL specialized static __RKEntityTransformActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  char v17 = (char *)&v88 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v88 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v91 = v5;
  uint64_t v20 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v21 = v20[5];
  uint64_t v22 = (long long *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 16);
  float v24 = (long long *)(a2 + v21);
  char v25 = *(unsigned char *)(a2 + v21 + 16);
  if (v23)
  {
    if ((v25 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v25) {
      return 0;
    }
    uint64_t v26 = 0;
    long long v27 = *v22;
    long long v28 = *v24;
    while (1)
    {
      long long v94 = v27;
      float v31 = *(float *)((unint64_t)&v94 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
      long long v95 = v28;
      float v32 = *(float *)((unint64_t)&v95 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
      BOOL v29 = v31 == v32;
      if (v26 == 2) {
        break;
      }
      while (1)
      {
        ++v26;
        if (v29) {
          break;
        }
        BOOL v29 = 0;
        BOOL result = 0;
        if (v26 == 2) {
          return result;
        }
      }
    }
    if (v31 != v32) {
      return 0;
    }
  }
  uint64_t v33 = v20[6];
  char v34 = (long long *)(a1 + v33);
  char v35 = *(unsigned char *)(a1 + v33 + 16);
  uint64_t v36 = (long long *)(a2 + v33);
  char v37 = *(unsigned char *)(a2 + v33 + 16);
  if (v35)
  {
    if ((v37 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v37) {
      return 0;
    }
    uint64_t v38 = 0;
    long long v39 = *v34;
    long long v40 = *v36;
    while (1)
    {
      long long v92 = v39;
      float v42 = *(float *)((unint64_t)&v92 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
      long long v93 = v40;
      float v43 = *(float *)((unint64_t)&v93 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
      BOOL v41 = v42 == v43;
      if (v38 == 3) {
        break;
      }
      while (1)
      {
        ++v38;
        if (v41) {
          break;
        }
        BOOL v41 = 0;
        BOOL result = 0;
        if (v38 == 3) {
          return result;
        }
      }
    }
    if (v42 != v43) {
      return 0;
    }
  }
  uint64_t v44 = v20[7];
  long long v45 = (float *)(a1 + v44);
  char v46 = *(unsigned char *)(a1 + v44 + 4);
  long long v47 = (float *)(a2 + v44);
  int v48 = *(unsigned __int8 *)(a2 + v44 + 4);
  if (v46)
  {
    if (!v48) {
      return 0;
    }
  }
  else
  {
    if (*v45 != *v47) {
      LOBYTE(v48) = 1;
    }
    if (v48) {
      return 0;
    }
  }
  uint64_t v49 = v20[8];
  char v50 = (float *)(a1 + v49);
  char v51 = *(unsigned char *)(a1 + v49 + 4);
  char v52 = (float *)(a2 + v49);
  int v53 = *(unsigned __int8 *)(a2 + v49 + 4);
  if (v51)
  {
    if (!v53) {
      return 0;
    }
  }
  else
  {
    if (*v50 != *v52) {
      LOBYTE(v53) = 1;
    }
    if (v53) {
      return 0;
    }
  }
  uint64_t v54 = v20[9];
  int v55 = *(unsigned __int8 *)(a1 + v54);
  int v56 = *(unsigned __int8 *)(a2 + v54);
  if (v55 == 2)
  {
    if (v56 != 2) {
      return 0;
    }
  }
  else
  {
    if (v56 == 2) {
      return 0;
    }
    if (v55) {
      unint64_t v57 = 0x800000022834D820;
    }
    else {
      unint64_t v57 = 0x800000022834D800;
    }
    if (v56) {
      unint64_t v58 = 0x800000022834D820;
    }
    else {
      unint64_t v58 = 0x800000022834D800;
    }
    if (v57 == v58)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v88 = v57;
      unint64_t v89 = v58;
      int v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v90 & 1) == 0) {
        return result;
      }
    }
  }
  uint64_t v59 = v20[10];
  int v60 = *(unsigned __int8 *)(a1 + v59);
  int v61 = *(unsigned __int8 *)(a2 + v59);
  if (v60 == 10)
  {
    if (v61 != 10) {
      return 0;
    }
  }
  else if (v61 == 10 || (specialized == infix<A>(_:_:)(v60, v61) & 1) == 0)
  {
    return 0;
  }
  uint64_t v62 = v20[11];
  int v63 = *(unsigned __int8 *)(a1 + v62);
  int v64 = *(unsigned __int8 *)(a2 + v62);
  if (v63 == 3)
  {
    if (v64 != 3) {
      return 0;
    }
  }
  else
  {
    if (v64 == 3) {
      return 0;
    }
    unint64_t v65 = 0x6E692065736165;
    if (v63)
    {
      if (v63 == 1)
      {
        unint64_t v66 = 0xE800000000000000;
        unint64_t v67 = 0x74756F2065736165;
      }
      else
      {
        unint64_t v66 = 0x800000022834D880;
        unint64_t v67 = 0xD000000000000010;
      }
    }
    else
    {
      unint64_t v66 = 0xE700000000000000;
      unint64_t v67 = 0x6E692065736165;
    }
    if (v64)
    {
      if (v64 == 1)
      {
        unint64_t v68 = 0xE800000000000000;
        unint64_t v65 = 0x74756F2065736165;
      }
      else
      {
        unint64_t v68 = 0x800000022834D880;
        unint64_t v65 = 0xD000000000000010;
      }
    }
    else
    {
      unint64_t v68 = 0xE700000000000000;
    }
    if (v67 == v65 && v66 == v68)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v88 = v66;
      unint64_t v89 = v68;
      int v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v90 & 1) == 0) {
        return result;
      }
    }
  }
  uint64_t v69 = v20[12];
  int v70 = *(unsigned __int8 *)(a1 + v69);
  int v71 = *(unsigned __int8 *)(a2 + v69);
  if (v70 == 2)
  {
    if (v71 != 2) {
      return 0;
    }
    goto LABEL_74;
  }
  BOOL result = 0;
  BOOL v72 = (v70 & 1) == 0;
  if (v71 != 2 && ((v72 ^ v71) & 1) != 0)
  {
LABEL_74:
    uint64_t v73 = v20[13];
    v74 = (float *)(a1 + v73);
    char v75 = *(unsigned char *)(a1 + v73 + 4);
    v76 = (float *)(a2 + v73);
    int v77 = *(unsigned __int8 *)(a2 + v73 + 4);
    if (v75)
    {
      if (!v77) {
        return 0;
      }
    }
    else
    {
      if (*v74 != *v76) {
        LOBYTE(v77) = 1;
      }
      if (v77) {
        return 0;
      }
    }
    uint64_t v78 = v20[14];
    v79 = (float *)(a1 + v78);
    char v80 = *(unsigned char *)(a1 + v78 + 4);
    v81 = (float *)(a2 + v78);
    int v82 = *(unsigned __int8 *)(a2 + v78 + 4);
    if (v80)
    {
      if (!v82) {
        return 0;
      }
    }
    else
    {
      if (*v79 != *v81) {
        LOBYTE(v82) = 1;
      }
      if (v82) {
        return 0;
      }
    }
    outlined init with copy of UUID?(a1 + v20[15], (uint64_t)v19);
    outlined init with copy of UUID?(a2 + v20[15], (uint64_t)v17);
    uint64_t v83 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
    outlined init with copy of UUID?((uint64_t)v17, v83);
    v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
    if (v84((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v84(v83, 1, v4) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        return 1;
      }
      goto LABEL_91;
    }
    outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v14);
    if (v84(v83, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v14, v4);
LABEL_91:
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
      return 0;
    }
    uint64_t v85 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v7, v83, v4);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
    v87 = *(void (**)(char *, uint64_t))(v85 + 8);
    v87(v7, v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    v87(v14, v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
    return (v86 & 1) != 0;
  }
  return result;
}

uint64_t specialized static __RKEntityInteractionSpecification.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (specialized static __RKEntityTriggerSpecification.== infix(_:_:)(a1, a2))
  {
    uint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
    if (specialized static __RKEntityActionSpecification.== infix(_:_:)(a1 + *(int *)(v4 + 20), (float *)((char *)a2 + *(int *)(v4 + 20))))
    {
      uint64_t v5 = *(int *)(v4 + 24);
      uint64_t v6 = (void *)(a1 + v5);
      uint64_t v7 = *(void *)(a1 + v5 + 8);
      uint64_t v8 = (void *)((char *)a2 + v5);
      uint64_t v9 = v8[1];
      if (v7)
      {
        if (v9)
        {
          BOOL v10 = *v6 == *v8 && v7 == v9;
          if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return 1;
          }
        }
      }
      else if (!v9)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySpinActionArguments);
}

uint64_t type metadata accessor for __RKEntityOrbitEntityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityOrbitEntityActionArguments);
}

uint64_t type metadata accessor for __RKEntityAudioActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityAudioActionArguments);
}

uint64_t type metadata accessor for __RKEntityStartAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityStartAnimateActionArguments);
}

uint64_t type metadata accessor for __RKChangeSceneActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKChangeSceneActionArguments);
}

uint64_t type metadata accessor for __RKEntityEmphasisActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityEmphasisActionArguments);
}

uint64_t type metadata accessor for __RKEntityForceActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityForceActionArguments);
}

uint64_t type metadata accessor for __RKEntityLookAtCameraActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityLookAtCameraActionArguments);
}

uint64_t type metadata accessor for __RKEntityCustomActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityCustomActionArguments);
}

uint64_t type metadata accessor for __RKEntityTransformActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityTransformActionArguments);
}

uint64_t type metadata accessor for __RKEntityShowActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityShowActionArguments);
}

uint64_t type metadata accessor for __RKEntityHideActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityHideActionArguments);
}

uint64_t type metadata accessor for __RKEntityTriggerSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityTriggerSpecification);
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityTriggerSpecification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityTriggerSpecification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [UUID] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UUID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [UUID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static __RKEntityTriggerSpecification.== infix(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v83 = a1;
  v84 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v81 = v2;
  uint64_t v82 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  char v80 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v79 = (char *)&v77 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v78 = (char *)&v77 - v8;
  uint64_t v9 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (uint64_t *)((char *)&v77 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (uint64_t *)((char *)&v77 - v17);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v77 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  float v24 = (char *)&v77 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v77 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKEntityTriggerSpecification, __RKEntityTriggerSpecification));
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v31 = (uint64_t *)&v30[*(int *)(v28 + 56)];
  outlined init with copy of __RKEntityTriggerSpecification(v83, (uint64_t)v30, type metadata accessor for __RKEntityTriggerSpecification);
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v84, (uint64_t)v31, type metadata accessor for __RKEntityTriggerSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v24, type metadata accessor for __RKEntityTriggerSpecification);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v37 = v82;
        uint64_t v38 = v79;
        long long v39 = v31;
        uint64_t v40 = v81;
        (*(void (**)(char *, uint64_t *, uint64_t))(v82 + 32))(v79, v39, v81);
        char v41 = static UUID.== infix(_:_:)();
        float v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v38, v40);
        v42(v24, v40);
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v82 + 8))(v24, v81);
      goto LABEL_47;
    case 2u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v21, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      uint64_t v44 = *(int *)(v43 + 48);
      uint64_t v45 = *(void *)&v21[v44];
      uint64_t v46 = *(int *)(v43 + 64);
      long long v47 = *(void **)&v21[v46];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v21, v81);
        goto LABEL_47;
      }
      v84 = v47;
      uint64_t v48 = *(uint64_t *)((char *)v31 + v44);
      uint64_t v49 = *(void **)((char *)v31 + v46);
      uint64_t v51 = v81;
      uint64_t v50 = v82;
      char v52 = v80;
      (*(void (**)(char *, uint64_t *, uint64_t))(v82 + 32))(v80, v31, v81);
      char v53 = static UUID.== infix(_:_:)();
      uint64_t v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v21, v51);
      if (v53)
      {
        char v55 = specialized static Array<A>.== infix(_:_:)(v45, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v55)
        {
          char v41 = specialized static Array<A>.== infix(_:_:)(v84, v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v54(v80, v51);
          goto LABEL_26;
        }
        v54(v80, v51);
      }
      else
      {
        v54(v52, v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_65;
    case 3u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v18, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v57 = *v18;
      uint64_t v56 = v18[1];
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_46;
      }
      if (v57 == *v31 && v56 == v31[1])
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_62;
      }
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_62;
      }
      goto LABEL_67;
    case 4u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v61 = *v15;
      uint64_t v60 = v15[1];
      uint64_t v62 = v15[2];
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v63 = v31[2];
        if (v61 == *v31 && v60 == v31[1])
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v65 & 1) == 0)
          {
LABEL_65:
            swift_bridgeObjectRelease();
            goto LABEL_66;
          }
        }
        if (v62)
        {
          if (v63)
          {
            swift_bridgeObjectRetain();
            uint64_t v74 = swift_bridgeObjectRetain();
            char v75 = specialized static Dictionary<>.== infix(_:_:)(v74, v63);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            if ((v75 & 1) == 0) {
              goto LABEL_67;
            }
            goto LABEL_62;
          }
        }
        else if (!v63)
        {
LABEL_62:
          outlined destroy of __RKEntityTriggerSpecification((uint64_t)v30, type metadata accessor for __RKEntityTriggerSpecification);
          char v41 = 1;
          return v41 & 1;
        }
LABEL_66:
        swift_bridgeObjectRelease();
LABEL_67:
        outlined destroy of __RKEntityTriggerSpecification((uint64_t)v30, type metadata accessor for __RKEntityTriggerSpecification);
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
LABEL_46:
      swift_bridgeObjectRelease();
LABEL_47:
      outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for (__RKEntityTriggerSpecification, __RKEntityTriggerSpecification));
LABEL_48:
      char v41 = 0;
      return v41 & 1;
    case 5u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v66 = *v12;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_46;
      }
      char v41 = specialized static Array<A>.== infix(_:_:)(v66, *v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_26;
    case 6u:
      if (swift_getEnumCaseMultiPayload() == 6) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 7u:
      if (swift_getEnumCaseMultiPayload() == 7) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 8u:
      if (swift_getEnumCaseMultiPayload() == 8) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 9u:
      if (swift_getEnumCaseMultiPayload() == 9) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() == 10) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 0xBu:
      if (swift_getEnumCaseMultiPayload() == 11) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 0xCu:
      if (swift_getEnumCaseMultiPayload() == 12) {
        goto LABEL_62;
      }
      goto LABEL_47;
    case 0xDu:
      if (swift_getEnumCaseMultiPayload() == 13) {
        goto LABEL_62;
      }
      goto LABEL_47;
    default:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, (uint64_t)v26, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      uint64_t v33 = *(int *)(v32 + 48);
      float v34 = *(float *)&v26[v33];
      uint64_t v35 = *(int *)(v32 + 64);
      int v36 = v26[v35];
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v82 + 8))(v26, v81);
        goto LABEL_47;
      }
      float v67 = *(float *)((char *)v31 + v33);
      int v68 = *((unsigned __int8 *)v31 + v35);
      uint64_t v70 = v81;
      uint64_t v69 = v82;
      int v71 = v78;
      (*(void (**)(char *, uint64_t *, uint64_t))(v82 + 32))(v78, v31, v81);
      char v72 = static UUID.== infix(_:_:)();
      uint64_t v73 = *(void (**)(char *, uint64_t))(v69 + 8);
      v73(v26, v70);
      if ((v72 & 1) == 0 || v34 != v67)
      {
        v73(v71, v70);
        goto LABEL_67;
      }
      char v41 = v36 == v68;
      v73(v71, v70);
LABEL_26:
      outlined destroy of __RKEntityTriggerSpecification((uint64_t)v30, type metadata accessor for __RKEntityTriggerSpecification);
      return v41 & 1;
  }
}

uint64_t type metadata accessor for __RKEntityActionSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityActionSpecification);
}

uint64_t outlined init with copy of __RKEntityTriggerSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __RKEntityTriggerSpecification(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for __RKEntityPlayTimelineActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityPlayTimelineActionArguments);
}

uint64_t type metadata accessor for __RKEntitySetOpacityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySetOpacityActionArguments);
}

uint64_t type metadata accessor for __RKEntitySwapEntityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySwapEntityActionArguments);
}

uint64_t type metadata accessor for __RKEntityFadeActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityFadeActionArguments);
}

uint64_t type metadata accessor for __RKEntityToggleVisibilityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityToggleVisibilityActionArguments);
}

uint64_t type metadata accessor for __RKEntityStopAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityStopAnimateActionArguments);
}

uint64_t type metadata accessor for __RKEntityToggleAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityToggleAnimateActionArguments);
}

uint64_t outlined init with take of __RKEntityTriggerSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKWaitActionArguments and conformance __RKWaitActionArguments()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments);
  }
  return result;
}

BOOL specialized static __RKEntityStartAnimateActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v49 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v49 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  char v52 = v7;
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  if (*(void *)(a1 + *(int *)(started + 20)) != *(void *)(a2 + *(int *)(started + 20))) {
    return 0;
  }
  uint64_t v21 = (int *)started;
  uint64_t v49 = v5;
  uint64_t v50 = v4;
  unint64_t v22 = 0xED00007473657571;
  unint64_t v23 = 0x657220776F6C6C61;
  uint64_t v24 = *(int *)(started + 24);
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25)
  {
    if (v25 == 1)
    {
      unint64_t v27 = 0x722065726F6E6769;
      unint64_t v28 = 0xEE00747365757165;
      if (!v26) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v28 = 0x800000022834DAE0;
      unint64_t v27 = 0xD000000000000014;
      if (!v26) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    unint64_t v27 = 0x657220776F6C6C61;
    unint64_t v28 = 0xED00007473657571;
    if (!v26) {
      goto LABEL_13;
    }
  }
  if (v26 == 1)
  {
    unint64_t v23 = 0x722065726F6E6769;
    unint64_t v22 = 0xEE00747365757165;
  }
  else
  {
    unint64_t v22 = 0x800000022834DAE0;
    unint64_t v23 = 0xD000000000000014;
  }
LABEL_13:
  uint64_t v51 = v10;
  if (v27 == v23 && v28 == v22)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v29 & 1) == 0) {
      return result;
    }
  }
  if (*(double *)(a1 + v21[7]) != *(double *)(a2 + v21[7])
    || *(double *)(a1 + v21[8]) != *(double *)(a2 + v21[8])
    || *(unsigned __int8 *)(a1 + v21[9]) != *(unsigned __int8 *)(a2 + v21[9])
    || *(unsigned __int8 *)(a1 + v21[10]) != *(unsigned __int8 *)(a2 + v21[10])
    || *(float *)(a1 + v21[11]) != *(float *)(a2 + v21[11]))
  {
    return 0;
  }
  uint64_t v31 = v21[12];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 2)
  {
    if (v33 != 2) {
      return 0;
    }
LABEL_27:
    uint64_t v35 = v21[13];
    int v36 = (double *)(a1 + v35);
    char v37 = *(unsigned char *)(a1 + v35 + 8);
    uint64_t v38 = (double *)(a2 + v35);
    int v39 = *(unsigned __int8 *)(a2 + v35 + 8);
    if (v37)
    {
      uint64_t v40 = (uint64_t)v51;
      if (!v39) {
        return 0;
      }
    }
    else
    {
      if (*v36 != *v38) {
        LOBYTE(v39) = 1;
      }
      uint64_t v40 = (uint64_t)v51;
      if (v39) {
        return 0;
      }
    }
    outlined init with copy of UUID?(a1 + v21[14], (uint64_t)v19);
    outlined init with copy of UUID?(a2 + v21[14], (uint64_t)v17);
    uint64_t v41 = v40 + *(int *)(v8 + 48);
    outlined init with copy of UUID?((uint64_t)v19, v40);
    outlined init with copy of UUID?((uint64_t)v17, v41);
    uint64_t v42 = v40;
    uint64_t v43 = v49;
    uint64_t v44 = v50;
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v45(v42, 1, v50) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v45(v41, 1, v44) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v51, &demangling cache variable for type metadata for UUID?);
        return 1;
      }
    }
    else
    {
      outlined init with copy of UUID?(v42, (uint64_t)v14);
      if (v45(v41, 1, v44) != 1)
      {
        uint64_t v46 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v52, v41, v44);
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v43 + 8);
        v48(v46, v44);
        outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        v48(v14, v44);
        outlined destroy of BodyTrackingComponent?(v42, &demangling cache variable for type metadata for UUID?);
        return (v47 & 1) != 0;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v44);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v51, &demangling cache variable for type metadata for (UUID?, UUID?));
    return 0;
  }
  BOOL result = 0;
  BOOL v34 = (v32 & 1) == 0;
  if (v33 != 2 && ((v34 ^ v33) & 1) != 0) {
    goto LABEL_27;
  }
  return result;
}

uint64_t specialized static __RKEntityActionGroupArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  int v19 = *(unsigned __int8 *)(a1 + 33);
  int v20 = *(unsigned __int8 *)(a2 + 33);
  BOOL v10 = *(unsigned char *)a1 == 0;
  if (*(unsigned char *)a1) {
    uint64_t v11 = 0x65636E6575716573;
  }
  else {
    uint64_t v11 = 0x65727275636E6F63;
  }
  if (v10) {
    unint64_t v12 = 0xEA0000000000746ELL;
  }
  else {
    unint64_t v12 = 0xE900000000000064;
  }
  if (*(unsigned char *)a2) {
    uint64_t v13 = 0x65636E6575716573;
  }
  else {
    uint64_t v13 = 0x65727275636E6F63;
  }
  if (*(unsigned char *)a2) {
    unint64_t v14 = 0xE900000000000064;
  }
  else {
    unint64_t v14 = 0xEA0000000000746ELL;
  }
  BOOL v15 = v11 == v13 && v12 == v14;
  char v21 = v5;
  if (v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v16 & 1) == 0) {
      return result;
    }
  }
  if ((specialized static Array<A>.== infix(_:_:)(v2, v6) & 1) == 0) {
    return 0;
  }
  if (v3 == 2)
  {
    if (v7 != 2) {
      return 0;
    }
LABEL_26:
    if (v21)
    {
      if (!v9) {
        return 0;
      }
    }
    else
    {
      if (v4 == v8) {
        char v18 = v9;
      }
      else {
        char v18 = 1;
      }
      if (v18) {
        return 0;
      }
    }
    if (v19 == 2)
    {
      if (v20 != 2) {
        return 0;
      }
    }
    else if (v20 == 2 || ((((v19 & 1) == 0) ^ v20) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (v7 != 2 && ((((v3 & 1) == 0) ^ v7) & 1) != 0) {
    goto LABEL_26;
  }
  return result;
}

uint64_t specialized static __RKEntityActionSpecification.== infix(_:_:)(uint64_t a1, float *a2)
{
  uint64_t v201 = a1;
  v202 = a2;
  uint64_t v2 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v183 = (uint64_t)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v164);
  uint64_t v184 = (uint64_t)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v169 = (uint64_t)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v165);
  uint64_t v170 = (uint64_t)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v182 = (uint64_t)&v160 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v181 = (uint64_t)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v180 = (uint64_t)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v179 = (uint64_t)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v178 = (uint64_t)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v177 = (uint64_t)&v160 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started - 8);
  uint64_t v168 = (uint64_t)&v160 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v176 = (uint64_t)&v160 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v167 = (uint64_t)&v160 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v174 = (uint64_t)&v160 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v163);
  uint64_t v175 = (uint64_t)&v160 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v172 = (uint64_t)&v160 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v166);
  uint64_t v173 = (uint64_t)&v160 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v161);
  uint64_t v171 = (uint64_t)&v160 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v162 = (uint64_t)&v160 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v36 = MEMORY[0x270FA5388](v35);
  uint64_t v199 = (uint64_t)&v160 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v200 = (uint64_t)&v160 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v187 = (uint64_t)&v160 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v188 = (uint64_t)&v160 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v198 = (uint64_t)&v160 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v197 = (uint64_t)&v160 - v47;
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  v193 = (float *)((char *)&v160 - v49);
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v196 = (uint64_t)&v160 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  uint64_t v195 = (uint64_t)&v160 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v194 = (uint64_t)&v160 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v192 = (uint64_t)&v160 - v57;
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v186 = (uint64_t)&v160 - v59;
  uint64_t v60 = MEMORY[0x270FA5388](v58);
  uint64_t v191 = (uint64_t)&v160 - v61;
  uint64_t v62 = MEMORY[0x270FA5388](v60);
  uint64_t v185 = (uint64_t)&v160 - v63;
  uint64_t v64 = MEMORY[0x270FA5388](v62);
  uint64_t v66 = (char *)&v160 - v65;
  uint64_t v67 = MEMORY[0x270FA5388](v64);
  uint64_t v69 = (char *)&v160 - v68;
  uint64_t v70 = MEMORY[0x270FA5388](v67);
  char v72 = (float *)((char *)&v160 - v71);
  uint64_t v73 = MEMORY[0x270FA5388](v70);
  uint64_t v190 = (uint64_t)&v160 - v74;
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  uint64_t v77 = (char *)&v160 - v76;
  uint64_t v78 = MEMORY[0x270FA5388](v75);
  uint64_t v189 = (uint64_t)&v160 - v79;
  uint64_t v80 = MEMORY[0x270FA5388](v78);
  uint64_t v82 = (char *)&v160 - v81;
  MEMORY[0x270FA5388](v80);
  v84 = (char *)&v160 - v83;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKEntityActionSpecification, __RKEntityActionSpecification));
  uint64_t v86 = MEMORY[0x270FA5388](v85 - 8);
  unint64_t v88 = (char *)&v160 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = (uint64_t)&v88[*(int *)(v86 + 56)];
  outlined init with copy of __RKEntityTriggerSpecification(v201, (uint64_t)v88, type metadata accessor for __RKEntityActionSpecification);
  uint64_t v90 = (uint64_t)v202;
  v202 = (float *)v89;
  outlined init with copy of __RKEntityTriggerSpecification(v90, v89, type metadata accessor for __RKEntityActionSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v82, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v94 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        long long v92 = type metadata accessor for __RKChangeSceneActionArguments;
        uint64_t v93 = (uint64_t)v82;
        goto LABEL_91;
      }
      uint64_t v95 = v171;
      outlined init with take of __RKEntityTriggerSpecification(v94, v171, type metadata accessor for __RKChangeSceneActionArguments);
      if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)())
      {
        v96 = type metadata accessor for __RKChangeSceneActionArguments;
        outlined destroy of __RKEntityTriggerSpecification(v95, type metadata accessor for __RKChangeSceneActionArguments);
        uint64_t v97 = (uint64_t)v82;
        goto LABEL_112;
      }
      v157 = type metadata accessor for __RKChangeSceneActionArguments;
      outlined destroy of __RKEntityTriggerSpecification(v95, type metadata accessor for __RKChangeSceneActionArguments);
      uint64_t v158 = (uint64_t)v82;
      goto LABEL_99;
    case 2u:
      uint64_t v98 = v189;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v189, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v99 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        v155 = type metadata accessor for __RKEntityCustomActionArguments;
        goto LABEL_90;
      }
      uint64_t v100 = v173;
      outlined init with take of __RKEntityTriggerSpecification(v99, v173, type metadata accessor for __RKEntityCustomActionArguments);
      if (static UUID.== infix(_:_:)())
      {
        if ((uint64_t v101 = *(int *)(v166 + 20),
              uint64_t v102 = *(void *)(v98 + v101),
              uint64_t v103 = *(void *)(v98 + v101 + 8),
              v104 = (void *)(v100 + v101),
              v102 == *v104)
          && v103 == v104[1]
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          if (specialized static Dictionary<>.== infix(_:_:)(*(void *)(v98 + *(int *)(v166 + 24)), *(void *)(v100 + *(int *)(v166 + 24))))
          {
            v105 = type metadata accessor for __RKEntityCustomActionArguments;
            goto LABEL_111;
          }
        }
      }
      v117 = type metadata accessor for __RKEntityCustomActionArguments;
      goto LABEL_98;
    case 3u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v77, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v106 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v107 = v172;
        outlined init with take of __RKEntityTriggerSpecification(v106, v172, type metadata accessor for __RKEntityEmphasisActionArguments);
        char v108 = specialized static __RKEntityEmphasisActionArguments.== infix(_:_:)((uint64_t)v77, v107);
        v109 = type metadata accessor for __RKEntityEmphasisActionArguments;
        outlined destroy of __RKEntityTriggerSpecification(v107, type metadata accessor for __RKEntityEmphasisActionArguments);
        uint64_t v110 = (uint64_t)v77;
        goto LABEL_68;
      }
      long long v92 = type metadata accessor for __RKEntityEmphasisActionArguments;
      uint64_t v93 = (uint64_t)v77;
      goto LABEL_91;
    case 4u:
      uint64_t v98 = v190;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v190, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v111 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v100 = v175;
        outlined init with take of __RKEntityTriggerSpecification(v111, v175, type metadata accessor for __RKEntityFadeActionArguments);
        if ((static UUID.== infix(_:_:)() & 1) == 0
          || *(float *)(v98 + *(int *)(v163 + 20)) != *(float *)(v100 + *(int *)(v163 + 20)))
        {
          goto LABEL_22;
        }
        uint64_t v112 = *(int *)(v163 + 24);
        v113 = (float *)(v98 + v112);
        char v114 = *(unsigned char *)(v98 + v112 + 4);
        v115 = (float *)(v100 + v112);
        int v116 = *(unsigned __int8 *)(v100 + v112 + 4);
        if (v114)
        {
          if (!v116)
          {
LABEL_22:
            v117 = type metadata accessor for __RKEntityFadeActionArguments;
            goto LABEL_98;
          }
        }
        else
        {
          if (*v113 != *v115) {
            LOBYTE(v116) = 1;
          }
          if (v116) {
            goto LABEL_22;
          }
        }
        v105 = type metadata accessor for __RKEntityFadeActionArguments;
LABEL_111:
        v96 = v105;
        outlined destroy of __RKEntityTriggerSpecification(v100, v105);
        uint64_t v97 = v98;
LABEL_112:
        outlined destroy of __RKEntityTriggerSpecification(v97, v96);
LABEL_113:
        outlined destroy of __RKEntityTriggerSpecification((uint64_t)v88, type metadata accessor for __RKEntityActionSpecification);
        char v108 = 1;
      }
      else
      {
        v155 = type metadata accessor for __RKEntityFadeActionArguments;
LABEL_90:
        long long v92 = v155;
        uint64_t v93 = v98;
LABEL_91:
        outlined destroy of __RKEntityTriggerSpecification(v93, v92);
LABEL_92:
        outlined destroy of BodyTrackingComponent?((uint64_t)v88, &demangling cache variable for type metadata for (__RKEntityActionSpecification, __RKEntityActionSpecification));
LABEL_93:
        char v108 = 0;
      }
      return v108 & 1;
    case 5u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v72, type metadata accessor for __RKEntityActionSpecification);
      float v118 = v72[1];
      char v119 = *((unsigned char *)v72 + 8);
      v120 = v202;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_92;
      }
      if (*v72 != *v120) {
        goto LABEL_100;
      }
      char v121 = *((unsigned char *)v120 + 8);
      if (v119)
      {
        if (!*((unsigned char *)v120 + 8)) {
          goto LABEL_100;
        }
      }
      else
      {
        if (v118 != v120[1]) {
          char v121 = 1;
        }
        if (v121) {
          goto LABEL_100;
        }
      }
      goto LABEL_113;
    case 6u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v69, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v122 = *((void *)v69 + 1);
      v123 = v202;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        char v124 = v69[33];
        char v125 = v69[32];
        uint64_t v126 = *((void *)v69 + 3);
        char v127 = v69[16];
        char v128 = *v69;
        char v129 = *(unsigned char *)v123;
        uint64_t v130 = *((void *)v123 + 1);
        char v131 = *((unsigned char *)v123 + 16);
        uint64_t v132 = *((void *)v123 + 3);
        char v133 = *((unsigned char *)v123 + 32);
        char v134 = *((unsigned char *)v123 + 33);
        v209[0] = v128;
        uint64_t v210 = v122;
        char v211 = v127;
        uint64_t v212 = v126;
        char v213 = v125;
        char v214 = v124;
        v203[0] = v129;
        uint64_t v204 = v130;
        char v205 = v131;
        uint64_t v206 = v132;
        char v207 = v133;
        char v208 = v134;
        char v108 = specialized static __RKEntityActionGroupArguments.== infix(_:_:)((uint64_t)v209, (uint64_t)v203);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      swift_bridgeObjectRelease();
      goto LABEL_92;
    case 7u:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v66, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v135 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v136 = v174;
        outlined init with take of __RKEntityTriggerSpecification(v135, v174, type metadata accessor for __RKEntityHideActionArguments);
        char v108 = specialized static __RKEntityHideActionArguments.== infix(_:_:)((uint64_t)v66, v136, type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
        v109 = type metadata accessor for __RKEntityHideActionArguments;
        outlined destroy of __RKEntityTriggerSpecification(v136, type metadata accessor for __RKEntityHideActionArguments);
        uint64_t v110 = (uint64_t)v66;
        goto LABEL_68;
      }
      long long v92 = type metadata accessor for __RKEntityHideActionArguments;
      uint64_t v93 = (uint64_t)v66;
      goto LABEL_91;
    case 8u:
      uint64_t v98 = v185;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v185, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v150 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v138 = v167;
        outlined init with take of __RKEntityTriggerSpecification(v150, v167, type metadata accessor for __RKEntityForceActionArguments);
        char v108 = specialized static __RKEntityForceActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntityForceActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityForceActionArguments;
      goto LABEL_90;
    case 9u:
      uint64_t v98 = v191;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v191, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v137 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        uint64_t v138 = v176;
        outlined init with take of __RKEntityTriggerSpecification(v137, v176, type metadata accessor for __RKEntityShowActionArguments);
        char v108 = specialized static __RKEntityHideActionArguments.== infix(_:_:)(v98, v138, type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
        v139 = type metadata accessor for __RKEntityShowActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityShowActionArguments;
      goto LABEL_90;
    case 0xAu:
      uint64_t v98 = v186;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v186, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v151 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 10)
      {
        uint64_t v138 = v168;
        outlined init with take of __RKEntityTriggerSpecification(v151, v168, type metadata accessor for __RKEntityStartAnimateActionArguments);
        char v108 = specialized static __RKEntityStartAnimateActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityStartAnimateActionArguments;
      goto LABEL_90;
    case 0xBu:
      uint64_t v98 = v192;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v192, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v140 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        uint64_t v138 = v177;
        outlined init with take of __RKEntityTriggerSpecification(v140, v177, type metadata accessor for __RKEntityStopAnimateActionArguments);
        char v108 = static UUID.== infix(_:_:)();
        v139 = type metadata accessor for __RKEntityStopAnimateActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityStopAnimateActionArguments;
      goto LABEL_90;
    case 0xCu:
      uint64_t v98 = v194;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v194, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v141 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 12)
      {
        uint64_t v138 = v178;
        outlined init with take of __RKEntityTriggerSpecification(v141, v178, type metadata accessor for __RKEntityToggleAnimateActionArguments);
        char v108 = static UUID.== infix(_:_:)();
        v139 = type metadata accessor for __RKEntityToggleAnimateActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityToggleAnimateActionArguments;
      goto LABEL_90;
    case 0xDu:
      uint64_t v98 = v195;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v195, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v142 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        uint64_t v138 = v179;
        outlined init with take of __RKEntityTriggerSpecification(v142, v179, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
        char v108 = static UUID.== infix(_:_:)();
        v139 = type metadata accessor for __RKEntityToggleVisibilityActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityToggleVisibilityActionArguments;
      goto LABEL_90;
    case 0xEu:
      uint64_t v98 = v196;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v196, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v143 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 14)
      {
        uint64_t v138 = v180;
        outlined init with take of __RKEntityTriggerSpecification(v143, v180, type metadata accessor for __RKEntityTransformActionArguments);
        char v108 = specialized static __RKEntityTransformActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntityTransformActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityTransformActionArguments;
      goto LABEL_90;
    case 0xFu:
      v144 = v193;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v193, type metadata accessor for __RKEntityActionSpecification);
      v145 = v202;
      if (swift_getEnumCaseMultiPayload() != 15) {
        goto LABEL_92;
      }
      char v108 = *v144 == *v145;
      goto LABEL_70;
    case 0x10u:
      uint64_t v98 = v197;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v197, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v146 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 16)
      {
        uint64_t v138 = v181;
        outlined init with take of __RKEntityTriggerSpecification(v146, v181, type metadata accessor for __RKEntityOrbitEntityActionArguments);
        char v108 = specialized static __RKEntityOrbitEntityActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
      goto LABEL_90;
    case 0x11u:
      uint64_t v98 = v198;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v198, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v147 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 17)
      {
        uint64_t v138 = v182;
        outlined init with take of __RKEntityTriggerSpecification(v147, v182, type metadata accessor for __RKEntityLookAtCameraActionArguments);
        char v108 = specialized static __RKEntityLookAtCameraActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
      goto LABEL_90;
    case 0x12u:
      uint64_t v98 = v188;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v188, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v152 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() != 18)
      {
        v155 = type metadata accessor for __RKEntitySwapEntityActionArguments;
        goto LABEL_90;
      }
      uint64_t v100 = v170;
      outlined init with take of __RKEntityTriggerSpecification(v152, v170, type metadata accessor for __RKEntitySwapEntityActionArguments);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (static UUID.== infix(_:_:)() & 1) != 0
        && (specialized static __RKEntityHideActionArguments.== infix(_:_:)(v98 + *(int *)(v165 + 24), v100 + *(int *)(v165 + 24), type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0&& (specialized static __RKEntityHideActionArguments.== infix(_:_:)(v98 + *(int *)(v165 + 28), v100 + *(int *)(v165 + 28), type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0)
      {
        v105 = type metadata accessor for __RKEntitySwapEntityActionArguments;
        goto LABEL_111;
      }
      v117 = type metadata accessor for __RKEntitySwapEntityActionArguments;
      goto LABEL_98;
    case 0x13u:
      uint64_t v98 = v187;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v187, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v153 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() == 19)
      {
        uint64_t v138 = v169;
        outlined init with take of __RKEntityTriggerSpecification(v153, v169, type metadata accessor for __RKEntitySpinActionArguments);
        char v108 = specialized static __RKEntitySpinActionArguments.== infix(_:_:)(v98, v138);
        v139 = type metadata accessor for __RKEntitySpinActionArguments;
        goto LABEL_67;
      }
      v155 = type metadata accessor for __RKEntitySpinActionArguments;
      goto LABEL_90;
    case 0x14u:
      uint64_t v98 = v200;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v200, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v148 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() != 20)
      {
        v155 = type metadata accessor for __RKEntitySetOpacityActionArguments;
        goto LABEL_90;
      }
      uint64_t v100 = v184;
      outlined init with take of __RKEntityTriggerSpecification(v148, v184, type metadata accessor for __RKEntitySetOpacityActionArguments);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && *(float *)(v98 + *(int *)(v164 + 20)) == *(float *)(v100 + *(int *)(v164 + 20))
        && *(float *)(v98 + *(int *)(v164 + 24)) == *(float *)(v100 + *(int *)(v164 + 24)))
      {
        v105 = type metadata accessor for __RKEntitySetOpacityActionArguments;
        goto LABEL_111;
      }
      v117 = type metadata accessor for __RKEntitySetOpacityActionArguments;
LABEL_98:
      v157 = v117;
      outlined destroy of __RKEntityTriggerSpecification(v100, v117);
      uint64_t v158 = v98;
LABEL_99:
      outlined destroy of __RKEntityTriggerSpecification(v158, v157);
LABEL_100:
      outlined destroy of __RKEntityTriggerSpecification((uint64_t)v88, type metadata accessor for __RKEntityActionSpecification);
      goto LABEL_93;
    case 0x15u:
      uint64_t v98 = v199;
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, v199, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v149 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload() != 21)
      {
        v155 = type metadata accessor for __RKEntityPlayTimelineActionArguments;
        goto LABEL_90;
      }
      uint64_t v138 = v183;
      outlined init with take of __RKEntityTriggerSpecification(v149, v183, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      char v108 = specialized static __RKEntityPlayTimelineActionArguments.== infix(_:_:)(v98, v138);
      v139 = type metadata accessor for __RKEntityPlayTimelineActionArguments;
LABEL_67:
      v109 = v139;
      outlined destroy of __RKEntityTriggerSpecification(v138, v139);
      uint64_t v110 = v98;
LABEL_68:
      v154 = v109;
      goto LABEL_69;
    default:
      outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v88, (uint64_t)v84, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v91 = (uint64_t)v202;
      if (swift_getEnumCaseMultiPayload())
      {
        long long v92 = type metadata accessor for __RKEntityAudioActionArguments;
        uint64_t v93 = (uint64_t)v84;
        goto LABEL_91;
      }
      uint64_t v159 = v162;
      outlined init with take of __RKEntityTriggerSpecification(v91, v162, type metadata accessor for __RKEntityAudioActionArguments);
      char v108 = specialized static __RKEntityAudioActionArguments.== infix(_:_:)((uint64_t)v84, v159);
      outlined destroy of __RKEntityTriggerSpecification(v159, type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v110 = (uint64_t)v84;
      v154 = type metadata accessor for __RKEntityAudioActionArguments;
LABEL_69:
      outlined destroy of __RKEntityTriggerSpecification(v110, v154);
LABEL_70:
      outlined destroy of __RKEntityTriggerSpecification((uint64_t)v88, type metadata accessor for __RKEntityActionSpecification);
      return v108 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityActionSpecification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, (void (*)(uint64_t))type metadata accessor for __RKEntityActionSpecification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of __RKEntityHideActionArguments(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for __RKEntityInteractionSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityInteractionSpecification);
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name);
  }
  return result;
}

uint64_t sub_227E5D570@<X0>(uint64_t a1@<X8>)
{
  return __RKEntityCustomActionArguments.optionalTarget.getter(a1);
}

uint64_t sub_227E5D598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_227E5D608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v5 = (long long *)(a1 + *(int *)(result + 24));
  char v6 = *((unsigned char *)v5 + 16);
  long long v7 = 0uLL;
  if ((v6 & 1) == 0) {
    long long v7 = *v5;
  }
  *(_OWORD *)a2 = v7;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_227E5D654(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v7 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 1;
  if ((v5 & 1) == 0)
  {
    *(void *)uint64_t v7 = v3;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = 0;
  }
  return result;
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void *initializeBufferWithCopyOfBuffer for __RKEntityTriggerSpecification(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
        *((unsigned char *)a1 + *(int *)(v8 + 64)) = *((unsigned char *)a2 + *(int *)(v8 + 64));
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v12 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(void *)((char *)a1 + *(int *)(v13 + 48)) = *(void *)((char *)a2 + *(int *)(v13 + 48));
        *(void *)((char *)a1 + *(int *)(v13 + 64)) = *(void *)((char *)a2 + *(int *)(v13 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityTriggerSpecification(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      uint64_t v3 = type metadata accessor for UUID();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 2:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3:
    case 5:
      goto LABEL_7;
    case 4:
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for __RKEntityTriggerSpecification(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
      *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
      goto LABEL_9;
    case 1u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_9;
    case 2u:
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(void *)((char *)a1 + *(int *)(v10 + 48)) = *(void *)((char *)a2 + *(int *)(v10 + 48));
      *(void *)((char *)a1 + *(int *)(v10 + 64)) = *(void *)((char *)a2 + *(int *)(v10 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for __RKEntityTriggerSpecification(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
        *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(void *)((char *)a1 + *(int *)(v10 + 48)) = *(void *)((char *)a2 + *(int *)(v10 + 48));
        *(void *)((char *)a1 + *(int *)(v10 + 64)) = *(void *)((char *)a2 + *(int *)(v10 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for __RKEntityTriggerSpecification(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
    *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
    *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
    a1[*(int *)(v8 + 64)] = a2[*(int *)(v8 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for __RKEntityTriggerSpecification(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      *(void *)&a1[*(int *)(v10 + 64)] = *(void *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
      a1[*(int *)(v8 + 64)] = a2[*(int *)(v8 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for __RKEntityTriggerSpecification()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for __RKEntityTriggerSpecification()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout3();
    uint64_t v6 = &v5;
    uint64_t v7 = v2;
    uint64_t v3 = MEMORY[0x263F8CF50] + 64;
    swift_getTupleTypeLayout3();
    uint64_t v8 = &v4;
    uint64_t v9 = &unk_2283214F8;
    uint64_t v10 = &unk_228321510;
    uint64_t v11 = v3;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityTriggerSpecification.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityTriggerSpecification.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E5E594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTriggerSpecification.Name()
{
  return &type metadata for __RKEntityTriggerSpecification.Name;
}

char *initializeBufferWithCopyOfBuffer for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        int v8 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        uint64_t v9 = v8[5];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v13 = *(void *)v11;
        uint64_t v12 = *((void *)v11 + 1);
        *(void *)uint64_t v10 = v13;
        *((void *)v10 + 1) = v12;
        a1[v8[6]] = a2[v8[6]];
        uint64_t v14 = v8[7];
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        v15[8] = v16[8];
        *(void *)uint64_t v15 = *(void *)v16;
        a1[v8[8]] = a2[v8[8]];
        a1[v8[9]] = a2[v8[9]];
        a1[v8[10]] = a2[v8[10]];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v19 = type metadata accessor for UUID();
        int v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        v20(a1, a2, v19);
        uint64_t v21 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v20(&a1[*(int *)(v21 + 20)], &a2[*(int *)(v21 + 20)], v19);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        uint64_t v23 = type metadata accessor for __RKEntityCustomActionArguments(0);
        uint64_t v24 = *(int *)(v23 + 20);
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v28 = *(void *)v26;
        uint64_t v27 = *((void *)v26 + 1);
        *(void *)uint64_t v25 = v28;
        *((void *)v25 + 1) = v27;
        *(void *)&a1[*(int *)(v23 + 24)] = *(void *)&a2[*(int *)(v23 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v29 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        uint64_t v30 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v31 = v30[5];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = &a2[v31];
        *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
        v32[4] = v33[4];
        uint64_t v34 = v30[6];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        a1[v30[7]] = a2[v30[7]];
        a1[v30[8]] = a2[v30[8]];
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v37 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
        uint64_t v38 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v38 + 20)] = *(_DWORD *)&a2[*(int *)(v38 + 20)];
        uint64_t v39 = *(int *)(v38 + 24);
        uint64_t v40 = &a1[v39];
        uint64_t v41 = &a2[v39];
        v40[4] = v41[4];
        *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        *a1 = *a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[16] = a2[16];
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v42 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
        uint64_t v43 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v44 = v43[5];
        uint64_t v45 = &a1[v44];
        uint64_t v46 = &a2[v44];
        *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
        v45[4] = v46[4];
        uint64_t v47 = v43[6];
        uint64_t v48 = &a1[v47];
        uint64_t v49 = &a2[v47];
        *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
        v48[4] = v49[4];
        a1[v43[7]] = a2[v43[7]];
        a1[v43[8]] = a2[v43[8]];
        a1[v43[9]] = a2[v43[9]];
        uint64_t v50 = v43[10];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = &a2[v50];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        a1[v43[11]] = a2[v43[11]];
        uint64_t v53 = v43[12];
        uint64_t v54 = &a1[v53];
        uint64_t v55 = &a2[v53];
        v54[4] = v55[4];
        *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
        uint64_t v56 = v43[13];
        uint64_t v57 = &a1[v56];
        uint64_t v58 = &a2[v56];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        a1[v43[14]] = a2[v43[14]];
        a1[v43[15]] = a2[v43[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v59 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(a1, a2, v59);
        uint64_t v60 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v61 = *(int *)(v60 + 20);
        uint64_t v62 = &a1[v61];
        uint64_t v63 = &a2[v61];
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
        v62[16] = v63[16];
        uint64_t v64 = *(int *)(v60 + 24);
        uint64_t v65 = &a1[v64];
        uint64_t v66 = &a2[v64];
        v65[16] = v66[16];
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
        uint64_t v68 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v69 = v68[5];
        uint64_t v70 = &a1[v69];
        uint64_t v71 = &a2[v69];
        *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
        v70[4] = v71[4];
        uint64_t v72 = v68[6];
        uint64_t v73 = &a1[v72];
        uint64_t v74 = &a2[v72];
        *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
        v73[4] = v74[4];
        a1[v68[7]] = a2[v68[7]];
        a1[v68[8]] = a2[v68[8]];
        a1[v68[9]] = a2[v68[9]];
        uint64_t v75 = v68[10];
        uint64_t v76 = &a1[v75];
        uint64_t v77 = &a2[v75];
        *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
        v76[4] = v77[4];
        a1[v68[11]] = a2[v68[11]];
        uint64_t v78 = v68[12];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        v79[4] = v80[4];
        *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
        uint64_t v81 = v68[13];
        uint64_t v82 = &a1[v81];
        uint64_t v83 = &a2[v81];
        *(_DWORD *)uint64_t v82 = *(_DWORD *)v83;
        v82[4] = v83[4];
        a1[v68[14]] = a2[v68[14]];
        a1[v68[15]] = a2[v68[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        uint64_t v84 = type metadata accessor for UUID();
        uint64_t v85 = *(void *)(v84 - 8);
        uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
        v86(a1, a2, v84);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&a1[started[5]] = *(void *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(void *)&a1[started[7]] = *(void *)&a2[started[7]];
        *(void *)&a1[started[8]] = *(void *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        uint64_t v88 = started[13];
        uint64_t v89 = &a1[v88];
        uint64_t v90 = &a2[v88];
        *(void *)uint64_t v89 = *(void *)v90;
        v89[8] = v90[8];
        uint64_t v91 = started[14];
        long long v92 = &a1[v91];
        uint64_t v93 = &a2[v91];
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v93, 1, v84)) {
          goto LABEL_27;
        }
        goto LABEL_19;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v94 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16))(a1, a2, v94);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        uint64_t v84 = type metadata accessor for UUID();
        uint64_t v85 = *(void *)(v84 - 8);
        uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
        v86(a1, a2, v84);
        uint64_t v95 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v96 = v95[5];
        uint64_t v97 = &a1[v96];
        uint64_t v98 = &a2[v96];
        *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
        v97[16] = v98[16];
        uint64_t v99 = v95[6];
        uint64_t v100 = &a1[v99];
        uint64_t v101 = &a2[v99];
        *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
        v100[16] = v101[16];
        uint64_t v102 = v95[7];
        uint64_t v103 = &a1[v102];
        v104 = &a2[v102];
        v103[4] = v104[4];
        *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
        uint64_t v105 = v95[8];
        uint64_t v106 = &a1[v105];
        uint64_t v107 = &a2[v105];
        v106[4] = v107[4];
        *(_DWORD *)uint64_t v106 = *(_DWORD *)v107;
        a1[v95[9]] = a2[v95[9]];
        a1[v95[10]] = a2[v95[10]];
        a1[v95[11]] = a2[v95[11]];
        a1[v95[12]] = a2[v95[12]];
        uint64_t v108 = v95[13];
        v109 = &a1[v108];
        uint64_t v110 = &a2[v108];
        *(_DWORD *)v109 = *(_DWORD *)v110;
        v109[4] = v110[4];
        uint64_t v111 = v95[14];
        uint64_t v112 = &a1[v111];
        v113 = &a2[v111];
        *(_DWORD *)uint64_t v112 = *(_DWORD *)v113;
        v112[4] = v113[4];
        uint64_t v114 = v95[15];
        long long v92 = &a1[v114];
        uint64_t v93 = &a2[v114];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v93, 1, v84))
        {
LABEL_19:
          uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v92, v93, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
LABEL_27:
          v86(v92, v93, v84);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v92, 0, 1, v84);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        uint64_t v116 = type metadata accessor for UUID();
        v117 = *(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 16);
        v117(a1, a2, v116);
        float v118 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v117(&a1[v118[5]], &a2[v118[5]], v116);
        uint64_t v119 = v118[6];
        v120 = &a1[v119];
        char v121 = &a2[v119];
        *(_DWORD *)v120 = *(_DWORD *)v121;
        v120[4] = v121[4];
        uint64_t v122 = v118[7];
        v123 = &a1[v122];
        char v124 = &a2[v122];
        *(_DWORD *)v123 = *(_DWORD *)v124;
        v123[4] = v124[4];
        uint64_t v125 = v118[8];
        uint64_t v126 = &a1[v125];
        char v127 = &a2[v125];
        *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
        v126[16] = v127[16];
        a1[v118[9]] = a2[v118[9]];
        a1[v118[10]] = a2[v118[10]];
        a1[v118[11]] = a2[v118[11]];
        uint64_t v128 = v118[12];
        char v129 = &a1[v128];
        uint64_t v130 = &a2[v128];
        v129[4] = v130[4];
        *(_DWORD *)char v129 = *(_DWORD *)v130;
        uint64_t v131 = v118[13];
        uint64_t v132 = &a1[v131];
        char v133 = &a2[v131];
        *(_DWORD *)uint64_t v132 = *(_DWORD *)v133;
        v132[4] = v133[4];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x11u:
        uint64_t v134 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16))(a1, a2, v134);
        uint64_t v135 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v136 = v135[5];
        uint64_t v137 = &a1[v136];
        uint64_t v138 = &a2[v136];
        *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
        v137[4] = v138[4];
        uint64_t v139 = v135[6];
        uint64_t v140 = &a1[v139];
        uint64_t v141 = &a2[v139];
        *(_DWORD *)uint64_t v140 = *(_DWORD *)v141;
        v140[4] = v141[4];
        uint64_t v142 = v135[7];
        uint64_t v143 = &a1[v142];
        v144 = &a2[v142];
        v143[16] = v144[16];
        *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
        uint64_t v145 = v135[8];
        uint64_t v146 = &a1[v145];
        uint64_t v147 = &a2[v145];
        v146[4] = v147[4];
        *(_DWORD *)uint64_t v146 = *(_DWORD *)v147;
        uint64_t v148 = v135[9];
        uint64_t v149 = &a1[v148];
        uint64_t v150 = &a2[v148];
        v149[16] = v150[16];
        *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
        a1[v135[10]] = a2[v135[10]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x12u:
        uint64_t v151 = type metadata accessor for UUID();
        uint64_t v152 = *(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 16);
        v152(a1, a2, v151);
        uint64_t v153 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v152(&a1[v153[5]], &a2[v153[5]], v151);
        uint64_t v154 = v153[6];
        v155 = &a1[v154];
        v156 = &a2[v154];
        v152(&a1[v154], &a2[v154], v151);
        v157 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v158 = v157[5];
        uint64_t v159 = &v155[v158];
        uint64_t v160 = &v156[v158];
        *(_DWORD *)uint64_t v159 = *(_DWORD *)v160;
        v159[4] = v160[4];
        uint64_t v161 = v157[6];
        uint64_t v162 = &v155[v161];
        uint64_t v163 = &v156[v161];
        *(_DWORD *)uint64_t v162 = *(_DWORD *)v163;
        v162[4] = v163[4];
        v155[v157[7]] = v156[v157[7]];
        v155[v157[8]] = v156[v157[8]];
        v155[v157[9]] = v156[v157[9]];
        uint64_t v164 = v157[10];
        uint64_t v165 = &v155[v164];
        uint64_t v166 = &v156[v164];
        *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
        v165[4] = v166[4];
        v155[v157[11]] = v156[v157[11]];
        uint64_t v167 = v157[12];
        uint64_t v168 = &v155[v167];
        uint64_t v169 = &v156[v167];
        v168[4] = v169[4];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        uint64_t v170 = v157[13];
        uint64_t v171 = &v155[v170];
        uint64_t v172 = &v156[v170];
        *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v155[v157[14]] = v156[v157[14]];
        v155[v157[15]] = v156[v157[15]];
        uint64_t v173 = v153[7];
        uint64_t v174 = &a1[v173];
        uint64_t v175 = &a2[v173];
        v152(&a1[v173], v175, v151);
        uint64_t v176 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v177 = v176[5];
        uint64_t v178 = &v174[v177];
        uint64_t v179 = &v175[v177];
        *(_DWORD *)uint64_t v178 = *(_DWORD *)v179;
        v178[4] = v179[4];
        uint64_t v180 = v176[6];
        uint64_t v181 = &v174[v180];
        uint64_t v182 = &v175[v180];
        *(_DWORD *)uint64_t v181 = *(_DWORD *)v182;
        v181[4] = v182[4];
        v174[v176[7]] = v175[v176[7]];
        v174[v176[8]] = v175[v176[8]];
        v174[v176[9]] = v175[v176[9]];
        uint64_t v183 = v176[10];
        uint64_t v184 = &v174[v183];
        uint64_t v185 = &v175[v183];
        *(_DWORD *)uint64_t v184 = *(_DWORD *)v185;
        v184[4] = v185[4];
        v174[v176[11]] = v175[v176[11]];
        uint64_t v186 = v176[12];
        uint64_t v187 = &v174[v186];
        uint64_t v188 = &v175[v186];
        v187[4] = v188[4];
        *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
        uint64_t v189 = v176[13];
        uint64_t v190 = &v174[v189];
        uint64_t v191 = &v175[v189];
        *(_DWORD *)uint64_t v190 = *(_DWORD *)v191;
        v190[4] = v191[4];
        v174[v176[14]] = v175[v176[14]];
        v174[v176[15]] = v175[v176[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x13u:
        uint64_t v192 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v192 - 8) + 16))(a1, a2, v192);
        v193 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v194 = v193[5];
        uint64_t v195 = &a1[v194];
        uint64_t v196 = &a2[v194];
        *(_DWORD *)uint64_t v195 = *(_DWORD *)v196;
        v195[4] = v196[4];
        uint64_t v197 = v193[6];
        uint64_t v198 = &a1[v197];
        uint64_t v199 = &a2[v197];
        *(_DWORD *)uint64_t v198 = *(_DWORD *)v199;
        v198[4] = v199[4];
        a1[v193[7]] = a2[v193[7]];
        uint64_t v200 = v193[8];
        uint64_t v201 = &a1[v200];
        v202 = &a2[v200];
        v201[16] = v202[16];
        *(_OWORD *)uint64_t v201 = *(_OWORD *)v202;
        swift_storeEnumTagMultiPayload();
        break;
      case 0x14u:
        uint64_t v203 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v203 - 8) + 16))(a1, a2, v203);
        uint64_t v204 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v204 + 20)] = *(_DWORD *)&a2[*(int *)(v204 + 20)];
        *(_DWORD *)&a1[*(int *)(v204 + 24)] = *(_DWORD *)&a2[*(int *)(v204 + 24)];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x15u:
        uint64_t v205 = type metadata accessor for UUID();
        uint64_t v206 = *(void *)(v205 - 8);
        char v207 = *(void (**)(char *, char *, uint64_t))(v206 + 16);
        v207(a1, a2, v205);
        char v208 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v207(&a1[v208[5]], &a2[v208[5]], v205);
        uint64_t v209 = v208[6];
        uint64_t v210 = &a1[v209];
        char v211 = &a2[v209];
        uint64_t v212 = *((void *)v211 + 1);
        *(void *)uint64_t v210 = *(void *)v211;
        *((void *)v210 + 1) = v212;
        uint64_t v213 = v208[7];
        __dst = &a1[v213];
        char v214 = &a2[v213];
        v215 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48);
        swift_bridgeObjectRetain();
        if (v215(v214, 1, v205))
        {
          uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(__dst, v214, *(void *)(*(void *)(v216 - 8) + 64));
        }
        else
        {
          v207(__dst, v214, v205);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v206 + 56))(__dst, 0, 1, v205);
        }
        uint64_t v217 = v208[8];
        v218 = &a1[v217];
        v219 = &a2[v217];
        uint64_t v220 = *((void *)v219 + 1);
        *(void *)v218 = *(void *)v219;
        *((void *)v218 + 1) = v220;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityActionSpecification(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for __RKEntityAudioActionArguments(0);
      goto LABEL_20;
    case 1:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v21)((void *)(v8 - 8), a1, v8);
      uint64_t v9 = type metadata accessor for __RKChangeSceneActionArguments(0);
      goto LABEL_11;
    case 2:
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for __RKEntityCustomActionArguments(0);
      swift_bridgeObjectRelease();
      goto LABEL_20;
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 17:
    case 19:
    case 20:
      uint64_t v3 = type metadata accessor for UUID();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t v5 = v3;
      uint64_t v6 = a1;
      goto LABEL_15;
    case 6:
      goto LABEL_20;
    case 10:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v11 = *(void *)(v8 - 8);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v21(a1, v8);
      uint64_t v12 = *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
      goto LABEL_8;
    case 14:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v11 = *(void *)(v8 - 8);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v21(a1, v8);
      uint64_t v12 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
LABEL_8:
      uint64_t v13 = a1 + v12;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v8);
      if (result) {
        return result;
      }
      uint64_t v6 = v13;
      goto LABEL_14;
    case 16:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v21)((void *)(v8 - 8), a1, v8);
      uint64_t v9 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
LABEL_11:
      uint64_t v14 = *(int *)(v9 + 20);
      goto LABEL_13;
    case 18:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v21)((void *)(v8 - 8), a1, v8);
      uint64_t v15 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v21(a1 + v15[5], v8);
      v21(a1 + v15[6], v8);
      uint64_t v14 = v15[7];
LABEL_13:
      uint64_t v6 = a1 + v14;
LABEL_14:
      uint64_t v5 = v8;
      unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))v21;
LABEL_15:
      uint64_t result = v4(v6, v5);
      break;
    case 21:
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v18(a1, v16);
      uint64_t v19 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v18(a1 + *(int *)(v19 + 20), v16);
      swift_bridgeObjectRelease();
      uint64_t v20 = a1 + *(int *)(v19 + 28);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1, v16)) {
        v18(v20, v16);
      }
LABEL_20:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *initializeWithCopy for __RKEntityActionSpecification(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = (uint64_t *)&a2[v8];
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      void *v9 = v12;
      v9[1] = v11;
      a1[v7[6]] = a2[v7[6]];
      uint64_t v13 = v7[7];
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      v14[8] = v15[8];
      *(void *)uint64_t v14 = *(void *)v15;
      a1[v7[8]] = a2[v7[8]];
      a1[v7[9]] = a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 1u:
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(a1, a2, v16);
      uint64_t v18 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v17(&a1[*(int *)(v18 + 20)], &a2[*(int *)(v18 + 20)], v16);
      goto LABEL_28;
    case 2u:
      uint64_t v19 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      uint64_t v20 = type metadata accessor for __RKEntityCustomActionArguments(0);
      uint64_t v21 = *(int *)(v20 + 20);
      uint64_t v22 = &a1[v21];
      uint64_t v23 = (uint64_t *)&a2[v21];
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      *uint64_t v22 = v25;
      v22[1] = v24;
      *(void *)&a1[*(int *)(v20 + 24)] = *(void *)&a2[*(int *)(v20 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 3u:
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      uint64_t v28 = v27[5];
      uint64_t v29 = &a1[v28];
      uint64_t v30 = &a2[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      uint64_t v31 = v27[6];
      uint64_t v32 = &a1[v31];
      uint64_t v33 = &a2[v31];
      *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      a1[v27[7]] = a2[v27[7]];
      a1[v27[8]] = a2[v27[8]];
      goto LABEL_28;
    case 4u:
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
      uint64_t v35 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v35 + 20)] = *(_DWORD *)&a2[*(int *)(v35 + 20)];
      uint64_t v36 = *(int *)(v35 + 24);
      uint64_t v37 = &a1[v36];
      uint64_t v38 = &a2[v36];
      v37[4] = v38[4];
      *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
      goto LABEL_28;
    case 6u:
      *a1 = *a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[16] = a2[16];
      *((void *)a1 + 3) = *((void *)a2 + 3);
      *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 7u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v41 = v40[5];
      uint64_t v42 = &a1[v41];
      uint64_t v43 = &a2[v41];
      *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
      v42[4] = v43[4];
      uint64_t v44 = v40[6];
      uint64_t v45 = &a1[v44];
      uint64_t v46 = &a2[v44];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      v45[4] = v46[4];
      a1[v40[7]] = a2[v40[7]];
      a1[v40[8]] = a2[v40[8]];
      a1[v40[9]] = a2[v40[9]];
      uint64_t v47 = v40[10];
      uint64_t v48 = &a1[v47];
      uint64_t v49 = &a2[v47];
      *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
      v48[4] = v49[4];
      a1[v40[11]] = a2[v40[11]];
      uint64_t v50 = v40[12];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      v51[4] = v52[4];
      *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
      uint64_t v53 = v40[13];
      uint64_t v54 = &a1[v53];
      uint64_t v55 = &a2[v53];
      *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
      v54[4] = v55[4];
      a1[v40[14]] = a2[v40[14]];
      a1[v40[15]] = a2[v40[15]];
      goto LABEL_28;
    case 8u:
      uint64_t v56 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
      uint64_t v57 = type metadata accessor for __RKEntityForceActionArguments(0);
      uint64_t v58 = *(int *)(v57 + 20);
      uint64_t v59 = &a1[v58];
      uint64_t v60 = &a2[v58];
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      v59[16] = v60[16];
      uint64_t v61 = *(int *)(v57 + 24);
      uint64_t v62 = &a1[v61];
      uint64_t v63 = &a2[v61];
      v62[16] = v63[16];
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      goto LABEL_28;
    case 9u:
      uint64_t v64 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
      uint64_t v65 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v66 = v65[5];
      uint64_t v67 = &a1[v66];
      uint64_t v68 = &a2[v66];
      *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
      v67[4] = v68[4];
      uint64_t v69 = v65[6];
      uint64_t v70 = &a1[v69];
      uint64_t v71 = &a2[v69];
      *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
      v70[4] = v71[4];
      a1[v65[7]] = a2[v65[7]];
      a1[v65[8]] = a2[v65[8]];
      a1[v65[9]] = a2[v65[9]];
      uint64_t v72 = v65[10];
      uint64_t v73 = &a1[v72];
      uint64_t v74 = &a2[v72];
      *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
      v73[4] = v74[4];
      a1[v65[11]] = a2[v65[11]];
      uint64_t v75 = v65[12];
      uint64_t v76 = &a1[v75];
      uint64_t v77 = &a2[v75];
      v76[4] = v77[4];
      *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
      uint64_t v78 = v65[13];
      uint64_t v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
      v79[4] = v80[4];
      a1[v65[14]] = a2[v65[14]];
      a1[v65[15]] = a2[v65[15]];
      goto LABEL_28;
    case 0xAu:
      uint64_t v81 = type metadata accessor for UUID();
      uint64_t v82 = *(void *)(v81 - 8);
      uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v83(a1, a2, v81);
      uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(void *)&a1[started[5]] = *(void *)&a2[started[5]];
      a1[started[6]] = a2[started[6]];
      *(void *)&a1[started[7]] = *(void *)&a2[started[7]];
      *(void *)&a1[started[8]] = *(void *)&a2[started[8]];
      a1[started[9]] = a2[started[9]];
      a1[started[10]] = a2[started[10]];
      *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
      a1[started[12]] = a2[started[12]];
      uint64_t v85 = started[13];
      uint64_t v86 = &a1[v85];
      uint64_t v87 = &a2[v85];
      *(void *)uint64_t v86 = *(void *)v87;
      v86[8] = v87[8];
      uint64_t v88 = started[14];
      uint64_t v89 = &a1[v88];
      uint64_t v90 = &a2[v88];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v90, 1, v81)) {
        goto LABEL_13;
      }
      goto LABEL_27;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      uint64_t v92 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v92 - 8) + 16))(a1, a2, v92);
      goto LABEL_28;
    case 0xEu:
      uint64_t v81 = type metadata accessor for UUID();
      uint64_t v82 = *(void *)(v81 - 8);
      uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v83(a1, a2, v81);
      uint64_t v93 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      uint64_t v94 = v93[5];
      uint64_t v95 = &a1[v94];
      uint64_t v96 = &a2[v94];
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
      v95[16] = v96[16];
      uint64_t v97 = v93[6];
      uint64_t v98 = &a1[v97];
      uint64_t v99 = &a2[v97];
      *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
      v98[16] = v99[16];
      uint64_t v100 = v93[7];
      uint64_t v101 = &a1[v100];
      uint64_t v102 = &a2[v100];
      v101[4] = v102[4];
      *(_DWORD *)uint64_t v101 = *(_DWORD *)v102;
      uint64_t v103 = v93[8];
      v104 = &a1[v103];
      uint64_t v105 = &a2[v103];
      v104[4] = v105[4];
      *(_DWORD *)v104 = *(_DWORD *)v105;
      a1[v93[9]] = a2[v93[9]];
      a1[v93[10]] = a2[v93[10]];
      a1[v93[11]] = a2[v93[11]];
      a1[v93[12]] = a2[v93[12]];
      uint64_t v106 = v93[13];
      uint64_t v107 = &a1[v106];
      uint64_t v108 = &a2[v106];
      *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
      v107[4] = v108[4];
      uint64_t v109 = v93[14];
      uint64_t v110 = &a1[v109];
      uint64_t v111 = &a2[v109];
      *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
      v110[4] = v111[4];
      uint64_t v112 = v93[15];
      uint64_t v89 = &a1[v112];
      uint64_t v90 = &a2[v112];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v90, 1, v81))
      {
LABEL_13:
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
LABEL_27:
        v83(v89, v90, v81);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v89, 0, 1, v81);
      }
      goto LABEL_28;
    case 0x10u:
      uint64_t v113 = type metadata accessor for UUID();
      uint64_t v114 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v113 - 8) + 16);
      v114(a1, a2, v113);
      uint64_t v115 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v114(&a1[v115[5]], &a2[v115[5]], v113);
      uint64_t v116 = v115[6];
      v117 = &a1[v116];
      float v118 = &a2[v116];
      *(_DWORD *)v117 = *(_DWORD *)v118;
      v117[4] = v118[4];
      uint64_t v119 = v115[7];
      v120 = &a1[v119];
      char v121 = &a2[v119];
      *(_DWORD *)v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      uint64_t v122 = v115[8];
      v123 = &a1[v122];
      char v124 = &a2[v122];
      *(_OWORD *)v123 = *(_OWORD *)v124;
      v123[16] = v124[16];
      a1[v115[9]] = a2[v115[9]];
      a1[v115[10]] = a2[v115[10]];
      a1[v115[11]] = a2[v115[11]];
      uint64_t v125 = v115[12];
      uint64_t v126 = &a1[v125];
      char v127 = &a2[v125];
      v126[4] = v127[4];
      *(_DWORD *)uint64_t v126 = *(_DWORD *)v127;
      uint64_t v128 = v115[13];
      char v129 = &a1[v128];
      uint64_t v130 = &a2[v128];
      *(_DWORD *)char v129 = *(_DWORD *)v130;
      v129[4] = v130[4];
      goto LABEL_28;
    case 0x11u:
      uint64_t v131 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v131 - 8) + 16))(a1, a2, v131);
      uint64_t v132 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      uint64_t v133 = v132[5];
      uint64_t v134 = &a1[v133];
      uint64_t v135 = &a2[v133];
      *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
      v134[4] = v135[4];
      uint64_t v136 = v132[6];
      uint64_t v137 = &a1[v136];
      uint64_t v138 = &a2[v136];
      *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
      v137[4] = v138[4];
      uint64_t v139 = v132[7];
      uint64_t v140 = &a1[v139];
      uint64_t v141 = &a2[v139];
      v140[16] = v141[16];
      *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
      uint64_t v142 = v132[8];
      uint64_t v143 = &a1[v142];
      v144 = &a2[v142];
      v143[4] = v144[4];
      *(_DWORD *)uint64_t v143 = *(_DWORD *)v144;
      uint64_t v145 = v132[9];
      uint64_t v146 = &a1[v145];
      uint64_t v147 = &a2[v145];
      v146[16] = v147[16];
      *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
      a1[v132[10]] = a2[v132[10]];
      goto LABEL_28;
    case 0x12u:
      uint64_t v148 = type metadata accessor for UUID();
      uint64_t v149 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v148 - 8) + 16);
      v149(a1, a2, v148);
      uint64_t v150 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v149(&a1[v150[5]], &a2[v150[5]], v148);
      uint64_t v151 = v150[6];
      uint64_t v152 = &a1[v151];
      uint64_t v153 = &a2[v151];
      v149(&a1[v151], &a2[v151], v148);
      uint64_t v154 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v155 = v154[5];
      v156 = &v152[v155];
      v157 = &v153[v155];
      *(_DWORD *)v156 = *(_DWORD *)v157;
      v156[4] = v157[4];
      uint64_t v158 = v154[6];
      uint64_t v159 = &v152[v158];
      uint64_t v160 = &v153[v158];
      *(_DWORD *)uint64_t v159 = *(_DWORD *)v160;
      v159[4] = v160[4];
      v152[v154[7]] = v153[v154[7]];
      v152[v154[8]] = v153[v154[8]];
      v152[v154[9]] = v153[v154[9]];
      uint64_t v161 = v154[10];
      uint64_t v162 = &v152[v161];
      uint64_t v163 = &v153[v161];
      *(_DWORD *)uint64_t v162 = *(_DWORD *)v163;
      v162[4] = v163[4];
      v152[v154[11]] = v153[v154[11]];
      uint64_t v164 = v154[12];
      uint64_t v165 = &v152[v164];
      uint64_t v166 = &v153[v164];
      v165[4] = v166[4];
      *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
      uint64_t v167 = v154[13];
      uint64_t v168 = &v152[v167];
      uint64_t v169 = &v153[v167];
      *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
      v168[4] = v169[4];
      v152[v154[14]] = v153[v154[14]];
      v152[v154[15]] = v153[v154[15]];
      uint64_t v170 = v150[7];
      uint64_t v171 = &a1[v170];
      uint64_t v172 = &a2[v170];
      v149(&a1[v170], v172, v148);
      uint64_t v173 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v174 = v173[5];
      uint64_t v175 = &v171[v174];
      uint64_t v176 = &v172[v174];
      *(_DWORD *)uint64_t v175 = *(_DWORD *)v176;
      v175[4] = v176[4];
      uint64_t v177 = v173[6];
      uint64_t v178 = &v171[v177];
      uint64_t v179 = &v172[v177];
      *(_DWORD *)uint64_t v178 = *(_DWORD *)v179;
      v178[4] = v179[4];
      v171[v173[7]] = v172[v173[7]];
      v171[v173[8]] = v172[v173[8]];
      v171[v173[9]] = v172[v173[9]];
      uint64_t v180 = v173[10];
      uint64_t v181 = &v171[v180];
      uint64_t v182 = &v172[v180];
      *(_DWORD *)uint64_t v181 = *(_DWORD *)v182;
      v181[4] = v182[4];
      v171[v173[11]] = v172[v173[11]];
      uint64_t v183 = v173[12];
      uint64_t v184 = &v171[v183];
      uint64_t v185 = &v172[v183];
      v184[4] = v185[4];
      *(_DWORD *)uint64_t v184 = *(_DWORD *)v185;
      uint64_t v186 = v173[13];
      uint64_t v187 = &v171[v186];
      uint64_t v188 = &v172[v186];
      *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
      v187[4] = v188[4];
      v171[v173[14]] = v172[v173[14]];
      v171[v173[15]] = v172[v173[15]];
      goto LABEL_28;
    case 0x13u:
      uint64_t v189 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v189 - 8) + 16))(a1, a2, v189);
      uint64_t v190 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      uint64_t v191 = v190[5];
      uint64_t v192 = &a1[v191];
      v193 = &a2[v191];
      *(_DWORD *)uint64_t v192 = *(_DWORD *)v193;
      v192[4] = v193[4];
      uint64_t v194 = v190[6];
      uint64_t v195 = &a1[v194];
      uint64_t v196 = &a2[v194];
      *(_DWORD *)uint64_t v195 = *(_DWORD *)v196;
      v195[4] = v196[4];
      a1[v190[7]] = a2[v190[7]];
      uint64_t v197 = v190[8];
      uint64_t v198 = &a1[v197];
      uint64_t v199 = &a2[v197];
      v198[16] = v199[16];
      *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
      goto LABEL_28;
    case 0x14u:
      uint64_t v200 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v200 - 8) + 16))(a1, a2, v200);
      uint64_t v201 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v201 + 20)] = *(_DWORD *)&a2[*(int *)(v201 + 20)];
      *(_DWORD *)&a1[*(int *)(v201 + 24)] = *(_DWORD *)&a2[*(int *)(v201 + 24)];
      goto LABEL_28;
    case 0x15u:
      uint64_t v202 = type metadata accessor for UUID();
      uint64_t v203 = *(void *)(v202 - 8);
      uint64_t v204 = *(void (**)(char *, char *, uint64_t))(v203 + 16);
      v204(a1, a2, v202);
      uint64_t v205 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v204(&a1[v205[5]], &a2[v205[5]], v202);
      uint64_t v206 = v205[6];
      char v207 = &a1[v206];
      char v208 = &a2[v206];
      uint64_t v209 = v208[1];
      *char v207 = *v208;
      v207[1] = v209;
      uint64_t v210 = v205[7];
      __dst = &a1[v210];
      char v211 = &a2[v210];
      uint64_t v212 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48);
      swift_bridgeObjectRetain();
      if (v212(v211, 1, v202))
      {
        uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(__dst, v211, *(void *)(*(void *)(v213 - 8) + 64));
      }
      else
      {
        v204(__dst, v211, v202);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v203 + 56))(__dst, 0, 1, v202);
      }
      uint64_t v214 = v205[8];
      v215 = &a1[v214];
      uint64_t v216 = &a2[v214];
      uint64_t v217 = v216[1];
      void *v215 = *v216;
      v215[1] = v217;
      swift_bridgeObjectRetain();
LABEL_28:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *assignWithCopy for __RKEntityActionSpecification(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityActionSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        void *v9 = *v10;
        v9[1] = v10[1];
        a1[v7[6]] = a2[v7[6]];
        uint64_t v11 = v7[7];
        uint64_t v12 = &a1[v11];
        uint64_t v13 = &a2[v11];
        char v14 = v13[8];
        *(void *)uint64_t v12 = *(void *)v13;
        v12[8] = v14;
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        a1[v7[10]] = a2[v7[10]];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 1u:
        uint64_t v15 = type metadata accessor for UUID();
        uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16);
        v16(a1, a2, v15);
        uint64_t v17 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v16(&a1[*(int *)(v17 + 20)], &a2[*(int *)(v17 + 20)], v15);
        goto LABEL_29;
      case 2u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = type metadata accessor for __RKEntityCustomActionArguments(0);
        uint64_t v20 = *(int *)(v19 + 20);
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        void *v21 = *v22;
        v21[1] = v22[1];
        *(void *)&a1[*(int *)(v19 + 24)] = *(void *)&a2[*(int *)(v19 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 3u:
        uint64_t v23 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        uint64_t v24 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v25 = v24[5];
        uint64_t v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        char v28 = v27[4];
        *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
        v26[4] = v28;
        uint64_t v29 = v24[6];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        char v32 = v31[4];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v32;
        a1[v24[7]] = a2[v24[7]];
        a1[v24[8]] = a2[v24[8]];
        goto LABEL_29;
      case 4u:
        uint64_t v33 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        uint64_t v34 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v34 + 20)] = *(_DWORD *)&a2[*(int *)(v34 + 20)];
        uint64_t v35 = *(int *)(v34 + 24);
        uint64_t v36 = &a1[v35];
        uint64_t v37 = &a2[v35];
        char v38 = v37[4];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        v36[4] = v38;
        goto LABEL_29;
      case 6u:
        *a1 = *a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[16] = a2[16];
        uint64_t v39 = *((void *)a2 + 3);
        a1[32] = a2[32];
        *((void *)a1 + 3) = v39;
        a1[33] = a2[33];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 7u:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
        uint64_t v41 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v42 = v41[5];
        uint64_t v43 = &a1[v42];
        uint64_t v44 = &a2[v42];
        char v45 = v44[4];
        *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
        v43[4] = v45;
        uint64_t v46 = v41[6];
        uint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        char v49 = v48[4];
        *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
        v47[4] = v49;
        a1[v41[7]] = a2[v41[7]];
        a1[v41[8]] = a2[v41[8]];
        a1[v41[9]] = a2[v41[9]];
        uint64_t v50 = v41[10];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = &a2[v50];
        char v53 = v52[4];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        v51[4] = v53;
        a1[v41[11]] = a2[v41[11]];
        uint64_t v54 = v41[12];
        uint64_t v55 = &a1[v54];
        uint64_t v56 = &a2[v54];
        char v57 = v56[4];
        *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
        v55[4] = v57;
        uint64_t v58 = v41[13];
        uint64_t v59 = &a1[v58];
        uint64_t v60 = &a2[v58];
        char v61 = v60[4];
        *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
        v59[4] = v61;
        a1[v41[14]] = a2[v41[14]];
        a1[v41[15]] = a2[v41[15]];
        goto LABEL_29;
      case 8u:
        uint64_t v62 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v62 - 8) + 16))(a1, a2, v62);
        uint64_t v63 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v64 = *(int *)(v63 + 20);
        uint64_t v65 = &a1[v64];
        uint64_t v66 = &a2[v64];
        char v67 = v66[16];
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
        v65[16] = v67;
        uint64_t v68 = *(int *)(v63 + 24);
        uint64_t v69 = &a1[v68];
        uint64_t v70 = &a2[v68];
        char v71 = v70[16];
        *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
        v69[16] = v71;
        goto LABEL_29;
      case 9u:
        uint64_t v72 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v72 - 8) + 16))(a1, a2, v72);
        uint64_t v73 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v74 = v73[5];
        uint64_t v75 = &a1[v74];
        uint64_t v76 = &a2[v74];
        char v77 = v76[4];
        *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
        v75[4] = v77;
        uint64_t v78 = v73[6];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        char v81 = v80[4];
        *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
        v79[4] = v81;
        a1[v73[7]] = a2[v73[7]];
        a1[v73[8]] = a2[v73[8]];
        a1[v73[9]] = a2[v73[9]];
        uint64_t v82 = v73[10];
        uint64_t v83 = &a1[v82];
        uint64_t v84 = &a2[v82];
        char v85 = v84[4];
        *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
        v83[4] = v85;
        a1[v73[11]] = a2[v73[11]];
        uint64_t v86 = v73[12];
        uint64_t v87 = &a1[v86];
        uint64_t v88 = &a2[v86];
        char v89 = v88[4];
        *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
        v87[4] = v89;
        uint64_t v90 = v73[13];
        uint64_t v91 = &a1[v90];
        uint64_t v92 = &a2[v90];
        char v93 = v92[4];
        *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
        v91[4] = v93;
        a1[v73[14]] = a2[v73[14]];
        a1[v73[15]] = a2[v73[15]];
        goto LABEL_29;
      case 0xAu:
        uint64_t v94 = type metadata accessor for UUID();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v96(a1, a2, v94);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&a1[started[5]] = *(void *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(void *)&a1[started[7]] = *(void *)&a2[started[7]];
        *(void *)&a1[started[8]] = *(void *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        uint64_t v98 = started[13];
        uint64_t v99 = &a1[v98];
        uint64_t v100 = &a2[v98];
        char v101 = v100[8];
        *(void *)uint64_t v99 = *(void *)v100;
        v99[8] = v101;
        uint64_t v102 = started[14];
        uint64_t v103 = &a1[v102];
        v104 = &a2[v102];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v104, 1, v94)) {
          goto LABEL_14;
        }
        goto LABEL_25;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v106 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v106 - 8) + 16))(a1, a2, v106);
        goto LABEL_29;
      case 0xEu:
        uint64_t v94 = type metadata accessor for UUID();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v96(a1, a2, v94);
        uint64_t v107 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v108 = v107[5];
        uint64_t v109 = &a1[v108];
        uint64_t v110 = &a2[v108];
        char v111 = v110[16];
        *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
        v109[16] = v111;
        uint64_t v112 = v107[6];
        uint64_t v113 = &a1[v112];
        uint64_t v114 = &a2[v112];
        char v115 = v114[16];
        *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
        v113[16] = v115;
        uint64_t v116 = v107[7];
        v117 = &a1[v116];
        float v118 = &a2[v116];
        char v119 = v118[4];
        *(_DWORD *)v117 = *(_DWORD *)v118;
        v117[4] = v119;
        uint64_t v120 = v107[8];
        char v121 = &a1[v120];
        uint64_t v122 = &a2[v120];
        char v123 = v122[4];
        *(_DWORD *)char v121 = *(_DWORD *)v122;
        v121[4] = v123;
        a1[v107[9]] = a2[v107[9]];
        a1[v107[10]] = a2[v107[10]];
        a1[v107[11]] = a2[v107[11]];
        a1[v107[12]] = a2[v107[12]];
        uint64_t v124 = v107[13];
        uint64_t v125 = &a1[v124];
        uint64_t v126 = &a2[v124];
        char v127 = v126[4];
        *(_DWORD *)uint64_t v125 = *(_DWORD *)v126;
        v125[4] = v127;
        uint64_t v128 = v107[14];
        char v129 = &a1[v128];
        uint64_t v130 = &a2[v128];
        char v131 = v130[4];
        *(_DWORD *)char v129 = *(_DWORD *)v130;
        v129[4] = v131;
        uint64_t v132 = v107[15];
        uint64_t v103 = &a1[v132];
        v104 = &a2[v132];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v104, 1, v94))
        {
LABEL_14:
          uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
LABEL_25:
          v96(v103, v104, v94);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v103, 0, 1, v94);
        }
        goto LABEL_29;
      case 0x10u:
        uint64_t v133 = type metadata accessor for UUID();
        uint64_t v134 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v133 - 8) + 16);
        v134(a1, a2, v133);
        uint64_t v135 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v134(&a1[v135[5]], &a2[v135[5]], v133);
        uint64_t v136 = v135[6];
        uint64_t v137 = &a1[v136];
        uint64_t v138 = &a2[v136];
        int v139 = *(_DWORD *)v138;
        v137[4] = v138[4];
        *(_DWORD *)uint64_t v137 = v139;
        uint64_t v140 = v135[7];
        uint64_t v141 = &a1[v140];
        uint64_t v142 = &a2[v140];
        LOBYTE(v139) = v142[4];
        *(_DWORD *)uint64_t v141 = *(_DWORD *)v142;
        v141[4] = v139;
        uint64_t v143 = v135[8];
        v144 = &a1[v143];
        uint64_t v145 = &a2[v143];
        LOBYTE(v139) = v145[16];
        *(_OWORD *)v144 = *(_OWORD *)v145;
        v144[16] = v139;
        a1[v135[9]] = a2[v135[9]];
        a1[v135[10]] = a2[v135[10]];
        a1[v135[11]] = a2[v135[11]];
        uint64_t v146 = v135[12];
        uint64_t v147 = &a1[v146];
        uint64_t v148 = &a2[v146];
        int v149 = *(_DWORD *)v148;
        v147[4] = v148[4];
        *(_DWORD *)uint64_t v147 = v149;
        uint64_t v150 = v135[13];
        uint64_t v151 = &a1[v150];
        uint64_t v152 = &a2[v150];
        LOBYTE(v149) = v152[4];
        *(_DWORD *)uint64_t v151 = *(_DWORD *)v152;
        v151[4] = v149;
        goto LABEL_29;
      case 0x11u:
        uint64_t v153 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v153 - 8) + 16))(a1, a2, v153);
        uint64_t v154 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v155 = v154[5];
        v156 = &a1[v155];
        v157 = &a2[v155];
        char v158 = v157[4];
        *(_DWORD *)v156 = *(_DWORD *)v157;
        v156[4] = v158;
        uint64_t v159 = v154[6];
        uint64_t v160 = &a1[v159];
        uint64_t v161 = &a2[v159];
        char v162 = v161[4];
        *(_DWORD *)uint64_t v160 = *(_DWORD *)v161;
        v160[4] = v162;
        uint64_t v163 = v154[7];
        uint64_t v164 = &a1[v163];
        uint64_t v165 = &a2[v163];
        char v166 = v165[16];
        *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
        v164[16] = v166;
        uint64_t v167 = v154[8];
        uint64_t v168 = &a1[v167];
        uint64_t v169 = &a2[v167];
        char v170 = v169[4];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        v168[4] = v170;
        uint64_t v171 = v154[9];
        uint64_t v172 = &a1[v171];
        uint64_t v173 = &a2[v171];
        char v174 = v173[16];
        *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
        v172[16] = v174;
        a1[v154[10]] = a2[v154[10]];
        goto LABEL_29;
      case 0x12u:
        uint64_t v175 = type metadata accessor for UUID();
        uint64_t v176 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v175 - 8) + 16);
        v176(a1, a2, v175);
        uint64_t v177 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v176(&a1[v177[5]], &a2[v177[5]], v175);
        uint64_t v178 = v177[6];
        uint64_t v179 = &a1[v178];
        uint64_t v180 = &a2[v178];
        v176(&a1[v178], &a2[v178], v175);
        uint64_t v181 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v182 = v181[5];
        uint64_t v183 = &v179[v182];
        uint64_t v184 = &v180[v182];
        char v185 = v184[4];
        *(_DWORD *)uint64_t v183 = *(_DWORD *)v184;
        v183[4] = v185;
        uint64_t v186 = v181[6];
        uint64_t v187 = &v179[v186];
        uint64_t v188 = &v180[v186];
        char v189 = v188[4];
        *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
        v187[4] = v189;
        v179[v181[7]] = v180[v181[7]];
        v179[v181[8]] = v180[v181[8]];
        v179[v181[9]] = v180[v181[9]];
        uint64_t v190 = v181[10];
        uint64_t v191 = &v179[v190];
        uint64_t v192 = &v180[v190];
        char v193 = v192[4];
        *(_DWORD *)uint64_t v191 = *(_DWORD *)v192;
        v191[4] = v193;
        v179[v181[11]] = v180[v181[11]];
        uint64_t v194 = v181[12];
        uint64_t v195 = &v179[v194];
        uint64_t v196 = &v180[v194];
        char v197 = v196[4];
        *(_DWORD *)uint64_t v195 = *(_DWORD *)v196;
        v195[4] = v197;
        uint64_t v198 = v181[13];
        uint64_t v199 = &v179[v198];
        uint64_t v200 = &v180[v198];
        char v201 = v200[4];
        *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
        v199[4] = v201;
        v179[v181[14]] = v180[v181[14]];
        v179[v181[15]] = v180[v181[15]];
        uint64_t v202 = v177[7];
        uint64_t v203 = &a1[v202];
        uint64_t v204 = &a2[v202];
        v176(&a1[v202], v204, v175);
        uint64_t v205 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v206 = v205[5];
        char v207 = &v203[v206];
        char v208 = &v204[v206];
        char v209 = v208[4];
        *(_DWORD *)char v207 = *(_DWORD *)v208;
        v207[4] = v209;
        uint64_t v210 = v205[6];
        char v211 = &v203[v210];
        uint64_t v212 = &v204[v210];
        char v213 = v212[4];
        *(_DWORD *)char v211 = *(_DWORD *)v212;
        v211[4] = v213;
        v203[v205[7]] = v204[v205[7]];
        v203[v205[8]] = v204[v205[8]];
        v203[v205[9]] = v204[v205[9]];
        uint64_t v214 = v205[10];
        v215 = &v203[v214];
        uint64_t v216 = &v204[v214];
        char v217 = v216[4];
        *(_DWORD *)v215 = *(_DWORD *)v216;
        v215[4] = v217;
        v203[v205[11]] = v204[v205[11]];
        uint64_t v218 = v205[12];
        v219 = &v203[v218];
        uint64_t v220 = &v204[v218];
        char v221 = v220[4];
        *(_DWORD *)v219 = *(_DWORD *)v220;
        v219[4] = v221;
        uint64_t v222 = v205[13];
        v223 = &v203[v222];
        v224 = &v204[v222];
        char v225 = v224[4];
        *(_DWORD *)v223 = *(_DWORD *)v224;
        v223[4] = v225;
        v203[v205[14]] = v204[v205[14]];
        v203[v205[15]] = v204[v205[15]];
        goto LABEL_29;
      case 0x13u:
        uint64_t v226 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v226 - 8) + 16))(a1, a2, v226);
        v227 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v228 = v227[5];
        v229 = &a1[v228];
        v230 = &a2[v228];
        char v231 = v230[4];
        *(_DWORD *)v229 = *(_DWORD *)v230;
        v229[4] = v231;
        uint64_t v232 = v227[6];
        v233 = &a1[v232];
        v234 = &a2[v232];
        char v235 = v234[4];
        *(_DWORD *)v233 = *(_DWORD *)v234;
        v233[4] = v235;
        a1[v227[7]] = a2[v227[7]];
        uint64_t v236 = v227[8];
        v237 = &a1[v236];
        v238 = &a2[v236];
        char v239 = v238[16];
        *(_OWORD *)v237 = *(_OWORD *)v238;
        v237[16] = v239;
        goto LABEL_29;
      case 0x14u:
        uint64_t v240 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v240 - 8) + 16))(a1, a2, v240);
        uint64_t v241 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v241 + 20)] = *(_DWORD *)&a2[*(int *)(v241 + 20)];
        *(_DWORD *)&a1[*(int *)(v241 + 24)] = *(_DWORD *)&a2[*(int *)(v241 + 24)];
        goto LABEL_29;
      case 0x15u:
        uint64_t v242 = type metadata accessor for UUID();
        uint64_t v243 = *(void *)(v242 - 8);
        v244 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
        v244(a1, a2, v242);
        v245 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v244(&a1[v245[5]], &a2[v245[5]], v242);
        uint64_t v246 = v245[6];
        v247 = &a1[v246];
        v248 = &a2[v246];
        void *v247 = *v248;
        v247[1] = v248[1];
        uint64_t v249 = v245[7];
        __dst = &a1[v249];
        v250 = &a2[v249];
        v251 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48);
        swift_bridgeObjectRetain();
        if (v251(v250, 1, v242))
        {
          uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(__dst, v250, *(void *)(*(void *)(v252 - 8) + 64));
        }
        else
        {
          v244(__dst, v250, v242);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v243 + 56))(__dst, 0, 1, v242);
        }
        uint64_t v253 = v245[8];
        v254 = &a1[v253];
        v255 = &a2[v253];
        void *v254 = *v255;
        v254[1] = v255[1];
        swift_bridgeObjectRetain();
LABEL_29:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      a1[v7[6]] = a2[v7[6]];
      uint64_t v8 = v7[7];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      v9[8] = v10[8];
      *(void *)uint64_t v9 = *(void *)v10;
      a1[v7[8]] = a2[v7[8]];
      a1[v7[9]] = a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      goto LABEL_27;
    case 1u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      uint64_t v13 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v12(&a1[*(int *)(v13 + 20)], &a2[*(int *)(v13 + 20)], v11);
      goto LABEL_27;
    case 2u:
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      uint64_t v15 = type metadata accessor for __RKEntityCustomActionArguments(0);
      *(_OWORD *)&a1[*(int *)(v15 + 20)] = *(_OWORD *)&a2[*(int *)(v15 + 20)];
      *(void *)&a1[*(int *)(v15 + 24)] = *(void *)&a2[*(int *)(v15 + 24)];
      goto LABEL_27;
    case 3u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
      uint64_t v17 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      uint64_t v18 = v17[5];
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      uint64_t v21 = v17[6];
      uint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      a1[v17[7]] = a2[v17[7]];
      a1[v17[8]] = a2[v17[8]];
      goto LABEL_27;
    case 4u:
      uint64_t v24 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
      uint64_t v25 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v25 + 20)] = *(_DWORD *)&a2[*(int *)(v25 + 20)];
      uint64_t v26 = *(int *)(v25 + 24);
      uint64_t v27 = &a1[v26];
      char v28 = &a2[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      goto LABEL_27;
    case 7u:
      uint64_t v29 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
      uint64_t v30 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v31 = v30[5];
      char v32 = &a1[v31];
      uint64_t v33 = &a2[v31];
      *(_DWORD *)char v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      uint64_t v34 = v30[6];
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      v35[4] = v36[4];
      a1[v30[7]] = a2[v30[7]];
      a1[v30[8]] = a2[v30[8]];
      a1[v30[9]] = a2[v30[9]];
      uint64_t v37 = v30[10];
      char v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      *(_DWORD *)char v38 = *(_DWORD *)v39;
      v38[4] = v39[4];
      a1[v30[11]] = a2[v30[11]];
      uint64_t v40 = v30[12];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      v41[4] = v42[4];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      uint64_t v43 = v30[13];
      uint64_t v44 = &a1[v43];
      char v45 = &a2[v43];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      a1[v30[14]] = a2[v30[14]];
      a1[v30[15]] = a2[v30[15]];
      goto LABEL_27;
    case 8u:
      uint64_t v46 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(a1, a2, v46);
      uint64_t v47 = type metadata accessor for __RKEntityForceActionArguments(0);
      uint64_t v48 = *(int *)(v47 + 20);
      char v49 = &a1[v48];
      uint64_t v50 = &a2[v48];
      *(_OWORD *)char v49 = *(_OWORD *)v50;
      v49[16] = v50[16];
      uint64_t v51 = *(int *)(v47 + 24);
      uint64_t v52 = &a1[v51];
      char v53 = &a2[v51];
      v52[16] = v53[16];
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      goto LABEL_27;
    case 9u:
      uint64_t v54 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
      uint64_t v55 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v56 = v55[5];
      char v57 = &a1[v56];
      uint64_t v58 = &a2[v56];
      *(_DWORD *)char v57 = *(_DWORD *)v58;
      v57[4] = v58[4];
      uint64_t v59 = v55[6];
      uint64_t v60 = &a1[v59];
      char v61 = &a2[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      a1[v55[7]] = a2[v55[7]];
      a1[v55[8]] = a2[v55[8]];
      a1[v55[9]] = a2[v55[9]];
      uint64_t v62 = v55[10];
      uint64_t v63 = &a1[v62];
      uint64_t v64 = &a2[v62];
      *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
      v63[4] = v64[4];
      a1[v55[11]] = a2[v55[11]];
      uint64_t v65 = v55[12];
      uint64_t v66 = &a1[v65];
      char v67 = &a2[v65];
      v66[4] = v67[4];
      *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
      uint64_t v68 = v55[13];
      uint64_t v69 = &a1[v68];
      uint64_t v70 = &a2[v68];
      *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      a1[v55[14]] = a2[v55[14]];
      a1[v55[15]] = a2[v55[15]];
      goto LABEL_27;
    case 0xAu:
      uint64_t v71 = type metadata accessor for UUID();
      uint64_t v72 = *(void *)(v71 - 8);
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v73(a1, a2, v71);
      uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(void *)&a1[started[5]] = *(void *)&a2[started[5]];
      a1[started[6]] = a2[started[6]];
      *(void *)&a1[started[7]] = *(void *)&a2[started[7]];
      *(void *)&a1[started[8]] = *(void *)&a2[started[8]];
      a1[started[9]] = a2[started[9]];
      a1[started[10]] = a2[started[10]];
      *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
      a1[started[12]] = a2[started[12]];
      uint64_t v75 = started[13];
      uint64_t v76 = &a1[v75];
      char v77 = &a2[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v77[8];
      uint64_t v78 = started[14];
      uint64_t v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71)) {
        goto LABEL_12;
      }
      goto LABEL_23;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      uint64_t v82 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(a1, a2, v82);
      goto LABEL_27;
    case 0xEu:
      uint64_t v71 = type metadata accessor for UUID();
      uint64_t v72 = *(void *)(v71 - 8);
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v73(a1, a2, v71);
      uint64_t v83 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      uint64_t v84 = v83[5];
      char v85 = &a1[v84];
      uint64_t v86 = &a2[v84];
      *(_OWORD *)char v85 = *(_OWORD *)v86;
      v85[16] = v86[16];
      uint64_t v87 = v83[6];
      uint64_t v88 = &a1[v87];
      char v89 = &a2[v87];
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      v88[16] = v89[16];
      uint64_t v90 = v83[7];
      uint64_t v91 = &a1[v90];
      uint64_t v92 = &a2[v90];
      v91[4] = v92[4];
      *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
      uint64_t v93 = v83[8];
      uint64_t v94 = &a1[v93];
      uint64_t v95 = &a2[v93];
      v94[4] = v95[4];
      *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
      a1[v83[9]] = a2[v83[9]];
      a1[v83[10]] = a2[v83[10]];
      a1[v83[11]] = a2[v83[11]];
      a1[v83[12]] = a2[v83[12]];
      uint64_t v96 = v83[13];
      uint64_t v97 = &a1[v96];
      uint64_t v98 = &a2[v96];
      *(_DWORD *)uint64_t v97 = *(_DWORD *)v98;
      v97[4] = v98[4];
      uint64_t v99 = v83[14];
      uint64_t v100 = &a1[v99];
      char v101 = &a2[v99];
      *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
      v100[4] = v101[4];
      uint64_t v102 = v83[15];
      uint64_t v79 = &a1[v102];
      uint64_t v80 = &a2[v102];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
      {
LABEL_12:
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
      }
      else
      {
LABEL_23:
        v73(v79, v80, v71);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v79, 0, 1, v71);
      }
      goto LABEL_27;
    case 0x10u:
      uint64_t v103 = type metadata accessor for UUID();
      v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 32);
      v104(a1, a2, v103);
      uint64_t v105 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v104(&a1[v105[5]], &a2[v105[5]], v103);
      uint64_t v106 = v105[6];
      uint64_t v107 = &a1[v106];
      uint64_t v108 = &a2[v106];
      *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
      v107[4] = v108[4];
      uint64_t v109 = v105[7];
      uint64_t v110 = &a1[v109];
      char v111 = &a2[v109];
      *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
      v110[4] = v111[4];
      uint64_t v112 = v105[8];
      uint64_t v113 = &a1[v112];
      uint64_t v114 = &a2[v112];
      *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
      v113[16] = v114[16];
      a1[v105[9]] = a2[v105[9]];
      a1[v105[10]] = a2[v105[10]];
      a1[v105[11]] = a2[v105[11]];
      uint64_t v115 = v105[12];
      uint64_t v116 = &a1[v115];
      v117 = &a2[v115];
      v116[4] = v117[4];
      *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
      uint64_t v118 = v105[13];
      char v119 = &a1[v118];
      uint64_t v120 = &a2[v118];
      *(_DWORD *)char v119 = *(_DWORD *)v120;
      v119[4] = v120[4];
      goto LABEL_27;
    case 0x11u:
      uint64_t v121 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
      uint64_t v122 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      uint64_t v123 = v122[5];
      uint64_t v124 = &a1[v123];
      uint64_t v125 = &a2[v123];
      *(_DWORD *)uint64_t v124 = *(_DWORD *)v125;
      v124[4] = v125[4];
      uint64_t v126 = v122[6];
      char v127 = &a1[v126];
      uint64_t v128 = &a2[v126];
      *(_DWORD *)char v127 = *(_DWORD *)v128;
      v127[4] = v128[4];
      uint64_t v129 = v122[7];
      uint64_t v130 = &a1[v129];
      char v131 = &a2[v129];
      v130[16] = v131[16];
      *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
      uint64_t v132 = v122[8];
      uint64_t v133 = &a1[v132];
      uint64_t v134 = &a2[v132];
      v133[4] = v134[4];
      *(_DWORD *)uint64_t v133 = *(_DWORD *)v134;
      uint64_t v135 = v122[9];
      uint64_t v136 = &a1[v135];
      uint64_t v137 = &a2[v135];
      v136[16] = v137[16];
      *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
      a1[v122[10]] = a2[v122[10]];
      goto LABEL_27;
    case 0x12u:
      uint64_t v138 = type metadata accessor for UUID();
      int v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 32);
      v139(a1, a2, v138);
      uint64_t v140 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v139(&a1[v140[5]], &a2[v140[5]], v138);
      uint64_t v141 = v140[6];
      uint64_t v142 = &a1[v141];
      uint64_t v143 = &a2[v141];
      v139(&a1[v141], &a2[v141], v138);
      v144 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v145 = v144[5];
      uint64_t v146 = &v142[v145];
      uint64_t v147 = &v143[v145];
      *(_DWORD *)uint64_t v146 = *(_DWORD *)v147;
      v146[4] = v147[4];
      uint64_t v148 = v144[6];
      int v149 = &v142[v148];
      uint64_t v150 = &v143[v148];
      *(_DWORD *)int v149 = *(_DWORD *)v150;
      v149[4] = v150[4];
      v142[v144[7]] = v143[v144[7]];
      v142[v144[8]] = v143[v144[8]];
      v142[v144[9]] = v143[v144[9]];
      uint64_t v151 = v144[10];
      uint64_t v152 = &v142[v151];
      uint64_t v153 = &v143[v151];
      *(_DWORD *)uint64_t v152 = *(_DWORD *)v153;
      v152[4] = v153[4];
      v142[v144[11]] = v143[v144[11]];
      uint64_t v154 = v144[12];
      uint64_t v155 = &v142[v154];
      v156 = &v143[v154];
      v155[4] = v156[4];
      *(_DWORD *)uint64_t v155 = *(_DWORD *)v156;
      uint64_t v157 = v144[13];
      char v158 = &v142[v157];
      uint64_t v159 = &v143[v157];
      *(_DWORD *)char v158 = *(_DWORD *)v159;
      v158[4] = v159[4];
      v142[v144[14]] = v143[v144[14]];
      v142[v144[15]] = v143[v144[15]];
      uint64_t v160 = v140[7];
      uint64_t v161 = &a1[v160];
      char v162 = &a2[v160];
      v139(&a1[v160], v162, v138);
      uint64_t v163 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v164 = v163[5];
      uint64_t v165 = &v161[v164];
      char v166 = &v162[v164];
      *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
      v165[4] = v166[4];
      uint64_t v167 = v163[6];
      uint64_t v168 = &v161[v167];
      uint64_t v169 = &v162[v167];
      *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
      v168[4] = v169[4];
      v161[v163[7]] = v162[v163[7]];
      v161[v163[8]] = v162[v163[8]];
      v161[v163[9]] = v162[v163[9]];
      uint64_t v170 = v163[10];
      uint64_t v171 = &v161[v170];
      uint64_t v172 = &v162[v170];
      *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
      v171[4] = v172[4];
      v161[v163[11]] = v162[v163[11]];
      uint64_t v173 = v163[12];
      char v174 = &v161[v173];
      uint64_t v175 = &v162[v173];
      v174[4] = v175[4];
      *(_DWORD *)char v174 = *(_DWORD *)v175;
      uint64_t v176 = v163[13];
      uint64_t v177 = &v161[v176];
      uint64_t v178 = &v162[v176];
      *(_DWORD *)uint64_t v177 = *(_DWORD *)v178;
      v177[4] = v178[4];
      v161[v163[14]] = v162[v163[14]];
      v161[v163[15]] = v162[v163[15]];
      goto LABEL_27;
    case 0x13u:
      uint64_t v179 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32))(a1, a2, v179);
      uint64_t v180 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      uint64_t v181 = v180[5];
      uint64_t v182 = &a1[v181];
      uint64_t v183 = &a2[v181];
      *(_DWORD *)uint64_t v182 = *(_DWORD *)v183;
      v182[4] = v183[4];
      uint64_t v184 = v180[6];
      char v185 = &a1[v184];
      uint64_t v186 = &a2[v184];
      *(_DWORD *)char v185 = *(_DWORD *)v186;
      v185[4] = v186[4];
      a1[v180[7]] = a2[v180[7]];
      uint64_t v187 = v180[8];
      uint64_t v188 = &a1[v187];
      char v189 = &a2[v187];
      v188[16] = v189[16];
      *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
      goto LABEL_27;
    case 0x14u:
      uint64_t v190 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v190 - 8) + 32))(a1, a2, v190);
      uint64_t v191 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v191 + 20)] = *(_DWORD *)&a2[*(int *)(v191 + 20)];
      *(_DWORD *)&a1[*(int *)(v191 + 24)] = *(_DWORD *)&a2[*(int *)(v191 + 24)];
      goto LABEL_27;
    case 0x15u:
      uint64_t v192 = type metadata accessor for UUID();
      uint64_t v193 = *(void *)(v192 - 8);
      uint64_t v194 = *(void (**)(char *, char *, uint64_t))(v193 + 32);
      v194(a1, a2, v192);
      uint64_t v195 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v194(&a1[v195[5]], &a2[v195[5]], v192);
      *(_OWORD *)&a1[v195[6]] = *(_OWORD *)&a2[v195[6]];
      uint64_t v196 = v195[7];
      char v197 = &a1[v196];
      uint64_t v198 = &a2[v196];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(&a2[v196], 1, v192))
      {
        uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v197, v198, *(void *)(*(void *)(v199 - 8) + 64));
      }
      else
      {
        v194(v197, v198, v192);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v197, 0, 1, v192);
      }
      *(_OWORD *)&a1[v195[8]] = *(_OWORD *)&a2[v195[8]];
LABEL_27:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityActionSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
        a1[v7[6]] = a2[v7[6]];
        uint64_t v8 = v7[7];
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        v9[8] = v10[8];
        *(void *)uint64_t v9 = *(void *)v10;
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        a1[v7[10]] = a2[v7[10]];
        goto LABEL_28;
      case 1u:
        uint64_t v11 = type metadata accessor for UUID();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
        v12(a1, a2, v11);
        uint64_t v13 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v12(&a1[*(int *)(v13 + 20)], &a2[*(int *)(v13 + 20)], v11);
        goto LABEL_28;
      case 2u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = type metadata accessor for __RKEntityCustomActionArguments(0);
        *(_OWORD *)&a1[*(int *)(v15 + 20)] = *(_OWORD *)&a2[*(int *)(v15 + 20)];
        *(void *)&a1[*(int *)(v15 + 24)] = *(void *)&a2[*(int *)(v15 + 24)];
        goto LABEL_28;
      case 3u:
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
        uint64_t v17 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v18 = v17[5];
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
        v19[4] = v20[4];
        uint64_t v21 = v17[6];
        uint64_t v22 = &a1[v21];
        uint64_t v23 = &a2[v21];
        *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
        v22[4] = v23[4];
        a1[v17[7]] = a2[v17[7]];
        a1[v17[8]] = a2[v17[8]];
        goto LABEL_28;
      case 4u:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
        uint64_t v25 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v25 + 20)] = *(_DWORD *)&a2[*(int *)(v25 + 20)];
        uint64_t v26 = *(int *)(v25 + 24);
        uint64_t v27 = &a1[v26];
        char v28 = &a2[v26];
        v27[4] = v28[4];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        goto LABEL_28;
      case 7u:
        uint64_t v29 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
        uint64_t v30 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v31 = v30[5];
        char v32 = &a1[v31];
        uint64_t v33 = &a2[v31];
        *(_DWORD *)char v32 = *(_DWORD *)v33;
        v32[4] = v33[4];
        uint64_t v34 = v30[6];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        a1[v30[7]] = a2[v30[7]];
        a1[v30[8]] = a2[v30[8]];
        a1[v30[9]] = a2[v30[9]];
        uint64_t v37 = v30[10];
        char v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        *(_DWORD *)char v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        a1[v30[11]] = a2[v30[11]];
        uint64_t v40 = v30[12];
        uint64_t v41 = &a1[v40];
        uint64_t v42 = &a2[v40];
        v41[4] = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        uint64_t v43 = v30[13];
        uint64_t v44 = &a1[v43];
        char v45 = &a2[v43];
        *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
        v44[4] = v45[4];
        a1[v30[14]] = a2[v30[14]];
        a1[v30[15]] = a2[v30[15]];
        goto LABEL_28;
      case 8u:
        uint64_t v46 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(a1, a2, v46);
        uint64_t v47 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v48 = *(int *)(v47 + 20);
        char v49 = &a1[v48];
        uint64_t v50 = &a2[v48];
        *(_OWORD *)char v49 = *(_OWORD *)v50;
        v49[16] = v50[16];
        uint64_t v51 = *(int *)(v47 + 24);
        uint64_t v52 = &a1[v51];
        char v53 = &a2[v51];
        v52[16] = v53[16];
        *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
        goto LABEL_28;
      case 9u:
        uint64_t v54 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(a1, a2, v54);
        uint64_t v55 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v56 = v55[5];
        char v57 = &a1[v56];
        uint64_t v58 = &a2[v56];
        *(_DWORD *)char v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        uint64_t v59 = v55[6];
        uint64_t v60 = &a1[v59];
        char v61 = &a2[v59];
        *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
        v60[4] = v61[4];
        a1[v55[7]] = a2[v55[7]];
        a1[v55[8]] = a2[v55[8]];
        a1[v55[9]] = a2[v55[9]];
        uint64_t v62 = v55[10];
        uint64_t v63 = &a1[v62];
        uint64_t v64 = &a2[v62];
        *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
        v63[4] = v64[4];
        a1[v55[11]] = a2[v55[11]];
        uint64_t v65 = v55[12];
        uint64_t v66 = &a1[v65];
        char v67 = &a2[v65];
        v66[4] = v67[4];
        *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
        uint64_t v68 = v55[13];
        uint64_t v69 = &a1[v68];
        uint64_t v70 = &a2[v68];
        *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
        v69[4] = v70[4];
        a1[v55[14]] = a2[v55[14]];
        a1[v55[15]] = a2[v55[15]];
        goto LABEL_28;
      case 0xAu:
        uint64_t v71 = type metadata accessor for UUID();
        uint64_t v72 = *(void *)(v71 - 8);
        uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        v73(a1, a2, v71);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&a1[started[5]] = *(void *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(void *)&a1[started[7]] = *(void *)&a2[started[7]];
        *(void *)&a1[started[8]] = *(void *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        uint64_t v75 = started[13];
        uint64_t v76 = &a1[v75];
        char v77 = &a2[v75];
        *(void *)uint64_t v76 = *(void *)v77;
        v76[8] = v77[8];
        uint64_t v78 = started[14];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71)) {
          goto LABEL_13;
        }
        goto LABEL_24;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v82 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(a1, a2, v82);
        goto LABEL_28;
      case 0xEu:
        uint64_t v71 = type metadata accessor for UUID();
        uint64_t v72 = *(void *)(v71 - 8);
        uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        v73(a1, a2, v71);
        uint64_t v83 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v84 = v83[5];
        char v85 = &a1[v84];
        uint64_t v86 = &a2[v84];
        *(_OWORD *)char v85 = *(_OWORD *)v86;
        v85[16] = v86[16];
        uint64_t v87 = v83[6];
        uint64_t v88 = &a1[v87];
        char v89 = &a2[v87];
        *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
        v88[16] = v89[16];
        uint64_t v90 = v83[7];
        uint64_t v91 = &a1[v90];
        uint64_t v92 = &a2[v90];
        v91[4] = v92[4];
        *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
        uint64_t v93 = v83[8];
        uint64_t v94 = &a1[v93];
        uint64_t v95 = &a2[v93];
        v94[4] = v95[4];
        *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
        a1[v83[9]] = a2[v83[9]];
        a1[v83[10]] = a2[v83[10]];
        a1[v83[11]] = a2[v83[11]];
        a1[v83[12]] = a2[v83[12]];
        uint64_t v96 = v83[13];
        uint64_t v97 = &a1[v96];
        uint64_t v98 = &a2[v96];
        *(_DWORD *)uint64_t v97 = *(_DWORD *)v98;
        v97[4] = v98[4];
        uint64_t v99 = v83[14];
        uint64_t v100 = &a1[v99];
        char v101 = &a2[v99];
        *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
        v100[4] = v101[4];
        uint64_t v102 = v83[15];
        uint64_t v79 = &a1[v102];
        uint64_t v80 = &a2[v102];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
        {
LABEL_13:
          uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
LABEL_24:
          v73(v79, v80, v71);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v79, 0, 1, v71);
        }
        goto LABEL_28;
      case 0x10u:
        uint64_t v103 = type metadata accessor for UUID();
        v104 = *(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 32);
        v104(a1, a2, v103);
        uint64_t v105 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v104(&a1[v105[5]], &a2[v105[5]], v103);
        uint64_t v106 = v105[6];
        uint64_t v107 = &a1[v106];
        uint64_t v108 = &a2[v106];
        *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
        v107[4] = v108[4];
        uint64_t v109 = v105[7];
        uint64_t v110 = &a1[v109];
        char v111 = &a2[v109];
        *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
        v110[4] = v111[4];
        uint64_t v112 = v105[8];
        uint64_t v113 = &a1[v112];
        uint64_t v114 = &a2[v112];
        *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
        v113[16] = v114[16];
        a1[v105[9]] = a2[v105[9]];
        a1[v105[10]] = a2[v105[10]];
        a1[v105[11]] = a2[v105[11]];
        uint64_t v115 = v105[12];
        uint64_t v116 = &a1[v115];
        v117 = &a2[v115];
        v116[4] = v117[4];
        *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
        uint64_t v118 = v105[13];
        char v119 = &a1[v118];
        uint64_t v120 = &a2[v118];
        *(_DWORD *)char v119 = *(_DWORD *)v120;
        v119[4] = v120[4];
        goto LABEL_28;
      case 0x11u:
        uint64_t v121 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
        uint64_t v122 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v123 = v122[5];
        uint64_t v124 = &a1[v123];
        uint64_t v125 = &a2[v123];
        *(_DWORD *)uint64_t v124 = *(_DWORD *)v125;
        v124[4] = v125[4];
        uint64_t v126 = v122[6];
        char v127 = &a1[v126];
        uint64_t v128 = &a2[v126];
        *(_DWORD *)char v127 = *(_DWORD *)v128;
        v127[4] = v128[4];
        uint64_t v129 = v122[7];
        uint64_t v130 = &a1[v129];
        char v131 = &a2[v129];
        v130[16] = v131[16];
        *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
        uint64_t v132 = v122[8];
        uint64_t v133 = &a1[v132];
        uint64_t v134 = &a2[v132];
        v133[4] = v134[4];
        *(_DWORD *)uint64_t v133 = *(_DWORD *)v134;
        uint64_t v135 = v122[9];
        uint64_t v136 = &a1[v135];
        uint64_t v137 = &a2[v135];
        v136[16] = v137[16];
        *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
        a1[v122[10]] = a2[v122[10]];
        goto LABEL_28;
      case 0x12u:
        uint64_t v138 = type metadata accessor for UUID();
        int v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 32);
        v139(a1, a2, v138);
        uint64_t v140 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v139(&a1[v140[5]], &a2[v140[5]], v138);
        uint64_t v141 = v140[6];
        uint64_t v142 = &a1[v141];
        uint64_t v143 = &a2[v141];
        v139(&a1[v141], &a2[v141], v138);
        v144 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v145 = v144[5];
        uint64_t v146 = &v142[v145];
        uint64_t v147 = &v143[v145];
        *(_DWORD *)uint64_t v146 = *(_DWORD *)v147;
        v146[4] = v147[4];
        uint64_t v148 = v144[6];
        int v149 = &v142[v148];
        uint64_t v150 = &v143[v148];
        *(_DWORD *)int v149 = *(_DWORD *)v150;
        v149[4] = v150[4];
        v142[v144[7]] = v143[v144[7]];
        v142[v144[8]] = v143[v144[8]];
        v142[v144[9]] = v143[v144[9]];
        uint64_t v151 = v144[10];
        uint64_t v152 = &v142[v151];
        uint64_t v153 = &v143[v151];
        *(_DWORD *)uint64_t v152 = *(_DWORD *)v153;
        v152[4] = v153[4];
        v142[v144[11]] = v143[v144[11]];
        uint64_t v154 = v144[12];
        uint64_t v155 = &v142[v154];
        v156 = &v143[v154];
        v155[4] = v156[4];
        *(_DWORD *)uint64_t v155 = *(_DWORD *)v156;
        uint64_t v157 = v144[13];
        char v158 = &v142[v157];
        uint64_t v159 = &v143[v157];
        *(_DWORD *)char v158 = *(_DWORD *)v159;
        v158[4] = v159[4];
        v142[v144[14]] = v143[v144[14]];
        v142[v144[15]] = v143[v144[15]];
        uint64_t v160 = v140[7];
        uint64_t v161 = &a1[v160];
        char v162 = &a2[v160];
        v139(&a1[v160], v162, v138);
        uint64_t v163 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v164 = v163[5];
        uint64_t v165 = &v161[v164];
        char v166 = &v162[v164];
        *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
        v165[4] = v166[4];
        uint64_t v167 = v163[6];
        uint64_t v168 = &v161[v167];
        uint64_t v169 = &v162[v167];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        v168[4] = v169[4];
        v161[v163[7]] = v162[v163[7]];
        v161[v163[8]] = v162[v163[8]];
        v161[v163[9]] = v162[v163[9]];
        uint64_t v170 = v163[10];
        uint64_t v171 = &v161[v170];
        uint64_t v172 = &v162[v170];
        *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v161[v163[11]] = v162[v163[11]];
        uint64_t v173 = v163[12];
        char v174 = &v161[v173];
        uint64_t v175 = &v162[v173];
        v174[4] = v175[4];
        *(_DWORD *)char v174 = *(_DWORD *)v175;
        uint64_t v176 = v163[13];
        uint64_t v177 = &v161[v176];
        uint64_t v178 = &v162[v176];
        *(_DWORD *)uint64_t v177 = *(_DWORD *)v178;
        v177[4] = v178[4];
        v161[v163[14]] = v162[v163[14]];
        v161[v163[15]] = v162[v163[15]];
        goto LABEL_28;
      case 0x13u:
        uint64_t v179 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v179 - 8) + 32))(a1, a2, v179);
        uint64_t v180 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v181 = v180[5];
        uint64_t v182 = &a1[v181];
        uint64_t v183 = &a2[v181];
        *(_DWORD *)uint64_t v182 = *(_DWORD *)v183;
        v182[4] = v183[4];
        uint64_t v184 = v180[6];
        char v185 = &a1[v184];
        uint64_t v186 = &a2[v184];
        *(_DWORD *)char v185 = *(_DWORD *)v186;
        v185[4] = v186[4];
        a1[v180[7]] = a2[v180[7]];
        uint64_t v187 = v180[8];
        uint64_t v188 = &a1[v187];
        char v189 = &a2[v187];
        v188[16] = v189[16];
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
        goto LABEL_28;
      case 0x14u:
        uint64_t v190 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v190 - 8) + 32))(a1, a2, v190);
        uint64_t v191 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v191 + 20)] = *(_DWORD *)&a2[*(int *)(v191 + 20)];
        *(_DWORD *)&a1[*(int *)(v191 + 24)] = *(_DWORD *)&a2[*(int *)(v191 + 24)];
        goto LABEL_28;
      case 0x15u:
        uint64_t v192 = type metadata accessor for UUID();
        uint64_t v193 = *(void *)(v192 - 8);
        uint64_t v194 = *(void (**)(char *, char *, uint64_t))(v193 + 32);
        v194(a1, a2, v192);
        uint64_t v195 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v194(&a1[v195[5]], &a2[v195[5]], v192);
        *(_OWORD *)&a1[v195[6]] = *(_OWORD *)&a2[v195[6]];
        uint64_t v196 = v195[7];
        char v197 = &a1[v196];
        uint64_t v198 = &a2[v196];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(&a2[v196], 1, v192))
        {
          uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v197, v198, *(void *)(*(void *)(v199 - 8) + 64));
        }
        else
        {
          v194(v197, v198, v192);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v197, 0, 1, v192);
        }
        *(_OWORD *)&a1[v195[8]] = *(_OWORD *)&a2[v195[8]];
LABEL_28:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityTriggerSpecification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityTriggerSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for __RKEntityActionSpecification()
{
  uint64_t result = type metadata accessor for __RKEntityAudioActionArguments(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for __RKChangeSceneActionArguments(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for __RKEntityCustomActionArguments(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for __RKEntityEmphasisActionArguments(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for __RKEntityFadeActionArguments(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for __RKEntityHideActionArguments(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for __RKEntityForceActionArguments(319);
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for __RKEntityShowActionArguments(319);
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for __RKEntityStartAnimateActionArguments(319);
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = type metadata accessor for UUID();
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(319);
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for __RKEntityOrbitEntityActionArguments(319);
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for __RKEntityLookAtCameraActionArguments(319);
                          if (v13 <= 0x3F)
                          {
                            uint64_t result = type metadata accessor for __RKEntitySwapEntityActionArguments(319);
                            if (v14 <= 0x3F)
                            {
                              uint64_t result = type metadata accessor for __RKEntitySpinActionArguments(319);
                              if (v15 <= 0x3F)
                              {
                                uint64_t result = type metadata accessor for __RKEntitySetOpacityActionArguments(319);
                                if (v16 <= 0x3F)
                                {
                                  uint64_t result = type metadata accessor for __RKEntityPlayTimelineActionArguments(319);
                                  if (v17 <= 0x3F)
                                  {
                                    swift_initEnumMetadataMultiPayload();
                                    return 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionSpecification.Name(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionSpecification.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E64DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionSpecification.Name()
{
  return &type metadata for __RKEntityActionSpecification.Name;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder()
{
  return &type metadata for __RKEntityGroupActionOrder;
}

uint64_t initializeWithCopy for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionGroupArguments(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionGroupArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionGroupArguments()
{
  return &type metadata for __RKEntityActionGroupArguments;
}

ValueMetadata *type metadata accessor for __RKWaitActionArguments()
{
  return &type metadata for __RKWaitActionArguments;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityCustomActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityCustomActionArguments(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata completion function for __RKEntityCustomActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

{
  uint64_t result;
  unint64_t v1;

  __n128 result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKChangeSceneActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E65758);
}

uint64_t sub_227E65758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E657D8);
}

uint64_t sub_227E657D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for __RKChangeSceneActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for __RKFadeSceneActionArguments(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for __RKFadeSceneActionArguments(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for __RKFadeSceneActionArguments()
{
  return &type metadata for __RKFadeSceneActionArguments;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityFadeActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t assignWithTake for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm);
}

uint64_t storeEnumTagSinglePayload for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm);
}

uint64_t type metadata completion function for __RKEntityFadeActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t getEnumTagSinglePayload for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_0);
}

uint64_t storeEnumTagSinglePayload for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_0);
}

char *initializeBufferWithCopyOfBuffer for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[6];
    *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
    a1[v10] = a2[v10];
    uint64_t v11 = a3[8];
    *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
    *(void *)&a1[v11] = *(void *)&a2[v11];
    uint64_t v12 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v12] = a2[v12];
    uint64_t v13 = a3[12];
    *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
    a1[v13] = a2[v13];
    uint64_t v14 = a3[13];
    uint64_t v15 = a3[14];
    unint64_t v16 = &a1[v14];
    unint64_t v17 = &a2[v14];
    *(void *)unint64_t v16 = *(void *)v17;
    uint64_t v18 = &a1[v15];
    v16[8] = v17[8];
    uint64_t v19 = &a2[v15];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v9(v18, v19, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityStartAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 56);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *initializeWithCopy for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[13];
  uint64_t v14 = a3[14];
  uint64_t v15 = &a1[v13];
  unint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  unint64_t v17 = &a1[v14];
  v15[8] = v16[8];
  uint64_t v18 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v9 = a3[13];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  char v12 = v11[8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v12;
  uint64_t v13 = a3[14];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  unint64_t v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v17 = v16(&a1[v13], 1, v6);
  int v18 = v16(v15, 1, v6);
  if (!v17)
  {
    if (!v18)
    {
      v8(v14, v15, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  return a1;
}

char *initializeWithTake for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[13];
  uint64_t v14 = a3[14];
  uint64_t v15 = &a1[v13];
  unint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  int v17 = &a1[v14];
  v15[8] = v16[8];
  int v18 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[13];
  uint64_t v14 = a3[14];
  uint64_t v15 = &a1[v13];
  unint64_t v16 = &a2[v13];
  *(void *)uint64_t v15 = *(void *)v16;
  int v17 = &a1[v14];
  v15[8] = v16[8];
  int v18 = &a2[v14];
  uint64_t v19 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v20 = v19(&a1[v14], 1, v6);
  int v21 = v19(v18, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      v8(v17, v18, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityStartAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E667C8);
}

uint64_t sub_227E667C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 56);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityStartAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E66918);
}

uint64_t sub_227E66918(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 56);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for __RKEntityStartAnimateActionArguments()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t getEnumTagSinglePayload for __RKEntityStopAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityStopAnimateActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_1);
}

uint64_t initializeBufferWithCopyOfBuffer for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t initializeWithCopy for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_2);
}

uint64_t storeEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_2);
}

uint64_t type metadata completion function for __RKEntityToggleAnimateActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_79Tm);
}

uint64_t storeEnumTagSinglePayload for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_80Tm);
}

void *initializeBufferWithCopyOfBuffer for __RKEntityShowActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)unsigned int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    unint64_t v16 = (char *)a1 + v15;
    int v17 = (char *)a2 + v15;
    *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v19 = (char *)a1 + v18;
    int v20 = (char *)a2 + v18;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    uint64_t v21 = a3[13];
    uint64_t v22 = a3[14];
    uint64_t v23 = (char *)a1 + v21;
    uint64_t v24 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
    *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a3[13];
  uint64_t v21 = a3[14];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithCopy for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v14 = a3[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (int *)(a2 + v14);
  int v17 = *v16;
  *(unsigned char *)(v15 + 4) = *((unsigned char *)v16 + 4);
  *(_DWORD *)uint64_t v15 = v17;
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (int *)(a2 + v18);
  int v21 = *v20;
  *(unsigned char *)(v19 + 4) = *((unsigned char *)v20 + 4);
  *(_DWORD *)uint64_t v19 = v21;
  uint64_t v22 = a3[13];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  LOBYTE(v21) = *(unsigned char *)(v24 + 4);
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = v21;
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a3[13];
  uint64_t v21 = a3[14];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  uint64_t v20 = a3[13];
  uint64_t v21 = a3[14];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityHideActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_79Tm_0);
}

uint64_t storeEnumTagSinglePayload for __RKEntityHideActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_80Tm_0);
}

uint64_t type metadata completion function for __RKEntityShowActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for __RKEntityEmphasisActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t assignWithCopy for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E67A1C);
}

uint64_t sub_227E67A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E67AF8);
}

uint64_t sub_227E67AF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 3;
  }
  return result;
}

uint64_t type metadata completion function for __RKEntityEmphasisActionArguments()
{
  return type metadata completion function for __RKEntityEmphasisActionArguments();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for __RKEntityAudioActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (void *)((char *)a1 + v8);
    unsigned int v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *int v10 = *v11;
    v10[1] = v12;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    v15[8] = v16[8];
    *(void *)uint64_t v15 = *(void *)v16;
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v17 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityAudioActionArguments(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  int v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v16 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  char v13 = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  uint64_t v15 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E680A8);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E68184);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for __RKEntityAudioActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v34 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = &a1[v10];
    uint64_t v13 = &a2[v10];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    uint64_t v14 = &a1[v11];
    uint64_t v15 = &a2[v11];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = &a1[v16];
    uint64_t v19 = &a2[v16];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = &a1[v17];
    uint64_t v21 = &a2[v17];
    v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    uint64_t v22 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v22] = a2[v22];
    uint64_t v23 = a3[12];
    a1[a3[11]] = a2[a3[11]];
    a1[v23] = a2[v23];
    uint64_t v24 = a3[13];
    uint64_t v25 = a3[14];
    uint64_t v26 = &a1[v24];
    uint64_t v27 = &a2[v24];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    char v28 = &a1[v25];
    uint64_t v29 = &a2[v25];
    *(_DWORD *)char v28 = *(_DWORD *)v29;
    uint64_t v30 = a3[15];
    uint64_t v31 = &a1[v30];
    v28[4] = v29[4];
    char v32 = &a2[v30];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v7))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v9(v31, v32, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityTransformActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 60);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *initializeWithCopy for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  unsigned char v11[16] = v12[16];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  unsigned char v13[16] = v14[16];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  uint64_t v19 = &a1[v16];
  uint64_t v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  uint64_t v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[13];
  uint64_t v24 = a3[14];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  uint64_t v27 = &a1[v24];
  char v28 = &a2[v24];
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  uint64_t v29 = a3[15];
  uint64_t v30 = &a1[v29];
  v27[4] = v28[4];
  uint64_t v31 = &a2[v29];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v31, 1, v6))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v8(v30, v31, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  long long v12 = *(_OWORD *)v11;
  v10[16] = v11[16];
  *(_OWORD *)uint64_t v10 = v12;
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  char v16 = v15[16];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  v14[16] = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  char v20 = v19[4];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  char v24 = v23[4];
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  v22[4] = v24;
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v25 = a3[13];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = *(_DWORD *)v27;
  v26[4] = v27[4];
  *(_DWORD *)uint64_t v26 = v28;
  uint64_t v29 = a3[14];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  LOBYTE(v28) = v31[4];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  v30[4] = v28;
  uint64_t v32 = a3[15];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v35 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v36 = v35(&a1[v32], 1, v6);
  int v37 = v35(v34, 1, v6);
  if (!v36)
  {
    if (!v37)
    {
      v8(v33, v34, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v33, v34, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v33, 0, 1, v6);
  return a1;
}

char *initializeWithTake for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  long long v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  unsigned char v11[16] = v12[16];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  unsigned char v13[16] = v14[16];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  uint64_t v19 = &a1[v16];
  char v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  uint64_t v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[13];
  uint64_t v24 = a3[14];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  uint64_t v27 = &a1[v24];
  int v28 = &a2[v24];
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  uint64_t v29 = a3[15];
  uint64_t v30 = &a1[v29];
  v27[4] = v28[4];
  uint64_t v31 = &a2[v29];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v31, 1, v6))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v8(v30, v31, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  long long v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  unsigned char v11[16] = v12[16];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  unsigned char v13[16] = v14[16];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  uint64_t v19 = &a1[v16];
  char v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  uint64_t v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  uint64_t v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  uint64_t v23 = a3[13];
  uint64_t v24 = a3[14];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  uint64_t v27 = &a1[v24];
  int v28 = &a2[v24];
  *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
  uint64_t v29 = a3[15];
  uint64_t v30 = &a1[v29];
  v27[4] = v28[4];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v33 = v32(&a1[v29], 1, v6);
  int v34 = v32(v31, 1, v6);
  if (!v33)
  {
    if (!v34)
    {
      v8(v30, v31, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
    goto LABEL_6;
  }
  if (v34)
  {
LABEL_6:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v30, v31, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityTransformActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E68F84);
}

uint64_t sub_227E68F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 253)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 2u) {
      int v10 = 2;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    }
    unsigned int v11 = v10 - 2;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 2u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 60);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityTransformActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E690CC);
}

uint64_t sub_227E690CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 253)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 60);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for __RKEntityTransformActionArguments()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityForceActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_OWORD *)int v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  return a1;
}

uint64_t assignWithCopy for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  return a1;
}

uint64_t initializeWithTake for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  return a1;
}

uint64_t assignWithTake for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_3);
}

uint64_t storeEnumTagSinglePayload for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_3);
}

uint64_t type metadata completion function for __RKEntityForceActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntitySwapEntityActionArguments(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v47 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    uint64_t v12 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
    uint64_t v13 = v12[5];
    char v14 = &v10[v13];
    uint64_t v15 = &v11[v13];
    *(_DWORD *)char v14 = *(_DWORD *)v15;
    v14[4] = v15[4];
    uint64_t v16 = v12[6];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    v10[v12[7]] = v11[v12[7]];
    v10[v12[8]] = v11[v12[8]];
    v10[v12[9]] = v11[v12[9]];
    uint64_t v19 = v12[10];
    char v20 = &v10[v19];
    uint64_t v21 = &v11[v19];
    *(_DWORD *)char v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    v10[v12[11]] = v11[v12[11]];
    uint64_t v22 = v12[12];
    uint64_t v23 = &v10[v22];
    uint64_t v24 = &v11[v22];
    v23[4] = v24[4];
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    uint64_t v25 = v12[13];
    uint64_t v26 = &v10[v25];
    uint64_t v27 = &v11[v25];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    v10[v12[14]] = v11[v12[14]];
    v10[v12[15]] = v11[v12[15]];
    uint64_t v28 = a3[7];
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    v8((uint64_t *)((char *)a1 + v28), (uint64_t *)v30, v7);
    uint64_t v31 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
    uint64_t v32 = v31[5];
    int v33 = &v29[v32];
    int v34 = &v30[v32];
    *(_DWORD *)int v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    uint64_t v35 = v31[6];
    int v36 = &v29[v35];
    int v37 = &v30[v35];
    *(_DWORD *)int v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    v29[v31[7]] = v30[v31[7]];
    v29[v31[8]] = v30[v31[8]];
    v29[v31[9]] = v30[v31[9]];
    uint64_t v38 = v31[10];
    uint64_t v39 = &v29[v38];
    uint64_t v40 = &v30[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v29[v31[11]] = v30[v31[11]];
    uint64_t v41 = v31[12];
    uint64_t v42 = &v29[v41];
    uint64_t v43 = &v30[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v31[13];
    char v45 = &v29[v44];
    uint64_t v46 = &v30[v44];
    *(_DWORD *)char v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    v29[v31[14]] = v30[v31[14]];
    v29[v31[15]] = v30[v31[15]];
  }
  return a1;
}

uint64_t destroy for __RKEntitySwapEntityActionArguments(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  v7(a1 + a2[5], v4);
  v7(a1 + a2[6], v4);
  uint64_t v5 = a1 + a2[7];

  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v4);
}

uint64_t initializeWithCopy for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  uint64_t v15 = v11[6];
  uint64_t v16 = v9 + v15;
  uint64_t v17 = v10 + v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  *(unsigned char *)(v9 + v11[8]) = *(unsigned char *)(v10 + v11[8]);
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v18 = v11[10];
  uint64_t v19 = v9 + v18;
  uint64_t v20 = v10 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  *(unsigned char *)(v9 + v11[11]) = *(unsigned char *)(v10 + v11[11]);
  uint64_t v21 = v11[12];
  uint64_t v22 = v9 + v21;
  uint64_t v23 = v10 + v21;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  uint64_t v24 = v11[13];
  uint64_t v25 = v9 + v24;
  uint64_t v26 = v10 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v9 + v11[14]) = *(unsigned char *)(v10 + v11[14]);
  *(unsigned char *)(v9 + v11[15]) = *(unsigned char *)(v10 + v11[15]);
  uint64_t v27 = a3[7];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  uint64_t v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v31 = v30[5];
  uint64_t v32 = v28 + v31;
  uint64_t v33 = v29 + v31;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = v30[6];
  uint64_t v35 = v28 + v34;
  uint64_t v36 = v29 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  *(unsigned char *)(v28 + v30[7]) = *(unsigned char *)(v29 + v30[7]);
  *(unsigned char *)(v28 + v30[8]) = *(unsigned char *)(v29 + v30[8]);
  *(unsigned char *)(v28 + v30[9]) = *(unsigned char *)(v29 + v30[9]);
  uint64_t v37 = v30[10];
  uint64_t v38 = v28 + v37;
  uint64_t v39 = v29 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  *(unsigned char *)(v28 + v30[11]) = *(unsigned char *)(v29 + v30[11]);
  uint64_t v40 = v30[12];
  uint64_t v41 = v28 + v40;
  uint64_t v42 = v29 + v40;
  *(unsigned char *)(v41 + 4) = *(unsigned char *)(v42 + 4);
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  uint64_t v43 = v30[13];
  uint64_t v44 = v28 + v43;
  uint64_t v45 = v29 + v43;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(unsigned char *)(v44 + 4) = *(unsigned char *)(v45 + 4);
  *(unsigned char *)(v28 + v30[14]) = *(unsigned char *)(v29 + v30[14]);
  *(unsigned char *)(v28 + v30[15]) = *(unsigned char *)(v29 + v30[15]);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  char v15 = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = v15;
  uint64_t v16 = v11[6];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  char v19 = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = v19;
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  *(unsigned char *)(v9 + v11[8]) = *(unsigned char *)(v10 + v11[8]);
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v20 = v11[10];
  uint64_t v21 = v9 + v20;
  uint64_t v22 = v10 + v20;
  char v23 = *(unsigned char *)(v22 + 4);
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = v23;
  *(unsigned char *)(v9 + v11[11]) = *(unsigned char *)(v10 + v11[11]);
  uint64_t v24 = v11[12];
  uint64_t v25 = v9 + v24;
  uint64_t v26 = v10 + v24;
  char v27 = *(unsigned char *)(v26 + 4);
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = v27;
  uint64_t v28 = v11[13];
  uint64_t v29 = v9 + v28;
  uint64_t v30 = v10 + v28;
  char v31 = *(unsigned char *)(v30 + 4);
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = v31;
  *(unsigned char *)(v9 + v11[14]) = *(unsigned char *)(v10 + v11[14]);
  *(unsigned char *)(v9 + v11[15]) = *(unsigned char *)(v10 + v11[15]);
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  v7(a1 + v32, v34, v6);
  uint64_t v35 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v36 = v35[5];
  uint64_t v37 = v33 + v36;
  uint64_t v38 = v34 + v36;
  char v39 = *(unsigned char *)(v38 + 4);
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = v39;
  uint64_t v40 = v35[6];
  uint64_t v41 = v33 + v40;
  uint64_t v42 = v34 + v40;
  char v43 = *(unsigned char *)(v42 + 4);
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  *(unsigned char *)(v41 + 4) = v43;
  *(unsigned char *)(v33 + v35[7]) = *(unsigned char *)(v34 + v35[7]);
  *(unsigned char *)(v33 + v35[8]) = *(unsigned char *)(v34 + v35[8]);
  *(unsigned char *)(v33 + v35[9]) = *(unsigned char *)(v34 + v35[9]);
  uint64_t v44 = v35[10];
  uint64_t v45 = v33 + v44;
  uint64_t v46 = v34 + v44;
  char v47 = *(unsigned char *)(v46 + 4);
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(unsigned char *)(v45 + 4) = v47;
  *(unsigned char *)(v33 + v35[11]) = *(unsigned char *)(v34 + v35[11]);
  uint64_t v48 = v35[12];
  uint64_t v49 = v33 + v48;
  uint64_t v50 = v34 + v48;
  char v51 = *(unsigned char *)(v50 + 4);
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  *(unsigned char *)(v49 + 4) = v51;
  uint64_t v52 = v35[13];
  uint64_t v53 = v33 + v52;
  uint64_t v54 = v34 + v52;
  char v55 = *(unsigned char *)(v54 + 4);
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(unsigned char *)(v53 + 4) = v55;
  *(unsigned char *)(v33 + v35[14]) = *(unsigned char *)(v34 + v35[14]);
  *(unsigned char *)(v33 + v35[15]) = *(unsigned char *)(v34 + v35[15]);
  return a1;
}

uint64_t initializeWithTake for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  uint64_t v15 = v11[6];
  uint64_t v16 = v9 + v15;
  uint64_t v17 = v10 + v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  *(unsigned char *)(v9 + v11[8]) = *(unsigned char *)(v10 + v11[8]);
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v18 = v11[10];
  uint64_t v19 = v9 + v18;
  uint64_t v20 = v10 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  *(unsigned char *)(v9 + v11[11]) = *(unsigned char *)(v10 + v11[11]);
  uint64_t v21 = v11[12];
  uint64_t v22 = v9 + v21;
  uint64_t v23 = v10 + v21;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  uint64_t v24 = v11[13];
  uint64_t v25 = v9 + v24;
  uint64_t v26 = v10 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v9 + v11[14]) = *(unsigned char *)(v10 + v11[14]);
  *(unsigned char *)(v9 + v11[15]) = *(unsigned char *)(v10 + v11[15]);
  uint64_t v27 = a3[7];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  uint64_t v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v31 = v30[5];
  uint64_t v32 = v28 + v31;
  uint64_t v33 = v29 + v31;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = v30[6];
  uint64_t v35 = v28 + v34;
  uint64_t v36 = v29 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  *(unsigned char *)(v28 + v30[7]) = *(unsigned char *)(v29 + v30[7]);
  *(unsigned char *)(v28 + v30[8]) = *(unsigned char *)(v29 + v30[8]);
  *(unsigned char *)(v28 + v30[9]) = *(unsigned char *)(v29 + v30[9]);
  uint64_t v37 = v30[10];
  uint64_t v38 = v28 + v37;
  uint64_t v39 = v29 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  *(unsigned char *)(v28 + v30[11]) = *(unsigned char *)(v29 + v30[11]);
  uint64_t v40 = v30[12];
  uint64_t v41 = v28 + v40;
  uint64_t v42 = v29 + v40;
  *(unsigned char *)(v41 + 4) = *(unsigned char *)(v42 + 4);
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  uint64_t v43 = v30[13];
  uint64_t v44 = v28 + v43;
  uint64_t v45 = v29 + v43;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(unsigned char *)(v44 + 4) = *(unsigned char *)(v45 + 4);
  *(unsigned char *)(v28 + v30[14]) = *(unsigned char *)(v29 + v30[14]);
  *(unsigned char *)(v28 + v30[15]) = *(unsigned char *)(v29 + v30[15]);
  return a1;
}

uint64_t assignWithTake for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  uint64_t v15 = v11[6];
  uint64_t v16 = v9 + v15;
  uint64_t v17 = v10 + v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(v9 + v11[7]) = *(unsigned char *)(v10 + v11[7]);
  *(unsigned char *)(v9 + v11[8]) = *(unsigned char *)(v10 + v11[8]);
  *(unsigned char *)(v9 + v11[9]) = *(unsigned char *)(v10 + v11[9]);
  uint64_t v18 = v11[10];
  uint64_t v19 = v9 + v18;
  uint64_t v20 = v10 + v18;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = *(unsigned char *)(v20 + 4);
  *(unsigned char *)(v9 + v11[11]) = *(unsigned char *)(v10 + v11[11]);
  uint64_t v21 = v11[12];
  uint64_t v22 = v9 + v21;
  uint64_t v23 = v10 + v21;
  *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  uint64_t v24 = v11[13];
  uint64_t v25 = v9 + v24;
  uint64_t v26 = v10 + v24;
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v9 + v11[14]) = *(unsigned char *)(v10 + v11[14]);
  *(unsigned char *)(v9 + v11[15]) = *(unsigned char *)(v10 + v11[15]);
  uint64_t v27 = a3[7];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  uint64_t v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v31 = v30[5];
  uint64_t v32 = v28 + v31;
  uint64_t v33 = v29 + v31;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = v30[6];
  uint64_t v35 = v28 + v34;
  uint64_t v36 = v29 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  *(unsigned char *)(v28 + v30[7]) = *(unsigned char *)(v29 + v30[7]);
  *(unsigned char *)(v28 + v30[8]) = *(unsigned char *)(v29 + v30[8]);
  *(unsigned char *)(v28 + v30[9]) = *(unsigned char *)(v29 + v30[9]);
  uint64_t v37 = v30[10];
  uint64_t v38 = v28 + v37;
  uint64_t v39 = v29 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  *(unsigned char *)(v28 + v30[11]) = *(unsigned char *)(v29 + v30[11]);
  uint64_t v40 = v30[12];
  uint64_t v41 = v28 + v40;
  uint64_t v42 = v29 + v40;
  *(unsigned char *)(v41 + 4) = *(unsigned char *)(v42 + 4);
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  uint64_t v43 = v30[13];
  uint64_t v44 = v28 + v43;
  uint64_t v45 = v29 + v43;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(unsigned char *)(v44 + 4) = *(unsigned char *)(v45 + 4);
  *(unsigned char *)(v28 + v30[14]) = *(unsigned char *)(v29 + v30[14]);
  *(unsigned char *)(v28 + v30[15]) = *(unsigned char *)(v29 + v30[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6A520);
}

uint64_t sub_227E6A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 28);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6A680);
}

uint64_t sub_227E6A680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 28);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata completion function for __RKEntitySwapEntityActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for __RKEntityHideActionArguments(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for __RKEntityShowActionArguments(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for __RKEntitySpinActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    v15[16] = v16[16];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (long long *)(a2 + v14);
  long long v17 = *v16;
  *(unsigned char *)(v15 + 16) = *((unsigned char *)v16 + 16);
  *(_OWORD *)uint64_t v15 = v17;
  return a1;
}

uint64_t initializeWithTake for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  return a1;
}

uint64_t assignWithTake for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6AD30);
}

uint64_t sub_227E6AD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 2u) {
      int v10 = 2;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 2;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 2u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6AE0C);
}

uint64_t sub_227E6AE0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for __RKEntitySpinActionArguments()
{
  return type metadata completion function for __RKEntityEmphasisActionArguments();
}

void *initializeBufferWithCopyOfBuffer for __RKEntityOrbitEntityActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    unsigned int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)unsigned int v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[8];
    uint64_t v16 = a3[9];
    long long v17 = (char *)a1 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(_OWORD *)long long v17 = *(_OWORD *)v18;
    v17[16] = v18[16];
    *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v19 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[12];
    uint64_t v21 = a3[13];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    uint64_t v24 = (char *)a1 + v21;
    uint64_t v25 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
  }
  return a1;
}

uint64_t destroy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t initializeWithCopy for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (int *)(a2 + v8);
  int v11 = *v10;
  *(unsigned char *)(v9 + 4) = *((unsigned char *)v10 + 4);
  *(_DWORD *)uint64_t v9 = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  LOBYTE(v11) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = v11;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  LOBYTE(v11) = *(unsigned char *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = v11;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = (int *)(a2 + v18);
  int v21 = *v20;
  *(unsigned char *)(v19 + 4) = *((unsigned char *)v20 + 4);
  *(_DWORD *)uint64_t v19 = v21;
  uint64_t v22 = a3[13];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  LOBYTE(v21) = *(unsigned char *)(v24 + 4);
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = v21;
  return a1;
}

uint64_t initializeWithTake for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  return a1;
}

uint64_t assignWithTake for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6B6B4);
}

uint64_t __swift_get_extra_inhabitant_index_79Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6B7A8);
}

uint64_t __swift_store_extra_inhabitant_index_80Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for __RKEntityOrbitEntityActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for __RKEntityLookAtCameraActionArguments(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(_DWORD *)unsigned int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  return a1;
}

uint64_t assignWithCopy for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 4);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = v10;
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  LOBYTE(v10) = *(unsigned char *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = v10;
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  return a1;
}

uint64_t assignWithTake for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6BE78);
}

uint64_t sub_227E6BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6BF68);
}

uint64_t sub_227E6BF68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 40)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata completion function for __RKEntityLookAtCameraActionArguments()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntitySetOpacityActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_DWORD *)((char *)a1 + v8) = *(_DWORD *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for __RKEntityFadeActionArguments(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + *(int *)(a3 + 24)) = *(_DWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6C434);
}

uint64_t __swift_get_extra_inhabitant_index_64Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6C4B8);
}

uint64_t __swift_store_extra_inhabitant_index_65Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for __RKEntitySetOpacityActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityPlayTimelineActionArguments(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    __dst = (char *)a1 + v11;
    uint64_t v15 = (char *)a2 + v11;
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    if (v16(v15, 1, v7))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)__dst, (uint64_t *)v15, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
    }
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = a3[7];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  __dst = &a1[v10];
  uint64_t v14 = &a2[v10];
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  if (v15(v14, 1, v6))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(__dst, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(__dst, v14, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v6);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v16 = v15(&a1[v12], 1, v6);
  int v17 = v15(v14, 1, v6);
  if (!v16)
  {
    if (!v17)
    {
      v8(v13, v14, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_7:
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

uint64_t assignWithTake for __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3;
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  int v16 = (const void *)(a2 + v14);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v18 = v17(a1 + v14, 1, v6);
  int v19 = v17((uint64_t)v16, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v15, (uint64_t)v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v15, v16, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
LABEL_7:
  uint64_t v21 = v27[8];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E6D08C);
}

uint64_t sub_227E6D08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E6D1D4);
}

uint64_t sub_227E6D1D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for __RKEntityPlayTimelineActionArguments()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for __RKEntityInteractionSpecification(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for __RKEntityTriggerSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v9 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v9 + 48));
        *((unsigned char *)a1 + *(int *)(v9 + 64)) = *((unsigned char *)a2 + *(int *)(v9 + 64));
        goto LABEL_11;
      case 1u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        goto LABEL_11;
      case 2u:
        uint64_t v12 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(void *)((char *)a1 + *(int *)(v13 + 48)) = *(void *)((char *)a2 + *(int *)(v13 + 48));
        *(void *)((char *)a1 + *(int *)(v13 + 64)) = *(void *)((char *)a2 + *(int *)(v13 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    uint64_t v16 = *(int *)(a3 + 20);
    int v17 = (char *)a1 + v16;
    int v18 = (char *)a2 + v16;
    uint64_t v238 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
        uint64_t v20 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = &v17[v21];
        uint64_t v23 = (uint64_t *)&v18[v21];
        uint64_t v25 = *v23;
        uint64_t v24 = v23[1];
        *uint64_t v22 = v25;
        v22[1] = v24;
        v17[v20[6]] = v18[v20[6]];
        uint64_t v26 = v20[7];
        uint64_t v27 = &v17[v26];
        uint64_t v28 = &v18[v26];
        v27[8] = v28[8];
        *(void *)uint64_t v27 = *(void *)v28;
        v17[v20[8]] = v18[v20[8]];
        v17[v20[9]] = v18[v20[9]];
        v17[v20[10]] = v18[v20[10]];
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 1u:
        uint64_t v29 = type metadata accessor for UUID();
        uint64_t v30 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 16);
        v30(v17, v18, v29);
        uint64_t v31 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v30(&v17[*(int *)(v31 + 20)], &v18[*(int *)(v31 + 20)], v29);
        goto LABEL_39;
      case 2u:
        uint64_t v32 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 16))(v17, v18, v32);
        uint64_t v33 = type metadata accessor for __RKEntityCustomActionArguments(0);
        uint64_t v34 = *(int *)(v33 + 20);
        uint64_t v35 = &v17[v34];
        uint64_t v36 = (uint64_t *)&v18[v34];
        uint64_t v38 = *v36;
        uint64_t v37 = v36[1];
        void *v35 = v38;
        v35[1] = v37;
        *(void *)&v17[*(int *)(v33 + 24)] = *(void *)&v18[*(int *)(v33 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 3u:
        uint64_t v39 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 16))(v17, v18, v39);
        uint64_t v40 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v41 = v40[5];
        uint64_t v42 = &v17[v41];
        uint64_t v43 = &v18[v41];
        *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
        v42[4] = v43[4];
        uint64_t v44 = v40[6];
        uint64_t v45 = &v17[v44];
        uint64_t v46 = &v18[v44];
        *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
        v45[4] = v46[4];
        v17[v40[7]] = v18[v40[7]];
        v17[v40[8]] = v18[v40[8]];
        goto LABEL_39;
      case 4u:
        uint64_t v47 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 16))(v17, v18, v47);
        uint64_t v48 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v17[*(int *)(v48 + 20)] = *(_DWORD *)&v18[*(int *)(v48 + 20)];
        uint64_t v49 = *(int *)(v48 + 24);
        uint64_t v50 = &v17[v49];
        char v51 = &v18[v49];
        v50[4] = v51[4];
        *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
        goto LABEL_39;
      case 6u:
        *int v17 = *v18;
        *((void *)v17 + 1) = *((void *)v18 + 1);
        v17[16] = v18[16];
        *((void *)v17 + 3) = *((void *)v18 + 3);
        *((_WORD *)v17 + 16) = *((_WORD *)v18 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 7u:
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v52 - 8) + 16))(v17, v18, v52);
        uint64_t v53 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v54 = v53[5];
        char v55 = &v17[v54];
        uint64_t v56 = &v18[v54];
        *(_DWORD *)char v55 = *(_DWORD *)v56;
        v55[4] = v56[4];
        uint64_t v57 = v53[6];
        uint64_t v58 = &v17[v57];
        uint64_t v59 = &v18[v57];
        *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
        v58[4] = v59[4];
        v17[v53[7]] = v18[v53[7]];
        v17[v53[8]] = v18[v53[8]];
        v17[v53[9]] = v18[v53[9]];
        uint64_t v60 = v53[10];
        char v61 = &v17[v60];
        uint64_t v62 = &v18[v60];
        *(_DWORD *)char v61 = *(_DWORD *)v62;
        v61[4] = v62[4];
        v17[v53[11]] = v18[v53[11]];
        uint64_t v63 = v53[12];
        uint64_t v64 = &v17[v63];
        uint64_t v65 = &v18[v63];
        v64[4] = v65[4];
        *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
        uint64_t v66 = v53[13];
        char v67 = &v17[v66];
        uint64_t v68 = &v18[v66];
        *(_DWORD *)char v67 = *(_DWORD *)v68;
        v67[4] = v68[4];
        v17[v53[14]] = v18[v53[14]];
        v17[v53[15]] = v18[v53[15]];
        goto LABEL_39;
      case 8u:
        uint64_t v69 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v69 - 8) + 16))(v17, v18, v69);
        uint64_t v70 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v71 = *(int *)(v70 + 20);
        uint64_t v72 = &v17[v71];
        uint64_t v73 = &v18[v71];
        *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        v72[16] = v73[16];
        uint64_t v74 = *(int *)(v70 + 24);
        uint64_t v75 = &v17[v74];
        uint64_t v76 = &v18[v74];
        v75[16] = v76[16];
        *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        goto LABEL_39;
      case 9u:
        uint64_t v77 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v77 - 8) + 16))(v17, v18, v77);
        uint64_t v78 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v79 = v78[5];
        uint64_t v80 = &v17[v79];
        uint64_t v81 = &v18[v79];
        *(_DWORD *)uint64_t v80 = *(_DWORD *)v81;
        v80[4] = v81[4];
        uint64_t v82 = v78[6];
        uint64_t v83 = &v17[v82];
        uint64_t v84 = &v18[v82];
        *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
        v83[4] = v84[4];
        v17[v78[7]] = v18[v78[7]];
        v17[v78[8]] = v18[v78[8]];
        v17[v78[9]] = v18[v78[9]];
        uint64_t v85 = v78[10];
        uint64_t v86 = &v17[v85];
        uint64_t v87 = &v18[v85];
        *(_DWORD *)uint64_t v86 = *(_DWORD *)v87;
        v86[4] = v87[4];
        v17[v78[11]] = v18[v78[11]];
        uint64_t v88 = v78[12];
        char v89 = &v17[v88];
        uint64_t v90 = &v18[v88];
        v89[4] = v90[4];
        *(_DWORD *)char v89 = *(_DWORD *)v90;
        uint64_t v91 = v78[13];
        uint64_t v92 = &v17[v91];
        uint64_t v93 = &v18[v91];
        *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
        v92[4] = v93[4];
        v17[v78[14]] = v18[v78[14]];
        v17[v78[15]] = v18[v78[15]];
        goto LABEL_39;
      case 0xAu:
        uint64_t v94 = type metadata accessor for UUID();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v236 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v236(v17, v18, v94);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&v17[started[5]] = *(void *)&v18[started[5]];
        v17[started[6]] = v18[started[6]];
        *(void *)&v17[started[7]] = *(void *)&v18[started[7]];
        *(void *)&v17[started[8]] = *(void *)&v18[started[8]];
        v17[started[9]] = v18[started[9]];
        v17[started[10]] = v18[started[10]];
        *(_DWORD *)&v17[started[11]] = *(_DWORD *)&v18[started[11]];
        v17[started[12]] = v18[started[12]];
        uint64_t v97 = started[13];
        uint64_t v98 = &v17[v97];
        uint64_t v99 = &v18[v97];
        *(void *)uint64_t v98 = *(void *)v99;
        v98[8] = v99[8];
        uint64_t v100 = started[14];
        char v101 = &v17[v100];
        uint64_t v102 = &v18[v100];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v102, 1, v94)) {
          goto LABEL_24;
        }
        goto LABEL_38;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v104 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v104 - 8) + 16))(v17, v18, v104);
        goto LABEL_39;
      case 0xEu:
        uint64_t v94 = type metadata accessor for UUID();
        uint64_t v95 = *(void *)(v94 - 8);
        uint64_t v236 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v236(v17, v18, v94);
        uint64_t v105 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v106 = v105[5];
        uint64_t v107 = &v17[v106];
        uint64_t v108 = &v18[v106];
        *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
        v107[16] = v108[16];
        uint64_t v109 = v105[6];
        uint64_t v110 = &v17[v109];
        char v111 = &v18[v109];
        *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
        v110[16] = v111[16];
        uint64_t v112 = v105[7];
        uint64_t v113 = &v17[v112];
        uint64_t v114 = &v18[v112];
        v113[4] = v114[4];
        *(_DWORD *)uint64_t v113 = *(_DWORD *)v114;
        uint64_t v115 = v105[8];
        uint64_t v116 = &v17[v115];
        v117 = &v18[v115];
        v116[4] = v117[4];
        *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
        v17[v105[9]] = v18[v105[9]];
        v17[v105[10]] = v18[v105[10]];
        v17[v105[11]] = v18[v105[11]];
        v17[v105[12]] = v18[v105[12]];
        uint64_t v118 = v105[13];
        char v119 = &v17[v118];
        uint64_t v120 = &v18[v118];
        *(_DWORD *)char v119 = *(_DWORD *)v120;
        v119[4] = v120[4];
        uint64_t v121 = v105[14];
        uint64_t v122 = &v17[v121];
        uint64_t v123 = &v18[v121];
        *(_DWORD *)uint64_t v122 = *(_DWORD *)v123;
        v122[4] = v123[4];
        uint64_t v124 = v105[15];
        char v101 = &v17[v124];
        uint64_t v102 = &v18[v124];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v102, 1, v94))
        {
LABEL_24:
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
LABEL_38:
          v236(v101, v102, v94);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v101, 0, 1, v94);
        }
        goto LABEL_39;
      case 0x10u:
        uint64_t v125 = type metadata accessor for UUID();
        uint64_t v126 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v125 - 8) + 16);
        v126(v17, v18, v125);
        char v127 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v126(&v17[v127[5]], &v18[v127[5]], v125);
        uint64_t v128 = v127[6];
        uint64_t v129 = &v17[v128];
        uint64_t v130 = &v18[v128];
        *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
        v129[4] = v130[4];
        uint64_t v131 = v127[7];
        uint64_t v132 = &v17[v131];
        uint64_t v133 = &v18[v131];
        *(_DWORD *)uint64_t v132 = *(_DWORD *)v133;
        v132[4] = v133[4];
        uint64_t v134 = v127[8];
        uint64_t v135 = &v17[v134];
        uint64_t v136 = &v18[v134];
        *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
        v135[16] = v136[16];
        v17[v127[9]] = v18[v127[9]];
        v17[v127[10]] = v18[v127[10]];
        v17[v127[11]] = v18[v127[11]];
        uint64_t v137 = v127[12];
        uint64_t v138 = &v17[v137];
        int v139 = &v18[v137];
        v138[4] = v139[4];
        *(_DWORD *)uint64_t v138 = *(_DWORD *)v139;
        uint64_t v140 = v127[13];
        uint64_t v141 = &v17[v140];
        uint64_t v142 = &v18[v140];
        *(_DWORD *)uint64_t v141 = *(_DWORD *)v142;
        v141[4] = v142[4];
        goto LABEL_39;
      case 0x11u:
        uint64_t v143 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v143 - 8) + 16))(v17, v18, v143);
        v144 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v145 = v144[5];
        uint64_t v146 = &v17[v145];
        uint64_t v147 = &v18[v145];
        *(_DWORD *)uint64_t v146 = *(_DWORD *)v147;
        v146[4] = v147[4];
        uint64_t v148 = v144[6];
        int v149 = &v17[v148];
        uint64_t v150 = &v18[v148];
        *(_DWORD *)int v149 = *(_DWORD *)v150;
        v149[4] = v150[4];
        uint64_t v151 = v144[7];
        uint64_t v152 = &v17[v151];
        uint64_t v153 = &v18[v151];
        v152[16] = v153[16];
        *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
        uint64_t v154 = v144[8];
        uint64_t v155 = &v17[v154];
        v156 = &v18[v154];
        v155[4] = v156[4];
        *(_DWORD *)uint64_t v155 = *(_DWORD *)v156;
        uint64_t v157 = v144[9];
        char v158 = &v17[v157];
        uint64_t v159 = &v18[v157];
        v158[16] = v159[16];
        *(_OWORD *)char v158 = *(_OWORD *)v159;
        v17[v144[10]] = v18[v144[10]];
        goto LABEL_39;
      case 0x12u:
        uint64_t v160 = type metadata accessor for UUID();
        uint64_t v161 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v160 - 8) + 16);
        v161(v17, v18, v160);
        char v162 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v161(&v17[v162[5]], &v18[v162[5]], v160);
        v237 = v161;
        uint64_t v163 = v162[6];
        uint64_t v164 = &v17[v163];
        uint64_t v165 = &v18[v163];
        v161(&v17[v163], &v18[v163], v160);
        char v166 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v167 = v166[5];
        uint64_t v168 = &v164[v167];
        uint64_t v169 = &v165[v167];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        v168[4] = v169[4];
        uint64_t v170 = v166[6];
        uint64_t v171 = &v164[v170];
        uint64_t v172 = &v165[v170];
        *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v164[v166[7]] = v165[v166[7]];
        v164[v166[8]] = v165[v166[8]];
        v164[v166[9]] = v165[v166[9]];
        uint64_t v173 = v166[10];
        char v174 = &v164[v173];
        uint64_t v175 = &v165[v173];
        *(_DWORD *)char v174 = *(_DWORD *)v175;
        v174[4] = v175[4];
        v164[v166[11]] = v165[v166[11]];
        uint64_t v176 = v166[12];
        uint64_t v177 = &v164[v176];
        uint64_t v178 = &v165[v176];
        v177[4] = v178[4];
        *(_DWORD *)uint64_t v177 = *(_DWORD *)v178;
        uint64_t v179 = v166[13];
        uint64_t v180 = &v164[v179];
        uint64_t v181 = &v165[v179];
        *(_DWORD *)uint64_t v180 = *(_DWORD *)v181;
        v180[4] = v181[4];
        v164[v166[14]] = v165[v166[14]];
        v164[v166[15]] = v165[v166[15]];
        uint64_t v182 = v162[7];
        uint64_t v183 = &v17[v182];
        uint64_t v184 = &v18[v182];
        v237(&v17[v182], v184, v160);
        char v185 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v186 = v185[5];
        uint64_t v187 = &v183[v186];
        uint64_t v188 = &v184[v186];
        *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
        v187[4] = v188[4];
        uint64_t v189 = v185[6];
        uint64_t v190 = &v183[v189];
        uint64_t v191 = &v184[v189];
        *(_DWORD *)uint64_t v190 = *(_DWORD *)v191;
        v190[4] = v191[4];
        v183[v185[7]] = v184[v185[7]];
        v183[v185[8]] = v184[v185[8]];
        v183[v185[9]] = v184[v185[9]];
        uint64_t v192 = v185[10];
        uint64_t v193 = &v183[v192];
        uint64_t v194 = &v184[v192];
        *(_DWORD *)uint64_t v193 = *(_DWORD *)v194;
        v193[4] = v194[4];
        v183[v185[11]] = v184[v185[11]];
        uint64_t v195 = v185[12];
        uint64_t v196 = &v183[v195];
        char v197 = &v184[v195];
        v196[4] = v197[4];
        *(_DWORD *)uint64_t v196 = *(_DWORD *)v197;
        uint64_t v198 = v185[13];
        uint64_t v199 = &v183[v198];
        uint64_t v200 = &v184[v198];
        *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
        v199[4] = v200[4];
        v183[v185[14]] = v184[v185[14]];
        v183[v185[15]] = v184[v185[15]];
        goto LABEL_39;
      case 0x13u:
        uint64_t v201 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v201 - 8) + 16))(v17, v18, v201);
        uint64_t v202 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v203 = v202[5];
        uint64_t v204 = &v17[v203];
        uint64_t v205 = &v18[v203];
        *(_DWORD *)uint64_t v204 = *(_DWORD *)v205;
        v204[4] = v205[4];
        uint64_t v206 = v202[6];
        char v207 = &v17[v206];
        char v208 = &v18[v206];
        *(_DWORD *)char v207 = *(_DWORD *)v208;
        v207[4] = v208[4];
        v17[v202[7]] = v18[v202[7]];
        uint64_t v209 = v202[8];
        uint64_t v210 = &v17[v209];
        char v211 = &v18[v209];
        v210[16] = v211[16];
        *(_OWORD *)uint64_t v210 = *(_OWORD *)v211;
        goto LABEL_39;
      case 0x14u:
        uint64_t v212 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v212 - 8) + 16))(v17, v18, v212);
        uint64_t v213 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v17[*(int *)(v213 + 20)] = *(_DWORD *)&v18[*(int *)(v213 + 20)];
        *(_DWORD *)&v17[*(int *)(v213 + 24)] = *(_DWORD *)&v18[*(int *)(v213 + 24)];
        goto LABEL_39;
      case 0x15u:
        uint64_t v214 = type metadata accessor for UUID();
        uint64_t v215 = *(void *)(v214 - 8);
        uint64_t v216 = *(void (**)(char *, char *, uint64_t))(v215 + 16);
        v216(v17, v18, v214);
        char v217 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v216(&v17[v217[5]], &v18[v217[5]], v214);
        uint64_t v218 = v217[6];
        v219 = &v17[v218];
        uint64_t v220 = &v18[v218];
        uint64_t v221 = v220[1];
        void *v219 = *v220;
        v219[1] = v221;
        uint64_t v222 = v217[7];
        char v235 = &v17[v222];
        v223 = &v18[v222];
        v224 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48);
        swift_bridgeObjectRetain();
        if (v224(v223, 1, v214))
        {
          uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v235, v223, *(void *)(*(void *)(v225 - 8) + 64));
        }
        else
        {
          v216(v235, v223, v214);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v235, 0, 1, v214);
        }
        uint64_t v226 = v217[8];
        v227 = &v17[v226];
        uint64_t v228 = &v18[v226];
        uint64_t v229 = v228[1];
        void *v227 = *v228;
        v227[1] = v229;
        swift_bridgeObjectRetain();
LABEL_39:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v17, v18, *(void *)(*(void *)(v238 - 8) + 64));
        break;
    }
    uint64_t v230 = *(int *)(a3 + 24);
    char v231 = (void *)((char *)a1 + v230);
    uint64_t v232 = (void *)((char *)a2 + v230);
    uint64_t v233 = v232[1];
    *char v231 = *v232;
    v231[1] = v233;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  type metadata accessor for __RKEntityTriggerSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
    case 5u:
      goto LABEL_5;
    case 4u:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
      type metadata accessor for __RKEntityAudioActionArguments(0);
      goto LABEL_21;
    case 1u:
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      v10(v6, v9);
      uint64_t v11 = type metadata accessor for __RKChangeSceneActionArguments(0);
      goto LABEL_16;
    case 2u:
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
      type metadata accessor for __RKEntityCustomActionArguments(0);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 9u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x13u:
    case 0x14u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      goto LABEL_22;
    case 6u:
      goto LABEL_21;
    case 0xAu:
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v13 = *(void *)(v9 - 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v10(v6, v9);
      uint64_t v14 = *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
      goto LABEL_13;
    case 0xEu:
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v13 = *(void *)(v9 - 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v10(v6, v9);
      uint64_t v14 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
LABEL_13:
      uint64_t v15 = v6 + v14;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v9)) {
        goto LABEL_22;
      }
      uint64_t v16 = v15;
LABEL_17:
      v10(v16, v9);
LABEL_22:
      return swift_bridgeObjectRelease();
    case 0x10u:
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      v10(v6, v9);
      uint64_t v11 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
LABEL_16:
      uint64_t v16 = v6 + *(int *)(v11 + 20);
      goto LABEL_17;
    case 0x12u:
      uint64_t v17 = type metadata accessor for UUID();
      int v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
      v18(v6, v17);
      uint64_t v19 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v18(v6 + v19[5], v17);
      v18(v6 + v19[6], v17);
      v18(v6 + v19[7], v17);
      goto LABEL_22;
    case 0x15u:
      uint64_t v20 = type metadata accessor for UUID();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v22(v6, v20);
      uint64_t v23 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v22(v6 + *(int *)(v23 + 20), v20);
      swift_bridgeObjectRelease();
      uint64_t v24 = v6 + *(int *)(v23 + 28);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20)) {
        v22(v24, v20);
      }
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_22;
    default:
      goto LABEL_22;
  }
}

void *initializeWithCopy for __RKEntityInteractionSpecification(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
      *((unsigned char *)a1 + *(int *)(v8 + 64)) = *((unsigned char *)a2 + *(int *)(v8 + 64));
      goto LABEL_9;
    case 1u:
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_9;
    case 2u:
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(void *)((char *)a1 + *(int *)(v11 + 48)) = *(void *)((char *)a2 + *(int *)(v11 + 48));
      *(void *)((char *)a1 + *(int *)(v11 + 64)) = *(void *)((char *)a2 + *(int *)(v11 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 16))(v15, v16, v18);
      uint64_t v19 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = &v15[v20];
      uint64_t v22 = (uint64_t *)&v16[v20];
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      void *v21 = v24;
      v21[1] = v23;
      v15[v19[6]] = v16[v19[6]];
      uint64_t v25 = v19[7];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      v26[8] = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      v15[v19[8]] = v16[v19[8]];
      v15[v19[9]] = v16[v19[9]];
      v15[v19[10]] = v16[v19[10]];
      swift_bridgeObjectRetain();
      goto LABEL_38;
    case 1u:
      uint64_t v28 = type metadata accessor for UUID();
      uint64_t v29 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v28 - 8) + 16);
      v29(v15, v16, v28);
      uint64_t v30 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v29(&v15[*(int *)(v30 + 20)], &v16[*(int *)(v30 + 20)], v28);
      goto LABEL_38;
    case 2u:
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 16))(v15, v16, v31);
      uint64_t v32 = type metadata accessor for __RKEntityCustomActionArguments(0);
      uint64_t v33 = *(int *)(v32 + 20);
      uint64_t v34 = &v15[v33];
      uint64_t v35 = (uint64_t *)&v16[v33];
      uint64_t v37 = *v35;
      uint64_t v36 = v35[1];
      void *v34 = v37;
      v34[1] = v36;
      *(void *)&v15[*(int *)(v32 + 24)] = *(void *)&v16[*(int *)(v32 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    case 3u:
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v38 - 8) + 16))(v15, v16, v38);
      uint64_t v39 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      uint64_t v40 = v39[5];
      uint64_t v41 = &v15[v40];
      uint64_t v42 = &v16[v40];
      *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      uint64_t v43 = v39[6];
      uint64_t v44 = &v15[v43];
      uint64_t v45 = &v16[v43];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      v15[v39[7]] = v16[v39[7]];
      v15[v39[8]] = v16[v39[8]];
      goto LABEL_38;
    case 4u:
      uint64_t v46 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v46 - 8) + 16))(v15, v16, v46);
      uint64_t v47 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&v15[*(int *)(v47 + 20)] = *(_DWORD *)&v16[*(int *)(v47 + 20)];
      uint64_t v48 = *(int *)(v47 + 24);
      uint64_t v49 = &v15[v48];
      uint64_t v50 = &v16[v48];
      v49[4] = v50[4];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      goto LABEL_38;
    case 6u:
      *uint64_t v15 = *v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      v15[16] = v16[16];
      *((void *)v15 + 3) = *((void *)v16 + 3);
      *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_38;
    case 7u:
      uint64_t v51 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v51 - 8) + 16))(v15, v16, v51);
      uint64_t v52 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v53 = v52[5];
      uint64_t v54 = &v15[v53];
      char v55 = &v16[v53];
      *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
      v54[4] = v55[4];
      uint64_t v56 = v52[6];
      uint64_t v57 = &v15[v56];
      uint64_t v58 = &v16[v56];
      *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
      v57[4] = v58[4];
      v15[v52[7]] = v16[v52[7]];
      v15[v52[8]] = v16[v52[8]];
      v15[v52[9]] = v16[v52[9]];
      uint64_t v59 = v52[10];
      uint64_t v60 = &v15[v59];
      char v61 = &v16[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      v15[v52[11]] = v16[v52[11]];
      uint64_t v62 = v52[12];
      uint64_t v63 = &v15[v62];
      uint64_t v64 = &v16[v62];
      v63[4] = v64[4];
      *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
      uint64_t v65 = v52[13];
      uint64_t v66 = &v15[v65];
      char v67 = &v16[v65];
      *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
      v66[4] = v67[4];
      v15[v52[14]] = v16[v52[14]];
      v15[v52[15]] = v16[v52[15]];
      goto LABEL_38;
    case 8u:
      uint64_t v68 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v68 - 8) + 16))(v15, v16, v68);
      uint64_t v69 = type metadata accessor for __RKEntityForceActionArguments(0);
      uint64_t v70 = *(int *)(v69 + 20);
      uint64_t v71 = &v15[v70];
      uint64_t v72 = &v16[v70];
      *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
      v71[16] = v72[16];
      uint64_t v73 = *(int *)(v69 + 24);
      uint64_t v74 = &v15[v73];
      uint64_t v75 = &v16[v73];
      v74[16] = v75[16];
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      goto LABEL_38;
    case 9u:
      uint64_t v76 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v76 - 8) + 16))(v15, v16, v76);
      uint64_t v77 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v78 = v77[5];
      uint64_t v79 = &v15[v78];
      uint64_t v80 = &v16[v78];
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
      v79[4] = v80[4];
      uint64_t v81 = v77[6];
      uint64_t v82 = &v15[v81];
      uint64_t v83 = &v16[v81];
      *(_DWORD *)uint64_t v82 = *(_DWORD *)v83;
      v82[4] = v83[4];
      v15[v77[7]] = v16[v77[7]];
      v15[v77[8]] = v16[v77[8]];
      v15[v77[9]] = v16[v77[9]];
      uint64_t v84 = v77[10];
      uint64_t v85 = &v15[v84];
      uint64_t v86 = &v16[v84];
      *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
      v85[4] = v86[4];
      v15[v77[11]] = v16[v77[11]];
      uint64_t v87 = v77[12];
      uint64_t v88 = &v15[v87];
      char v89 = &v16[v87];
      v88[4] = v89[4];
      *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
      uint64_t v90 = v77[13];
      uint64_t v91 = &v15[v90];
      uint64_t v92 = &v16[v90];
      *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
      v91[4] = v92[4];
      v15[v77[14]] = v16[v77[14]];
      v15[v77[15]] = v16[v77[15]];
      goto LABEL_38;
    case 0xAu:
      uint64_t v93 = type metadata accessor for UUID();
      uint64_t v94 = *(void *)(v93 - 8);
      uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
      v95(v15, v16, v93);
      uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(void *)&v15[started[5]] = *(void *)&v16[started[5]];
      v15[started[6]] = v16[started[6]];
      *(void *)&v15[started[7]] = *(void *)&v16[started[7]];
      *(void *)&v15[started[8]] = *(void *)&v16[started[8]];
      v15[started[9]] = v16[started[9]];
      v15[started[10]] = v16[started[10]];
      *(_DWORD *)&v15[started[11]] = *(_DWORD *)&v16[started[11]];
      v15[started[12]] = v16[started[12]];
      uint64_t v97 = started[13];
      uint64_t v98 = &v15[v97];
      uint64_t v99 = &v16[v97];
      *(void *)uint64_t v98 = *(void *)v99;
      v98[8] = v99[8];
      uint64_t v100 = started[14];
      char v101 = &v15[v100];
      uint64_t v102 = &v16[v100];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v102, 1, v93))
      {
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        v95(v101, v102, v93);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v101, 0, 1, v93);
      }
      goto LABEL_38;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      uint64_t v104 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v104 - 8) + 16))(v15, v16, v104);
      goto LABEL_38;
    case 0xEu:
      uint64_t v246 = a3;
      uint64_t v105 = type metadata accessor for UUID();
      uint64_t v106 = *(void *)(v105 - 8);
      uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v106 + 16);
      v107(v15, v16, v105);
      uint64_t v108 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      uint64_t v109 = v108[5];
      uint64_t v110 = &v15[v109];
      char v111 = &v16[v109];
      *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
      v110[16] = v111[16];
      uint64_t v112 = v108[6];
      uint64_t v113 = &v15[v112];
      uint64_t v114 = &v16[v112];
      *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
      v113[16] = v114[16];
      uint64_t v115 = v108[7];
      uint64_t v116 = &v15[v115];
      v117 = &v16[v115];
      v116[4] = v117[4];
      *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
      uint64_t v118 = v108[8];
      char v119 = &v15[v118];
      uint64_t v120 = &v16[v118];
      v119[4] = v120[4];
      *(_DWORD *)char v119 = *(_DWORD *)v120;
      v15[v108[9]] = v16[v108[9]];
      v15[v108[10]] = v16[v108[10]];
      v15[v108[11]] = v16[v108[11]];
      v15[v108[12]] = v16[v108[12]];
      uint64_t v121 = v108[13];
      uint64_t v122 = &v15[v121];
      uint64_t v123 = &v16[v121];
      *(_DWORD *)uint64_t v122 = *(_DWORD *)v123;
      v122[4] = v123[4];
      uint64_t v124 = v108[14];
      uint64_t v125 = &v15[v124];
      uint64_t v126 = &v16[v124];
      *(_DWORD *)uint64_t v125 = *(_DWORD *)v126;
      v125[4] = v126[4];
      uint64_t v127 = v108[15];
      uint64_t v128 = &v15[v127];
      uint64_t v129 = &v16[v127];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v129, 1, v105))
      {
        uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v128, v129, *(void *)(*(void *)(v130 - 8) + 64));
      }
      else
      {
        v107(v128, v129, v105);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v128, 0, 1, v105);
      }
      goto LABEL_36;
    case 0x10u:
      uint64_t v131 = type metadata accessor for UUID();
      uint64_t v132 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v131 - 8) + 16);
      v132(v15, v16, v131);
      uint64_t v133 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v132(&v15[v133[5]], &v16[v133[5]], v131);
      uint64_t v134 = v133[6];
      uint64_t v135 = &v15[v134];
      uint64_t v136 = &v16[v134];
      *(_DWORD *)uint64_t v135 = *(_DWORD *)v136;
      v135[4] = v136[4];
      uint64_t v137 = v133[7];
      uint64_t v138 = &v15[v137];
      int v139 = &v16[v137];
      *(_DWORD *)uint64_t v138 = *(_DWORD *)v139;
      v138[4] = v139[4];
      uint64_t v140 = v133[8];
      uint64_t v141 = &v15[v140];
      uint64_t v142 = &v16[v140];
      *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
      v141[16] = v142[16];
      v15[v133[9]] = v16[v133[9]];
      v15[v133[10]] = v16[v133[10]];
      v15[v133[11]] = v16[v133[11]];
      uint64_t v143 = v133[12];
      v144 = &v15[v143];
      uint64_t v145 = &v16[v143];
      v144[4] = v145[4];
      *(_DWORD *)v144 = *(_DWORD *)v145;
      uint64_t v146 = v133[13];
      uint64_t v147 = &v15[v146];
      uint64_t v148 = &v16[v146];
      *(_DWORD *)uint64_t v147 = *(_DWORD *)v148;
      v147[4] = v148[4];
      goto LABEL_38;
    case 0x11u:
      uint64_t v149 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v149 - 8) + 16))(v15, v16, v149);
      uint64_t v150 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      uint64_t v151 = v150[5];
      uint64_t v152 = &v15[v151];
      uint64_t v153 = &v16[v151];
      *(_DWORD *)uint64_t v152 = *(_DWORD *)v153;
      v152[4] = v153[4];
      uint64_t v154 = v150[6];
      uint64_t v155 = &v15[v154];
      v156 = &v16[v154];
      *(_DWORD *)uint64_t v155 = *(_DWORD *)v156;
      v155[4] = v156[4];
      uint64_t v157 = v150[7];
      char v158 = &v15[v157];
      uint64_t v159 = &v16[v157];
      v158[16] = v159[16];
      *(_OWORD *)char v158 = *(_OWORD *)v159;
      uint64_t v160 = v150[8];
      uint64_t v161 = &v15[v160];
      char v162 = &v16[v160];
      v161[4] = v162[4];
      *(_DWORD *)uint64_t v161 = *(_DWORD *)v162;
      uint64_t v163 = v150[9];
      uint64_t v164 = &v15[v163];
      uint64_t v165 = &v16[v163];
      v164[16] = v165[16];
      *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
      v15[v150[10]] = v16[v150[10]];
      goto LABEL_38;
    case 0x12u:
      uint64_t v166 = type metadata accessor for UUID();
      uint64_t v167 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(v166 - 8) + 16);
      uint64_t v244 = v166;
      uint64_t v168 = v166;
      v167(v15, v16);
      uint64_t v169 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v167)(&v15[v169[5]], &v16[v169[5]], v168);
      uint64_t v170 = v169[6];
      uint64_t v171 = &v15[v170];
      uint64_t v247 = a3;
      uint64_t v172 = &v16[v170];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v167)(&v15[v170], &v16[v170], v168);
      uint64_t v173 = (void (*)(unsigned char *, char *, uint64_t))v167;
      char v174 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v175 = v174[5];
      uint64_t v176 = &v171[v175];
      uint64_t v177 = &v172[v175];
      *(_DWORD *)uint64_t v176 = *(_DWORD *)v177;
      v176[4] = v177[4];
      uint64_t v178 = v174[6];
      uint64_t v179 = &v171[v178];
      uint64_t v180 = &v172[v178];
      *(_DWORD *)uint64_t v179 = *(_DWORD *)v180;
      v179[4] = v180[4];
      v171[v174[7]] = v172[v174[7]];
      v171[v174[8]] = v172[v174[8]];
      v171[v174[9]] = v172[v174[9]];
      uint64_t v181 = v174[10];
      uint64_t v182 = &v171[v181];
      uint64_t v183 = &v172[v181];
      *(_DWORD *)uint64_t v182 = *(_DWORD *)v183;
      v182[4] = v183[4];
      v171[v174[11]] = v172[v174[11]];
      uint64_t v184 = v174[12];
      char v185 = &v171[v184];
      uint64_t v186 = &v172[v184];
      v185[4] = v186[4];
      *(_DWORD *)char v185 = *(_DWORD *)v186;
      uint64_t v187 = v174[13];
      uint64_t v188 = &v171[v187];
      uint64_t v189 = &v172[v187];
      *(_DWORD *)uint64_t v188 = *(_DWORD *)v189;
      v188[4] = v189[4];
      v171[v174[14]] = v172[v174[14]];
      uint64_t v190 = v174[15];
      LOBYTE(v188) = v172[v190];
      a3 = v247;
      v171[v190] = (char)v188;
      uint64_t v191 = v169[7];
      uint64_t v192 = &v15[v191];
      uint64_t v193 = &v16[v191];
      v173(&v15[v191], v193, v244);
      uint64_t v194 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v195 = v194[5];
      uint64_t v196 = &v192[v195];
      char v197 = &v193[v195];
      *(_DWORD *)uint64_t v196 = *(_DWORD *)v197;
      v196[4] = v197[4];
      uint64_t v198 = v194[6];
      uint64_t v199 = &v192[v198];
      uint64_t v200 = &v193[v198];
      *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
      v199[4] = v200[4];
      v192[v194[7]] = v193[v194[7]];
      v192[v194[8]] = v193[v194[8]];
      v192[v194[9]] = v193[v194[9]];
      uint64_t v201 = v194[10];
      uint64_t v202 = &v192[v201];
      uint64_t v203 = &v193[v201];
      *(_DWORD *)uint64_t v202 = *(_DWORD *)v203;
      v202[4] = v203[4];
      v192[v194[11]] = v193[v194[11]];
      uint64_t v204 = v194[12];
      uint64_t v205 = &v192[v204];
      uint64_t v206 = &v193[v204];
      v205[4] = v206[4];
      *(_DWORD *)uint64_t v205 = *(_DWORD *)v206;
      uint64_t v207 = v194[13];
      char v208 = &v192[v207];
      uint64_t v209 = &v193[v207];
      *(_DWORD *)char v208 = *(_DWORD *)v209;
      v208[4] = v209[4];
      v192[v194[14]] = v193[v194[14]];
      v192[v194[15]] = v193[v194[15]];
      goto LABEL_38;
    case 0x13u:
      uint64_t v210 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v210 - 8) + 16))(v15, v16, v210);
      char v211 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      uint64_t v212 = v211[5];
      uint64_t v213 = &v15[v212];
      uint64_t v214 = &v16[v212];
      *(_DWORD *)uint64_t v213 = *(_DWORD *)v214;
      v213[4] = v214[4];
      uint64_t v215 = v211[6];
      uint64_t v216 = &v15[v215];
      char v217 = &v16[v215];
      *(_DWORD *)uint64_t v216 = *(_DWORD *)v217;
      v216[4] = v217[4];
      v15[v211[7]] = v16[v211[7]];
      uint64_t v218 = v211[8];
      v219 = &v15[v218];
      uint64_t v220 = &v16[v218];
      v219[16] = v220[16];
      *(_OWORD *)v219 = *(_OWORD *)v220;
      goto LABEL_38;
    case 0x14u:
      uint64_t v221 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v221 - 8) + 16))(v15, v16, v221);
      uint64_t v222 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&v15[*(int *)(v222 + 20)] = *(_DWORD *)&v16[*(int *)(v222 + 20)];
      *(_DWORD *)&v15[*(int *)(v222 + 24)] = *(_DWORD *)&v16[*(int *)(v222 + 24)];
LABEL_38:
      swift_storeEnumTagMultiPayload();
      break;
    case 0x15u:
      uint64_t v246 = a3;
      uint64_t v223 = type metadata accessor for UUID();
      uint64_t v224 = *(void *)(v223 - 8);
      uint64_t v225 = *(void (**)(char *, char *, uint64_t))(v224 + 16);
      v225(v15, v16, v223);
      uint64_t v226 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v225(&v15[v226[5]], &v16[v226[5]], v223);
      uint64_t v227 = v226[6];
      uint64_t v228 = &v15[v227];
      uint64_t v229 = &v16[v227];
      uint64_t v230 = v229[1];
      *uint64_t v228 = *v229;
      v228[1] = v230;
      uint64_t v231 = v226[7];
      __dst = &v15[v231];
      uint64_t v232 = &v16[v231];
      uint64_t v233 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v224 + 48);
      swift_bridgeObjectRetain();
      if (v233(v232, 1, v223))
      {
        uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(__dst, v232, *(void *)(*(void *)(v234 - 8) + 64));
      }
      else
      {
        v225(__dst, v232, v223);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v224 + 56))(__dst, 0, 1, v223);
      }
      uint64_t v235 = v226[8];
      uint64_t v236 = &v15[v235];
      v237 = &v16[v235];
      uint64_t v238 = v237[1];
      *uint64_t v236 = *v237;
      v236[1] = v238;
      swift_bridgeObjectRetain();
LABEL_36:
      swift_storeEnumTagMultiPayload();
      a3 = v246;
      break;
    default:
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
      break;
  }
  uint64_t v239 = *(int *)(a3 + 24);
  uint64_t v240 = (void *)((char *)a1 + v239);
  uint64_t v241 = (void *)((char *)a2 + v239);
  uint64_t v242 = v241[1];
  *uint64_t v240 = *v241;
  v240[1] = v242;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __RKEntityInteractionSpecification(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v5 = type metadata accessor for __RKEntityTriggerSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
        *((unsigned char *)a1 + *(int *)(v7 + 64)) = *((unsigned char *)a2 + *(int *)(v7 + 64));
        goto LABEL_10;
      case 1u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_10;
      case 2u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(void *)((char *)a1 + *(int *)(v10 + 48)) = *(void *)((char *)a2 + *(int *)(v10 + 48));
        *(void *)((char *)a1 + *(int *)(v10 + 64)) = *(void *)((char *)a2 + *(int *)(v10 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        break;
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1 + v11, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v14 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v15 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
        uint64_t v16 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        uint64_t v17 = v16[5];
        uint64_t v18 = &v12[v17];
        uint64_t v19 = &v13[v17];
        *uint64_t v18 = *v19;
        v18[1] = v19[1];
        v12[v16[6]] = v13[v16[6]];
        uint64_t v20 = v16[7];
        uint64_t v21 = &v12[v20];
        uint64_t v22 = &v13[v20];
        char v23 = v22[8];
        *(void *)uint64_t v21 = *(void *)v22;
        v21[8] = v23;
        v12[v16[8]] = v13[v16[8]];
        v12[v16[9]] = v13[v16[9]];
        v12[v16[10]] = v13[v16[10]];
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 1u:
        uint64_t v24 = type metadata accessor for UUID();
        uint64_t v25 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 16);
        v25(v12, v13, v24);
        uint64_t v26 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v25(&v12[*(int *)(v26 + 20)], &v13[*(int *)(v26 + 20)], v24);
        goto LABEL_38;
      case 2u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 16))(v12, v13, v27);
        uint64_t v28 = type metadata accessor for __RKEntityCustomActionArguments(0);
        uint64_t v29 = *(int *)(v28 + 20);
        uint64_t v30 = &v12[v29];
        uint64_t v31 = &v13[v29];
        *uint64_t v30 = *v31;
        v30[1] = v31[1];
        *(void *)&v12[*(int *)(v28 + 24)] = *(void *)&v13[*(int *)(v28 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 3u:
        uint64_t v32 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 16))(v12, v13, v32);
        uint64_t v33 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v34 = v33[5];
        uint64_t v35 = &v12[v34];
        uint64_t v36 = &v13[v34];
        char v37 = v36[4];
        *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
        v35[4] = v37;
        uint64_t v38 = v33[6];
        uint64_t v39 = &v12[v38];
        uint64_t v40 = &v13[v38];
        char v41 = v40[4];
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        v39[4] = v41;
        v12[v33[7]] = v13[v33[7]];
        v12[v33[8]] = v13[v33[8]];
        goto LABEL_38;
      case 4u:
        uint64_t v42 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v42 - 8) + 16))(v12, v13, v42);
        uint64_t v43 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v12[*(int *)(v43 + 20)] = *(_DWORD *)&v13[*(int *)(v43 + 20)];
        uint64_t v44 = *(int *)(v43 + 24);
        uint64_t v45 = &v12[v44];
        uint64_t v46 = &v13[v44];
        char v47 = v46[4];
        *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
        v45[4] = v47;
        goto LABEL_38;
      case 6u:
        *uint64_t v12 = *v13;
        *((void *)v12 + 1) = *((void *)v13 + 1);
        v12[16] = v13[16];
        uint64_t v48 = *((void *)v13 + 3);
        v12[32] = v13[32];
        *((void *)v12 + 3) = v48;
        v12[33] = v13[33];
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 7u:
        uint64_t v49 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v49 - 8) + 16))(v12, v13, v49);
        uint64_t v50 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v51 = v50[5];
        uint64_t v52 = &v12[v51];
        uint64_t v53 = &v13[v51];
        char v54 = v53[4];
        *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
        v52[4] = v54;
        uint64_t v55 = v50[6];
        uint64_t v56 = &v12[v55];
        uint64_t v57 = &v13[v55];
        char v58 = v57[4];
        *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
        v56[4] = v58;
        v12[v50[7]] = v13[v50[7]];
        v12[v50[8]] = v13[v50[8]];
        v12[v50[9]] = v13[v50[9]];
        uint64_t v59 = v50[10];
        uint64_t v60 = &v12[v59];
        char v61 = &v13[v59];
        char v62 = v61[4];
        *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
        v60[4] = v62;
        v12[v50[11]] = v13[v50[11]];
        uint64_t v63 = v50[12];
        uint64_t v64 = &v12[v63];
        uint64_t v65 = &v13[v63];
        char v66 = v65[4];
        *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
        v64[4] = v66;
        uint64_t v67 = v50[13];
        uint64_t v68 = &v12[v67];
        uint64_t v69 = &v13[v67];
        char v70 = v69[4];
        *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
        v68[4] = v70;
        v12[v50[14]] = v13[v50[14]];
        v12[v50[15]] = v13[v50[15]];
        goto LABEL_38;
      case 8u:
        uint64_t v71 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v71 - 8) + 16))(v12, v13, v71);
        uint64_t v72 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v73 = *(int *)(v72 + 20);
        uint64_t v74 = &v12[v73];
        uint64_t v75 = &v13[v73];
        char v76 = v75[16];
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        v74[16] = v76;
        uint64_t v77 = *(int *)(v72 + 24);
        uint64_t v78 = &v12[v77];
        uint64_t v79 = &v13[v77];
        char v80 = v79[16];
        *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
        v78[16] = v80;
        goto LABEL_38;
      case 9u:
        uint64_t v81 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v81 - 8) + 16))(v12, v13, v81);
        uint64_t v82 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v83 = v82[5];
        uint64_t v84 = &v12[v83];
        uint64_t v85 = &v13[v83];
        char v86 = v85[4];
        *(_DWORD *)uint64_t v84 = *(_DWORD *)v85;
        v84[4] = v86;
        uint64_t v87 = v82[6];
        uint64_t v88 = &v12[v87];
        char v89 = &v13[v87];
        char v90 = v89[4];
        *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
        v88[4] = v90;
        v12[v82[7]] = v13[v82[7]];
        v12[v82[8]] = v13[v82[8]];
        v12[v82[9]] = v13[v82[9]];
        uint64_t v91 = v82[10];
        uint64_t v92 = &v12[v91];
        uint64_t v93 = &v13[v91];
        char v94 = v93[4];
        *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
        v92[4] = v94;
        v12[v82[11]] = v13[v82[11]];
        uint64_t v95 = v82[12];
        uint64_t v96 = &v12[v95];
        uint64_t v97 = &v13[v95];
        char v98 = v97[4];
        *(_DWORD *)uint64_t v96 = *(_DWORD *)v97;
        v96[4] = v98;
        uint64_t v99 = v82[13];
        uint64_t v100 = &v12[v99];
        char v101 = &v13[v99];
        char v102 = v101[4];
        *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
        v100[4] = v102;
        v12[v82[14]] = v13[v82[14]];
        v12[v82[15]] = v13[v82[15]];
        goto LABEL_38;
      case 0xAu:
        uint64_t v103 = type metadata accessor for UUID();
        uint64_t v104 = *(void *)(v103 - 8);
        v270 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
        v270(v12, v13, v103);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&v12[started[5]] = *(void *)&v13[started[5]];
        v12[started[6]] = v13[started[6]];
        *(void *)&v12[started[7]] = *(void *)&v13[started[7]];
        *(void *)&v12[started[8]] = *(void *)&v13[started[8]];
        v12[started[9]] = v13[started[9]];
        v12[started[10]] = v13[started[10]];
        *(_DWORD *)&v12[started[11]] = *(_DWORD *)&v13[started[11]];
        v12[started[12]] = v13[started[12]];
        uint64_t v106 = started[13];
        uint64_t v107 = &v12[v106];
        uint64_t v108 = &v13[v106];
        char v109 = v108[8];
        *(void *)uint64_t v107 = *(void *)v108;
        v107[8] = v109;
        uint64_t v110 = started[14];
        char v111 = &v12[v110];
        uint64_t v112 = &v13[v110];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v112, 1, v103)) {
          goto LABEL_23;
        }
        goto LABEL_34;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v114 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v114 - 8) + 16))(v12, v13, v114);
        goto LABEL_38;
      case 0xEu:
        uint64_t v103 = type metadata accessor for UUID();
        uint64_t v104 = *(void *)(v103 - 8);
        v270 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
        v270(v12, v13, v103);
        uint64_t v115 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v116 = v115[5];
        v117 = &v12[v116];
        uint64_t v118 = &v13[v116];
        char v119 = v118[16];
        *(_OWORD *)v117 = *(_OWORD *)v118;
        v117[16] = v119;
        uint64_t v120 = v115[6];
        uint64_t v121 = &v12[v120];
        uint64_t v122 = &v13[v120];
        char v123 = v122[16];
        *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
        v121[16] = v123;
        uint64_t v124 = v115[7];
        uint64_t v125 = &v12[v124];
        uint64_t v126 = &v13[v124];
        char v127 = v126[4];
        *(_DWORD *)uint64_t v125 = *(_DWORD *)v126;
        v125[4] = v127;
        uint64_t v128 = v115[8];
        uint64_t v129 = &v12[v128];
        uint64_t v130 = &v13[v128];
        char v131 = v130[4];
        *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
        v129[4] = v131;
        v12[v115[9]] = v13[v115[9]];
        v12[v115[10]] = v13[v115[10]];
        v12[v115[11]] = v13[v115[11]];
        v12[v115[12]] = v13[v115[12]];
        uint64_t v132 = v115[13];
        uint64_t v133 = &v12[v132];
        uint64_t v134 = &v13[v132];
        char v135 = v134[4];
        *(_DWORD *)uint64_t v133 = *(_DWORD *)v134;
        v133[4] = v135;
        uint64_t v136 = v115[14];
        uint64_t v137 = &v12[v136];
        uint64_t v138 = &v13[v136];
        char v139 = v138[4];
        *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
        v137[4] = v139;
        uint64_t v140 = v115[15];
        char v111 = &v12[v140];
        uint64_t v112 = &v13[v140];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v112, 1, v103))
        {
LABEL_23:
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v111, v112, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
LABEL_34:
          v270(v111, v112, v103);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v111, 0, 1, v103);
        }
        goto LABEL_38;
      case 0x10u:
        uint64_t v141 = type metadata accessor for UUID();
        uint64_t v142 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v141 - 8) + 16);
        v142(v12, v13, v141);
        uint64_t v143 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v142(&v12[v143[5]], &v13[v143[5]], v141);
        uint64_t v144 = v143[6];
        uint64_t v145 = &v12[v144];
        uint64_t v146 = &v13[v144];
        int v147 = *(_DWORD *)v146;
        v145[4] = v146[4];
        *(_DWORD *)uint64_t v145 = v147;
        uint64_t v148 = v143[7];
        uint64_t v149 = &v12[v148];
        uint64_t v150 = &v13[v148];
        LOBYTE(v147) = v150[4];
        *(_DWORD *)uint64_t v149 = *(_DWORD *)v150;
        v149[4] = v147;
        uint64_t v151 = v143[8];
        uint64_t v152 = &v12[v151];
        uint64_t v153 = &v13[v151];
        LOBYTE(v147) = v153[16];
        *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
        v152[16] = v147;
        v12[v143[9]] = v13[v143[9]];
        v12[v143[10]] = v13[v143[10]];
        v12[v143[11]] = v13[v143[11]];
        uint64_t v154 = v143[12];
        uint64_t v155 = &v12[v154];
        v156 = &v13[v154];
        int v157 = *(_DWORD *)v156;
        v155[4] = v156[4];
        *(_DWORD *)uint64_t v155 = v157;
        uint64_t v158 = v143[13];
        uint64_t v159 = &v12[v158];
        uint64_t v160 = &v13[v158];
        LOBYTE(v157) = v160[4];
        *(_DWORD *)uint64_t v159 = *(_DWORD *)v160;
        v159[4] = v157;
        goto LABEL_38;
      case 0x11u:
        uint64_t v161 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v161 - 8) + 16))(v12, v13, v161);
        char v162 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v163 = v162[5];
        uint64_t v164 = &v12[v163];
        uint64_t v165 = &v13[v163];
        char v166 = v165[4];
        *(_DWORD *)uint64_t v164 = *(_DWORD *)v165;
        v164[4] = v166;
        uint64_t v167 = v162[6];
        uint64_t v168 = &v12[v167];
        uint64_t v169 = &v13[v167];
        char v170 = v169[4];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        v168[4] = v170;
        uint64_t v171 = v162[7];
        uint64_t v172 = &v12[v171];
        uint64_t v173 = &v13[v171];
        char v174 = v173[16];
        *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
        v172[16] = v174;
        uint64_t v175 = v162[8];
        uint64_t v176 = &v12[v175];
        uint64_t v177 = &v13[v175];
        char v178 = v177[4];
        *(_DWORD *)uint64_t v176 = *(_DWORD *)v177;
        v176[4] = v178;
        uint64_t v179 = v162[9];
        uint64_t v180 = &v12[v179];
        uint64_t v181 = &v13[v179];
        char v182 = v181[16];
        *(_OWORD *)uint64_t v180 = *(_OWORD *)v181;
        v180[16] = v182;
        v12[v162[10]] = v13[v162[10]];
        goto LABEL_38;
      case 0x12u:
        uint64_t v183 = type metadata accessor for UUID();
        uint64_t v184 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v183 - 8) + 16);
        v184(v12, v13, v183);
        char v185 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v184(&v12[v185[5]], &v13[v185[5]], v183);
        v268 = v184;
        uint64_t v186 = v185[6];
        uint64_t v187 = &v12[v186];
        uint64_t v188 = &v13[v186];
        v184(&v12[v186], &v13[v186], v183);
        uint64_t v189 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v190 = v189[5];
        uint64_t v191 = &v187[v190];
        uint64_t v192 = &v188[v190];
        char v193 = v192[4];
        *(_DWORD *)uint64_t v191 = *(_DWORD *)v192;
        v191[4] = v193;
        uint64_t v194 = v189[6];
        uint64_t v195 = &v187[v194];
        uint64_t v196 = &v188[v194];
        char v197 = v196[4];
        *(_DWORD *)uint64_t v195 = *(_DWORD *)v196;
        v195[4] = v197;
        v187[v189[7]] = v188[v189[7]];
        v187[v189[8]] = v188[v189[8]];
        v187[v189[9]] = v188[v189[9]];
        uint64_t v198 = v189[10];
        uint64_t v199 = &v187[v198];
        uint64_t v200 = &v188[v198];
        char v201 = v200[4];
        *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
        v199[4] = v201;
        v187[v189[11]] = v188[v189[11]];
        uint64_t v202 = v189[12];
        uint64_t v203 = &v187[v202];
        uint64_t v204 = &v188[v202];
        char v205 = v204[4];
        *(_DWORD *)uint64_t v203 = *(_DWORD *)v204;
        v203[4] = v205;
        uint64_t v206 = v189[13];
        uint64_t v207 = &v187[v206];
        char v208 = &v188[v206];
        char v209 = v208[4];
        *(_DWORD *)uint64_t v207 = *(_DWORD *)v208;
        v207[4] = v209;
        v187[v189[14]] = v188[v189[14]];
        v187[v189[15]] = v188[v189[15]];
        uint64_t v210 = v185[7];
        char v211 = &v12[v210];
        uint64_t v212 = &v13[v210];
        v268(&v12[v210], v212, v183);
        uint64_t v213 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v214 = v213[5];
        uint64_t v215 = &v211[v214];
        uint64_t v216 = &v212[v214];
        char v217 = v216[4];
        *(_DWORD *)uint64_t v215 = *(_DWORD *)v216;
        v215[4] = v217;
        uint64_t v218 = v213[6];
        v219 = &v211[v218];
        uint64_t v220 = &v212[v218];
        char v221 = v220[4];
        *(_DWORD *)v219 = *(_DWORD *)v220;
        v219[4] = v221;
        v211[v213[7]] = v212[v213[7]];
        v211[v213[8]] = v212[v213[8]];
        v211[v213[9]] = v212[v213[9]];
        uint64_t v222 = v213[10];
        uint64_t v223 = &v211[v222];
        uint64_t v224 = &v212[v222];
        char v225 = v224[4];
        *(_DWORD *)uint64_t v223 = *(_DWORD *)v224;
        v223[4] = v225;
        v211[v213[11]] = v212[v213[11]];
        uint64_t v226 = v213[12];
        uint64_t v227 = &v211[v226];
        uint64_t v228 = &v212[v226];
        char v229 = v228[4];
        *(_DWORD *)uint64_t v227 = *(_DWORD *)v228;
        v227[4] = v229;
        uint64_t v230 = v213[13];
        uint64_t v231 = &v211[v230];
        uint64_t v232 = &v212[v230];
        char v233 = v232[4];
        *(_DWORD *)uint64_t v231 = *(_DWORD *)v232;
        v231[4] = v233;
        v211[v213[14]] = v212[v213[14]];
        v211[v213[15]] = v212[v213[15]];
        goto LABEL_38;
      case 0x13u:
        uint64_t v234 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v234 - 8) + 16))(v12, v13, v234);
        uint64_t v235 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v236 = v235[5];
        v237 = &v12[v236];
        uint64_t v238 = &v13[v236];
        char v239 = v238[4];
        *(_DWORD *)v237 = *(_DWORD *)v238;
        v237[4] = v239;
        uint64_t v240 = v235[6];
        uint64_t v241 = &v12[v240];
        uint64_t v242 = &v13[v240];
        char v243 = v242[4];
        *(_DWORD *)uint64_t v241 = *(_DWORD *)v242;
        v241[4] = v243;
        v12[v235[7]] = v13[v235[7]];
        uint64_t v244 = v235[8];
        v245 = &v12[v244];
        uint64_t v246 = &v13[v244];
        char v247 = v246[16];
        *(_OWORD *)v245 = *(_OWORD *)v246;
        v245[16] = v247;
        goto LABEL_38;
      case 0x14u:
        uint64_t v248 = type metadata accessor for UUID();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v248 - 8) + 16))(v12, v13, v248);
        uint64_t v249 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v12[*(int *)(v249 + 20)] = *(_DWORD *)&v13[*(int *)(v249 + 20)];
        *(_DWORD *)&v12[*(int *)(v249 + 24)] = *(_DWORD *)&v13[*(int *)(v249 + 24)];
        goto LABEL_38;
      case 0x15u:
        uint64_t v250 = type metadata accessor for UUID();
        uint64_t v251 = *(void *)(v250 - 8);
        uint64_t v252 = *(void (**)(char *, char *, uint64_t))(v251 + 16);
        v252(v12, v13, v250);
        uint64_t v253 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v252(&v12[v253[5]], &v13[v253[5]], v250);
        uint64_t v254 = v253[6];
        v255 = &v12[v254];
        v256 = &v13[v254];
        void *v255 = *v256;
        v255[1] = v256[1];
        uint64_t v257 = v253[7];
        v269 = &v12[v257];
        v258 = &v13[v257];
        v259 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48);
        swift_bridgeObjectRetain();
        if (v259(v258, 1, v250))
        {
          uint64_t v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v269, v258, *(void *)(*(void *)(v260 - 8) + 64));
        }
        else
        {
          v252(v269, v258, v250);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v251 + 56))(v269, 0, 1, v250);
        }
        uint64_t v261 = v253[8];
        v262 = &v12[v261];
        v263 = &v13[v261];
        void *v262 = *v263;
        v262[1] = v263[1];
        swift_bridgeObjectRetain();
LABEL_38:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
        break;
    }
  }
  uint64_t v264 = *(int *)(a3 + 24);
  v265 = (void *)((char *)a1 + v264);
  v266 = (void *)((char *)a2 + v264);
  void *v265 = *v266;
  v265[1] = v266[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for __RKEntityInteractionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
    *(void *)&a1[*(int *)(v11 + 48)] = *(void *)&a2[*(int *)(v11 + 48)];
    *(void *)&a1[*(int *)(v11 + 64)] = *(void *)&a2[*(int *)(v11 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    *(_DWORD *)&a1[*(int *)(v9 + 48)] = *(_DWORD *)&a2[*(int *)(v9 + 48)];
    a1[*(int *)(v9 + 64)] = a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v17 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      uint64_t v18 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      *(_OWORD *)&v14[v18[5]] = *(_OWORD *)&v15[v18[5]];
      v14[v18[6]] = v15[v18[6]];
      uint64_t v19 = v18[7];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      v20[8] = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v14[v18[8]] = v15[v18[8]];
      v14[v18[9]] = v15[v18[9]];
      v14[v18[10]] = v15[v18[10]];
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      uint64_t v22 = type metadata accessor for UUID();
      char v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      v23(v14, v15, v22);
      uint64_t v24 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v23(&v14[*(int *)(v24 + 20)], &v15[*(int *)(v24 + 20)], v22);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v14, v15, v25);
      uint64_t v26 = type metadata accessor for __RKEntityCustomActionArguments(0);
      *(_OWORD *)&v14[*(int *)(v26 + 20)] = *(_OWORD *)&v15[*(int *)(v26 + 20)];
      *(void *)&v14[*(int *)(v26 + 24)] = *(void *)&v15[*(int *)(v26 + 24)];
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v14, v15, v27);
      uint64_t v28 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      uint64_t v29 = v28[5];
      uint64_t v30 = &v14[v29];
      uint64_t v31 = &v15[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      uint64_t v32 = v28[6];
      uint64_t v33 = &v14[v32];
      uint64_t v34 = &v15[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      v14[v28[7]] = v15[v28[7]];
      v14[v28[8]] = v15[v28[8]];
      swift_storeEnumTagMultiPayload();
      break;
    case 4u:
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v14, v15, v35);
      uint64_t v36 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&v14[*(int *)(v36 + 20)] = *(_DWORD *)&v15[*(int *)(v36 + 20)];
      uint64_t v37 = *(int *)(v36 + 24);
      uint64_t v38 = &v14[v37];
      uint64_t v39 = &v15[v37];
      v38[4] = v39[4];
      *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
      swift_storeEnumTagMultiPayload();
      break;
    case 7u:
      uint64_t v40 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v14, v15, v40);
      char v41 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v42 = v41[5];
      uint64_t v43 = &v14[v42];
      uint64_t v44 = &v15[v42];
      *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      uint64_t v45 = v41[6];
      uint64_t v46 = &v14[v45];
      char v47 = &v15[v45];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      v46[4] = v47[4];
      v14[v41[7]] = v15[v41[7]];
      v14[v41[8]] = v15[v41[8]];
      v14[v41[9]] = v15[v41[9]];
      uint64_t v48 = v41[10];
      uint64_t v49 = &v14[v48];
      uint64_t v50 = &v15[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      v14[v41[11]] = v15[v41[11]];
      uint64_t v51 = v41[12];
      uint64_t v52 = &v14[v51];
      uint64_t v53 = &v15[v51];
      v52[4] = v53[4];
      *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
      uint64_t v54 = v41[13];
      uint64_t v55 = &v14[v54];
      uint64_t v56 = &v15[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      v14[v41[14]] = v15[v41[14]];
      v14[v41[15]] = v15[v41[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 8u:
      uint64_t v57 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v14, v15, v57);
      uint64_t v58 = type metadata accessor for __RKEntityForceActionArguments(0);
      uint64_t v59 = *(int *)(v58 + 20);
      uint64_t v60 = &v14[v59];
      char v61 = &v15[v59];
      *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
      v60[16] = v61[16];
      uint64_t v62 = *(int *)(v58 + 24);
      uint64_t v63 = &v14[v62];
      uint64_t v64 = &v15[v62];
      v63[16] = v64[16];
      *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      swift_storeEnumTagMultiPayload();
      break;
    case 9u:
      uint64_t v65 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v14, v15, v65);
      char v66 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v67 = v66[5];
      uint64_t v68 = &v14[v67];
      uint64_t v69 = &v15[v67];
      *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
      v68[4] = v69[4];
      uint64_t v70 = v66[6];
      uint64_t v71 = &v14[v70];
      uint64_t v72 = &v15[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      v14[v66[7]] = v15[v66[7]];
      v14[v66[8]] = v15[v66[8]];
      v14[v66[9]] = v15[v66[9]];
      uint64_t v73 = v66[10];
      uint64_t v74 = &v14[v73];
      uint64_t v75 = &v15[v73];
      *(_DWORD *)uint64_t v74 = *(_DWORD *)v75;
      v74[4] = v75[4];
      v14[v66[11]] = v15[v66[11]];
      uint64_t v76 = v66[12];
      uint64_t v77 = &v14[v76];
      uint64_t v78 = &v15[v76];
      v77[4] = v78[4];
      *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
      uint64_t v79 = v66[13];
      char v80 = &v14[v79];
      uint64_t v81 = &v15[v79];
      *(_DWORD *)char v80 = *(_DWORD *)v81;
      v80[4] = v81[4];
      v14[v66[14]] = v15[v66[14]];
      v14[v66[15]] = v15[v66[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0xAu:
      uint64_t v220 = a3;
      uint64_t v82 = type metadata accessor for UUID();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
      v84(v14, v15, v82);
      uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(void *)&v14[started[5]] = *(void *)&v15[started[5]];
      v14[started[6]] = v15[started[6]];
      *(void *)&v14[started[7]] = *(void *)&v15[started[7]];
      *(void *)&v14[started[8]] = *(void *)&v15[started[8]];
      v14[started[9]] = v15[started[9]];
      v14[started[10]] = v15[started[10]];
      *(_DWORD *)&v14[started[11]] = *(_DWORD *)&v15[started[11]];
      v14[started[12]] = v15[started[12]];
      uint64_t v86 = started[13];
      uint64_t v87 = &v14[v86];
      uint64_t v88 = &v15[v86];
      *(void *)uint64_t v87 = *(void *)v88;
      v87[8] = v88[8];
      uint64_t v89 = started[14];
      char v90 = &v14[v89];
      uint64_t v91 = &v15[v89];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v91, 1, v82)) {
        goto LABEL_19;
      }
      v84(v90, v91, v82);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v90, 0, 1, v82);
      goto LABEL_34;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      uint64_t v93 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 32))(v14, v15, v93);
      swift_storeEnumTagMultiPayload();
      break;
    case 0xEu:
      uint64_t v220 = a3;
      uint64_t v94 = type metadata accessor for UUID();
      uint64_t v95 = *(void *)(v94 - 8);
      uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
      v96(v14, v15, v94);
      uint64_t v97 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      uint64_t v98 = v97[5];
      uint64_t v99 = &v14[v98];
      uint64_t v100 = &v15[v98];
      *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
      v99[16] = v100[16];
      uint64_t v101 = v97[6];
      char v102 = &v14[v101];
      uint64_t v103 = &v15[v101];
      *(_OWORD *)char v102 = *(_OWORD *)v103;
      v102[16] = v103[16];
      uint64_t v104 = v97[7];
      uint64_t v105 = &v14[v104];
      uint64_t v106 = &v15[v104];
      v105[4] = v106[4];
      *(_DWORD *)uint64_t v105 = *(_DWORD *)v106;
      uint64_t v107 = v97[8];
      uint64_t v108 = &v14[v107];
      char v109 = &v15[v107];
      v108[4] = v109[4];
      *(_DWORD *)uint64_t v108 = *(_DWORD *)v109;
      v14[v97[9]] = v15[v97[9]];
      v14[v97[10]] = v15[v97[10]];
      v14[v97[11]] = v15[v97[11]];
      v14[v97[12]] = v15[v97[12]];
      uint64_t v110 = v97[13];
      char v111 = &v14[v110];
      uint64_t v112 = &v15[v110];
      *(_DWORD *)char v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      uint64_t v113 = v97[14];
      uint64_t v114 = &v14[v113];
      uint64_t v115 = &v15[v113];
      *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      uint64_t v116 = v97[15];
      char v90 = &v14[v116];
      uint64_t v91 = &v15[v116];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v91, 1, v94))
      {
LABEL_19:
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
      }
      else
      {
        v96(v90, v91, v94);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v90, 0, 1, v94);
      }
      goto LABEL_34;
    case 0x10u:
      uint64_t v117 = type metadata accessor for UUID();
      uint64_t v118 = *(void (**)(char *, char *, uint64_t))(*(void *)(v117 - 8) + 32);
      v118(v14, v15, v117);
      char v119 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v118(&v14[v119[5]], &v15[v119[5]], v117);
      uint64_t v120 = v119[6];
      uint64_t v121 = &v14[v120];
      uint64_t v122 = &v15[v120];
      *(_DWORD *)uint64_t v121 = *(_DWORD *)v122;
      v121[4] = v122[4];
      uint64_t v123 = v119[7];
      uint64_t v124 = &v14[v123];
      uint64_t v125 = &v15[v123];
      *(_DWORD *)uint64_t v124 = *(_DWORD *)v125;
      v124[4] = v125[4];
      uint64_t v126 = v119[8];
      char v127 = &v14[v126];
      uint64_t v128 = &v15[v126];
      *(_OWORD *)char v127 = *(_OWORD *)v128;
      v127[16] = v128[16];
      v14[v119[9]] = v15[v119[9]];
      v14[v119[10]] = v15[v119[10]];
      v14[v119[11]] = v15[v119[11]];
      uint64_t v129 = v119[12];
      uint64_t v130 = &v14[v129];
      char v131 = &v15[v129];
      v130[4] = v131[4];
      *(_DWORD *)uint64_t v130 = *(_DWORD *)v131;
      uint64_t v132 = v119[13];
      uint64_t v133 = &v14[v132];
      uint64_t v134 = &v15[v132];
      *(_DWORD *)uint64_t v133 = *(_DWORD *)v134;
      v133[4] = v134[4];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x11u:
      uint64_t v135 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32))(v14, v15, v135);
      uint64_t v136 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      uint64_t v137 = v136[5];
      uint64_t v138 = &v14[v137];
      char v139 = &v15[v137];
      *(_DWORD *)uint64_t v138 = *(_DWORD *)v139;
      v138[4] = v139[4];
      uint64_t v140 = v136[6];
      uint64_t v141 = &v14[v140];
      uint64_t v142 = &v15[v140];
      *(_DWORD *)uint64_t v141 = *(_DWORD *)v142;
      v141[4] = v142[4];
      uint64_t v143 = v136[7];
      uint64_t v144 = &v14[v143];
      uint64_t v145 = &v15[v143];
      v144[16] = v145[16];
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
      uint64_t v146 = v136[8];
      int v147 = &v14[v146];
      uint64_t v148 = &v15[v146];
      v147[4] = v148[4];
      *(_DWORD *)int v147 = *(_DWORD *)v148;
      uint64_t v149 = v136[9];
      uint64_t v150 = &v14[v149];
      uint64_t v151 = &v15[v149];
      v150[16] = v151[16];
      *(_OWORD *)uint64_t v150 = *(_OWORD *)v151;
      v14[v136[10]] = v15[v136[10]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x12u:
      uint64_t v152 = type metadata accessor for UUID();
      uint64_t v153 = *(void (**)(char *, char *))(*(void *)(v152 - 8) + 32);
      uint64_t v218 = v152;
      uint64_t v154 = v152;
      v153(v14, v15);
      uint64_t v155 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      ((void (*)(char *, char *, uint64_t))v153)(&v14[v155[5]], &v15[v155[5]], v154);
      uint64_t v156 = v155[6];
      int v157 = &v14[v156];
      uint64_t v221 = a3;
      uint64_t v158 = &v15[v156];
      ((void (*)(char *, char *, uint64_t))v153)(&v14[v156], &v15[v156], v154);
      uint64_t v159 = (void (*)(char *, char *, uint64_t))v153;
      uint64_t v160 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      uint64_t v161 = v160[5];
      char v162 = &v157[v161];
      uint64_t v163 = &v158[v161];
      *(_DWORD *)char v162 = *(_DWORD *)v163;
      v162[4] = v163[4];
      uint64_t v164 = v160[6];
      uint64_t v165 = &v157[v164];
      char v166 = &v158[v164];
      *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
      v165[4] = v166[4];
      v157[v160[7]] = v158[v160[7]];
      v157[v160[8]] = v158[v160[8]];
      v157[v160[9]] = v158[v160[9]];
      uint64_t v167 = v160[10];
      uint64_t v168 = &v157[v167];
      uint64_t v169 = &v158[v167];
      *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
      v168[4] = v169[4];
      v157[v160[11]] = v158[v160[11]];
      uint64_t v170 = v160[12];
      uint64_t v171 = &v157[v170];
      uint64_t v172 = &v158[v170];
      v171[4] = v172[4];
      *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
      uint64_t v173 = v160[13];
      char v174 = &v157[v173];
      uint64_t v175 = &v158[v173];
      *(_DWORD *)char v174 = *(_DWORD *)v175;
      v174[4] = v175[4];
      v157[v160[14]] = v158[v160[14]];
      uint64_t v176 = v160[15];
      LOBYTE(v174) = v158[v176];
      a3 = v221;
      v157[v176] = (char)v174;
      uint64_t v177 = v155[7];
      char v178 = &v14[v177];
      uint64_t v179 = &v15[v177];
      v159(&v14[v177], v179, v218);
      uint64_t v180 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      uint64_t v181 = v180[5];
      char v182 = &v178[v181];
      uint64_t v183 = &v179[v181];
      *(_DWORD *)char v182 = *(_DWORD *)v183;
      v182[4] = v183[4];
      uint64_t v184 = v180[6];
      char v185 = &v178[v184];
      uint64_t v186 = &v179[v184];
      *(_DWORD *)char v185 = *(_DWORD *)v186;
      v185[4] = v186[4];
      v178[v180[7]] = v179[v180[7]];
      v178[v180[8]] = v179[v180[8]];
      v178[v180[9]] = v179[v180[9]];
      uint64_t v187 = v180[10];
      uint64_t v188 = &v178[v187];
      uint64_t v189 = &v179[v187];
      *(_DWORD *)uint64_t v188 = *(_DWORD *)v189;
      v188[4] = v189[4];
      v178[v180[11]] = v179[v180[11]];
      uint64_t v190 = v180[12];
      uint64_t v191 = &v178[v190];
      uint64_t v192 = &v179[v190];
      v191[4] = v192[4];
      *(_DWORD *)uint64_t v191 = *(_DWORD *)v192;
      uint64_t v193 = v180[13];
      uint64_t v194 = &v178[v193];
      uint64_t v195 = &v179[v193];
      *(_DWORD *)uint64_t v194 = *(_DWORD *)v195;
      v194[4] = v195[4];
      v178[v180[14]] = v179[v180[14]];
      v178[v180[15]] = v179[v180[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x13u:
      uint64_t v196 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32))(v14, v15, v196);
      char v197 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      uint64_t v198 = v197[5];
      uint64_t v199 = &v14[v198];
      uint64_t v200 = &v15[v198];
      *(_DWORD *)uint64_t v199 = *(_DWORD *)v200;
      v199[4] = v200[4];
      uint64_t v201 = v197[6];
      uint64_t v202 = &v14[v201];
      uint64_t v203 = &v15[v201];
      *(_DWORD *)uint64_t v202 = *(_DWORD *)v203;
      v202[4] = v203[4];
      v14[v197[7]] = v15[v197[7]];
      uint64_t v204 = v197[8];
      char v205 = &v14[v204];
      uint64_t v206 = &v15[v204];
      v205[16] = v206[16];
      *(_OWORD *)char v205 = *(_OWORD *)v206;
      swift_storeEnumTagMultiPayload();
      break;
    case 0x14u:
      uint64_t v207 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v207 - 8) + 32))(v14, v15, v207);
      uint64_t v208 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&v14[*(int *)(v208 + 20)] = *(_DWORD *)&v15[*(int *)(v208 + 20)];
      *(_DWORD *)&v14[*(int *)(v208 + 24)] = *(_DWORD *)&v15[*(int *)(v208 + 24)];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x15u:
      uint64_t v220 = a3;
      uint64_t v209 = type metadata accessor for UUID();
      uint64_t v210 = *(void *)(v209 - 8);
      char v211 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      v211(v14, v15, v209);
      uint64_t v212 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      char v217 = v211;
      v211(&v14[v212[5]], &v15[v212[5]], v209);
      *(_OWORD *)&v14[v212[6]] = *(_OWORD *)&v15[v212[6]];
      uint64_t v213 = v212[7];
      __dst = &v14[v213];
      uint64_t v214 = &v15[v213];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(&v15[v213], 1, v209))
      {
        uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(__dst, v214, *(void *)(*(void *)(v215 - 8) + 64));
      }
      else
      {
        v217(__dst, v214, v209);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v210 + 56))(__dst, 0, 1, v209);
      }
      *(_OWORD *)&v14[v212[8]] = *(_OWORD *)&v15[v212[8]];
LABEL_34:
      swift_storeEnumTagMultiPayload();
      a3 = v220;
      break;
    default:
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      break;
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for __RKEntityInteractionSpecification(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(void *)&a1[*(int *)(v11 + 48)] = *(void *)&a2[*(int *)(v11 + 48)];
      *(void *)&a1[*(int *)(v11 + 64)] = *(void *)&a2[*(int *)(v11 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)&a1[*(int *)(v9 + 48)] = *(_DWORD *)&a2[*(int *)(v9 + 48)];
      a1[*(int *)(v9 + 64)] = a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    outlined destroy of __RKEntityTriggerSpecification((uint64_t)&a1[v13], type metadata accessor for __RKEntityActionSpecification);
    uint64_t v16 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v17 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
        uint64_t v18 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        *(_OWORD *)&v14[v18[5]] = *(_OWORD *)&v15[v18[5]];
        v14[v18[6]] = v15[v18[6]];
        uint64_t v19 = v18[7];
        uint64_t v20 = &v14[v19];
        uint64_t v21 = &v15[v19];
        v20[8] = v21[8];
        *(void *)uint64_t v20 = *(void *)v21;
        v14[v18[8]] = v15[v18[8]];
        v14[v18[9]] = v15[v18[9]];
        v14[v18[10]] = v15[v18[10]];
        goto LABEL_35;
      case 1u:
        uint64_t v22 = type metadata accessor for UUID();
        char v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
        v23(v14, v15, v22);
        uint64_t v24 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v23(&v14[*(int *)(v24 + 20)], &v15[*(int *)(v24 + 20)], v22);
        goto LABEL_35;
      case 2u:
        uint64_t v25 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v14, v15, v25);
        uint64_t v26 = type metadata accessor for __RKEntityCustomActionArguments(0);
        *(_OWORD *)&v14[*(int *)(v26 + 20)] = *(_OWORD *)&v15[*(int *)(v26 + 20)];
        *(void *)&v14[*(int *)(v26 + 24)] = *(void *)&v15[*(int *)(v26 + 24)];
        goto LABEL_35;
      case 3u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v14, v15, v27);
        uint64_t v28 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        uint64_t v29 = v28[5];
        uint64_t v30 = &v14[v29];
        uint64_t v31 = &v15[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        uint64_t v32 = v28[6];
        uint64_t v33 = &v14[v32];
        uint64_t v34 = &v15[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        v14[v28[7]] = v15[v28[7]];
        v14[v28[8]] = v15[v28[8]];
        goto LABEL_35;
      case 4u:
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v14, v15, v35);
        uint64_t v36 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v14[*(int *)(v36 + 20)] = *(_DWORD *)&v15[*(int *)(v36 + 20)];
        uint64_t v37 = *(int *)(v36 + 24);
        uint64_t v38 = &v14[v37];
        uint64_t v39 = &v15[v37];
        v38[4] = v39[4];
        *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
        goto LABEL_35;
      case 7u:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v14, v15, v40);
        char v41 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v42 = v41[5];
        uint64_t v43 = &v14[v42];
        uint64_t v44 = &v15[v42];
        *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
        v43[4] = v44[4];
        uint64_t v45 = v41[6];
        uint64_t v46 = &v14[v45];
        char v47 = &v15[v45];
        *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
        v46[4] = v47[4];
        v14[v41[7]] = v15[v41[7]];
        v14[v41[8]] = v15[v41[8]];
        v14[v41[9]] = v15[v41[9]];
        uint64_t v48 = v41[10];
        uint64_t v49 = &v14[v48];
        uint64_t v50 = &v15[v48];
        *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
        v49[4] = v50[4];
        v14[v41[11]] = v15[v41[11]];
        uint64_t v51 = v41[12];
        uint64_t v52 = &v14[v51];
        uint64_t v53 = &v15[v51];
        v52[4] = v53[4];
        *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
        uint64_t v54 = v41[13];
        uint64_t v55 = &v14[v54];
        uint64_t v56 = &v15[v54];
        *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
        v55[4] = v56[4];
        v14[v41[14]] = v15[v41[14]];
        v14[v41[15]] = v15[v41[15]];
        goto LABEL_35;
      case 8u:
        uint64_t v57 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v14, v15, v57);
        uint64_t v58 = type metadata accessor for __RKEntityForceActionArguments(0);
        uint64_t v59 = *(int *)(v58 + 20);
        uint64_t v60 = &v14[v59];
        char v61 = &v15[v59];
        *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
        v60[16] = v61[16];
        uint64_t v62 = *(int *)(v58 + 24);
        uint64_t v63 = &v14[v62];
        uint64_t v64 = &v15[v62];
        v63[16] = v64[16];
        *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
        goto LABEL_35;
      case 9u:
        uint64_t v65 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v14, v15, v65);
        char v66 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v67 = v66[5];
        uint64_t v68 = &v14[v67];
        uint64_t v69 = &v15[v67];
        *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
        v68[4] = v69[4];
        uint64_t v70 = v66[6];
        uint64_t v71 = &v14[v70];
        uint64_t v72 = &v15[v70];
        *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
        v71[4] = v72[4];
        v14[v66[7]] = v15[v66[7]];
        v14[v66[8]] = v15[v66[8]];
        v14[v66[9]] = v15[v66[9]];
        uint64_t v73 = v66[10];
        uint64_t v74 = &v14[v73];
        uint64_t v75 = &v15[v73];
        *(_DWORD *)uint64_t v74 = *(_DWORD *)v75;
        v74[4] = v75[4];
        v14[v66[11]] = v15[v66[11]];
        uint64_t v76 = v66[12];
        uint64_t v77 = &v14[v76];
        uint64_t v78 = &v15[v76];
        v77[4] = v78[4];
        *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
        uint64_t v79 = v66[13];
        char v80 = &v14[v79];
        uint64_t v81 = &v15[v79];
        *(_DWORD *)char v80 = *(_DWORD *)v81;
        v80[4] = v81[4];
        v14[v66[14]] = v15[v66[14]];
        v14[v66[15]] = v15[v66[15]];
        goto LABEL_35;
      case 0xAu:
        uint64_t v82 = type metadata accessor for UUID();
        uint64_t v83 = *(void *)(v82 - 8);
        char v217 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        v217(v14, v15, v82);
        uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(void *)&v14[started[5]] = *(void *)&v15[started[5]];
        v14[started[6]] = v15[started[6]];
        *(void *)&v14[started[7]] = *(void *)&v15[started[7]];
        *(void *)&v14[started[8]] = *(void *)&v15[started[8]];
        v14[started[9]] = v15[started[9]];
        v14[started[10]] = v15[started[10]];
        *(_DWORD *)&v14[started[11]] = *(_DWORD *)&v15[started[11]];
        v14[started[12]] = v15[started[12]];
        uint64_t v85 = started[13];
        uint64_t v86 = &v14[v85];
        uint64_t v87 = &v15[v85];
        *(void *)uint64_t v86 = *(void *)v87;
        v86[8] = v87[8];
        uint64_t v88 = started[14];
        uint64_t v89 = &v14[v88];
        char v90 = &v15[v88];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v90, 1, v82)) {
          goto LABEL_20;
        }
        goto LABEL_31;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        uint64_t v92 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 32))(v14, v15, v92);
        goto LABEL_35;
      case 0xEu:
        uint64_t v82 = type metadata accessor for UUID();
        uint64_t v83 = *(void *)(v82 - 8);
        char v217 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        v217(v14, v15, v82);
        uint64_t v93 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        uint64_t v94 = v93[5];
        uint64_t v95 = &v14[v94];
        uint64_t v96 = &v15[v94];
        *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
        v95[16] = v96[16];
        uint64_t v97 = v93[6];
        uint64_t v98 = &v14[v97];
        uint64_t v99 = &v15[v97];
        *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
        v98[16] = v99[16];
        uint64_t v100 = v93[7];
        uint64_t v101 = &v14[v100];
        char v102 = &v15[v100];
        v101[4] = v102[4];
        *(_DWORD *)uint64_t v101 = *(_DWORD *)v102;
        uint64_t v103 = v93[8];
        uint64_t v104 = &v14[v103];
        uint64_t v105 = &v15[v103];
        v104[4] = v105[4];
        *(_DWORD *)uint64_t v104 = *(_DWORD *)v105;
        v14[v93[9]] = v15[v93[9]];
        v14[v93[10]] = v15[v93[10]];
        v14[v93[11]] = v15[v93[11]];
        v14[v93[12]] = v15[v93[12]];
        uint64_t v106 = v93[13];
        uint64_t v107 = &v14[v106];
        uint64_t v108 = &v15[v106];
        *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
        v107[4] = v108[4];
        uint64_t v109 = v93[14];
        uint64_t v110 = &v14[v109];
        char v111 = &v15[v109];
        *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
        v110[4] = v111[4];
        uint64_t v112 = v93[15];
        uint64_t v89 = &v14[v112];
        char v90 = &v15[v112];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v90, 1, v82))
        {
LABEL_20:
          uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
LABEL_31:
          v217(v89, v90, v82);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v89, 0, 1, v82);
        }
        goto LABEL_35;
      case 0x10u:
        uint64_t v113 = type metadata accessor for UUID();
        uint64_t v114 = *(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 32);
        v114(v14, v15, v113);
        uint64_t v115 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v114(&v14[v115[5]], &v15[v115[5]], v113);
        uint64_t v116 = v115[6];
        uint64_t v117 = &v14[v116];
        uint64_t v118 = &v15[v116];
        *(_DWORD *)uint64_t v117 = *(_DWORD *)v118;
        v117[4] = v118[4];
        uint64_t v119 = v115[7];
        uint64_t v120 = &v14[v119];
        uint64_t v121 = &v15[v119];
        *(_DWORD *)uint64_t v120 = *(_DWORD *)v121;
        v120[4] = v121[4];
        uint64_t v122 = v115[8];
        uint64_t v123 = &v14[v122];
        uint64_t v124 = &v15[v122];
        *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
        v123[16] = v124[16];
        v14[v115[9]] = v15[v115[9]];
        v14[v115[10]] = v15[v115[10]];
        v14[v115[11]] = v15[v115[11]];
        uint64_t v125 = v115[12];
        uint64_t v126 = &v14[v125];
        char v127 = &v15[v125];
        v126[4] = v127[4];
        *(_DWORD *)uint64_t v126 = *(_DWORD *)v127;
        uint64_t v128 = v115[13];
        uint64_t v129 = &v14[v128];
        uint64_t v130 = &v15[v128];
        *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
        v129[4] = v130[4];
        goto LABEL_35;
      case 0x11u:
        uint64_t v131 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32))(v14, v15, v131);
        uint64_t v132 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        uint64_t v133 = v132[5];
        uint64_t v134 = &v14[v133];
        uint64_t v135 = &v15[v133];
        *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
        v134[4] = v135[4];
        uint64_t v136 = v132[6];
        uint64_t v137 = &v14[v136];
        uint64_t v138 = &v15[v136];
        *(_DWORD *)uint64_t v137 = *(_DWORD *)v138;
        v137[4] = v138[4];
        uint64_t v139 = v132[7];
        uint64_t v140 = &v14[v139];
        uint64_t v141 = &v15[v139];
        v140[16] = v141[16];
        *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
        uint64_t v142 = v132[8];
        uint64_t v143 = &v14[v142];
        uint64_t v144 = &v15[v142];
        v143[4] = v144[4];
        *(_DWORD *)uint64_t v143 = *(_DWORD *)v144;
        uint64_t v145 = v132[9];
        uint64_t v146 = &v14[v145];
        int v147 = &v15[v145];
        v146[16] = v147[16];
        *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
        v14[v132[10]] = v15[v132[10]];
        goto LABEL_35;
      case 0x12u:
        uint64_t v148 = type metadata accessor for UUID();
        uint64_t v149 = *(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 32);
        v149(v14, v15, v148);
        uint64_t v150 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v149(&v14[v150[5]], &v15[v150[5]], v148);
        uint64_t v215 = v149;
        uint64_t v151 = v150[6];
        uint64_t v152 = &v14[v151];
        uint64_t v153 = &v15[v151];
        v149(&v14[v151], &v15[v151], v148);
        uint64_t v154 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        uint64_t v155 = v154[5];
        uint64_t v156 = &v152[v155];
        int v157 = &v153[v155];
        *(_DWORD *)uint64_t v156 = *(_DWORD *)v157;
        v156[4] = v157[4];
        uint64_t v158 = v154[6];
        uint64_t v159 = &v152[v158];
        uint64_t v160 = &v153[v158];
        *(_DWORD *)uint64_t v159 = *(_DWORD *)v160;
        v159[4] = v160[4];
        v152[v154[7]] = v153[v154[7]];
        v152[v154[8]] = v153[v154[8]];
        v152[v154[9]] = v153[v154[9]];
        uint64_t v161 = v154[10];
        char v162 = &v152[v161];
        uint64_t v163 = &v153[v161];
        *(_DWORD *)char v162 = *(_DWORD *)v163;
        v162[4] = v163[4];
        v152[v154[11]] = v153[v154[11]];
        uint64_t v164 = v154[12];
        uint64_t v165 = &v152[v164];
        char v166 = &v153[v164];
        v165[4] = v166[4];
        *(_DWORD *)uint64_t v165 = *(_DWORD *)v166;
        uint64_t v167 = v154[13];
        uint64_t v168 = &v152[v167];
        uint64_t v169 = &v153[v167];
        *(_DWORD *)uint64_t v168 = *(_DWORD *)v169;
        v168[4] = v169[4];
        v152[v154[14]] = v153[v154[14]];
        v152[v154[15]] = v153[v154[15]];
        uint64_t v170 = v150[7];
        uint64_t v171 = &v14[v170];
        uint64_t v172 = &v15[v170];
        v215(&v14[v170], v172, v148);
        uint64_t v173 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        uint64_t v174 = v173[5];
        uint64_t v175 = &v171[v174];
        uint64_t v176 = &v172[v174];
        *(_DWORD *)uint64_t v175 = *(_DWORD *)v176;
        v175[4] = v176[4];
        uint64_t v177 = v173[6];
        char v178 = &v171[v177];
        uint64_t v179 = &v172[v177];
        *(_DWORD *)char v178 = *(_DWORD *)v179;
        v178[4] = v179[4];
        v171[v173[7]] = v172[v173[7]];
        v171[v173[8]] = v172[v173[8]];
        v171[v173[9]] = v172[v173[9]];
        uint64_t v180 = v173[10];
        uint64_t v181 = &v171[v180];
        char v182 = &v172[v180];
        *(_DWORD *)uint64_t v181 = *(_DWORD *)v182;
        v181[4] = v182[4];
        v171[v173[11]] = v172[v173[11]];
        uint64_t v183 = v173[12];
        uint64_t v184 = &v171[v183];
        char v185 = &v172[v183];
        v184[4] = v185[4];
        *(_DWORD *)uint64_t v184 = *(_DWORD *)v185;
        uint64_t v186 = v173[13];
        uint64_t v187 = &v171[v186];
        uint64_t v188 = &v172[v186];
        *(_DWORD *)uint64_t v187 = *(_DWORD *)v188;
        v187[4] = v188[4];
        v171[v173[14]] = v172[v173[14]];
        v171[v173[15]] = v172[v173[15]];
        goto LABEL_35;
      case 0x13u:
        uint64_t v189 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v189 - 8) + 32))(v14, v15, v189);
        uint64_t v190 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        uint64_t v191 = v190[5];
        uint64_t v192 = &v14[v191];
        uint64_t v193 = &v15[v191];
        *(_DWORD *)uint64_t v192 = *(_DWORD *)v193;
        v192[4] = v193[4];
        uint64_t v194 = v190[6];
        uint64_t v195 = &v14[v194];
        uint64_t v196 = &v15[v194];
        *(_DWORD *)uint64_t v195 = *(_DWORD *)v196;
        v195[4] = v196[4];
        v14[v190[7]] = v15[v190[7]];
        uint64_t v197 = v190[8];
        uint64_t v198 = &v14[v197];
        uint64_t v199 = &v15[v197];
        v198[16] = v199[16];
        *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
        goto LABEL_35;
      case 0x14u:
        uint64_t v200 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v200 - 8) + 32))(v14, v15, v200);
        uint64_t v201 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v14[*(int *)(v201 + 20)] = *(_DWORD *)&v15[*(int *)(v201 + 20)];
        *(_DWORD *)&v14[*(int *)(v201 + 24)] = *(_DWORD *)&v15[*(int *)(v201 + 24)];
        goto LABEL_35;
      case 0x15u:
        uint64_t v202 = type metadata accessor for UUID();
        uint64_t v218 = *(void *)(v202 - 8);
        uint64_t v203 = *(void (**)(char *, char *, uint64_t))(v218 + 32);
        v203(v14, v15, v202);
        uint64_t v204 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        uint64_t v216 = v203;
        v203(&v14[v204[5]], &v15[v204[5]], v202);
        *(_OWORD *)&v14[v204[6]] = *(_OWORD *)&v15[v204[6]];
        uint64_t v205 = v204[7];
        uint64_t v206 = &v14[v205];
        uint64_t v207 = &v15[v205];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(&v15[v205], 1, v202))
        {
          uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v206, v207, *(void *)(*(void *)(v208 - 8) + 64));
        }
        else
        {
          v216(v206, v207, v202);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v218 + 56))(v206, 0, 1, v202);
        }
        *(_OWORD *)&v14[v204[8]] = *(_OWORD *)&v15[v204[8]];
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
        break;
    }
  }
  uint64_t v209 = *(int *)(a3 + 24);
  uint64_t v210 = &a1[v209];
  char v211 = &a2[v209];
  uint64_t v213 = *(void *)v211;
  uint64_t v212 = *((void *)v211 + 1);
  *(void *)uint64_t v210 = v213;
  *((void *)v210 + 1) = v212;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227E7426C);
}

uint64_t sub_227E7426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227E743A4);
}

uint64_t sub_227E743A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for __RKEntityActionSpecification(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for __RKEntityInteractionSpecification()
{
  uint64_t result = type metadata accessor for __RKEntityTriggerSpecification(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for __RKEntityActionSpecification(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityInteractionSpecification.CodingKeys()
{
  return &unk_26DC8D170;
}

void *type metadata accessor for __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  return &unk_26DC8D200;
}

void *type metadata accessor for __RKEntitySetOpacityActionArguments.CodingKeys()
{
  return &unk_26DC8D290;
}

void *type metadata accessor for __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  return &unk_26DC8D320;
}

uint64_t getEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E7473CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  return &unk_26DC8D3B0;
}

void *type metadata accessor for __RKEntitySpinActionArguments.CodingKeys()
{
  return &unk_26DC8D440;
}

uint64_t getEnumTagSinglePayload for __RKEntitySwapEntityActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntitySwapEntityActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E748E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntitySwapEntityActionArguments.CodingKeys()
{
  return &unk_26DC8D4D0;
}

void *type metadata accessor for __RKEntityForceActionArguments.CodingKeys()
{
  return &unk_26DC8D560;
}

void *type metadata accessor for __RKEntityTransformActionArguments.CodingKeys()
{
  return &unk_26DC8D5F0;
}

uint64_t getEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E74A9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityAudioActionArguments.CodingKeys()
{
  return &unk_26DC8D680;
}

void *type metadata accessor for __RKEntityEmphasisActionArguments.CodingKeys()
{
  return &unk_26DC8D710;
}

void *type metadata accessor for __RKEntityHideActionArguments.CodingKeys()
{
  return &unk_26DC8D7A0;
}

uint64_t getEnumTagSinglePayload for __RKEntityTransformActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityTransformActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E74C50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityShowActionArguments.CodingKeys()
{
  return &unk_26DC8D830;
}

void *type metadata accessor for __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  return &unk_26DC8D8C0;
}

void *type metadata accessor for __RKEntityStopAnimateActionArguments.CodingKeys()
{
  return &unk_26DC8D950;
}

uint64_t getEnumTagSinglePayload for __RKEntityStartAnimateActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityStartAnimateActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E74E08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityStartAnimateActionArguments.CodingKeys()
{
  return &unk_26DC8D9E0;
}

void *type metadata accessor for __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  return &unk_26DC8DA70;
}

void *type metadata accessor for __RKEntityFadeActionArguments.CodingKeys()
{
  return &unk_26DC8DB00;
}

void *type metadata accessor for __RKFadeSceneActionArguments.CodingKeys()
{
  return &unk_26DC8DB90;
}

void *type metadata accessor for __RKChangeSceneActionArguments.CodingKeys()
{
  return &unk_26DC8DC20;
}

void *type metadata accessor for __RKEntityCustomActionArguments.CodingKeys()
{
  return &unk_26DC8DCB0;
}

void *type metadata accessor for __RKWaitActionArguments.CodingKeys()
{
  return &unk_26DC8DD40;
}

uint64_t getEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E74FFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityActionGroupArguments.CodingKeys()
{
  return &unk_26DC8DDD0;
}

void *type metadata accessor for __RKEntityActionSpecification.ActionError()
{
  return &unk_26DC8DE60;
}

void *type metadata accessor for __RKEntityActionSpecification.CodingKeys()
{
  return &unk_26DC8DEF0;
}

void *type metadata accessor for __RKEntityTriggerSpecification.TriggerError()
{
  return &unk_26DC8DF80;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CodingKeys()
{
  return &unk_26DC8E010;
}

void *type metadata accessor for __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  return &unk_26DC8E0A0;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityInteractionSpecification.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E7515CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  return &unk_26DC8E130;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return &unk_26DC8E1C0;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityGroupActionOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E75270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  return &unk_26DC8E250;
}

void *type metadata accessor for __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return &unk_26DC8E2E0;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E75354);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return &unk_26DC8E370;
}

unint64_t specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t specialized __RKEntityActionGroupArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726564726FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x766973756C637865 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E756F43706F6F6CLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x766973756C637865 && a2 == 0xEF736B636F6C4265)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized __RKEntityCustomActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022834F110 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72416D6F74737563 && a2 == 0xEF73746E656D7567)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __RKChangeSceneActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F6F52656E656373 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022834F130)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized __RKFadeSceneActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x704F746567726174 && a2 == 0xED00007974696361;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized __RKEntityFadeActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x704F746567726174 && a2 == 0xED00007974696361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __RKEntityStartAnimateActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E756F43706F6F6CLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000022834F150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7261745370696C63 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6172754470696C63 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6576655270696C63 && a2 == 0xEC00000073657372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6576655270696C63 && a2 == 0xEC00000064657372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE0064656570536ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696475416574756DLL && a2 == 0xE90000000000006FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6961476F69647561 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E41746567726174 && a2 == 0xEF6E6F6974616D69)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t specialized __RKEntityShowActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E4965646166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x61704F6C616E6966 && a2 == 0xEC00000079746963 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022834F170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022834F190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000022834F1B0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t specialized __RKEntityHideActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74754F65646166 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x61704F6C616E6966 && a2 == 0xEC00000079746963 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022834F170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022834F190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022834F1D0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t specialized __RKEntityEmphasisActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022834F1F0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized __RKEntityAudioActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73706F6F6CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4D6C616974617073 && a2 == 0xEB0000000065646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000022834F150)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized __RKEntityTransformActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61746E6569726F5FLL && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6570795465766F6DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022834F170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022834F190 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022834F210)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t specialized __RKEntityForceActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563726F66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __RKEntitySwapEntityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656772615477656ELL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74754F646C697562 && a2 == 0xEE006E6F69746341 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x416E49646C697562 && a2 == 0xED00006E6F697463)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized __RKEntitySpinActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized __RKEntityOrbitEntityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726154746F766970 && a2 == 0xEB00000000746567 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x416C61746962726FLL && a2 == 0xEB00000000736978 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F54746E6569726FLL && a2 == 0xEC00000068746150 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x657269446E697073 && a2 == 0xED00006E6F697463 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022834F170 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022834F190)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t specialized __RKEntityLookAtCameraActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022834EB50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F746365567075 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73706F6F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized __RKEntitySetOpacityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7974696361706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __RKEntityPlayTimelineActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000022834F230 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000022834F250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000022834F270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000022834F2A0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized __RKEntityInteractionSpecification.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656767697274 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022834F2C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t ImageBasedLightComponent.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return outlined copy of ImageBasedLightComponent.Source(v2, v3);
}

uint64_t outlined copy of ImageBasedLightComponent.Source(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t ImageBasedLightComponent.source.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t result = outlined consume of ImageBasedLightComponent.Source(*(void *)v1, *(void *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 16) = v4;
  return result;
}

uint64_t outlined consume of ImageBasedLightComponent.Source(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t (*ImageBasedLightComponent.source.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightComponent.environment.getter()
{
  if ((*(void *)(v0 + 8) & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_retain();
  }
}

uint64_t key path getter for ImageBasedLightComponent.environment : ImageBasedLightComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      outlined copy of ImageBasedLightComponent.Source(*a1, v3);
      uint64_t result = swift_release();
    }
    else
    {
      uint64_t result = outlined consume of ImageBasedLightComponent.Source(*a1, v3);
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t result = outlined copy of ImageBasedLightComponent.Source(*a1, v3);
  }
  *a2 = v4;
  return result;
}

uint64_t key path setter for ImageBasedLightComponent.environment : ImageBasedLightComponent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (unint64_t)(*a1 == 0) << 63;
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  swift_retain();
  uint64_t result = outlined consume of ImageBasedLightComponent.Source(v5, v6);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t ImageBasedLightComponent.environment.setter(uint64_t a1)
{
  unint64_t v3 = (unint64_t)(a1 == 0) << 63;
  uint64_t result = outlined consume of ImageBasedLightComponent.Source(*(void *)v1, *(void *)(v1 + 8));
  *(void *)uint64_t v1 = a1;
  *(void *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t (*ImageBasedLightComponent.environment.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  if ((*(void *)(v1 + 8) & 0x8000000000000000) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return ImageBasedLightComponent.environment.modify;
}

uint64_t ImageBasedLightComponent.environment.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1 == 0;
  if (a2)
  {
    uint64_t v5 = v4 << 63;
    uint64_t v6 = *(void *)v3;
    unint64_t v7 = *(void *)(v3 + 8);
    swift_retain();
    outlined consume of ImageBasedLightComponent.Source(v6, v7);
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v5;
    *(_DWORD *)(v3 + 16) = 0;
    return swift_release();
  }
  else
  {
    uint64_t v9 = v4 << 63;
    uint64_t result = outlined consume of ImageBasedLightComponent.Source(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v9;
    *(_DWORD *)(v3 + 16) = 0;
  }
  return result;
}

uint64_t ImageBasedLightComponent.inheritsRotation.getter()
{
  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t ImageBasedLightComponent.inheritsRotation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 20) = result;
  return result;
}

uint64_t (*ImageBasedLightComponent.inheritsRotation.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ImageBasedLightComponent.intensityExponent.getter()
{
  return *(float *)(v0 + 24);
}

void ImageBasedLightComponent.intensityExponent.setter(float a1)
{
  *(float *)(v1 + 24) = a1;
}

uint64_t (*ImageBasedLightComponent.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightComponent.init(environment:intensityExponent:global:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(unsigned char *)(a3 + 20) = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = (unint64_t)(result == 0) << 63;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 24) = a4;
  *(unsigned char *)(a3 + 28) = a2;
  return result;
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:global:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  int v4 = *(_DWORD *)(result + 16);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_DWORD *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 20) = 0;
  *(float *)(a3 + 24) = a4;
  *(unsigned char *)(a3 + 28) = a2;
  return result;
}

uint64_t ImageBasedLightComponent.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(unsigned char *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = (unint64_t)(result == 0) << 63;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 24) = a3;
  return result;
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v3 = *(_DWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_DWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 20) = 0;
  *(float *)(a2 + 24) = a3;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

uint64_t static ImageBasedLightComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t IBL = REImageBasedLightComponentGetIBL();
  int v3 = 0;
  if (IBL)
  {
    uint64_t v4 = IBL;
    uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 16) = v4;
    swift_beginAccess();
    *(void *)(v6 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (REImageBasedLightComponentGetEnableBlend()
      && (uint64_t IBLBlend = REImageBasedLightComponentGetIBLBlend()) != 0)
    {
      uint64_t v8 = IBLBlend;
      uint64_t v9 = REIBLAssetGetSkyboxTexture();
      if (v9)
      {
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 24) = 0;
        *(void *)(v10 + 16) = v8;
        swift_beginAccess();
        *(void *)(v10 + 24) = v9;
        RERetain();
        REAssetSetSwiftObject();
        RERetain();
        REAssetSetSwiftObject();
        REImageBasedLightComponentGetBlendIBLsFactor();
        int v3 = v11;
        uint64_t v9 = v10 | 0x4000000000000000;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0x8000000000000000;
  }
  REImageBasedLightComponentGetIntensityExponent();
  int v13 = v12;
  IsGlobaluint64_t IBL = REImageBasedLightComponentIsGlobalIBL();
  uint64_t result = REImageBasedLightComponentGetRotationEnabled();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 28) = IsGlobalIBL;
  return result;
}

uint64_t ImageBasedLightComponent.__toCore(_:)()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      REImageBasedLightComponentSetIBLNullable();
      REImageBasedLightComponentSetIBLBlendNullable();
      REImageBasedLightComponentSetEnableBlend();
      REImageBasedLightComponentSetBlendIBLsFactor();
      swift_release();
      swift_release();
    }
    else
    {
      REImageBasedLightComponentSetIBLNullable();
      REImageBasedLightComponentSetEnableBlend();
    }
  }
  else
  {
    swift_retain();
    REImageBasedLightComponentSetIBLNullable();
    REImageBasedLightComponentSetEnableBlend();
    outlined consume of ImageBasedLightComponent.Source(v1, v2);
  }
  REImageBasedLightComponentSetRotationEnabled();
  REImageBasedLightComponentSetGlobalIBL();
  REImageBasedLightComponentSetIntensityExponent();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ImageBasedLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

void static ImageBasedLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t ImageBasedLightReceiverComponent.imageBasedLight.getter()
{
  return swift_retain();
}

uint64_t ImageBasedLightReceiverComponent.imageBasedLight.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ImageBasedLightReceiverComponent.imageBasedLight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightReceiverComponent.init(imageBasedLight:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static ImageBasedLightReceiverComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

uint64_t static ImageBasedLightReceiverComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t IBLEntityNullable = REImageBasedLightReceiverComponentGetIBLEntityNullable();
  if (!IBLEntityNullable)
  {
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t result = Entity.init()();
    goto LABEL_5;
  }
  uint64_t v3 = IBLEntityNullable;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t result = swift_dynamicCastClassUnconditional();
    goto LABEL_5;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(v6 + 232))();
      uint64_t v7 = *(void *)(v5 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v5 + 16) = v3;
      MEMORY[0x22A68E750](v3, v5);
      uint64_t result = swift_release();
      goto LABEL_6;
    }
    uint64_t result = makeEntity(for:)(v3);
LABEL_5:
    uint64_t v5 = result;
LABEL_6:
    *a1 = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ImageBasedLightReceiverComponent()
{
  REImageBasedLightReceiverComponentSetIBLEntity();

  return RENetworkMarkComponentDirty();
}

uint64_t ImageBasedLightReceiverComponent.__toCore(_:)()
{
  REImageBasedLightReceiverComponentSetIBLEntity();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ImageBasedLightReceiverComponent(_DWORD *a1@<X8>)
{
  *a1 = 2028;
}

void static ImageBasedLightReceiverComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2028;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

uint64_t __ImageBasedLightComponent.environment.getter()
{
  return swift_retain();
}

uint64_t __ImageBasedLightComponent.environment.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*__ImageBasedLightComponent.environment.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __ImageBasedLightComponent.intensityExponent.getter()
{
  return *(float *)(v0 + 8);
}

void __ImageBasedLightComponent.intensityExponent.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*__ImageBasedLightComponent.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __ImageBasedLightComponent.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2 = result;
  *(float *)(a2 + 8) = a3;
  return result;
}

BOOL static __ImageBasedLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  if (a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  if (!*(void *)a1) {
    return v3 == 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v5) {
    BOOL v6 = v4 == v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_10:
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 24);
  BOOL result = (v7 | v8) == 0;
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    return v7 == v8;
  }
  return result;
}

uint64_t static __ImageBasedLightComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t IBL = REImageBasedLightComponentGetIBL();
  if (IBL)
  {
    uint64_t v3 = IBL;
    uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 16) = v3;
    swift_beginAccess();
    *(void *)(v5 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = REImageBasedLightComponentGetIntensityExponent();
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v7;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __ImageBasedLightComponent()
{
  if (*(void *)v0 && *(void *)(*(void *)v0 + 16)) {
    REImageBasedLightComponentSetIBLNullable();
  }
  REImageBasedLightComponentSetIntensityExponent();

  return RENetworkMarkComponentDirty();
}

uint64_t __ImageBasedLightComponent.__toCore(_:)()
{
  if (*(void *)v0 && *(void *)(*(void *)v0 + 16)) {
    REImageBasedLightComponentSetIBLNullable();
  }
  REImageBasedLightComponentSetIntensityExponent();

  return RENetworkMarkComponentDirty();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8)) {
    return 0;
  }
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  BOOL result = (*(void *)a1 | v3) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return specialized static EnvironmentResource.areEqual(_:_:)(v2, v3);
  }
  return result;
}

uint64_t ImageBasedLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v18[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  BOOL v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(v1 + 8);
  int v11 = *(_DWORD *)(v1 + 16);
  char v12 = *(unsigned char *)(v1 + 20);
  int v13 = *(_DWORD *)(v1 + 24);
  LOBYTE(v7) = *(unsigned char *)(v1 + 28);
  uint64_t v19 = *(void *)v1;
  uint64_t v9 = v19;
  unint64_t v20 = v10;
  int v21 = v11;
  char v22 = v12;
  int v23 = v13;
  char v24 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22831E360;
  *(void *)(v14 + 32) = 0x656372756F73;
  *(void *)(v14 + 40) = 0xE600000000000000;
  *(void *)(v14 + 48) = v9;
  *(void *)(v14 + 56) = v10;
  *(_DWORD *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = &type metadata for ImageBasedLightComponent.Source;
  *(void *)(v14 + 80) = 0xD000000000000010;
  *(void *)(v14 + 88) = 0x800000022834F2E0;
  uint64_t v15 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v14 + 96) = v12;
  *(void *)(v14 + 120) = v15;
  *(void *)(v14 + 128) = 0xD000000000000011;
  *(void *)(v14 + 136) = 0x800000022834F300;
  *(void *)(v14 + 168) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v14 + 144) = v13;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  outlined copy of ImageBasedLightComponent.Source(v9, v10);
  outlined copy of ImageBasedLightComponent.Source(v9, v10);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t ImageBasedLightReceiverComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v0;
  uint64_t v8 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22830EC60;
  *(void *)(v9 + 32) = 0x7361426567616D69;
  *(void *)(v9 + 40) = 0xEF746867694C6465;
  *(void *)(v9 + 72) = type metadata accessor for Entity();
  *(void *)(v9 + 48) = v8;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static ImageBasedLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a1 + 24) != *(float *)(a2 + 24)) {
    return 0;
  }
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = v3 >> 62;
  if (!(v3 >> 62))
  {
    outlined copy of ImageBasedLightComponent.Source(*(void *)a1, v3);
    unint64_t v7 = v5 >> 62;
    if (v5 >> 62) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    outlined copy of ImageBasedLightComponent.Source(*(void *)a1, v3);
    swift_release();
    unint64_t v7 = v5 >> 62;
    if (v5 >> 62)
    {
LABEL_5:
      if (v7 == 1)
      {
        outlined copy of ImageBasedLightComponent.Source(v4, v5);
        swift_release();
LABEL_9:
        BOOL v8 = specialized static EnvironmentResource.areEqual(_:_:)(v2, v4);
        swift_release();
        swift_release();
        return v8;
      }
      outlined consume of ImageBasedLightComponent.Source(v4, v5);
      swift_release();
      if (!v6) {
        return 0;
      }
      outlined copy of ImageBasedLightComponent.Source(v2, v3);
      swift_release();
      goto LABEL_15;
    }
LABEL_8:
    outlined copy of ImageBasedLightComponent.Source(v4, v5);
    goto LABEL_9;
  }
  outlined consume of ImageBasedLightComponent.Source(*(void *)a1, v3);
  outlined consume of ImageBasedLightComponent.Source(v2, v3);
  if (!(v5 >> 62)) {
    return 0;
  }
  if (v5 >> 62 == 1)
  {
    outlined copy of ImageBasedLightComponent.Source(v4, v5);
    swift_release();
LABEL_15:
    swift_release();
    return 0;
  }
  outlined consume of ImageBasedLightComponent.Source(v4, v5);
  return 1;
}

uint64_t initializeWithCopy for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(void *)a2, v5);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  outlined consume of ImageBasedLightComponent.Source(v7, v8);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v4;
  outlined consume of ImageBasedLightComponent.Source(v5, v6);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageBasedLightComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFE && *(unsigned char *)(a1 + 29)) {
    return (*(_DWORD *)a1 + 16382);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(void *)(a1 + 8) >> 50) & 0xC00 | ((*(void *)(a1 + 8) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ImageBasedLightComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 16382;
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 29) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageBasedLightComponent()
{
  return &type metadata for ImageBasedLightComponent;
}

uint64_t destroy for ImageBasedLightComponent.Source(uint64_t a1)
{
  return outlined consume of ImageBasedLightComponent.Source(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  outlined consume of ImageBasedLightComponent.Source(v6, v7);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v3;
  outlined consume of ImageBasedLightComponent.Source(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageBasedLightComponent.Source(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFE && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 16382);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(void *)(a1 + 8) >> 50) & 0xC00 | ((*(void *)(a1 + 8) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ImageBasedLightComponent.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFD)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 16382;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ImageBasedLightComponent.Source(void *a1)
{
  uint64_t v1 = a1[1] >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

uint64_t destructiveProjectEnumData for ImageBasedLightComponent.Source(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ImageBasedLightComponent.Source(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *(void *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *(void *)result &= 0xFFFFFFFFFFFFFF8uLL;
    *(void *)(result + 8) = v2;
  }
  else
  {
    *(void *)__n128 result = 8 * (a2 - 2);
    *(void *)(result + 8) = 0x8000000000000000;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageBasedLightComponent.Source()
{
  return &type metadata for ImageBasedLightComponent.Source;
}

ValueMetadata *type metadata accessor for ImageBasedLightReceiverComponent()
{
  return &type metadata for ImageBasedLightReceiverComponent;
}

uint64_t initializeBufferWithCopyOfBuffer for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for __ImageBasedLightComponent()
{
  return swift_release();
}

uint64_t assignWithCopy for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for __ImageBasedLightComponent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 12)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __ImageBasedLightComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __ImageBasedLightComponent()
{
  return &type metadata for __ImageBasedLightComponent;
}

uint64_t HasModel.model.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v10);
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    uint64_t v7 = Component;
    static ModelComponent.__fromCore(_:borrowStrongReference:)(&v7, 0, (uint64_t *)&v8);
    uint64_t result = swift_release();
    long long v5 = v8;
    int v6 = v9;
  }
  else
  {
    uint64_t result = swift_release();
    int v6 = 0;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t key path setter for HasModel.model : <A>A(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 16);
  v4[0] = *(void *)a1;
  v4[1] = v1;
  int v5 = v2;
  outlined copy of ModelComponent?(v4[0]);
  return HasModel.model.setter((uint64_t)v4);
}

uint64_t HasModel.model.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v7);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4, 0);
  outlined consume of ModelComponent?(v2);
  swift_release();
  return v5(v7, 0);
}

void (*HasModel.model.modify(void *a1))(uint64_t *a1, char a2)
{
  void (*v4)(uint64_t *__return_ptr);
  unint64_t v5;
  uint64_t Component;
  int v7;
  long long v8;
  long long v10;
  uint64_t v11;
  long long v12;
  int v13;
  uint64_t v14;

  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  int v4 = *(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96);
  int v5 = (*(void *)v1 + 96) & 0xFFFFFFFFFFFFLL | 0xC4F6000000000000;
  v3[4] = v4;
  v3[5] = v5;
  v4(&v14);
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    int v11 = Component;
    static ModelComponent.__fromCore(_:borrowStrongReference:)(&v11, 1, (uint64_t *)&v12);
    uint64_t v10 = v12;
    uint64_t v7 = v13;
    swift_release();
    long long v8 = v10;
  }
  else
  {
    swift_release();
    uint64_t v7 = 0;
    long long v8 = 0uLL;
  }
  *(_OWORD *)uint64_t v3 = v8;
  *((_DWORD *)v3 + 4) = v7;
  return HasModel.model.modify;
}

void HasModel.model.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(v2 + 32))(&v6);
    uint64_t v3 = *(void *)v2;
    uint64_t v4 = *(void *)(v2 + 8);
    int v5 = *(_DWORD *)(v2 + 16);
    outlined copy of ModelComponent?(*(void *)v2);
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v3, v4, v5, 1);
    outlined consume of ModelComponent?(v3);
    swift_release();
  }
  outlined consume of ModelComponent?(*(void *)v2);

  free((void *)v2);
}

uint64_t specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent(0);
  if (REEntityGetComponent())
  {
    AnchoringComponent.init(from:)(a1);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v4(a1, v3, 1, v2);
}

{
  uint64_t result;
  char IsAuthoritative;
  char ShouldAlwaysMigrate;
  uint64_t v5;

  uint64_t result = REEntityGetComponent();
  if (result)
  {
    IsAuthoritative = RENetworkComponentIsAuthoritative();
    ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
    int v5 = RENetworkComponentGuid();
    uint64_t result = RENetworkComponentIsOwnershipLocked();
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = IsAuthoritative;
    *(unsigned char *)(a1 + 9) = ShouldAlwaysMigrate;
    *(unsigned char *)(a1 + 10) = result;
    *(_OWORD *)(a1 + 16) = xmmword_228323FE0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 2;
  }
  *(void *)(a1 + 32) = 0;
  return result;
}

{
  uint64_t result;
  int v3;
  int v4;
  long long v5;
  int UseUpDirection;
  long long v7;
  char v8;
  char v9;
  long long v10;
  long long v11;
  long long v12;

  uint64_t result = REEntityGetComponent();
  if (result)
  {
    REBillboardComponentGetBlendFactor();
    uint64_t v4 = v3;
    REBillboardComponentGetForwardDirection();
    uint64_t v12 = v5;
    UseUpDirection = REBillboardComponentGetUseUpDirection();
    uint64_t v7 = 0uLL;
    if (UseUpDirection) {
      REBillboardComponentGetUpDirection();
    }
    int v11 = v7;
    long long v8 = UseUpDirection ^ 1;
    uint64_t result = REBillboardComponentGetUseRotationAxis();
    int v9 = result;
    uint64_t v10 = 0uLL;
    if (result) {
      uint64_t result = REBillboardComponentGetRotationAxis();
    }
    *(_OWORD *)a1 = v10;
    *(unsigned char *)(a1 + 16) = v9 ^ 1;
    *(_OWORD *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = v12;
    *(_DWORD *)(a1 + 80) = v4;
    *(unsigned char *)(a1 + 84) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(unsigned char *)(a1 + 84) = 1;
  }
  return result;
}

{
  uint64_t v2;
  _OWORD v4[11];
  uint64_t vars8;

  if (REEntityGetComponent())
  {
    PhysicsBodyComponent.init(_:)(a1);
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v2);
  }
  else
  {
    _s10RealityKit20PhysicsBodyComponentVSgWOi0_(v4);
    return outlined init with take of Transform?((uint64_t)v4, a1, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  }
}

{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  long long v13;
  int CollisionGroup;
  int v15;
  long long v16;

  uint64_t result = REEntityGetComponent();
  if (result)
  {
    RECharacterControllerComponentGetRadius();
    uint64_t v4 = v3;
    RECharacterControllerComponentGetHeight();
    uint64_t v6 = v5;
    RECharacterControllerComponentGetSkinWidth();
    long long v8 = v7;
    RECharacterControllerComponentGetSlopeLimit();
    uint64_t v10 = v9;
    RECharacterControllerComponentGetStepLimit();
    uint64_t v12 = v11;
    RECharacterControllerComponentGetUpVector();
    uint64_t v16 = v13;
    CollisionGroup = RECharacterControllerComponentGetCollisionGroup();
    uint64_t result = RECharacterControllerComponentGetCollisionMask();
    uint64_t v15 = result;
    if (one-time initialization token for defaultUpVector != -1) {
      uint64_t result = swift_once();
    }
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 12) = v10;
    *(_DWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v16;
    *(_DWORD *)(a1 + 48) = CollisionGroup;
    *(_DWORD *)(a1 + 52) = v15;
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  float v4;
  double v5;

  uint64_t result = REEntityGetComponent();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t result = REChannelAudioComponentGetDecibelGain();
    int v5 = v4;
  }
  else
  {
    int v5 = 0.0;
  }
  *(double *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v3 == 0;
  return result;
}

{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  uint64_t result = REEntityGetComponent();
  if (result)
  {
    REPerspectiveCameraComponentGetNear();
    uint64_t v4 = v3;
    REPerspectiveCameraComponentGetFar();
    uint64_t v6 = v5;
    REPerspectiveCameraComponentGetFieldOfView();
    long long v8 = v7;
    uint64_t result = REPerspectiveCameraComponentGetFieldOfViewDirection();
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 12) = result == 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 12) = 2;
  }
  return result;
}

{
  uint64_t Component;
  uint64_t v3;
  void v5[18];
  uint64_t vars8;

  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    v5[0] = Component;
    static VideoPlayerComponent.__fromCore(_:)(a1);
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v3);
  }
  else
  {
    _s17RealityFoundation20VideoPlayerComponentVSgWOi0_((uint64_t)v5);
    return outlined init with take of Transform?((uint64_t)v5, a1, &demangling cache variable for type metadata for VideoPlayerComponent?);
  }
}

{
  uint64_t result;
  uint64_t v3;
  float v4;
  double v5;

  uint64_t result = REEntityGetComponent();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t result = REAmbientAudioComponentGetDecibelGain();
    int v5 = v4;
  }
  else
  {
    int v5 = 0.0;
  }
  *(double *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v3 == 0;
  return result;
}

{
  uint64_t result;
  uint64_t StateMachineAsset;
  uint64_t v4;

  uint64_t result = REEntityGetComponent();
  if (!result)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    goto LABEL_8;
  }
  StateMachineAsset = REStateMachineComponentGetStateMachineAsset();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_5;
  }
  type metadata accessor for StateMachineResource();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_5:
    type metadata accessor for StateMachineResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 48) = StateMachineAsset;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    outlined consume of StateMachineGraph?(0, 0);
    RERetain();
    REAssetSetSwiftObject();
  }
  uint64_t result = (uint64_t)specialized static StateMachineParametersCreator.createBoundParameters(from:)();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = result;
LABEL_8:
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;

  uint64_t result = REEntityGetComponent();
  uint64_t v3 = result;
  if (result)
  {
    REMotionStateComponentGetLinearVelocity();
    uint64_t v6 = v4;
    uint64_t result = REMotionStateComponentGetAngularVelocity();
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(unsigned char *)(a1 + 32) = v3 == 0;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = type metadata accessor for BodyTrackingComponent(0);
  if (REEntityGetComponent())
  {
    BodyTrackingComponent.init(from:)(a1);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v4(a1, v3, 1, v2);
}

{
  uint64_t result;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;

  uint64_t result = REEntityGetComponent();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t result = RETransformComponentGetLocalSRT();
    if (one-time initialization token for identity != -1)
    {
      long long v8 = v5;
      int v9 = v4;
      uint64_t v7 = v6;
      uint64_t result = swift_once();
      uint64_t v6 = v7;
      int v5 = v8;
      uint64_t v4 = v9;
    }
  }
  else
  {
    uint64_t v4 = 0uLL;
    int v5 = 0uLL;
    uint64_t v6 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v3 == 0;
  return result;
}

uint64_t specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(void *a1@<X8>)
{
  uint64_t result = REEntityGetComponent();
  if (result)
  {
    return CollisionComponent.init(_:)((uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

char specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<W0>(char *a1@<X8>)
{
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    REDebugMeshComponentGetShaderDebugMode();
    v3._countAndFlagsBits = String.init(cString:)();
    LOBYTE(Component) = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v3);
    char v4 = v6;
    if (v6 == 21) {
      char v4 = 0;
    }
  }
  else
  {
    char v4 = 21;
  }
  *a1 = v4;
  return Component;
}

double specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<D0>(_OWORD *a1@<X8>)
{
  if (REEntityGetComponent())
  {
    static VFXComponent.__fromCore(_:)((uint64_t)a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)((char *)a1 + 42) = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

{
  long long v2;
  double result;
  long long v4;
  _OWORD v5[2];
  long long v6;
  long long v7;

  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v5);
    uint64_t v2 = v5[1];
    *a1 = v5[0];
    a1[1] = v2;
    double result = *(double *)&v6;
    char v4 = v7;
    a1[2] = v6;
    a1[3] = v4;
  }
  else
  {
    double result = 0.0;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(unint64_t *a1@<X8>)
{
  if (REEntityGetComponent()) {
    static AudioLibraryComponent.__fromCore(_:)(a1);
  }
  else {
    *a1 = 0;
  }
}

double specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<D0>(uint64_t a1@<X8>)
{
  if (REEntityGetComponent())
  {
    static SpatialAudioComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)&double result = 255;
    *(_OWORD *)(a1 + 40) = xmmword_228323FF0;
  }
  return result;
}

void specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(uint64_t a1@<X8>)
{
  if (REEntityGetComponent())
  {
    static DirectionalLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

{
  long long v2;
  char v3;
  void *v4;
  long long v5;

  if (REEntityGetComponent())
  {
    REComponentGetEntity();
    RECharacterControllerComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RECharacterControllerComponentGetVelocity();
      int v5 = v2;
      Swift::String v3 = RECharacterControllerComponentOnGround();
      *(_OWORD *)a1 = v5;
      *(unsigned char *)(a1 + 16) = v3;
    }
    else
    {
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      char v4 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 0;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 2;
  }
}

{
  if (REEntityGetComponent())
  {
    static __AmbientLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

{
  if (REEntityGetComponent())
  {
    static SpotLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

{
  if (REEntityGetComponent())
  {
    static PointLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      uint64_t v10 = ComponentByClass;
      if (ComponentByClass || (uint64_t ComponentByClass = REEntityAddComponentNoEvents()) != 0)
      {
        v11[1] = a1;
        v11[2] = a2;
        int v12 = a3;
        v11[0] = ComponentByClass;
        ModelComponent.__toCore(_:returnStrongReference:)(v11, a4 & 1);
        if (!v10) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined consume of ModelComponent?(a1);
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t (*HasModel.modelDebugOptions.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  a1[1] = a3;
  a1[2] = v3;
  *a1 = a2;
  HasModel.debugModel.getter();
  return HasModel.modelDebugOptions.modify;
}

uint64_t HasModel.modelDebugOptions.modify(uint64_t a1, char a2)
{
  return HasModel.modelDebugOptions.modify(a1, a2, (uint64_t (*)(char *))HasModel.modelDebugOptions.setter);
}

uint64_t HasModel.modelDebugOptions.getter@<X0>(char *a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

uint64_t HasModel.modelDebugOptions.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  return v3(v5, 0);
}

uint64_t (*HasModel.debugModel.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  a1[1] = a3;
  a1[2] = v3;
  *a1 = a2;
  HasModel.debugModel.getter();
  return HasModel.debugModel.modify;
}

uint64_t HasModel.debugModel.modify(uint64_t a1, char a2)
{
  return HasModel.modelDebugOptions.modify(a1, a2, (uint64_t (*)(char *))HasModel.debugModel.setter);
}

uint64_t HasModel.modelDebugOptions.modify(uint64_t a1, char a2, uint64_t (*a3)(char *))
{
  if (a2)
  {
    char v5 = *(unsigned char *)(a1 + 24);
    uint64_t v3 = &v5;
  }
  else
  {
    char v6 = *(unsigned char *)(a1 + 24);
    uint64_t v3 = &v6;
  }
  return a3(v3);
}

uint64_t outlined consume of ModelComponent?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ModelComponent?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2)
{
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  uint64_t result = REEntityGetComponentByClass();
  uint64_t v5 = result;
  if (a2 == 1)
  {
    if (result)
    {
      return REEntityRemoveComponentByClass();
    }
  }
  else
  {
    swift_retain();
    if ((v5 || REEntityAddComponentNoEvents()) && (uint64_t Object = RECustomComponentGetObject()) != 0)
    {
      uint64_t v7 = (_OWORD *)Object;
      v10[3] = &type metadata for __EntityInfoComponent;
      v10[4] = &protocol witness table for __EntityInfoComponent;
      v10[0] = a1;
      v10[1] = a2;
      swift_retain();
      if (v5) {
        swift_arrayDestroy();
      }
      outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
      swift_dynamicCast();
      *uint64_t v7 = v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      if (!v5) {
        REEntitySendAddAndActivateComponentEvents();
      }
      RENetworkMarkComponentDirty();
      return outlined consume of __EntityInfoComponent?(a1, a2);
    }
    else
    {
      return outlined consume of __EntityInfoComponent?(a1, a2);
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if ((a2 & 0xFF00000000) == 0x200000000)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REPerspectiveCameraComponentSetNear();
      REPerspectiveCameraComponentSetFar();
      REPerspectiveCameraComponentSetFieldOfView();
      REPerspectiveCameraComponentSetFieldOfViewDirection();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        REPerspectiveCameraComponentSetNear();
        REPerspectiveCameraComponentSetFar();
        REPerspectiveCameraComponentSetFieldOfView();
        REPerspectiveCameraComponentSetFieldOfViewDirection();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a2)
    {
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        PhysicsJointsComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        PhysicsJointsComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if ((a1 & 0x100000000) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REHierarchicalFadeComponentSetOpacity();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        REHierarchicalFadeComponentSetOpacity();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unsigned char v4[64];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for Transform?);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Transform?);
    if (v4[48])
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      RETransformComponentSetLocalSRT();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        RETransformComponentSetLocalSRT();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a1)
    {
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        CollisionComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        CollisionComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t ComponentByClass;
  long long v4;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[2];
  long long v8;
  uint64_t v9;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v5, &demangling cache variable for type metadata for VideoComponent?);
    if (*(void *)&v5[0])
    {
      v7[0] = v5[0];
      v7[1] = v5[1];
      long long v8 = v5[2];
      int v9 = v6;
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        REVideoComponentSetVideoAsset();
        uint64_t v4 = v8;
        __swift_project_boxed_opaque_existential_1((void *)v7 + 1, v8);
        (*(void (**)(void, void))(*((void *)&v4 + 1) + 8))(v4, *((void *)&v4 + 1));
        swift_beginAccess();
        swift_release();
        REVideoComponentSetMaterialAsset();
        REVideoComponentSetFadeThreshold();
        REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined destroy of VideoComponent((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for VideoComponent?);
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  char v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AnchoringComponent(0);
  char v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of BodyTrackingComponent((uint64_t)v4, (uint64_t)v8, type metadata accessor for AnchoringComponent);
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        uint64_t v13 = ComponentByClass;
        AnchoringComponent.__toCore(_:)();
      }
      else
      {
        int v11 = REEntityAddComponentNoEvents();
        if (v11)
        {
          uint64_t v13 = v11;
          AnchoringComponent.__toCore(_:)();
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined destroy of BodyTrackingComponent((uint64_t)v8, type metadata accessor for AnchoringComponent);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void v27[2];
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x263EF8340];
  char v2 = type metadata accessor for UUID();
  v27[0] = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = type metadata accessor for BodyTrackingComponent(0);
  int v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v10, &demangling cache variable for type metadata for BodyTrackingComponent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for BodyTrackingComponent?);
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of BodyTrackingComponent((uint64_t)v10, (uint64_t)v14, type metadata accessor for BodyTrackingComponent);
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        outlined init with copy of BodyTrackingComponent.Target((uint64_t)v14, (uint64_t)v7);
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v7, 1, v17) == 1)
        {
          REBodyTrackingComponentSetTargetType();
        }
        else
        {
          uint64_t v18 = v27[0];
          (*(void (**)(char *, char *, uint64_t))(v27[0] + 32))(v4, v7, v2);
          REBodyTrackingComponentSetTargetType();
          v27[1] = UUID.uuid.getter();
          uint64_t v28 = v19;
          uint64_t v29 = v20;
          uint64_t v30 = v21;
          uint64_t v31 = v22;
          uint64_t v32 = v23;
          uint64_t v33 = v24;
          uint64_t v34 = v25;
          uint64_t v35 = v26;
          REBodyTrackingComponentSetTargetBodyIdentifier();
          (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
        }
        REBodyTrackingComponentSetIsPaused();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined destroy of BodyTrackingComponent((uint64_t)v14, type metadata accessor for BodyTrackingComponent);
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a1 == 1)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      swift_retain();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        if (a1 && *(void *)(a1 + 16)) {
          REImageBasedLightComponentSetIBLNullable();
        }
        REImageBasedLightComponentSetIntensityExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined consume of __ImageBasedLightComponent?(a1);
    }
  }
  return result;
}

{
  char v2;
  char v3;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[96];

  outlined init with take of Transform?(a1, (uint64_t)&v6, &demangling cache variable for type metadata for BillboardComponent?);
  char v2 = v7;
  uint64_t v3 = v8;
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for BillboardComponent?);
    if (v9[84]) {
      return REEntityRemoveComponentByClass();
    }
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass || (uint64_t result = REEntityAddComponentNoEvents()) != 0)
    {
      REBillboardComponentSetBlendFactor();
      REBillboardComponentSetForwardDirection();
      if (v3)
      {
        REBillboardComponentSetUseUpDirection();
        if (v2) {
          goto LABEL_8;
        }
      }
      else
      {
        REBillboardComponentSetUseUpDirection();
        REBillboardComponentSetUpDirection();
        if (v2)
        {
LABEL_8:
          REBillboardComponentSetUseRotationAxis();
          goto LABEL_11;
        }
      }
      REBillboardComponentSetUseRotationAxis();
      REBillboardComponentSetRotationAxis();
LABEL_11:
      uint64_t result = RENetworkMarkComponentDirty();
      if (!ComponentByClass) {
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  unsigned char v3[16];
  int v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  char v41;
  uint64_t v42;
  unsigned char v43[176];
  unsigned char v44[176];
  unsigned char v45[176];

  outlined init with take of Transform?(a1, (uint64_t)v43, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v45, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v44, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v44) == 1)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
      int v23 = v3[0];
      char v24 = v4;
      uint64_t v25 = v5;
      uint64_t v26 = v6;
      uint64_t v27 = v7;
      uint64_t v28 = v8;
      uint64_t v29 = v9;
      uint64_t v30 = v10;
      uint64_t v31 = v11;
      uint64_t v32 = v12;
      uint64_t v33 = v13;
      uint64_t v34 = v14;
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      uint64_t v37 = v17;
      uint64_t v38 = v18;
      uint64_t v39 = v19;
      uint64_t v40 = v20;
      char v41 = v21;
      uint64_t v42 = v22;
      swift_retain();
      if (REEntityGetComponentByClass())
      {
        PhysicsBodyComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        PhysicsBodyComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return outlined release of PhysicsBodyComponent?(a1);
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unsigned char v4[56];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for SpatialAudioComponent?);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for SpatialAudioComponent?);
    if (v4[40] == 0xFF)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return SpatialAudioComponent.__toCore(_:)();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        SpatialAudioComponent.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unsigned char v4[64];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for CharacterControllerComponent?);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CharacterControllerComponent?);
    if (v4[56])
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      RECharacterControllerComponentSetRadius();
      RECharacterControllerComponentSetHeight();
      RECharacterControllerComponentSetSkinWidth();
      RECharacterControllerComponentSetSlopeLimit();
      RECharacterControllerComponentSetStepLimit();
      RECharacterControllerComponentSetUpVector();
      return RECharacterControllerComponentSetCollisionFilter();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        RECharacterControllerComponentSetRadius();
        RECharacterControllerComponentSetHeight();
        RECharacterControllerComponentSetSkinWidth();
        RECharacterControllerComponentSetSlopeLimit();
        RECharacterControllerComponentSetStepLimit();
        RECharacterControllerComponentSetUpVector();
        RECharacterControllerComponentSetCollisionFilter();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if ((a1 & 0xFF00000000) == 0x400000000)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return SpotLightComponent.Shadow.__toCore(_:)();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        SpotLightComponent.Shadow.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  ValueMetadata *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned char v8[40];
  _DWORD v9[6];
  ValueMetadata *v10;
  _UNKNOWN **v11;

  type metadata accessor for REComponentType(0);
  uint64_t v10 = v2;
  v9[0] = 4010;
  outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (v6 == 36)
  {
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
    uint64_t result = REEntityGetComponentByClass();
    uint64_t v4 = result;
    if (a1 == 2)
    {
      if (!result) {
        return result;
      }
      return REEntityRemoveComponentByClass();
    }
    if (result || (uint64_t result = REEntityAddComponentNoEvents()) != 0)
    {
      uint64_t result = RECustomComponentGetObject();
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v10 = &type metadata for InputTargetComponent;
        int v11 = &protocol witness table for InputTargetComponent;
        LOBYTE(v9[0]) = a1 & 1;
        v9[1] = HIDWORD(a1);
        outlined init with copy of __REAssetService((uint64_t)v9, (uint64_t)v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
        swift_dynamicCast();
        *(unsigned char *)uint64_t v5 = 36;
        *(_DWORD *)(v5 + 4) = v7;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
        if (!v4) {
          REEntitySendAddAndActivateComponentEvents();
        }
        return RENetworkMarkComponentDirty();
      }
    }
  }
  else
  {
    uint64_t result = REComponentClassFromType();
    if (!result) {
      return result;
    }
    if (a1 == 2) {
      return REEntityRemoveComponentByClass();
    }
    if (REEntityGetComponentByClass())
    {
      REInputTargetComponentSetEnabled();
      REInputTargetComponentSetAllowsDirectInput();
      REInputTargetComponentSetAllowsIndirectInput();
      return RENetworkMarkComponentDirty();
    }
    uint64_t result = REEntityAddComponentNoEvents();
    if (result)
    {
      REInputTargetComponentSetEnabled();
      REInputTargetComponentSetAllowsDirectInput();
      REInputTargetComponentSetAllowsIndirectInput();
      RENetworkMarkComponentDirty();
      return REEntitySendAddAndActivateComponentEvents();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unsigned char v4[48];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for PhysicsMotionComponent?);
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for PhysicsMotionComponent?);
    if (v4[32])
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REMotionStateComponentSetLinearVelocity();
      REMotionStateComponentSetAngularVelocity();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        REMotionStateComponentSetLinearVelocity();
        REMotionStateComponentSetAngularVelocity();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t ComponentByClass;
  uint64_t Object;
  _OWORD *v4;
  long long v5;
  long long v6;
  uint64_t result;
  long long v8;
  long long v9;
  unsigned char v10[40];
  void v11[5];
  long long v12;
  long long v13;
  long long v14;
  _OWORD v15[3];

  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent);
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  outlined init with copy of (Int, URL)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for EventSubscriptionComponent?);
  if (*((void *)&v14 + 1))
  {
    v15[0] = v12;
    v15[1] = v13;
    v15[2] = v14;
    if (ComponentByClass || REEntityAddComponentNoEvents())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v4 = (_OWORD *)Object;
        uint64_t v11[3] = &type metadata for EventSubscriptionComponent;
        v11[4] = &protocol witness table for EventSubscriptionComponent;
        v11[0] = swift_allocObject();
        outlined init with copy of EventSubscriptionComponent((uint64_t)v15, v11[0] + 16);
        if (ComponentByClass)
        {
          swift_arrayDestroy();
          outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
          swift_dynamicCast();
          char v6 = v13;
          uint64_t v5 = v14;
          *uint64_t v4 = v12;
          v4[1] = v6;
          uint64_t v4[2] = v5;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        }
        else
        {
          outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
          swift_dynamicCast();
          int v9 = v13;
          long long v8 = v14;
          *uint64_t v4 = v12;
          v4[1] = v9;
          uint64_t v4[2] = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
          REEntitySendAddAndActivateComponentEvents();
        }
        RENetworkMarkComponentDirty();
      }
    }
    return outlined destroy of EventSubscriptionComponent((uint64_t)v15);
  }
  else
  {
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)&v12, &demangling cache variable for type metadata for EventSubscriptionComponent?);
    if (ComponentByClass) {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

void specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(void *a1)
{
  if (REComponentClassFromType())
  {
    if (a1)
    {
      id v3 = a1;
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REPointLightComponentSetColorGamut3F();
        REPointLightComponentSetIntensity();
        REPointLightComponentSetAttenuationRadius();
        REPointLightComponentSetAttenuationFalloffExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      else
      {
      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;
  uint64_t vars8;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      id v3 = a1;
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REDirectionalLightComponentSetColorGamut3F();
        REDirectionalLightComponentSetIntensity();
        REDirectionalLightComponentSetIsProxy();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      else
      {
      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;
  uint64_t vars8;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      id v3 = a1;
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RESpotLightComponentSetOuterAngle();
        RESpotLightComponentSetInnerAngle();
        RECGColorToColorGamut();
        RESpotLightComponentSetColorGamut3F();
        RESpotLightComponentSetIntensity();
        RESpotLightComponentSetAttenuationRadius();
        RESpotLightComponentSetAttenuationFalloffExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      else
      {
      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;
  uint64_t vars8;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      id v3 = a1;
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REAmbientLightComponentSetColorGamut3F();
        REAmbientLightComponentSetIntensity();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass) {
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      else
      {
      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

uint64_t *specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t *a1)
{
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)&v16, &demangling cache variable for type metadata for SynchronizationComponent?);
  uint64_t v3 = v16;
  int v2 = v17;
  uint64_t v4 = v18;
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  uint64_t result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?((uint64_t)a1, (uint64_t)v21, &demangling cache variable for type metadata for SynchronizationComponent?);
    if (v22 == 2)
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
    else
    {
      v10[1] = v3;
      __int16 v11 = v2 & 0x101;
      char v12 = BYTE2(v2) & 1;
      uint64_t v13 = v4;
      uint64_t v14 = v5;
      uint64_t v15 = v6;
      outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v4, v5);
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v10[0] = ComponentByClass;
        SynchronizationComponent.__toCore(_:)(v10);
      }
      else
      {
        uint64_t v9 = REEntityAddComponentNoEvents();
        if (v9)
        {
          v10[0] = v9;
          SynchronizationComponent.__toCore(_:)(v10);
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined release of SynchronizationComponent?(a1);
    }
  }
  return result;
}

{
  uint64_t *result;
  uint64_t v3;
  unsigned char v4[8];
  uint64_t v5;

  outlined init with take of Transform?((uint64_t)a1, (uint64_t)&v3, &demangling cache variable for type metadata for ReferenceComponent?);
  uint64_t result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?((uint64_t)a1, (uint64_t)v4, &demangling cache variable for type metadata for ReferenceComponent?);
    if (v5)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        ReferenceComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        ReferenceComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return outlined release of ReferenceComponent?(a1);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(char a1)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a1 == 21)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || (uint64_t result = REEntityAddComponentNoEvents()) != 0)
      {
        REDebugMeshComponentReset();
        if (ModelDebugOptionsComponent.VisualizationMode.rawValue.getter() == 1701736270 && v4 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0)
          {
            ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REDebugMeshComponentSetShaderDebugMode();
            swift_release();
          }
        }
        uint64_t result = RENetworkMarkComponentDirty();
        if (!ComponentByClass)
        {
          return REEntitySendAddAndActivateComponentEvents();
        }
      }
    }
  }
  return result;
}

double sub_227E7EA40@<D0>(uint64_t a1@<X8>)
{
  HasModel.model.getter((uint64_t)&v4);
  int v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_227E7EA88()
{
  return 16;
}

__n128 sub_227E7EA94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_227E7EAA0@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_2Tm((void *(*)(uint64_t *__return_ptr))HasModel.modelDebugOptions.getter, a1);
}

uint64_t sub_227E7EAB8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm_0(a1, a2, a3, a4, (uint64_t (*)(char *))HasModel.modelDebugOptions.setter);
}

uint64_t sub_227E7EAD0()
{
  return 16;
}

__n128 sub_227E7EADC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *sub_227E7EAE8@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_2Tm((void *(*)(uint64_t *__return_ptr))HasModel.debugModel.getter, a1);
}

void *keypath_get_2Tm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, unsigned char *a2@<X8>)
{
  __n128 result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_227E7EB40(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm_0(a1, a2, a3, a4, (uint64_t (*)(char *))HasModel.debugModel.setter);
}

uint64_t keypath_set_3Tm_0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  char v6 = *a1;
  return a5(&v6);
}

uint64_t sub_227E7EB94()
{
  return 16;
}

__n128 sub_227E7EBA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double _s17RealityFoundation20VideoPlayerComponentVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 125) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t *specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for VFXComponent?);
  uint64_t v3 = v21[0];
  uint64_t v2 = v21[1];
  uint64_t v4 = v23;
  char v13 = v22;
  uint64_t v6 = v24;
  uint64_t v5 = v25;
  uint64_t v7 = v26;
  __int16 v8 = v27;
  double result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v28, &demangling cache variable for type metadata for VFXComponent?);
    if (v28[0])
    {
      v14[1] = v3;
      v14[2] = v2;
      char v15 = v13;
      uint64_t v16 = v4;
      uint64_t v17 = v6;
      uint64_t v18 = v5;
      uint64_t v19 = v7;
      __int16 v20 = v8 & 0x101;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v14[0] = ComponentByClass;
        VFXComponent.__toCore(_:)(v14);
        __int16 v11 = (uint64_t *)a1;
      }
      else
      {
        uint64_t v12 = REEntityAddComponentNoEvents();
        __int16 v11 = (uint64_t *)a1;
        if (v12)
        {
          v14[0] = v12;
          VFXComponent.__toCore(_:)(v14);
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined release of VFXComponent?(v11);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  void v12[8];
  unsigned char v13[56];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  outlined init with take of Transform?(a1, (uint64_t)v12, &demangling cache variable for type metadata for __AccessibilityComponent?);
  uint64_t v2 = v12[0];
  __int16 v11 = v12[1];
  uint64_t v3 = v12[2];
  uint64_t v4 = v12[3];
  uint64_t v5 = v12[4];
  uint64_t v6 = v12[5];
  __int16 v8 = v12[6];
  uint64_t v7 = v12[7];
  double result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v13, &demangling cache variable for type metadata for __AccessibilityComponent?);
    if (v14)
    {
      char v15 = v2 & 0x101;
      uint64_t v16 = v11;
      uint64_t v17 = v3;
      uint64_t v18 = v4;
      uint64_t v19 = v5;
      __int16 v20 = v6;
      int v21 = v8;
      uint64_t v22 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        __AccessibilityComponent.__toCore(_:)();
        uint64_t v10 = (uint64_t *)a1;
      }
      else
      {
        if (REEntityAddComponentNoEvents())
        {
          __AccessibilityComponent.__toCore(_:)();
          REEntitySendAddAndActivateComponentEvents();
        }
        uint64_t v10 = (uint64_t *)a1;
      }
      return outlined release of __AccessibilityComponent?(v10);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a4 == 255)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return DirectionalLightComponent.Shadow.__toCore(_:)();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        DirectionalLightComponent.Shadow.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a3 == 2)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      uint64_t result = REEntityGetComponentByClass();
      if (!result)
      {
        uint64_t result = REEntityAddComponentNoEvents();
        if (result)
        {
          return REEntitySendAddAndActivateComponentEvents();
        }
      }
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, char a2)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a2)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REChannelAudioComponentSetDecibelGain();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        REChannelAudioComponentSetDecibelGain();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  uint64_t result = REComponentClassFromType();
  if (result)
  {
    if (a2)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REAmbientAudioComponentSetDecibelGain();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      uint64_t result = REEntityAddComponentNoEvents();
      if (result)
      {
        REAmbientAudioComponentSetDecibelGain();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

uint64_t outlined destroy of EventSubscriptionComponent(uint64_t a1)
{
  return a1;
}

uint64_t sub_227E803F4()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t outlined init with copy of EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined consume of StateMachineGraph?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *outlined release of ReferenceComponent?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of ReferenceComponent?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BodyTrackingComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *outlined release of __AccessibilityComponent?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of __AccessibilityComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double _s10RealityKit20PhysicsBodyComponentVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of BodyTrackingComponent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of BodyTrackingComponent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of VideoComponent(uint64_t a1)
{
  return a1;
}

uint64_t _s10RealityKit20PhysicsBodyComponentVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined release of PhysicsBodyComponent?(uint64_t a1)
{
  return a1;
}

uint64_t *outlined release of VFXComponent?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of VFXComponent?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
  }
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of __EntityInfoComponent?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of __ImageBasedLightComponent?(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t *outlined release of SynchronizationComponent?(uint64_t *a1)
{
  return a1;
}

void outlined consume of SynchronizationComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 2) {
    outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(a3, a4);
  }
}

uint64_t outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  }
  return result;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init(entityType:)(RealityKit::SceneUnderstandingComponent entityType)
{
  *(unsigned char *)uint64_t v1 = **(unsigned char **)&entityType.entityType.value;
  *(void *)(v1 + 8) = 1;
  return entityType;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init()()
{
  *(unsigned char *)uint64_t v0 = 2;
  *(void *)(v0 + 8) = 1;
  return result;
}

void SceneUnderstandingComponent.entityType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SceneUnderstandingComponent.entityType.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*SceneUnderstandingComponent.entityType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance SceneUnderstandingComponent(Swift::OpaquePointer *a1)
{
  return *(_OWORD *)&SceneUnderstandingComponent.init(from:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t static SceneUnderstandingComponent.__fromCore(_:)(Swift::OpaquePointer *a1)
{
  return *(_OWORD *)&SceneUnderstandingComponent.init(from:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t SceneUnderstandingComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *v1;
  if (v3) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 1;
  }
  if (v3 == 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (*((void *)v1 + 1)) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = 1;
  }
  return MEMORY[0x270F1FE48](v2, v5, v6);
}

void protocol witness for static Component.__coreComponentType.getter in conformance SceneUnderstandingComponent(_DWORD *a1@<X8>)
{
  *a1 = 67;
}

void static SceneUnderstandingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 67;
}

BOOL static SceneUnderstandingComponent.Origin.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SceneUnderstandingComponent.Origin.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void SceneUnderstandingComponent.origin.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8) != 0;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init(from:)(Swift::OpaquePointer from)
{
  uint64_t v2 = v1;
  int SourceType = RESceneUnderstandingComponentGetSourceType();
  if (SourceType < 0)
  {
    LOBYTE(IsEntityType) = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v4 = SourceType;
    LOBYTE(IsEntityType) = RESceneUnderstandingComponentIsEntityType();
    if (IsEntityType)
    {
      char v7 = 0;
    }
    else
    {
      int IsEntityType = RESceneUnderstandingComponentIsEntityType();
      if (IsEntityType) {
        char v7 = 1;
      }
      else {
        char v7 = 2;
      }
    }
    *(unsigned char *)uint64_t v2 = v7;
    *(void *)(v2 + 8) = v4 == 2;
  }
  result.internalOriginType = v6;
  result.entityType = (RealityKit::SceneUnderstandingComponent::EntityType_optional)IsEntityType;
  return result;
}

uint64_t SceneUnderstandingComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)(v0 + 8);
  v14[0] = *(unsigned char *)v0;
  char v8 = v14[0];
  uint64_t v15 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22831E350;
  *(void *)(v10 + 32) = 0x7954797469746E65;
  *(void *)(v10 + 40) = 0xEA00000000006570;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  *(unsigned char *)(v10 + 48) = v8;
  *(void *)(v10 + 72) = v11;
  *(void *)(v10 + 80) = 0x6E696769726FLL;
  *(void *)(v10 + 88) = 0xE600000000000000;
  *(void *)(v10 + 120) = &type metadata for SceneUnderstandingComponent.Origin;
  *(unsigned char *)(v10 + 96) = v9 != 0;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType;
  if (!lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin;
  if (!lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin);
  }
  return result;
}

uint64_t sub_227E80E08@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 8) != 0;
  return result;
}

unsigned __int8 *sub_227E80E1C(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUnderstandingComponent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[16]) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*a1 <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 3;
  if (*a1 < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUnderstandingComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent()
{
  return &type metadata for SceneUnderstandingComponent;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent.EntityType()
{
  return &type metadata for SceneUnderstandingComponent.EntityType;
}

unsigned char *storeEnumTagSinglePayload for SceneUnderstandingComponent.EntityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E80FACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent.Origin()
{
  return &type metadata for SceneUnderstandingComponent.Origin;
}

uint64_t specialized PredicateFactory.enumerate<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = (void **)(v1 + 16);
  uint64_t v5 = swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7) {
    uint64_t v8 = *(void *)(v6 + 8 * v7 + 24);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1 + 16))(v5);
  if (result)
  {
    uint64_t v10 = result;
    swift_beginAccess();
    uint64_t v11 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unsigned int v4 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *unsigned int v4 = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
      *unsigned int v4 = v11;
    }
    v11[2] = v14 + 1;
    v11[v14 + 4] = v10;
    swift_endAccess();
    (*(void (**)(uint64_t, _UNKNOWN **))(a1 + 32))(v2, &protocol witness table for PredicateFactory);
    if (v8) {
      REQueryConnectEntityPredicates();
    }
    else {
      *(void *)(v2 + 24) = v10;
    }
    swift_beginAccess();
    specialized RangeReplaceableCollection<>.popLast()();
    return swift_endAccess();
  }
  return result;
}

uint64_t PredicateFactory.enumerate<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void **)(v2 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7) {
    uint64_t v14 = *(void *)(v6 + 8 * v7 + 24);
  }
  else {
    uint64_t v14 = 0;
  }
  type metadata accessor for QueryPredicate();
  uint64_t result = QueryPredicate.makeInternal()();
  if (result)
  {
    uint64_t v9 = result;
    swift_beginAccess();
    uint64_t v10 = *v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    uint64_t v10[2] = v13 + 1;
    v10[v13 + 4] = v9;
    swift_endAccess();
    QueryPredicate.enumerate(using:)();
    if (v14) {
      specialized PredicateFactory.connect<A>(_:from:to:)(a2, v14, v9);
    }
    else {
      *(void *)(v3 + 24) = v9;
    }
    swift_beginAccess();
    specialized RangeReplaceableCollection<>.popLast()();
    return swift_endAccess();
  }
  return result;
}

uint64_t PredicateFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Query.predicate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 36);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)a2 = *(void *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  *(void *)(a2 + 40) = v4;
  swift_retain();
  swift_retain();

  return swift_retain();
}

__n128 Query.init(selector:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Query();
  *(void *)(a4 + *(int *)(v8 + 40)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  uint64_t v9 = a4 + *(int *)(v8 + 36);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v9 + 32) = result;
  return result;
}

uint64_t type metadata accessor for Query()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Query.init(for:where:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = type metadata accessor for Query();
  uint64_t v22 = *(int *)(v13 + 40);
  *(void *)(a4 + v22) = 0;
  uint64_t v23 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(a4, a1, a3);
  uint64_t v14 = (void *)(a4 + *(int *)(v13 + 36));
  *uint64_t v14 = v8;
  v14[1] = v7;
  v14[2] = v9;
  uint64_t v14[3] = v10;
  v14[4] = v11;
  v14[5] = v12;
  type metadata accessor for PredicateFactory();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v15 + 24) = 0;
  v24[0] = v8;
  v24[1] = v7;
  v24[2] = v9;
  v24[3] = v10;
  v24[4] = v11;
  v24[5] = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  swift_retain();
  swift_retain();
  PredicateFactory.enumerate<A>(_:)((uint64_t)v24, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v15 + 24))
  {
    type metadata accessor for Entity();
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for Query.Destructor();
      uint64_t EntityQuery = REQueryCreateEntityQuery();
LABEL_12:
      uint64_t v20 = EntityQuery;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, a3);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v20;
      uint64_t result = swift_release();
      *(void *)(a4 + v22) = v21;
      return result;
    }
    if (swift_conformsToProtocol2()) {
      uint64_t v19 = AssociatedTypeWitness;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      type metadata accessor for Query.Destructor();
      uint64_t EntityQuery = REQueryCreateComponentQuery();
      goto LABEL_12;
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a1, a3);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for PredicateFactory()
{
  return self;
}

uint64_t type metadata accessor for Query.Destructor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Query.Destructor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t Query.internalQuery.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  if (v2) {
    return *(void *)(v2 + 16);
  }
  else {
    return 0;
  }
}

uint64_t Query.Destructor.deinit()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for Entity();
    if (swift_dynamicCastMetatype())
    {
      REEntityQueryDestroy();
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v2 = AssociatedTypeWitness;
      }
      else {
        uint64_t v2 = 0;
      }
      if (v2) {
        REComponentQueryDestroy();
      }
    }
  }
  return v0;
}

uint64_t Query.Destructor.__deallocating_deinit()
{
  Query.Destructor.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance EntityQuery.Selector@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t EntityQuery.predicate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v2;
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t EntityQuery.init()@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 1;
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 1;
  v9[0] = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  v9[1] = v2;
  v9[2] = partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:);
  v9[3] = v4;
  v9[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  v9[5] = v3;
  type metadata accessor for PredicateFactory();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v5 + 24) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized PredicateFactory.enumerate<A>(_:)((uint64_t)v9);
  if (*(void *)(v5 + 24))
  {
    uint64_t EntityQuery = REQueryCreateEntityQuery();
    swift_release();
    type metadata accessor for EntityQuery.Destructor();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = EntityQuery;
    swift_release();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v7 = 0;
  }
  *a1 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a1[1] = (uint64_t (*)())v2;
  a1[2] = partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:);
  a1[3] = (uint64_t (*)())v4;
  a1[4] = (uint64_t (*)())destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a1[5] = (uint64_t (*)())v3;
  a1[6] = (uint64_t (*)())v7;
  return result;
}

__n128 EntityQuery.init(where:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v3 = a1[1];
  __n128 v12 = *a1;
  v13[0] = *a1;
  __n128 v5 = a1[1];
  __n128 v4 = a1[2];
  v13[1] = v3;
  v13[2] = v4;
  __n128 v10 = a1[2];
  __n128 v11 = v5;
  type metadata accessor for PredicateFactory();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = 0;
  outlined retain of QueryPredicate<Entity>((uint64_t)v13);
  specialized PredicateFactory.enumerate<A>(_:)((uint64_t)v13);
  if (*(void *)(v6 + 24))
  {
    uint64_t EntityQuery = REQueryCreateEntityQuery();
    swift_release();
    type metadata accessor for EntityQuery.Destructor();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = EntityQuery;
    outlined release of QueryPredicate<Entity>((uint64_t)v13);
  }
  else
  {
    swift_release();
    outlined release of QueryPredicate<Entity>((uint64_t)v13);
    uint64_t v8 = 0;
  }
  *a2 = v12;
  a2[1] = v11;
  __n128 result = v10;
  a2[2] = v10;
  a2[3].n128_u64[0] = v8;
  return result;
}

uint64_t EntityQuery.Destructor.__deallocating_deinit()
{
  if (*(void *)(v0 + 16)) {
    REEntityQueryDestroy();
  }

  return swift_deallocClassInstance();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  __n128 v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(uint64_t a1, void (*a2)(unsigned __int8 *__return_ptr, uint64_t *))
{
  uint64_t v4 = a1;
  a2(&v3, &v4);
  return v3;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  uint64_t v1 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v3 = v1[2];
    if (v3)
    {
LABEL_4:
      uint64_t v4 = v3 - 1;
      uint64_t result = v1[v4 + 4];
      v1[2] = v4;
      *(void *)uint64_t v0 = v1;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = (void *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in makeCustomPredicate<A>(predicate:)(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:);
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool);
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool);
  *(void *)(v5 + 24) = v4;
  v9[4] = partial apply for thunk #1 (_:) in createEntityPredicate(_:);
  v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  v9[3] = &block_descriptor_0;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_release();
  uint64_t CustomEntityPredicate = REQueryCreateCustomEntityPredicate();
  _Block_release(v6);
  swift_release();
  return CustomEntityPredicate;
}

uint64_t sub_227E81EC8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_227E81EE0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_227E81EF0()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:)()
{
  return specialized closure #1 in makeCustomPredicate<A>(predicate:)((char *)(v0 + 16));
}

uint64_t type metadata accessor for EntityQuery.Destructor()
{
  return self;
}

uint64_t outlined retain of QueryPredicate<Entity>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of QueryPredicate<Entity>(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for QueryProtocol.Predicate : QueryPredicateProtocol in Query<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for QueryProtocol.Selector : QuerySelector in Query<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t lazy protocol witness table accessor for type QueryPredicate<Entity> and conformance QueryPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>;
  if (!lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for QueryPredicate<Entity>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for QueryProtocol.Selector : QuerySelector in EntityQuery()
{
  return &protocol witness table for EntityQuery.Selector;
}

uint64_t type metadata instantiation function for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for Query()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Query(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    __n128 v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    __n128 v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *__n128 v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v11[3];
    uint64_t v10[2] = v11[2];
    v10[3] = v13;
    uint64_t v14 = v11[5];
    v10[4] = v11[4];
    void v10[5] = v14;
    *(void *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Query(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = v8[3];
  v7[2] = v8[2];
  v7[3] = v10;
  uint64_t v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  *(void *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = v8[3];
  v7[2] = v8[2];
  v7[3] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (long long *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *v8;
  long long v10 = v8[2];
  v7[1] = v8[1];
  v7[2] = v10;
  *int v7 = v9;
  *(void *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  swift_release();
  v7[2] = v8[2];
  swift_release();
  *(void *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Query(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227E82724);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Query(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                *(void *)(v19 + 40) = 0;
                *(_OWORD *)(v19 + 24) = 0u;
                *(_OWORD *)(v19 + 8) = 0u;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *(void *)unint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x227E82938);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata instantiation function for Query.Destructor()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for Query.Destructor()
{
  return swift_initClassMetadata2();
}

uint64_t destroy for EntityQuery()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for EntityQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for EntityQuery(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EntityQuery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityQuery(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityQuery()
{
  return &type metadata for EntityQuery;
}

ValueMetadata *type metadata accessor for EntityQuery.Selector()
{
  return &type metadata for EntityQuery.Selector;
}

uint64_t sub_227E82C20()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_227E82C30()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool)@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v6 = *a1;
  uint64_t result = v4(&v6);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(uint64_t a1)
{
  void (*v2)(unsigned __int8 *__return_ptr, uint64_t *);
  unsigned __int8 v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t partial apply for thunk #1 (_:) in createEntityPredicate(_:)(uint64_t a1)
{
  return thunk #1 (_:) in createEntityPredicate(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized PredicateFactory.connect<A>(_:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
  {
    return REQueryConnectEntityPredicates();
  }
  else
  {
    return MEMORY[0x270F1F5B0](a2, a3);
  }
}

RealityKit::__RKEntityEmphasisAnimationType_optional __swiftcall __RKEntityEmphasisAnimationType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityEmphasisAnimationType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 8;
  if (v5 < 8) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKEntityEmphasisAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityEmphasisAnimationType.allCases.getter;
}

uint64_t __RKEntityEmphasisAnimationType.rawValue.getter()
{
  uint64_t result = 7368560;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6B6E696C62;
      break;
    case 2:
      uint64_t result = 0x65636E756F62;
      break;
    case 3:
      uint64_t result = 1885957222;
      break;
    case 4:
      uint64_t result = 0x74616F6C66;
      break;
    case 5:
      uint64_t result = 0x656C6767696ALL;
      break;
    case 6:
      uint64_t result = 0x65736C7570;
      break;
    case 7:
      uint64_t result = 1852403827;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityEmphasisAnimationType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityEmphasisAnimationType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityEmphasisAnimationType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityEmphasisAnimationType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

RealityKit::__RKEntityEmphasisAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityEmphasisAnimationType(Swift::String *a1)
{
  return __RKEntityEmphasisAnimationType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityEmphasisAnimationType(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7368560;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6B6E696C62;
      goto LABEL_3;
    case 2:
      *a1 = 0x65636E756F62;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1885957222;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x74616F6C66;
      a1[1] = 0xE500000000000000;
      break;
    case 5:
      *a1 = 0x656C6767696ALL;
      a1[1] = 0xE600000000000000;
      break;
    case 6:
      *a1 = 0x65736C7570;
      a1[1] = 0xE500000000000000;
      break;
    case 7:
      *a1 = 1852403827;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityEmphasisAnimationType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityEmphasisAnimationType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityEmphasisAnimationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityEmphasisAnimationType.allCases.getter;
}

uint64_t __RKEntityEmphasisAction.__allocating_init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)(uint64_t a1, char *a2, char *a3, float a4, float a5)
{
  uint64_t v10 = swift_allocObject();
  char v11 = *a2;
  char v12 = *a3;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(void *)(v10 + 200) = 0;
  *(unsigned char *)(v10 + 208) = 1;
  *(float *)(v10 + 108) = a4;
  *(float *)(v10 + 112) = a5;
  *(unsigned char *)(v10 + 116) = v11;
  *(unsigned char *)(v10 + 117) = v12;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityEmphasisAction.init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)(uint64_t a1, char *a2, char *a3, float a4, float a5)
{
  char v6 = *a2;
  char v7 = *a3;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(v5 + 200) = 0;
  *(unsigned char *)(v5 + 208) = 1;
  *(float *)(v5 + 108) = a4;
  *(float *)(v5 + 112) = a5;
  *(unsigned char *)(v5 + 116) = v6;
  *(unsigned char *)(v5 + 117) = v7;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityEmphasisAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v78 = 91;
  unint64_t v79 = 0xE100000000000000;
  if (v2)
  {
    v75[0] = 0;
    v75[1] = 0xE000000000000000;
    uint64_t v83 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = (char *)v78;
  unint64_t v9 = v79;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v78);
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  char v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      uint64_t v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v78);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  RERigidBodyComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    int MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    int MotionType = 0;
  }
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (uint64_t ServiceLocator = REECSManagerGetServiceLocator(),
        uint64_t v19 = MEMORY[0x22A692220](ServiceLocator),
        RETransformComponentGetComponentType(),
        (uint64_t v20 = REEntityGetComponentByClass()) == 0))
  {
    swift_release();
    goto LABEL_23;
  }
  uint64_t v21 = v20;
  RETransformComponentGetLocalPose();
  RETransformComponentGetLocalPose();
  uint64_t v74 = v21;
  RETransformComponentGetLocalScale();
  uint64_t v22 = *(char **)(v1 + 96);
  char v23 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v78 = (uint64_t)v22;
  LOBYTE(v79) = v23;
  __RKEntityAction.state.didset((uint64_t)&v78);
  switch(*(unsigned char *)(v1 + 117))
  {
    case 1:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_46;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisBlinkAnimation.createBlinkAnimation(transform:localBoundingBox:_:variant:duration:)(v31, v32, v33, v34, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4609;
      break;
    case 2:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_47;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisBounceAnimation.createBounceAnimation(transform:localBoundingBox:_:variant:duration:)(v35, v36, v37, v38, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4610;
      break;
    case 3:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_48;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisFlipAnimation.createFlipAnimation(transform:localBoundingBox:_:variant:duration:)(v39, v40, v41, v42, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4611;
      break;
    case 4:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_49;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisFloatAnimation.createFloatAnimation(transform:localBoundingBox:_:variant:duration:)(v43, v44, v45, v46, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4612;
      break;
    case 5:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_50;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisJiggleAnimation.createJiggleAnimation(transform:localBoundingBox:_:variant:duration:)(v47, v48, v49, v50, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4613;
      break;
    case 6:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_52;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisPulseAnimation.createPulseAnimation(transform:localBoundingBox:_:variant:duration:)(v55, v56, v57, v58, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4614;
      break;
    case 7:
      REEntityComputeMeshBounds();
      if (!v19) {
        goto LABEL_51;
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisSpinAnimation.createSpinAnimation(transform:localBoundingBox:_:variant:duration:)(v51, v52, v53, v54, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4615;
      break;
    default:
      REEntityComputeMeshBounds();
      if (!v19)
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x227E83ACCLL);
      }
      LOBYTE(v75[0]) = *(unsigned char *)(v1 + 116);
      uint64_t v28 = specialized static __RKEmphasisPopAnimation.createPopAnimation(transform:localBoundingBox:_:variant:duration:)(v24, v25, v26, v27, *(float *)(v1 + 108), (uint64_t)&v78, v19, v75);
      int v29 = 4608;
      break;
  }
  int v73 = v29;
  uint64_t v59 = specialized _arrayForceCast<A, B>(_:)(v28);
  swift_bridgeObjectRelease();
  if (*(void *)(v59 + 16))
  {
    uint64_t v60 = *(void *)(v59 + 32);
    swift_bridgeObjectRelease();
    if (v60)
    {
      REAnimationComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      uint64_t v78 = 5;
      LODWORD(v79) = v73;
      char v80 = "EMPHASIS";
      LOBYTE(v81) = 0;
      *(void *)(v1 + 200) = REAnimationComponentPlay();
      *(unsigned char *)(v1 + 208) = 0;
      RERelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v61 = swift_allocObject();
  swift_weakInit();
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = v61;
  *(void *)(v62 + 24) = v13;
  *(void *)(v62 + 32) = v74;
  *(_DWORD *)(v62 + 40) = MotionType;
  *(unsigned char *)(v62 + 44) = ComponentByClass == 0;
  uint64_t v63 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
  *(void *)(v1 + 40) = v62;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v63);
  uint64_t v64 = type metadata accessor for Entity();
  uint64_t v76 = v64;
  uint64_t v77 = &protocol witness table for Entity;
  v75[0] = v11;
  uint64_t v65 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v75, 0, (char **)&v78);
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
  *(void *)(v66 + 24) = v65;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  uint64_t v67 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v68 = type metadata accessor for AnyCancellable();
  uint64_t v81 = v68;
  uint64_t v82 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v78 = (uint64_t)v67;
  outlined destroy of BodyTrackingComponent?((uint64_t)v75, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v78, v1 + 120);
  swift_endAccess();
  uint64_t v76 = v64;
  uint64_t v77 = &protocol witness table for Entity;
  v75[0] = v11;
  uint64_t v69 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v75, 0, (char **)&v78);
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
  *(void *)(v70 + 24) = v69;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  uint64_t v71 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v81 = v68;
  uint64_t v82 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v78 = (uint64_t)v71;
  outlined destroy of BodyTrackingComponent?((uint64_t)v75, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v78, v1 + 160);
  swift_endAccess();
  uint64_t v78 = (uint64_t)v10;
  unint64_t v79 = v9;
  uint64_t v72 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v72, &v78);
  swift_bridgeObjectRelease();
  swift_release();
  return 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      *(void *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    unint64_t v5 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    type metadata accessor for Entity();
    do
    {
      v4 += 16;
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
      swift_dynamicCast();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;

  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = a1 + 40;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKMaterialParameterBlock.TransparentPass, Int));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v11;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v11;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v6 + 1;
      Swift::String v7 = v2 + 16 * v6;
      *(unsigned char *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CTLineRef(0);
    if (swift_dynamicCastMetatype()) {
      return v1;
    }
    unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v1;
    }
    unint64_t v5 = 0;
    while (v5 < v4)
    {
      swift_unknownObjectRetain();
      if (!swift_dynamicCastUnknownClass())
      {
        swift_unknownObjectRelease();
        return v2 | 1;
      }
      ++v5;
      swift_unknownObjectRelease();
      unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5 == v4) {
        return v1;
      }
    }
    __break(1u);
  }
  type metadata accessor for CTLineRef(0);
  swift_bridgeObjectRetain();
  uint64_t v6 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in __RKEntityEmphasisAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = result + 120;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6 + 160, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v6 + 160);
    swift_endAccess();
    if ((*(unsigned char *)(v6 + 208) & 1) == 0)
    {
      swift_beginAccess();
      if (*(void *)(v6 + 16))
      {
        swift_retain();
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REAnimationComponentGetCurrentPlaybackTime();
          if (v8 < *(float *)(v6 + 108))
          {
            RETransformComponentGetLocalSRT();
            RETransformComponentSetLocalSRT();
            RENetworkMarkComponentDirty();
          }
        }
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          if (REAnimationComponentHasRunningAnimations())
          {
            if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
              || (swift_beginAccess(), *(unsigned char *)(v6 + 104) == 1) && *(void *)(v6 + 96) == 3)
            {
              REAnimationComponentStopAllAnimations();
              RENetworkMarkComponentDirty();
            }
          }
        }
        swift_release();
        *(void *)(v6 + 200) = 0;
        *(unsigned char *)(v6 + 208) = 1;
      }
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a4 & 0x100000000) == 0 && !a4)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityEmphasisAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 208) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 200))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityEmphasisAction.reversed()()
{
  swift_beginAccess();
  int v1 = *(_DWORD *)(v0 + 108);
  type metadata accessor for __RKEntityEmphasisAction();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = 1;
  *(_DWORD *)(v2 + 108) = v1;
  *(_DWORD *)(v2 + 112) = 1065353216;
  *(_WORD *)(v2 + 116) = 0;
  uint64_t v3 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v3);
}

uint64_t __RKEntityEmphasisAction.description.getter()
{
  BYTE8(v5) = 0;
  v1._countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  *(void *)&long long v5 = *(unsigned __int8 *)(v0 + 117);
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v5 + 1);
}

uint64_t __RKEntityEmphasisAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  __int16 v3 = *(_WORD *)(v1 + 116);
  uint64_t v4 = type metadata accessor for __RKEntityEmphasisAction();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(v5 + 200) = 0;
  *(unsigned char *)(v5 + 208) = 1;
  *(void *)(v5 + 108) = *(void *)(v1 + 108);
  *(_WORD *)(v5 + 116) = v3;
  uint64_t v6 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v6);
  a1[3] = v4;
  *a1 = result;
  return result;
}

uint64_t __RKEntityEmphasisAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    __int16 v5 = *(_WORD *)(v1 + 116);
    type metadata accessor for __RKEntityEmphasisAction();
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(void *)(v6 + 200) = 0;
    *(unsigned char *)(v6 + 208) = 1;
    *(void *)(v6 + 108) = *(void *)(v1 + 108);
    *(_WORD *)(v6 + 116) = v5;
    uint64_t v7 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v7);
  }
  else
  {
    __RKEntityEmphasisAction.copy(with:)(v9);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v8;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityEmphasisAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityEmphasisAction.init(targetEntity:)()
{
}

uint64_t __RKEntityEmphasisAction.__ivar_destroyer()
{
  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityEmphasisAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityEmphasisAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  unint64_t v79 = a2;
  uint64_t v76 = a1;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v70 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v75 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v71 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v72 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (uint64_t (**)(char *, char *, uint64_t))((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v77 = *(uint64_t (***)(char *, char *, uint64_t))(v15 - 8);
  uint64_t v78 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2()) {
    uint64_t v18 = &type metadata for SynchronizationEvents.OwnershipResponse;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v86);
    uint64_t v19 = v88;
    uint64_t v20 = v89;
    __swift_project_boxed_opaque_existential_1(&v86, v88);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v80, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for EventSource?);
    uint64_t v22 = v83;
    uint64_t v23 = v84;
    uint64_t v24 = v85;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
    *(void *)&long long v86 = v22;
    *((void *)&v86 + 1) = v23;
    uint64_t v87 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SynchronizationEvents.OwnershipResponse>>);
    float v25 = (char *)swift_allocObject();
    uint64_t result = v77[4](&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v17, v78);
  }
  else
  {
    uint64_t v77 = v14;
    uint64_t v78 = v12;
    uint64_t v68 = v8;
    float v27 = v75;
    uint64_t v28 = v76;
    uint64_t v29 = v74;
    if (swift_conformsToProtocol2()) {
      uint64_t v30 = &type metadata for SynchronizationEvents.OwnershipResponse;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v30)
    {
      Scene.eventService.getter((uint64_t)&v86);
      uint64_t v31 = v88;
      uint64_t v32 = v89;
      __swift_project_boxed_opaque_existential_1(&v86, v88);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v82 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      EventService.publisher<A>(for:on:)(v33, (uint64_t)&v80, v31, v33, v32);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for EventSource?);
      uint64_t v34 = v83;
      uint64_t v35 = v84;
      uint64_t v36 = v85;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
      *(void *)&long long v86 = v34;
      *((void *)&v86 + 1) = v35;
      uint64_t v87 = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      float32x2_t v37 = v77;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SynchronizationEvents.OwnershipResponse>>);
      float v25 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v78 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v37, v11);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        float v38 = &type metadata for SynchronizationEvents.OwnershipResponse;
      }
      else {
        float v38 = 0;
      }
      if (v38)
      {
        Scene.eventService.getter((uint64_t)&v86);
        uint64_t v39 = v88;
        uint64_t v40 = v89;
        __swift_project_boxed_opaque_existential_1(&v86, v88);
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v82 = 0;
        long long v80 = 0u;
        long long v81 = 0u;
        EventService.publisher<A>(for:on:)(v41, (uint64_t)&v80, v39, v41, v40);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for EventSource?);
        uint64_t v42 = v83;
        uint64_t v43 = v84;
        uint64_t v44 = v85;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
        *(void *)&long long v86 = v42;
        *((void *)&v86 + 1) = v43;
        uint64_t v87 = v44;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SynchronizationEvents.OwnershipResponse>>);
        float v25 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v10, v68);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          float32x2_t v45 = &type metadata for SynchronizationEvents.OwnershipResponse;
        }
        else {
          float32x2_t v45 = 0;
        }
        if (v45)
        {
          Scene.eventService.getter((uint64_t)&v86);
          uint64_t v46 = v88;
          uint64_t v47 = v89;
          __swift_project_boxed_opaque_existential_1(&v86, v88);
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v82 = 0;
          long long v80 = 0u;
          long long v81 = 0u;
          EventService.publisher<A>(for:on:)(v48, (uint64_t)&v80, v46, v48, v47);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for EventSource?);
          uint64_t v49 = v83;
          uint64_t v50 = v84;
          uint64_t v51 = v85;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
          *(void *)&long long v86 = v49;
          *((void *)&v86 + 1) = v50;
          uint64_t v87 = v51;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SynchronizationEvents.OwnershipResponse>>);
          float v25 = (char *)swift_allocObject();
          uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v7, v5);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            float v52 = &type metadata for SynchronizationEvents.OwnershipResponse;
          }
          else {
            float v52 = 0;
          }
          if (v52)
          {
            Scene.eventService.getter((uint64_t)&v86);
            uint64_t v53 = v88;
            uint64_t v54 = v89;
            __swift_project_boxed_opaque_existential_1(&v86, v88);
            uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            uint64_t v82 = 0;
            long long v80 = 0u;
            long long v81 = 0u;
            EventService.publisher<A>(for:on:)(v55, (uint64_t)&v80, v53, v55, v54);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for EventSource?);
            uint64_t v56 = v83;
            uint64_t v57 = v84;
            uint64_t v58 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            *(void *)&long long v86 = v56;
            *((void *)&v86 + 1) = v57;
            uint64_t v87 = v58;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SynchronizationEvents.OwnershipResponse>>);
            float v25 = (char *)swift_allocObject();
            uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v4, v29);
          }
          else
          {
            Scene.eventService.getter((uint64_t)&v86);
            uint64_t v60 = v88;
            uint64_t v59 = v89;
            __swift_project_boxed_opaque_existential_1(&v86, v88);
            type metadata accessor for REOwnershipResponseEvent(0);
            EventService.publisher<A>(for:on:)(v61, v28, v60, v61, v59);
            long long v62 = v80;
            uint64_t v63 = v81;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
            static os_log_type_t.info.getter();
            type metadata accessor for OS_os_log();
            uint64_t v64 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            swift_allocObject();
            swift_weakInit();
            long long v86 = v62;
            uint64_t v87 = v63;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipResponseEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>>);
            float v25 = (char *)swift_allocObject();
            uint64_t v65 = v70;
            uint64_t v66 = v69;
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v27, v69);
            swift_release();
            (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v66);
            uint64_t result = swift_release();
          }
        }
      }
    }
  }
  char *v79 = v25;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(char *, char *, uint64_t);
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  ValueMetadata *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(char *, char *, uint64_t);
  uint64_t v79;
  char **v80;
  long long v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  long long v80 = a2;
  uint64_t v77 = a1;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>);
  uint64_t v76 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v75 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, CollisionEvents.Began>);
  uint64_t v72 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, CollisionEvents.Began>);
  uint64_t v74 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, CollisionEvents.Began>);
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, CollisionEvents.Began>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (uint64_t (**)(char *, char *, uint64_t))((char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, CollisionEvents.Began>);
  uint64_t v78 = *(uint64_t (***)(char *, char *, uint64_t))(v15 - 8);
  unint64_t v79 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2()) {
    uint64_t v18 = &type metadata for CollisionEvents.Began;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v87);
    uint64_t v19 = v90;
    uint64_t v20 = v91;
    __swift_project_boxed_opaque_existential_1(&v87, v90);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v83 = 0;
    long long v81 = 0u;
    uint64_t v82 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v81, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
    uint64_t v22 = v84;
    uint64_t v23 = v85;
    uint64_t v24 = v86;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
    uint64_t v87 = v22;
    uint64_t v88 = v23;
    uint64_t v89 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, CollisionEvents.Began>>);
    float v25 = (char *)swift_allocObject();
    uint64_t result = v78[4](&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v17, v79);
  }
  else
  {
    uint64_t v78 = v14;
    unint64_t v79 = v12;
    uint64_t v68 = v10;
    uint64_t v69 = v8;
    uint64_t v28 = v76;
    float v27 = v77;
    uint64_t v30 = v74;
    uint64_t v29 = v75;
    if (swift_conformsToProtocol2()) {
      uint64_t v31 = &type metadata for CollisionEvents.Began;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v31)
    {
      Scene.eventService.getter((uint64_t)&v87);
      uint64_t v32 = v90;
      uint64_t v33 = v91;
      __swift_project_boxed_opaque_existential_1(&v87, v90);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v83 = 0;
      long long v81 = 0u;
      uint64_t v82 = 0u;
      EventService.publisher<A>(for:on:)(v34, (uint64_t)&v81, v32, v34, v33);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
      uint64_t v35 = v84;
      uint64_t v36 = v85;
      float32x2_t v37 = v86;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      uint64_t v87 = v35;
      uint64_t v88 = v36;
      uint64_t v89 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      float v38 = v78;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, CollisionEvents.Began>>);
      float v25 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v79 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v38, v11);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v39 = &type metadata for CollisionEvents.Began;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v87);
        uint64_t v40 = v90;
        uint64_t v41 = v91;
        __swift_project_boxed_opaque_existential_1(&v87, v90);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v83 = 0;
        long long v81 = 0u;
        uint64_t v82 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v81, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
        uint64_t v43 = v84;
        uint64_t v44 = v85;
        float32x2_t v45 = v86;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        uint64_t v87 = v43;
        uint64_t v88 = v44;
        uint64_t v89 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        uint64_t v46 = v68;
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, CollisionEvents.Began>>);
        float v25 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v46, v69);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v47 = &type metadata for CollisionEvents.Began;
        }
        else {
          uint64_t v47 = 0;
        }
        if (v47)
        {
          Scene.eventService.getter((uint64_t)&v87);
          uint64_t v48 = v90;
          uint64_t v49 = v91;
          __swift_project_boxed_opaque_existential_1(&v87, v90);
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v83 = 0;
          long long v81 = 0u;
          uint64_t v82 = 0u;
          EventService.publisher<A>(for:on:)(v50, (uint64_t)&v81, v48, v50, v49);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
          uint64_t v51 = v84;
          float v52 = v85;
          uint64_t v53 = v86;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          uint64_t v87 = v51;
          uint64_t v88 = v52;
          uint64_t v89 = v53;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, CollisionEvents.Began>>);
          float v25 = (char *)swift_allocObject();
          uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v7, v5);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v54 = &type metadata for CollisionEvents.Began;
          }
          else {
            uint64_t v54 = 0;
          }
          if (v54)
          {
            Scene.eventService.getter((uint64_t)&v87);
            uint64_t v55 = v90;
            uint64_t v56 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            uint64_t v83 = 0;
            long long v81 = 0u;
            uint64_t v82 = 0u;
            EventService.publisher<A>(for:on:)(v57, (uint64_t)&v81, v55, v57, v56);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
            uint64_t v58 = v84;
            uint64_t v59 = v85;
            uint64_t v60 = v86;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            uint64_t v87 = v58;
            uint64_t v88 = v59;
            uint64_t v89 = v60;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, CollisionEvents.Began>>);
            float v25 = (char *)swift_allocObject();
            uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v4, v71);
          }
          else
          {
            Scene.eventService.getter((uint64_t)&v87);
            long long v62 = v90;
            uint64_t v61 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            type metadata accessor for RECollisionDidStartEventEx(0);
            EventService.publisher<A>(for:on:)(v63, v27, v62, v63, v61);
            uint64_t v65 = *((void *)&v81 + 1);
            uint64_t v64 = v81;
            uint64_t v66 = v82;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            uint64_t v87 = v64;
            uint64_t v88 = v65;
            uint64_t v89 = v66;
            swift_retain();
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStartEventEx> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>>);
            float v25 = (char *)swift_allocObject();
            uint64_t v67 = v70;
            (*(void (**)(char *, char *, uint64_t))(v28 + 16))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v29, v70);
            swift_release();
            (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v67);
            uint64_t result = swift_release();
          }
        }
      }
    }
  }
  *long long v80 = v25;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(char *, char *, uint64_t);
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  ValueMetadata *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(char *, char *, uint64_t);
  uint64_t v79;
  char **v80;
  long long v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  long long v80 = a2;
  uint64_t v77 = a1;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>);
  uint64_t v70 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v75 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Update>);
  uint64_t v71 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Update>);
  uint64_t v72 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Update>);
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Update>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (uint64_t (**)(char *, char *, uint64_t))((char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Update>);
  uint64_t v78 = *(uint64_t (***)(char *, char *, uint64_t))(v15 - 8);
  unint64_t v79 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2()) {
    uint64_t v18 = &type metadata for SceneEvents.Update;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v87);
    uint64_t v19 = v90;
    uint64_t v20 = v91;
    __swift_project_boxed_opaque_existential_1(&v87, v90);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v83 = 0;
    long long v81 = 0u;
    uint64_t v82 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v81, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
    uint64_t v22 = v84;
    uint64_t v23 = v85;
    uint64_t v24 = v86;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
    uint64_t v87 = v22;
    uint64_t v88 = v23;
    uint64_t v89 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Update>>);
    float v25 = (char *)swift_allocObject();
    uint64_t result = v78[4](&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v17, v79);
  }
  else
  {
    uint64_t v78 = v14;
    unint64_t v79 = v11;
    uint64_t v68 = v10;
    uint64_t v69 = v8;
    float v27 = v76;
    uint64_t v28 = v77;
    uint64_t v30 = v74;
    uint64_t v29 = v75;
    if (swift_conformsToProtocol2()) {
      uint64_t v31 = &type metadata for SceneEvents.Update;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v31)
    {
      Scene.eventService.getter((uint64_t)&v87);
      uint64_t v32 = v90;
      uint64_t v33 = v91;
      __swift_project_boxed_opaque_existential_1(&v87, v90);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v83 = 0;
      long long v81 = 0u;
      uint64_t v82 = 0u;
      EventService.publisher<A>(for:on:)(v34, (uint64_t)&v81, v32, v34, v33);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
      uint64_t v35 = v84;
      uint64_t v36 = v85;
      float32x2_t v37 = v86;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      uint64_t v87 = v35;
      uint64_t v88 = v36;
      uint64_t v89 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      float v38 = v78;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Update>>);
      float v25 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v12 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v38, v79);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v39 = &type metadata for SceneEvents.Update;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v87);
        uint64_t v40 = v90;
        uint64_t v41 = v91;
        __swift_project_boxed_opaque_existential_1(&v87, v90);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v83 = 0;
        long long v81 = 0u;
        uint64_t v82 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v81, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
        uint64_t v43 = v84;
        uint64_t v44 = v85;
        float32x2_t v45 = v86;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        uint64_t v87 = v43;
        uint64_t v88 = v44;
        uint64_t v89 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        uint64_t v46 = v68;
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Update>>);
        float v25 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v46, v69);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v47 = &type metadata for SceneEvents.Update;
        }
        else {
          uint64_t v47 = 0;
        }
        if (v47)
        {
          Scene.eventService.getter((uint64_t)&v87);
          uint64_t v48 = v90;
          uint64_t v49 = v91;
          __swift_project_boxed_opaque_existential_1(&v87, v90);
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v83 = 0;
          long long v81 = 0u;
          uint64_t v82 = 0u;
          EventService.publisher<A>(for:on:)(v50, (uint64_t)&v81, v48, v50, v49);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
          uint64_t v51 = v84;
          float v52 = v85;
          uint64_t v53 = v86;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          uint64_t v87 = v51;
          uint64_t v88 = v52;
          uint64_t v89 = v53;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Update>>);
          float v25 = (char *)swift_allocObject();
          uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v7, v5);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v54 = &type metadata for SceneEvents.Update;
          }
          else {
            uint64_t v54 = 0;
          }
          if (v54)
          {
            Scene.eventService.getter((uint64_t)&v87);
            uint64_t v55 = v90;
            uint64_t v56 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            uint64_t v83 = 0;
            long long v81 = 0u;
            uint64_t v82 = 0u;
            EventService.publisher<A>(for:on:)(v57, (uint64_t)&v81, v55, v57, v56);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
            uint64_t v58 = v84;
            uint64_t v59 = v85;
            uint64_t v60 = v86;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            uint64_t v87 = v58;
            uint64_t v88 = v59;
            uint64_t v89 = v60;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Update>>);
            float v25 = (char *)swift_allocObject();
            uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v4, v30);
          }
          else
          {
            Scene.engineEventService.getter(&v87);
            long long v62 = v90;
            uint64_t v61 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            type metadata accessor for REEngineDoUpdateEvent(0);
            EventService.publisher<A>(for:on:)(v63, v28, v62, v63, v61);
            uint64_t v65 = *((void *)&v81 + 1);
            uint64_t v64 = v81;
            uint64_t v66 = v82;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            swift_allocObject();
            swift_weakInit();
            uint64_t v87 = v64;
            uint64_t v88 = v65;
            uint64_t v89 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>>);
            float v25 = (char *)swift_allocObject();
            uint64_t v67 = v70;
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v29, v27);
            swift_release();
            (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v27);
            uint64_t result = swift_release();
          }
        }
      }
    }
  }
  *long long v80 = v25;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(char *, char *, uint64_t);
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  ValueMetadata *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(char *, char *, uint64_t);
  uint64_t v79;
  char **v80;
  long long v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  long long v80 = a2;
  uint64_t v77 = a1;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>);
  uint64_t v70 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v75 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Render>);
  uint64_t v71 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Render>);
  uint64_t v72 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Render>);
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Render>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (uint64_t (**)(char *, char *, uint64_t))((char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Render>);
  uint64_t v78 = *(uint64_t (***)(char *, char *, uint64_t))(v15 - 8);
  unint64_t v79 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2()) {
    uint64_t v18 = &type metadata for SceneEvents.Render;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v87);
    uint64_t v19 = v90;
    uint64_t v20 = v91;
    __swift_project_boxed_opaque_existential_1(&v87, v90);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v83 = 0;
    long long v81 = 0u;
    uint64_t v82 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v81, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
    uint64_t v22 = v84;
    uint64_t v23 = v85;
    uint64_t v24 = v86;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
    uint64_t v87 = v22;
    uint64_t v88 = v23;
    uint64_t v89 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Render>>);
    float v25 = (char *)swift_allocObject();
    uint64_t result = v78[4](&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v17, v79);
  }
  else
  {
    uint64_t v78 = v14;
    unint64_t v79 = v11;
    uint64_t v68 = v10;
    uint64_t v69 = v8;
    float v27 = v76;
    uint64_t v28 = v77;
    uint64_t v30 = v74;
    uint64_t v29 = v75;
    if (swift_conformsToProtocol2()) {
      uint64_t v31 = &type metadata for SceneEvents.Render;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v31)
    {
      Scene.eventService.getter((uint64_t)&v87);
      uint64_t v32 = v90;
      uint64_t v33 = v91;
      __swift_project_boxed_opaque_existential_1(&v87, v90);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v83 = 0;
      long long v81 = 0u;
      uint64_t v82 = 0u;
      EventService.publisher<A>(for:on:)(v34, (uint64_t)&v81, v32, v34, v33);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
      uint64_t v35 = v84;
      uint64_t v36 = v85;
      float32x2_t v37 = v86;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      uint64_t v87 = v35;
      uint64_t v88 = v36;
      uint64_t v89 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      float v38 = v78;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Render>>);
      float v25 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v12 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v38, v79);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v39 = &type metadata for SceneEvents.Render;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v87);
        uint64_t v40 = v90;
        uint64_t v41 = v91;
        __swift_project_boxed_opaque_existential_1(&v87, v90);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v83 = 0;
        long long v81 = 0u;
        uint64_t v82 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v81, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
        uint64_t v43 = v84;
        uint64_t v44 = v85;
        float32x2_t v45 = v86;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        uint64_t v87 = v43;
        uint64_t v88 = v44;
        uint64_t v89 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        uint64_t v46 = v68;
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Render>>);
        float v25 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v46, v69);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v47 = &type metadata for SceneEvents.Render;
        }
        else {
          uint64_t v47 = 0;
        }
        if (v47)
        {
          Scene.eventService.getter((uint64_t)&v87);
          uint64_t v48 = v90;
          uint64_t v49 = v91;
          __swift_project_boxed_opaque_existential_1(&v87, v90);
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v83 = 0;
          long long v81 = 0u;
          uint64_t v82 = 0u;
          EventService.publisher<A>(for:on:)(v50, (uint64_t)&v81, v48, v50, v49);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
          uint64_t v51 = v84;
          float v52 = v85;
          uint64_t v53 = v86;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          uint64_t v87 = v51;
          uint64_t v88 = v52;
          uint64_t v89 = v53;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Render>>);
          float v25 = (char *)swift_allocObject();
          uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v7, v5);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v54 = &type metadata for SceneEvents.Render;
          }
          else {
            uint64_t v54 = 0;
          }
          if (v54)
          {
            Scene.eventService.getter((uint64_t)&v87);
            uint64_t v55 = v90;
            uint64_t v56 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            uint64_t v83 = 0;
            long long v81 = 0u;
            uint64_t v82 = 0u;
            EventService.publisher<A>(for:on:)(v57, (uint64_t)&v81, v55, v57, v56);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
            uint64_t v58 = v84;
            uint64_t v59 = v85;
            uint64_t v60 = v86;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            uint64_t v87 = v58;
            uint64_t v88 = v59;
            uint64_t v89 = v60;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Render>>);
            float v25 = (char *)swift_allocObject();
            uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 32))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v4, v30);
          }
          else
          {
            Scene.engineEventService.getter(&v87);
            long long v62 = v90;
            uint64_t v61 = v91;
            __swift_project_boxed_opaque_existential_1(&v87, v90);
            type metadata accessor for REEngineDoRenderEvent(0);
            EventService.publisher<A>(for:on:)(v63, v28, v62, v63, v61);
            uint64_t v65 = *((void *)&v81 + 1);
            uint64_t v64 = v81;
            uint64_t v66 = v82;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            swift_allocObject();
            swift_weakInit();
            uint64_t v87 = v64;
            uint64_t v88 = v65;
            uint64_t v89 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoRenderEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>>);
            float v25 = (char *)swift_allocObject();
            uint64_t v67 = v70;
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(&v25[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v25 + 16)], v29, v27);
            swift_release();
            (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v27);
            uint64_t result = swift_release();
          }
        }
      }
    }
  }
  *long long v80 = v25;
  return result;
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char **a3@<X8>)
{
  uint64_t v72 = a1;
  uint64_t v83 = a3;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v82 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    uint64_t v71 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v71 = 0;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v20 = &type metadata for AnimationEvents.PlaybackTerminated;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    Scene.eventService.getter((uint64_t)&v90);
    uint64_t v21 = v93;
    uint64_t v22 = v94;
    __swift_project_boxed_opaque_existential_1(&v90, v93);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    EventService.publisher<A>(for:on:)(v23, (uint64_t)&v84, v21, v23, v22);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
    uint64_t v24 = v87;
    uint64_t v25 = v88;
    uint64_t v26 = v89;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    uint64_t v90 = v24;
    uint64_t v91 = v25;
    uint64_t v92 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackTerminated>>);
    float v27 = (char *)swift_allocObject();
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v19, v16);
  }
  else
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v29 = &type metadata for AnimationEvents.PlaybackTerminated;
    }
    else {
      uint64_t v29 = 0;
    }
    if (v29)
    {
      Scene.eventService.getter((uint64_t)&v90);
      uint64_t v30 = v93;
      uint64_t v31 = v94;
      __swift_project_boxed_opaque_existential_1(&v90, v93);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v86 = 0;
      long long v84 = 0u;
      long long v85 = 0u;
      EventService.publisher<A>(for:on:)(v32, (uint64_t)&v84, v30, v32, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
      uint64_t v33 = v87;
      uint64_t v34 = v88;
      uint64_t v35 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      uint64_t v90 = v33;
      uint64_t v91 = v34;
      uint64_t v92 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackTerminated>>);
      float v27 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v15, v12);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v36 = &type metadata for AnimationEvents.PlaybackTerminated;
      }
      else {
        uint64_t v36 = 0;
      }
      if (v36)
      {
        Scene.eventService.getter((uint64_t)&v90);
        uint64_t v37 = v93;
        uint64_t v38 = v94;
        __swift_project_boxed_opaque_existential_1(&v90, v93);
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v86 = 0;
        long long v84 = 0u;
        long long v85 = 0u;
        EventService.publisher<A>(for:on:)(v39, (uint64_t)&v84, v37, v39, v38);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
        uint64_t v40 = v87;
        uint64_t v41 = v88;
        uint64_t v42 = v89;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
        uint64_t v90 = v40;
        uint64_t v91 = v41;
        uint64_t v92 = v42;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackTerminated>>);
        float v27 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v11, v9);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v43 = &type metadata for AnimationEvents.PlaybackTerminated;
        }
        else {
          uint64_t v43 = 0;
        }
        if (v43)
        {
          Scene.eventService.getter((uint64_t)&v90);
          uint64_t v44 = v93;
          uint64_t v45 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          EventService.publisher<A>(for:on:)(v46, (uint64_t)&v84, v44, v46, v45);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          uint64_t v47 = v87;
          uint64_t v48 = v88;
          uint64_t v49 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          uint64_t v90 = v47;
          uint64_t v91 = v48;
          uint64_t v92 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          uint64_t v50 = v79;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackTerminated>>);
          float v27 = (char *)swift_allocObject();
          uint64_t v51 = &v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)];
          uint64_t v53 = v80;
          uint64_t v52 = v81;
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v54 = &type metadata for AnimationEvents.PlaybackTerminated;
          }
          else {
            uint64_t v54 = 0;
          }
          if (!v54)
          {
            Scene.eventService.getter((uint64_t)&v90);
            uint64_t v61 = v93;
            uint64_t v62 = v94;
            __swift_project_boxed_opaque_existential_1(&v90, v93);
            type metadata accessor for REAnimationHasTerminatedEvent(0);
            EventService.publisher<A>(for:on:)(v63, v72, v61, v63, v62);
            uint64_t v65 = *((void *)&v84 + 1);
            uint64_t v64 = v84;
            uint64_t v66 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            *(void *)(swift_allocObject() + 16) = v71;
            uint64_t v90 = v64;
            uint64_t v91 = v65;
            uint64_t v92 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasTerminatedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
            uint64_t v67 = v73;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>>);
            float v27 = (char *)swift_allocObject();
            uint64_t v68 = v74;
            uint64_t v69 = v75;
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v67, v75);
            swift_release();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
            uint64_t result = swift_release();
            goto LABEL_30;
          }
          Scene.eventService.getter((uint64_t)&v90);
          uint64_t v55 = v93;
          uint64_t v56 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          EventService.publisher<A>(for:on:)(v57, (uint64_t)&v84, v55, v57, v56);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          uint64_t v58 = v87;
          uint64_t v59 = v88;
          uint64_t v60 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          uint64_t v90 = v58;
          uint64_t v91 = v59;
          uint64_t v92 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          uint64_t v50 = v76;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackTerminated>>);
          float v27 = (char *)swift_allocObject();
          uint64_t v51 = &v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)];
          uint64_t v53 = v77;
          uint64_t v52 = v78;
        }
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))(v51, v50, v52);
      }
    }
  }
LABEL_30:
  *uint64_t v83 = v27;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  ValueMetadata *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  long long v84;
  long long v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  uint64_t v72 = a1;
  uint64_t v83 = a3;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v82 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    uint64_t v71 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v71 = 0;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v20 = &type metadata for AnimationEvents.PlaybackCompleted;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    Scene.eventService.getter((uint64_t)&v90);
    uint64_t v21 = v93;
    uint64_t v22 = v94;
    __swift_project_boxed_opaque_existential_1(&v90, v93);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    EventService.publisher<A>(for:on:)(v23, (uint64_t)&v84, v21, v23, v22);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
    uint64_t v24 = v87;
    uint64_t v25 = v88;
    uint64_t v26 = v89;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    uint64_t v90 = v24;
    uint64_t v91 = v25;
    uint64_t v92 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackCompleted>>);
    float v27 = (char *)swift_allocObject();
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v19, v16);
  }
  else
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v29 = &type metadata for AnimationEvents.PlaybackCompleted;
    }
    else {
      uint64_t v29 = 0;
    }
    if (v29)
    {
      Scene.eventService.getter((uint64_t)&v90);
      uint64_t v30 = v93;
      uint64_t v31 = v94;
      __swift_project_boxed_opaque_existential_1(&v90, v93);
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v86 = 0;
      long long v84 = 0u;
      long long v85 = 0u;
      EventService.publisher<A>(for:on:)(v32, (uint64_t)&v84, v30, v32, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
      uint64_t v33 = v87;
      uint64_t v34 = v88;
      uint64_t v35 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      uint64_t v90 = v33;
      uint64_t v91 = v34;
      uint64_t v92 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackCompleted>>);
      float v27 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v15, v12);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v36 = &type metadata for AnimationEvents.PlaybackCompleted;
      }
      else {
        uint64_t v36 = 0;
      }
      if (v36)
      {
        Scene.eventService.getter((uint64_t)&v90);
        uint64_t v37 = v93;
        uint64_t v38 = v94;
        __swift_project_boxed_opaque_existential_1(&v90, v93);
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v86 = 0;
        long long v84 = 0u;
        long long v85 = 0u;
        EventService.publisher<A>(for:on:)(v39, (uint64_t)&v84, v37, v39, v38);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
        uint64_t v40 = v87;
        uint64_t v41 = v88;
        uint64_t v42 = v89;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
        uint64_t v90 = v40;
        uint64_t v91 = v41;
        uint64_t v92 = v42;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackCompleted>>);
        float v27 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v11, v9);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v43 = &type metadata for AnimationEvents.PlaybackCompleted;
        }
        else {
          uint64_t v43 = 0;
        }
        if (v43)
        {
          Scene.eventService.getter((uint64_t)&v90);
          uint64_t v44 = v93;
          uint64_t v45 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          EventService.publisher<A>(for:on:)(v46, (uint64_t)&v84, v44, v46, v45);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          uint64_t v47 = v87;
          uint64_t v48 = v88;
          uint64_t v49 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          uint64_t v90 = v47;
          uint64_t v91 = v48;
          uint64_t v92 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          uint64_t v50 = v79;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackCompleted>>);
          float v27 = (char *)swift_allocObject();
          uint64_t v51 = &v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)];
          uint64_t v53 = v80;
          uint64_t v52 = v81;
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v54 = &type metadata for AnimationEvents.PlaybackCompleted;
          }
          else {
            uint64_t v54 = 0;
          }
          if (!v54)
          {
            Scene.eventService.getter((uint64_t)&v90);
            uint64_t v61 = v93;
            uint64_t v62 = v94;
            __swift_project_boxed_opaque_existential_1(&v90, v93);
            type metadata accessor for REAnimationHasCompletedEvent(0);
            EventService.publisher<A>(for:on:)(v63, v72, v61, v63, v62);
            uint64_t v65 = *((void *)&v84 + 1);
            uint64_t v64 = v84;
            uint64_t v66 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            *(void *)(swift_allocObject() + 16) = v71;
            uint64_t v90 = v64;
            uint64_t v91 = v65;
            uint64_t v92 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasCompletedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
            uint64_t v67 = v73;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>>);
            float v27 = (char *)swift_allocObject();
            uint64_t v68 = v74;
            uint64_t v69 = v75;
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)], v67, v75);
            swift_release();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
            uint64_t result = swift_release();
            goto LABEL_30;
          }
          Scene.eventService.getter((uint64_t)&v90);
          uint64_t v55 = v93;
          uint64_t v56 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          EventService.publisher<A>(for:on:)(v57, (uint64_t)&v84, v55, v57, v56);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          uint64_t v58 = v87;
          uint64_t v59 = v88;
          uint64_t v60 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          uint64_t v90 = v58;
          uint64_t v91 = v59;
          uint64_t v92 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          uint64_t v50 = v76;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackCompleted>>);
          float v27 = (char *)swift_allocObject();
          uint64_t v51 = &v27[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v27 + 16)];
          uint64_t v53 = v77;
          uint64_t v52 = v78;
        }
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))(v51, v50, v52);
      }
    }
  }
LABEL_30:
  *uint64_t v83 = v27;
  return result;
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v77 = a3;
  uint64_t v76 = a2;
  uint64_t v75 = a1;
  uint64_t v88 = a5;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v78 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v81 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v86 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4) {
    uint64_t v74 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v74 = 0;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v23 = &type metadata for ComponentEvents.WillDeactivate;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23)
  {
    Scene.eventService.getter((uint64_t)&v95);
    uint64_t v24 = v98;
    uint64_t v25 = v99;
    __swift_project_boxed_opaque_existential_1(&v95, v98);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    EventService.publisher<A>(for:on:)(v26, (uint64_t)&v89, v24, v26, v25);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v89, &demangling cache variable for type metadata for EventSource?);
    uint64_t v27 = v92;
    uint64_t v28 = v93;
    uint64_t v29 = v94;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    uint64_t v95 = v27;
    uint64_t v96 = v28;
    uint64_t v97 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, ComponentEvents.WillDeactivate>>);
    uint64_t v30 = (char *)swift_allocObject();
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v22, v19);
  }
  else
  {
    if (swift_conformsToProtocol2()) {
      uint64_t v32 = &type metadata for ComponentEvents.WillDeactivate;
    }
    else {
      uint64_t v32 = 0;
    }
    if (v32)
    {
      Scene.eventService.getter((uint64_t)&v95);
      uint64_t v33 = v98;
      uint64_t v34 = v99;
      __swift_project_boxed_opaque_existential_1(&v95, v98);
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v91 = 0;
      long long v89 = 0u;
      long long v90 = 0u;
      EventService.publisher<A>(for:on:)(v35, (uint64_t)&v89, v33, v35, v34);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v89, &demangling cache variable for type metadata for EventSource?);
      uint64_t v36 = v92;
      uint64_t v37 = v93;
      uint64_t v38 = v94;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
      uint64_t v95 = v36;
      uint64_t v96 = v37;
      uint64_t v97 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, ComponentEvents.WillDeactivate>>);
      uint64_t v30 = (char *)swift_allocObject();
      uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v18, v15);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v39 = &type metadata for ComponentEvents.WillDeactivate;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v95);
        uint64_t v40 = v98;
        uint64_t v41 = v99;
        __swift_project_boxed_opaque_existential_1(&v95, v98);
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v91 = 0;
        long long v89 = 0u;
        long long v90 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v89, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v89, &demangling cache variable for type metadata for EventSource?);
        uint64_t v43 = v92;
        uint64_t v44 = v93;
        uint64_t v45 = v94;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
        uint64_t v95 = v43;
        uint64_t v96 = v44;
        uint64_t v97 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, ComponentEvents.WillDeactivate>>);
        uint64_t v30 = (char *)swift_allocObject();
        uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v86 + 32))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v14, v12);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v46 = &type metadata for ComponentEvents.WillDeactivate;
        }
        else {
          uint64_t v46 = 0;
        }
        if (v46)
        {
          Scene.eventService.getter((uint64_t)&v95);
          uint64_t v47 = v98;
          uint64_t v48 = v99;
          __swift_project_boxed_opaque_existential_1(&v95, v98);
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v91 = 0;
          long long v89 = 0u;
          long long v90 = 0u;
          EventService.publisher<A>(for:on:)(v49, (uint64_t)&v89, v47, v49, v48);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v89, &demangling cache variable for type metadata for EventSource?);
          uint64_t v50 = v92;
          uint64_t v51 = v93;
          uint64_t v52 = v94;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
          uint64_t v95 = v50;
          uint64_t v96 = v51;
          uint64_t v97 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, ComponentEvents.WillDeactivate>>);
          uint64_t v30 = (char *)swift_allocObject();
          uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v84 + 32))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v11, v85);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v53 = &type metadata for ComponentEvents.WillDeactivate;
          }
          else {
            uint64_t v53 = 0;
          }
          if (v53)
          {
            Scene.eventService.getter((uint64_t)&v95);
            uint64_t v54 = v98;
            uint64_t v55 = v99;
            __swift_project_boxed_opaque_existential_1(&v95, v98);
            uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            uint64_t v91 = 0;
            long long v89 = 0u;
            long long v90 = 0u;
            EventService.publisher<A>(for:on:)(v56, (uint64_t)&v89, v54, v56, v55);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v89, &demangling cache variable for type metadata for EventSource?);
            uint64_t v57 = v92;
            uint64_t v58 = v93;
            uint64_t v59 = v94;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            uint64_t v95 = v57;
            uint64_t v96 = v58;
            uint64_t v97 = v59;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            uint64_t v60 = v81;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, ComponentEvents.WillDeactivate>>);
            uint64_t v30 = (char *)swift_allocObject();
            uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v82 + 32))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v60, v83);
          }
          else
          {
            uint64_t v61 = v87;
            Scene.eventService.getter((uint64_t)&v95);
            uint64_t v62 = v98;
            uint64_t v63 = v99;
            __swift_project_boxed_opaque_existential_1(&v95, v98);
            type metadata accessor for REComponentWillDeactivateEvent(0);
            (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8))(&v89, v64, v75, v76, v77, v64, v62, v63);
            uint64_t v66 = *((void *)&v89 + 1);
            uint64_t v65 = v89;
            uint64_t v67 = v90;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
            uint64_t v68 = swift_allocObject();
            uint64_t v69 = v74;
            *(void *)(v68 + 16) = v61;
            *(void *)(v68 + 24) = v69;
            uint64_t v95 = v65;
            uint64_t v96 = v66;
            uint64_t v97 = v67;
            swift_retain();
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
            uint64_t v70 = v78;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>>);
            uint64_t v30 = (char *)swift_allocObject();
            uint64_t v71 = v79;
            uint64_t v72 = v80;
            (*(void (**)(char *, char *, uint64_t))(v79 + 16))(&v30[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v30 + 16)], v70, v80);
            swift_release();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
            uint64_t result = swift_release();
          }
        }
      }
    }
  }
  *uint64_t v88 = v30;
  return result;
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

uint64_t specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

uint64_t specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *a3 = 0;
  }
  return result;
}

{
  uint64_t result;
  unsigned char v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

{
  uint64_t result;
  unsigned char v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

double specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(unsigned char *)(a3 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

double specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
    double result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

double specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

uint64_t specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

double specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

double specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

uint64_t specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

double specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

double specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = *a1;
  return a2(&v3);
}

uint64_t sub_227E8A78C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227E8A7C4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 45, 7);
}

uint64_t partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:)()
{
  return specialized closure #1 in __RKEntityEmphasisAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

uint64_t partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityEmphasisAction.perform(with:)(a1);
}

uint64_t sub_227E8A844()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = *a1;
  return v2(&v4);
}

uint64_t type metadata accessor for __RKEntityEmphasisAction()
{
  return self;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityEmphasisAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityEmphasisAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityEmphasisAnimationType]);
}

uint64_t getEnumTagSinglePayload for __RKEntityEmphasisAnimationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityEmphasisAnimationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *double result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E8AACCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType()
{
  return &type metadata for __RKEntityEmphasisAnimationType;
}

uint64_t method lookup function for __RKEntityEmphasisAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityEmphasisAction);
}

uint64_t dispatch thunk of __RKEntityEmphasisAction.__allocating_init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)()
{
  return (*(uint64_t (**)(void))(v0 + 744))();
}

uint64_t sub_227E8AB84()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #32 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  return closure #32 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  return closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, v1);
}

uint64_t partial apply for closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1);
}

uint64_t sub_227E8ABDC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #18 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  return closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_227E8ABF4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t Entity.stateMachineController.getter()
{
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  swift_release();
  if (Component)
  {
    type metadata accessor for StateMachineController();
    uint64_t Component = swift_allocObject();
    *(void *)(Component + 16) = v0;
    swift_retain();
  }
  return Component;
}

uint64_t Scene.__sceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (static __RKSceneUUIDComponent.registration
    && (RESceneGetComponentsOfCustomType(), v2)
    && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    uint64_t v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t __RKSceneUUIDComponent.uuid.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuid:)();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    int v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v8(a1, v4);
    return ((uint64_t (*)(char *, uint64_t))v8)(v7, v4);
  }
  else
  {
    unint64_t v10 = UUID.uuid.getter();
    char v11 = v10;
    char v13 = v12;
    unint64_t v14 = v10 >> 8;
    unint64_t v15 = v10 >> 16;
    unint64_t v17 = v10 >> 24;
    unint64_t v18 = HIDWORD(v10);
    unint64_t v19 = v10 >> 40;
    unint64_t v20 = HIWORD(v10);
    unint64_t v21 = HIBYTE(v10);
    unint64_t v22 = v12 >> 8;
    unint64_t v23 = v12 >> 16;
    unint64_t v24 = v12 >> 24;
    unint64_t v27 = v12 >> 40;
    unint64_t v28 = HIWORD(v12);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    unint64_t v25 = HIDWORD(v12);
    unint64_t v26 = HIBYTE(v12);
    v16(a1, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v7, v4);
    *uint64_t v2 = v11;
    v2[1] = v14;
    v2[2] = v15;
    v2[3] = v17;
    v2[4] = v18;
    v2[5] = v19;
    v2[6] = v20;
    v2[7] = v21;
    v2[8] = v13;
    v2[9] = v22;
    v2[10] = v23;
    v2[11] = v24;
    v2[12] = v25;
    v2[13] = v27;
    v2[14] = v28;
    v2[15] = v26;
  }
  return result;
}

uint64_t __RKSceneUUIDComponent.Registration.componentType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RKSceneUUIDComponent.Registration.init()()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberCStyleArrayDataTypeWithTag(), (uint64_t v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(void *)(v0 + 16) = v1;
  long long v4 = xmmword_228324500;
  int v5 = 1;
  uint64_t v6 = &v4;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v10 = 0;
  uint64_t v11 = v1;
  uint64_t v12 = 0;
  uint64_t v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(void *)(v0 + 24) = v2;
  REStructBuilderDestroy();
  return v0;
}

uint64_t __RKSceneUUIDComponent.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKSceneUUIDComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __RKSceneUUIDComponent.registration.getter()
{
  return swift_retain();
}

uint64_t static __RKSceneUUIDComponent.registration.setter(void *a1)
{
  static __RKSceneUUIDComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKSceneUUIDComponent.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t key path setter for Scene.__sceneIdentifier : Scene(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return Scene.__sceneIdentifier.setter((uint64_t)v4);
}

uint64_t Scene.__sceneIdentifier.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - v11;
  swift_beginAccess();
  if (!static __RKSceneUUIDComponent.registration) {
    return outlined destroy of UUID?(a1);
  }
  uint64_t v13 = *((void *)static __RKSceneUUIDComponent.registration + 3);
  outlined init with copy of UUID?(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5);
    if (REEntityGetCustomComponent()) {
      REEntityRemoveComponentByClass();
    }
    return outlined destroy of UUID?(a1);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  RESceneGetComponentsOfCustomType();
  if (v15 >= 1) {
    goto LABEL_16;
  }
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v17);
  if (*(void *)(v18 + 16))
  {
    uint64_t v19 = *(void *)(v18 + 32);
  }
  else
  {
    swift_release();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Scene.__sceneIdentifier.setter);
    uint64_t v21 = specialized AnchorEntity.__allocating_init(world:)(v20);
    swift_retain();
    specialized Scene.AnchorCollection.append(_:)(v21, v1);
    swift_release();
    uint64_t v19 = *(void *)(v21 + 16);
  }
  swift_release();
  if (MEMORY[0x22A68E460](v19, v13))
  {
LABEL_16:
    if (RECustomComponentGetObject())
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
      __RKSceneUUIDComponent.uuid.setter((uint64_t)v9);
    }
  }
  outlined destroy of UUID?(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

void (*Scene.__sceneIdentifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  int v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __RKSceneUUIDComponent.registration
    && (RESceneGetComponentsOfCustomType(), v6)
    && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 0, 1, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  }
  return Scene.__sceneIdentifier.modify;
}

void Scene.__sceneIdentifier.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of UUID?((uint64_t)v4, (uint64_t)v3);
    Scene.__sceneIdentifier.setter((uint64_t)v3);
    outlined destroy of UUID?((uint64_t)v4);
  }
  else
  {
    Scene.__sceneIdentifier.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

void specialized Scene.AnchorCollection.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_6;
  }
  uint64_t v5 = SceneNullable;
  id v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v7 = Scene.init(coreScene:)(v5);
  }
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2()) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      swift_beginAccess();
      uint64_t v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          id v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            uint64_t v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();
          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKSceneUUIDComponent()
{
  return &protocol witness table for __RKSceneUUIDComponent.Registration;
}

uint64_t sub_227E8BAA0@<X0>(uint64_t a1@<X8>)
{
  return Scene.__sceneIdentifier.getter(a1);
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for __RKSceneUUIDComponent()
{
  return &type metadata for __RKSceneUUIDComponent;
}

uint64_t type metadata accessor for __RKSceneUUIDComponent.Registration()
{
  return self;
}

uint64_t method lookup function for __RKSceneUUIDComponent.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKSceneUUIDComponent.Registration);
}

unint64_t lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKSceneUUIDComponent.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E8BCD8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKSceneUUIDComponent.Registration.RegistrationError()
{
  return &type metadata for __RKSceneUUIDComponent.Registration.RegistrationError;
}

BOOL static NetworkCompatibilityToken.Compatibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NetworkCompatibilityToken.Compatibility.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NetworkCompatibilityToken.Compatibility.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for local()
{
  type metadata accessor for NetworkCompatibilityToken();
  uint64_t v0 = swift_allocObject();
  uint64_t result = RENetCompatibilityCreateLocalToken();
  *(void *)(v0 + 16) = result;
  static NetworkCompatibilityToken.local = v0;
  return result;
}

uint64_t static NetworkCompatibilityToken.local.getter()
{
  if (one-time initialization token for local != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t NetworkCompatibilityToken.deinit()
{
  RERelease();
  return v0;
}

uint64_t NetworkCompatibilityToken.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t NetworkCompatibilityToken.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  NetworkCompatibilityToken.init(from:)(a1);
  return v2;
}

uint64_t NetworkCompatibilityToken.init(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t TokenFromData = RENetCompatibilityCreateTokenFromData();

    if (TokenFromData)
    {
      outlined consume of Data._Representation(v7, v8);
      *(void *)(v1 + 16) = TokenFromData;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      goto LABEL_5;
    }
    lazy protocol witness table accessor for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  swift_deallocPartialClassInstance();
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError);
  }
  return result;
}

uint64_t NetworkCompatibilityToken.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t DataFromToken = RENetCompatibilityCreateDataFromToken();
  if (DataFromToken)
  {
    uint64_t v2 = (void *)DataFromToken;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v3, v5);
  }
  else
  {
    lazy protocol witness table accessor for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError();
    swift_allocError();
    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError);
  }
  return result;
}

uint64_t NetworkCompatibilityToken.compatibilityWith(_:)@<X0>(char *a1@<X8>)
{
  uint64_t result = RENetCompatibilityCheckCompatibility();
  if (!result)
  {
    char v3 = 0;
LABEL_5:
    *a1 = v3;
    return result;
  }
  if (result == 1)
  {
    char v3 = 1;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkCompatibilityToken@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = NetworkCompatibilityToken.init(from:)(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkCompatibilityToken(void *a1)
{
  return NetworkCompatibilityToken.encode(to:)(a1);
}

uint64_t dispatch thunk of SynchronizationService.entity(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of SynchronizationService.owner(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SynchronizationService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SynchronizationService.__fromCore(peerID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SynchronizationService.__toCore(peerID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SynchronizationService.startSync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SynchronizationService.stopSync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t type metadata accessor for NetworkCompatibilityToken()
{
  return self;
}

uint64_t method lookup function for NetworkCompatibilityToken(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkCompatibilityToken);
}

uint64_t dispatch thunk of NetworkCompatibilityToken.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unsigned char *storeEnumTagSinglePayload for NetworkCompatibilityToken.Compatibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E8C638);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.Compatibility()
{
  return &type metadata for NetworkCompatibilityToken.Compatibility;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.SerializationError()
{
  return &type metadata for NetworkCompatibilityToken.SerializationError;
}

unsigned char *storeEnumTagSinglePayload for NetworkCompatibilityToken.SerializationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E8C720);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.DeserializationError()
{
  return &type metadata for NetworkCompatibilityToken.DeserializationError;
}

void TextureResource.__coreAsset.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void TextureResource.CreateOptions.semantic.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *TextureResource.CreateOptions.semantic.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.semantic.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.CreateOptions.mipmapsMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *TextureResource.CreateOptions.mipmapsMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.mipmapsMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.CreateOptions.compression.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 2);
}

_WORD *TextureResource.CreateOptions.compression.setter(_WORD *result)
{
  *(_WORD *)(v1 + 2) = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.compression.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned char *TextureResource.CreateOptions.init(semantic:mipmapsMode:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  *(unsigned char *)a3 = *result;
  *(unsigned char *)(a3 + 1) = v3;
  *(_WORD *)(a3 + 2) = 1280;
  return result;
}

void static TextureResource.Compression.default.getter(_WORD *a1@<X8>)
{
  *a1 = 1280;
}

unsigned char *TextureResource.CreateOptions.init(semantic:compression:mipmapsMode:)@<X0>(unsigned char *result@<X0>, __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4 = *a2;
  char v5 = *a3;
  *(unsigned char *)a4 = *result;
  *(unsigned char *)(a4 + 1) = v5;
  *(_WORD *)(a4 + 2) = v4;
  return result;
}

void one-time initialization function for supportedFileTypes()
{
  static TextureResource.supportedFileTypes = &outlined read-only object #0 of one-time initialization function for supportedFileTypes;
}

unint64_t TextureResource.LoadError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  __int16 v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Error = type metadata accessor for TextureResource.LoadError();
  MEMORY[0x270FA5388](Error);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TextureResource.LoadError(v0, (uint64_t)v7);
  unint64_t v8 = 0xD000000000000019;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
      unint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000020;
      unint64_t v21 = 0x800000022834FAE0;
      lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 34;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      unint64_t v8 = v20;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 2u:
      uint64_t v16 = *v7;
      uint64_t v17 = (void *)v7[1];
      unint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000012;
      unint64_t v21 = 0x800000022834FAC0;
      v18._countAndFlagsBits = v16;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      uint64_t v12 = 34;
      unint64_t v13 = 0xE100000000000000;
      goto LABEL_5;
    case 3u:
      return v8;
    case 4u:
      unint64_t v8 = 0xD00000000000002DLL;
      break;
    default:
      uint64_t v9 = *v7;
      uint64_t v10 = (void *)v7[1];
      unint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000023;
      unint64_t v21 = 0x800000022834FB10;
      v11._countAndFlagsBits = v9;
      v11._object = v10;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v12 = 0x6E7562206E692022;
      unint64_t v13 = 0xEB00000000656C64;
LABEL_5:
      String.append(_:)(*(Swift::String *)&v12);
      unint64_t v8 = v20;
      break;
  }
  return v8;
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance TextureResource.LoadError()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance TextureResource.LoadError()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance TextureResource.LoadError()
{
  return MEMORY[0x270EEE920]();
}

unint64_t TextureResource.CopyError.errorDescription.getter(char a1)
{
  unint64_t result = 0xD00000000000002DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 2:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000043;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.CopyError()
{
  return TextureResource.CopyError.errorDescription.getter(*v0);
}

uint64_t TextureResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  int v29 = a3;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  Swift::String v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v15 - 8);
  uint64_t v32 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v18 = *a2;
  uint64_t v19 = specialized static __ServiceLocator.shared.getter();
  unint64_t v20 = *(void **)(*(void *)(v19 + 168) + 16);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(_DWORD *)(v21 + 24) = v18;
  uint64_t v22 = v28;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v22;
  *(void *)(v21 + 48) = a7;
  *(void *)(v21 + 56) = a4;
  uint64_t v23 = v30;
  *(void *)(v21 + 64) = a5;
  *(void *)(v21 + 72) = v23;
  *(unsigned char *)(v21 + 80) = v29;
  aBlock[4] = partial apply for closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_300;
  unint64_t v24 = _Block_copy(aBlock);
  swift_retain_n();
  id v25 = v20;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v17, v14, v24);
  _Block_release(v24);
  swift_release();

  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
  return swift_release();
}

uint64_t closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  OpaquePointer.set(options:)();
  RETextureImportOperationRun();
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a8;
  *(void *)(v15 + 24) = a1;
  *(unsigned char *)(v15 + 32) = a9 & 1;
  *(void *)(v15 + 40) = a4;
  *(void *)(v15 + 48) = a5;
  *(void *)(v15 + 56) = a6;
  *(void *)(v15 + 64) = a7;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:), v15);
  swift_release();
  return swift_release();
}

void OpaquePointer.set(options:)()
{
  RETextureImportOperationSetSemantic();
  RETextureImportOperationSetMipmapMode();
  RETextureImportOperationSetCompressionType();
  if ((unint64_t)TextureResource.Compression.toCoreASTCOptions()())
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RETextureImportOperationSetASTCCompressionOptions();
  }
}

void closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(void (*a1)(void *, uint64_t), uint64_t a2, void (*a3)(void *, void, void), uint64_t a4, uint64_t a5, void *a6)
{
  type metadata accessor for TextureResource.LoadError();
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
  uint64_t v9 = (void *)swift_allocError();
  a3(a6, 0, 0);

  a1(v9, 1);
}

uint64_t closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void *, uint64_t), uint64_t a5, void (*a6)(void *, void *, void))
{
  unint64_t v8 = specialized static TextureResource.tryCreate(from:disableNetworkSync:)(a2, a3);
  uint64_t v9 = (void *)v8;
  Swift::String v11 = v10;
  __int16 v13 = v12;
  if ((v12 & 0x100) != 0)
  {
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    Swift::String v14 = (void *)swift_allocError();
    a6(v9, v11, v13 & 1);
    a4(v14, 1);
  }
  else
  {
    a4((void *)v8, 0);
  }
  outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v11, v13, HIBYTE(v13) & 1);

  return RERelease();
}

uint64_t static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, int *a2, char a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = a1;
  *(_DWORD *)(v11 + 32) = v10;
  *(unsigned char *)(v11 + 36) = a3;
  *(void *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  uint64_t v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)(v13 + 16) = v14;
  *(void *)(v13 + 24) = 0;
  *(unsigned char *)(v13 + 32) = -1;
  *(void *)(v12 + 16) = v13;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = partial apply for closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:);
  v15[3] = v11;
  v15[4] = v13;
  v15[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(void *)(v12 + 24) = Future.init(_:)();
  uint64_t v16 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();
  return v16;
}

uint64_t closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  char v11 = a5;
  unsigned int v15 = a5 >> 8;
  unsigned int v16 = HIWORD(a5);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  LOBYTE(v20) = v11;
  BYTE1(v20) = v15;
  HIWORD(v20) = v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a7;
  *(void *)(v18 + 24) = a8;
  swift_retain();
  swift_retain();
  static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(a4, &v20, a6, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError), v18, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v17);
  swift_release();

  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(void *a1, void *a2, char a3, void (*a4)(void *))
{
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  unint64_t v8 = (void *)swift_allocError();
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3 & 1;
  outlined copy of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  a4(v8);
}

uint64_t specialized LoadRequest<A>.thenWaitForResourceSharing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v3 + 24) = v5;
  swift_beginAccess();
  uint64_t v41 = (void *)(v3 + 16);
  *(void *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource><A>.Fulfiller);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  uint64_t v7 = v50;
  uint64_t v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = AssetRequest;
  if (v9) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  uint64_t v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v16 + 16) = v17;
  *(void *)(v16 + 24) = 0;
  *(unsigned char *)(v16 + 32) = -1;
  *(void *)(v15 + 16) = v16;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v44 = v15;
  *(void *)(v15 + 24) = Future.init(_:)();
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource><A>.CancellableHolder);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t v43 = v1;
  v46[0] = v1;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v13;
  *(void *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<TextureResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<TextureResource>);
  swift_retain_n();
  swift_retain();
  uint64_t v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  uint64_t v47 = Request;
  v46[0] = v13;
  unint64_t v24 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  id v25 = *(void **)(v3 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v14;
  v46[0] = v43;
  int v29 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v30 = *(void **)(v3 + 16);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v42;
  v46[0] = v19;
  uint64_t v34 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v35 = *(void **)(v3 + 16);
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  unint64_t v38 = v35[2];
  unint64_t v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  void *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  os_unfair_lock_s *v29;
  void *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  void *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t Request;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  void v46[3];
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v3 + 24) = v5;
  swift_beginAccess();
  uint64_t v41 = (void *)(v3 + 16);
  *(void *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource><A>.Fulfiller);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  uint64_t v7 = v50;
  uint64_t v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = AssetRequest;
  if (v9) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  uint64_t v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v16 + 16) = v17;
  *(void *)(v16 + 24) = 0;
  *(unsigned char *)(v16 + 32) = -1;
  *(void *)(v15 + 16) = v16;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v44 = v15;
  *(void *)(v15 + 24) = Future.init(_:)();
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource><A>.CancellableHolder);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t v43 = v1;
  v46[0] = v1;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v13;
  *(void *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  swift_retain_n();
  swift_retain();
  uint64_t v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  uint64_t v47 = Request;
  v46[0] = v13;
  unint64_t v24 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  id v25 = *(void **)(v3 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v14;
  v46[0] = v43;
  int v29 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v30 = *(void **)(v3 + 16);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v42;
  v46[0] = v19;
  uint64_t v34 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v35 = *(void **)(v3 + 16);
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  unint64_t v38 = v35[2];
  unint64_t v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  void *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  os_unfair_lock_s *v29;
  void *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  void *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t Request;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  void v46[3];
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v3 + 24) = v5;
  swift_beginAccess();
  uint64_t v41 = (void *)(v3 + 16);
  *(void *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial><A>.Fulfiller);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  uint64_t v7 = v50;
  uint64_t v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = AssetRequest;
  if (v9) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_WORD *)(v16 + 88) = -256;
  *(void *)(v15 + 16) = v16;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v44 = v15;
  *(void *)(v15 + 24) = Future.init(_:)();
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial><A>.CancellableHolder);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  uint64_t v43 = v1;
  v46[0] = v1;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v6;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v13;
  *(void *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  swift_retain_n();
  swift_retain();
  uint64_t v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  uint64_t v47 = Request;
  v46[0] = v13;
  unint64_t v24 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  id v25 = *(void **)(v3 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    id v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
    *uint64_t v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v14;
  v46[0] = v43;
  int v29 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v30 = *(void **)(v3 + 16);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v30);
    *uint64_t v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  uint64_t v47 = v42;
  v46[0] = v19;
  uint64_t v34 = (os_unfair_lock_s *)(*(void *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  uint64_t v35 = *(void **)(v3 + 16);
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  unint64_t v38 = v35[2];
  unint64_t v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v35);
    *uint64_t v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

uint64_t TextureResource.replaceWith(importOperation:)()
{
  uint64_t v1 = v0;
  v19[1] = *MEMORY[0x263EF8340];
  v19[0] = 0;
  uint64_t AssetData = RETextureImportOperationCreateAssetData();
  if (AssetData)
  {
    uint64_t v3 = AssetData;
    uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    uint64_t result = outlined init with copy of (Int, URL)(v4, (uint64_t)&v14, &demangling cache variable for type metadata for __RenderService?);
    if (v15)
    {
      outlined init with take of BindableDataInternal(&v14, (uint64_t)v16);
      uint64_t v6 = v17;
      uint64_t v7 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      LOBYTE(v6) = MEMORY[0x22A692FD0](v8, *(void *)(v1 + 16), v3, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      if (v6)
      {
        *(void *)(v1 + 24) = 0;
        swift_release();
        RETextureAssetRemoveDrawableQueue();
      }
      else
      {
        BOOL v10 = v19[0] == 0;
        if (v19[0]) {
          uint64_t v11 = v19[0];
        }
        else {
          uint64_t v11 = 0x206563616C706552;
        }
        if (v19[0]) {
          unint64_t v12 = 0;
        }
        else {
          unint64_t v12 = 0xEE0064656C696166;
        }
        lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
        swift_allocError();
        *(void *)uint64_t v13 = v11;
        *(void *)(v13 + 8) = v12;
        *(unsigned char *)(v13 + 16) = v10;
        swift_willThrow();
      }
      return RERelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
    swift_allocError();
    strcpy(v9, "Replace failed");
    v9[15] = -18;
    v9[16] = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t TextureResource.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t TextureResource.deinit()
{
  if (*(void *)(v0 + 24)) {
    RETextureAssetRemoveDrawableQueue();
  }
  REAssetSetSwiftObject();
  RERelease();
  swift_release();
  return v0;
}

uint64_t TextureResource.__deallocating_deinit()
{
  if (*(void *)(v0 + 24)) {
    RETextureAssetRemoveDrawableQueue();
  }
  REAssetSetSwiftObject();
  RERelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t TextureResource.semantic.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RETextureAssetGetSemantic();
  unint64_t v3 = 0x40302010005uLL >> (8 * result);
  if (result >= 6) {
    LOBYTE(v3) = 5;
  }
  *a1 = v3;
  return result;
}

uint64_t TextureResource.width.getter()
{
  RETextureAssetGetSize();
  return v0;
}

uint64_t TextureResource.height.getter()
{
  RETextureAssetGetSize();
  return v0;
}

uint64_t TextureResource.depth.getter()
{
  RETextureAssetGetDimensions();
  return v0;
}

uint64_t TextureResource.mipmapLevelCount.getter()
{
  return RETextureAssetGetMipmapLevelCount();
}

uint64_t TextureResource.pixelFormat.getter()
{
  return RETextureAssetGetPixelFormat();
}

uint64_t TextureResource.textureType.getter()
{
  return RETextureAssetGetTextureType();
}

uint64_t TextureResource.arrayLength.getter()
{
  return MEMORY[0x270F20640](*(void *)(v0 + 16));
}

uint64_t static TextureResource.load(named:in:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = 83886597;
  return specialized static TextureResource.load(named:in:options:textureLoader:)(a1, a2, a3, (char *)&v5, a4);
}

uint64_t static TextureResource.load(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, char *a4, void *a5)
{
  return specialized static TextureResource.load(named:in:options:textureLoader:)(a1, a2, a3, a4, a5);
}

uint64_t static TextureResource.loadAsync(named:in:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5 = 83886597;
  return static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2, a3, (char *)&v5, a4);
}

uint64_t static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5)
{
  uint64_t v34 = a2;
  uint64_t v31 = a5;
  uint64_t v32 = a1;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  BOOL v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v11 = *a4;
  char v12 = a4[1];
  __int16 v13 = *((_WORD *)a4 + 1);
  if (a3) {
    id v14 = a3;
  }
  else {
    id v14 = objc_msgSend(self, sel_mainBundle, v31);
  }
  id v15 = a3;
  uint64_t v16 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 24);
  swift_unownedRetainStrong();
  uint64_t v18 = *(void **)(v17 + 32);
  swift_retain();
  id v19 = v18;
  swift_release();
  *BOOL v10 = v19;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v19)
  {
    outlined init with copy of __REAssetService(v31, (uint64_t)v35);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v34;
    uint64_t v24 = v32;
    *(void *)(v22 + 16) = v33;
    *(void *)(v22 + 24) = v24;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v14;
    *(unsigned char *)(v22 + 48) = v11;
    *(unsigned char *)(v22 + 49) = v12;
    *(_WORD *)(v22 + 50) = v13;
    outlined init with take of BindableDataInternal(v35, v22 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
    uint64_t v25 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
    uint64_t v26 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v27 = swift_allocObject();
    *(_DWORD *)(v27 + 16) = 0;
    *(void *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = 0;
    *(unsigned char *)(v26 + 32) = -1;
    *(void *)(v25 + 16) = v26;
    unint64_t v28 = (void *)swift_allocObject();
    v28[2] = partial apply for closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:);
    v28[3] = v22;
    v28[4] = v26;
    v28[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    id v29 = v14;
    swift_retain();
    *(void *)(v25 + 24) = Future.init(_:)();
    uint64_t v30 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

    swift_release();
    swift_release();
    return v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7, void *a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  swift_retain();
  uint64_t v16 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  uint64_t v17 = specialized static TextureResource.findBundledFileExtension(named:in:)(a4, a5, a6);
  uint64_t v19 = v18;
  id v20 = (void *)MEMORY[0x22A688A50](a4, a5);
  if (v19)
  {
    uint64_t v21 = (void *)MEMORY[0x22A688A50](v17, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = 0;
  }
  swift_beginAccess();
  uint64_t v22 = RETextureImportOperationCreateWithBundleResource();

  if (v22)
  {
    int v30 = a7;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a4;
    *(void *)(v23 + 24) = a5;
    swift_bridgeObjectRetain();
    static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v22, &v30, 0, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v23, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v15);
    swift_release();
  }
  else
  {
    uint64_t v27 = a8[4];
    uint64_t v28 = a8[3];
    __swift_project_boxed_opaque_existential_1(a8, v28);
    int v30 = a7;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v16;
    *(void *)(v24 + 24) = a3;
    *(_DWORD *)(v24 + 32) = a7;
    *(void *)(v24 + 40) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *(void *)(v24 + 48) = v15;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, void *, int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t))(v27 + 16);
    swift_retain();
    v25(a4, a5, a6, &v30, partial apply for closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:), v24, v28, v27);
  }
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(void *a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  char v8 = a5;
  unsigned int v13 = a5 >> 8;
  unsigned int v14 = HIWORD(a5);
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(unsigned char *)(v15 + 24) = a2 & 1;
  *(void *)(v15 + 32) = a4;
  *(unsigned char *)(v15 + 40) = v8;
  *(unsigned char *)(v15 + 41) = v13;
  *(_WORD *)(v15 + 42) = v14;
  *(void *)(v15 + 48) = a3;
  *(void *)(v15 + 56) = a6;
  *(void *)(v15 + 64) = a7;
  outlined copy of Result<[Entity], Error>(a1, a2 & 1, MEMORY[0x263F8EEF0]);
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:), v15);
  swift_release();
  return swift_release();
}

void closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(id a1, char a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(void *, uint64_t))
{
  uint64_t v8 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    *(_DWORD *)id v20 = a4;
    outlined copy of Result<[Entity], Error>(a1, 0, MEMORY[0x263F8EEF0]);
    specialized static TextureResource.createTextureAssetDataFor(texture:options:)((uint64_t)a1, v20);
    swift_beginAccess();
    outlined init with copy of __REAssetService(a5 + 120, (uint64_t)v20);
    uint64_t v16 = v21;
    uint64_t v17 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    RERelease();
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for TextureResource();
      char v11 = (void *)swift_dynamicCastClass();
      if (v11)
      {
LABEL_8:
        RERelease();
        char v12 = (void (*)(id))MEMORY[0x263F8EEE8];
        id v13 = a1;
        char v14 = 0;
        goto LABEL_9;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for TextureResource();
    char v11 = (void *)swift_allocObject();
    v11[2] = TextureAssetFromData;
    uint64_t v11[3] = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_8;
  }
  *(void *)id v20 = a1;
  id v9 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v10 = _getErrorEmbeddedNSError<A>(_:)();
  if (!v10)
  {
    char v11 = (void *)swift_allocError();
    void *v19 = *(void *)v20;
    goto LABEL_10;
  }
  char v11 = (void *)v10;
  char v12 = (void (*)(id))MEMORY[0x263F8EEE8];
  id v13 = a1;
  char v14 = 1;
LABEL_9:
  outlined consume of Result<[Entity], Error>(v13, v14, v12);
LABEL_10:
  a6(v11, v8);
  outlined consume of Result<[Entity], Error>(v11, v8, MEMORY[0x263F8EED8]);
}

void *static TextureResource.load(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextureResource.load(contentsOf:withName:options:)(a1, a2, a3);
}

void *static TextureResource.load(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextureResource.load(contentsOf:withName:options:)(a1, a2, a3);
}

uint64_t static TextureResource.loadAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v9);
  char v11 = v10;
  swift_beginAccess();
  uint64_t v12 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  int v18 = 83886597;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v14 + v13, v8, v5);
  uint64_t v15 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v12, &v18, 1, (uint64_t)partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:), v14);
  swift_release();
  return v15;
}

uint64_t static TextureResource.loadAsync(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  v21[1] = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *a4;
  int v12 = a4[1];
  int v22 = *((unsigned __int16 *)a4 + 1);
  int v23 = v12;
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  swift_beginAccess();
  uint64_t v16 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  LOBYTE(v24) = v11;
  BYTE1(v24) = v23;
  HIWORD(v24) = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v10, v7);
  uint64_t v19 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v16, &v24, 1, (uint64_t)partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:), v18);
  swift_release();
  return v19;
}

uint64_t closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  type metadata accessor for TextureResource.LoadError();

  return swift_storeEnumTagMultiPayload();
}

void *static TextureResource.generate(from:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v5 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  uint64_t v6 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v5, 1);
  uint64_t Error = v6;
  uint64_t v10 = v7;
  char v11 = v8;
  if ((v8 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v6, v7, v8, 1);
    uint64_t Error = (void *)type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else if (RELinkedOnOrAfterFall2024OSVersions())
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v13 = type metadata accessor for TextureResource();
    *(void *)(inited + 32) = Error;
    *(void *)(inited + 56) = v13;
    *(void *)(inited + 64) = &protocol witness table for TextureResource;
    outlined copy of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v10, v11, 0);
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    if (v3) {
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v10, v11, 0);
    }
  }
  RERelease();
  return Error;
}

uint64_t static TextureResource.generateAsync(from:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v5 = *a4;
  char v6 = a4[1];
  __int16 v7 = *((_WORD *)a4 + 1);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v8 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  LOBYTE(v10) = v5;
  BYTE1(v10) = v6;
  HIWORD(v10) = v7;
  return static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v8, &v10, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
}

uint64_t TextureResource.replace(withImage:options:)()
{
  return RERelease();
}

uint64_t TextureResource.replaceAsync(withImage:options:)(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return TextureResource.replaceAsyncInternal(using:options:)(a1, &v3);
}

uint64_t TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, int *a2)
{
  int v3 = *a2;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v4 = RETextureImportOperationCreateWithCGImage();
  uint64_t v5 = specialized static __ServiceLocator.shared.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(_DWORD *)(v6 + 32) = v3;
  *(void *)(v6 + 40) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  uint64_t v7 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)(v8 + 16) = v9;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = -1;
  *(void *)(v7 + 16) = v8;
  int v10 = (void *)swift_allocObject();
  uint64_t v10[2] = partial apply for closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  v10[3] = v6;
  v10[4] = v8;
  void v10[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  *(void *)(v7 + 24) = Future.init(_:)();
  uint64_t v11 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();
  swift_release();
  return v11;
}

uint64_t closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char v7 = a5;
  uint64_t v26 = a4;
  unsigned int v24 = HIWORD(a5);
  unsigned int v25 = a5 >> 8;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v18 = *(void **)(*(void *)(a3 + 168) + 16);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v26;
  *(unsigned char *)(v19 + 24) = v7;
  *(unsigned char *)(v19 + 25) = v25;
  *(_WORD *)(v19 + 26) = v24;
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v19 + 48) = v17;
  *(void *)(v19 + 56) = a6;
  aBlock[4] = partial apply for closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_347;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = v18;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v16, v13, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v27);
  return swift_release();
}

uint64_t closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OpaquePointer.set(options:)();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  if (RETextureImportOperationRun())
  {
    swift_beginAccess();
    swift_unownedRetainStrong();
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = a6;
    uint64_t v11[3] = a1;
    v11[4] = a4;
    v11[5] = a5;
    swift_retain();
    swift_retain();
    uint64_t v12 = partial apply for closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  }
  else
  {
    RERelease();
    swift_beginAccess();
    swift_unownedRetainStrong();
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = a4;
    uint64_t v11[3] = a5;
    v11[4] = v10;
    swift_retain();
    swift_retain();
    uint64_t v12 = partial apply for closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  }
  __Engine.asyncOnEngineQueue(_:)((uint64_t)v12, (uint64_t)v11);
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a3 + 16);
  BOOL v6 = v5 == 0;
  if (v5) {
    uint64_t v7 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v7 = 0x206563616C706552;
  }
  if (v5) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 0xEE0064656C696166;
  }
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  uint64_t v9 = (void *)swift_allocError();
  *(void *)uint64_t v10 = v7;
  *(void *)(v10 + 8) = v8;
  *(unsigned char *)(v10 + 16) = v6;
  a1(v9, 1);
}

uint64_t closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void))
{
  TextureResource.replaceWith(importOperation:)();
  a3(a1, 0);

  return RERelease();
}

uint64_t TextureResource.copy(to:)(void *a1)
{
  if (*(void *)(v1 + 24))
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    char v3 = 3;
LABEL_8:
    *uint64_t v2 = v3;
    return swift_willThrow();
  }
  id v5 = objc_msgSend(a1, sel_width);
  RETextureAssetGetSize();
  if (v5 != (id)v6 || (id v7 = objc_msgSend(a1, sel_height), RETextureAssetGetSize(), v7 != (id)v8))
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    char v3 = 1;
    goto LABEL_8;
  }
  if ((objc_msgSend(a1, sel_usage) & 2) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    char v3 = 2;
    goto LABEL_8;
  }
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of (Int, URL)(v10, (uint64_t)&v14, &demangling cache variable for type metadata for __RenderService?);
  if (!v15)
  {
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v14, (uint64_t)v16);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  char v13 = RETextureAssetCopyToDestination();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if ((v13 & 1) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    char v3 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t TextureResource.copyAsync(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(v3, a1, a2, a3);
}

uint64_t TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  char v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = specialized static __ServiceLocator.shared.getter();
  uint64_t v15 = *(void **)(*(void *)(v14 + 168) + 16);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  void v16[3] = a2;
  v16[4] = v14;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_324;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain_n();
  id v18 = v15;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v13, v10, v17);
  _Block_release(v17);
  swift_release();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t closure #1 in static TextureResource.builtinTexture(named:)(void *a1)
{
  String.utf8CString.getter();
  uint64_t v2 = REBuiltinTextureAssetDescriptorCreate();
  swift_release();
  if (v2
    && (uint64_t v3 = a1[3],
        uint64_t v4 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v3),
        (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4),
        uint64_t v5 = REAssetHandleCreateWithAssetDescriptor(),
        REAssetHandleLoadNow(),
        (REAssetHandleIsLoaded() & 1) != 0))
  {
    type metadata accessor for TextureResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(void *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    RERelease();
    return v6;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TextureResource.__texture(from:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v6);
  uint64_t v1 = v7;
  uint64_t v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t v3 = REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v3)
  {
    REAssetHandleLoadNow();
    type metadata accessor for TextureResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    return v4;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TextureResource.__texture(from:label:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v18);
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v7, (uint64_t)&v13, &demangling cache variable for type metadata for __RenderService?);
  if (v14)
  {
    outlined init with take of BindableDataInternal(&v13, (uint64_t)v15);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
    if (a3) {
      String.utf8CString.getter();
    }
    uint64_t v10 = REAssetManagerTextureMemoryAssetCreateWithCGImage();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if (v10)
    {
      REAssetHandleLoadNow();
      type metadata accessor for TextureResource();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();
      return v11;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t key path setter for TextureResource.Drawable.drawableQueue : TextureResource.Drawable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  swift_retain();
  return swift_release();
}

uint64_t TextureResource.Drawable.drawableQueue.getter()
{
  return swift_retain();
}

id TextureResource.Drawable.texture.getter()
{
  Texture = (void *)REDrawableGetTexture();

  return Texture;
}

Swift::Void __swiftcall TextureResource.Drawable.present()()
{
  MEMORY[0x270F1D7E8](*(void *)(v0 + 16));
}

Swift::Void __swiftcall TextureResource.Drawable.presentOnSceneUpdate()()
{
  MEMORY[0x270F1D7F8](*(void *)(v0 + 16));
}

uint64_t TextureResource.Drawable.deinit()
{
  RERelease();
  swift_release();
  return v0;
}

uint64_t TextureResource.Drawable.__deallocating_deinit()
{
  RERelease();
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t TextureResource.DrawableQueue.InitError.errorDescription.getter(char a1)
{
  unint64_t v1 = 0xD000000000000019;
  if ((a1 & 1) == 0)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    return 0xD0000000000000A8;
  }
  return v1;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.DrawableQueue.InitError()
{
  return TextureResource.DrawableQueue.InitError.errorDescription.getter(*v0);
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.DrawableQueue.NextDrawableError()
{
  return 0xD00000000000002FLL;
}

void one-time initialization function for supportedPixelFormats()
{
  static TextureResource.DrawableQueue.supportedPixelFormats = (uint64_t)&outlined read-only object #0 of one-time initialization function for supportedPixelFormats;
}

uint64_t TextureResource.DrawableQueue.Descriptor.pixelFormat.getter()
{
  return *(void *)v0;
}

uint64_t TextureResource.DrawableQueue.Descriptor.pixelFormat.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.pixelFormat.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.width.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TextureResource.DrawableQueue.Descriptor.width.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.height.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TextureResource.DrawableQueue.Descriptor.height.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.usage.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t TextureResource.DrawableQueue.Descriptor.usage.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.usage.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.DrawableQueue.Descriptor.mipmapsMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *TextureResource.DrawableQueue.Descriptor.mipmapsMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.mipmapsMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double TextureResource.DrawableQueue.Descriptor.init(pixelFormat:width:height:usage:mipmapsMode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a5;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = v6;
  double result = 7.83295339e-242;
  *(_OWORD *)(a6 + 40) = xmmword_228324950;
  *(unsigned char *)(a6 + 56) = 0;
  return result;
}

uint64_t TextureResource.DrawableQueue.pixelFormat.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TextureResource.DrawableQueue.width.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t TextureResource.DrawableQueue.height.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t TextureResource.DrawableQueue.usage.getter()
{
  return *(void *)(v0 + 40);
}

void TextureResource.DrawableQueue.mipmapsMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

uint64_t TextureResource.DrawableQueue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  TextureResource.DrawableQueue.init(_:)(a1);
  return v2;
}

uint64_t TextureResource.DrawableQueue.init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  *(void *)(v2 + 16) = *(void *)a1;
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 40) = v5;
  *(unsigned char *)(v2 + 48) = v7;
  *(void *)(v2 + 56) = v8;
  *(void *)(v2 + 64) = v9;
  *(unsigned char *)(v2 + 72) = v10;
  *(unsigned char *)(v2 + 88) = 1;
  *(_DWORD *)(v2 + 76) = 1065353216;
  double v11 = (double)Duration.components.getter();
  Duration.components.getter();
  float v13 = (double)v12 * 1.0e-18 + v11;
  *(float *)(v2 + 76) = v13;
  if (one-time initialization token for supportedPixelFormats != -1) {
    swift_once();
  }
  if ((specialized Sequence<>.contains(_:)(v3, static TextureResource.DrawableQueue.supportedPixelFormats) & 1) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError();
    swift_allocError();
    *id v18 = 0;
    swift_willThrow();
LABEL_16:
    type metadata accessor for TextureResource.DrawableQueue();
    swift_deallocPartialClassInstance();
    return v2;
  }
  uint64_t v14 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  if (!RETextureDrawableQueueDescriptorCreate())
  {
LABEL_15:
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError();
    swift_allocError();
    unsigned char *v19 = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_16;
  }
  if ((v4 & 0x8000000000000000) == 0 && !HIDWORD(v4))
  {
    RETextureDrawableQueueDescriptorSetWidth();
    if ((v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      RETextureDrawableQueueDescriptorSetHeight();
      RETextureDrawableQueueDescriptorSetPixelFormat();
      RETextureDrawableQueueDescriptorSetTextureUsage();
      RETextureDrawableQueueDescriptorSetMipMapMode();
      swift_beginAccess();
      if (MEMORY[0x22A6922E0](*(void *)(v14 + 16)))
      {
        RETextureDrawableQueueDescriptorSetShareable();
        RETextureDrawableQueueDescriptorSetPresentsWithNextUpdate();
        RETextureDrawableQueueDescriptorSetResourceOptions();
      }
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v14 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
      if (v22)
      {
        outlined init with take of BindableDataInternal(&v21, (uint64_t)v23);
        uint64_t v15 = v24;
        uint64_t v16 = v25;
        __swift_project_boxed_opaque_existential_1(v23, v24);
        (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
        uint64_t v17 = RETextureDrawableQueueCreateWithDescriptor();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        RERelease();
        if (v17)
        {
          swift_release();
          *(void *)(v2 + 80) = v17;
          return v2;
        }
        goto LABEL_15;
      }
      __break(1u);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TextureResource.DrawableQueue.Descriptor.timeout.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while ((a2 & 0xC000000000000001) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (*(void *)(*(void *)(a2 + 32) + 16) == v5) {
        goto LABEL_21;
      }
      if (v4 != 1)
      {
        uint64_t v6 = 5;
        while (1)
        {
          uint64_t v7 = v6 - 3;
          if (__OFADD__(v6 - 4, 1)) {
            break;
          }
          if (*(void *)(*(void *)(a2 + 8 * v6) + 16) == v5) {
            goto LABEL_21;
          }
          ++v6;
          if (v7 == v4) {
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4) {
          continue;
        }
      }
      goto LABEL_10;
    }
    uint64_t v9 = *(void *)(MEMORY[0x22A689930](0, a2) + 16);
    uint64_t v10 = *(void *)(a1 + 16);
    swift_unknownObjectRelease();
    if (v9 == v10)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v4 == 1) {
      goto LABEL_10;
    }
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t result = MEMORY[0x22A689930](v11, a2);
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      uint64_t v13 = *(void *)(result + 16);
      uint64_t v14 = *(void *)(a1 + 16);
      swift_unknownObjectRelease();
      if (v13 == v14) {
        goto LABEL_21;
      }
      ++v11;
      if (v12 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t TextureResource.DrawableQueue.deinit()
{
  RERelease();
  return v0;
}

uint64_t TextureResource.DrawableQueue.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t TextureResource.DrawableQueue.nextDrawable()()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 88) != 1)
  {
    uint64_t NextDrawable = RETextureDrawableQueueCreateNextDrawable();
    if (NextDrawable) {
      goto LABEL_3;
    }
LABEL_5:
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError();
    uint64_t v2 = swift_allocError();
    swift_willThrow();
    return v2;
  }
  uint64_t NextDrawable = RETextureDrawableQueueCreateNextDrawableWithTimeout();
  if (!NextDrawable) {
    goto LABEL_5;
  }
LABEL_3:
  type metadata accessor for TextureResource.Drawable();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = NextDrawable;
  *(void *)(v2 + 24) = v0;
  swift_retain();
  return v2;
}

void __swiftcall TextureResource.DrawableQueue.eyeTransform(_:)(simd_float4x4 *__return_ptr retstr, Swift::Int32 a2)
{
  MEMORY[0x270F1D800](*(void *)(v2 + 80), *(void *)&a2);
}

uint64_t TextureResource.DrawableQueue.nextDrawableWithTimeoutAndPollingInterval(timeout:pollingInterval:)()
{
  uint64_t NextDrawableWithTimeoutAndPollingInterval = RETextureDrawableQueueCreateNextDrawableWithTimeoutAndPollingInterval();
  if (NextDrawableWithTimeoutAndPollingInterval)
  {
    uint64_t v2 = NextDrawableWithTimeoutAndPollingInterval;
    type metadata accessor for TextureResource.Drawable();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v0;
    swift_retain();
  }
  else
  {
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError();
    uint64_t v3 = swift_allocError();
    swift_willThrow();
  }
  return v3;
}

uint64_t TextureResource.DrawableQueue.allowsNextDrawableTimeout.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t TextureResource.DrawableQueue.allowsNextDrawableTimeout.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 88) = a1;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.allowsNextDrawableTimeout.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t TextureResource.replace(withDrawables:)(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  swift_retain();
  swift_release();
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  RETextureAssetReplaceDrawableQueue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t TextureResource.drawableQueue.getter()
{
  return swift_retain();
}

Swift::OpaquePointer_optional __swiftcall TextureResource.Compression.toCoreASTCOptions()()
{
  unsigned int v1 = *v0;
  if ((v1 & 0xFE00) == 0x400)
  {
    uint64_t v2 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22831E350;
    uint64_t v2 = (void *)*MEMORY[0x263F376F0];
    if (*MEMORY[0x263F376F0])
    {
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v5;
      unsigned __int8 v9 = v1;
      int v6 = specialized static TextureResource.Compression.ASTCBlockSize.toCore(_:)(&v9);
      uint64_t v7 = MEMORY[0x263F8E548];
      *(void *)(inited + 72) = MEMORY[0x263F8E548];
      *(_DWORD *)(inited + 48) = v6;
      uint64_t v2 = (void *)*MEMORY[0x263F376F8];
      if (*MEMORY[0x263F376F8])
      {
        *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 88) = v8;
        *(void *)(inited + 120) = v7;
        *(_DWORD *)(inited + 96) = (v1 >> 8) + 1;
        uint64_t v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
LABEL_9:
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TextureResource.copy(to:)(a2);
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:), v7);
  swift_release();
  return swift_release();
}

uint64_t MTLCommandBuffer.present(_:)(uint64_t a1)
{
  return MEMORY[0x270F1D7F0](*(void *)(a1 + 16), v1);
}

uint64_t TextureResource.init(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  uint64_t v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for URL();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[10] = v7;
  v4[11] = v6;
  return MEMORY[0x270FA2498](TextureResource.init(contentsOf:withName:), v7, v6);
}

uint64_t TextureResource.init(contentsOf:withName:)()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 16))(*(void *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 48));
  *(_DWORD *)(v0 + 120) = 83886597;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = TextureResource.init(contentsOf:withName:);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 24);
  return TextureResource.init(contentsOf:withName:options:)(v2, v4, v3, (_DWORD *)(v0 + 120));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[2];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v5 = v0[14];
  return v4(v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[2];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t TextureResource.init(contentsOf:withName:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = TextureResource.init(contentsOf:withName:);
  }
  else
  {
    v4[14] = a1;
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = TextureResource.init(contentsOf:withName:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v7 = type metadata accessor for URL();
  *(void *)(v5 + 56) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 64) = v8;
  *(void *)(v5 + 72) = *(void *)(v8 + 64);
  *(void *)(v5 + 80) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 88) = swift_task_alloc();
  HIDWORD(v9) = *a4;
  LODWORD(v9) = *a4;
  *(_DWORD *)(v5 + 184) = v9 >> 16;
  *(void *)(v5 + 96) = type metadata accessor for MainActor();
  *(void *)(v5 + 104) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 112) = v11;
  *(void *)(v5 + 120) = v10;
  return MEMORY[0x270FA2498](TextureResource.init(contentsOf:withName:options:), v11, v10);
}

uint64_t TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t v1 = (void *)v0;
  uint64_t v26 = v0 + 16;
  HIDWORD(v2) = *(_DWORD *)(v0 + 184);
  LODWORD(v2) = HIDWORD(v2);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = v1[7];
  uint64_t v24 = v1[5];
  uint64_t v25 = v1[6];
  uint64_t v8 = v1[3];
  uint64_t v23 = v1[4];
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v8, v7);
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v12 = (v5 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = MEMORY[0x263F8F500];
  *(void *)(v13 + 16) = v10;
  *(void *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v11, v4, v7);
  unint64_t v15 = v13 + v12;
  *(void *)unint64_t v15 = v23;
  *(void *)(v15 + 8) = v24;
  *(_DWORD *)(v15 + 16) = v2 >> 16;
  *(void *)(v13 + ((v12 + 27) & 0xFFFFFFFFFFFFFFF8)) = v25;
  uint64_t v17 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(v3, (uint64_t)&async function pointer to partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:), v13, v16, (void (*)(uint64_t))type metadata accessor for TextureResource);
  v1[16] = v17;
  id v18 = (void *)swift_task_alloc();
  v1[17] = v18;
  uint64_t v19 = type metadata accessor for TextureResource();
  v1[18] = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *id v18 = v1;
  v18[1] = TextureResource.init(contentsOf:withName:options:);
  uint64_t v21 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](v26, v17, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v5 = TextureResource.init(contentsOf:withName:options:);
  }
  else {
    uint64_t v5 = TextureResource.init(contentsOf:withName:options:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  v0[20] = v0[2];
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  uint64_t v1 = (void *)swift_task_alloc();
  v0[21] = v1;
  *uint64_t v1 = v0;
  v1[1] = TextureResource.init(contentsOf:withName:options:);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  unint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v5 = TextureResource.init(contentsOf:withName:options:);
  }
  else {
    uint64_t v5 = TextureResource.init(contentsOf:withName:options:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  uint64_t v1 = v0[20];
  unint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[3];
  swift_release();
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[7];
  unint64_t v2 = v0[8];
  uint64_t v3 = v0[3];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[7];
  unint64_t v2 = v0[8];
  uint64_t v3 = v0[3];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 48) = a8;
  *(_DWORD *)(v8 + 120) = a7;
  *(void *)(v8 + 24) = a4;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 56) = type metadata accessor for MainActor();
  *(void *)(v8 + 64) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = v9;
  return MEMORY[0x270FA2498](closure #1 in TextureResource.init(contentsOf:withName:options:), v10, v9);
}

uint64_t closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  int v2 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v11 = *(_OWORD *)(v0 + 24);
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 88) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  *(_OWORD *)(v5 + 16) = v11;
  *(void *)(v5 + 32) = v3;
  *(_DWORD *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v6;
  uint64_t v7 = type metadata accessor for TextureResource();
  *uint64_t v6 = v0;
  v6[1] = closure #1 in TextureResource.init(contentsOf:withName:options:);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v8, v4, v9, 0xD000000000000022, 0x800000022834FC70, partial apply for closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), v5, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  int v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = closure #1 in TextureResource.init(contentsOf:withName:options:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = closure #1 in TextureResource.init(contentsOf:withName:options:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  v18[0] = a1;
  v18[1] = a6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v11);
  uint64_t v13 = v12;
  swift_beginAccess();
  uint64_t v14 = RETextureImportOperationCreateWithURL();

  if (a4)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  int v19 = a5;
  (*(void (**)(char *, void, uint64_t))(v9 + 16))((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18[0], v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v14, &v19, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0, (uint64_t)partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  type metadata accessor for TextureResource.LoadError();

  return swift_storeEnumTagMultiPayload();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(a1, a2, a3, 0, (void (*)(uint64_t))type metadata accessor for __MaterialResource);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a5(a4);
  return swift_task_create();
}

uint64_t specialized RequestLoadable.awaitForResourceSharing()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  int v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  *(void *)(v2 + 56) = type metadata accessor for TextureResource();
  *(void *)(v2 + 64) = &protocol witness table for TextureResource;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  else
  {
    swift_task_dealloc();
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  int v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  *(void *)(v2 + 56) = type metadata accessor for __MaterialResource();
  *(void *)(v2 + 64) = &protocol witness table for __MaterialResource;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x263F8EE60];
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360](v4, 0, 0, 0xD00000000000001BLL, 0x800000022834FB40, closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)partial apply, v3, v5 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  else
  {
    swift_task_dealloc();
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  int v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  *(void *)(v2 + 56) = type metadata accessor for MeshResource();
  *(void *)(v2 + 64) = &protocol witness table for MeshResource;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x263F8EE60];
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360](v4, 0, 0, 0xD00000000000001BLL, 0x800000022834FB40, closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)partial apply, v3, v5 + 8);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  int v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  *(void *)(v2 + 56) = type metadata accessor for ShapeResource();
  *(void *)(v2 + 64) = &protocol witness table for ShapeResource;
  *(void *)(v2 + 32) = v1;
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x263F8EE60];
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360](v4, 0, 0, 0xD00000000000001BLL, 0x800000022834FB40, closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)partial apply, v3, v5 + 8);
}

{
  void *v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = *v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[2];
  int v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t v3 = swift_allocObject();
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = &protocol witness table for UnlitMaterialResource;
  *(void *)(v3 + 32) = v1;
  swift_retain();
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  uint64_t v6 = MEMORY[0x263F8EE60];
  v5[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360](v5, 0, 0, 0xD00000000000001BLL, 0x800000022834FB40, closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)partial apply, v4, v6 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  else
  {
    swift_task_dealloc();
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = *v0;
  return MEMORY[0x270FA2498](specialized RequestLoadable.awaitForResourceSharing(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[2];
  int v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t v3 = swift_allocObject();
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = &protocol witness table for PhysicallyBasedMaterialResource;
  *(void *)(v3 + 32) = v1;
  swift_retain();
  uint64_t v4 = swift_task_alloc();
  v0[5] = v4;
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  else
  {
    swift_task_dealloc();
    int v2 = specialized RequestLoadable.awaitForResourceSharing();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 24) = a1;
  HIDWORD(v9) = *a4;
  LODWORD(v9) = *a4;
  *(_DWORD *)(v8 + 192) = v9 >> 16;
  *(void *)(v8 + 80) = type metadata accessor for MainActor();
  *(void *)(v8 + 88) = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 104) = v10;
  return MEMORY[0x270FA2498](TextureResource.init<A>(named:in:options:textureLoader:), v11, v10);
}

uint64_t TextureResource.init<A>(named:in:options:textureLoader:)()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    id v2 = objc_msgSend(self, sel_mainBundle);
    uint64_t v1 = 0;
  }
  HIDWORD(v3) = *(_DWORD *)(v0 + 192);
  LODWORD(v3) = HIDWORD(v3);
  *(void *)(v0 + 112) = v1;
  *(void *)(v0 + 120) = v2;
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  id v8 = v1;
  long long v15 = *(_OWORD *)(v0 + 56);
  uint64_t v9 = static MainActor.shared.getter();
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 136) = v10;
  *(_OWORD *)(v10 + 16) = v15;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v6;
  *(void *)(v10 + 48) = v2;
  *(_DWORD *)(v10 + 56) = v3 >> 16;
  *(void *)(v10 + 64) = v5;
  *(void *)(v10 + 72) = v4;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v11;
  uint64_t v12 = type metadata accessor for TextureResource();
  *(void *)(v0 + 152) = v12;
  *uint64_t v11 = v0;
  v11[1] = TextureResource.init<A>(named:in:options:textureLoader:);
  uint64_t v13 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v0 + 16, v9, v13, 0xD000000000000025, 0x800000022834F740, partial apply for closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v10, v12);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  id v2 = (void *)*v1;
  v2[20] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    unint64_t v3 = v2[12];
    uint64_t v4 = v2[13];
    return MEMORY[0x270FA2498](TextureResource.init<A>(named:in:options:textureLoader:), v3, v4);
  }
  else
  {
    swift_task_dealloc();
    v2[21] = v2[2];
    uint64_t v7 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                           + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    uint64_t v5 = (void *)swift_task_alloc();
    v2[22] = v5;
    *uint64_t v5 = v2;
    v5[1] = TextureResource.init<A>(named:in:options:textureLoader:);
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  id v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  unint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v5 = TextureResource.init<A>(named:in:options:textureLoader:);
  }
  else {
    uint64_t v5 = TextureResource.init<A>(named:in:options:textureLoader:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[21];
  unint64_t v3 = (void *)v0[14];
  id v2 = (void *)v0[15];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  swift_release();
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v5, v4);
  id v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 120);
  unint64_t v3 = *(void *)(v0 + 48);
  id v2 = *(void *)(v0 + 56);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 120);
  unint64_t v3 = *(void *)(v0 + 48);
  id v2 = *(void *)(v0 + 56);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v3, v2);
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v41 = a6;
  uint64_t v42 = a8;
  uint64_t v45 = a7;
  uint64_t v43 = a1;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v13 = *(void *)(v44 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v44);
  uint64_t v15 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  uint64_t v16 = a4;
  uint64_t v17 = specialized static TextureResource.findBundledFileExtension(named:in:)(a2, a3, a4);
  uint64_t v19 = v18;
  uint64_t v46 = a3;
  uint64_t v20 = (void *)MEMORY[0x22A688A50](a2, a3);
  if (v19)
  {
    uint64_t v21 = (void *)MEMORY[0x22A688A50](v17, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = 0;
  }
  swift_beginAccess();
  uint64_t v22 = RETextureImportOperationCreateWithBundleResource();

  if (v22)
  {
    unsigned int v47 = a5;
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v46;
    *(void *)(v23 + 16) = a2;
    *(void *)(v23 + 24) = v24;
    uint64_t v25 = v44;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(&v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v43, v44);
    unint64_t v26 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v27 = swift_allocObject();
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v27 + v26, &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
    swift_bridgeObjectRetain();
    static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v22, (int *)&v47, 0, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v23, (uint64_t)partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v27);
    swift_release();
  }
  else
  {
    uint64_t v40 = a9;
    unsigned int v39 = HIWORD(a5);
    unsigned int v47 = a5;
    uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v29 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v30 = v43;
    uint64_t v43 = a2;
    uint64_t v31 = v44;
    v28(v29, v30, v44);
    unint64_t v32 = (*(unsigned __int8 *)(v13 + 80) + 28) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v33 = (v14 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v15;
    *(_WORD *)(v34 + 24) = a5;
    *(_WORD *)(v34 + 26) = v39;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v34 + v32, v29, v31);
    *(void *)(v34 + v33) = v45;
    uint64_t v35 = v40;
    char v36 = *(void (**)(uint64_t, uint64_t, void *, unsigned int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t))(v40 + 16);
    swift_retain();
    v36(v43, v46, v16, &v47, partial apply for closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v34, v42, v35);
  }
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(void *a1, char a2)
{
  if (a2)
  {
    id v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  char v7 = a4;
  unsigned int v20 = a4 >> 8;
  int v18 = a2;
  unsigned int v19 = HIWORD(a4);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  swift_beginAccess();
  v17[1] = *(void *)(a3 + 24);
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  char v15 = v18 & 1;
  *(unsigned char *)(v14 + 24) = v18 & 1;
  *(unsigned char *)(v14 + 25) = v7;
  *(unsigned char *)(v14 + 26) = v20;
  *(_WORD *)(v14 + 27) = v19;
  *(void *)(v14 + 32) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  *(void *)(v14 + ((v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  outlined copy of Result<[Entity], Error>(a1, v15, MEMORY[0x263F8EEF0]);
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v14);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(id a1, char a2, int a3, uint64_t a4)
{
  if (a2)
  {
    id v10 = a1;
    id v8 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      outlined consume of Result<[Entity], Error>(a1, 1, MEMORY[0x263F8EEE8]);
    }
    else
    {
      swift_allocError();
      void *v9 = v10;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v10 = a1;
    swift_unknownObjectRetain();
    closure #1 in closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)((uint64_t *)&v10, a3, a4, &v11);
    outlined consume of Result<[Entity], Error>(a1, 0, MEMORY[0x263F8EEE8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *a1;
  LODWORD(v12[0]) = a2;
  specialized static TextureResource.createTextureAssetDataFor(texture:options:)(v6, (unsigned __int8 *)v12);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3 + 120, (uint64_t)v12);
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  RERelease();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for TextureResource();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for TextureResource();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = TextureAssetFromData;
    *(void *)(v10 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  *a4 = v10;
  return RERelease();
}

BOOL static TextureResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void TextureResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t TextureResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t specialized static TextureResource.load<A>(_:)(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static TextureResource.load<A>(_:), v5, v4);
}

uint64_t specialized static TextureResource.load<A>(_:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<TextureResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<TextureResource>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static TextureResource.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static TextureResource.load<A>(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static TextureResource.load<A>(_:);
  }
  return MEMORY[0x270FA2498](v7, v4, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  v0[19] = v0[3];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static TextureResource.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t v9;

  uint64_t v1 = v0[19];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1)
  {
    uint64_t v5 = v0[19];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[4] = v0[18];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static TextureResource.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance TextureResource()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t static TextureResource.generate(from:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 64) = v4;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 128) = v6 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v5 + 72) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 80) = v8;
  *(void *)(v5 + 88) = v7;
  return MEMORY[0x270FA2498](static TextureResource.generate(from:named:options:), v8, v7);
}

uint64_t static TextureResource.generate(from:named:options:)()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v2 = RETextureImportOperationCreateWithCGImage();
  if (v1)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  HIDWORD(v3) = *(_DWORD *)(v0 + 128);
  LODWORD(v3) = HIDWORD(v3);
  swift_release();
  int v8 = v3 >> 16;
  uint64_t v4 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v2, &v8, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
  *(void *)(v0 + 96) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v0;
  v5[1] = static TextureResource.generate(from:named:options:);
  return v7(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 120);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static TextureResource.generate(from:named:options:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = static TextureResource.generate(from:named:options:);
  }
  else
  {
    swift_release();
    v4[15] = a1;
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = static TextureResource.generate(from:named:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t TextureResource.replace(using:options:)(uint64_t a1, _DWORD *a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  HIDWORD(v4) = *a2;
  LODWORD(v4) = *a2;
  *(_DWORD *)(v3 + 80) = v4 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v3 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = v5;
  return MEMORY[0x270FA2498](TextureResource.replace(using:options:), v6, v5);
}

uint64_t TextureResource.replace(using:options:)()
{
  uint64_t v8 = v0;
  HIDWORD(v1) = *(_DWORD *)(v0 + 80);
  LODWORD(v1) = HIDWORD(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  int v7 = v1 >> 16;
  uint64_t v3 = TextureResource.replaceAsyncInternal(using:options:)(v2, &v7);
  *(void *)(v0 + 56) = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *unint64_t v4 = v0;
  v4[1] = TextureResource.replace(using:options:);
  return v6(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    unint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = TextureResource.replace(using:options:);
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v3 = *(void *)(v2 + 40);
    unint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = TextureResource.replace(using:options:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextureResource.copy(to:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = type metadata accessor for MainActor();
  v2[5] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[6] = v4;
  v2[7] = v3;
  return MEMORY[0x270FA2498](TextureResource.copy(to:), v4, v3);
}

uint64_t TextureResource.copy(to:)()
{
  int8x16_t v7 = v0[1];
  uint64_t v1 = static MainActor.shared.getter();
  v0[4].i64[0] = v1;
  uint64_t v2 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[1] = (uint64_t)v2;
  v2[1] = vextq_s8(v7, v7, 8uLL);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5].i64[0] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = TextureResource.copy(to:);
  uint64_t v4 = MEMORY[0x263F8EE60] + 8;
  uint64_t v5 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v3, v1, v5, 0x3A6F742879706F63, 0xE900000000000029, partial apply for closure #1 in TextureResource.copy(to:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = TextureResource.copy(to:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = TextureResource.copy(to:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in TextureResource.copy(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(a2, a3, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.copy(to:), v11);
  return swift_release();
}

uint64_t closure #1 in closure #1 in TextureResource.copy(to:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return static TextureResource.texture2DArray(slices:named:options:)(a1, a2, a3, a4, 3);
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 56) = v8;
  *(void *)(v5 + 64) = v7;
  return MEMORY[0x270FA2498](static TextureResource.texture2DArray(slices:named:options:), v8, v7);
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)()
{
  uint64_t v11 = v0;
  id v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t)v10, 3);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v10[0] = v4 >> 16;
    uint64_t v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v10, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(void *)(v0 + 72) = v5;
    __n128 v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v6;
    *unint64_t v6 = v0;
    v6[1] = static TextureResource.texture2DArray(slices:named:options:);
    return v9(v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  id v1 = *(void *)(v0 + 96);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  type metadata accessor for TextureResource();
  __int16 v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  unint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static TextureResource.texture2DArray(slices:named:options:);
  }
  else
  {
    swift_release();
    v4[12] = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static TextureResource.texture2DArray(slices:named:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static TextureResource.cube(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return specialized static TextureResource.cube(slices:named:options:)(a1, a2, a3, a4);
}

uint64_t static TextureResource.cube(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 56) = v8;
  *(void *)(v5 + 64) = v7;
  return MEMORY[0x270FA2498](static TextureResource.cube(slices:named:options:), v8, v7);
}

uint64_t static TextureResource.cube(slices:named:options:)()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t)v10, 5);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v10[0] = v4 >> 16;
    uint64_t v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v10, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(void *)(v0 + 72) = v5;
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v6;
    *unint64_t v6 = v0;
    v6[1] = static TextureResource.cube(slices:named:options:);
    return v9(v5);
  }
}

uint64_t static TextureResource.cube(slices:named:options:)(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static TextureResource.cube(slices:named:options:);
  }
  else
  {
    swift_release();
    v4[12] = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static TextureResource.cube(slices:named:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static TextureResource.texture3D(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return static TextureResource.texture2DArray(slices:named:options:)(a1, a2, a3, a4, 7);
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  int v10 = *a4;
  uint64_t v7 = specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(a1, a2, a3, (char *)&v10, a5);
  if (!v5)
  {
    uint64_t v8 = v7[2];
    type metadata accessor for TextureResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v8;
    *(void *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
  }
  return v6;
}

uint64_t static TextureResource.texture3D(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 56) = v8;
  *(void *)(v5 + 64) = v7;
  return MEMORY[0x270FA2498](static TextureResource.texture3D(slices:named:options:), v8, v7);
}

uint64_t static TextureResource.texture3D(slices:named:options:)()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t)v10, 7);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v10[0] = v4 >> 16;
    uint64_t v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v10, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(void *)(v0 + 72) = v5;
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v6;
    *unint64_t v6 = v0;
    v6[1] = static TextureResource.cube(slices:named:options:);
    return v9(v5);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureResource.Compression.Kind()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v2 = 0;
  }
  else if (v2 == 5)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextureResource.Compression.Kind()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v2 = 0;
  }
  else if (v2 == 5)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Compression.Kind()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v2 = 0;
  }
  else if (v2 == 5)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void static TextureResource.Compression.none.getter(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

BOOL static TextureResource.Compression.ASTCQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TextureResource.Compression.ASTCQuality.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unsigned __int8 *static TextureResource.Compression.astc(blockSize:quality:)@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, _WORD *a3@<X8>)
{
  *a3 = *result | (*a2 << 8);
  return result;
}

void TextureResource.Compression.hash(into:)()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v2 = 0;
  }
  else if (v2 == 5)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

BOOL static TextureResource.Compression.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 8;
  if (v2 >> 8 != 4)
  {
    if (v4 == 5)
    {
      if ((v3 & 0xFF00) == 0x500) {
        return 1;
      }
    }
    else if ((v3 & 0xFE00) != 0x400)
    {
      int v5 = (v3 ^ v2);
      if (v4 == v3 >> 8 && v5 == 0) {
        return 1;
      }
    }
    return 0;
  }
  return (v3 & 0xFF00) == 0x400;
}

Swift::Int TextureResource.Compression.hashValue.getter()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v2 = 0;
  }
  else if (v2 == 5)
  {
    Swift::UInt v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextureResource.Compression(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 8;
  if (v2 >> 8 == 4) {
    return (v3 & 0xFF00) == 0x400;
  }
  if (v4 != 5)
  {
    if ((v3 & 0xFE00) != 0x400)
    {
      int v5 = (v3 ^ v2);
      if (v4 == v3 >> 8 && v5 == 0) {
        return 1;
      }
    }
    return 0;
  }
  return (v3 & 0xFF00) == 0x500;
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void *a1, uint64_t a2, uint64_t a3, char *a4, Swift::Int_optional a5, int *a6)
{
  int v9 = *a6;
  a5.is_nil &= 1u;
  char v17 = *a4;
  int v16 = v9;
  uint64_t v10 = static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)((uint64_t)a1, a2, a3, (int)&v17, a5, (char *)&v16);
  if (v6)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v10;
    uint64_t v12 = swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(((uint64_t (*)(uint64_t))v11)(v12) + 16);
    type metadata accessor for TextureResource();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v13;
    *(void *)(v7 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v14)
    {
      swift_release_n();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();

      swift_release();
      swift_release();
    }
  }
  return v7;
}

uint64_t (*static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, Swift::Int_optional skyboxCubeDimension, char *a6))()
{
  uint64_t v8 = v6;
  uint64_t v12 = *a6;
  int v13 = a6[1];
  __int16 v14 = *((_WORD *)a6 + 1);
  v23.is_nil = skyboxCubeDimension.is_nil;
  v23.value = skyboxCubeDimension.value;
  uint64_t v15 = (unint64_t)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v23);
  uint64_t v16 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(a1, a2, a3, v15, dword_2283252D8[v12], (2 - v13), (v14 & 0xFF00) == 1024);
  Swift::OpaquePointer_optional result = (uint64_t (*)())swift_bridgeObjectRelease();
  if (!v7)
  {
    uint64_t v18 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
    if (v18)
    {
      unsigned int v19 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(v16, v18);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      unsigned int v19 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v22 = (void *)swift_allocObject();
    v22[2] = v16;
    v22[3] = v19;
    v22[4] = v21;
    v22[5] = v8;
    return partial apply for specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:);
  }
  return result;
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, char a6, _WORD *a7)
{
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = v7;
  *(unsigned char *)(v8 + 114) = a6;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 115) = *a4;
  *(_WORD *)(v8 + 116) = *a7;
  *(_WORD *)(v8 + 112) = a7[1];
  type metadata accessor for MainActor();
  *(void *)(v8 + 56) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v8 + 64) = v10;
  *(void *)(v8 + 72) = v9;
  return MEMORY[0x270FA2498](TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:), v10, v9);
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v1 = closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 115), *(void *)(v0 + 40), *(unsigned char *)(v0 + 114) & 1, *(unsigned __int8 *)(v0 + 116) | (*(unsigned __int16 *)(v0 + 112) << 16) | (*(unsigned __int8 *)(v0 + 117) << 8), *(void *)(v0 + 48));
  *(void *)(v0 + 80) = v1;
  swift_bridgeObjectRelease();
  unsigned int v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  unsigned int v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  *unsigned int v2 = v0;
  v2[1] = TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  return v4(v1);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[13];
  unsigned int v2 = (void *)v0[2];
  swift_release();
  unsigned int v3 = *(void *)(v1 + 16);
  type metadata accessor for TextureResource();
  unsigned int v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1)
{
  unsigned int v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  }
  else
  {
    swift_release();
    v4[13] = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a3;
  int v34 = a6;
  uint64_t v32 = a2;
  uint64_t v33 = a5;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  __int16 v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = specialized static __ServiceLocator.shared.getter();
  uint64_t v16 = *(void **)(*(void *)(v15 + 168) + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v15 + 24);
  swift_unownedRetainStrong();
  uint64_t v18 = *(void **)(v17 + 32);
  swift_retain();
  id v19 = v16;
  id v20 = v18;
  swift_release();
  *__int16 v14 = v20;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F0E0], v11);
  id v21 = v20;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v32;
    *(void *)(v23 + 16) = a1;
    *(void *)(v23 + 24) = v24;
    *(void *)(v23 + 32) = v36;
    *(unsigned char *)(v23 + 40) = a4 & 1;
    *(void *)(v23 + 48) = v33;
    *(unsigned char *)(v23 + 56) = v34 & 1;
    *(_DWORD *)(v23 + 57) = a7;
    *(void *)(v23 + 64) = v15;
    *(void *)(v23 + 72) = v19;
    *(void *)(v23 + 80) = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
    uint64_t v25 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
    uint64_t v26 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v27 = swift_allocObject();
    *(_DWORD *)(v27 + 16) = 0;
    *(void *)(v26 + 16) = v27;
    *(void *)(v26 + 24) = 0;
    *(unsigned char *)(v26 + 32) = -1;
    *(void *)(v25 + 16) = v26;
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = partial apply for closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
    v28[3] = v23;
    v28[4] = v26;
    v28[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v29 = v19;
    id v30 = a1;
    *(void *)(v25 + 24) = Future.init(_:)();
    uint64_t v31 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
    swift_release();

    swift_release();
    return v31;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v36 = a8;
  uint64_t v34 = a4;
  uint64_t v35 = a7;
  uint64_t v31 = a3;
  uint64_t v37 = a12;
  uint64_t v40 = a11;
  int v30 = a6 & 1;
  unsigned int v32 = HIWORD(a9);
  unsigned int v33 = a9 >> 8;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = &v29[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  id v20 = &v29[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v31;
  uint64_t v24 = v34;
  *(void *)(v22 + 16) = v31;
  *(void *)(v22 + 24) = v24;
  *(void *)(v22 + 32) = a5;
  *(unsigned char *)(v22 + 40) = v30;
  *(void *)(v22 + 48) = v35;
  *(unsigned char *)(v22 + 56) = v36 & 1;
  *(unsigned char *)(v22 + 57) = a9;
  *(unsigned char *)(v22 + 58) = v33;
  *(_WORD *)(v22 + 59) = v32;
  *(void *)(v22 + 64) = a10;
  *(void *)(v22 + 72) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  uint64_t v25 = v37;
  *(void *)(v22 + 80) = v21;
  *(void *)(v22 + 88) = v25;
  aBlock[4] = partial apply for doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_271;
  uint64_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v27 = v23;
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v20, v17, v26);
  _Block_release(v26);
  (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v17, v15);
  (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v20, v38);
  return swift_release();
}

uint64_t doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, Swift::Int_optional a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a5.is_nil &= 1u;
  char v15 = a4 & 1;
  int v14 = a6;
  uint64_t v9 = static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(a1, a2, a3, (int)&v15, a5, (char *)&v14);
  uint64_t v11 = v10;
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v9;
  void v12[3] = v11;
  v12[4] = a8;
  v12[5] = a9;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:), (uint64_t)v12);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void (*a1)(void), uint64_t a2, void (*a3)(uint64_t, void))
{
  a1();
  uint64_t v4 = swift_retain();
  a3(v4, 0);
  return swift_release_n();
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(CGImage *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = *(unsigned char *)a4;
  char v9 = *(unsigned char *)(a4 + 1);
  __int16 v10 = *(_WORD *)(a4 + 2);
  unint64_t v11 = specialized static TextureResource.sliceCube(cgImage:)(a1);
  if (v4)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v16[0] = v8;
    v16[1] = v9;
    __int16 v17 = v10;
    uint64_t v13 = *((void *)specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(v11, a2, a3, v16, 5)+ 2);
    type metadata accessor for TextureResource();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v14 + 16);
    a3 = swift_allocObject();
    *(void *)(a3 + 16) = v15;
    *(void *)(a3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
  }
  return a3;
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(_WORD *)(v5 + 110) = *a4;
  *(_WORD *)(v5 + 104) = a4[1];
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = v6;
  return MEMORY[0x270FA2498](TextureResource.init(cubeFromImage:named:options:), v7, v6);
}

uint64_t TextureResource.init(cubeFromImage:named:options:)()
{
  uint64_t v1 = specialized static TextureResource.sliceCube(cgImage:)(*(CGImage **)(v0 + 16));
  *(void *)(v0 + 72) = v1;
  uint64_t v2 = v1;
  __int16 v3 = *(_WORD *)(v0 + 104);
  *(_WORD *)(v0 + 106) = *(_WORD *)(v0 + 110);
  *(_WORD *)(v0 + 108) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = TextureResource.init(cubeFromImage:named:options:);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 24);
  return static TextureResource.cube(slices:named:options:)(v2, v6, v5, (_DWORD *)(v0 + 106));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[2];
  swift_release();
  __int16 v3 = *(void *)(v1 + 16);
  type metadata accessor for TextureResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = TextureResource.init(cubeFromImage:named:options:);
  }
  else
  {
    v4[12] = a1;
    swift_bridgeObjectRelease();
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = TextureResource.init(cubeFromImage:named:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t (*static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v3 = v2;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v6, (uint64_t)&v40, &demangling cache variable for type metadata for __RenderService?);
  if (!v41)
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }
  outlined init with take of BindableDataInternal(&v40, (uint64_t)&v36);
  uint64_t v7 = v38;
  uint64_t v8 = v39;
  __swift_project_boxed_opaque_existential_1(&v36, v38);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if (!*MEMORY[0x263F376F0]) {
    goto LABEL_29;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (*(void *)(a2 + 16))
  {
    uint64_t v13 = v10;
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    char v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = (uint64_t (*)())*MEMORY[0x263F376F8];
  if (!*MEMORY[0x263F376F8])
  {
    __break(1u);
    return result;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (!*(void *)(a2 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v20 = v17;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
  char v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0) {
    return 0;
  }
LABEL_10:
  RETextureAssetGetPixelFormat();
  id v23 = (id)RERenderManagerGetRenderDevice();
  MTLPixelFormatGetInfoForDevice();
  __int16 v24 = v37;
  swift_unknownObjectRelease();
  if ((v24 & 0x400) != 0) {
    return 0;
  }
  *(void *)&long long v40 = 0;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  CompressedTextureuint64_t AssetData = RETextureAssetCreateCompressedTextureAssetData();

  if (CompressedTextureAssetData)
  {
    id v27 = (id)RERenderManagerGetRenderDevice();
    RETextureAssetDataGetPixelFormat();
    MTLPixelFormatGetInfoForDevice();
    if ((v37 & 0x400) == 0 && (objc_msgSend(v27, sel_supportsFamily_, 1002) & 1) == 0)
    {
      specialized static __ServiceLocator.shared.getter();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        int v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v30 = 0;
        _os_log_impl(&dword_227DD2000, v28, v29, "Compression not applied because ASTC pixel formats are not supported by device. Keeping track of options so later calls to Entity.write() can apply compression.", v30, 2u);
        MEMORY[0x22A696500](v30, -1, -1);
        swift_unknownObjectRelease();

LABEL_27:
        uint64_t v35 = (void *)swift_allocObject();
        long long v35[2] = v9;
        v35[3] = a1;
        v35[4] = CompressedTextureAssetData;
        v35[5] = v3;
        return partial apply for closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:);
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  BOOL v31 = (void)v40 == 0;
  if ((void)v40) {
    unint64_t v32 = v40;
  }
  else {
    unint64_t v32 = 0xD00000000000001ALL;
  }
  if ((void)v40) {
    unint64_t v33 = 0;
  }
  else {
    unint64_t v33 = 0x800000022834FB60;
  }
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  swift_allocError();
  *(void *)uint64_t v34 = v32;
  *(void *)(v34 + 8) = v33;
  *(unsigned char *)(v34 + 16) = v31;
  return (uint64_t (*)())swift_willThrow();
}

uint64_t closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)()
{
  if (MEMORY[0x22A692FD0]()) {
    return RERelease();
  }
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  swift_allocError();
  *(void *)uint64_t v1 = 0xD00000000000001ALL;
  *(void *)(v1 + 8) = 0x800000022834FB60;
  *(unsigned char *)(v1 + 16) = 1;
  return swift_willThrow();
}

uint64_t specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  if (!a2)
  {
LABEL_5:
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for TextureResource();
      a3 = swift_dynamicCastClass();
      if (a3)
      {
LABEL_9:
        RERelease();
        return a3;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for TextureResource();
    a3 = swift_allocObject();
    *(void *)(a3 + 16) = a1;
    *(void *)(a3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_9;
  }
  uint64_t v7 = swift_retain();
  a2(v7);
  if (!v3)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    goto LABEL_5;
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  RERelease();
  return a3;
}

uint64_t TextureResource.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_228324960;
  *(void *)(v8 + 32) = 0x6369746E616D6573;
  *(void *)(v8 + 40) = 0xE800000000000000;
  *(void *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  swift_retain();
  TextureResource.semantic.getter((unsigned char *)(v8 + 48));
  *(void *)(v8 + 80) = 0x746867696568;
  *(void *)(v8 + 88) = 0xE600000000000000;
  RETextureAssetGetSize();
  uint64_t v10 = MEMORY[0x263F8D6C8];
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 120) = v10;
  *(void *)(v8 + 128) = 0x6874646977;
  *(void *)(v8 + 136) = 0xE500000000000000;
  RETextureAssetGetSize();
  *(void *)(v8 + 144) = v11;
  *(void *)(v8 + 168) = v10;
  *(void *)(v8 + 176) = 0xD000000000000010;
  *(void *)(v8 + 184) = 0x800000022834F770;
  uint64_t MipmapLevelCount = RETextureAssetGetMipmapLevelCount();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 192) = MipmapLevelCount;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  type metadata accessor for TextureResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance TextureResource()
{
  return TextureResource.customMirror.getter();
}

uint64_t TextureResource.DrawableQueue.Descriptor.timeout.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 40) = result;
  *(void *)(v2 + 48) = a2;
  return result;
}

__n128 (*TextureResource.DrawableQueue.Descriptor.timeout.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  return TextureResource.DrawableQueue.Descriptor.timeout.modify;
}

__n128 TextureResource.DrawableQueue.Descriptor.timeout.modify(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 40) = *a1;
  return result;
}

uint64_t TextureResource.DrawableQueue.Descriptor.init(pixelFormat:width:height:usage:mipmapsMode:timeout:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8 = *a5;
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 32) = v8;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  *(unsigned char *)(a8 + 56) = 0;
  return result;
}

uint64_t TextureResource.init(image:withName:options:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  return specialized TextureResource.init(image:withName:options:)(a1, a2, a3, a4);
}

uint64_t TextureResource.init(image:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 64) = v4;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 128) = v6 >> 16;
  type metadata accessor for MainActor();
  *(void *)(v5 + 72) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 80) = v8;
  *(void *)(v5 + 88) = v7;
  return MEMORY[0x270FA2498](TextureResource.init(image:withName:options:), v8, v7);
}

uint64_t TextureResource.init(image:withName:options:)()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v2 = RETextureImportOperationCreateWithCGImage();
  if (v1)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  HIDWORD(v3) = *(_DWORD *)(v0 + 128);
  LODWORD(v3) = HIDWORD(v3);
  int v8 = v3 >> 16;
  uint64_t v4 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v2, &v8, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
  *(void *)(v0 + 96) = v4;
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v0;
  v5[1] = TextureResource.init(image:withName:options:);
  return v7(v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = v0[15];
  uint64_t v2 = (void *)v0[5];
  swift_release();
  unint64_t v3 = *(void *)(v1 + 16);
  type metadata accessor for TextureResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextureResource.init(image:withName:options:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = TextureResource.init(image:withName:options:);
  }
  else
  {
    swift_release();
    v4[15] = a1;
    uint64_t v5 = v4[10];
    uint64_t v6 = v4[11];
    uint64_t v7 = TextureResource.init(image:withName:options:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

void *specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void *result, uint64_t a2, uint64_t a3, void (*a4)(void (*)(void), uint64_t), void (*a5)(void (*)(void), uint64_t))
{
  if (result)
  {
    uint64_t v5 = *(void (**)(_OWORD *))(a2 + 16);
    if (!v5)
    {
      __break(1u);
      return result;
    }
    int v8 = result;
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)&v12[0] = result;
    BYTE8(v12[0]) = 1;
    id v10 = result;
    a4((void (*)(void))v5, v9);
    v5(v12);
    a5((void (*)(void))v5, v9);
  }
  swift_beginAccess();
  __n128 result = (void *)swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = (uint64_t)result + 16;
    memset(v12, 0, sizeof(v12));
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v12, v11);
    swift_endAccess();
    return (void *)swift_release();
  }
  return result;
}

void *specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void (**)(unsigned char *))(a2 + 16);
    if (!v2)
    {
      __break(1u);
      return result;
    }
    unint64_t v3 = result;
    *(void *)uint64_t v6 = result;
    memset(&v6[8], 0, 57);
    char v7 = 1;
    id v4 = result;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v2);
    v2(v6);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);
  }
  swift_beginAccess();
  __n128 result = (void *)swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = (uint64_t)result + 16;
    memset(v6, 0, 32);
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v6, v5);
    swift_endAccess();
    return (void *)swift_release();
  }
  return result;
}

uint64_t specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a3;
  void v6[3] = a1;
  v6[4] = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_390;
  char v7 = _Block_copy(aBlock);
  int v8 = _Block_copy(v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  v12[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v12[5] = v9;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  _OWORD v12[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v12[3] = &block_descriptor_397;
  id v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v10);
  _Block_release(v7);
  swift_release();
  swift_release();
  return REAssetLoadRequestAddAsset();
}

{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  void v12[6];
  void aBlock[6];

  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a3;
  void v6[3] = a1;
  v6[4] = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_214;
  char v7 = _Block_copy(aBlock);
  int v8 = _Block_copy(v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  v12[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v12[5] = v9;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  _OWORD v12[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v12[3] = &block_descriptor_221;
  id v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v10);
  _Block_release(v7);
  swift_release();
  swift_release();
  if (*(void *)(a1 + 16)) {
    REAssetLoadRequestAddAsset();
  }
  __n128 result = swift_beginAccess();
  if (*(void *)(a1 + 24)) {
    return REAssetLoadRequestAddAsset();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void v14[6];
  void aBlock[6];

  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  char v7 = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 16);
  int v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 72) = v8;
  *(void *)(v6 + 16) = a3;
  *(unsigned char *)(v6 + 88) = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 96) = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_1;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = _Block_copy(v9);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  v14[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v14[5] = v11;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v14[3] = &block_descriptor_167;
  uint64_t v12 = _Block_copy(v14);
  outlined retain of ShaderGraphMaterial(a1);
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v12);
  _Block_release(v9);
  swift_release();
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v4 = *(void (**)(void **))(a2 + 16);
    if (v4)
    {
      aBlock = a3;
      LOBYTE(v15) = 0;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      swift_retain();
      v4(&aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      swift_release();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  RequestCopyuint64_t Error = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = (void *)specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(RequestCopyError);

  char v7 = *(void (**)(void **))(a2 + 16);
  if (!v7)
  {
LABEL_14:
    __break(1u);
    return;
  }
  aBlock = v6;
  LOBYTE(v15) = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
  id v8 = v6;
  v7(&aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);

LABEL_8:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v18 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    uint64_t v19 = 0;
    aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v15 = 1107296256;
    uint64_t v16 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v17 = &block_descriptor_400;
    uint64_t v9 = _Block_copy(&aBlock);
    id v10 = _Block_copy(v9);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    v13[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v13[5] = v11;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    _OWORD v13[3] = &block_descriptor_407;
    uint64_t v12 = _Block_copy(v13);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v12);
    swift_release();
    _Block_release(v9);
  }
}

{
  void (*v4)(void **);
  __CFError *RequestCopyError;
  void *v6;
  void (*v7)(void **);
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void v13[6];
  void *aBlock;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  uint64_t (*v18)(void, void);
  uint64_t v19;

  if (a1)
  {
    id v4 = *(void (**)(void **))(a2 + 16);
    if (v4)
    {
      aBlock = a3;
      LOBYTE(v15) = 0;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      swift_retain();
      v4(&aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      swift_release();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  RequestCopyuint64_t Error = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = (void *)specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(RequestCopyError);

  char v7 = *(void (**)(void **))(a2 + 16);
  if (!v7)
  {
LABEL_14:
    __break(1u);
    return;
  }
  aBlock = v6;
  LOBYTE(v15) = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
  id v8 = v6;
  v7(&aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);

LABEL_8:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v18 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    uint64_t v19 = 0;
    aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v15 = 1107296256;
    uint64_t v16 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v17 = &block_descriptor_224;
    uint64_t v9 = _Block_copy(&aBlock);
    id v10 = _Block_copy(v9);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    v13[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v13[5] = v11;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    _OWORD v13[3] = &block_descriptor_231;
    uint64_t v12 = _Block_copy(v13);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v12);
    swift_release();
    _Block_release(v9);
  }
}

void specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = *(void (**)(unsigned char *))(a2 + 16);
    if (v4)
    {
      uint64_t v6 = *(void *)(a3 + 24);
      uint64_t v7 = *(void *)(a3 + 32);
      uint64_t v8 = *(void *)(a3 + 40);
      uint64_t v9 = *(void *)(a3 + 56);
      uint64_t v10 = *(unsigned char *)(a3 + 16) & 1;
      char v11 = *(unsigned char *)(a3 + 64) & 1;
      unint64_t v12 = *(unsigned char *)(a3 + 48) & 1 | ((unint64_t)(*(unsigned char *)(a3 + 49) & 1) << 8);
      *(_OWORD *)aBlock = *(_OWORD *)a3;
      *(void *)&aBlock[16] = v10;
      *(void *)&long long v25 = v6;
      *((void *)&v25 + 1) = v7;
      *(void *)uint64_t v26 = v8;
      *(void *)&v26[8] = v12;
      *(void *)&v26[16] = v9;
      v26[24] = v11;
      char v27 = 0;
      outlined retain of ShaderGraphMaterial(a3);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      v4(aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      outlined release of ShaderGraphMaterial(a3);
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  RequestCopyuint64_t Error = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_21:
    __break(1u);
    return;
  }
  CFIndex Code = CFErrorGetCode(RequestCopyError);
  if (Code == 100)
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    uint64_t v15 = (void *)swift_allocError();
    CancellationError.init()();
  }
  else
  {
    if (Code != 200 && Code != 300)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v15 = (void *)swift_allocError();
      *char v22 = RequestCopyError;
      uint64_t v16 = *(void (**)(unsigned char *))(a2 + 16);
      if (v16) {
        goto LABEL_13;
      }
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v15 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v16 = *(void (**)(unsigned char *))(a2 + 16);
  if (!v16) {
    goto LABEL_18;
  }
LABEL_13:
  *(void *)aBlock = v15;
  *(_OWORD *)&aBlock[8] = 0u;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  char v27 = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v16);
  id v17 = v15;
  v16(aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v16);

LABEL_14:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    *((void *)&v25 + 1) = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    *(void *)uint64_t v26 = 0;
    *(void *)aBlock = MEMORY[0x263EF8330];
    *(void *)&aBlock[8] = 1107296256;
    *(void *)&aBlock[16] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(void *)&long long v25 = &block_descriptor_170;
    uint64_t v18 = _Block_copy(aBlock);
    uint64_t v19 = _Block_copy(v18);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    v23[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v23[5] = v20;
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 1107296256;
    v23[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    void v23[3] = &block_descriptor_177;
    char v21 = _Block_copy(v23);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v21);
    swift_release();
    _Block_release(v18);
  }
}

uint64_t specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FD58, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FD30, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FD08, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FCE0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FA60, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8F7E0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FCB8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FC90, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FAB0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FA88, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8FA10, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8F9E8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26DC8F7B8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

uint64_t specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14 = (void *)swift_allocObject();
  v14[2] = a5;
  uint64_t v14[3] = a6;
  v14[4] = a1;
  v14[5] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  a3(a8, v14);

  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  outlined init with copy of (Int, URL)(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Result<Material, Error>);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  outlined assign with copy of Result<Material, Error>?((uint64_t)v9, a2 + 24);
  swift_endAccess();
  os_unfair_lock_unlock(v7);
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for Result<Material, Error>?);
  return a4(a1);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *))
{
  id v6 = *(id *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  outlined copy of Result<AUAudioUnit, Error>(*(id *)a1);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v6;
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a2 + 32) = v7;
  outlined consume of Result<AUAudioUnit, Error>?(v9, v10);
  os_unfair_lock_unlock(v8);
  id v12 = v6;
  char v13 = v7;
  return a4(&v12);
}

{
  id v6;
  char v7;
  os_unfair_lock_s *v8;
  void *v9;
  unsigned __int8 v10;
  id v12;
  char v13;

  id v6 = *(id *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  outlined copy of Result<[Entity], Error>(*(id *)a1, v7, MEMORY[0x263F8EEA8]);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v6;
  unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a2 + 32) = v7;
  outlined consume of Result<[Entity], Error>?(v9, v10);
  os_unfair_lock_unlock(v8);
  id v12 = v6;
  char v13 = v7;
  return a4(&v12);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  id v9 = *(id *)a1;
  char v10 = *(unsigned char *)(a1 + 8);
  char v11 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  outlined copy of Result<ModelEntity, Error>(*(id *)a1, v10);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v9;
  uint64_t v13 = *(unsigned __int8 *)(a2 + 32);
  *(unsigned char *)(a2 + 32) = v10;
  a6(v12, v13);
  os_unfair_lock_unlock(v11);
  id v15 = v9;
  char v16 = v10;
  return a4(&v15);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  id v5 = *(id *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 64);
  char v26 = *(unsigned char *)(a1 + 65);
  uint64_t v13 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  outlined copy of Result<ShaderGraphMaterial, Error>(*(id *)a1, v6, v7, v8, v9, v10, v11, v12, v25, v26);
  os_unfair_lock_lock(v13);
  swift_beginAccess();
  char v14 = *(void **)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void **)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 80);
  unsigned __int16 v22 = *(_WORD *)(a2 + 88);
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v12;
  *(_WORD *)(a2 + 88) = v24;
  outlined consume of Result<ShaderGraphMaterial, Error>?(v14, v15, v16, v17, v18, v19, v20, v21, v22);
  os_unfair_lock_unlock(v13);
  v28[0] = v5;
  v28[1] = v6;
  v28[2] = v7;
  v28[3] = v8;
  v28[4] = v9;
  v28[5] = v10;
  v28[6] = v11;
  v28[7] = v12;
  char v29 = v25;
  char v30 = v26;
  return a4(v28);
}

BOOL specialized static TextureResource.Compression.Kind.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 8;
  if (v2 >> 8 == 4) {
    return (v3 & 0xFF00) == 0x400;
  }
  if (v4 == 5) {
    return (v3 & 0xFF00) == 0x500;
  }
  if ((v3 & 0xFE00) == 0x400) {
    return 0;
  }
  return v3 == v2 && v4 == v3 >> 8;
}

uint64_t specialized static TextureResource.Compression.ASTCBlockSize.toCore(_:)(unsigned __int8 *a1)
{
  return *a1 + 1;
}

unint64_t specialized static TextureResource.tryCreate(from:disableNetworkSync:)(uint64_t a1, char a2)
{
  uint64_t Asset = RETextureImportOperationCreateAsset();
  if (!Asset) {
    return 0xD000000000000017;
  }
  if (a2) {
    REAssetSetNetworkSharingMode();
  }
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_7;
  }
  type metadata accessor for TextureResource();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_7:
    type metadata accessor for TextureResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = Asset;
    *(void *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v4;
}

uint64_t specialized TextureResource.init(image:withName:options:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = *a4;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v8 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  id v9 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v8, 1);
  uint64_t v12 = v9;
  uint64_t v13 = v10;
  char v14 = v11;
  if ((v11 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v10, v11, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v16 = type metadata accessor for TextureResource();
    *(void *)(inited + 32) = v12;
    uint64_t v7 = inited + 32;
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = &protocol witness table for TextureResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v4)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      uint64_t v17 = v12[2];
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v17;
      *(void *)(v7 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 0);
      RERelease();

      return v7;
    }
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 0);
  }
  RERelease();

  return v7;
}

void *specialized static TextureResource.load(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  swift_beginAccess();
  uint64_t v8 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  id v9 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v8, 1);
  uint64_t Error = v9;
  uint64_t v13 = v10;
  char v14 = v11;
  if ((v11 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v10, v11, 1);
    uint64_t Error = (void *)type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
    swift_allocError();
    uint64_t v18 = v17;
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a1, v19);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v16 = type metadata accessor for TextureResource();
    *(void *)(inited + 32) = Error;
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = &protocol witness table for TextureResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v21)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      RERelease();
      return Error;
    }
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v13, v14, 0);
  }
  RERelease();
  return Error;
}

uint64_t specialized static TextureResource.findBundledFileExtension(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = a2;
  id v26 = a3;
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for supportedFileTypes != -1) {
    swift_once();
  }
  uint64_t v9 = *((void *)static TextureResource.supportedFileTypes + 2);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  unsigned __int16 v22 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v20 = swift_bridgeObjectRetain();
  __int16 v11 = (uint64_t *)(v20 + 40);
  do
  {
    uint64_t v13 = *(v11 - 1);
    uint64_t v12 = *v11;
    swift_bridgeObjectRetain();
    char v14 = (void *)MEMORY[0x22A688A50](v24, v25);
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = (void *)MEMORY[0x22A688A50](v13, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
    }
    id v16 = objc_msgSend(v26, sel_URLForResource_withExtension_, v14, v15);

    if (v16)
    {
      uint64_t v17 = v23;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*v22)(v8, v17, v3);
      (*v10)(v8, 0, 1, v3);
      if ((*v21)(v8, 1, v3) != 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
        goto LABEL_14;
      }
    }
    else
    {
      (*v10)(v8, 1, 1, v3);
    }
    v11 += 2;
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    --v9;
  }
  while (v9);
  uint64_t v13 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t specialized static TextureResource.createTextureAssetDataFor(texture:options:)(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFStringRef)>);
    uint64_t inited = swift_initStackObject();
    uint64_t v4 = inited;
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v5 = (void *)*MEMORY[0x263F376D8];
    uint64_t v6 = (void **)MEMORY[0x263F376E8];
  }
  else
  {
    if (v2 != 2)
    {
      v10.super.Class isa = 0;
      goto LABEL_7;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFStringRef)>);
    uint64_t inited = swift_initStackObject();
    uint64_t v4 = inited;
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v5 = (void *)*MEMORY[0x263F376D8];
    uint64_t v6 = (void **)MEMORY[0x263F376E0];
  }
  uint64_t v7 = *v6;
  *(void *)(inited + 32) = v5;
  *(void *)(inited + 40) = v7;
  id v8 = v5;
  id v9 = v7;
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v11 = RETextureAssetDataCreateWithTexture();

  return v11;
}

uint64_t specialized static TextureResource.load(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, char *a4, void *a5)
{
  char v8 = *a4;
  char v9 = a4[1];
  __int16 v10 = *((_WORD *)a4 + 1);
  if (a3) {
    id v11 = a3;
  }
  else {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  id v12 = a3;
  uint64_t v44 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  uint64_t v13 = specialized static TextureResource.findBundledFileExtension(named:in:)(a1, a2, v11);
  uint64_t v15 = v14;
  uint64_t v39 = a2;
  id v16 = (void *)MEMORY[0x22A688A50](a1, a2);
  if (v15)
  {
    uint64_t v17 = (void *)MEMORY[0x22A688A50](v13, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = 0;
  }
  swift_beginAccess();
  uint64_t v18 = RETextureImportOperationCreateWithBundleResource();

  if (!v18)
  {
LABEL_11:
    uint64_t v22 = a5[3];
    uint64_t v23 = a5[4];
    __swift_project_boxed_opaque_existential_1(a5, v22);
    LOBYTE(v41[0]) = v8;
    BYTE1(v41[0]) = v9;
    WORD1(v41[0]) = v10;
    char v38 = v9;
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, id, void *, uint64_t, uint64_t))(v23 + 8);
    char v25 = v8;
    id v26 = v11;
    uint64_t v27 = v24(a1, v39, v11, v41, v22, v23);
    if (v5)
    {
      swift_release();

      return v22;
    }
    uint64_t v28 = v27;

    LOBYTE(v41[0]) = v25;
    BYTE1(v41[0]) = v38;
    WORD1(v41[0]) = v10;
    specialized static TextureResource.createTextureAssetDataFor(texture:options:)(v28, (unsigned __int8 *)v41);
    uint64_t v29 = v44 + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v29, (uint64_t)v41);
    uint64_t v30 = v42;
    uint64_t v31 = v43;
    __swift_project_boxed_opaque_existential_1(v41, v42);
    (*(void (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
    uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    RERelease();
    if ((id)REAssetGetSwiftObject())
    {
      uint64_t v33 = type metadata accessor for TextureResource();
      uint64_t v34 = swift_dynamicCastClass();
      if (v34)
      {
        uint64_t v22 = v34;
LABEL_18:
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_22830EC60;
        type metadata accessor for TextureResource();
        *(void *)(inited + 32) = v22;
        *(void *)(inited + 56) = v33;
        *(void *)(inited + 64) = &protocol witness table for TextureResource;
        swift_retain();
        specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
        swift_arrayDestroy();
        RERelease();

        swift_release();
        swift_unknownObjectRelease();
        return v22;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v33 = type metadata accessor for TextureResource();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = TextureAssetFromData;
    *(void *)(v22 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_18;
  }
  LOBYTE(v41[0]) = v8;
  BYTE1(v41[0]) = v9;
  WORD1(v41[0]) = v10;
  OpaquePointer.set(options:)();
  uint64_t v19 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v18, 0);
  uint64_t v22 = (uint64_t)v19;
  if ((v21 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v19, v20, v21, 1);
    RERelease();
    goto LABEL_11;
  }
  RERelease();

  swift_release();
  return v22;
}

uint64_t sub_227E9C480()
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(_DWORD *)(v2 + 48), (void *)(v2 + 56));
}

uint64_t partial apply for specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), (uint64_t)&unk_26DC90488, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), (uint64_t)&unk_26DC8F9E8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), (uint64_t)&unk_26DC8FC90, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)(v4, a1);
}

void outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if (a4) {
    outlined consume of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  }
  else {
    swift_release();
  }
}

void outlined consume of TextureResource.TextureImportOperationError(void *a1, id a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

uint64_t type metadata accessor for TextureResource.LoadError()
{
  uint64_t result = type metadata singleton initialization cache for TextureResource.LoadError;
  if (!type metadata singleton initialization cache for TextureResource.LoadError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for TextureResource()
{
  return self;
}

id outlined copy of Result<TextureResource, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if (a4) {
    return outlined copy of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  }
  else {
    return (id)swift_retain();
  }
}

id outlined copy of TextureResource.TextureImportOperationError(void *a1, id a2, char a3)
{
  if (a3) {
    return (id)swift_bridgeObjectRetain();
  }
  else {
    return a1;
  }
}

unint64_t lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError;
  if (!lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError;
  if (!lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError);
  }
  return result;
}

uint64_t type metadata accessor for TextureResource.DrawableQueue()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError);
  }
  return result;
}

uint64_t type metadata accessor for TextureResource.Drawable()
{
  return self;
}

uint64_t sub_227E9C82C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 27) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  int v12 = *(_DWORD *)(v1 + v6 + 16);
  uint64_t v13 = *(void *)(v1 + ((v6 + 27) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1)
{
  return closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(_DWORD *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in TextureResource.copy(to:)(uint64_t a1)
{
  return closure #1 in TextureResource.copy(to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized static __ServiceLocator.shared.getter();
  uint64_t v8 = 0xD00000000000001CLL;
  switch(a5)
  {
    case 2:
      if (a1 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 == 1)
        {
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter()) {
            goto LABEL_6;
          }
          swift_bridgeObjectRelease();
          __break(1u);
        }
      }
      else
      {
        uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v9 == 1)
        {
          swift_bridgeObjectRetain();
LABEL_6:
          if ((a1 & 0xC000000000000001) != 0)
          {
            id v10 = (id)MEMORY[0x22A689930](0, a1);
          }
          else
          {
            if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              __break(1u);
            }
            id v10 = *(id *)(a1 + 32);
          }
          uint64_t v11 = v10;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v8 = RETextureImportOperationCreateWithCGImage();

          if (v8) {
            goto LABEL_14;
          }
          swift_release();
          return 0xD000000000000015;
        }
      }
      swift_release();
      return 0xD000000000000030;
    case 3:
    case 7:
      swift_retain();
      goto LABEL_13;
    case 5:
      if (!(a1 >> 62))
      {
        uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v12 == 6) {
          goto LABEL_13;
        }
LABEL_23:
        swift_release();
        return 0xD00000000000002CLL;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15 != 6) {
        goto LABEL_23;
      }
LABEL_13:
      type metadata accessor for CGImageRef(0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_beginAccess();
      uint64_t v8 = RETextureImportOperationCreateFromImageArray();

      if (v8)
      {
LABEL_14:
        if (a3)
        {
          String.utf8CString.getter();
          RETextureImportOperationSetAssetResourceName();
          swift_release();
        }
        swift_release();
      }
      else
      {
        swift_release();
        return 0xD000000000000017;
      }
      return v8;
    default:
      return v8;
  }
}

void *specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  char v6 = *a4;
  char v7 = a4[1];
  __int16 v8 = *((_WORD *)a4 + 1);
  unint64_t v11 = specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(a1, a2, a3, (uint64_t)v23, a5);
  if ((v10 & 0x100) != 0)
  {
    uint64_t Error = v9;
    char v20 = v10;
    lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
    swift_allocError();
    *(void *)uint64_t v21 = v11;
    *(void *)(v21 + 8) = Error;
    *(unsigned char *)(v21 + 16) = v20 & 1;
    swift_willThrow();
  }
  else
  {
    v23[0] = v6;
    v23[1] = v7;
    __int16 v24 = v8;
    OpaquePointer.set(options:)();
    uint64_t v12 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v11, 1);
    uint64_t Error = v12;
    uint64_t v16 = v13;
    char v17 = v14;
    if ((v14 & 0x100) != 0)
    {
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 1);
      uint64_t Error = (void *)type metadata accessor for TextureResource.LoadError();
      lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      uint64_t v19 = type metadata accessor for TextureResource();
      *(void *)(inited + 32) = Error;
      *(void *)(inited + 56) = v19;
      *(void *)(inited + 64) = &protocol witness table for TextureResource;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      if (!v5)
      {
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
        swift_arrayDestroy();
        RERelease();
        return Error;
      }
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v16, v17, 0);
    }
    RERelease();
  }
  return Error;
}

void outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if (a4) {
    outlined consume of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  }
}

uint64_t specialized static TextureResource.cube(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v9 = *a4;
  char v6 = specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(a1, a2, a3, (char *)&v9, 5);
  if (!v4)
  {
    uint64_t v7 = v6[2];
    type metadata accessor for TextureResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v7;
    *(void *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
  }
  return v5;
}

int64_t specialized static TextureResource.getCubeLayout(_:)(CGImage *a1)
{
  int64_t Width = CGImageGetWidth(a1);
  int64_t Height = CGImageGetHeight(a1);
  int64_t result = CGImageGetHeight(a1);
  int64_t v5 = result;
  if (Height >= Width)
  {
    int64_t result = CGImageGetWidth(a1);
    if ((unsigned __int128)(result * (__int128)6) >> 64 == (6 * result) >> 63)
    {
      if (v5 == 6 * result) {
        return 1;
      }
LABEL_12:
      lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
      swift_allocError();
      *char v6 = 0;
      return swift_willThrow();
    }
    goto LABEL_15;
  }
  if ((unint64_t)(result - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_14;
  }
  int64_t result = CGImageGetWidth(a1);
  if ((unsigned __int128)(result * (__int128)3) >> 64 != (3 * result) >> 63)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (4 * v5 == 3 * result) {
    return 2;
  }
  int64_t result = CGImageGetHeight(a1);
  if ((unsigned __int128)(result * (__int128)6) >> 64 == (6 * result) >> 63)
  {
    if (6 * result == CGImageGetWidth(a1)) {
      return 0;
    }
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized static TextureResource.sliceCube(cgImage:)(CGImage *a1)
{
  uint64_t v16 = MEMORY[0x263F8EE78];
  char v4 = specialized static TextureResource.getCubeLayout(_:)(a1);
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  if (!v4)
  {
    int64_t Height = CGImageGetHeight(a1);
    uint64_t v9 = 0;
    double v7 = (double)Height;
    while ((unsigned __int128)(v9 * (__int128)Height) >> 64 == (v9 * Height) >> 63)
    {
      v18.origin.x = (double)(v9 * Height);
      v18.origin.y = 0.0;
      v18.size.width = (double)Height;
      v18.size.height = (double)Height;
      if (!CGImageCreateWithImageInRect(a1, v18)) {
        goto LABEL_38;
      }
      MEMORY[0x22A688E10]();
      uint64_t v2 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v2 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v9;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v9 == 6) {
        return v16;
      }
    }
    goto LABEL_43;
  }
  if (v4 == 1)
  {
    int64_t Width = CGImageGetWidth(a1);
    uint64_t v6 = 0;
    double v7 = (double)Width;
    while ((unsigned __int128)(v6 * (__int128)Width) >> 64 == (v6 * Width) >> 63)
    {
      v17.origin.y = (double)(v6 * Width);
      v17.origin.x = 0.0;
      v17.size.width = (double)Width;
      v17.size.height = (double)Width;
      if (!CGImageCreateWithImageInRect(a1, v17)) {
        goto LABEL_38;
      }
      MEMORY[0x22A688E10]();
      uint64_t v2 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v2 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v6;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v6 == 6) {
        return v16;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_20;
  }
  uint64_t v2 = (uint64_t)CGImageGetHeight(a1) / 3;
  double v7 = (double)v2;
  v19.origin.x = 0.0;
  v19.origin.y = (double)v2;
  v19.size.width = (double)v2;
  v19.size.height = (double)v2;
  if (!CGImageCreateWithImageInRect(a1, v19))
  {
LABEL_38:
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *uint64_t v13 = 2;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_44;
  }
LABEL_20:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v20.origin.x = (double)(2 * v2);
  v20.origin.y = v7;
  v20.size.width = v7;
  v20.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v20)) {
    goto LABEL_38;
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v21.origin.y = 0.0;
  v21.origin.x = v7;
  v21.size.width = v7;
  v21.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v21)) {
    goto LABEL_38;
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v22.origin.x = v7;
  v22.origin.y = (double)(2 * v2);
  v22.size.width = v7;
  v22.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v22)) {
    goto LABEL_38;
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v23.origin.x = (double)(3 * v2);
  v23.origin.y = v7;
  v23.size.width = v7;
  v23.size.height = v7;
  CGImageRef v10 = CGImageCreateWithImageInRect(a1, v23);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *uint64_t v15 = 2;
    return swift_willThrow();
  }
  CGImageRef v11 = v10;
  v24.origin.x = (double)(3 * v2);
  v24.origin.y = v7;
  v24.size.width = v7;
  v24.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v24)) {
    goto LABEL_40;
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v25.origin.x = v7;
  v25.origin.y = v7;
  v25.size.width = v7;
  v25.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v25))
  {
LABEL_40:
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *__int16 v14 = 2;
    swift_willThrow();

    return swift_bridgeObjectRelease();
  }
  MEMORY[0x22A688E10]();
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return v16;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Semantic and conformance TextureResource.Semantic()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic;
  if (!lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode;
  if (!lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression and conformance TextureResource.Compression()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression);
  }
  return result;
}

uint64_t sub_227E9DA3C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_227E9DA8C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 88);
  return result;
}

uint64_t sub_227E9DAD4(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 88) = v2;
  return result;
}

__n128 sub_227E9DB18@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *a2 = result;
  return result;
}

__n128 sub_227E9DB24(__n128 *a1, uint64_t a2)
{
  __n128 result = *a1;
  *(__n128 *)(a2 + 40) = *a1;
  return result;
}

uint64_t dispatch thunk of TextureLoaderProtocol.loadTexture(name:bundle:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of TextureLoaderProtocol.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t method lookup function for TextureResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextureResource);
}

uint64_t dispatch thunk of TextureResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of TextureResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TextureResource.semantic.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of TextureResource.width.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TextureResource.height.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TextureResource.depth.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of TextureResource.mipmapLevelCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of TextureResource.pixelFormat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of TextureResource.textureType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of TextureResource.arrayLength.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of TextureResource.replace(withImage:options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TextureResource.replaceAsync(withImage:options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TextureResource.copy(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TextureResource.copyAsync(to:completionHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TextureResource.replace(withDrawables:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of TextureResource.drawableQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

unsigned char *storeEnumTagSinglePayload for TextureResource.Semantic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E9DEB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Semantic()
{
  return &type metadata for TextureResource.Semantic;
}

ValueMetadata *type metadata accessor for TextureResource.MipmapsMode()
{
  return &type metadata for TextureResource.MipmapsMode;
}

uint64_t getEnumTagSinglePayload for TextureResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.CreateOptions()
{
  return &type metadata for TextureResource.CreateOptions;
}

uint64_t method lookup function for TextureResource.Drawable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextureResource.Drawable);
}

uint64_t dispatch thunk of TextureResource.Drawable.drawableQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of TextureResource.Drawable.texture.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of TextureResource.Drawable.present()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TextureResource.Drawable.presentOnSceneUpdate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t method lookup function for TextureResource.DrawableQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextureResource.DrawableQueue);
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.pixelFormat.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.width.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.height.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.usage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.mipmapsMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.nextDrawable()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.eyeTransform(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.nextDrawableWithTimeoutAndPollingInterval(timeout:pollingInterval:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureResource.DrawableQueue.Descriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.DrawableQueue.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.DrawableQueue.Descriptor()
{
  return &type metadata for TextureResource.DrawableQueue.Descriptor;
}

uint64_t getEnumTagSinglePayload for TextureResource.Compression(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 65285 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65285 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65285;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65285;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65285;
    }
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 5u) {
    int v6 = 5;
  }
  else {
    int v6 = *((unsigned __int8 *)a1 + 1);
  }
  int v7 = v6 - 6;
  if (*((unsigned __int8 *)a1 + 1) < 4u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65285 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65285 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 251;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E9E470);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression()
{
  return &type metadata for TextureResource.Compression;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.Compression.ASTCBlockSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *__n128 result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E9E574);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.ASTCBlockSize()
{
  return &type metadata for TextureResource.Compression.ASTCBlockSize;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.ASTCQuality()
{
  return &type metadata for TextureResource.Compression.ASTCQuality;
}

uint64_t getEnumTagSinglePayload for TextureResource.Compression.Kind(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 65285;
    if (a2 + 65285 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = *((unsigned __int8 *)a1 + 2);
        if (!*((unsigned char *)a1 + 2)) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65285;
      case 2:
        int v5 = a1[1];
        if (a1[1]) {
          return (*a1 | (v5 << 16)) - 65285;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227E9E678);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65285;
      default:
        break;
    }
  }
  unsigned int v7 = *((unsigned __int8 *)a1 + 1);
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65285;
  if (a3 + 65285 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 251;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x227E9E760);
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)(result + 1) = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for TextureResource.Compression.Kind(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for TextureResource.Compression.Kind(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)__n128 result = a2 - 253;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 1) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.Kind()
{
  return &type metadata for TextureResource.Compression.Kind;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.DrawableQueue.NextDrawableError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E9E86CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for TextureResource.DrawableQueue.NextDrawableError()
{
  return &unk_26DC8F678;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.DrawableQueue.InitError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E9E970);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TextureResource.DrawableQueue.InitError()
{
  return &unk_26DC8F708;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.Compression.ASTCQuality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E9EA74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TextureResource.CopyError()
{
  return &unk_26DC8F798;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextureResource.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
    }
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TextureResource.LoadError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v3 = type metadata accessor for URL();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void *initializeWithCopy for TextureResource.LoadError(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
  }
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for TextureResource.LoadError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TextureResource.LoadError((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of TextureResource.LoadError(uint64_t a1)
{
  uint64_t Error = type metadata accessor for TextureResource.LoadError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Error - 8) + 8))(a1, Error);
  return a1;
}

void *initializeWithTake for TextureResource.LoadError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TextureResource.LoadError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TextureResource.LoadError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for TextureResource.LoadError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in TextureResource.LoadError()
{
  return lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (void (*)(uint64_t))type metadata accessor for TextureResource.LoadError);
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind);
  }
  return result;
}

uint64_t outlined init with copy of TextureResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t Error = type metadata accessor for TextureResource.LoadError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Error - 8) + 16))(a2, a1, Error);
  return a2;
}

uint64_t partial apply for closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1)
{
  return closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1)
{
  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32), *(void *)(v1 + 40), (void (*)(uint64_t, uint64_t))outlined consume of Result<ModelEntity, Error>?);
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void *))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32), *(void *)(v1 + 40), (void (*)(uint64_t, uint64_t))outlined consume of Result<AudioFileResource, Error>?);
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32));
}

void outlined consume of Result<[Entity], Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<[Entity], Error>(a1, a2 & 1, MEMORY[0x263F8EEA0]);
  }
}

void outlined consume of Result<ModelEntity, Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<[Entity], Error>(a1, a2 & 1, MEMORY[0x263F8EED8]);
  }
}

uint64_t partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(a1, a2, (uint64_t (*)(uint64_t, uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

uint64_t sub_227E9F474()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *partial apply for specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void **a1)
{
  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(void (*)(void), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly10RealityKit19EnvironmentResourceCIsegn_SgWOy, (void (*)(void (*)(void), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

{
  uint64_t v1;

  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(void (*)(void), uint64_t))outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?, (void (*)(void (*)(void), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

uint64_t partial apply for specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  long long v4 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v4;
  char v8 = *(unsigned char *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()((uint64_t)v7, v2, v3);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_227E9F5D0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

__n128 partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 72);
  v6[2] = *(_OWORD *)(v1 + 56);
  void v6[3] = v4;
  char v7 = *(unsigned char *)(v1 + 88);
  v6[0] = *(_OWORD *)(v1 + 24);
  v6[1] = v3;
  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, v2, (uint64_t)v6);
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_227E9F694()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t outlined retain of ShaderGraphMaterial(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ShaderGraphMaterial(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

id outlined copy of Result<ShaderGraphMaterial, Error>(id a1, int a2, int a3, int a4, void *a5, int a6, int a7, int a8, char a9, char a10)
{
  if (a10)
  {
    return a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    id v12 = a5;
    swift_retain();
    return (id)swift_bridgeObjectRetain();
  }
}

void outlined consume of Result<ShaderGraphMaterial, Error>?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  if (HIBYTE(a9) <= 0xFEu) {
    outlined consume of Result<ShaderGraphMaterial, Error>(a1, a2, a3, a4, a5, a6, a7, a8, a9, (unsigned __int16)(a9 & 0x1FF) >> 8);
  }
}

void outlined consume of Result<ShaderGraphMaterial, Error>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if (a10)
  {
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError;
  if (!lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError);
  }
  return result;
}

uint64_t sub_227E9F934()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)()
{
  return closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)();
}

uint64_t partial apply for specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t *a1)
{
  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1)
{
  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

{
  uint64_t v1;

  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined assign with copy of Result<Material, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Material, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

id outlined copy of Result<AUAudioUnit, Error>(id a1)
{
  return a1;
}

void outlined consume of Result<AUAudioUnit, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<AUAudioUnit, Error>(a1);
  }
}

void outlined consume of Result<AUAudioUnit, Error>(id a1)
{
}

unint64_t lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError;
  if (!lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError;
  if (!lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError);
  }
  return result;
}

uint64_t sub_227E9FB38()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(_DWORD *)(v2 + 57), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_227E9FBD8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_227E9FC14()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  return doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(Swift::Int_optional *)(v0 + 48), *(_DWORD *)(v0 + 57), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_227E9FCB0()
{
  return objectdestroy_273Tm(MEMORY[0x263F8EEB0]);
}

uint64_t partial apply for closure #2 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 16))(*(void *)(v0 + 32), 1);
}

uint64_t sub_227E9FCFC()
{
  return objectdestroy_276Tm(48);
}

uint64_t partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  return closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, void))(v0 + 32));
}

uint64_t sub_227E9FD10()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)()
{
  return specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_227E9FD70()
{
  return objectdestroy_282Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.copy(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);

  return closure #1 in closure #1 in TextureResource.copy(to:)(a1);
}

uint64_t sub_227E9FDF0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 28) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, char a2)
{
  int v4 = a2 & 1;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 28) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  unsigned int v8 = *(_DWORD *)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(a1, v4, v7, v8, v2 + v6, v9);
}

uint64_t sub_227E9FF84()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_227E9FFC0()
{
  return objectdestroy_282Tm(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
}

uint64_t sub_227E9FFD0()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

uint64_t partial apply for closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  return closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
}

uint64_t sub_227EA0054()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  return closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void (**)(void *, uint64_t))(v0 + 40), *(void *)(v0 + 48), *(void (**)(void *, void *, void))(v0 + 56));
}

uint64_t sub_227EA00A8()
{
  return objectdestroy_276Tm(64);
}

uint64_t objectdestroy_276Tm(uint64_t a1)
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v1, a1, 7);
}

void partial apply for closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *, void, void))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_227EA010C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  outlined consume of Result<[Entity], Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24), MEMORY[0x263F8EEE8]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  uint64_t v1 = *(void **)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  int v3 = *(_DWORD *)(v0 + 25);
  uint64_t v4 = *(void *)(v0 + 32);

  return closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(v1, v2, v3, v4);
}

id outlined copy of Result<[Entity], Error>(id a1, char a2, uint64_t (*a3)(id))
{
  if (a2) {
    return a1;
  }
  else {
    return (id)a3(a1);
  }
}

uint64_t lazy protocol witness table accessor for type TextureResource.LoadError and conformance TextureResource.LoadError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1)
{
  return closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_DWORD *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_227EA0314()
{
  return objectdestroy_282Tm(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
}

uint64_t objectdestroy_282Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  return closure #2 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, v3);
}

uint64_t sub_227EA0424()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  return closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_227EA0484()
{
  return objectdestroy_273Tm(MEMORY[0x263F8EEB0]);
}

uint64_t partial apply for closure #2 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in TextureResource.replaceAsyncInternal(using:options:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(_DWORD *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_227EA0510()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  return closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_227EA056C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227EA057C()
{
  return objectdestroy_273Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_273Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t objectdestroy_332Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  return closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, void))(v0 + 32));
}

uint64_t sub_227EA0640()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(_DWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 36), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(void *a1, void *a2, char a3)
{
  thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(a1, a2, a3 & 1, *(void (**)(void *))(v3 + 16));
}

uint64_t partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  swift_retain();

  return a3(v4, v5);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t objectdestroy_151Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t objectdestroy_210Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t objectdestroy_139Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

id outlined copy of Result<ModelEntity, Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_retain();
  }
}

void outlined consume of Result<[Entity], Error>(id a1, char a2, void (*a3)(id))
{
  if (a2) {

  }
  else {
    a3(a1);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_227EA08E4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(void *a1, char a2)
{
  return closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(_DWORD *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  *a1 = v3;
  a1[1] = v4;
  type metadata accessor for TextureResource.LoadError();
  swift_storeEnumTagMultiPayload();

  return swift_bridgeObjectRetain();
}

uint64_t sub_227EA098C()
{
  outlined consume of Result<[Entity], Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24), MEMORY[0x263F8EEE8]);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)()
{
  closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40), *(void *)(v0 + 48), *(void (**)(void *, uint64_t))(v0 + 56));
}

unsigned char *storeEnumTagSinglePayload for TextureResource.MipmapsMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EA0AD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TextureResource.CubeLayoutError()
{
  return &unk_26DC905C0;
}

void destroy for TextureResource.TextureImportOperationError(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TextureResource.TextureImportOperationError(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TextureResource.TextureImportOperationError(*(void **)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of TextureResource.TextureImportOperationError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of TextureResource.TextureImportOperationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.TextureImportOperationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.TextureImportOperationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TextureResource.TextureImportOperationError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for TextureResource.TextureImportOperationError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

void *type metadata accessor for TextureResource.TextureImportOperationError()
{
  return &unk_26DC90650;
}

uint64_t NSUserDefaults.BOOL(forKey:default:)(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = (void *)MEMORY[0x22A688A50]();
  id v6 = objc_msgSend(v3, sel_objectForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v11)
  {
    if (swift_dynamicCast()) {
      a3 = v8;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return a3 & 1;
}

{
  void *v3;
  void *v5;
  id v6;
  char v8;
  _OWORD v9[2];
  unsigned char v10[24];
  uint64_t v11;

  char v5 = (void *)MEMORY[0x22A688A50]();
  id v6 = objc_msgSend(v3, sel_objectForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    if (swift_dynamicCast()) {
      a3 = v8;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return a3 & 1;
}

void one-time initialization function for protoStereoRenderingEnabled()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  char v1 = NSUserDefaults.BOOL(forKey:default:)(0xD000000000000021, 0x8000000228350430, 0);

  protoStereoRenderingEnabled = v1 & 1;
}

uint64_t RealityRenderer.EntityCollection.init(entity:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_retain();
  if (REComponentClassFromType()) {
    REEntityRemoveComponentByClass();
  }
  uint64_t result = swift_release();
  *a2 = a1;
  return result;
}

uint64_t RealityRenderer.EntityCollection.startIndex.getter()
{
  return 0;
}

uint64_t RealityRenderer.EntityCollection.endIndex.getter()
{
  return REEntityGetChildCount();
}

uint64_t RealityRenderer.EntityCollection.count.getter()
{
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v2 >= result) {
        break;
      }
      if (v1 == ++v2) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t RealityRenderer.EntityCollection.subscript.getter(uint64_t a1)
{
  return Entity.ChildCollection.subscript.getter(a1);
}

Swift::Int __swiftcall RealityRenderer.EntityCollection.index(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Int v1 = after;
    after = REEntityGetChildCount();
    if (after > v1) {
      return v1 + 1;
    }
  }
  __break(1u);
  return after;
}

uint64_t RealityRenderer.EntityCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(a1, a2, a3);
}

uint64_t RealityRenderer.EntityCollection.append<A>(contentsOf:)()
{
  return Entity.ChildCollection.append<A>(contentsOf:)();
}

uint64_t RealityRenderer.EntityCollection.remove(_:)(uint64_t a1)
{
  swift_retain();
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);

  return swift_release();
}

Swift::Void __swiftcall RealityRenderer.EntityCollection.remove(at:)(Swift::Int at)
{
  swift_retain();
  uint64_t v2 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, 0);
  swift_release();

  swift_release();
}

Swift::Void __swiftcall RealityRenderer.EntityCollection.removeAll()()
{
}

uint64_t RealityRenderer.EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Entity.ChildCollection.replaceAll<A>(_:)(a1, a2);
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance RealityRenderer.EntityCollection(uint64_t a1)
{
  swift_retain();
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);

  return swift_release();
}

uint64_t protocol witness for EntityCollection.remove(at:) in conformance RealityRenderer.EntityCollection(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = Entity.ChildCollection.subscript.getter(a1);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, 0);
  swift_release();

  return swift_release();
}

void protocol witness for EntityCollection.removeAll() in conformance RealityRenderer.EntityCollection()
{
}

uint64_t protocol witness for Collection.endIndex.getter in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEntityGetChildCount();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3 = Entity.ChildCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection()
{
  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = REEntityGetChildCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[1] = v4;
  a2[2] = v6;
  *a2 = v5;

  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance RealityRenderer.EntityCollection@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  a1[2] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance RealityRenderer.EntityCollection()
{
  return REEntityGetChildCount() == 0;
}

uint64_t protocol witness for Collection.count.getter in conformance RealityRenderer.EntityCollection()
{
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v2 >= result) {
        break;
      }
      if (v1 == ++v2) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RealityRenderer.EntityCollection(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance RealityRenderer.EntityCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance RealityRenderer.EntityCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance RealityRenderer.EntityCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

int64_t specialized Collection.distance(from:to:)(int64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_49;
  }
  unint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_47;
  }
  uint64_t v10 = a2;
  if (a5 != a2)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    long long v12 = *(_OWORD *)(v6 + 16);
    v23[0] = *(_OWORD *)v6;
    v23[1] = v12;
    uint64_t v24 = *(void *)(v6 + 32);
    outlined init with take of Transform?((uint64_t)v23 + 8, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    uint64_t v11 = 1;
    while (1)
    {
      uint64_t result = outlined init with take of Transform?((uint64_t)v26, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
      int64_t v13 = v27;
      if (!v27)
      {
        outlined init with take of Transform?((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for AnimationLibraryResource?);
        outlined init with take of Transform?((uint64_t)v25, (uint64_t)&v28, &demangling cache variable for type metadata for AnimationLibraryResource?);
        if (v28) {
          uint64_t result = AnimationLibraryResource.keyedResources.getter();
        }
        else {
          uint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        }
        int64_t v13 = result;
      }
      if ((v8 & 0x8000000000000000) != 0 || (uint64_t v14 = 1 << *(unsigned char *)(v13 + 32), (uint64_t)v8 >= v14))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      unint64_t v15 = v8 >> 6;
      int64_t v16 = v13 + 64;
      unint64_t v17 = *(void *)(v13 + 64 + 8 * (v8 >> 6));
      if (((v17 >> v8) & 1) == 0) {
        goto LABEL_43;
      }
      if (*(_DWORD *)(v13 + 36) != v10) {
        goto LABEL_44;
      }
      unint64_t v18 = v17 & (-2 << (v8 & 0x3F));
      if (v18)
      {
        unint64_t v8 = __clz(__rbit64(v18)) | v8 & 0xFFFFFFFFFFFFFFC0;
        outlined retain of [String : String]((uint64_t)v26);
        uint64_t result = swift_bridgeObjectRelease();
        if (v10 != a5) {
          goto LABEL_45;
        }
        goto LABEL_37;
      }
      unint64_t v19 = v15 + 1;
      unint64_t v20 = (unint64_t)(v14 + 63) >> 6;
      if (v15 + 1 >= v20)
      {
        outlined retain of [String : String]((uint64_t)v26);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v14;
      }
      else
      {
        unint64_t v21 = *(void *)(v16 + 8 * v19);
        if (v21) {
          goto LABEL_23;
        }
        unint64_t v19 = v15 + 2;
        if (v15 + 2 >= v20)
        {
          outlined retain of [String : String]((uint64_t)v26);
        }
        else
        {
          unint64_t v21 = *(void *)(v16 + 8 * v19);
          if (v21)
          {
LABEL_23:
            outlined retain of [String : String]((uint64_t)v26);
LABEL_24:
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v8 = __clz(__rbit64(v21)) + (v19 << 6);
            goto LABEL_36;
          }
          unint64_t v19 = v15 + 3;
          if (v15 + 3 < v20)
          {
            unint64_t v21 = *(void *)(v16 + 8 * v19);
            if (v21)
            {
LABEL_33:
              outlined retain of [String : String]((uint64_t)v26);
              outlined consume of [String : AnimationResource].Index._Variant(v8, v10, 0);
              goto LABEL_24;
            }
            while (v20 - 4 != v15)
            {
              unint64_t v21 = *(void *)(v13 + 96 + 8 * v15++);
              if (v21)
              {
                unint64_t v19 = v15 + 3;
                goto LABEL_33;
              }
            }
          }
          outlined retain of [String : String]((uint64_t)v26);
          outlined consume of [String : AnimationResource].Index._Variant(v8, v10, 0);
        }
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v8 = v14;
      }
LABEL_36:
      if (v10 != a5) {
        goto LABEL_45;
      }
LABEL_37:
      if (v8 == a4) {
        return v11;
      }
      uint64_t v10 = a5;
      if (__OFADD__(v11++, 1)) {
        goto LABEL_46;
      }
    }
  }
  outlined consume of [String : AnimationResource].Index._Variant(a4, a2, 0);
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2)
{
  if (a2 < result) {
    goto LABEL_14;
  }
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v2 = a2 - result;
    if (a2 <= result)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (!__OFADD__(v4, 1))
    {
      if (v3 < 0) {
        goto LABEL_12;
      }
      uint64_t result = REEntityGetChildCount();
      if (v3 + v4 >= result) {
        goto LABEL_13;
      }
      if (v2 == ++v4) {
        return v2;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return 0;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityRenderer.EntityCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityRenderer.EntityCollection(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t *)REEntityGetChildCount();
    if (v2 < (uint64_t)result)
    {
      *a2 = v2 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance RealityRenderer.EntityCollection(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    uint64_t result = (uint64_t *)REEntityGetChildCount();
    if (v1 < (uint64_t)result)
    {
      *uint64_t v2 = v1 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance RealityRenderer.EntityCollection(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RealityRenderer.EntityCollection()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t specialized Collection.underestimatedCount.getter()
{
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v2 >= result) {
        break;
      }
      if (v1 == ++v2) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance RealityRenderer.EntityCollection()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RealityRenderer.EntityCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance RealityRenderer.EntityCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance RealityRenderer.EntityCollection()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t RealityRenderer.CameraSettings.isToneMappingEnabled.getter()
{
  return *v0;
}

uint64_t RealityRenderer.CameraSettings.isToneMappingEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*RealityRenderer.CameraSettings.isToneMappingEnabled.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned char *RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

void RealityRenderer.CameraSettings.antialiasing.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *RealityRenderer.CameraSettings.antialiasing.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.modify;
}

id static RealityRenderer.CameraSettings.ColorBackground.color(_:)@<X0>(id a1@<X0>, id *a2@<X8>)
{
  *a2 = a1;
  return a1;
}

void static RealityRenderer.CameraSettings.ColorBackground.outputTexture()(void *a1@<X8>)
{
  *a1 = 0;
}

id RealityRenderer.CameraSettings.colorBackground.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void RealityRenderer.CameraSettings.colorBackground.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;

  *(void *)(v1 + 8) = v2;
}

uint64_t (*RealityRenderer.CameraSettings.colorBackground.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t RealityRenderer.CameraOutput.InitError.errorDescription.getter(char a1)
{
  unint64_t result = 0xD00000000000003BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000003BLL;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000035;
      break;
    case 4:
      unint64_t result = 0xD00000000000003ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.CameraOutput.InitError()
{
  return RealityRenderer.CameraOutput.InitError.errorDescription.getter(*v0);
}

double RealityRenderer.CameraOutput.RelativeViewport.originX.getter()
{
  return *(double *)v0;
}

void RealityRenderer.CameraOutput.RelativeViewport.originX.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.originX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.originY.getter()
{
  return *(double *)(v0 + 8);
}

void RealityRenderer.CameraOutput.RelativeViewport.originY.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.originY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.width.getter()
{
  return *(double *)(v0 + 16);
}

void RealityRenderer.CameraOutput.RelativeViewport.width.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.height.getter()
{
  return *(double *)(v0 + 24);
}

void RealityRenderer.CameraOutput.RelativeViewport.height.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RealityRenderer.CameraOutput.Descriptor.colorTextures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor.colorTextures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor.colorTextures.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RealityRenderer.CameraOutput.Descriptor.viewports.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor.viewports.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor.viewports.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)(a1, (uint64_t)&outlined read-only object #0 of static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:), 0, a2);
}

uint64_t RealityRenderer.CameraOutput.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 32);
  uint64_t v25 = a1[3];
  if ((*a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = (void *)MEMORY[0x22A689930](0, v4);
    goto LABEL_5;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void **)(v4 + 32);
    swift_unknownObjectRetain();
LABEL_5:
    if (one-time initialization token for protoStereoRenderingEnabled == -1) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
  __break(1u);
LABEL_38:
  swift_once();
LABEL_6:
  Swift::Bool v8 = protoStereoRenderingEnabled;
  unsigned __int8 v9 = objc_msgSend(v2, sel_usage);
  if (!v8)
  {
    if ((v9 & 4) != 0)
    {
      uint64_t result = swift_unknownObjectRelease();
      char v10 = v7;
LABEL_20:
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v6;
      *(void *)(a2 + 24) = v25;
      *(unsigned char *)(a2 + 32) = v10;
      return result;
    }
    goto LABEL_22;
  }
  char v10 = v7;
  if ((v7 & 1) == 0)
  {
    if ((v9 & 4) == 0) {
      goto LABEL_22;
    }
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_27:
        if ((v5 & 0xC000000000000001) != 0)
        {
          int64_t v16 = (void *)MEMORY[0x22A689930](0, v5);
        }
        else
        {
          if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_50;
          }
          int64_t v16 = *(void **)(v5 + 32);
          swift_unknownObjectRetain();
        }
        swift_bridgeObjectRelease();
        if ((objc_msgSend(v16, sel_usage) & 4) == 0) {
          goto LABEL_31;
        }
        if (objc_msgSend(v16, sel_arrayLength) != (id)1)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
          swift_allocError();
          char v18 = 3;
          goto LABEL_36;
        }
        swift_unknownObjectRelease();
LABEL_41:
        if (!(v6 >> 62))
        {
          uint64_t v20 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v20) {
            goto LABEL_66;
          }
LABEL_43:
          if ((v6 & 0xC000000000000001) != 0)
          {
            unint64_t v21 = (void *)MEMORY[0x22A689930](0, v6);
          }
          else
          {
            if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_64;
            }
            unint64_t v21 = *(void **)(v6 + 32);
            swift_unknownObjectRetain();
          }
          swift_bridgeObjectRelease();
          if (objc_msgSend(v21, sel_layerCount) != (id)1)
          {
LABEL_60:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
            swift_allocError();
            *uint64_t v24 = 4;
            swift_willThrow();
            swift_unknownObjectRelease();
            return swift_unknownObjectRelease();
          }
          goto LABEL_47;
        }
LABEL_50:
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if ((v9 & 4) == 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
    swift_allocError();
    *uint64_t v14 = 0;
LABEL_23:
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  if (objc_msgSend(v2, sel_arrayLength) != (id)2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
    swift_allocError();
    unsigned char *v19 = 2;
    goto LABEL_23;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_12:
      if ((v5 & 0xC000000000000001) != 0)
      {
        long long v12 = (void *)MEMORY[0x22A689930](0, v5);
LABEL_15:
        swift_bridgeObjectRelease();
        if ((objc_msgSend(v12, sel_usage) & 4) != 0)
        {
          if (objc_msgSend(v12, sel_arrayLength) == (id)2)
          {
            swift_unknownObjectRelease();
            goto LABEL_54;
          }
          goto LABEL_35;
        }
LABEL_31:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
        swift_allocError();
        char v18 = 1;
LABEL_36:
        *unint64_t v17 = v18;
        swift_willThrow();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        long long v12 = *(void **)(v5 + 32);
        swift_unknownObjectRetain();
        goto LABEL_15;
      }
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease();
LABEL_54:
  if (!(v6 >> 62))
  {
    uint64_t v22 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v22) {
      goto LABEL_56;
    }
LABEL_66:
    swift_unknownObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_65:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_66;
  }
LABEL_56:
  if ((v6 & 0xC000000000000001) != 0)
  {
    CGRect v23 = (void *)MEMORY[0x22A689930](0, v6);
LABEL_59:
    swift_bridgeObjectRelease();
    if (objc_msgSend(v23, sel_layerCount) != (id)2) {
      goto LABEL_60;
    }
LABEL_47:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_20;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    CGRect v23 = *(void **)(v6 + 32);
    swift_unknownObjectRetain();
    goto LABEL_59;
  }
  __break(1u);
  return result;
}

BOOL static RealityRenderer.CameraOutput._proto_Layout_v1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RealityRenderer.scene.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t RealityRenderer.entities.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();

  return RealityRenderer.EntityCollection.init(entity:)(v2, a1);
}

uint64_t RealityRenderer.entities.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 16);
  uint64_t result = swift_release();
  if (v2 != v3) {
    __break(1u);
  }
  return result;
}

uint64_t (*RealityRenderer.entities.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 24);
  a1[1] = v3;
  swift_retain_n();
  if (REComponentClassFromType()) {
    REEntityRemoveComponentByClass();
  }
  swift_release();
  *a1 = v3;
  return RealityRenderer.entities.modify;
}

uint64_t RealityRenderer.entities.modify(void *a1, char a2)
{
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v4 = *(void *)(a1[1] + 16);
  uint64_t result = swift_release();
  if (a2)
  {
    if (v3 == v4) {
      return result;
    }
    __break(1u);
  }
  if (v3 != v4) {
    __break(1u);
  }
  return result;
}

uint64_t RealityRenderer.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, ValueMetadata *a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  if (*(void *)(v8 + 16))
  {
    swift_retain();
    Scene.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7, v19);
    swift_release();
    outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
    EventSubscription.init(_:)((uint64_t)v18, a8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RealityRenderer.ImageBasedLight.resource.getter()
{
  return swift_retain();
}

uint64_t RealityRenderer.ImageBasedLight.resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*RealityRenderer.ImageBasedLight.resource.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float RealityRenderer.ImageBasedLight.intensityExponent.getter()
{
  return *(float *)(v0 + 8);
}

void RealityRenderer.ImageBasedLight.intensityExponent.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*RealityRenderer.ImageBasedLight.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path setter for RealityRenderer.lighting : RealityRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 32) = v2;
  *(_DWORD *)(v4 + 40) = v3;
  swift_retain();
  swift_release();
  return RealityRenderer.updateIBL()();
}

uint64_t RealityRenderer.lighting.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  int v3 = *(_DWORD *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v3;
  return swift_retain();
}

uint64_t RealityRenderer.lighting.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  swift_beginAccess();
  *(void *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  swift_release();
  return RealityRenderer.updateIBL()();
}

uint64_t (*RealityRenderer.lighting.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return RealityRenderer.lighting.modify;
}

uint64_t RealityRenderer.lighting.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return RealityRenderer.updateIBL()();
  }
  return result;
}

uint64_t key path setter for RealityRenderer.activeCamera : RealityRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  swift_retain();
  return swift_release();
}

uint64_t RealityRenderer.activeCamera.getter()
{
  return swift_retain();
}

uint64_t RealityRenderer.activeCamera.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*RealityRenderer.activeCamera.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

id key path getter for RealityRenderer.cameraSettings : RealityRenderer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 57);
  unint64_t v5 = *(void **)(v3 + 64);
  *(unsigned char *)a2 = *(unsigned char *)(v3 + 56);
  *(unsigned char *)(a2 + 1) = v4;
  *(void *)(a2 + 8) = v5;

  return v5;
}

void key path setter for RealityRenderer.cameraSettings : RealityRenderer(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  char v3 = a1[1];
  char v4 = (void *)*((void *)a1 + 1);
  uint64_t v5 = *a2;
  swift_beginAccess();
  unint64_t v6 = *(void **)(v5 + 64);
  *(unsigned char *)(v5 + 56) = v2;
  *(unsigned char *)(v5 + 57) = v3;
  *(void *)(v5 + 64) = v4;
  id v7 = v4;
}

id RealityRenderer.cameraSettings.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 57);
  char v4 = *(void **)(v1 + 64);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 56);
  *(unsigned char *)(a1 + 1) = v3;
  *(void *)(a1 + 8) = v4;

  return v4;
}

void RealityRenderer.cameraSettings.setter(char *a1)
{
  char v2 = *a1;
  char v3 = a1[1];
  uint64_t v4 = *((void *)a1 + 1);
  swift_beginAccess();
  uint64_t v5 = *(void **)(v1 + 64);
  *(unsigned char *)(v1 + 56) = v2;
  *(unsigned char *)(v1 + 57) = v3;
  *(void *)(v1 + 64) = v4;
}

uint64_t (*RealityRenderer.cameraSettings.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t RealityRenderer.MetalEventAction.event.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RealityRenderer.MetalEventAction.value.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t static RealityRenderer.MetalEventAction.wait(for:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_unknownObjectRetain();
}

float closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 1.0;
  }
  uint64_t v1 = Strong;
  swift_beginAccess();
  float v2 = *(float *)(v1 + 76);
  swift_release();
  return v2;
}

float thunk for @escaping @callee_guaranteed () -> (@unowned Float)(uint64_t a1)
{
  uint64_t v1 = *(float (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  float v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t RealityRenderer.extendedDynamicRangeOutput.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

void RealityRenderer.extendedDynamicRangeOutput.setter(char a1)
{
  int v3 = a1 & 1;
  swift_beginAccess();
  int v4 = *(unsigned __int8 *)(v1 + 72);
  *(unsigned char *)(v1 + 72) = a1;
  if (v4 != v3)
  {
    uint64_t v5 = *(void *)(v1 + 16);
    if (a1)
    {
      if (v5)
      {
        RESceneAddEDRColorManagementComponent();
        uint64_t v6 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = partial apply for closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset;
        aBlock[5] = v6;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned Float);
        aBlock[3] = &block_descriptor_2;
        id v7 = _Block_copy(aBlock);
        swift_release();
        REEDRColorManagementComponentSetHeadroomCallback();
        _Block_release(v7);
        return;
      }
      __break(1u);
      goto LABEL_9;
    }
    if (!v5)
    {
LABEL_9:
      __break(1u);
      return;
    }
    RESceneRemoveEDRColorManagementComponent();
  }
}

void (*RealityRenderer.extendedDynamicRangeOutput.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v1 + 72);
  return RealityRenderer.extendedDynamicRangeOutput.modify;
}

void RealityRenderer.extendedDynamicRangeOutput.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  RealityRenderer.extendedDynamicRangeOutput.setter(*(unsigned char *)(*(void *)a1 + 32));

  free(v1);
}

float RealityRenderer.extendedDynamicRangeHeadroom.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 76);
}

uint64_t RealityRenderer.extendedDynamicRangeHeadroom.setter(float a1)
{
  int v3 = (float *)(v1 + 76);
  uint64_t result = swift_beginAccess();
  if (a1 < 1.0 || a1 > 16.0) {
    a1 = *v3;
  }
  *int v3 = a1;
  return result;
}

void (*RealityRenderer.extendedDynamicRangeHeadroom.modify(void *a1))(uint64_t *a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v1 + 76);
  return RealityRenderer.extendedDynamicRangeHeadroom.modify;
}

void RealityRenderer.extendedDynamicRangeHeadroom.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  float v2 = *(float *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 24);
  if (v2 < 1.0 || v2 > 16.0) {
    float v2 = *(float *)(v3 + 76);
  }
  *(float *)(v3 + 76) = v2;
  free((void *)v1);
}

dispatch_semaphore_t one-time initialization function for uniqueTokenGenerator()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  static RealityRenderer.uniqueTokenGenerator = 0;
  qword_2681BE570 = (uint64_t)result;
  return result;
}

{
  dispatch_semaphore_t result;

  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  static VideoPlayerComponent.uniqueTokenGenerator = 0;
  qword_2681C5BE0 = (uint64_t)result;
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.InitError()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD00000000000003BLL;
  }
}

uint64_t RealityRenderer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  RealityRenderer.init()();
  return v0;
}

uint64_t RealityRenderer.init()()
{
  uint64_t v1 = v0;
  *(_OWORD *)(v0 + 96) = 0u;
  float v2 = (uint64_t *)(v0 + 96);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 76) = 0x40000000;
  *(_OWORD *)(v0 + 144) = 0u;
  uint64_t v58 = v0 + 144;
  *(void *)(v0 + 200) = 0;
  *(_OWORD *)(v0 + 216) = 0u;
  uint64_t v3 = v0 + 216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(unsigned char *)(v0 + 328) = 0;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 368) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 376) = v4;
  *(unsigned char *)(v0 + 384) = 0;
  CGColorRef GenericRGB = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  *(_WORD *)(v0 + 56) = 257;
  *(void *)(v0 + 64) = GenericRGB;
  CGColorRef v6 = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  *(unsigned char *)(v0 + 392) = 0;
  *(void *)(v0 + 400) = v6;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  swift_unownedRetainStrong();
  uint64_t v9 = *(void *)(v8 + 24);
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(v7 + 24);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 40);
  swift_retain();
  uint64_t result = swift_release();
  if (!v11)
  {
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v66 = v2 + 1;
  uint64_t v59 = (uint64_t)(v2 + 20);
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11 + 80, (uint64_t)&v63);
  swift_release();
  uint64_t v13 = *((void *)&v64 + 1);
  uint64_t v14 = v65;
  __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v14 + 32))(&v60, v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  MEMORY[0x22A68E290](v9);
  uint64_t OverlayForRealityRenderer = REEngineCreateOverlayForRealityRenderer();
  if (!OverlayForRealityRenderer)
  {
LABEL_24:
    char v17 = 1;
    goto LABEL_25;
  }
  uint64_t v16 = OverlayForRealityRenderer;
  if (REEngineOverlayIsEngineInsideTick())
  {
    RERelease();
    char v17 = 0;
LABEL_25:
    lazy protocol witness table accessor for type RealityRenderer.InitError and conformance RealityRenderer.InitError();
    swift_allocError();
    char *v35 = v17;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Material?);
    outlined destroy of BodyTrackingComponent?(v58, (uint64_t *)&demangling cache variable for type metadata for Material?);
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Cancellable?);
    outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for Cancellable?);
    uint64_t v36 = *(void *)(v1 + 336);
    uint64_t v37 = *(void *)(v1 + 352);
    outlined consume of RealityRenderer.CameraOutput?(*(void *)(v1 + 296));
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v36);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    type metadata accessor for RealityRenderer();
    swift_deallocPartialClassInstance();
    return v1;
  }
  *(void *)(v1 + 80) = v16;
  uint64_t RealityRendererSceneGroup = REECSManagerCreateRealityRendererSceneGroup();
  if (!RealityRendererSceneGroup)
  {
LABEL_23:
    RERelease();
    goto LABEL_24;
  }
  uint64_t v56 = v3;
  *(void *)(v1 + 88) = RealityRendererSceneGroup;
  REEngineOverlaySetRealityRendererSceneGroup();
  if (one-time initialization token for uniqueTokenGenerator != -1) {
    swift_once();
  }
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  uint64_t v3 = static RealityRenderer.uniqueTokenGenerator + 1;
  if (!__OFADD__(static RealityRenderer.uniqueTokenGenerator, 1))
  {
    ++static RealityRenderer.uniqueTokenGenerator;
    OS_dispatch_semaphore.signal()();
    swift_endAccess();
    *(void *)&long long v63 = 0;
    *((void *)&v63 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(void *)&long long v63 = 0xD000000000000016;
    *((void *)&v63 + 1) = 0x800000022834FCD0;
    *(void *)&long long v60 = v3;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = RESceneCreate();
    swift_release();
    type metadata accessor for Scene();
    swift_allocObject();
    unint64_t v21 = (void *)Scene.init(coreScene:)(v20);
    swift_retain();
    RERelease();
    MEMORY[0x22A692120](v20, 1);
    Scene.addDefaultCamera()();
    if (!v21[12])
    {
      type metadata accessor for Entity();
      swift_allocObject();
      uint64_t v22 = Entity.init()();
      REEntitySetName();
      RENetworkMarkEntityMetadataDirty();
      Entity.turnIntoNinja()();
      REAudioMixerComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RESceneAddEntity();
      v21[12] = v22;
      swift_release();
    }
    swift_beginAccess();
    v21[9] = 0;
    swift_release();
    uint64_t active = v21[9];
    if (!active) {
      uint64_t active = Scene.internalActiveCamera.getter();
    }
    uint64_t v24 = v21[10];
    v21[10] = active;
    swift_retain();
    swift_retain();
    Scene.internalAudioListener.didset(v24);
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v1 + 16) = v21;
    swift_release();
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    uint64_t result = Entity.init()();
    *(void *)(v1 + 24) = result;
    uint64_t v25 = *(void *)(v1 + 16);
    if (v25)
    {
      uint64_t v26 = result;
      swift_retain();
      swift_retain();
      specialized Scene.AnchorCollection.append(_:)(v26, v25);
      swift_release();
      uint64_t result = swift_release();
      if (*(void *)(v1 + 16))
      {
        RESceneSetRealityRendererSceneGroup();
        swift_beginAccess();
        outlined init with copy of __REAssetService(v7 + 80, (uint64_t)&v63);
        uint64_t v27 = *((void *)&v64 + 1);
        uint64_t v28 = v65;
        uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
        if (*(void *)(v1 + 16))
        {
          uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
          uint64_t v30 = swift_retain();
          v29(v30, v27, v28);
          swift_release();
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
          uint64_t v31 = *(void *)(v1 + 16);
          if (v31)
          {
            *(void *)&long long v63 = *(void *)(v1 + 16);
            uint64_t result = swift_beginAccess();
            if (*(void *)(v31 + 88))
            {
              swift_retain();
              swift_retain();
              Scene.AnchorCollection.removeNinja(_:)();
              swift_release();
              swift_release();
              uint64_t v32 = *(void *)(v7 + 24);
              swift_unownedRetainStrong();
              swift_beginAccess();
              uint64_t v33 = *(void *)(v32 + 40);
              swift_retain();
              uint64_t result = swift_release();
              if (v33)
              {
                swift_beginAccess();
                outlined init with copy of __REAssetService(v33 + 120, (uint64_t)&v63);
                swift_release();
                uint64_t v3 = *((void *)&v64 + 1);
                uint64_t v34 = v65;
                __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
                (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v3, v34);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
                if (one-time initialization token for protoStereoRenderingEnabled == -1) {
                  goto LABEL_20;
                }
                goto LABEL_47;
              }
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  __break(1u);
LABEL_47:
  swift_once();
LABEL_20:
  if (protoStereoRenderingEnabled)
  {
    uint64_t result = REAssetManagerCreateAssetHandle();
    if (!result)
    {
      __break(1u);
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t result = REAssetManagerCreateAssetHandle();
    if (!result)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
  }
  *(void *)(v1 + 208) = result;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v38 = specialized static RealityFusionSession.createRealityFusionSession(arSession:)((uint64_t)&v63);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for __AnyARKitObject?);
  *(void *)(v1 + 184) = v38;
  swift_release();
  *(void *)(v1 + 192) = REEntityCreate();
  REEntitySetName();
  REAnchorComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REAnchorComponentSetAnchoredLocally();
  RESceneUnderstandingRootComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneUnderstandingRenderOptionsComponentGetComponentType();
  uint64_t result = REEntityGetOrAddComponentByClass();
  if (!*(void *)(v1 + 16))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  RESceneAddEntity();
  REHideEntity();
  type metadata accessor for __MaterialResource();
  uint64_t v39 = specialized static __MaterialResource.createAssetRef(named:in:)(0xD00000000000004ELL, 0x800000022834FD70, 0);
  if (v57)
  {
LABEL_35:
    swift_release();
    swift_release();
    return v1;
  }
  uint64_t v40 = v39;
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v45 = 0xD00000000000004ELL;
    *(void *)(v45 + 8) = 0x800000022834FD70;
LABEL_32:
    *(void *)(v45 + 16) = v42;
    *(void *)(v45 + 24) = v44;
    *(unsigned char *)(v45 + 32) = 1;
    swift_willThrow();
    RERelease();
    goto LABEL_35;
  }
  uint64_t v46 = (void *)REMaterialParameterBlockValueCreate();
  uint64_t v47 = MEMORY[0x263F8EE78];
  *(void *)&long long v60 = MEMORY[0x263F8EE78];
  BYTE8(v60) = 0;
  *(void *)&long long v61 = 0;
  *((void *)&v61 + 1) = v46;
  static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v40, (uint64_t *)&v60, 0, 0, 255, (uint64_t *)&v63);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  RERelease();
  uint64_t v48 = (uint64_t)v66;
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)&v63, v48, (uint64_t *)&demangling cache variable for type metadata for Material?);
  swift_endAccess();
  if (protoStereoRenderingEnabled)
  {
    uint64_t v49 = specialized static __MaterialResource.createAssetRef(named:in:)(0xD000000000000054, 0x800000022834FDE0, 0);
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      uint64_t v50 = (void *)REAssetHandleCopyLoadFailedMessage();
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v51;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v45 = 0xD000000000000054;
      *(void *)(v45 + 8) = 0x800000022834FDE0;
      goto LABEL_32;
    }
    uint64_t v52 = (void *)REMaterialParameterBlockValueCreate();
    *(void *)&long long v60 = v47;
    BYTE8(v60) = 0;
    *(void *)&long long v61 = 0;
    *((void *)&v61 + 1) = v52;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v49, (uint64_t *)&v60, 0, 0, 255, (uint64_t *)&v63);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)&v63, v58, (uint64_t *)&demangling cache variable for type metadata for Material?);
    swift_endAccess();
  }
  type metadata accessor for Entity();
  swift_allocObject();
  *float v2 = Entity.init()();
  uint64_t result = swift_release();
  if (!*v2) {
    goto LABEL_57;
  }
  swift_retain();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  uint64_t result = swift_release();
  if (!*v2)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  swift_retain();
  Entity.turnIntoNinja()();
  uint64_t result = swift_release();
  if (!*(void *)(v1 + 16))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  *(void *)&long long v63 = *(void *)(v1 + 16);
  if (!*v2)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  swift_retain();
  uint64_t v53 = swift_retain();
  Scene.AnchorCollection.appendNinja(_:)(v53);
  swift_release();
  swift_release();
  uint64_t result = RealityRenderer.updateIBL()();
  if (!*(void *)(v1 + 16))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v62 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v54 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v60, (uint64_t)partial apply for closure #2 in RealityRenderer.init(), v54, (uint64_t *)&v63);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)&v60, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)&v63, v56, &demangling cache variable for type metadata for Cancellable?);
  uint64_t result = swift_endAccess();
  if (*(void *)(v1 + 16))
  {
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v55 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v60, (uint64_t)partial apply for closure #3 in RealityRenderer.init(), v55, (uint64_t *)&v63);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)&v63, v59, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    return v1;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t closure #2 in RealityRenderer.init()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    RealityRenderer.doUpdateCallback(deltaTime:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in RealityRenderer.init()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    RealityRenderer.doRenderCallback()();
    return swift_release();
  }
  return result;
}

uint64_t RealityRenderer.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t result = outlined init with copy of (Int, URL)(v2 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
  if (!v22) {
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v21, (uint64_t)aBlock);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  uint64_t v4 = v21;
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v0 + 72) != 1)
  {
LABEL_5:
    uint64_t v5 = *(void *)(v0 + 200);
    if (!v5) {
      goto LABEL_9;
    }
    uint64_t v6 = one-time initialization token for dispatchQueue;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v7 = static __RERenderGraphEmitter.dispatchQueue;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v4;
    *(void *)(v8 + 24) = v5;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:);
    *(void *)(v9 + 24) = v8;
    Swift::String v19 = _sIg_Ieg_TRTA_0;
    uint64_t v20 = v9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    char v18 = &block_descriptor_14;
    uint64_t v10 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v7, v10);
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if ((v7 & 1) == 0)
    {
LABEL_9:
      *(void *)(v1 + 200) = 0;
      swift_release();
      swift_beginAccess();
      if (*(void *)(v1 + 240))
      {
        outlined init with copy of __REAssetService(v1 + 216, (uint64_t)aBlock);
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
        dispatch thunk of Cancellable.cancel()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      }
      swift_beginAccess();
      if (*(void *)(v1 + 280))
      {
        outlined init with copy of __REAssetService(v1 + 256, (uint64_t)aBlock);
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
        dispatch thunk of Cancellable.cancel()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      }
      RealityRenderer.deinitRealityFusion()();
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2 + 80, (uint64_t)aBlock);
      uint64_t v11 = v18;
      long long v12 = v19;
      uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
      if (*(void *)(v1 + 16))
      {
        uint64_t v13 = (void (*)(uint64_t, void *, uint64_t (*)()))*((void *)v12 + 3);
        uint64_t v14 = swift_retain();
        v13(v14, v11, v12);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        RERelease();
        RERelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        outlined destroy of BodyTrackingComponent?(v1 + 104, (uint64_t *)&demangling cache variable for type metadata for Material?);
        outlined destroy of BodyTrackingComponent?(v1 + 144, (uint64_t *)&demangling cache variable for type metadata for Material?);
        swift_release();
        swift_release();
        outlined destroy of BodyTrackingComponent?(v1 + 216, &demangling cache variable for type metadata for Cancellable?);
        outlined destroy of BodyTrackingComponent?(v1 + 256, &demangling cache variable for type metadata for Cancellable?);
        uint64_t v15 = *(void *)(v1 + 336);
        uint64_t v16 = *(void *)(v1 + 352);
        outlined consume of RealityRenderer.CameraOutput?(*(void *)(v1 + 296));
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v1;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(v0 + 16))
  {
    RESceneRemoveEDRColorManagementComponent();
    goto LABEL_5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t RealityRenderer.__deallocating_deinit()
{
  RealityRenderer.deinit();

  return swift_deallocClassInstance();
}

uint64_t RealityRenderer.updateIBL()()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 96);
  if (v2)
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else if (v3)
  {
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0);
    return swift_release();
  }
  __break(1u);
  return result;
}

void RealityRenderer.deinitRealityFusion()()
{
  uint64_t v1 = *(void *)(v0 + 184);
  if (v1)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 24);
    BOOL v3 = __OFSUB__(v2, 1);
    uint64_t v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v1 + 24) = v4;
      if (!v4)
      {
        swift_beginAccess();
        uint64_t v5 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v5[2]))
        {
          swift_retain();
          id v6 = (id)RFServiceManagerGetAnchorManagementService();
          if (v6)
          {
            uint64_t v7 = v6;
            specialized static __ServiceLocator.shared.getter();
            swift_beginAccess();
            RFAnchorManagementServiceCleanupWithServiceLocator();
          }
        }
        else
        {
          swift_retain();
        }
        RFServiceManagerCleanUp();
        static RealityFusionSession.sharedSession = 0;
        swift_release();
        swift_release();
      }
    }
  }
}

void RealityRenderer.updateRealityFusion(deltaTime:)()
{
  uint64_t v1 = *(void *)(v0 + 184);
  if (!v1 || (swift_beginAccess(), (uint64_t v2 = *(void **)(v1 + 16)) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  id v3 = v2;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!REServiceLocatorGetECSService())
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  RFServiceManagerGenerateSnapshot();
  id v4 = (id)RFServiceManagerGetAnchorManagementService();
  if (!v4)
  {
LABEL_7:

    return;
  }
  if (*(void *)(v0 + 16))
  {
    uint64_t v5 = v4;
    RFAnchorManagementServiceUpdateByDeltaTime();

    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
}

void RealityRenderer.doUpdateCallback(deltaTime:)()
{
  uint64_t v3 = v0;
  uint64_t v47 = *MEMORY[0x263EF8340];
  RealityRenderer.updateRealityFusion(deltaTime:)();
  if (*(unsigned char *)(v0 + 384) == 1)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v0 + 48);
    if (!v4)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v5 = *(void *)(v0 + 296);
    if (!v5)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    unint64_t v6 = *(void *)(v3 + 304);
    unint64_t v1 = *(void *)(v3 + 312);
    uint64_t v2 = *(void *)(v3 + 320);
    char v7 = *(unsigned char *)(v3 + 328);
    uint64_t v41 = v4;
    swift_retain();
    outlined copy of RealityRenderer.CameraOutput?(v5);
    RECameraViewDescriptorsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RECameraViewDescriptorsComponentClearCameraViewDescriptors();
    RECameraViewDescriptorsComponentAddViewDescriptor();
    unint64_t v8 = v5 & 0xC000000000000001;
    if ((v5 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      MEMORY[0x22A689930](0, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_17:
        swift_once();
LABEL_8:
        if (!protoStereoRenderingEnabled) {
          goto LABEL_27;
        }
        *(void *)&long long v40 = v5 & 0xC000000000000001;
        if (v6 >> 62)
        {
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter()) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v9)
          {
LABEL_11:
            if ((v6 & 0xC000000000000001) != 0)
            {
              MEMORY[0x22A689930](0, v6);
            }
            else
            {
              if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
              swift_unknownObjectRetain();
            }
            swift_bridgeObjectRelease();
            RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture();
            swift_unknownObjectRelease();
LABEL_20:
            unint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8;
            if (v1 >> 62) {
              goto LABEL_44;
            }
            uint64_t v10 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v10) {
              goto LABEL_45;
            }
LABEL_22:
            if ((v1 & 0xC000000000000001) != 0)
            {
              MEMORY[0x22A689930](0, v1);
              goto LABEL_25;
            }
            if (*(void *)(v8 + 16))
            {
              swift_unknownObjectRetain();
LABEL_25:
              unint64_t v8 = v40;
              swift_bridgeObjectRelease();
              RECameraViewDescriptorsComponentSetRasterizationRateMap();
              swift_unknownObjectRelease();
              if ((v7 & 1) == 0) {
                goto LABEL_27;
              }
LABEL_26:
              RECameraViewDescriptorsComponentSetViewMode();
LABEL_27:
              while (!*(void *)(v2 + 16))
              {
                __break(1u);
LABEL_44:
                swift_bridgeObjectRetain();
                if (_CocoaArrayWrapper.endIndex.getter()) {
                  goto LABEL_22;
                }
LABEL_45:
                swift_bridgeObjectRelease();
                unint64_t v8 = v40;
                if (v7) {
                  goto LABEL_26;
                }
              }
              RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport();
              if (protoStereoRenderingEnabled)
              {
                uint64_t v11 = swift_bridgeObjectRetain();
                outlined consume of RealityRenderer.CameraOutput?(v11);
                if (v8)
                {
                  long long v12 = (void *)MEMORY[0x22A689930](0, v5);
                }
                else
                {
                  long long v12 = *(void **)(v5 + 32);
                  swift_unknownObjectRetain();
                }
                swift_bridgeObjectRelease();
                uint64_t v13 = (uint64_t)objc_msgSend(v12, sel_arrayLength);
                swift_unknownObjectRelease();
                if (v13 >= 2) {
                  RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport();
                }
              }
              else
              {
                outlined consume of RealityRenderer.CameraOutput?(v5);
              }
              uint64_t v14 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
              RERenderGraphDataStructAddFloat4();
              uint64_t v2 = v3 + 56;
              swift_beginAccess();
              MEMORY[0x22A691930](v14, "disableAA", (*(unsigned char *)(v3 + 57) & 1) == 0);
              swift_beginAccess();
              outlined init with copy of (Int, URL)(v3 + 104, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
              unint64_t v1 = v45;
              if (v45)
              {
                uint64_t v15 = v46;
                uint64_t v16 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                uint64_t v17 = *(void *)(v1 - 8);
                __n128 v18 = MEMORY[0x270FA5388](v16);
                uint64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v17 + 16))(v20, v18);
                outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v1, v15);
                (*(void (**)(char *, unint64_t))(v17 + 8))(v20, v1);
                swift_beginAccess();
                swift_release();
                long long v21 = *(void **)(v3 + 64);
                if (v21)
                {
                  unint64_t v1 = v21;
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  char v43 = 0;
                  long long v44 = 0uLL;
                  RECGColorToColorGamut();
                  uint64_t v22 = 0;
                  long long v23 = v44;
LABEL_55:
                  while (1)
                  {
                    long long v42 = v23;
                    float v31 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
                    BOOL v24 = v31 == 0.0;
                    if (v22 == 3) {
                      break;
                    }
                    while (1)
                    {
                      ++v22;
                      if (v24) {
                        break;
                      }
                      if (v22 == 3) {
                        goto LABEL_61;
                      }
                      BOOL v24 = 0;
                    }
                  }
                  if (v31 == 0.0 && *(unsigned char *)v2 == 1)
                  {
                    RERenderGraphAssetSetRuntimeNodeSettingBool();
                  }
                  else
                  {
LABEL_61:
                    long long v40 = v23;
                    RERenderGraphAssetSetRuntimeNodeSettingBool();
                    REMaterialAssetSetColor4F();
                    REMaterialAssetSetBool();
                    if (protoStereoRenderingEnabled)
                    {
                      swift_beginAccess();
                      outlined init with copy of (Int, URL)(v3 + 144, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                      uint64_t v32 = v45;
                      if (!v45)
                      {
                        outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                        __break(1u);
                        return;
                      }
                      uint64_t v33 = v46;
                      uint64_t v34 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                      v39[1] = v39;
                      uint64_t v35 = *(void *)(v32 - 8);
                      __n128 v36 = MEMORY[0x270FA5388](v34);
                      uint64_t v38 = (char *)v39 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
                      (*(void (**)(char *, __n128))(v35 + 16))(v38, v36);
                      outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
                      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v32);
                      swift_beginAccess();
                      swift_release();
                      REMaterialAssetSetColor4F();
                      REMaterialAssetSetBool();
                    }
                  }

                  goto LABEL_65;
                }
                RERenderGraphAssetSetRuntimeNodeSettingBool();
                RERenderGraphAssetSetRuntimeNodeSettingBool();
                REMaterialAssetSetBool();
                if (!protoStereoRenderingEnabled)
                {
LABEL_65:
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeStringSetting();
                  RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
                  RERelease();
                  RECameraViewDescriptorsComponentSetForceWaitOnPipelineCompilation();
                  swift_release();
                  return;
                }
                swift_beginAccess();
                outlined init with copy of (Int, URL)(v3 + 144, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                unint64_t v1 = v45;
                if (v45)
                {
                  uint64_t v25 = v46;
                  uint64_t v26 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                  uint64_t v27 = *(void *)(v1 - 8);
                  __n128 v28 = MEMORY[0x270FA5388](v26);
                  uint64_t v30 = (char *)v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
                  (*(void (**)(char *, __n128))(v27 + 16))(v30, v28);
                  outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                  (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v1, v25);
                  (*(void (**)(char *, unint64_t))(v27 + 8))(v30, v1);
                  swift_beginAccess();
                  swift_release();
                  REMaterialAssetSetBool();
                  goto LABEL_65;
                }
LABEL_54:
                outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                __break(1u);
                goto LABEL_55;
              }
LABEL_53:
              outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
              __break(1u);
              goto LABEL_54;
            }
            goto LABEL_50;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_unknownObjectRetain();
    }
    RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture();
    swift_unknownObjectRelease();
    if (one-time initialization token for protoStereoRenderingEnabled == -1) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
}

void RealityRenderer.doRenderCallback()()
{
  if (*(unsigned char *)(v0 + 384) == 1)
  {
    uint64_t v1 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v1 + 40, (uint64_t)&v29, &demangling cache variable for type metadata for __RenderService?);
    if (v30)
    {
      outlined init with take of BindableDataInternal(&v29, (uint64_t)&aBlock);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
      type metadata accessor for RERenderManager();
      swift_dynamicCast();
      uint64_t RenderFrameSettings = RERenderManagerCreateRenderFrameSettings();
      uint64_t v3 = *(void *)(v0 + 368);
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = v3 + 40;
        do
        {
          RERenderFrameSettingsAddGpuWaitEvent();
          v5 += 16;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
      }
      uint64_t v6 = *(void *)(v0 + 376);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v8 = v6 + 40;
        do
        {
          RERenderFrameSettingsAddGpuSignalEvent();
          v8 += 16;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
      }
      REEngineOverlayGetCurrentTime();
      RERenderFrameSettingsSetTotalTime();
      uint64_t RenderFrameWorkload = RERenderManagerCreateRenderFrameWorkload();
      type metadata accessor for RERenderFrameWorkload();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = RenderFrameWorkload;
      MEMORY[0x22A691900](RenderFrameWorkload, RenderFrameSettings);
      uint64_t v11 = *(void *)(v0 + 352);
      if (v11)
      {
        uint64_t v12 = *(void *)(v0 + 360);
        uint64_t v13 = swift_allocObject();
        swift_weakInit();
        uint64_t v14 = (void *)swift_allocObject();
        v14[2] = v13;
        uint64_t v14[3] = v11;
        v14[4] = v12;
        uint64_t v15 = (void *)swift_allocObject();
        v15[2] = partial apply for closure #1 in RealityRenderer.doRenderCallback();
        void v15[3] = v14;
        v15[4] = v10;
        uint64_t v27 = partial apply for closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:);
        __n128 v28 = v15;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v24 = 1107296256;
        uint64_t v25 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ();
        uint64_t v26 = &block_descriptor_147;
        uint64_t v16 = _Block_copy(&aBlock);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_release();
        RERenderFrameWorkloadAddCompletedHandler();
        _Block_release(v16);
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
      }
      uint64_t v17 = *(void *)(v0 + 336);
      if (v17)
      {
        uint64_t v18 = *(void *)(v0 + 344);
        uint64_t v19 = swift_allocObject();
        swift_weakInit();
        uint64_t v20 = (void *)swift_allocObject();
        v20[2] = v19;
        v20[3] = v17;
        v20[4] = v18;
        long long v21 = (void *)swift_allocObject();
        void v21[2] = partial apply for closure #2 in RealityRenderer.doRenderCallback();
        v21[3] = v20;
        v21[4] = v10;
        uint64_t v27 = partial apply for closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:);
        __n128 v28 = v21;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v24 = 1107296256;
        uint64_t v25 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ();
        uint64_t v26 = &block_descriptor_137;
        uint64_t v22 = _Block_copy(&aBlock);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v17);
        swift_retain();
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v17);
        swift_retain();
        swift_retain();
        swift_release();
        RERenderFrameWorkloadAddScheduledHandler();
        _Block_release(v22);
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v17);
      }
      if (*(void *)(v0 + 200))
      {
        RERenderGraphEmitterAssetExecute();
        RERenderFrameWorkloadCommit();
        swift_release();
        RERelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t closure #1 in RealityRenderer.doRenderCallback()(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3();
    return swift_release();
  }
  return result;
}

void RealityRenderer.lazyInitEmitter()()
{
  if (*(void *)(v0 + 200)) {
    return;
  }
  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter();
  type metadata accessor for __RERenderGraphEmitter();
  swift_retain();
  *(void *)(v0 + 200) = static __RERenderGraphEmitter.firstUsedEmitter()();
  swift_release();
  if (!*(void *)(v0 + 200))
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v2 + 120, (uint64_t)aBlock);
    uint64_t v3 = v17;
    uint64_t v4 = v18;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v17);
    (*((void (**)(void *, uint64_t (*)()))v4 + 4))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    if (!AssetHandle)
    {
LABEL_14:
      __break(1u);
      return;
    }
    uint64_t v17 = (void *)MEMORY[0x263F8DD08];
    aBlock[0] = AssetHandle;
    outlined init with copy of Any((uint64_t)aBlock, (uint64_t)&v21);
    swift_dynamicCast();
    uint64_t v6 = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    type metadata accessor for __REAsset();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v1 + 200) = v8;
    swift_release();
  }
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v2 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
  if (!v22)
  {
    __break(1u);
    goto LABEL_14;
  }
  outlined init with take of BindableDataInternal(&v21, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  uint64_t v9 = v21;
  uint64_t v10 = *(void *)(v1 + 200);
  if (!v10)
  {
LABEL_11:
    swift_release();
    swift_release();
    return;
  }
  uint64_t v11 = one-time initialization token for dispatchQueue;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  *(void *)(v13 + 24) = v10;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:);
  *(void *)(v14 + 24) = v13;
  uint64_t v18 = thunk for @callee_guaranteed () -> ()partial apply;
  uint64_t v19 = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v17 = &block_descriptor_157;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (v12)
  {
    __break(1u);
    goto LABEL_11;
  }
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.UpdateAndRenderError()
{
  if (*v0) {
    return 0xD00000000000005ALL;
  }
  else {
    return 0xD00000000000003BLL;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RealityRenderer.update(_:)(Swift::Double a1)
{
  if (REEngineOverlayIsEngineInsideTick())
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *uint64_t v2 = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 296);
    uint64_t v4 = *(void *)(v1 + 336);
    uint64_t v5 = *(void *)(v1 + 352);
    *(unsigned char *)(v1 + 328) = 0;
    *(_OWORD *)(v1 + 296) = 0u;
    *(_OWORD *)(v1 + 312) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 352) = 0u;
    uint64_t v6 = MEMORY[0x263F8EE78];
    *(void *)(v1 + 368) = MEMORY[0x263F8EE78];
    *(void *)(v1 + 376) = v6;
    *(unsigned char *)(v1 + 384) = 0;
    outlined consume of RealityRenderer.CameraOutput?(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    REEngineOverlayEnterFrame();
    REEngineOverlayFramePrepare();
    REEngineOverlayFrameSimulate();
    REEngineOverlayFrameCommit();
    REEngineOverlayFrameExit();
  }
}

uint64_t RealityRenderer.updateAndRender(deltaTime:cameraOutput:whenScheduled:onComplete:actionsBeforeRender:actionsAfterRender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  char v28 = *((unsigned char *)a1 + 32);
  uint64_t result = REEngineOverlayIsEngineInsideTick();
  if (result)
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *uint64_t v16 = 0;
    return swift_willThrow();
  }
  uint64_t v27 = a5;
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)MEMORY[0x22A689930](0, v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v17 = *(void **)(v12 + 32);
    swift_unknownObjectRetain();
  }
  swift_beginAccess();
  if (*(void *)(v7 + 64) || !objc_msgSend(v17, sel_isFramebufferOnly))
  {
    uint64_t v19 = *(void *)(v7 + 296);
    *(void *)(v7 + 296) = v12;
    *(void *)(v7 + 304) = v11;
    *(void *)(v7 + 312) = v13;
    *(void *)(v7 + 320) = v14;
    *(unsigned char *)(v7 + 328) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of RealityRenderer.CameraOutput?(v19);
    uint64_t v20 = *(void *)(v7 + 336);
    *(void *)(v7 + 336) = a2;
    *(void *)(v7 + 344) = a3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    uint64_t v21 = *(void *)(v7 + 352);
    *(void *)(v7 + 352) = a4;
    *(void *)(v7 + 360) = v27;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
    *(void *)(v7 + 368) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v7 + 376) = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v22 = *(void *)(v7 + 48);
    *(unsigned char *)(v7 + 384) = v22 != 0;
    if (v22) {
      RealityRenderer.lazyInitEmitter()();
    }
    REEngineOverlayEnterFrame();
    REEngineOverlayFramePrepare();
    REEngineOverlayFrameSimulate();
    REEngineOverlayFrameCommit();
    REEngineOverlayFrameExit();
    uint64_t v23 = *(void *)(v7 + 296);
    uint64_t v24 = *(void *)(v7 + 336);
    uint64_t v25 = *(void *)(v7 + 352);
    *(_OWORD *)(v7 + 296) = 0u;
    *(_OWORD *)(v7 + 312) = 0u;
    *(unsigned char *)(v7 + 328) = 0;
    *(_OWORD *)(v7 + 336) = 0u;
    *(_OWORD *)(v7 + 352) = 0u;
    uint64_t v26 = MEMORY[0x263F8EE78];
    *(void *)(v7 + 368) = MEMORY[0x263F8EE78];
    *(void *)(v7 + 376) = v26;
    *(unsigned char *)(v7 + 384) = 0;
    outlined consume of RealityRenderer.CameraOutput?(v23);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v24);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v7 + 48))
    {
      swift_retain();
      RECameraViewDescriptorsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RECameraViewDescriptorsComponentClearCameraViewDescriptors();
      swift_unknownObjectRelease();
      return swift_release();
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *uint64_t v18 = 1;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
}

id RealityRenderer.cameraRenderingSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 400);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 392);
  *(void *)(a1 + 8) = v2;
  return v2;
}

void RealityRenderer.cameraRenderingSettings.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *(void **)(v1 + 400);
  *(unsigned char *)(v1 + 392) = v2;
  *(void *)(v1 + 400) = v3;
}

void (*RealityRenderer.cameraRenderingSettings.modify(uint64_t a1))(char *a1)
{
  char v2 = *(void **)(v1 + 400);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 392);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v1;
  id v3 = v2;
  return RealityRenderer.cameraRenderingSettings.modify;
}

void RealityRenderer.cameraRenderingSettings.modify(char *a1)
{
  char v1 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v4 = *(void **)(v2 + 400);
  *(unsigned char *)(v2 + 392) = v1;
  *(void *)(v2 + 400) = v3;
}

uint64_t CameraRenderingSettings.disableTonemapping.getter()
{
  return *v0;
}

uint64_t (*CameraRenderingSettings.disableTonemapping.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingSettings.colorBackground.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance CameraRenderingOutput.InitError()
{
  return 0xD00000000000003BLL;
}

double CameraRenderingOutput.RelativeViewport.originX.getter()
{
  return *(double *)v0;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.originX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.originY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void RealityRenderer.CameraOutput.RelativeViewport.init(originX:originY:width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

uint64_t CameraRenderingOutput.Descriptor.colorTextures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CameraRenderingOutput.Descriptor.colorTextures.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *char v1 = a1;
  return result;
}

uint64_t (*CameraRenderingOutput.Descriptor.colorTextures.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CameraRenderingOutput.Descriptor.viewports.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CameraRenderingOutput.Descriptor.viewports.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CameraRenderingOutput.Descriptor.viewports.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CameraRenderingOutput.Descriptor.monoscopic(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22831E4E0;
  *(void *)(v4 + 32) = a1;
  uint64_t v6 = v4;
  specialized Array._endMutation()();
  *a2 = v6;
  a2[1] = (uint64_t)&outlined read-only object #0 of static CameraRenderingOutput.Descriptor.monoscopic(colorTexture:);

  return swift_unknownObjectRetain();
}

uint64_t *CameraRenderingOutput.init(_:)@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if ((*result & 0xC000000000000001) != 0)
  {
    uint64_t v5 = (void *)MEMORY[0x22A689930](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = *(void **)(v3 + 32);
    swift_unknownObjectRetain();
  }
  if ((objc_msgSend(v5, sel_usage) & 4) != 0)
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError();
    swift_allocError();
    swift_willThrow();
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v2;
  }
  return result;
}

uint64_t static RealityRenderer.CameraOutput.Descriptor._proto_stereoProjectionWith_v1(layeredColorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)(a1, (uint64_t)&outlined read-only object #0 of static RealityRenderer.CameraOutput.Descriptor._proto_stereoProjectionWith_v1(layeredColorTexture:), 1, a2);
}

uint64_t static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22831E4E0;
  *(void *)(v8 + 32) = a1;
  uint64_t v11 = v8;
  specialized Array._endMutation()();
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = a2;
  *(unsigned char *)(a4 + 32) = a3;

  return swift_unknownObjectRetain();
}

void RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

unsigned char *(*RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 32);
  return RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify;
}

unsigned char *RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 32) = result[8];
  return result;
}

void RealityRenderer.CameraOutput._proto_Layout_v1.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int RealityRenderer.CameraOutput._proto_Layout_v1.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *(*RealityRenderer.CameraSettings.antialiasing.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return RealityRenderer.CameraSettings.antialiasing.modify;
}

unsigned char *RealityRenderer.CameraSettings.antialiasing.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 1) = result[8];
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError);
  }
  return result;
}

uint64_t sub_227EA664C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

float partial apply for closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset()
{
  return closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.InitError and conformance RealityRenderer.InitError()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError);
  }
  return result;
}

uint64_t outlined consume of RealityRenderer.CameraOutput?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for RealityRenderer()
{
  return self;
}

uint64_t partial apply for closure #2 in RealityRenderer.init()()
{
  return closure #2 in RealityRenderer.init()();
}

uint64_t outlined assign with take of Material?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in RealityRenderer.init()()
{
  return closure #3 in RealityRenderer.init()();
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError;
  if (!lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError);
  }
  return result;
}

uint64_t partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:)()
{
  return closure #1 in __RERenderGraphEmitter.unsetup(mgr:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_227EA6850()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError;
  if (!lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError;
  if (!lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for RealityRenderer.EntityCollection(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection;
  if (!lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection;
  if (!lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in RealityRenderer.EntityCollection()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<RealityRenderer.EntityCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<RealityRenderer.EntityCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<RealityRenderer.EntityCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<RealityRenderer.EntityCollection>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<RealityRenderer.EntityCollection> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<RealityRenderer.EntityCollection>);
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1);
  }
  return result;
}

uint64_t sub_227EA6AFC@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

unsigned char *sub_227EA6B08(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_227EA6B14@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t result = RealityRenderer.EntityCollection.init(entity:)(v2, &v4);
  *a1 = v4;
  return result;
}

uint64_t sub_227EA6B58(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)result + 16) != *(void *)(*(void *)(*(void *)a2 + 24) + 16)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_227EA6B7C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  int v4 = *(_DWORD *)(v3 + 40);
  *(void *)a2 = *(void *)(v3 + 32);
  *(_DWORD *)(a2 + 8) = v4;
  return swift_retain();
}

uint64_t sub_227EA6BD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_227EA6C2C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 72);
  return result;
}

void sub_227EA6C74(char *a1)
{
}

float sub_227EA6C9C@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 76);
  *a2 = result;
  return result;
}

uint64_t sub_227EA6CE4(float *a1, void *a2)
{
  float v2 = *a1;
  uint64_t v3 = (float *)(*a2 + 76);
  uint64_t result = swift_beginAccess();
  if (v2 < 1.0 || v2 > 16.0) {
    float v2 = *v3;
  }
  *uint64_t v3 = v2;
  return result;
}

id sub_227EA6D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(*(void *)a1 + 392);
  uint64_t v3 = *(void **)(*(void *)a1 + 400);
  *(unsigned char *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  return v3;
}

void sub_227EA6D64(uint64_t a1, uint64_t *a2)
{
  char v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  id v5 = *(id *)(*a2 + 400);
  *(unsigned char *)(v3 + 392) = *(unsigned char *)a1;
  *(void *)(v3 + 400) = v2;
  id v4 = v2;
}

uint64_t sub_227EA6DB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_227EA6DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_227EA6E04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_227EA6E10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_227EA6E54@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

unsigned char *sub_227EA6E60(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 32) = *result;
  return result;
}

unsigned char *sub_227EA6E6C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

uint64_t method lookup function for RealityRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RealityRenderer);
}

uint64_t dispatch thunk of RealityRenderer.scene.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of RealityRenderer.entities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of RealityRenderer.entities.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of RealityRenderer.entities.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of RealityRenderer.subscribe<A>(to:on:componentType:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of RealityRenderer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 664))();
}

uint64_t dispatch thunk of RealityRenderer.update(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of RealityRenderer.updateAndRender(deltaTime:cameraOutput:whenScheduled:onComplete:actionsBeforeRender:actionsAfterRender:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of RealityRenderer.updateAndRender(deltaTime:cameraRenderingOutput:scheduled:completed:actionsBeforeRender:actionsAfterRender:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

ValueMetadata *type metadata accessor for RealityRenderer.EntityCollection()
{
  return &type metadata for RealityRenderer.EntityCollection;
}

uint64_t initializeBufferWithCopyOfBuffer for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for RealityRenderer.CameraSettings(uint64_t a1)
{
}

uint64_t assignWithCopy for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings()
{
  return &type metadata for RealityRenderer.CameraSettings;
}

void **assignWithCopy for RealityRenderer.CameraSettings.ColorBackground(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for RealityRenderer.CameraSettings.ColorBackground(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings.ColorBackground()
{
  return &type metadata for RealityRenderer.CameraSettings.ColorBackground;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput()
{
  return &type metadata for RealityRenderer.CameraOutput;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput.RelativeViewport()
{
  return &type metadata for RealityRenderer.CameraOutput.RelativeViewport;
}

uint64_t destroy for RealityRenderer.CameraOutput()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraOutput(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput.Descriptor()
{
  return &type metadata for RealityRenderer.CameraOutput.Descriptor;
}

ValueMetadata *type metadata accessor for RealityRenderer.ImageBasedLight()
{
  return &type metadata for RealityRenderer.ImageBasedLight;
}

void *initializeBufferWithCopyOfBuffer for RealityRenderer.MetalEventAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for RealityRenderer.MetalEventAction()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for RealityRenderer.MetalEventAction(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for RealityRenderer.MetalEventAction(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.MetalEventAction()
{
  return &type metadata for RealityRenderer.MetalEventAction;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraSettings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraSettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings()
{
  return &type metadata for CameraRenderingSettings;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraSettings.ColorBackground(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraSettings.ColorBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings.ColorBackground()
{
  return &type metadata for CameraRenderingSettings.ColorBackground;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput()
{
  return &type metadata for CameraRenderingOutput;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput.RelativeViewport()
{
  return &type metadata for CameraRenderingOutput.RelativeViewport;
}

uint64_t destroy for CameraRenderingOutput.Descriptor()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CameraRenderingOutput(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CameraRenderingOutput(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CameraRenderingOutput(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput.Descriptor()
{
  return &type metadata for CameraRenderingOutput.Descriptor;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput._proto_Layout_v1()
{
  return &type metadata for RealityRenderer.CameraOutput._proto_Layout_v1;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings.ColorBackground.Value()
{
  return &type metadata for CameraRenderingSettings.ColorBackground.Value;
}

void **initializeBufferWithCopyOfBuffer for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CameraRenderingSettings.ColorBackground.Value(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CameraRenderingSettings.ColorBackground.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings.ColorBackground.Value()
{
  return &type metadata for RealityRenderer.CameraSettings.ColorBackground.Value;
}

uint64_t destroy for RealityRenderer.RenderContext(void *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5]) {
    swift_release();
  }
  if (a1[7]) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityRenderer.RenderContext(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v10 = *(void *)(a2 + 56);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityRenderer.RenderContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    }
    else
    {
      outlined destroy of RealityRenderer.CameraOutput(a1);
      char v6 = *((unsigned char *)a2 + 32);
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 32) = v6;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    long long v9 = *((_OWORD *)a2 + 1);
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
  }
  uint64_t v10 = a2[5];
  if (*(void *)(a1 + 40))
  {
    if (v10)
    {
      uint64_t v11 = a2[6];
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = a2[6];
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
LABEL_15:
  uint64_t v13 = a2[7];
  if (!*(void *)(a1 + 56))
  {
    if (v13)
    {
      uint64_t v15 = a2[8];
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    goto LABEL_22;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v14 = a2[8];
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_22:
  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  return a1;
}

uint64_t outlined destroy of RealityRenderer.CameraOutput(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RealityRenderer.RenderContext(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of RealityRenderer.CameraOutput(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v6;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v7;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_13:
  uint64_t v8 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v8;
      *(void *)(a1 + 64) = v10;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_20;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  swift_release();
LABEL_20:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.RenderContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.RenderContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for RealityRenderer.RenderContext()
{
  return &unk_26DC90FE8;
}

unsigned char *storeEnumTagSinglePayload for CameraRenderingOutput.InitError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EA83F8);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CameraRenderingOutput.InitError()
{
  return &unk_26DC91090;
}

void *type metadata accessor for RealityRenderer.UpdateAndRenderError()
{
  return &unk_26DC91120;
}

unsigned char *storeEnumTagSinglePayload for RealityRenderer.CameraOutput._proto_Layout_v1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EA850CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RealityRenderer.InitError()
{
  return &unk_26DC911B0;
}

unsigned char *storeEnumTagSinglePayload for RealityRenderer.CameraOutput.InitError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EA8610);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RealityRenderer.CameraOutput.InitError()
{
  return &unk_26DC91240;
}

uint64_t partial apply for closure #2 in RealityRenderer.doRenderCallback()(uint64_t a1)
{
  return closure #1 in RealityRenderer.doRenderCallback()(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t partial apply for closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:)(uint64_t a1)
{
  return closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t objectdestroy_133Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:)(uint64_t a1)
{
  return closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t outlined copy of RealityRenderer.CameraOutput?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:)()
{
  return closure #1 in __RERenderGraphEmitter.setup(mgr:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_227EA88B8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

BOOL static __RKEntityActionGroup.Ordering.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __RKEntityActionGroup.Ordering.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int __RKEntityActionGroup.Ordering.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static __RKEntityActionGroup.infiniteLoopCount.getter()
{
  return 0;
}

uint64_t static __RKEntityActionGroup.noLoopCount.getter()
{
  return 1;
}

uint64_t key path setter for __RKEntityActionGroup.actions : __RKEntityActionGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityActionGroup.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityActionGroup.ordering.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 120);
  return result;
}

uint64_t __RKEntityActionGroup.loopCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 128);
}

uint64_t __RKEntityActionGroup.__allocating_init(actions:ordering:loopCount:)(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  swift_allocObject();
  return __RKEntityActionGroup.init(actions:ordering:loopCount:)(a1, a2, a3, v7);
}

uint64_t __RKEntityActionGroup.init(actions:ordering:loopCount:)(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v5 = *a2;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  *(void *)(v4 + 112) = a1;
  *(unsigned char *)(v4 + 120) = v5;
  if (a4) {
    a3 = 1;
  }
  *(void *)(v4 + 128) = a3;
  uint64_t v7 = __RKEntityAction.init(targetEntity:)(0);
  swift_retain();
  uint64_t v8 = __RKEntityActionGroup.collapseRedundantGroups()();
  swift_beginAccess();
  *(void *)(v7 + 112) = v8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(unsigned char *)(v7 + 120))
  {
    swift_release();
  }
  else
  {
    uint64_t v9 = __RKEntityActionGroup.reorderConcurrentActions()();
    swift_release();
    *(void *)(v7 + 112) = v9;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t __RKEntityActionGroup.collapseRedundantGroups()()
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 112);
  if (v1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_37;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](v4, v1);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityActionGroup();
      uint64_t v6 = swift_dynamicCastClass();
      uint64_t v7 = swift_retain();
      if (!v6)
      {
        MEMORY[0x22A688E10](v7);
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_10;
      }
      unint64_t v8 = __RKEntityActionGroup.allActions()();
      if (v8 >> 62) {
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v9 == 1)
      {
        swift_beginAccess();
        if (*(void *)(v6 + 128) == 1)
        {
          unint64_t v10 = __RKEntityActionGroup.allActions()();
          unint64_t v11 = v10;
          if (v10 >> 62)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
LABEL_21:
              if ((v11 & 0xC000000000000001) != 0)
              {
                MEMORY[0x22A689930](0, v11);
              }
              else
              {
                if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_36;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              uint64_t v12 = swift_retain();
              MEMORY[0x22A688E10](v12);
              if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_release();
              goto LABEL_9;
            }
          }
          else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v5 = swift_retain();
      MEMORY[0x22A688E10](v5);
      if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_9:
      swift_release();
LABEL_10:
      ++v4;
      swift_release();
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.reorderConcurrentActions()()
{
  unint64_t v8 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 112);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_20;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = MEMORY[0x22A689930](v4, v1);
    }
    else
    {
      uint64_t v6 = *(void *)(v1 + 8 * v4 + 32);
      swift_retain();
    }
    if (((*(uint64_t (**)(void))(*(void *)v6 + 488))() & 1) == 0)
    {
      uint64_t v5 = swift_retain();
      MEMORY[0x22A688E10](v5);
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_8;
    }
    if (v8 >> 62) {
      break;
    }
    swift_retain();
LABEL_15:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v6);
LABEL_8:
    ++v4;
    swift_release();
    if (v2 == v4) {
      goto LABEL_18;
    }
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_15;
  }
  __break(1u);
LABEL_18:
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Void __swiftcall __RKEntityActionGroup.preloadAssets()()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 112);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = MEMORY[0x22A689930](i, v1);
      }
      else
      {
        uint64_t v4 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(void *)v4 + 400))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t __RKEntityActionGroup.checkForCompletion(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(v1 + 152) == 1)
  {
    *(void *)(v1 + 136) = 0;
    *(void *)(v1 + 144) = 0;
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 96);
    char v4 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96) = 2;
    *(unsigned char *)(v1 + 104) = 1;
    uint64_t v41 = v3;
    char v42 = v4;
    uint64_t result = __RKEntityAction.state.didset((uint64_t)&v41);
    *(unsigned char *)(v1 + 152) = 0;
    return result;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = (uint64_t *)(v1 + 112);
  uint64_t v9 = *(void *)(v1 + 136);
  uint64_t result = swift_beginAccess();
  unint64_t v10 = *(void *)(v1 + 112);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 != v28) {
      return result;
    }
  }
  else if (v9 != *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v11 = *(void *)(v2 + 144);
  uint64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_19;
    }
    return result;
  }
  *(void *)(v2 + 144) = v12;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v2 + 128);
  BOOL v15 = v13 > 1 && v12 < v13;
  if (v13 && !v15)
  {
    *(void *)(v2 + 144) = 0;
    swift_beginAccess();
    uint64_t v16 = *(void *)(v2 + 96);
    char v17 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 2;
    *(unsigned char *)(v2 + 104) = 1;
    uint64_t v39 = v16;
    char v40 = v17;
    uint64_t v18 = &v39;
    return __RKEntityAction.state.didset((uint64_t)v18);
  }
  swift_beginAccess();
  uint64_t v19 = *(void *)(v2 + 96);
  char v20 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 104) = 1;
  uint64_t v39 = v19;
  char v40 = v20;
  __RKEntityAction.state.didset((uint64_t)&v39);
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v2 + 120) & 1) == 0)
  {
    *(void *)(v2 + 136) = 0;
    if (*(unsigned char *)(v2 + 152)) {
      return result;
    }
    uint64_t v21 = *v8;
    __n128 v36 = (uint64_t *)(v2 + 112);
    if ((unint64_t)*v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v22 = result;
      if (!result) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v22) {
        goto LABEL_36;
      }
    }
    if (v22 < 1)
    {
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v23 = 0;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        uint64_t v24 = MEMORY[0x22A689930](v23, v21);
      }
      else
      {
        uint64_t v24 = *(void *)(v21 + 8 * v23 + 32);
        swift_retain();
      }
      ++v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = v25;
      v26[3] = v6;
      v26[4] = v7;
      uint64_t v27 = *(void *)(v24 + 48);
      *(void *)(v24 + 48) = closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)partial apply;
      *(void *)(v24 + 56) = v26;
      swift_retain();
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
      swift_release();
    }
    while (v22 != v23);
LABEL_36:
    swift_bridgeObjectRelease();
    uint64_t v30 = *v36;
    if ((unint64_t)*v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v31 = result;
      if (result)
      {
LABEL_38:
        if (v31 >= 1)
        {
          uint64_t v32 = 0;
          do
          {
            if ((v30 & 0xC000000000000001) != 0)
            {
              uint64_t v33 = MEMORY[0x22A689930](v32, v30);
            }
            else
            {
              uint64_t v33 = *(void *)(v30 + 8 * v32 + 32);
              swift_retain();
            }
            ++v32;
            uint64_t v37 = v6;
            uint64_t v38 = v7;
            (*(void (**)(uint64_t *))(*(void *)v33 + 408))(&v37);
            swift_release();
          }
          while (v31 != v32);
          goto LABEL_45;
        }
LABEL_47:
        __break(1u);
        return result;
      }
    }
    else
    {
      uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v31) {
        goto LABEL_38;
      }
    }
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v2 + 96);
    char v35 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 1;
    *(unsigned char *)(v2 + 104) = 1;
    uint64_t v37 = v34;
    LOBYTE(v38) = v35;
    uint64_t v18 = &v37;
    return __RKEntityAction.state.didset((uint64_t)v18);
  }
  if ((unint64_t)*v8 >> 62) {
    goto LABEL_33;
  }
  if (*(void *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    *(void *)(v2 + 136) = 0;
    uint64_t v37 = v6;
    uint64_t v38 = v7;
    return __RKEntityActionGroup.performSequentialAction(at:context:)(0, &v37);
  }
  return result;
}

uint64_t closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(void *)(result + 136);
    BOOL v7 = __OFADD__(v6, 1);
    uint64_t v8 = v6 + 1;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      *(void *)(result + 136) = v8;
      v9[0] = a2;
      v9[1] = a3;
      __RKEntityActionGroup.checkForCompletion(with:)(v9);
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityActionGroup.performSequentialAction(at:context:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v26 = 91;
  unint64_t v27 = 0xE100000000000000;
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  if (*(unsigned char *)(v2 + 152))
  {
    uint64_t v26 = 91;
    unint64_t v27 = 0xE100000000000000;
    os_log_type_t v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v26);
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *(void *)(v2 + 112);
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)MEMORY[0x22A689930](a1, v12);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v13 = *(void **)(v12 + 8 * a1 + 32);
  swift_retain();
LABEL_7:
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  BOOL v15 = (void *)swift_allocObject();
  v15[2] = v14;
  void v15[3] = 91;
  v15[4] = 0xE100000000000000;
  v15[5] = v4;
  v15[6] = v5;
  uint64_t v16 = v13[6];
  void v13[6] = partial apply for closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:);
  v13[7] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v17 = outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  MEMORY[0x270FA5388](v17);
  void v21[2] = a1;
  v21[3] = v13;
  uint64_t v24 = 91;
  unint64_t v25 = 0xE100000000000000;
  uint64_t v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v24, partial apply for implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:), v21);
  swift_bridgeObjectRelease();
  uint64_t v24 = v4;
  unint64_t v25 = v5;
  (*(void (**)(uint64_t *))(*v13 + 408))(&v24);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v2 + 96);
  char v20 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = 1;
  *(unsigned char *)(v2 + 104) = 1;
  uint64_t v22 = v19;
  char v23 = v20;
  __RKEntityAction.state.didset((uint64_t)&v22);
  return swift_release();
}

void closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v21[0] = a2;
    v21[1] = a3;
    os_log_type_t v16 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v16, v21);
    return;
  }
  uint64_t v10 = Strong;
  uint64_t v11 = *(void *)(Strong + 136);
  uint64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12 < v17) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    os_log_type_t v18 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v18, &v19);
    uint64_t v19 = a4;
    uint64_t v20 = a5;
    __RKEntityActionGroup.checkForCompletion(with:)(&v19);
    goto LABEL_10;
  }
  *(void *)(Strong + 136) = v12;
  swift_beginAccess();
  unint64_t v13 = *(void *)(v10 + 112);
  if (v13 >> 62) {
    goto LABEL_8;
  }
  if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v14 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v14, &v19, partial apply for implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:), v10);
  uint64_t v15 = *(void *)(v10 + 136);
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  __RKEntityActionGroup.performSequentialAction(at:context:)(v15, &v19);
LABEL_10:
  swift_release();
}

uint64_t implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  _StringGuts.grow(_:)(60);
  v0._object = (void *)0x80000002283505B0;
  v0._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)(uint64_t a1, uint64_t a2)
{
  _StringGuts.grow(_:)(37);
  v3._object = (void *)0x8000000228350590;
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)a2 + 440))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t __RKEntityActionGroup.perform(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  v42[0] = 91;
  v42[1] = 0xE100000000000000;
  uint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, v42, partial apply for implicit closure #1 in __RKEntityActionGroup.perform(with:), v1);
  *(unsigned char *)(v1 + 152) = 0;
  uint64_t v10 = (unint64_t *)(v1 + 112);
  swift_beginAccess();
  if (!(*v10 >> 62))
  {
    if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v40 = 91;
    unint64_t v41 = 0xE100000000000000;
    os_log_type_t v23 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v23, &v40);
    swift_beginAccess();
    uint64_t v24 = *(void *)(v2 + 96);
    char v25 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 2;
    *(unsigned char *)(v2 + 104) = 1;
    uint64_t v36 = v24;
    LOBYTE(v37) = v25;
    __RKEntityAction.state.didset((uint64_t)&v36);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_17;
  }
LABEL_3:
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v11 = *v10;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      uint64_t v36 = 91;
      unint64_t v37 = 0xE100000000000000;
      os_log_type_t v12 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v12, &v36);
      *(void *)(v2 + 136) = 0;
      uint64_t v36 = v3;
      unint64_t v37 = v4;
      __RKEntityActionGroup.performSequentialAction(at:context:)(0, &v36);
LABEL_31:
      uint64_t v38 = 91;
      unint64_t v39 = 0xE100000000000000;
      uint64_t v34 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v34, &v38);
      swift_bridgeObjectRelease();
      return 1;
    }
    uint64_t v36 = 91;
    unint64_t v37 = 0xE100000000000000;
    os_log_type_t v27 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v27, &v36);
    goto LABEL_31;
  }
  uint64_t v36 = 91;
  unint64_t v37 = 0xE100000000000000;
  os_log_type_t v13 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v13, &v36);
  *(void *)(v2 + 136) = 0;
  if (*(unsigned char *)(v2 + 152)) {
    goto LABEL_31;
  }
  unint64_t v14 = *v10;
  char v35 = (uint64_t *)(v2 + 112);
  if (*v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_21;
    }
  }
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v17 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      uint64_t v18 = MEMORY[0x22A689930](v17, v14);
    }
    else
    {
      uint64_t v18 = *(void *)(v14 + 8 * v17 + 32);
      swift_retain();
    }
    ++v17;
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = v19;
    v20[3] = v3;
    v20[4] = v4;
    uint64_t v21 = *(void *)(v18 + 48);
    *(void *)(v18 + 48) = partial apply for closure #1 in __RKEntityActionGroup.performConcurrentActions(with:);
    *(void *)(v18 + 56) = v20;
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
    swift_release();
  }
  while (v15 != v17);
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v28 = *v35;
  if (!((unint64_t)*v35 >> 62))
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_23;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v32 = *(void *)(v2 + 96);
    char v33 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 1;
    *(unsigned char *)(v2 + 104) = 1;
    uint64_t v38 = v32;
    LOBYTE(v39) = v33;
    __RKEntityAction.state.didset((uint64_t)&v38);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v29 = result;
  if (!result) {
    goto LABEL_30;
  }
LABEL_23:
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0)
      {
        uint64_t v31 = MEMORY[0x22A689930](v30, v28);
      }
      else
      {
        uint64_t v31 = *(void *)(v28 + 8 * v30 + 32);
        swift_retain();
      }
      ++v30;
      uint64_t v36 = v3;
      unint64_t v37 = v4;
      (*(void (**)(uint64_t *))(*(void *)v31 + 408))(&v36);
      swift_release();
    }
    while (v29 != v30);
    goto LABEL_30;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityActionGroup.perform(with:)(uint64_t a1)
{
  _StringGuts.grow(_:)(19);
  v2._countAndFlagsBits = 0x736E6961746E6F43;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  swift_beginAccess();
  if (*(void *)(a1 + 112) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x736E6F6974636120;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t partial apply for implicit closure #1 in __RKEntityActionGroup.perform(with:)()
{
  return implicit closure #1 in __RKEntityActionGroup.perform(with:)(v0);
}

uint64_t __RKEntityActionGroup.allActions()()
{
  uint64_t v16 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 112);
  if (v1 >> 62) {
    goto LABEL_33;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    unint64_t v3 = 0;
    unint64_t v14 = v1;
    unint64_t v15 = v1 & 0xC000000000000001;
    uint64_t v13 = v1 & 0xFFFFFFFFFFFFFF8;
    while (v15)
    {
      MEMORY[0x22A689930](v3, v1);
      BOOL v4 = __OFADD__(v3++, 1);
      if (v4) {
        goto LABEL_30;
      }
LABEL_12:
      type metadata accessor for __RKEntityActionGroup();
      uint64_t v5 = swift_dynamicCastClass();
      uint64_t v6 = swift_retain();
      if (!v5)
      {
        MEMORY[0x22A688E10](v6);
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_5;
      }
      unint64_t v7 = __RKEntityActionGroup.allActions()(v6);
      unint64_t v8 = v7;
      if (v7 >> 62)
      {
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (v9)
        {
LABEL_15:
          if (v9 < 1) {
            goto LABEL_31;
          }
          uint64_t v10 = 0;
          do
          {
            if ((v8 & 0xC000000000000001) != 0) {
              MEMORY[0x22A689930](v10, v8);
            }
            else {
              swift_retain();
            }
            uint64_t v11 = swift_retain();
            MEMORY[0x22A688E10](v11);
            if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            ++v10;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
          }
          while (v9 != v10);
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9) {
          goto LABEL_15;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v1 = v14;
LABEL_5:
      swift_release();
      if (v3 == v2)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    if (v3 >= *(void *)(v13 + 16)) {
      goto LABEL_32;
    }
    swift_retain();
    BOOL v4 = __OFADD__(v3++, 1);
    if (!v4) {
      goto LABEL_12;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

Swift::Bool __swiftcall __RKEntityActionGroup.runningExclusiveAndBlocksForCompletion()()
{
  unint64_t v1 = (unsigned char *)v0;
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 112);
  if (v2 >> 62) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  LOBYTE(v4) = swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    LOBYTE(v4) = 0;
    return v4;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = MEMORY[0x22A689930](0, v2);
    uint64_t v5 = v6;
    goto LABEL_6;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v6 = swift_retain();
LABEL_6:
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 328))(v6))
    {
LABEL_23:
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v4) = 1;
      return v4;
    }
    uint64_t v7 = 0;
    unint64_t v8 = v1 + 89;
    v1 += 90;
    uint64_t v9 = v3 - 1;
    while (1)
    {
      swift_beginAccess();
      uint64_t v10 = *(void *)(v5 + 96);
      int v11 = *(unsigned __int8 *)(v5 + 104);
      swift_release();
      if (v11 == 1 && v10 == 1)
      {
        swift_beginAccess();
        if (*v8 == 1)
        {
          swift_beginAccess();
          if (*v1 == 1)
          {
            swift_bridgeObjectRelease();
            LOBYTE(v4) = 1;
            return v4;
          }
        }
      }
      if (v9 == v7) {
        goto LABEL_28;
      }
      unint64_t v13 = v7 + 1;
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = MEMORY[0x22A689930](v7 + 1, v2);
        if (__OFADD__(v13, 1)) {
          goto LABEL_25;
        }
      }
      else
      {
        if (v13 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_26;
        }
        uint64_t v5 = *(void *)(v2 + 8 * v7 + 40);
        swift_retain();
        if (__OFADD__(v13, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRetain();
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v3 = v4;
          if (!v4) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      ++v7;
      if ((*(uint64_t (**)(void))(*(void *)v5 + 328))()) {
        goto LABEL_23;
      }
    }
  }
  __break(1u);
  return v4;
}

unint64_t __RKEntityActionGroup.isExclusiveWith(action:)(uint64_t a1)
{
  if (v1 == a1) {
    return 0;
  }
  uint64_t v2 = a1;
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 89) == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v2 + 89)) {
      return 1;
    }
  }
  unint64_t result = __RKEntityActionGroup.allActions()();
  unint64_t v5 = result;
  if (result >> 62) {
    goto LABEL_44;
  }
  unint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_45:
    uint64_t v3 = 0;
LABEL_46:
    swift_bridgeObjectRelease();
    return v3;
  }
LABEL_7:
  unint64_t v7 = 0;
  unint64_t v8 = v5 & 0xC000000000000001;
  uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v26 = v5 + 32;
  unint64_t v27 = v5;
  unint64_t v24 = v5 & 0xC000000000000001;
  unint64_t v25 = v6;
  uint64_t v28 = v2;
  uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8;
  while (v8)
  {
    uint64_t v11 = MEMORY[0x22A689930](v7, v5);
    BOOL v12 = __OFADD__(v7++, 1);
    if (v12) {
      goto LABEL_43;
    }
LABEL_16:
    type metadata accessor for __RKEntityActionGroup();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      unint64_t result = __RKEntityActionGroup.allActions()();
      unint64_t v13 = result;
      if (result >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        unint64_t result = swift_bridgeObjectRelease();
        if (v14)
        {
LABEL_19:
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = MEMORY[0x22A689930](0, v13);
          }
          else
          {
            if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_49;
            }
            uint64_t v15 = *(void *)(v13 + 32);
            swift_retain();
          }
          uint64_t v16 = (uint64_t (**)(uint64_t))(*(void *)v11 + 456);
          uint64_t v17 = *v16;
          unint64_t v5 = (unint64_t)v16;
          char v18 = (*v16)(v15);
          swift_release();
          if (v18)
          {
LABEL_39:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v3 = 1;
            goto LABEL_46;
          }
          uint64_t v19 = 0;
          uint64_t v2 = v14 - 1;
          while (1)
          {
            if (v2 == v19)
            {
              swift_release();
              unint64_t v5 = v27;
              uint64_t v2 = v28;
              unint64_t v8 = v24;
              unint64_t v6 = v25;
              uint64_t v9 = v23;
              goto LABEL_36;
            }
            unint64_t v20 = v19 + 1;
            if ((v13 & 0xC000000000000001) != 0)
            {
              uint64_t v21 = MEMORY[0x22A689930](v19 + 1, v13);
              if (__OFADD__(v20, 1)) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v20 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_42;
              }
              uint64_t v21 = *(void *)(v13 + 8 * v19 + 40);
              swift_retain();
              if (__OFADD__(v20, 1))
              {
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
LABEL_43:
                __break(1u);
LABEL_44:
                unint64_t result = _CocoaArrayWrapper.endIndex.getter();
                unint64_t v6 = result;
                if (!result) {
                  goto LABEL_45;
                }
                goto LABEL_7;
              }
            }
            char v22 = v17(v21);
            swift_release();
            ++v19;
            if (v22) {
              goto LABEL_39;
            }
          }
        }
      }
      else
      {
        uint64_t v14 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v14) {
          goto LABEL_19;
        }
      }
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
    }
    else
    {
      char v10 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 456))(v2);
      unint64_t result = swift_release();
      if (v10)
      {
        uint64_t v3 = 1;
        goto LABEL_46;
      }
    }
    if (v7 == v6) {
      goto LABEL_45;
    }
  }
  if (v7 < *(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v26 + 8 * v7);
    swift_retain();
    BOOL v12 = __OFADD__(v7++, 1);
    if (v12) {
      goto LABEL_43;
    }
    goto LABEL_16;
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.reversed()()
{
  uint64_t v1 = v0;
  uint64_t v12 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 112);
  if (v2 >> 62) {
    goto LABEL_20;
  }
  unint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_17;
  }
  while (!__OFSUB__(v3--, 1))
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = MEMORY[0x22A689930](v3, v2);
LABEL_12:
      if ((*(uint64_t (**)(void))(*(void *)v5 + 432))())
      {
        uint64_t v6 = swift_retain();
        MEMORY[0x22A688E10](v6);
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
      if (!v3) {
        goto LABEL_16;
      }
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v3 < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v5 = *(void *)(v2 + 32 + 8 * v3);
        swift_retain();
        goto LABEL_12;
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_21;
      }
    }
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v7 = v12;
LABEL_17:
  swift_beginAccess();
  v11[0] = *(unsigned char *)(v1 + 120);
  type metadata accessor for __RKEntityActionGroup();
  swift_allocObject();
  uint64_t v8 = __RKEntityActionGroup.init(actions:ordering:loopCount:)(v7, v11, 1, 0);
  swift_beginAccess();
  char v9 = *(unsigned char *)(v1 + 89);
  swift_beginAccess();
  *(unsigned char *)(v8 + 89) = v9;
  return v8;
}

Swift::Bool __swiftcall __RKEntityActionGroup.stop()()
{
  v14[0] = 91;
  v14[1] = 0xE100000000000000;
  v14[4] = 0;
  v14[5] = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v14);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 152) = 1;
  swift_beginAccess();
  unint64_t v6 = *(void *)(v0 + 112);
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    LOBYTE(v8) = swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return v8;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = MEMORY[0x22A689930](i, v6);
      uint64_t v12 = v10;
    }
    else
    {
      uint64_t v12 = *(void *)(v6 + 8 * i + 32);
      uint64_t v10 = swift_retain();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 448))(v10, v11);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  LOBYTE(v8) = 1;
  return v8;
}

uint64_t __RKEntityActionGroup.description.getter()
{
  _StringGuts.grow(_:)(34);
  v1._object = (void *)0x8000000228350490;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 5975337;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x28202D205DLL;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  Swift::String v4 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  unint64_t v5 = *(void *)(v0 + 112);
  if (v5 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 >= 1)
  {
    while (1)
    {
      v7._countAndFlagsBits = 5966090;
      v7._object = (void *)0xE300000000000000;
      String.append(_:)(v7);
      uint64_t v8 = *v4;
      if ((*v4 & 0xC000000000000001) != 0) {
        break;
      }
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = swift_retain();
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6 < 1) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x22A689930](0, v8);
    uint64_t v10 = swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 440))(v10);
    unint64_t v13 = v12;
    swift_release();
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v6 - 1;
    if (v6 != 1)
    {
      uint64_t v19 = 0;
      do
      {
        v20._countAndFlagsBits = 592428;
        v20._object = (void *)0xE300000000000000;
        String.append(_:)(v20);
        uint64_t v21 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = MEMORY[0x22A689930](v19 + 1, v21);
          uint64_t v23 = swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)(v19 + 1) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_16;
          }
          uint64_t v22 = *(void *)(v21 + 8 * v19 + 40);
          uint64_t v23 = swift_retain();
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 440))(v23);
        unint64_t v26 = v25;
        swift_release();
        v27._countAndFlagsBits = v24;
        v27._object = v26;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        ++v19;
      }
      while (v15 != v19);
    }
    v16._countAndFlagsBits = 679177;
    v16._object = (void *)0xE300000000000000;
    String.append(_:)(v16);
  }
LABEL_8:
  v17._countAndFlagsBits = 665865;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t __RKEntityActionGroup.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v15 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v4 = *(void *)(v1 + 112);
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_16:
    swift_beginAccess();
    char v13 = *(unsigned char *)(v2 + 120);
    swift_beginAccess();
    uint64_t v11 = *(void *)(v2 + 128);
    uint64_t v12 = type metadata accessor for __RKEntityActionGroup();
    swift_allocObject();
    uint64_t result = __RKEntityActionGroup.init(actions:ordering:loopCount:)(v10, &v13, v11, 0);
    a1[3] = v12;
    *a1 = result;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x22A689930](i, v4);
      }
      else
      {
        uint64_t v8 = *(void *)(v4 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void *__return_ptr, void))(*(void *)v8 + 464))(v14, 0);
      type metadata accessor for __RKEntityAction();
      if (swift_dynamicCast())
      {
        uint64_t v9 = swift_retain();
        MEMORY[0x22A688E10](v9);
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v15;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v3 = *(void *)(v2 + 112);
  if (v3 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_19;
    }
  }
  unint64_t v5 = 0;
  while (2)
  {
    unint64_t v6 = v5;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x22A689930](v6, v3);
        unint64_t v5 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v6 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_21;
        }
        uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
        swift_retain();
        unint64_t v5 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 472))(a1, a2);
      char v10 = v9;
      if (v8)
      {
        uint64_t v11 = swift_retain();
        MEMORY[0x22A688E10](v11);
        if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
      if (v10) {
        break;
      }
      ++v6;
      if (v5 == v4) {
        goto LABEL_19;
      }
    }
    if (v5 != v4) {
      continue;
    }
    break;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  char v16 = *(unsigned char *)(v2 + 120);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v2 + 128);
  type metadata accessor for __RKEntityActionGroup();
  swift_allocObject();
  return __RKEntityActionGroup.init(actions:ordering:loopCount:)(v17, &v16, v12, 0);
}

void __RKEntityActionGroup.__allocating_init(targetEntity:)()
{
}

void __RKEntityActionGroup.init(targetEntity:)()
{
}

uint64_t __RKEntityActionGroup.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityActionGroup.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityActionGroup.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_227EABA0C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)()
{
  return closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)(v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for __RKEntityActionGroup()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering);
  }
  return result;
}

uint64_t sub_227EABAD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t sub_227EABB20@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 120);
  return result;
}

uint64_t sub_227EABB68(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 120) = v2;
  return result;
}

uint64_t sub_227EABBAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 128);
  return result;
}

uint64_t sub_227EABBF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 128) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityActionGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityActionGroup);
}

uint64_t dispatch thunk of __RKEntityActionGroup.actions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.ordering.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.loopCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.__allocating_init(actions:ordering:loopCount:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v4 + 712))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of __RKEntityActionGroup.allActions()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionGroup.Ordering(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EABDE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionGroup.Ordering()
{
  return &type metadata for __RKEntityActionGroup.Ordering;
}

uint64_t sub_227EABE20()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t partial apply for implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  return implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  return implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)();
}

void PhysicsBodyComponent.mode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *PhysicsBodyComponent.mode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PhysicsBodyComponent.mode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PhysicsBodyComponent.massProperties.getter@<S0>(uint64_t a1@<X8>)
{
  float result = *(float *)(v1 + 16);
  long long v3 = *(_OWORD *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  long long v5 = *(_OWORD *)(v1 + 64);
  *(float *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  return result;
}

float PhysicsBodyComponent.massProperties.setter(uint64_t a1)
{
  float result = *(float *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v1 + 16) = *(_DWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  *(_OWORD *)(v1 + 48) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  return result;
}

uint64_t (*PhysicsBodyComponent.massProperties.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.material.getter()
{
  return swift_retain();
}

uint64_t PhysicsBodyComponent.material.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PhysicsBodyComponent.material.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isTranslationLocked.getter()
{
  if (v0[90]) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  if (v0[89]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 | v0[88] | v1;
}

uint64_t PhysicsBodyComponent.isTranslationLocked.setter(uint64_t result, char a2, char a3)
{
  v3[88] = result;
  v3[89] = a2;
  v3[90] = a3;
  return result;
}

uint64_t (*PhysicsBodyComponent.isTranslationLocked.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isRotationLocked.getter()
{
  if (v0[93]) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  if (v0[92]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 | v0[91] | v1;
}

uint64_t PhysicsBodyComponent.isRotationLocked.setter(uint64_t result, char a2, char a3)
{
  v3[91] = result;
  v3[92] = a2;
  v3[93] = a3;
  return result;
}

uint64_t (*PhysicsBodyComponent.isRotationLocked.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 94);
}

uint64_t PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 94) = result;
  return result;
}

uint64_t (*PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsBodyComponent.linearDamping.setter(float a1)
{
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  *(float *)(v1 + 164) = a1;
}

void PhysicsBodyComponent.angularDamping.setter(float a1)
{
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  *(float *)(v1 + 168) = a1;
}

double PhysicsBodyComponent.init()@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  int v2 = static PhysicsMassProperties.default;
  long long v11 = xmmword_2681C6FA0;
  long long v12 = xmmword_2681C6F90;
  long long v10 = xmmword_2681C6FB0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = static PhysicsMaterialResource.default;
  swift_retain();
  uint64_t v4 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22A6922C0](*(void *)(v4 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    float v6 = 0.0;
    if (v5 < 0.0) {
      float v7 = 0.0;
    }
    else {
      float v7 = v5;
    }
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    if (v8 >= 0.0) {
      float v6 = v8;
    }
  }
  else
  {
    float v6 = 0.25;
    float v7 = 0.02;
  }
  *(unsigned char *)a1 = 2;
  *(_DWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v10;
  *(void *)(a1 + 80) = v3;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  *(float *)(a1 + 164) = v7;
  *(float *)(a1 + 168) = v6;
  return result;
}

uint64_t PhysicsBodyComponent.init(massProperties:material:mode:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *a1;
  long long v17 = *((_OWORD *)a1 + 2);
  long long v18 = *((_OWORD *)a1 + 1);
  long long v16 = *((_OWORD *)a1 + 3);
  char v7 = *a3;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  if (one-time initialization token for default == -1)
  {
    if (a2)
    {
LABEL_5:
      uint64_t v8 = a2;
      goto LABEL_8;
    }
  }
  else
  {
    swift_once();
    if (a2) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = static PhysicsMaterialResource.default;
  swift_retain();
LABEL_8:
  swift_retain();
  uint64_t v9 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22A6922C0](*(void *)(v9 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v10 < 0.0) {
      float v11 = 0.0;
    }
    else {
      float v11 = v10;
    }
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    float v13 = v12;
    uint64_t result = swift_release();
    if (v13 < 0.0) {
      float v15 = 0.0;
    }
    else {
      float v15 = v13;
    }
  }
  else
  {
    uint64_t result = swift_release();
    float v15 = 0.25;
    float v11 = 0.02;
  }
  *(unsigned char *)a4 = v7;
  *(_DWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 64) = v16;
  *(void *)(a4 + 80) = v8;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(void *)(a4 + 152) = 0;
  *(unsigned char *)(a4 + 160) = 1;
  *(float *)(a4 + 164) = v11;
  *(float *)(a4 + 168) = v15;
  return result;
}

uint64_t PhysicsBodyComponent.init(shapes:density:material:mode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  char v9 = *a3;
  uint64_t result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (!result)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)(v11 - 0x1000000000000000) >> 61 == 7)
    {
      uint64_t result = swift_slowAlloc();
      if ((unint64_t)(v11 - 0x400000000000000) >> 59 == 31)
      {
        float v12 = (void *)result;
        uint64_t result = swift_slowAlloc();
        if ((v11 & 0x8000000000000000) == 0)
        {
          uint64_t v13 = result;
          char v55 = v9;
          if (v11)
          {
            if ((a1 & 0xC000000000000001) != 0)
            {
              uint64_t v14 = 0;
              float v15 = (_OWORD *)(result + 16);
              do
              {
                uint64_t v16 = *(void *)(MEMORY[0x22A689930](v14, a1) + 16);
                swift_unknownObjectRelease();
                v12[v14] = v16;
                uint64_t v17 = MEMORY[0x22A689930](v14, a1);
                long long v56 = *(_OWORD *)(v17 + 48);
                long long v57 = *(_OWORD *)(v17 + 32);
                swift_unknownObjectRelease();
                *(v15 - 1) = v57;
                *float v15 = v56;
                v15 += 2;
                ++v14;
              }
              while (v11 != v14);
            }
            else
            {
              long long v18 = (uint64_t *)(a1 + 32);
              uint64_t v19 = (_OWORD *)(result + 16);
              Swift::String v20 = v12;
              uint64_t v21 = v11;
              do
              {
                uint64_t v22 = *v18++;
                *v20++ = *(void *)(v22 + 16);
                long long v23 = *(_OWORD *)(v22 + 48);
                *(v19 - 1) = *(_OWORD *)(v22 + 32);
                _OWORD *v19 = v23;
                v19 += 2;
                --v21;
              }
              while (v21);
            }
          }
          uint64_t v24 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v24, (uint64_t)v59);
          uint64_t v25 = v61;
          uint64_t v26 = v62;
          __swift_project_boxed_opaque_existential_1(v59, v61);
          (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
          uint64_t Compound = REAssetManagerCollisionShapeAssetCreateCompound();
          type metadata accessor for ShapeResource();
          uint64_t v28 = swift_allocObject();
          *(void *)(v28 + 16) = Compound;
          REPoseIdentity();
          *(_OWORD *)(v28 + 32) = v29;
          *(_OWORD *)(v28 + 48) = v30;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          MEMORY[0x22A696500](v13, -1, -1);
          MEMORY[0x22A696500](v12, -1, -1);
          swift_bridgeObjectRelease();
          char v9 = v55;
          goto LABEL_16;
        }
LABEL_27:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  char v58 = v9;
  swift_retain();
  uint64_t v31 = swift_retain();
  PhysicsBodyComponent.init(shape:density:material:mode:)(v31, a2, &v58, MEMORY[0x263F370A8], (uint64_t)v59, a5);
  int v32 = v60;
  long long v33 = v62;
  long long v34 = v63;
  long long v35 = v64;
  uint64_t v36 = v65;
  char v37 = v66;
  char v38 = v67;
  char v39 = v68;
  char v40 = v69;
  char v41 = v70;
  char v42 = v71;
  char v43 = v72;
  char v44 = v73;
  long long v45 = v74;
  long long v46 = v75;
  long long v47 = v76;
  long long v48 = v77;
  char v49 = v78;
  *(unsigned char *)a4 = v59[0];
  *(_DWORD *)(a4 + 16) = v32;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v34;
  *(_OWORD *)(a4 + 64) = v35;
  *(void *)(a4 + 80) = v36;
  *(unsigned char *)(a4 + 88) = v37;
  *(unsigned char *)(a4 + 89) = v38;
  *(unsigned char *)(a4 + 90) = v39;
  *(unsigned char *)(a4 + 91) = v40;
  *(unsigned char *)(a4 + 92) = v41;
  *(unsigned char *)(a4 + 93) = v42;
  *(unsigned char *)(a4 + 94) = v43;
  *(unsigned char *)(a4 + 95) = v44;
  *(_OWORD *)(a4 + 96) = v45;
  *(_OWORD *)(a4 + 112) = v46;
  *(_OWORD *)(a4 + 128) = v47;
  *(_OWORD *)(a4 + 144) = v48;
  *(unsigned char *)(a4 + 160) = v49;
  *(void *)(a4 + 164) = v79;
  uint64_t v50 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22A6922C0](*(void *)(v50 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v51 < 0.0) {
      float v51 = 0.0;
    }
    *(float *)(a4 + 164) = v51;
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    float v53 = v52;
    swift_release();
    uint64_t result = swift_release();
    if (v53 < 0.0) {
      float v54 = 0.0;
    }
    else {
      float v54 = v53;
    }
    *(float *)(a4 + 168) = v54;
  }
  else
  {
    swift_release();
    return swift_release();
  }
  return result;
}

double PhysicsBodyComponent.init(shape:mass:material:mode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  return PhysicsBodyComponent.init(shape:density:material:mode:)(a1, a2, a3, MEMORY[0x263F370B0], a4, a5);
}

double PhysicsBodyComponent.init(shape:density:material:mode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void (*a4)(_OWORD *__return_ptr, uint64_t, float)@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  char v11 = *a3;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = *(void *)(a1 + 16);
  swift_retain();
  a4(v24, v12, a6);
  long long v22 = v24[1];
  long long v23 = v24[0];
  long long v21 = v24[2];
  int v13 = v25;
  if (one-time initialization token for identity == -1)
  {
    if (a2)
    {
LABEL_7:
      uint64_t v14 = a2;
      goto LABEL_10;
    }
  }
  else
  {
    swift_once();
    if (a2) {
      goto LABEL_7;
    }
  }
  uint64_t v14 = static PhysicsMaterialResource.default;
  swift_retain();
LABEL_10:
  swift_retain();
  swift_release();
  uint64_t v15 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22A6922C0](*(void *)(v15 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v16 < 0.0) {
      float v17 = 0.0;
    }
    else {
      float v17 = v16;
    }
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    float v19 = v18;
    swift_release();
    if (v19 < 0.0) {
      float v19 = 0.0;
    }
  }
  else
  {
    swift_release();
    float v19 = 0.25;
    float v17 = 0.02;
  }
  swift_release();
  *(unsigned char *)a5 = v11;
  *(_DWORD *)(a5 + 16) = v13;
  *(_OWORD *)(a5 + 32) = v21;
  *(_OWORD *)(a5 + 48) = v23;
  *(_OWORD *)(a5 + 64) = v22;
  *(void *)(a5 + 80) = v14;
  double result = 0.0;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(void *)(a5 + 152) = 0;
  *(unsigned char *)(a5 + 160) = 1;
  *(float *)(a5 + 164) = v17;
  *(float *)(a5 + 168) = v19;
  return result;
}

uint64_t PhysicsBodyComponent.init(shapes:mass:material:mode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  char v9 = *a3;
  uint64_t result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (result)
  {
    uint64_t v11 = result;
    swift_bridgeObjectRelease();
LABEL_16:
    char v52 = v9;
    PhysicsBodyComponent.init(shape:density:material:mode:)(v11, a2, &v52, MEMORY[0x263F370B0], (uint64_t)v53, a5);
    int v31 = v54;
    long long v32 = v56;
    long long v33 = v57;
    long long v34 = v58;
    uint64_t v35 = v59;
    char v36 = v60;
    char v37 = v61;
    char v38 = v62;
    char v39 = v63;
    char v40 = v64;
    char v41 = v65;
    char v42 = v66;
    char v43 = v67;
    long long v44 = v68;
    long long v45 = v69;
    long long v46 = v70;
    long long v47 = v71;
    uint64_t result = v72;
    uint64_t v48 = v73;
    *(unsigned char *)a4 = v53[0];
    *(_DWORD *)(a4 + 16) = v31;
    *(_OWORD *)(a4 + 32) = v32;
    *(_OWORD *)(a4 + 48) = v33;
    *(_OWORD *)(a4 + 64) = v34;
    *(void *)(a4 + 80) = v35;
    *(unsigned char *)(a4 + 88) = v36;
    *(unsigned char *)(a4 + 89) = v37;
    *(unsigned char *)(a4 + 90) = v38;
    *(unsigned char *)(a4 + 91) = v39;
    *(unsigned char *)(a4 + 92) = v40;
    *(unsigned char *)(a4 + 93) = v41;
    *(unsigned char *)(a4 + 94) = v42;
    *(unsigned char *)(a4 + 95) = v43;
    *(_OWORD *)(a4 + 96) = v44;
    *(_OWORD *)(a4 + 112) = v45;
    *(_OWORD *)(a4 + 128) = v46;
    *(_OWORD *)(a4 + 144) = v47;
    *(unsigned char *)(a4 + 160) = result;
    *(void *)(a4 + 164) = v48;
    return result;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = swift_slowAlloc();
  if ((unint64_t)(v12 - 0x400000000000000) >> 59 != 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int v13 = (void *)result;
  uint64_t result = swift_slowAlloc();
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = result;
    uint64_t v49 = a2;
    if (v12)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v15 = 0;
        float v16 = (_OWORD *)(result + 16);
        do
        {
          uint64_t v17 = *(void *)(MEMORY[0x22A689930](v15, a1) + 16);
          swift_unknownObjectRelease();
          v13[v15] = v17;
          uint64_t v18 = MEMORY[0x22A689930](v15, a1);
          long long v50 = *(_OWORD *)(v18 + 48);
          long long v51 = *(_OWORD *)(v18 + 32);
          swift_unknownObjectRelease();
          *(v16 - 1) = v51;
          *float v16 = v50;
          v16 += 2;
          ++v15;
        }
        while (v12 != v15);
      }
      else
      {
        float v19 = (uint64_t *)(a1 + 32);
        Swift::String v20 = (_OWORD *)(result + 16);
        long long v21 = v13;
        uint64_t v22 = v12;
        do
        {
          uint64_t v23 = *v19++;
          *v21++ = *(void *)(v23 + 16);
          long long v24 = *(_OWORD *)(v23 + 48);
          *(v20 - 1) = *(_OWORD *)(v23 + 32);
          *Swift::String v20 = v24;
          v20 += 2;
          --v22;
        }
        while (v22);
      }
    }
    uint64_t v25 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v25, (uint64_t)v53);
    uint64_t v26 = v55;
    uint64_t v27 = v56;
    __swift_project_boxed_opaque_existential_1(v53, v55);
    (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    uint64_t Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v11 + 32) = v29;
    *(_OWORD *)(v11 + 48) = v30;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x22A696500](v14, -1, -1);
    MEMORY[0x22A696500](v13, -1, -1);
    swift_bridgeObjectRelease();
    a2 = v49;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t PhysicsBodyComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  swift_retain();
  unsigned int MotionType = RERigidBodyComponentGetMotionType();
  if (MotionType >= 3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  char v3 = MotionType;
  RERigidBodyComponentGetMassFrame();
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t Material = RERigidBodyComponentGetMaterial();
  char v23 = v3;
  if (!Material)
  {
    uint64_t v7 = static PhysicsMaterialResource.default;
    swift_retain();
    goto LABEL_14;
  }
  uint64_t v5 = Material;
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for PhysicsMaterialResource();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      uint64_t v7 = v6;
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
  }
  type metadata accessor for PhysicsMaterialResource();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 32) = v5;
  REPhysicsMaterialAssetGetStaticFriction();
  *(_DWORD *)(v7 + 16) = v8;
  REPhysicsMaterialAssetGetDynamicFriction();
  *(_DWORD *)(v7 + 20) = v9;
  REPhysicsMaterialAssetGetRestitution();
  *(_DWORD *)(v7 + 24) = v10;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  swift_unknownObjectRelease();
LABEL_15:
  char LockTranslationX = RERigidBodyComponentGetLockTranslationX();
  char LockTranslationY = RERigidBodyComponentGetLockTranslationY();
  char LockTranslationZ = RERigidBodyComponentGetLockTranslationZ();
  char LockRotationX = RERigidBodyComponentGetLockRotationX();
  char LockRotationY = RERigidBodyComponentGetLockRotationY();
  char LockRotationZ = RERigidBodyComponentGetLockRotationZ();
  char CCDEnabled = RERigidBodyComponentGetCCDEnabled();
  char GravityEnabled = RERigidBodyComponentGetGravityEnabled();
  RERigidBodyComponentGetLinearDamping();
  RERigidBodyComponentGetAngularDamping();
  RERigidBodyComponentGetLinearDamping();
  if (v18 < 0.0) {
    float v19 = 0.0;
  }
  else {
    float v19 = v18;
  }
  uint64_t result = RERigidBodyComponentGetAngularDamping();
  *(unsigned char *)a1 = v23;
  if (v21 < 0.0) {
    float v21 = 0.0;
  }
  *(_DWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v25;
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = LockTranslationX;
  *(unsigned char *)(a1 + 89) = LockTranslationY;
  *(unsigned char *)(a1 + 90) = LockTranslationZ;
  *(unsigned char *)(a1 + 91) = LockRotationX;
  *(unsigned char *)(a1 + 92) = LockRotationY;
  *(unsigned char *)(a1 + 93) = LockRotationZ;
  *(unsigned char *)(a1 + 94) = CCDEnabled;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 143) = 0u;
  *(unsigned char *)(a1 + 159) = 0;
  *(unsigned char *)(a1 + 160) = GravityEnabled;
  *(float *)(a1 + 164) = v19;
  *(float *)(a1 + 168) = v21;
  return result;
}

uint64_t static PhysicsBodyComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return PhysicsBodyComponent.init(_:)(a1);
}

uint64_t PhysicsBodyComponent.__toCore(_:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  char v2 = *(unsigned char *)(v0 + 95);
  RERigidBodyComponentSetMotionType();
  REMakeMassFrame();
  RERigidBodyComponentSetMassFrame();
  if (!*(void *)(v1 + 32) || !REAssetHandleIsLoaded())
  {
    char v3 = v2;
    uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)&v9);
    uint64_t v5 = *((void *)&v10 + 1);
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v7 = REAssetManagerPhysicsMaterialAssetCreate2();
    if (!v7)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    *(void *)(v1 + 32) = v7;
    char v2 = v3;
  }
  RERigidBodyComponentSetMaterial();
  RERigidBodyComponentSetLockTranslationX();
  RERigidBodyComponentSetLockTranslationY();
  RERigidBodyComponentSetLockTranslationZ();
  RERigidBodyComponentSetLockRotationX();
  RERigidBodyComponentSetLockRotationY();
  RERigidBodyComponentSetLockRotationZ();
  RERigidBodyComponentSetCCDEnabled();
  RERigidBodyComponentSetCCDVelocityThreshold();
  RERigidBodyComponentSetCanSleep();
  RERigidBodyComponentSetGravityEnabled();
  RERigidBodyComponentSetLinearDamping();
  RERigidBodyComponentSetAngularDamping();
  RERigidBodyComponentAddUserForce();
  RERigidBodyComponentAddUserTorque();
  RERigidBodyComponentAddUserLinearImpulse();
  RERigidBodyComponentAddUserAngularImpulse();
  if (v2) {
    RERigidBodyComponentTeleport();
  }
  return RENetworkMarkComponentDirty();
}

void static PhysicsBodyComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 22;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X8>)
{
  return PhysicsBodyComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsBodyComponent(_DWORD *a1@<X8>)
{
  *a1 = 22;
}

uint64_t PhysicsBodyComponent.isAffectedByGravity.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsBodyComponent.isAffectedByGravity.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 160) = result;
  return result;
}

unsigned char *(*PhysicsBodyComponent.isAffectedByGravity.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 160);
  return PhysicsBodyComponent.isAffectedByGravity.modify;
}

unsigned char *PhysicsBodyComponent.isAffectedByGravity.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 160) = result[8];
  return result;
}

float PhysicsBodyComponent.linearDamping.getter()
{
  return *(float *)(v0 + 164);
}

float *(*PhysicsBodyComponent.linearDamping.modify(uint64_t a1))(float *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 164);
  return PhysicsBodyComponent.linearDamping.modify;
}

float *PhysicsBodyComponent.linearDamping.modify(float *result)
{
  float v1 = result[2];
  if (v1 < 0.0) {
    float v1 = 0.0;
  }
  *(float *)(*(void *)result + 164) = v1;
  return result;
}

float PhysicsBodyComponent.angularDamping.getter()
{
  return *(float *)(v0 + 168);
}

float *(*PhysicsBodyComponent.angularDamping.modify(uint64_t a1))(float *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 168);
  return PhysicsBodyComponent.angularDamping.modify;
}

float *PhysicsBodyComponent.angularDamping.modify(float *result)
{
  float v1 = result[2];
  if (v1 < 0.0) {
    float v1 = 0.0;
  }
  *(float *)(*(void *)result + 168) = v1;
  return result;
}

uint64_t PhysicsBodyComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v37 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v3 - 8);
  long long v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = *v1;
  int v6 = *((_DWORD *)v1 + 4);
  long long v7 = *((_OWORD *)v1 + 3);
  long long v31 = *((_OWORD *)v1 + 2);
  long long v30 = v7;
  long long v29 = *((_OWORD *)v1 + 4);
  uint64_t v8 = *((void *)v1 + 10);
  int v33 = v1[88];
  char v9 = v1[89];
  int v32 = v1[90];
  char v10 = v1[91];
  char v11 = v1[92];
  char v12 = v1[93];
  char v13 = v1[94];
  LOBYTE(v4) = v1[95];
  long long v14 = *((_OWORD *)v1 + 6);
  long long v15 = *((_OWORD *)v1 + 7);
  long long v16 = *((_OWORD *)v1 + 8);
  long long v17 = *((_OWORD *)v1 + 9);
  char v18 = v1[160];
  int v19 = *((_DWORD *)v1 + 41);
  int v20 = *((_DWORD *)v1 + 42);
  char v39 = v5;
  int v40 = v6;
  long long v41 = v31;
  long long v42 = v7;
  long long v43 = v29;
  uint64_t v44 = v8;
  char v45 = v33;
  char v46 = v9;
  char v47 = v32;
  char v48 = v10;
  char v49 = v11;
  char v50 = v12;
  char v51 = v13;
  char v52 = v4;
  long long v53 = v14;
  long long v54 = v15;
  long long v55 = v16;
  long long v56 = v17;
  char v57 = v18;
  int v58 = v19;
  int v59 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_228325BC0;
  strcpy((char *)(v21 + 32), "massProperties");
  *(unsigned char *)(v21 + 47) = -18;
  *(void *)(v21 + 72) = &type metadata for PhysicsMassProperties;
  uint64_t v22 = swift_allocObject();
  *(void *)(v21 + 48) = v22;
  *(_DWORD *)(v22 + 16) = v6;
  long long v23 = v30;
  *(_OWORD *)(v22 + 32) = v31;
  *(_OWORD *)(v22 + 48) = v23;
  *(_OWORD *)(v22 + 64) = v29;
  *(void *)(v21 + 80) = 0x6C6169726574616DLL;
  *(void *)(v21 + 88) = 0xE800000000000000;
  uint64_t v24 = type metadata accessor for PhysicsMaterialResource();
  *(void *)(v21 + 96) = v8;
  *(void *)(v21 + 120) = v24;
  *(void *)(v21 + 128) = 1701080941;
  *(void *)(v21 + 136) = 0xE400000000000000;
  *(unsigned char *)(v21 + 144) = v5;
  *(void *)(v21 + 168) = &type metadata for PhysicsBodyMode;
  *(void *)(v21 + 176) = 0xD000000000000025;
  *(void *)(v21 + 184) = 0x8000000228350660;
  uint64_t v25 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v21 + 192) = v13;
  *(void *)(v21 + 216) = v25;
  *(void *)(v21 + 224) = 0xD000000000000010;
  *(void *)(v21 + 232) = 0x8000000228350690;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (x: Bool, y: Bool, z: Bool));
  *(unsigned char *)(v21 + 240) = v10;
  *(unsigned char *)(v21 + 241) = v11;
  *(unsigned char *)(v21 + 242) = v12;
  *(void *)(v21 + 264) = v26;
  *(void *)(v21 + 272) = 0xD000000000000013;
  *(void *)(v21 + 280) = 0x80000002283506B0;
  *(unsigned char *)(v21 + 288) = v33;
  *(unsigned char *)(v21 + 289) = v9;
  *(unsigned char *)(v21 + 290) = v32;
  *(void *)(v21 + 312) = v26;
  *(void *)(v21 + 320) = 0xD000000000000013;
  *(void *)(v21 + 328) = 0x80000002283506D0;
  *(unsigned char *)(v21 + 336) = v18;
  *(void *)(v21 + 360) = v25;
  strcpy((char *)(v21 + 368), "angularDamping");
  *(unsigned char *)(v21 + 383) = -18;
  *(void *)(v21 + 408) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v21 + 384) = v20;
  uint64_t v27 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v34, 1, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v35, *MEMORY[0x263F8E830], v37);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static PhysicsBodyComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[88];
  int v3 = a1[89];
  int v4 = a1[90];
  int v5 = a1[91];
  int v6 = a1[92];
  int v7 = a1[93];
  int v8 = a1[94];
  int v21 = a2[88];
  int v22 = a2[89];
  int v23 = a2[90];
  int v24 = a2[91];
  int v25 = a2[92];
  int v9 = a2[93];
  int v10 = a2[94];
  long long v12 = *((_OWORD *)a2 + 3);
  long long v11 = *((_OWORD *)a2 + 4);
  long long v13 = *((_OWORD *)a2 + 2);
  int v14 = *((_DWORD *)a2 + 4);
  long long v16 = *((_OWORD *)a1 + 3);
  long long v15 = *((_OWORD *)a1 + 4);
  long long v17 = *((_OWORD *)a1 + 2);
  v30[0] = *((_DWORD *)a1 + 4);
  long long v31 = v17;
  long long v32 = v16;
  long long v33 = v15;
  v26[0] = v14;
  long long v27 = v13;
  long long v28 = v12;
  long long v29 = v11;
  if (!specialized static PhysicsMassProperties.== infix(_:_:)((uint64_t)v30, (uint64_t)v26)) {
    return 0;
  }
  int v20 = v8;
  uint64_t v18 = PhysicsMaterialResource.coreAsset.getter();
  return (v18 == PhysicsMaterialResource.coreAsset.getter()) & ~(v2 ^ v21) & (v3 ^ v22 ^ 1) & ~(v4 ^ v23) & ~(v5 ^ v24) & ~(v6 ^ v25) & ~(v7 ^ v9) & (v20 ^ v10 ^ 1u);
}

uint64_t sub_227EADA5C()
{
  return MEMORY[0x270FA0238](v0, 80, 15);
}

uint64_t sub_227EADA6C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 160);
  return result;
}

unsigned char *sub_227EADA78(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = *result;
  return result;
}

float sub_227EADA84@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 164);
  *a2 = result;
  return result;
}

float *sub_227EADA90(float *result, uint64_t a2)
{
  float v2 = *result;
  if (*result < 0.0) {
    float v2 = 0.0;
  }
  *(float *)(a2 + 164) = v2;
  return result;
}

float sub_227EADAA8@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 168);
  *a2 = result;
  return result;
}

float *sub_227EADAB4(float *result, uint64_t a2)
{
  float v2 = *result;
  if (*result < 0.0) {
    float v2 = 0.0;
  }
  *(float *)(a2 + 168) = v2;
  return result;
}

uint64_t destroy for PhysicsBodyComponent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  __int16 v5 = *(_WORD *)(a2 + 91);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(_WORD *)(a1 + 91) = v5;
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  *(unsigned char *)(a1 + 95) = *(unsigned char *)(a2 + 95);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  return a1;
}

__n128 __swift_memcpy172_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 156) = *(long long *)((char *)a2 + 156);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  *(unsigned char *)(a1 + 95) = *(unsigned char *)(a2 + 95);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsBodyComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 172)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsBodyComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 172) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 172) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsBodyComponent()
{
  return &type metadata for PhysicsBodyComponent;
}

RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional __swiftcall EmphasizeAction.EmphasisAnimationStyle.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *float v1 = v2;
  return (RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional)rawValue;
}

RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EmphasizeAction.EmphasisAnimationStyle(Swift::Int *a1)
{
  return EmphasizeAction.EmphasisAnimationStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction.EmphasisAnimationStyle()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction.EmphasisAnimationStyle()
{
  return RawRepresentable<>.encode(to:)();
}

RealityFoundation::EmphasizeAction::EmphasisMotionType_optional __swiftcall EmphasizeAction.EmphasisMotionType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 8;
  if ((unint64_t)rawValue < 8) {
    char v2 = rawValue;
  }
  *float v1 = v2;
  return (RealityFoundation::EmphasizeAction::EmphasisMotionType_optional)rawValue;
}

uint64_t EmphasizeAction.EmphasisMotionType.rawValue.getter()
{
  return *v0;
}

RealityFoundation::EmphasizeAction::EmphasisMotionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EmphasizeAction.EmphasisMotionType(Swift::Int *a1)
{
  return EmphasizeAction.EmphasisMotionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EmphasizeAction.EmphasisMotionType(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction.EmphasisMotionType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction.EmphasisMotionType()
{
  return RawRepresentable<>.encode(to:)();
}

void EmphasizeAction.motionType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *EmphasizeAction.motionType.setter(unsigned char *result)
{
  *float v1 = *result;
  return result;
}

uint64_t (*EmphasizeAction.motionType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EmphasizeAction.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *EmphasizeAction.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*EmphasizeAction.style.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *EmphasizeAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

uint64_t EmphasizeAction.isAdditive.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t EmphasizeAction.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*EmphasizeAction.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::EmphasizeAction __swiftcall EmphasizeAction.init(motionType:style:isAdditive:)(RealityFoundation::EmphasizeAction::EmphasisMotionType motionType, RealityFoundation::EmphasizeAction::EmphasisAnimationStyle style, Swift::Bool isAdditive)
{
  char v4 = *(unsigned char *)style;
  *long long v3 = *(unsigned char *)motionType;
  v3[1] = v4;
  v3[2] = isAdditive;
  result.motionType = motionType;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EmphasizeAction.CodingKeys()
{
  uint64_t v1 = 0x656C797473;
  if (*v0 != 1) {
    uint64_t v1 = 0x6974696464417369;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79546E6F69746F6DLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EmphasizeAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized EmphasizeAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmphasizeAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EmphasizeAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t EmphasizeAction.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EmphasizeAction.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v9 = v1[1];
  v11[2] = v1[2];
  int v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = v8;
  char v16 = 0;
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v15 = v12;
    char v14 = 1;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType()
{
  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

uint64_t EmphasizeAction.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EmphasizeAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v17 = 0;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v18;
    char v15 = 1;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = v16;
    char v14 = 2;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance EmphasizeAction()
{
  return *(unsigned __int8 *)(v0 + 2);
}

ValueMetadata *protocol witness for EntityAction.animatedValueType.getter in conformance EmphasizeAction()
{
  return &type metadata for Transform;
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return EmphasizeAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction(void *a1)
{
  return EmphasizeAction.encode(to:)(a1);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EmphasizeAction(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for EmphasizeAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmphasizeAction()
{
  return &type metadata for EmphasizeAction;
}

ValueMetadata *type metadata accessor for EmphasizeAction.EmphasisAnimationStyle()
{
  return &type metadata for EmphasizeAction.EmphasisAnimationStyle;
}

unsigned char *storeEnumTagSinglePayload for EmphasizeAction.EmphasisMotionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EAE9F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmphasizeAction.EmphasisMotionType()
{
  return &type metadata for EmphasizeAction.EmphasisMotionType;
}

unsigned char *storeEnumTagSinglePayload for EmphasizeAction.EmphasisAnimationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EAEAF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for EmphasizeAction.CodingKeys()
{
  return &unk_26DC91868;
}

uint64_t EmphasizeActionHandler.actionStarted(event:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (v2)
  {
    long long v11 = *a1;
    uint64_t v12 = v2;
    long long v20 = *(long long *)((char *)a1 + 136);
    long long v21 = *(long long *)((char *)a1 + 152);
    long long v22 = *(long long *)((char *)a1 + 168);
    long long v23 = *(long long *)((char *)a1 + 184);
    long long v16 = *(long long *)((char *)a1 + 72);
    long long v17 = *(long long *)((char *)a1 + 88);
    long long v18 = *(long long *)((char *)a1 + 104);
    long long v19 = *(long long *)((char *)a1 + 120);
    long long v13 = *(long long *)((char *)a1 + 24);
    long long v14 = *(long long *)((char *)a1 + 40);
    long long v15 = *(long long *)((char *)a1 + 56);
    swift_retain();
    int v3 = specialized EmphasizeActionHandler.createTransformData(event:targetEntity:)(&v11, v2);
    if (v3)
    {
      unsigned int v4 = v3;
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      *(void *)(v1 + 8) = v4;
      *(double *)uint64_t v1 = 1.0 / (double)*((uint64_t *)v4 + 2);
      return result;
    }
    *(void *)&long long v11 = 0;
    *((void *)&v11 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    int v24 = &type metadata for EmphasizeAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmphasizeAction.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000034;
    v10._object = (void *)0x8000000228350750;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(v11, *((void *)&v11 + 1));
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)&v11, "Handler for ");
    BYTE13(v11) = 0;
    HIWORD(v11) = -5120;
    int v24 = &type metadata for EmphasizeAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmphasizeAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x8000000228350720;
    v7._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v7);
    specialized static AnimationLogger.logError(_:)(v11, *((void *)&v11 + 1));
  }
  return swift_bridgeObjectRelease();
}

uint64_t EmphasizeActionHandler.actionUpdated(event:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  v35[4] = *(_OWORD *)(a1 + 160);
  v35[5] = v2;
  uint64_t v36 = *(void *)(a1 + 192);
  long long v3 = *(_OWORD *)(a1 + 112);
  v35[0] = *(_OWORD *)(a1 + 96);
  v35[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  long long v35[2] = *(_OWORD *)(a1 + 128);
  v35[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v34[2] = *(_OWORD *)(a1 + 32);
  v34[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v34[4] = *(_OWORD *)(a1 + 64);
  v34[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v34[0] = *(_OWORD *)a1;
  v34[1] = v7;
  outlined init with take of Transform?((uint64_t)v35, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  uint64_t result = outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v38, &demangling cache variable for type metadata for Double?);
  if ((v39 & 1) == 0)
  {
    double v9 = v38;
    outlined retain of ActionEvent<EmphasizeAction>((uint64_t)v34);
    specialized ActionEvent.animationState.getter((uint64_t)&v28);
    outlined release of ActionEvent<EmphasizeAction>((uint64_t)v34);
    if (!*((void *)&v29 + 1)) {
      return outlined destroy of AnimationStateProtocol?((uint64_t)&v28);
    }
    outlined init with take of BindableDataInternal(&v28, (uint64_t)v31);
    double v10 = v9 / *(double *)v1;
    double v11 = floor(v10);
    double v12 = v11 + ceil(v10 - v11) + 0.5;
    if ((~*(void *)&v12 & 0x7FF0000000000000) != 0)
    {
      if (v12 > -9.22337204e18)
      {
        if (v12 < 9.22337204e18)
        {
          uint64_t v13 = (uint64_t)v12;
          uint64_t v14 = *(void *)(v1 + 8);
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15 > (uint64_t)v12)
          {
            if (v13)
            {
              if (!__OFSUB__(v13, 1))
              {
                if (v13 - 1 < (unint64_t)v15)
                {
                  if ((v13 & 0x8000000000000000) == 0)
                  {
                    RESRTLerp();
                    long long v26 = v16;
                    long long v27 = v17;
                    long long v25 = v18;
                    if (one-time initialization token for identity == -1)
                    {
LABEL_12:
                      uint64_t v19 = v32;
                      uint64_t v20 = v33;
                      __swift_project_boxed_opaque_existential_1(v31, v32);
                      long long v28 = v26;
                      long long v29 = v27;
                      long long v30 = v25;
LABEL_19:
                      (*(void (**)(long long *, ValueMetadata *, uint64_t, uint64_t))(v20 + 64))(&v28, &type metadata for Transform, v19, v20);
                      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
                    }
LABEL_28:
                    swift_once();
                    goto LABEL_12;
                  }
LABEL_27:
                  __break(1u);
                  goto LABEL_28;
                }
LABEL_26:
                __break(1u);
                goto LABEL_27;
              }
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
            uint64_t v19 = v32;
            uint64_t v20 = v33;
            uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(v31, v32);
            if (!v15)
            {
              __break(1u);
              return result;
            }
            long long v22 = *(_OWORD *)(v14 + 32);
            long long v23 = *(_OWORD *)(v14 + 48);
            long long v24 = *(_OWORD *)(v14 + 64);
LABEL_18:
            long long v28 = v22;
            long long v29 = v23;
            long long v30 = v24;
            goto LABEL_19;
          }
          uint64_t v19 = v32;
          uint64_t v20 = v33;
          __swift_project_boxed_opaque_existential_1(v31, v32);
          if (v15)
          {
            long long v21 = (long long *)(v14 + 48 * v15);
            long long v22 = *(v21 - 1);
            long long v23 = *v21;
            long long v24 = v21[1];
            goto LABEL_18;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

uint64_t specialized ActionEvent.animationState.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 192)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 184);
  }
  if (*(unsigned char *)(v1 + 208)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 200);
  }
  if (*(unsigned char *)(v1 + 176)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 168);
  }
  outlined init with take of Transform?(v1 + 160, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned char *)(v1 + 352)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 344);
  }
  if (*(unsigned char *)(v1 + 368)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 360);
  }
  if (*(unsigned char *)(v1 + 336)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 328);
  }
  outlined init with take of Transform?(v1 + 320, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned char *)(v1 + 256)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 248);
  }
  if (*(unsigned char *)(v1 + 272)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 264);
  }
  if (*(unsigned char *)(v1 + 240)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 232);
  }
  outlined init with take of Transform?(v1 + 224, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned char *)(v1 + 208)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 200);
  }
  if (*(unsigned char *)(v1 + 224)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 216);
  }
  if (*(unsigned char *)(v1 + 192)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 184);
  }
  outlined init with take of Transform?(v1 + 176, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned char *)(v1 + 88)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 80);
  }
  if (*(unsigned char *)(v1 + 104)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 96);
  }
  if (*(unsigned char *)(v1 + 72)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 64);
  }
  outlined init with take of Transform?(v1 + 56, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned char *)(v1 + 144)) {
    double v3 = -1.0;
  }
  else {
    double v3 = *(double *)(v1 + 136);
  }
  if (*(unsigned char *)(v1 + 160)) {
    double v4 = -1.0;
  }
  else {
    double v4 = *(double *)(v1 + 152);
  }
  if (*(unsigned char *)(v1 + 128)) {
    double v5 = -1.0;
  }
  else {
    double v5 = *(double *)(v1 + 120);
  }
  outlined init with take of Transform?(v1 + 112, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        Swift::String v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        double v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    uint64_t result = swift_allocObject();
    *(void *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t specialized EmphasizeAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79546E6F69746F6DLL && a2 == 0xEA00000000006570;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t outlined retain of ActionEvent<EmphasizeAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ActionEvent<EmphasizeAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AnimationStateProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationStateProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_227EB0188()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float *specialized EmphasizeActionHandler.createTransformData(event:targetEntity:)(unsigned char *a1, uint64_t a2)
{
  char v2 = a1[10];
  switch(a1[8])
  {
    case 1:
      char v8 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeBlinkAnimation(style:)(&v8);
      break;
    case 2:
      char v9 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeBounceAnimation(style:)(&v9);
      break;
    case 3:
      char v10 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeFlipAnimation(style:)(&v10);
      break;
    case 4:
      char v11 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeFloatAnimation(style:)(&v11);
      break;
    case 5:
      char v12 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeJiggleAnimation(style:)(&v12);
      break;
    case 6:
      char v13 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizePulseAnimation(style:)(&v13);
      break;
    case 7:
      char v14 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizeSpinAnimation(style:)(&v14);
      break;
    default:
      char v7 = a1[9];
      double v4 = (float *)specialized static EmphasizeAnimations.createEmphasizePopAnimation(style:)(&v7);
      break;
  }
  double v5 = specialized static EmphasizeAnimations.bakeEmphasisTransforms(_:transforms:isAdditive:)(a2, v4, v2);
  swift_bridgeObjectRelease();
  return v5;
}

void *assignWithCopy for EmphasizeActionHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for EmphasizeActionHandler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EmphasizeActionHandler()
{
  return &type metadata for EmphasizeActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in EmphasizeActionHandler()
{
  return &protocol witness table for EmphasizeAction;
}

uint64_t __RKRuntimeSceneCoordinator.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(v10, (uint64_t)v13);
      if (MEMORY[0x22A696620](v13))
      {
        uint64_t v11 = v14;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v3, a1, a2, a3, ObjectType, v11);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v13);
      v10 += 16;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(v10, (uint64_t)v13);
      if (MEMORY[0x22A696620](v13))
      {
        uint64_t v11 = v14;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v3, a1, a2, a3, ObjectType, v11);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v13);
      v10 += 16;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.addObserver(observer:)(uint64_t a1, uint64_t a2)
{
  double v5 = (void **)(v2 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = MEMORY[0x22A696620](v8);
      if (v9)
      {
        uint64_t v10 = v9;
        swift_unknownObjectRelease();
        if (v10 == a1) {
          return swift_bridgeObjectRelease();
        }
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = a2;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  char v12 = *v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *double v5 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, (unint64_t)v12);
    *double v5 = v12;
  }
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    char v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, (unint64_t)v12);
    *double v5 = v12;
  }
  _OWORD v12[2] = v15 + 1;
  outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver((uint64_t)v16, (uint64_t)&v12[2 * v15 + 4]);
  return swift_endAccess();
}

uint64_t __RKRuntimeSceneCoordinator.removeObserver(observer:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain();
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = MEMORY[0x22A696620](v6);
      if (v8)
      {
        uint64_t v9 = v8;
        swift_unknownObjectRelease();
        if (v9 == a1)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Array.remove(at:)(i, (uint64_t)v10);
          outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v10);
          return swift_endAccess();
        }
      }
      v6 += 16;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver((uint64_t)&v5[2 * a1 + 4], a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = outlined init with take of PhotogrammetrySessionImpl.RequestMap.Entry(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[6 * a1];
    uint64_t v10 = v8[4];
    uint64_t v9 = v8 + 4;
    uint64_t v11 = v9[5];
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 + 1);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 3);
    *(void *)(a2 + 40) = v11;
    char v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 6, 48 * v12);
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  long long v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[8 * a1];
    uint64_t v9 = *((_OWORD *)v7 + 2);
    uint64_t v8 = v7 + 4;
    uint64_t v10 = v8[2];
    uint64_t v11 = v6 - 1;
    char v12 = *((_DWORD *)v8 + 10);
    char v13 = *((unsigned char *)v8 + 44);
    unint64_t v14 = v8[6];
    unint64_t v15 = *((unsigned char *)v8 + 56);
    *(_OWORD *)a2 = v9;
    *(void *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 3);
    *(_DWORD *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 44) = v13;
    *(void *)(a2 + 48) = v14;
    *(unsigned char *)(a2 + 56) = v15;
    if ((uint64_t)(v11 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 8, (v11 - a1) << 6);
      v5[2] = v11;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  long long v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  char v17;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[14 * a1];
    uint64_t v9 = *((_OWORD *)v7 + 2);
    uint64_t v8 = v7 + 4;
    uint64_t v10 = v6 - 1;
    uint64_t v11 = v8[2];
    char v12 = v8[3];
    char v13 = *((_OWORD *)v8 + 2);
    unint64_t v14 = *((_OWORD *)v8 + 3);
    unint64_t v15 = *((_OWORD *)v8 + 4);
    long long v16 = *((_OWORD *)v8 + 5);
    uint64_t v17 = *((unsigned char *)v8 + 96);
    *(_OWORD *)a2 = v9;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v12;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v16;
    *(unsigned char *)(a2 + 96) = v17;
    if ((uint64_t)(v10 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 14, 112 * (v10 - a1));
      v5[2] = v10;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[3 * a1];
    uint64_t v10 = v8[4];
    uint64_t v9 = v8 + 4;
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 + 1);
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 3, 24 * v11);
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[20 * a1];
    long long v8 = v7[9];
    unint64_t v9 = v6 - 1;
    a2[6] = v7[8];
    a2[7] = v8;
    long long v10 = v7[11];
    a2[8] = v7[10];
    a2[9] = v10;
    long long v11 = v7[5];
    a2[2] = v7[4];
    a2[3] = v11;
    long long v12 = v7[7];
    a2[4] = v7[6];
    a2[5] = v12;
    long long v13 = v7[3];
    *a2 = v7[2];
    a2[1] = v13;
    uint64_t v14 = v6 - 1 - a1;
    if (v14 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v7 + 2, v7 + 12, 160 * v14);
      v5[2] = v9;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  _OWORD *v7;
  long long v8;
  unint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = &v5[12 * a1];
    long long v8 = v7[5];
    unint64_t v9 = v6 - 1;
    a2[2] = v7[4];
    a2[3] = v8;
    long long v10 = v7[7];
    a2[4] = v7[6];
    a2[5] = v10;
    long long v11 = v7[3];
    *a2 = v7[2];
    a2[1] = v11;
    long long v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v7 + 2, v7 + 8, 96 * v12);
      v5[2] = v9;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKRuntimeSceneCoordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinatorObserver.runtimeSceneCoordinator(_:willSwapFromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinatorObserver.runtimeSceneCoordinator(_:didSwapFromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t type metadata accessor for __RKRuntimeSceneCoordinator()
{
  return self;
}

uint64_t method lookup function for __RKRuntimeSceneCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKRuntimeSceneCoordinator);
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.addObserver(observer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.removeObserver(observer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t initializeWithCopy for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKRuntimeSceneCoordinator.WeakObserver()
{
  return &type metadata for __RKRuntimeSceneCoordinator.WeakObserver;
}

uint64_t outlined init with take of PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t cloneAnchoringComponent(_:)()
{
  uint64_t v0 = type metadata accessor for __REAnchoring();
  MEMORY[0x270FA5388](v0);
  int v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Class = REComponentGetClass();
  uint64_t v4 = REComponentCreateByClassOpaquePointer_0(Class);
  uint64_t Object = RECustomComponentGetObject();
  if (Object && (unint64_t v6 = (uint64_t *)Object, (v7 = RECustomComponentGetObject()) != 0))
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(int *)(v0 + 24);
    if (!*(uint64_t *)((char *)v6 + v9))
    {
      uint64_t v10 = *v6;
      if (*v6)
      {
        type metadata accessor for IntrospectionDataCleanupHelper();
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v10;
        *(uint64_t *)((char *)v6 + v9) = v11;
      }
    }
    outlined init with copy of __REAnchoring((uint64_t)v6, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
    swift_arrayDestroy();
    outlined init with take of __REAnchoringType((uint64_t)v2, v8, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    long long v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  return v4;
}

uint64_t __REAnchoring.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __REAnchoring();
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (const char **)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v11 - 8);
  long long v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(v1 + *(int *)(v8 + 28), (uint64_t)v13);
  outlined init with copy of __REAnchoring(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
  uint64_t v14 = type metadata accessor for __REAnchoringType();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    long long v16 = *v10;
    if (*v10)
    {
      uint64_t v28 = a1;
      uint64_t v17 = strlen(v16);
      uint64_t v18 = *MEMORY[0x263F06F00];
      uint64_t v27 = v4;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 104))(v6, v18, v3);
      uint64_t v19 = Data.Deallocator._deallocator.getter();
      if (v17)
      {
        uint64_t v26 = v19;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_retain();
        uint64_t v20 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        uint64_t v17 = specialized Data._Representation.init(_:count:)(v20, v17);
        unint64_t v22 = v21;
        swift_release();
      }
      else
      {
        long long v24 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
        v24(v16, 0);
        swift_release();
        swift_release();
        unint64_t v22 = 0xC000000000000000;
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType);
      uint64_t v25 = v28;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v25, 0, 1, v14);
      swift_release();
      outlined consume of Data._Representation(v17, v22);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a1, 1, 1, v14);
    }
    outlined destroy of __REAnchoring((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    outlined destroy of __REAnchoring((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
    outlined init with take of __REAnchoringType((uint64_t)v13, a1, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
  }
}

uint64_t key path setter for __REAnchoring.type : __REAnchoring(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v4);
  return __REAnchoring.type.setter((uint64_t)v4);
}

uint64_t __REAnchoring.type.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for __REAnchoringType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType?, __REAnchoringType?));
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v41 - v15;
  uint64_t v42 = type metadata accessor for __REAnchoring();
  long long v43 = v1;
  uint64_t v41 = (uint64_t)v1 + *(int *)(v42 + 20);
  outlined init with copy of __REAnchoringType?(v41, (uint64_t)v16);
  uint64_t v17 = (uint64_t)&v10[*(int *)(v8 + 56)];
  uint64_t v18 = a1;
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v10);
  outlined init with copy of __REAnchoringType?((uint64_t)v16, v17);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
    uint64_t v20 = v18;
    if (v19(v17, 1, v3) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
      return outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for __REAnchoringType?);
    }
  }
  else
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v10, (uint64_t)v13);
    if (v19(v17, 1, v3) != 1)
    {
      outlined init with take of __REAnchoringType(v17, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      char v21 = specialized static __REAnchoringType.== infix(_:_:)((uint64_t)v13, (uint64_t)v6);
      outlined destroy of __REAnchoring((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
      outlined destroy of __REAnchoring((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
      uint64_t v20 = v18;
      if (v21) {
        return outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for __REAnchoringType?);
      }
      goto LABEL_8;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
    outlined destroy of __REAnchoring((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    uint64_t v20 = v18;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (__REAnchoringType?, __REAnchoringType?));
LABEL_8:
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type __REAnchoringType? and conformance <A> A?();
  uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v25 = v24;
  swift_release();
  unint64_t v26 = v25 >> 62;
  uint64_t v27 = 0;
  uint64_t v29 = v42;
  uint64_t v28 = v43;
  switch(v25 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v23), v23)) {
        goto LABEL_37;
      }
      if (HIDWORD(v23) - v23 == 0x7FFFFFFF) {
        goto LABEL_27;
      }
      goto LABEL_18;
    case 2uLL:
      uint64_t v31 = *(void *)(v23 + 16);
      uint64_t v30 = *(void *)(v23 + 24);
      BOOL v32 = __OFSUB__(v30, v31);
      uint64_t v27 = v30 - v31;
      if (v32) {
        goto LABEL_38;
      }
      if (v27 >= 0x7FFFFFFF)
      {
LABEL_27:
        outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for __REAnchoringType?);
        return outlined consume of Data._Representation(v23, v25);
      }
      if (v26 == 2) {
        goto LABEL_20;
      }
LABEL_18:
      LODWORD(v27) = HIDWORD(v23) - v23;
      if (__OFSUB__(HIDWORD(v23), v23)) {
        goto LABEL_39;
      }
      uint64_t v27 = (int)v27;
LABEL_20:
      uint64_t v33 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      if (v33 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x227EB236CLL);
      }
      if (v33 > 0x7FFFFFFF) {
        goto LABEL_36;
      }
      uint64_t v34 = RECIntrospectionAlloc();
      if (*v28)
      {
        uint64_t v35 = *(int *)(v29 + 24);
        swift_release();
        *(uint64_t *)((char *)v28 + v35) = 0;
      }
      uint64_t *v28 = v34;
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v34;
      uint64_t v37 = *(int *)(v29 + 24);
      swift_release();
      *(uint64_t *)((char *)v28 + v37) = v36;
      uint64_t v38 = 0;
      switch((int)v26)
      {
        case 1:
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_40;
          }
          uint64_t v38 = HIDWORD(v23) - (int)v23;
LABEL_30:
          Data.copyBytes(to:count:)();
          goto LABEL_33;
        case 2:
          if (__OFSUB__(*(void *)(v23 + 24), *(void *)(v23 + 16))) {
            goto LABEL_41;
          }
          Data.copyBytes(to:count:)();
          uint64_t v40 = *(void *)(v23 + 16);
          uint64_t v39 = *(void *)(v23 + 24);
          uint64_t v38 = v39 - v40;
          if (__OFSUB__(v39, v40)) {
            goto LABEL_42;
          }
LABEL_33:
          *(unsigned char *)(v34 + v38) = 0;
          outlined consume of Data._Representation(v23, v25);
          uint64_t result = outlined assign with take of __REAnchoringType?(v20, v41);
          break;
        case 3:
          goto LABEL_30;
        default:
          uint64_t v38 = BYTE6(v25);
          goto LABEL_30;
      }
      return result;
    case 3uLL:
      goto LABEL_20;
    default:
      uint64_t v27 = BYTE6(v25);
      goto LABEL_20;
  }
}

uint64_t __REAnchoring.decodedJSON()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  if (*v1)
  {
    uint64_t v8 = strlen(*v1);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F06F00], v3);
    Data.Deallocator._deallocator.getter();
    if (v8)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v8 = specialized Data._Representation.init(_:count:)(v9, v8);
      unint64_t v11 = v10;
      swift_release();
    }
    else
    {
      uint64_t v15 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
      v15(v7, 0);
      swift_release();
      swift_release();
      unint64_t v11 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v16 = type metadata accessor for __REAnchoringType();
    lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
    swift_release();
    return outlined consume of Data._Representation(v8, v11);
  }
  else
  {
    uint64_t v12 = type metadata accessor for __REAnchoringType();
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(a1, 1, 1, v12);
  }
}

uint64_t type metadata accessor for __REAnchoring()
{
  uint64_t result = type metadata singleton initialization cache for __REAnchoring;
  if (!type metadata singleton initialization cache for __REAnchoring) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of __REAnchoringType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*__REAnchoring.type.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  __REAnchoring.type.getter((uint64_t)v4);
  return __REAnchoring.type.modify;
}

void __REAnchoring.type.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v3, (uint64_t)v2);
    __REAnchoring.type.setter((uint64_t)v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    __REAnchoring.type.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t __REAnchoring.Registration.componentType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __REAnchoring.Registration.init()()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  uint64_t v1 = *(void *)(*(void *)(type metadata accessor for __REAnchoring() - 8) + 64);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v1 > 0x7FFFFFFF) {
    goto LABEL_12;
  }
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(), (uint64_t v2 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_8:
    REStructBuilderDestroy();
    type metadata accessor for __REAnchoring.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(void *)(v0 + 16) = v2;
  long long v6 = xmmword_228326110;
  int v7 = 1;
  uint64_t v8 = &v6;
  uint64_t v9 = 0;
  unint64_t v10 = @objc createAnchoringComponentObject(componentType:);
  unint64_t v11 = @objc destroyAnchoringComponentObject(componentType:rawPointer:);
  uint64_t v12 = @objc didAddAnchoringComponentObject(componentRef:);
  long long v13 = @objc willRemoveAnchoringComponentObject(componentRef:);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v2;
  uint64_t v17 = 0;
  uint64_t v3 = RECustomComponentTypeCreate();
  if (!v3)
  {
    lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  REComponentTypeSetCloneCallback();
  *(void *)(v0 + 24) = v4;
  REStructBuilderDestroy();
  return v0;
}

void @objc createAnchoringComponentObject(componentType:)()
{
  uint64_t v0 = type metadata accessor for __REAnchoring();
  MEMORY[0x270FA5388](*(void *)(*(void *)(v0 - 8) + 64));
  uint64_t v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    uint64_t v3 = RECIntrospectionAlloc();
    *uint64_t v2 = 0;
    uint64_t v4 = (char *)v2 + *(int *)(v0 + 20);
    uint64_t v5 = type metadata accessor for __REAnchoringType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    *(void *)((char *)v2 + *(int *)(v0 + 24)) = 0;
    outlined init with take of __REAnchoringType((uint64_t)v2, v3, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
    return;
  }
  __break(1u);
}

uint64_t @objc destroyAnchoringComponentObject(componentType:rawPointer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for __REAnchoring();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAnchoring(a2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
  if (!*(void *)((char *)v5 + *(int *)(v3 + 24)) && *v5) {
    RECIntrospectionFree();
  }
  outlined destroy of __REAnchoring((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
  swift_arrayDestroy();
  return RECIntrospectionFree();
}

uint64_t @objc didAddAnchoringComponentObject(componentRef:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t result = RECustomComponentGetObject();
  if (result)
  {
    uint64_t v7 = result + *(int *)(type metadata accessor for __REAnchoring() + 20);
    outlined init with copy of __REAnchoringType?(v7, (uint64_t)v5);
    uint64_t v8 = type metadata accessor for __REAnchoringType();
    int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v5, 1, v8);
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __REAnchoringType?);
    if (v9 == 1)
    {
      __REAnchoring.decodedJSON()((uint64_t)v2);
      return outlined assign with take of __REAnchoringType?((uint64_t)v2, v7);
    }
  }
  return result;
}

uint64_t @objc willRemoveAnchoringComponentObject(componentRef:)()
{
  uint64_t result = RECustomComponentGetObject();
  if (result)
  {
    uint64_t v1 = result + *(int *)(type metadata accessor for __REAnchoring() + 20);
    outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for __REAnchoringType?);
    uint64_t v2 = type metadata accessor for __REAnchoringType();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
    return v3(v1, 1, 1, v2);
  }
  return result;
}

uint64_t __REAnchoring.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __REAnchoring.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __REAnchoring.registration.getter()
{
  return swift_retain();
}

uint64_t static __REAnchoring.registration.setter(void *a1)
{
  static __REAnchoring.registration = a1;
  return swift_release();
}

uint64_t (*static __REAnchoring.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Scene.__anchoringType.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (static __REAnchoring.registration)
  {
    RESceneGetComponentsOfCustomType();
    if (v2)
    {
      if (RECustomComponentGetObject()) {
        return __REAnchoring.type.getter(a1);
      }
    }
  }
  uint64_t v4 = type metadata accessor for __REAnchoringType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t Scene.__anchoringType.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for __REAnchoringType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration) {
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  uint64_t v14 = *((void *)static __REAnchoring.registration + 3);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for __REAnchoringType?);
    if (REEntityGetCustomComponent()) {
      REEntityRemoveComponentByClass();
    }
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  outlined init with take of __REAnchoringType((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  RESceneGetComponentsOfCustomType();
  if (v16 < 1)
  {
    uint64_t v20 = v2;
    swift_retain();
    if (Scene.AnchorCollection.endIndex.getter())
    {
      uint64_t v17 = Scene.AnchorCollection.subscript.getter(0);
    }
    else
    {
      swift_release();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Scene.__anchoringType.setter);
      uint64_t v17 = specialized AnchorEntity.__allocating_init(world:)(v18);
      swift_retain();
      specialized Scene.AnchorCollection.append(_:)(v17, v2);
    }
    swift_release();
    uint64_t v19 = *(void *)(v17 + 16);
    swift_release();
    if (!MEMORY[0x22A68E460](v19, v14)) {
      goto LABEL_13;
    }
  }
  if (RECustomComponentGetObject())
  {
    outlined init with copy of __REAnchoring((uint64_t)v13, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    __REAnchoring.type.setter((uint64_t)v6);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __REAnchoring((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  }
  else
  {
LABEL_13:
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __REAnchoring((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  }
}

void (*Scene.__anchoringType.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __REAnchoring.registration && (RESceneGetComponentsOfCustomType(), v6) && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v5);
  }
  else
  {
    uint64_t v7 = type metadata accessor for __REAnchoringType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  return Scene.__anchoringType.modify;
}

void Scene.__anchoringType.modify(uint64_t a1, char a2)
{
}

uint64_t Entity.__anchoringType.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject()) {
    return __REAnchoring.type.getter(a1);
  }
  uint64_t v3 = type metadata accessor for __REAnchoringType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 1, 1, v3);
}

uint64_t key path setter for Scene.__anchoringType : Scene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v7 - 8);
  int v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v9);
  return a5(v9);
}

uint64_t Entity.__anchoringType.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration) {
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  uint64_t v13 = *((void *)static __REAnchoring.registration + 3);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for __REAnchoringType?);
    if (REEntityGetCustomComponent()) {
      REEntityRemoveComponentByClass();
    }
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  outlined init with take of __REAnchoringType((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v1 + 16), v13)) && RECustomComponentGetObject())
  {
    outlined init with copy of __REAnchoring((uint64_t)v12, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    __REAnchoring.type.setter((uint64_t)v5);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __REAnchoring((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __REAnchoring((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  }
}

void (*Entity.__anchoringType.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v5);
  }
  else
  {
    uint64_t v6 = type metadata accessor for __REAnchoringType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  return Entity.__anchoringType.modify;
}

void Entity.__anchoringType.modify(uint64_t a1, char a2)
{
}

void Scene.__anchoringType.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  size_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v6, (uint64_t)v5);
    a3(v5);
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    a3(v6);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    size_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for __REAnchoringType?);
    lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for __REAnchoringType();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of __REAnchoringType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __REAnchoring(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of __REAnchoring(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __REAnchoring()
{
  return &protocol witness table for __REAnchoring.Registration;
}

uint64_t sub_227EB3D9C@<X0>(uint64_t a1@<X8>)
{
  return __REAnchoring.type.getter(a1);
}

uint64_t sub_227EB3DC4@<X0>(uint64_t a1@<X8>)
{
  return Scene.__anchoringType.getter(a1);
}

uint64_t sub_227EB3DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Scene.__anchoringType : Scene(a1, a2, a3, a4, (uint64_t (*)(char *))Scene.__anchoringType.setter);
}

uint64_t sub_227EB3E14@<X0>(uint64_t a1@<X8>)
{
  return Entity.__anchoringType.getter(a1);
}

uint64_t sub_227EB3E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Scene.__anchoringType : Scene(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.__anchoringType.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAnchoring(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for __REAnchoringType();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v20 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v8, v9, v20);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
        uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        uint64_t v17 = &v8[v16];
        __n128 v18 = &v9[v16];
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(void *)(v11 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for __REAnchoring(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for __REAnchoringType();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v6 = type metadata accessor for URL();
    }
    else
    {
      if (EnumCaseMultiPayload != 1) {
        goto LABEL_7;
      }
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
      v2 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v2, v6);
  }
LABEL_7:

  return swift_release();
}

void *initializeWithCopy for __REAnchoring(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v7, v8, v18);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      uint64_t v15 = &v7[v14];
      uint64_t v16 = &v8[v14];
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

void *assignWithCopy for __REAnchoring(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      outlined destroy of __REAnchoring((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v7, v8, v29);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v7, v8, v22);
        uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        unint64_t v24 = &v7[v23];
        unint64_t v25 = &v8[v23];
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      size_t v20 = *(void *)(v10 + 64);
      goto LABEL_9;
    }
    outlined destroy of __REAnchoring((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
LABEL_8:
    size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                                - 8)
                    + 64);
LABEL_9:
    memcpy(v7, v8, v20);
    goto LABEL_17;
  }
  if (v13) {
    goto LABEL_8;
  }
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 3)
  {
    uint64_t v27 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v7, v8, v27);
    swift_storeEnumTagMultiPayload();
  }
  else if (v14 == 1)
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v7, v8, v15);
    uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    uint64_t v17 = &v7[v16];
    uint64_t v18 = &v8[v16];
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for __REAnchoring(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v7, v8, v18);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      uint64_t v15 = &v7[v14];
      uint64_t v16 = &v8[v14];
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for __REAnchoring(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      outlined destroy of __REAnchoring((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v7, v8, v29);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v7, v8, v22);
        uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        unint64_t v24 = &v7[v23];
        unint64_t v25 = &v8[v23];
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      size_t v20 = *(void *)(v10 + 64);
      goto LABEL_9;
    }
    outlined destroy of __REAnchoring((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
LABEL_8:
    size_t v20 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                                - 8)
                    + 64);
LABEL_9:
    memcpy(v7, v8, v20);
    goto LABEL_17;
  }
  if (v13) {
    goto LABEL_8;
  }
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 3)
  {
    uint64_t v27 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v7, v8, v27);
    swift_storeEnumTagMultiPayload();
  }
  else if (v14 == 1)
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v7, v8, v15);
    uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    uint64_t v17 = &v7[v16];
    uint64_t v18 = &v8[v16];
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAnchoring(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227EB4E38);
}

uint64_t sub_227EB4E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for __REAnchoring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227EB4F20);
}

uint64_t sub_227EB4F20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

void type metadata completion function for __REAnchoring()
{
  type metadata accessor for __REAnchoringType?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for __REAnchoringType?()
{
  if (!lazy cache variable for type metadata for __REAnchoringType?)
  {
    type metadata accessor for __REAnchoringType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for __REAnchoringType?);
    }
  }
}

uint64_t type metadata accessor for __REAnchoring.Registration()
{
  return self;
}

uint64_t method lookup function for __REAnchoring.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __REAnchoring.Registration);
}

unint64_t lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError);
  }
  return result;
}

uint64_t outlined init with take of __REAnchoringType(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for __REAnchoring.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EB5278);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAnchoring.Registration.RegistrationError()
{
  return &type metadata for __REAnchoring.Registration.RegistrationError;
}

uint64_t __RKEntityDragTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityDragTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityDragTrigger.deinit()
{
  return v0;
}

uint64_t __RKEntityDragTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityDragTrigger()
{
  return self;
}

uint64_t EngineConfiguration.__allocating_init()()
{
  uint64_t Default = REEngineConfigurationCreateDefault();
  type metadata accessor for EngineConfiguration();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = Default;
  return result;
}

uint64_t type metadata accessor for EngineConfiguration()
{
  return self;
}

uint64_t EngineConfiguration.deinit()
{
  RERelease();
  return v0;
}

uint64_t EngineConfiguration.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t EngineConfiguration.instanceID.getter()
{
  uint64_t v0 = (void *)REEngineConfigurationCopyInstanceID();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

void key path getter for EngineConfiguration.instanceID : EngineConfiguration(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)REEngineConfigurationCopyInstanceID();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t key path setter for EngineConfiguration.instanceID : EngineConfiguration()
{
  String.utf8CString.getter();
  REEngineConfigurationSetInstanceID();

  return swift_release();
}

uint64_t EngineConfiguration.instanceID.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEngineConfigurationSetInstanceID();

  return swift_release();
}

uint64_t (*EngineConfiguration.instanceID.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = (void *)REEngineConfigurationCopyInstanceID();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return EngineConfiguration.instanceID.modify;
}

uint64_t EngineConfiguration.instanceID.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if (a2)
  {
    REEngineConfigurationSetInstanceID();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REEngineConfigurationSetInstanceID();
  }

  return swift_release();
}

uint64_t EngineConfiguration.unsafeUserDataPointer.getter()
{
  return REEngineConfigurationGetUserData();
}

uint64_t EngineConfiguration.unsafeUserDataPointer.setter(uint64_t a1)
{
  return MEMORY[0x270F1DA70](*(void *)(v1 + 16), a1);
}

uint64_t (*EngineConfiguration.unsafeUserDataPointer.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = REEngineConfigurationGetUserData();
  return EngineConfiguration.unsafeUserDataPointer.modify;
}

uint64_t EngineConfiguration.unsafeUserDataPointer.modify(void *a1)
{
  return MEMORY[0x270F1DA70](*(void *)(a1[1] + 16), *a1);
}

uint64_t EngineConfiguration.engineClockMode.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineClockMode.setter()
{
  return REEngineConfigurationSetClockMode();
}

uint64_t (*EngineConfiguration.engineClockMode.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetClockMode();
  return EngineConfiguration.engineClockMode.modify;
}

uint64_t EngineConfiguration.engineClockMode.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, MEMORY[0x263F37020]);
}

uint64_t EngineConfiguration.engineServicesToCreate.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineServicesToCreate.setter()
{
  return REEngineConfigurationSetServicesToCreate();
}

uint64_t (*EngineConfiguration.engineServicesToCreate.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToCreate();
  return EngineConfiguration.engineServicesToCreate.modify;
}

uint64_t EngineConfiguration.engineServicesToCreate.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, MEMORY[0x263F37058]);
}

uint64_t EngineConfiguration.engineServicesToUpdate.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineServicesToUpdate.setter()
{
  return REEngineConfigurationSetServicesToUpdate();
}

uint64_t (*EngineConfiguration.engineServicesToUpdate.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToUpdate();
  return EngineConfiguration.engineServicesToUpdate.modify;
}

uint64_t EngineConfiguration.engineServicesToUpdate.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, MEMORY[0x263F37060]);
}

uint64_t EngineConfiguration.engineStartupOptions.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineStartupOptions.setter()
{
  return REEngineConfigurationSetStartupOptions();
}

uint64_t (*EngineConfiguration.engineStartupOptions.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetStartupOptions();
  return EngineConfiguration.engineStartupOptions.modify;
}

uint64_t EngineConfiguration.engineStartupOptions.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, MEMORY[0x263F37068]);
}

id EngineConfiguration.engineQueue.getter()
{
  EngineQueue = (void *)REEngineConfigurationGetEngineQueue();

  return EngineQueue;
}

void EngineConfiguration.engineQueue.setter(void *a1)
{
  REEngineConfigurationSetEngineQueue();
}

void (*EngineConfiguration.engineQueue.modify(void *a1))(id *a1)
{
  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetEngineQueue();
  return EngineConfiguration.engineQueue.modify;
}

void EngineConfiguration.engineQueue.modify(id *a1)
{
  id v1 = *a1;
  REEngineConfigurationSetEngineQueue();
}

id EngineConfiguration.metalDevice.getter()
{
  Device = (void *)REEngineConfigurationGetDevice();

  return Device;
}

uint64_t EngineConfiguration.metalDevice.setter()
{
  REEngineConfigurationSetDevice();

  return swift_unknownObjectRelease();
}

uint64_t (*EngineConfiguration.metalDevice.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetDevice();
  return EngineConfiguration.metalDevice.modify;
}

uint64_t EngineConfiguration.metalDevice.modify()
{
  REEngineConfigurationSetDevice();

  return swift_unknownObjectRelease();
}

uint64_t EngineConfiguration.useMetal.getter()
{
  return REEngineConfigurationGetUseMetal();
}

uint64_t EngineConfiguration.useMetal.setter(char a1)
{
  return MEMORY[0x270F1DA58](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.useMetal.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetUseMetal();
  return EngineConfiguration.useMetal.modify;
}

uint64_t EngineConfiguration.useMetal.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37070]);
}

uint64_t EngineConfiguration.forExportOnly.getter()
{
  return REEngineConfigurationGetForExportOnly();
}

uint64_t EngineConfiguration.forExportOnly.setter(char a1)
{
  return MEMORY[0x270F1DA20](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.forExportOnly.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetForExportOnly();
  return EngineConfiguration.forExportOnly.modify;
}

uint64_t EngineConfiguration.forExportOnly.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37040]);
}

uint64_t EngineConfiguration.useRealityIO.getter()
{
  return REEngineConfigurationGetUseRealityIO();
}

uint64_t EngineConfiguration.useRealityIO.setter(char a1)
{
  return MEMORY[0x270F1DA68](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.useRealityIO.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetUseRealityIO();
  return EngineConfiguration.useRealityIO.modify;
}

uint64_t EngineConfiguration.useRealityIO.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37080]);
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.getter()
{
  return REEngineConfigurationGetUsePhysicsSceneSystem();
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.setter(char a1)
{
  return MEMORY[0x270F1DA60](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.usePhysicsSceneSystem.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetUsePhysicsSceneSystem();
  return EngineConfiguration.usePhysicsSceneSystem.modify;
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37078]);
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.getter()
{
  return REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.setter(uint64_t a1)
{
  return MEMORY[0x270F1D9F8](*(void *)(v1 + 16), a1);
}

uint64_t (*EngineConfiguration.assetRuntimeSizeLimit.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  return EngineConfiguration.assetRuntimeSizeLimit.modify;
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.modify(void *a1)
{
  return MEMORY[0x270F1D9F8](*(void *)(a1[1] + 16), *a1);
}

uint64_t EngineConfiguration.engineRenderFlags.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineRenderFlags.setter()
{
  return REEngineConfigurationSetRenderFlags();
}

uint64_t (*EngineConfiguration.engineRenderFlags.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetRenderFlags();
  return EngineConfiguration.engineRenderFlags.modify;
}

uint64_t EngineConfiguration.engineRenderFlags.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, MEMORY[0x263F37050]);
}

uint64_t EngineConfiguration.engineClockMode.modify(unsigned int *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)(*(void *)a1 + 16), a1[2]);
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.getter()
{
  return REEngineConfigurationGetIsHostingSharedAudioSimulation();
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.setter(char a1)
{
  return MEMORY[0x270F1DA30](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.isHostingSharedAudioSimulation.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetIsHostingSharedAudioSimulation();
  return EngineConfiguration.isHostingSharedAudioSimulation.modify;
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37048]);
}

uint64_t EngineConfiguration.enableInteractions.getter()
{
  return REEngineConfigurationGetEnableInteractions();
}

uint64_t EngineConfiguration.enableInteractions.setter(char a1)
{
  return MEMORY[0x270F1DA10](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*EngineConfiguration.enableInteractions.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEngineConfigurationGetEnableInteractions();
  return EngineConfiguration.enableInteractions.modify;
}

uint64_t EngineConfiguration.enableInteractions.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, MEMORY[0x263F37030]);
}

uint64_t EngineConfiguration.useMetal.modify(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)(*(void *)a1 + 16), a1[8]);
}

uint64_t EngineConfiguration.clone()()
{
  uint64_t v0 = REEngineConfigurationClone();
  type metadata accessor for EngineConfiguration();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t EngineConfiguration.__allocating_init(_:)()
{
  uint64_t v0 = REEngineConfigurationClone();
  swift_release();
  RERelease();
  RERetain();
  type metadata accessor for EngineConfiguration();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t sub_227EB607C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetUserData();
  *a1 = result;
  return result;
}

uint64_t sub_227EB60AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, MEMORY[0x263F37088]);
}

uint64_t sub_227EB60C4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t sub_227EB60F4()
{
  return REEngineConfigurationSetClockMode();
}

uint64_t sub_227EB6108@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t sub_227EB6138()
{
  return REEngineConfigurationSetServicesToCreate();
}

uint64_t sub_227EB614C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t sub_227EB617C()
{
  return REEngineConfigurationSetServicesToUpdate();
}

uint64_t sub_227EB6190@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t sub_227EB61C0()
{
  return REEngineConfigurationSetStartupOptions();
}

id sub_227EB61D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_17Tm(a1, MEMORY[0x263F36FF0], a2);
}

uint64_t sub_227EB61EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, MEMORY[0x263F37038]);
}

id sub_227EB6204@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_17Tm(a1, MEMORY[0x263F36FE0], a2);
}

id keypath_get_17Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  id result = (id)a2(*(void *)(*(void *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_227EB6258(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, MEMORY[0x263F37028]);
}

uint64_t keypath_set_8Tm(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_227EB6288@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F37008], a2);
}

uint64_t sub_227EB62A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37070]);
}

uint64_t sub_227EB62B8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F36FF8], a2);
}

uint64_t sub_227EB62D0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37040]);
}

uint64_t sub_227EB62E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F37018], a2);
}

uint64_t sub_227EB6300(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37080]);
}

uint64_t sub_227EB6318@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F37010], a2);
}

uint64_t sub_227EB6330(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37078]);
}

uint64_t sub_227EB6348@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  *a1 = result;
  return result;
}

uint64_t sub_227EB6378(void *a1, uint64_t a2)
{
  return MEMORY[0x270F1D9F8](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_227EB638C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t sub_227EB63BC()
{
  return REEngineConfigurationSetRenderFlags();
}

uint64_t sub_227EB63D0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F37000], a2);
}

uint64_t sub_227EB63E8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37048]);
}

uint64_t sub_227EB6400@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_21Tm(a1, MEMORY[0x263F36FE8], a2);
}

uint64_t keypath_get_21Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*(void *)(*(void *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_227EB644C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_22Tm(a1, a2, a3, a4, MEMORY[0x263F37030]);
}

uint64_t keypath_set_22Tm(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t method lookup function for EngineConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EngineConfiguration);
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.identifier.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PreviewSupportComponent.SelectableSourceInfo.position.getter()
{
  return v0[1];
}

void PreviewSupportComponent.SelectableSourceInfo.position.setter(__n128 a1, __n128 a2)
{
  v2[1] = a1;
  v2[2] = a2;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.position.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PreviewSupportComponent.SelectableSourceInfo.size.getter()
{
  return v0[3];
}

void PreviewSupportComponent.SelectableSourceInfo.size.setter(__n128 a1)
{
  v1[3] = a1;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.size.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.displayListIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.displayListIDs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.displayListIDs.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t PreviewSupportComponent.SelectableSourceInfo.init(identifier:position:size:displayListIDs:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>, __n128 a7@<Q2>)
{
  a4->n128_u64[0] = result;
  a4->n128_u64[1] = a2;
  a4[1] = a5;
  a4[2] = a6;
  a4[3] = a7;
  a4[4].n128_u64[0] = a3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F697469736F70;
      break;
    case 2:
      uint64_t result = 1702521203;
      break;
    case 3:
      uint64_t result = 0x4C79616C70736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PreviewSupportComponent.SelectableSourceInfo.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreviewSupportComponent.SelectableSourceInfo.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *(_OWORD *)(v1 + 16);
  long long v13 = *(_OWORD *)(v1 + 32);
  long long v14 = v7;
  long long v11 = *(_OWORD *)(v1 + 48);
  uint64_t v12 = *(void *)(v1 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  uint64_t v8 = v15;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    uint64_t v9 = v12;
    long long v16 = v14;
    long long v17 = v13;
    char v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Double> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Double>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v16 = v11;
    char v18 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v16 = v9;
    char v18 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
    lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt32] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreviewSupportComponent.SelectableSourceInfo.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v20) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v19 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  char v22 = 1;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Double> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Double>);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v17 = v21;
  long long v18 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v22 = 2;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v16 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  char v22 = 3;
  lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt32] and conformance <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v13 = v19;
  uint64_t v14 = v20;
  uint64_t *v19 = v9;
  v13[1] = v11;
  long long v15 = v17;
  *((_OWORD *)v13 + 1) = v18;
  *((_OWORD *)v13 + 2) = v15;
  *((_OWORD *)v13 + 3) = v16;
  unsigned char v13[8] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt32]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PreviewSupportComponent.SelectableSourceInfo@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PreviewSupportComponent.SelectableSourceInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PreviewSupportComponent.SelectableSourceInfo(void *a1)
{
  return PreviewSupportComponent.SelectableSourceInfo.encode(to:)(a1);
}

RealityFoundation::PreviewSupportComponent __swiftcall PreviewSupportComponent.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t PreviewSupportComponent.selectableSourceInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewSupportComponent.selectableSourceInfos.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PreviewSupportComponent.selectableSourceInfos.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PreviewSupportComponent.customComponentType.getter()
{
  return specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for PreviewSupportComponent, (uint64_t)&protocol witness table for PreviewSupportComponent);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PreviewSupportComponent.CodingKeys()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreviewSupportComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PreviewSupportComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreviewSupportComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreviewSupportComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PreviewSupportComponent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreviewSupportComponent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
  lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](&lazy protocol witness table cache variable for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PreviewSupportComponent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreviewSupportComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
    lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](&lazy protocol witness table cache variable for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PreviewSupportComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PreviewSupportComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PreviewSupportComponent(void *a1)
{
  return PreviewSupportComponent.encode(to:)(a1);
}

uint64_t SelectableSceneContentIdentifierComponent.init(displayListItemIdentifier:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SelectableSceneContentIdentifierComponent.displayListItemIdentifier.getter()
{
  return *v0;
}

uint64_t SelectableSceneContentIdentifierComponent.displayListItemIdentifier.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SelectableSceneContentIdentifierComponent.displayListItemIdentifier.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static SelectableSceneContentIdentifierComponent.customComponentType.getter()
{
  return specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SelectableSceneContentIdentifierComponent, (uint64_t)&protocol witness table for SelectableSceneContentIdentifierComponent);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelectableSceneContentIdentifierComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SelectableSceneContentIdentifierComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SelectableSceneContentIdentifierComponent.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SelectableSceneContentIdentifierComponent.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SelectableSceneContentIdentifierComponent@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return SelectableSceneContentIdentifierComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SelectableSceneContentIdentifierComponent(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewSupportComponent()
{
  return &type metadata for PreviewSupportComponent;
}

uint64_t destroy for PreviewSupportComponent.SelectableSourceInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewSupportComponent.SelectableSourceInfo()
{
  return &type metadata for PreviewSupportComponent.SelectableSourceInfo;
}

ValueMetadata *type metadata accessor for SelectableSceneContentIdentifierComponent()
{
  return &type metadata for SelectableSceneContentIdentifierComponent;
}

void *type metadata accessor for SelectableSceneContentIdentifierComponent.CodingKeys()
{
  return &unk_26DC91C80;
}

unsigned char *storeEnumTagSinglePayload for SelectableSceneContentIdentifierComponent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EB7C28);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for PreviewSupportComponent.CodingKeys()
{
  return &unk_26DC91D10;
}

unsigned char *storeEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EB7D2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  return &unk_26DC91DA0;
}

uint64_t specialized PreviewSupportComponent.SelectableSourceInfo.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4C79616C70736964 && a2 == 0xEE00734449747369)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized PreviewSupportComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x8000000228350920)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized SelectableSceneContentIdentifierComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000019 && a2 == 0x8000000228350940)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t __REAnchoringType.createAnchorEntity(realityAssetFileName:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAnchoringType(v2, (uint64_t)v14);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v18 = (char *)v14
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
      uint64_t v17 = __REAnchoringType.createImageOrObjectAnchorEntity(url:realityAssetFileName:imageAnchoring:)((uint64_t)v11, a1, a2, 1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
      break;
    case 2u:
      swift_storeEnumTagMultiPayload();
      type metadata accessor for AnchorEntity();
      swift_allocObject();
      uint64_t v16 = AnchorEntity.init(_:)((uint64_t)v7);
      goto LABEL_4;
    case 3u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
      uint64_t v17 = __REAnchoringType.createImageOrObjectAnchorEntity(url:realityAssetFileName:imageAnchoring:)((uint64_t)v11, a1, a2, 0);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      break;
    default:
      uint64_t v15 = *v14;
      uint64_t v21 = v14[1];
      uint64_t v22 = v15;
      uint64_t v16 = __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:)(&v22, &v21);
LABEL_4:
      uint64_t v17 = v16;
      break;
  }
  return v17;
}

uint64_t outlined init with copy of __REAnchoringType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a2;
  uint64_t v12 = *a1;
  __REAnchoringType.anchoringComponentAlignmentFromREAnchoringAlignment(_:)(&v12, (char *)&v11);
  LOBYTE(a1) = v11;
  uint64_t v11 = v7;
  __REAnchoringType.anchoringComponentClassificationFromREAnchoringClassification(_:)(&v11, &v12);
  uint64_t v8 = v12;
  double v9 = specialized SIMD.init<A>(_:)(&outlined read-only object #0 of __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:));
  *uint64_t v6 = (char)a1;
  *((void *)v6 + 1) = v8;
  *((double *)v6 + 2) = v9;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v6);
}

void one-time initialization function for alignmentTypeToAlignment()
{
  static __REAnchoringType.alignmentTypeToAlignment = &outlined read-only object #0 of one-time initialization function for alignmentTypeToAlignment;
}

void one-time initialization function for classificationTypeToClassification()
{
  static __REAnchoringType.classificationTypeToClassification = &outlined read-only object #0 of one-time initialization function for classificationTypeToClassification;
}

uint64_t *__REAnchoringType.anchoringComponentAlignmentFromREAnchoringAlignment(_:)@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (one-time initialization token for alignmentTypeToAlignment != -1) {
      __n128 result = (uint64_t *)swift_once();
    }
    uint64_t v4 = *((void *)static __REAnchoringType.alignmentTypeToAlignment + 2);
    if (v4)
    {
      char v5 = 0;
      uint64_t v6 = (char *)static __REAnchoringType.alignmentTypeToAlignment + 40;
      do
      {
        uint64_t v7 = *((void *)v6 - 1);
        unsigned __int8 v9 = *v6;
        v6 += 16;
        unsigned __int8 v8 = v9;
        uint64_t v10 = v7 & ~v3;
        if ((v9 & ~v5) != 0 && v10 == 0) {
          unsigned __int8 v12 = v8;
        }
        else {
          unsigned __int8 v12 = 0;
        }
        v5 |= v12;
        --v4;
      }
      while (v4);
    }
    else
    {
      char v5 = 0;
    }
  }
  else
  {
    char v5 = -1;
  }
  *a2 = v5;
  return result;
}

uint64_t *__REAnchoringType.anchoringComponentClassificationFromREAnchoringClassification(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (one-time initialization token for classificationTypeToClassification != -1) {
      __n128 result = (uint64_t *)swift_once();
    }
    uint64_t v4 = *((void *)static __REAnchoringType.classificationTypeToClassification + 2);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (uint64_t *)((char *)static __REAnchoringType.classificationTypeToClassification + 40);
      do
      {
        if ((*v6 & ~v5) != 0 && (*(v6 - 1) & ~v3) == 0) {
          uint64_t v8 = *v6;
        }
        else {
          uint64_t v8 = 0;
        }
        v5 |= v8;
        v6 += 2;
        --v4;
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = -1;
  }
  *a2 = v5;
  return result;
}

uint64_t __REAnchoringType.createImageOrObjectAnchorEntity(url:realityAssetFileName:imageAnchoring:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  void v23[3] = a4;
  uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = URL.lastPathComponent.getter();
  uint64_t v11 = v10;
  uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)&v24);
  if (one-time initialization token for instances != -1) {
    swift_once();
  }
  uint64_t v13 = static __RealityFileURLResolver.instances;
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(&v24, v25);
  swift_retain();
  specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v16, v13, v14, v15);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  *(void *)&long long v24 = 0x2F737465737361;
  *((void *)&v24 + 1) = 0xE700000000000000;
  v17._countAndFlagsBits = v9;
  v17._object = v11;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  long long v18 = v24;
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  long long v24 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  uint64_t v20 = *((void *)&v24 + 1);
  *(void *)uint64_t v8 = v24;
  *((void *)v8 + 1) = v20;
  *((_OWORD *)v8 + 1) = v18;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v21 = AnchorEntity.init(_:)((uint64_t)v8);
  swift_release();
  return v21;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t static MeshAttributeDescriptor.positionFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37670]);
}

uint64_t type metadata accessor for MeshAttributeDescriptor()
{
  return self;
}

uint64_t static MeshAttributeDescriptor.positionHalf3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37678]);
}

uint64_t static MeshAttributeDescriptor.normalFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37660]);
}

uint64_t static MeshAttributeDescriptor.normalShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37668]);
}

uint64_t static MeshAttributeDescriptor.tangentFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37690]);
}

uint64_t static MeshAttributeDescriptor.tangentShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37698]);
}

uint64_t static MeshAttributeDescriptor.bitangentFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375D8]);
}

uint64_t static MeshAttributeDescriptor.bitangentShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375E0]);
}

uint64_t static MeshAttributeDescriptor.uv0Float2.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F376A0]);
}

uint64_t static MeshAttributeDescriptor.colorFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375F0]);
}

uint64_t static MeshAttributeDescriptor.colorFloat4.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375F8]);
}

uint64_t static MeshAttributeDescriptor.colorUChar3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37600]);
}

uint64_t static MeshAttributeDescriptor.colorUChar4Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37608]);
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:)()
{
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:)()
{
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:)()
{
}

uint64_t closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(void *)(a5 + 16);
  uint64_t v14 = String.utf8CString.getter();
  uint64_t v15 = a8(v13, v14 + 32, a1, a2, a3, a4);
  swift_release();
  return v15;
}

uint64_t MeshAttributeDescriptor.deinit()
{
  return v0;
}

uint64_t MeshAttributeDescriptor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v7 = specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(a1, a2, a3, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_25;
  }
  REMeshAttributesDescriptorCreate();
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  __n128 result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_6;
    }
    int64_t v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v10 >= v8) {
      goto LABEL_22;
    }
    uint64_t v11 = *(void *)(v4 + 8 * v10);
    ++v9;
    if (!v11)
    {
      int64_t v9 = v10 + 1;
      if (v10 + 1 >= v8) {
        goto LABEL_22;
      }
      uint64_t v11 = *(void *)(v4 + 8 * v9);
      if (!v11)
      {
        int64_t v9 = v10 + 2;
        if (v10 + 2 >= v8) {
          goto LABEL_22;
        }
        uint64_t v11 = *(void *)(v4 + 8 * v9);
        if (!v11) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v7 = (v11 - 1) & v11;
LABEL_6:
    String.utf8CString.getter();
    REMeshAttributeDescriptorArraySetCustomName();
    __n128 result = swift_release();
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v8)
  {
LABEL_22:
    swift_release();
    uint64_t v13 = REMeshDefinitionCreateWithAttributes();
    __n128 result = RERelease();
    *a3 = v13;
    return result;
  }
  uint64_t v11 = *(void *)(v4 + 8 * v12);
  if (v11)
  {
    int64_t v9 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v9 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_22;
    }
    uint64_t v11 = *(void *)(v4 + 8 * v9);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MeshDefinition.setIndices(_:)(Swift::OpaquePointer a1)
{
}

{
  MeshDefinition.setIndices(_:)((uint64_t)a1._rawValue, specialized Data.init<A>(buffer:), MEMORY[0x263F37118]);
}

uint64_t specialized Data.init<A>(buffer:)(uint64_t __src, uint64_t a2)
{
  if (__src)
  {
    if (a2 + 0x4000000000000000 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = 2 * a2;
      if (2 * a2)
      {
        if (v3 <= 14)
        {
          return specialized Data.InlineData.init(_:)((unsigned char *)__src, (unsigned char *)(__src + v3));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(void *)(__src + 16) = 0;
            *(void *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 33;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return __src;
}

{
  uint64_t v3;

  if (__src)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 == 3)
    {
      uint64_t v3 = 4 * a2;
      if (4 * a2)
      {
        if (v3 <= 14)
        {
          return specialized Data.InlineData.init(_:)((unsigned char *)__src, (unsigned char *)(__src + v3));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(void *)(__src + 16) = 0;
            *(void *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 34;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

void MeshDefinition.setIndices(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void), void (*a3)(uint64_t, Class))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = a2(a1 + 32, *(void *)(a1 + 16));
  unint64_t v8 = v7;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v6, v8);
  a3(v5, isa);
}

void MeshDefinition.setAttribute(_:data:)()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();
}

uint64_t MeshDefinition.setAttribute(_:name:data:)()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  return swift_release();
}

uint64_t MeshDefinition.setAttribute(_:positions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6903A0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:normals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690390](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:tangents:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6903C0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:bitangents:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690300](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(bitangents:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:uvs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6903D0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(uvs:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:colors:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690320](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(colors:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  uint64_t v12;
  unint64_t v13;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690330](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(colors:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:custom:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[2] = a1;
  _OWORD v13[3] = a3;
  v13[4] = a4;
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void *)(a2 + 16);
  String.utf8CString.getter();
  uint64_t v7 = REMeshAttributeDescriptorCopyCustom2sToBuffer();
  swift_release();
  uint64_t v14 = specialized Data.init(count:)(v7);
  unint64_t v15 = v8;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v14, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for closure #1 in MeshAttributeDescriptor.makeData(custom:name:), (uint64_t)v13, v5, v6, a2);
  uint64_t v9 = v14;
  unint64_t v10 = v15;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v9, v10);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  void v13[6];
  uint64_t v14;
  unint64_t v15;

  v13[2] = a1;
  _OWORD v13[3] = a3;
  v13[4] = a4;
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void *)(a2 + 16);
  String.utf8CString.getter();
  uint64_t v7 = REMeshAttributeDescriptorCopyCustom3sToBuffer();
  swift_release();
  uint64_t v14 = specialized Data.init(count:)(v7);
  unint64_t v15 = v8;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v14, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for closure #1 in MeshAttributeDescriptor.makeData(custom:name:), (uint64_t)v13, v5, v6, a2);
  uint64_t v9 = v14;
  unint64_t v10 = v15;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v9, v10);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  void v13[6];
  uint64_t v14;
  unint64_t v15;

  v13[2] = a1;
  _OWORD v13[3] = a3;
  v13[4] = a4;
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void *)(a2 + 16);
  String.utf8CString.getter();
  uint64_t v7 = REMeshAttributeDescriptorCopyCustom4sToBuffer();
  swift_release();
  uint64_t v14 = specialized Data.init(count:)(v7);
  unint64_t v15 = v8;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v14, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for closure #1 in MeshAttributeDescriptor.makeData(custom:name:), (uint64_t)v13, v5, v6, a2);
  uint64_t v9 = v14;
  unint64_t v10 = v15;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v9, v10);
}

uint64_t MeshDefinition.setBoundingBox(_:)()
{
  return MEMORY[0x270F1EEB0](*(void *)(v0 + 16));
}

Swift::Void __swiftcall MeshDefinition.setDoubleSided(_:)(Swift::Bool a1)
{
  MEMORY[0x270F1EEC0](*(void *)(v1 + 16), a1);
}

uint64_t MeshModelDefinition.deinit()
{
  RERelease();
  return v0;
}

uint64_t MeshModelDefinition.__allocating_init()()
{
  uint64_t v0 = REMeshModelDefinitionCreate();
  type metadata accessor for MeshModelDefinition();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

void key path getter for MeshModelDefinition.name : MeshModelDefinition(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)REMeshModelDefinitionCopyName();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t key path setter for MeshModelDefinition.name : MeshModelDefinition()
{
  String.utf8CString.getter();
  REMeshModelDefinitionSetName();

  return swift_release();
}

uint64_t MeshModelDefinition.name.getter()
{
  uint64_t v0 = (void *)REMeshModelDefinitionCopyName();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t MeshModelDefinition.name.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REMeshModelDefinitionSetName();

  return swift_release();
}

uint64_t (*MeshModelDefinition.name.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = (void *)REMeshModelDefinitionCopyName();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return MeshModelDefinition.name.modify;
}

uint64_t MeshModelDefinition.name.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if (a2)
  {
    REMeshModelDefinitionSetName();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REMeshModelDefinitionSetName();
  }

  return swift_release();
}

Swift::Void __swiftcall MeshModelDefinition.append(levelOfDetail:minScreenArea:maxViewDepth:)(Swift::Int levelOfDetail, Swift::Float minScreenArea, Swift::Float maxViewDepth)
{
  if (levelOfDetail < 0 || HIDWORD(levelOfDetail))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  JUMPOUT(0x22A6906B0);
}

uint64_t MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2) || (a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return REMeshModelDefinitionAppendTrianglesWithName();
  }
  return result;
}

uint64_t MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2) || (a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    REMeshModelDefinitionAppendTrianglesWithName();
    return swift_release();
  }
  return result;
}

uint64_t MeshDefinition.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t MeshInstanceDefinition.__allocating_init(name:modelIndex:transform:levelOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = REMeshInstanceDefinitionCreate();
    swift_release();
    type metadata accessor for MeshInstanceDefinition();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
  }
  return result;
}

uint64_t static MeshAttributeDescriptor.skinInfluences.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37688]);
}

uint64_t static MeshAttributeDescriptor.skinInfluenceEndIndices.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F37680]);
}

uint64_t static MeshAttributeDescriptor.accumulatedVertexValence.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375D0]);
}

uint64_t static MeshAttributeDescriptor.vertexAdjacencies.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F376A8]);
}

uint64_t MeshAttributeDescriptor.makeData(jointInfluences:)(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x22A690380](*(void *)(v1 + 16), a1 + 32, v4, 0, 0);
  v8[0] = specialized Data.init(count:)(v5);
  v8[1] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v8, v1, v3, v4, a1);
  return v8[0];
}

uint64_t MeshDefinition.setAttribute(_:skinJointIndices:skinWeights:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 == *(void *)(a3 + 16))
  {
    uint64_t v6 = a3 + 32;
    uint64_t v7 = a2 + 32;
    uint64_t v8 = MEMORY[0x22A690370](*(void *)(a1 + 16), a2 + 32, a3 + 32, v4, 0, 0);
    uint64_t v14 = specialized Data.init(count:)(v8);
    unint64_t v15 = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v14, a1, v7, v4, v6, v4, a2);
    uint64_t v10 = v14;
    unint64_t v11 = v15;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xC000000000000000;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v10, v11);
}

uint64_t MeshDefinition.setAttribute(_:jointInfluences:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 32;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690380](*(void *)(a1 + 16), a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(&v12, a1, v4, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:skinInfluenceEndIndices:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6903B0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(skinInfluenceEndIndices:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

char *MeshDefinition.setAttribute(_:influencesPerVert:vertCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3 & ~(a3 >> 63), 0, MEMORY[0x263F8EE78]);
  if (a3 < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = a1;
  if (a3)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = ++v9 * a2;
      if ((unsigned __int128)(v9 * (__int128)a2) >> 64 != (v9 * a2) >> 63) {
        break;
      }
      if (v10 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_14;
      }
      if (v10 > 0x7FFFFFFF) {
        goto LABEL_15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v7);
        uint64_t v7 = (uint64_t)result;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(_DWORD *)(v7 + 4 * v12 + 32) = v10;
      if (a3 == v9) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v15 = *(void *)(v7 + 16);
  uint64_t v16 = MEMORY[0x22A6903B0](v13, v7 + 32, v15, 0, 0);
  uint64_t v21 = specialized Data.init(count:)(v16);
  unint64_t v22 = v17;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v21, (void (*)(uint64_t, void, uint64_t, uint64_t))implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(skinInfluenceEndIndices:)partial apply, v14, v7 + 32, v15, v7);
  uint64_t v18 = v21;
  unint64_t v19 = v22;
  swift_bridgeObjectRelease();
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return (char *)outlined consume of Data._Representation(v18, v19);
}

Swift::Void __swiftcall MeshDefinition.setSkeletonName(_:)(Swift::String a1)
{
  String.utf8CString.getter();
  REMeshDefinitionSetSkeletonName();

  swift_release();
}

uint64_t MeshDefinition.setAttribute(_:accumulatedVertexValence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6903E0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(accumulatedVertexValence:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t MeshDefinition.setAttribute(_:vertexAdjacencies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A6902F0](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(vertexAdjacencies:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t static MeshAttributeDescriptor.blendShapeOffset.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x263F375E8]);
}

uint64_t static MeshAttributeDescriptor.positionFloat3.getter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for MeshAttributeDescriptor();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:)()
{
}

uint64_t MeshDefinition.setAttribute(_:blendShapeOffsets:name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x22A690310](v3, a2 + 32, v5, 0, 0);
  uint64_t v12 = specialized Data.init(count:)(v6);
  unint64_t v13 = v7;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(&v12, (void (*)(uint64_t, void, uint64_t, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:), v4, a2 + 32, v5, a2);
  uint64_t v8 = v12;
  unint64_t v9 = v13;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n(void *a1, void (*a2)(uint64_t, void, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(a1, a2, a3, a4, a5, a6);
}

uint64_t _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(void *a1, void (*a2)(uint64_t, void, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v6 = a1[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      *(void *)&long long v28 = *a1;
      *((void *)&v28 + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV11InlineSliceV22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((int *)&v28, a2, a3, a4, a5, a6);
      uint64_t v12 = v28;
      unint64_t v13 = *((void *)&v28 + 1) | 0x4000000000000000;
      goto LABEL_5;
    case 2uLL:
      *(void *)&long long v28 = *a1;
      *((void *)&v28 + 1) = v6 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v15 = *((void *)&v28 + 1);
      uint64_t v16 = *(void *)(v28 + 16);
      uint64_t v27 = *(void *)(v28 + 24);
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_20;
      }
      uint64_t v18 = v17;
      uint64_t v19 = __DataStorage._offset.getter();
      uint64_t v20 = v16 - v19;
      if (__OFSUB__(v16, v19))
      {
        __break(1u);
      }
      else
      {
        BOOL v21 = __OFSUB__(v27, v16);
        uint64_t v22 = v27 - v16;
        if (!v21)
        {
          uint64_t v23 = __DataStorage._length.getter();
          if (a4)
          {
            if (v23 >= v22) {
              uint64_t v24 = v22;
            }
            else {
              uint64_t v24 = v23;
            }
            a2(a4, *(void *)(a6 + 16), v18 + v20, v24);
            *a1 = v28;
            a1[1] = v15 | 0x8000000000000000;
            return swift_bridgeObjectRelease();
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x227EBB204);
        }
      }
      __break(1u);
      return result;
    case 3uLL:
      *(void *)((char *)&v28 + 7) = 0;
      *(void *)&long long v28 = 0;
      if (!a4) {
        goto LABEL_22;
      }
      a2(a4, *(void *)(a6 + 16), (uint64_t)&v28, 0);
      return swift_bridgeObjectRelease();
    default:
      *(void *)&long long v28 = *a1;
      WORD4(v28) = v6;
      BYTE10(v28) = BYTE2(v6);
      BYTE11(v28) = BYTE3(v6);
      BYTE12(v28) = BYTE4(v6);
      BYTE13(v28) = BYTE5(v6);
      BYTE14(v28) = BYTE6(v6);
      if (!a4)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      a2(a4, *(void *)(a6 + 16), (uint64_t)&v28, BYTE6(v6));
      uint64_t v12 = v28;
      unint64_t v13 = DWORD2(v28) | ((unint64_t)BYTE12(v28) << 32) | ((unint64_t)BYTE13(v28) << 40) | ((unint64_t)BYTE14(v28) << 48);
LABEL_5:
      *a1 = v12;
      a1[1] = v13;
      return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v25, a2, a3, a4, a5);
      swift_release();
      uint64_t v10 = v25;
      unint64_t v11 = *((void *)&v25 + 1) | 0x4000000000000000;
      goto LABEL_5;
    case 2uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v13 = *((void *)&v25 + 1);
      uint64_t v14 = *(void *)(v25 + 16);
      uint64_t v24 = *(void *)(v25 + 24);
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_20;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      uint64_t v18 = v14 - v17;
      if (__OFSUB__(v14, v17))
      {
        __break(1u);
      }
      else
      {
        BOOL v19 = __OFSUB__(v24, v14);
        uint64_t v20 = v24 - v14;
        if (!v19)
        {
          uint64_t v21 = __DataStorage._length.getter();
          if (a3)
          {
            if (v21 >= v20) {
              uint64_t v22 = v20;
            }
            else {
              uint64_t v22 = v21;
            }
            MEMORY[0x22A690380](*(void *)(a2 + 16), a3, *(void *)(a5 + 16), v16 + v18, v22);
            swift_release_n();
            *a1 = v25;
            a1[1] = v13 | 0x8000000000000000;
            return swift_bridgeObjectRelease();
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x227EBB4CCLL);
        }
      }
      __break(1u);
      return result;
    case 3uLL:
      *(void *)((char *)&v25 + 7) = 0;
      *(void *)&long long v25 = 0;
      if (!a3) {
        goto LABEL_22;
      }
      MEMORY[0x22A690380](*(void *)(a2 + 16), a3, *(void *)(a5 + 16), &v25, 0);
      swift_release();
      return swift_bridgeObjectRelease();
    default:
      *(void *)&long long v25 = *a1;
      WORD4(v25) = v5;
      BYTE10(v25) = BYTE2(v5);
      BYTE11(v25) = BYTE3(v5);
      BYTE12(v25) = BYTE4(v5);
      BYTE13(v25) = BYTE5(v5);
      BYTE14(v25) = BYTE6(v5);
      if (!a3)
      {
        __break(1u);
LABEL_20:
        swift_release();
        __break(1u);
        goto LABEL_21;
      }
      MEMORY[0x22A690380](*(void *)(a2 + 16), a3, *(void *)(a5 + 16), &v25, BYTE6(v5));
      swift_release();
      uint64_t v10 = v25;
      unint64_t v11 = DWORD2(v25) | ((unint64_t)BYTE12(v25) << 32) | ((unint64_t)BYTE13(v25) << 40) | ((unint64_t)BYTE14(v25) << 48);
LABEL_5:
      *a1 = v10;
      a1[1] = v11;
      return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v7 = a1[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      *(void *)&long long v30 = *a1;
      *((void *)&v30 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v30, a2, a3, a4, a5, a6, a7);
      swift_release();
      uint64_t v13 = v30;
      unint64_t v14 = *((void *)&v30 + 1) | 0x4000000000000000;
      goto LABEL_6;
    case 2uLL:
      *(void *)&long long v30 = *a1;
      *((void *)&v30 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v17 = *((void *)&v30 + 1);
      uint64_t v18 = *(void *)(v30 + 16);
      uint64_t v29 = *(void *)(v30 + 24);
      uint64_t v19 = __DataStorage._bytes.getter();
      if (!v19) {
        goto LABEL_24;
      }
      uint64_t v20 = v19;
      uint64_t v21 = __DataStorage._offset.getter();
      uint64_t v22 = v18 - v21;
      if (__OFSUB__(v18, v21))
      {
        __break(1u);
      }
      else
      {
        BOOL v23 = __OFSUB__(v29, v18);
        uint64_t v24 = v29 - v18;
        if (!v23)
        {
          uint64_t v25 = __DataStorage._length.getter();
          if (v25 >= v24) {
            uint64_t v26 = v24;
          }
          else {
            uint64_t v26 = v25;
          }
          if (a3)
          {
            if (a5)
            {
              MEMORY[0x22A690370](*(void *)(a2 + 16), a3, a5, *(void *)(a7 + 16), v20 + v22, v26);
              swift_release_n();
              *a1 = v30;
              a1[1] = v17 | 0x8000000000000000;
              return swift_bridgeObjectRelease();
            }
LABEL_28:
            __break(1u);
            JUMPOUT(0x227EBB7C8);
          }
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
      }
      __break(1u);
      return result;
    case 3uLL:
      *(void *)((char *)&v30 + 7) = 0;
      *(void *)&long long v30 = 0;
      if (!a3) {
        goto LABEL_26;
      }
      if (!a5) {
        goto LABEL_27;
      }
      MEMORY[0x22A690370](*(void *)(a2 + 16), a3, a5, *(void *)(a7 + 16), &v30, 0);
      swift_release();
      return swift_bridgeObjectRelease();
    default:
      *(void *)&long long v30 = *a1;
      WORD4(v30) = v7;
      BYTE10(v30) = BYTE2(v7);
      BYTE11(v30) = BYTE3(v7);
      BYTE12(v30) = BYTE4(v7);
      BYTE13(v30) = BYTE5(v7);
      BYTE14(v30) = BYTE6(v7);
      if (!a3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        swift_release();
        __break(1u);
        goto LABEL_25;
      }
      if (!a5) {
        goto LABEL_23;
      }
      MEMORY[0x22A690370](*(void *)(a2 + 16), a3, a5, *(void *)(a7 + 16), &v30, BYTE6(v7));
      swift_release();
      uint64_t v13 = v30;
      unint64_t v14 = DWORD2(v30) | ((unint64_t)BYTE12(v30) << 32) | ((unint64_t)BYTE13(v30) << 40) | ((unint64_t)BYTE14(v30) << 48);
LABEL_6:
      *a1 = v13;
      a1[1] = v14;
      return swift_bridgeObjectRelease();
  }
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if ((int)v10 < (int)v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v11 = __DataStorage._bytes.getter();
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  uint64_t v13 = __DataStorage._offset.getter();
  uint64_t v14 = v9 - v13;
  if (__OFSUB__(v9, v13))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v15 = __DataStorage._length.getter();
  if (!a3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (v15 >= v10 - v9) {
    uint64_t v16 = v10 - v9;
  }
  else {
    uint64_t v16 = v15;
  }
  MEMORY[0x22A690380](*(void *)(a2 + 16), a3, *(void *)(a5 + 16), v12 + v14, v16);
  swift_bridgeObjectRelease();
  swift_release();
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = __DataStorage._bytes.getter();
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v15 = v14;
  uint64_t v16 = __DataStorage._offset.getter();
  uint64_t v17 = v12 - v16;
  if (__OFSUB__(v12, v16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v18 = __DataStorage._length.getter();
  if (!a3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a5)
  {
LABEL_14:
    __break(1u);
    return;
  }
  if (v18 >= v13 - v12) {
    uint64_t v19 = v13 - v12;
  }
  else {
    uint64_t v19 = v18;
  }
  MEMORY[0x22A690370](*(void *)(a2 + 16), a3, a5, *(void *)(a7 + 16), v15 + v17, v19);
  swift_bridgeObjectRelease();
  swift_release();
}

void _s10Foundation4DataV11InlineSliceV22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(int *a1, void (*a2)(uint64_t, void, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v10)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = a2;
  uint64_t v12 = __DataStorage._bytes.getter();
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  uint64_t v14 = __DataStorage._offset.getter();
  uint64_t v15 = v10 - v14;
  if (__OFSUB__(v10, v14))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v16 = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (v16 >= v11 - v10) {
    uint64_t v17 = v11 - v10;
  }
  else {
    uint64_t v17 = v16;
  }
  v18(a4, *(void *)(a6 + 16), v13 + v15, v17);
  swift_bridgeObjectRelease();
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_17:
    closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)(v8 + 32, a4, &v18);
    swift_bridgeObjectRelease();
    uint64_t v17 = v18;
    type metadata accessor for MeshDefinition();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v17;
    return result;
  }
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v10 = *(void *)(MEMORY[0x22A689930](i, a1) + 16);
        swift_unknownObjectRelease();
        uint64_t v18 = v8;
        unint64_t v12 = *(void *)(v8 + 16);
        unint64_t v11 = *(void *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v8 = v18;
        }
        *(void *)(v8 + 16) = v12 + 1;
        *(void *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = *(void *)(v18 + 16);
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 8 * v13 + 32) + 16);
        uint64_t v18 = v8;
        unint64_t v16 = *(void *)(v8 + 24);
        if (v14 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v14 + 1, 1);
          uint64_t v8 = v18;
        }
        ++v13;
        *(void *)(v8 + 16) = v14 + 1;
        *(void *)(v8 + 8 * v14++ + 32) = v15;
      }
      while (v6 != v13);
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_227EBBCD8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:)()
{
}

uint64_t sub_227EBBD00()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:)()
{
}

uint64_t sub_227EBBD28()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:)()
{
}

uint64_t sub_227EBBD50()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(bitangents:)()
{
}

uint64_t sub_227EBBD78()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(uvs:)()
{
}

uint64_t sub_227EBBDA0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(colors:)()
{
}

{
  JUMPOUT(0x22A690330);
}

uint64_t sub_227EBBDC8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], MEMORY[0x263F370B8]);
}

{
  uint64_t *v4;

  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], MEMORY[0x263F370C0]);
}

{
  uint64_t *v4;

  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], MEMORY[0x263F370C8]);
}

uint64_t type metadata accessor for MeshModelDefinition()
{
  return self;
}

uint64_t type metadata accessor for MeshInstanceDefinition()
{
  return self;
}

uint64_t sub_227EBBED4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(skinInfluenceEndIndices:)()
{
}

uint64_t sub_227EBBEFC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227EBBF0C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(accumulatedVertexValence:)()
{
}

uint64_t sub_227EBBF34()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(vertexAdjacencies:)()
{
}

uint64_t sub_227EBBF5C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:)()
{
}

uint64_t method lookup function for MeshAttributeDescriptor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshAttributeDescriptor);
}

uint64_t type metadata accessor for MeshDefinition()
{
  return self;
}

uint64_t method lookup function for MeshDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshDefinition);
}

uint64_t dispatch thunk of MeshDefinition.setIndices(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:data:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:name:data:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:positions:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:normals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:tangents:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:bitangents:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:uvs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:colors:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:custom:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MeshDefinition.setBoundingBox(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MeshDefinition.setDoubleSided(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t method lookup function for MeshModelDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshModelDefinition);
}

uint64_t dispatch thunk of MeshModelDefinition.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MeshModelDefinition.name.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MeshModelDefinition.name.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(levelOfDetail:minScreenArea:maxViewDepth:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t method lookup function for MeshInstanceDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshInstanceDefinition);
}

uint64_t BillboardAction.upDirection.getter()
{
  return *(void *)v0;
}

uint64_t BillboardAction.upDirection.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*BillboardAction.upDirection.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.forwardDirection.getter()
{
  return v0[2];
}

void BillboardAction.forwardDirection.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*BillboardAction.forwardDirection.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardAction.rotationAxis.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BillboardAction.rotationAxis.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 48) = result;
  *(void *)(v3 + 56) = a2;
  *(unsigned char *)(v3 + 64) = a3 & 1;
  return result;
}

uint64_t (*BillboardAction.rotationAxis.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double BillboardAction.Transition.duration.getter()
{
  return *(double *)v0;
}

void BillboardAction.Transition.duration.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*BillboardAction.Transition.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.Transition.timingFunction.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[2].n128_u32[0];
  unsigned __int8 v3 = v1[2].n128_u8[4];
  __n128 result = v1[1];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.Transition.timingFunction.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  unsigned __int8 v3 = a1[1].n128_u8[4];
  __n128 result = *a1;
  v1[1] = *a1;
  v1[2].n128_u32[0] = v2;
  v1[2].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.Transition.timingFunction.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.Transition.init(duration:timingFunction:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>)
{
  unsigned __int32 v3 = a1[1].n128_u32[0];
  unsigned __int8 v4 = a1[1].n128_u8[4];
  a2->n128_f64[0] = a3;
  __n128 result = *a1;
  a2[1] = *a1;
  a2[2].n128_u32[0] = v3;
  a2[2].n128_u8[4] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BillboardAction.Transition.CodingKeys()
{
  if (*v0) {
    return 0x7546676E696D6974;
  }
  else {
    return 0x6E6F697461727564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BillboardAction.Transition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized BillboardAction.Transition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BillboardAction.Transition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BillboardAction.Transition.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BillboardAction.Transition.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BillboardAction.Transition.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v14 = *(void *)(v1 + 24);
  int v9 = *(_DWORD *)(v1 + 32);
  int v12 = *(unsigned __int8 *)(v1 + 36);
  int v13 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v16 = v8;
    uint64_t v17 = v14;
    int v18 = v13;
    char v19 = v12;
    char v15 = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

uint64_t BillboardAction.Transition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BillboardAction.Transition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v16) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    v15[15] = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    int v11 = v17;
    char v12 = v18;
    long long v13 = v16;
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v13;
    *(_DWORD *)(a2 + 32) = v11;
    *(unsigned char *)(a2 + 36) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BillboardAction.Transition@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BillboardAction.Transition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BillboardAction.Transition(void *a1)
{
  return BillboardAction.Transition.encode(to:)(a1);
}

__n128 BillboardAction.transitionIn.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[7].n128_u32[0];
  unsigned __int8 v3 = v1[7].n128_u8[4];
  a1->n128_u64[0] = v1[5].n128_u64[0];
  __n128 result = v1[6];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.transitionIn.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[2].n128_u32[0];
  unsigned __int8 v3 = a1[2].n128_u8[4];
  v1[5].n128_u64[0] = a1->n128_u64[0];
  __n128 result = a1[1];
  v1[6] = result;
  v1[7].n128_u32[0] = v2;
  v1[7].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.transitionIn.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.transitionOut.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[10].n128_u32[0];
  unsigned __int8 v3 = v1[10].n128_u8[4];
  a1->n128_u64[0] = v1[8].n128_u64[0];
  __n128 result = v1[9];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.transitionOut.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[2].n128_u32[0];
  unsigned __int8 v3 = a1[2].n128_u8[4];
  v1[8].n128_u64[0] = a1->n128_u64[0];
  __n128 result = a1[1];
  v1[9] = result;
  v1[10].n128_u32[0] = v2;
  v1[10].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.transitionOut.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardAction.animatedValueType.getter()
{
  return MEMORY[0x263F8D5C8];
}

__n128 BillboardAction.init(upDirection:forwardDirection:rotationAxis:transitionIn:transitionOut:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10@<Q0>)
{
  unint64_t v14 = *(void *)a7;
  unint64_t v15 = *(void *)(a7 + 16);
  unint64_t v16 = *(void *)(a7 + 24);
  unsigned __int32 v17 = *(_DWORD *)(a7 + 32);
  unsigned __int8 v18 = *(unsigned char *)(a7 + 36);
  unint64_t v19 = *(void *)a8;
  unint64_t v20 = *(void *)(a8 + 16);
  unint64_t v21 = *(void *)(a8 + 24);
  unsigned __int8 v23 = *(unsigned char *)(a8 + 36);
  unsigned __int32 v24 = *(_DWORD *)(a8 + 32);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(upDirection:forwardDirection:rotationAxis:transitionIn:transitionOut:));
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u8[0] = a3 & 1;
  __n128 result = a10;
  a9[2] = a10;
  a9[3].n128_u64[0] = a4;
  a9[3].n128_u64[1] = a5;
  a9[4].n128_u8[0] = a6 & 1;
  a9[5].n128_u64[0] = v14;
  a9[6].n128_u64[0] = v15;
  a9[6].n128_u64[1] = v16;
  a9[7].n128_u32[0] = v17;
  a9[7].n128_u8[4] = v18;
  a9[8].n128_u64[0] = v19;
  a9[9].n128_u64[0] = v20;
  a9[9].n128_u64[1] = v21;
  a9[10].n128_u32[0] = v24;
  a9[10].n128_u8[4] = v23;
  return result;
}

__n128 BillboardAction.init(transitionIn:transitionOut:)@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  int v7 = *((_DWORD *)a1 + 8);
  char v8 = *((unsigned char *)a1 + 36);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  int v12 = *((_DWORD *)a2 + 8);
  char v13 = *((unsigned char *)a2 + 36);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(transitionIn:transitionOut:));
  long long v18 = v14;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of BillboardAction.init(transitionIn:transitionOut:));
  __n128 v17 = v15;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of BillboardAction.init(transitionIn:transitionOut:));
  *(_OWORD *)a3 = v18;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v17;
  *(__n128 *)(a3 + 32) = v17;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 1;
  *(void *)(a3 + 80) = v4;
  *(void *)(a3 + 96) = v5;
  *(void *)(a3 + 104) = v6;
  *(_DWORD *)(a3 + 112) = v7;
  *(unsigned char *)(a3 + 116) = v8;
  *(void *)(a3 + 128) = v9;
  *(void *)(a3 + 144) = v10;
  *(void *)(a3 + 152) = v11;
  *(_DWORD *)(a3 + 160) = v12;
  *(unsigned char *)(a3 + 164) = v13;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BillboardAction.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BillboardAction.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BillboardAction.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BillboardAction.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance BillboardAction.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BillboardAction.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BillboardAction.CodingKeys(void *a1@<X8>)
{
  unint64_t v2 = 0xEC0000006E496E6FLL;
  if (*v1) {
    unint64_t v2 = 0xED000074754F6E6FLL;
  }
  *a1 = 0x697469736E617274;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BillboardAction.CodingKeys()
{
  return 0x697469736E617274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BillboardAction.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BillboardAction.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BillboardAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BillboardAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t BillboardAction.isUpToDate(_:)(uint64_t *a1)
{
  uint64_t v2 = 0;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  int v8 = *((unsigned __int8 *)a1 + 48);
  long long v9 = *((_OWORD *)a1 + 4);
  uint64_t v11 = *v1;
  uint64_t v10 = v1[1];
  unsigned int v12 = *((unsigned __int8 *)v1 + 16);
  long long v13 = *((_OWORD *)v1 + 2);
  uint64_t v15 = v1[6];
  uint64_t v14 = v1[7];
  BOOL v16 = 1;
  int v17 = *((unsigned __int8 *)v1 + 64);
  while (!v16)
  {
    BOOL v16 = 0;
    uint64_t result = 0;
    if (v2 == 2) {
      return result;
    }
LABEL_3:
    ++v2;
  }
  long long v33 = v9;
  float v18 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  long long v34 = v13;
  float v19 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  BOOL v16 = v18 == v19;
  if (v2 != 2) {
    goto LABEL_3;
  }
  if (v18 != v19) {
    return 0;
  }
  if ((v5 & 1) == 0)
  {
    if ((v17 & 1) == 0)
    {
      uint64_t v21 = 0;
      *(void *)&long long v22 = v4;
      *((void *)&v22 + 1) = v3;
      *(void *)&long long v23 = v15;
      *((void *)&v23 + 1) = v14;
      LOBYTE(v17) = 1;
      while (1)
      {
        if (v17)
        {
          long long v31 = v22;
          float v24 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          long long v32 = v23;
          int v17 = v24 == *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          if (v21 == 2) {
            goto LABEL_9;
          }
        }
        else
        {
          LOBYTE(v17) = 0;
          uint64_t result = 0;
          if (v21 == 2) {
            return result;
          }
        }
        ++v21;
      }
    }
    return 0;
  }
LABEL_9:
  if ((v17 ^ 1 | v8)) {
    return v17 & v12;
  }
  if (v12) {
    return 0;
  }
  uint64_t v25 = 0;
  *(void *)&long long v26 = v7;
  *((void *)&v26 + 1) = v6;
  *(void *)&long long v27 = v11;
  *((void *)&v27 + 1) = v10;
  while (1)
  {
    long long v29 = v26;
    float v28 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
    long long v30 = v27;
    uint64_t result = v28 == *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
    if (v25 == 2) {
      break;
    }
    while (1)
    {
      ++v25;
      if (result) {
        break;
      }
      uint64_t result = 0;
      if (v25 == 2) {
        return result;
      }
    }
  }
  return result;
}

Swift::Float __swiftcall BillboardAction.transitionInValue(initialValue:normalizedTime:eventDuration:)(Swift::Float initialValue, Swift::Double normalizedTime, Swift::Double eventDuration)
{
  float v4 = initialValue;
  if (normalizedTime > 0.0)
  {
    initialValue = 1.0;
    if (normalizedTime <= 1.0 && eventDuration > 0.0)
    {
      float v5 = normalizedTime / (*(double *)(v3 + 80) / eventDuration);
      if (v5 <= 0.0) {
        float v5 = 0.0;
      }
      if (v5 <= 1.0) {
        float v6 = v5;
      }
      else {
        float v6 = 1.0;
      }
      if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
      {
        REEasingFunctionEvaluateEx();
        float v6 = v7;
      }
      swift_release();
      return v6 + (float)((float)(1.0 - v6) * v4);
    }
  }
  return initialValue;
}

Swift::Float __swiftcall BillboardAction.transitionOutValue(initialValue:normalizedTime:eventDuration:)(Swift::Float initialValue, Swift::Double normalizedTime, Swift::Double eventDuration)
{
  float v4 = initialValue;
  if (normalizedTime < 1.0)
  {
    initialValue = 1.0;
    if (normalizedTime >= 0.0 && eventDuration > 0.0)
    {
      float v5 = (*(double *)(v3 + 128) / eventDuration + normalizedTime + -1.0) / (*(double *)(v3 + 128) / eventDuration);
      if (v5 <= 0.0) {
        float v5 = 0.0;
      }
      if (v5 <= 1.0) {
        float v6 = v5;
      }
      else {
        float v6 = 1.0;
      }
      if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
      {
        REEasingFunctionEvaluateEx();
        float v6 = v7;
      }
      swift_release();
      return (float)(1.0 - v6) + (float)(v6 * v4);
    }
  }
  return initialValue;
}

uint64_t BillboardAction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BillboardAction.CodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  float v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  int v9 = *(_DWORD *)(v1 + 112);
  int v26 = *(unsigned __int8 *)(v1 + 116);
  uint64_t v10 = *(void *)(v1 + 128);
  uint64_t v11 = *(void *)(v1 + 144);
  uint64_t v17 = *(void *)(v1 + 152);
  uint64_t v18 = v11;
  LODWORD(v11) = *(_DWORD *)(v1 + 160);
  int v15 = *(unsigned __int8 *)(v1 + 164);
  int v16 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v21 = v6;
  uint64_t v22 = v8;
  uint64_t v23 = v7;
  int v24 = v9;
  char v25 = v26;
  char v27 = 0;
  lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition();
  uint64_t v12 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v21 = v10;
    uint64_t v22 = v18;
    uint64_t v23 = v17;
    int v24 = v16;
    char v25 = v15;
    char v27 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v5, v3);
}

uint64_t BillboardAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BillboardAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(from:));
  long long v22 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v23 = 0;
    lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v24;
    uint64_t v20 = *((void *)&v25 + 1);
    uint64_t v21 = v25;
    int v18 = v27;
    int v19 = v26;
    char v23 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v11 = v24;
    int v12 = v26;
    unsigned __int8 v13 = v27;
    long long v14 = v25;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    *(_OWORD *)(a2 + 32) = v22;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 64) = 1;
    *(void *)(a2 + 80) = v10;
    uint64_t v15 = v20;
    *(void *)(a2 + 96) = v21;
    *(void *)(a2 + 104) = v15;
    *(_DWORD *)(a2 + 112) = v19;
    *(unsigned char *)(a2 + 116) = v18;
    *(void *)(a2 + 128) = v11;
    *(_OWORD *)(a2 + 144) = v14;
    *(_DWORD *)(a2 + 160) = v12;
    *(unsigned char *)(a2 + 164) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.animatedValueType.getter in conformance BillboardAction()
{
  return MEMORY[0x263F8D5C8];
}

uint64_t protocol witness for Decodable.init(from:) in conformance BillboardAction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return BillboardAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BillboardAction(void *a1)
{
  return BillboardAction.encode(to:)(a1);
}

void *BillboardActionHandler.actionStarted(event:)(void *__src)
{
  uint64_t result = memcpy(v48, __src, 0x170uLL);
  uint64_t v3 = v48[23];
  if (v48[23])
  {
    swift_retain();
    uint64_t v4 = outlined retain of ActionEvent<BillboardAction>((uint64_t)v48);
    specialized ActionEvent.animationState.getter(&v41, v4, v5);
    outlined release of ActionEvent<BillboardAction>((uint64_t)v48);
    if (!*((void *)&v42 + 1))
    {
      swift_release();
      return (void *)outlined destroy of AnimationStateProtocol?((uint64_t)&v41);
    }
    long long v34 = v1;
    uint64_t v35 = v3;
    outlined init with take of BindableDataInternal(&v41, (uint64_t)v38);
    uint64_t v6 = v39;
    uint64_t v7 = v40;
    __swift_project_boxed_opaque_existential_1(v38, v39);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v10 = type metadata accessor for Optional();
    uint64_t v36 = &v33;
    uint64_t v11 = *(void *)(v10 - 8);
    MEMORY[0x270FA5388](v10);
    unsigned __int8 v13 = (char *)&v33 - v12;
    v8(v6, v7);
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_release();
    }
    else
    {
      *((void *)&v42 + 1) = AssociatedTypeWitness;
      *(void *)&long long v43 = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
      if (swift_dynamicCast())
      {
        uint64_t v16 = v48[2];
        uint64_t v17 = v48[3];
        char v18 = v48[4];
        uint64_t v20 = v48[6];
        uint64_t v19 = v48[7];
        uint64_t v21 = v48[8];
        uint64_t v22 = v48[9];
        char v23 = v48[10];
        swift_retain();
        specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v41);
        swift_release();
        if ((v47 & 1) == 0)
        {
          int v27 = v46;
          long long v28 = v42;
          long long v29 = v43;
          long long v30 = v44;
          long long v31 = v45;
          long long v32 = v34;
          _OWORD *v34 = v41;
          v32[1] = v28;
          v32[2] = v29;
          v32[3] = v30;
          v32[4] = v31;
          *((_DWORD *)v32 + 20) = v27;
          *((unsigned char *)v32 + 84) = 0;
          *(void *)&long long v41 = v21;
          *((void *)&v41 + 1) = v22;
          long long v42 = v23 & 1;
          *(void *)&long long v43 = v16;
          *((void *)&v43 + 1) = v17;
          long long v44 = v18 & 1;
          *(void *)&long long v45 = v20;
          *((void *)&v45 + 1) = v19;
          int v46 = v27;
          char v47 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v41);
          swift_release_n();
          return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        }
        *(void *)&long long v41 = 0;
        *((void *)&v41 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(60);
        v24._countAndFlagsBits = 0x2072656C646E6148;
        v24._object = (void *)0xEC00000020726F66;
        String.append(_:)(v24);
        uint64_t v37 = &type metadata for BillboardAction;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
        v25._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._object = (void *)0x8000000228350AF0;
        v26._countAndFlagsBits = 0xD00000000000002ELL;
        String.append(_:)(v26);
        specialized static AnimationLogger.logError(_:)(v41, *((void *)&v41 + 1));
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  return result;
}

uint64_t BillboardActionHandler.actionUpdated(event:)(void *__src)
{
  memcpy(v66, __src, sizeof(v66));
  *((void *)&v49 + 1) = *((void *)&v66[1] + 1);
  unint64_t v2 = *(void *)&v66[1];
  uint64_t v51 = LOBYTE(v66[2]);
  v84[0] = *(void *)((char *)&v66[2] + 1);
  *(void *)((char *)v84 + 7) = *((void *)&v66[2] + 1);
  unsigned long long v50 = v66[3];
  unsigned long long v3 = v66[4];
  char v4 = v66[5];
  long long v77 = *(_OWORD *)((char *)&v66[5] + 1);
  long long v78 = *(_OWORD *)((char *)&v66[6] + 1);
  int v83 = *(_DWORD *)((char *)&v66[11] + 1);
  long long v81 = *(_OWORD *)((char *)&v66[9] + 1);
  long long v82 = *(_OWORD *)((char *)&v66[10] + 1);
  long long v79 = *(_OWORD *)((char *)&v66[7] + 1);
  long long v80 = *(_OWORD *)((char *)&v66[8] + 1);
  if (!*((void *)&v66[11] + 1))
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)&v55, "Handler for ");
    BYTE13(v55) = 0;
    HIWORD(v55) = -5120;
    *(void *)&unsigned long long v67 = &type metadata for BillboardAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v10._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x8000000228350720;
    v11._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v11);
    specialized static AnimationLogger.logError(_:)(v55, *((void *)&v55 + 1));
    return swift_bridgeObjectRelease();
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v55);
  swift_release();
  if (v60[20])
  {
    *(void *)&unsigned long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    v5._countAndFlagsBits = 0x2072656C646E6148;
    v5._object = (void *)0xEC00000020726F66;
    String.append(_:)(v5);
    *(void *)&unsigned long long v67 = &type metadata for BillboardAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0xD00000000000003DLL;
    v7._object = (void *)0x8000000228350AB0;
    String.append(_:)(v7);
    REEntityGetName();
    v8._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 39;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    specialized static AnimationLogger.logError(_:)(v55, *((void *)&v55 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v13 = v2;
  int v14 = *(_DWORD *)&v60[16];
  char v15 = v59;
  char v16 = v56;
  uint64_t v17 = *(void *)v60;
  uint64_t v18 = *(void *)&v60[8];
  long long v62 = v80;
  long long v63 = v81;
  long long v64 = v82;
  *(_OWORD *)&v60[1] = v77;
  unsigned long long v19 = v55;
  *(_OWORD *)&v60[17] = v78;
  unsigned long long v20 = v58;
  *(void *)&unsigned long long v49 = v13;
  unsigned long long v55 = __PAIR128__(*((unint64_t *)&v49 + 1), v13);
  char v56 = v51;
  *(void *)char v57 = v84[0];
  *(void *)&v57[7] = *(void *)((char *)v84 + 7);
  unsigned long long v58 = v50;
  unsigned long long v59 = v3;
  v60[0] = v4;
  int v65 = v83;
  long long v61 = v79;
  unsigned long long v67 = v19;
  LOBYTE(v68) = v16 & 1;
  unsigned long long v70 = v20;
  LOBYTE(v71) = v15 & 1;
  *(void *)&unsigned long long v73 = v17;
  *((void *)&v73 + 1) = v18;
  int v74 = v14;
  if ((BillboardAction.isUpToDate(_:)((uint64_t *)&v67) & 1) == 0)
  {
    unsigned long long v67 = v3;
    uint64_t v68 = v4 & 1;
    uint64_t v69 = 0;
    unsigned long long v70 = v49;
    uint64_t v71 = v51 & 1;
    uint64_t v72 = 0;
    unsigned long long v73 = v50;
    int v74 = v14;
    char v75 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v67);
    swift_release();
  }
  outlined init with take of Transform?((uint64_t)&v66[16] + 8, (uint64_t)v76, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v76, (uint64_t)&v85, &demangling cache variable for type metadata for Double?);
  if (v86 == 1) {
    return swift_release();
  }
  Swift::Double v21 = v85;
  uint64_t v22 = outlined retain of ActionEvent<BillboardAction>((uint64_t)v66);
  specialized ActionEvent.animationState.getter(&v55, v22, v23);
  outlined release of ActionEvent<BillboardAction>((uint64_t)v66);
  if (!*(void *)&v57[7])
  {
    swift_release();
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v55);
  }
  outlined init with take of BindableDataInternal((long long *)&v55, (uint64_t)v52);
  if (*(unsigned char *)(v1 + 84)) {
    goto LABEL_17;
  }
  Swift::Float v24 = *(float *)(v1 + 80);
  uint64_t v25 = v54;
  uint64_t v48 = v53;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  uint64_t v47 = v25;
  Swift::String v26 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
  uint64_t v44 = v25 + 24;
  long long v45 = v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  int v46 = &v41;
  uint64_t v42 = *(void *)(v28 - 8);
  uint64_t v43 = v28;
  MEMORY[0x270FA5388](v28);
  long long v30 = (void (*)(uint64_t, uint64_t))((char *)&v41 - v29);
  v45(v48, v47);
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  long long v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v44 = AssociatedTypeWitness;
  long long v45 = v30;
  if (v32((char *)v30, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v33 = v44;
    *(void *)&v57[7] = v44;
    *(void *)&unsigned long long v58 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    (*(void (**)(uint64_t *, void (*)(uint64_t, uint64_t), uint64_t))(v31 + 32))(boxed_opaque_existential_1, v45, v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
    if (swift_dynamicCast())
    {
      long long v62 = v80;
      long long v63 = v81;
      long long v64 = v82;
      *(_OWORD *)&v60[1] = v77;
      *(_OWORD *)&v60[17] = v78;
      Swift::Double v35 = *(double *)&v66[13];
      unsigned long long v36 = v49;
      unsigned long long v55 = v49;
      char v56 = v51;
      *(void *)char v57 = v84[0];
      *(void *)&v57[7] = *(void *)((char *)v84 + 7);
      unsigned long long v58 = v50;
      unsigned long long v59 = v3;
      v60[0] = v4;
      int v65 = v83;
      long long v61 = v79;
      float v37 = BillboardAction.transitionInValue(initialValue:normalizedTime:eventDuration:)(v24, v21, *(Swift::Double *)&v66[13]);
      unsigned long long v58 = v50;
      long long v62 = v80;
      long long v63 = v81;
      long long v64 = v82;
      *(_OWORD *)&v60[1] = v77;
      *(_OWORD *)&v60[17] = v78;
      unsigned long long v55 = v36;
      char v56 = v51;
      *(void *)char v57 = v84[0];
      *(void *)&v57[7] = *(void *)((char *)v84 + 7);
      unsigned long long v59 = v3;
      v60[0] = v4;
      int v65 = v83;
      long long v61 = v79;
      float v38 = v37 * BillboardAction.transitionOutValue(initialValue:normalizedTime:eventDuration:)(v24, v21, v35);
      uint64_t v39 = v53;
      uint64_t v40 = v54;
      __swift_project_boxed_opaque_existential_1(v52, v53);
      *(float *)&unsigned long long v55 = v38;
      (*(void (**)(unsigned long long *, void, uint64_t, uint64_t))(v40 + 64))(&v55, MEMORY[0x263F8D5C8], v39, v40);
    }
LABEL_17:
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  (*(void (**)(void, uint64_t))(v42 + 8))(v45, v43);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

uint64_t BillboardActionHandler.actionEnded(event:)(uint64_t a1)
{
  if (*(void *)(a1 + 184))
  {
    outlined init with take of Transform?(v1, (uint64_t)v5, &demangling cache variable for type metadata for BillboardComponent?);
    uint64_t result = outlined init with take of Transform?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for BillboardComponent?);
    if ((v7 & 1) == 0)
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
      return swift_release();
    }
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "Handler for ");
    BYTE5(v6[1]) = 0;
    HIWORD(v6[1]) = -5120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v3._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._object = (void *)0x8000000228350720;
    v4._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v4);
    specialized static AnimationLogger.logError(_:)(v6[0], v6[1]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition()
{
  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition);
  }
  return result;
}

__n128 __swift_memcpy165_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 157) = *(void *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 165)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 116);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BillboardAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 164) = 0;
    *(_DWORD *)(result + 160) = 0;
    *(void *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 165) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 165) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 116) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BillboardAction()
{
  return &type metadata for BillboardAction;
}

__n128 __swift_memcpy37_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 29) = *(void *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardAction.Transition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 37)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 36);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BillboardAction.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 246;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 37) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 37) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 36) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BillboardAction.Transition()
{
  return &type metadata for BillboardAction.Transition;
}

ValueMetadata *type metadata accessor for BillboardAction.CodingKeys()
{
  return &type metadata for BillboardAction.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BillboardAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EBE7FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BillboardAction.Transition.CodingKeys()
{
  return &unk_26DC921B0;
}

uint64_t specialized BillboardAction.Transition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7546676E696D6974 && a2 == 0xEE006E6F6974636ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t outlined retain of ActionEvent<BillboardAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ActionEvent<BillboardAction>(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy85_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 77) = *(void *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardActionHandler(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 85)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BillboardActionHandler(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 85) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BillboardActionHandler()
{
  return &type metadata for BillboardActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in BillboardActionHandler()
{
  return &protocol witness table for BillboardAction;
}

uint64_t __RKVisibilityShowScaleAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityShowScaleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKVisibilityShowScaleDownAnimation.deinit()
{
  return v0;
}

uint64_t type metadata accessor for __RKVisibilityShowScaleAnimation()
{
  return self;
}

uint64_t type metadata accessor for __RKVisibilityShowScaleDownAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 105, 0, MEMORY[0x263F8EE78]);
      unint64_t v13 = &outlined read-only object #0 of static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 89, 0, MEMORY[0x263F8EE78]);
      unint64_t v13 = &outlined read-only object #1 of static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  }
  else
  {
    v33._rawValue = (void *)MEMORY[0x263F8EE78];
  }
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_16;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  char v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  unsigned long long v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 127, 0, MEMORY[0x263F8EE78]);
      unint64_t v13 = &outlined read-only object #1 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 124, 0, MEMORY[0x263F8EE78]);
      unint64_t v13 = &outlined read-only object #2 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 53, 0, MEMORY[0x263F8EE78]);
    unint64_t v13 = &outlined read-only object #0 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  char v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  unsigned long long v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PhysicsJoint.addToSimulation()(uint64_t a1, uint64_t a2)
{
  _OWORD v7[4] = a2;
  v7[3] = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  uint64_t v5 = specialized static PhysicsJointCreator.addToSimulation(_:)(v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t PhysicsFixedJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsFixedJoint.pin0.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsFixedJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsFixedJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsFixedJoint.pin1.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsFixedJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsFixedJoint.checksForInternalCollisions.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsFixedJoint.isActive.getter()
{
  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t PhysicsFixedJoint.init(pin0:pin1:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 160) = 0;
  outlined init with take of GeometricPin(a1, a3);

  return outlined init with take of GeometricPin(a2, a3 + 80);
}

uint64_t static PhysicsFixedJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    char v4 = *(unsigned char *)(a1 + 161) ^ *(unsigned char *)(a2 + 161) ^ 1;
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t protocol witness for PhysicsJoint.pin0.getter in conformance PhysicsFixedJoint@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t protocol witness for PhysicsJoint.pin0.setter in conformance PhysicsFixedJoint(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t protocol witness for PhysicsJoint.pin1.getter in conformance PhysicsFixedJoint@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t protocol witness for PhysicsJoint.pin1.setter in conformance PhysicsFixedJoint(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*protocol witness for PhysicsJoint.pin1.modify in conformance PhysicsFixedJoint())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for PhysicsJoint.checksForInternalCollisions.getter in conformance PhysicsFixedJoint()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t protocol witness for PhysicsJoint.isActive.getter in conformance PhysicsFixedJoint()
{
  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    char v4 = *(unsigned char *)(a1 + 161) ^ *(unsigned char *)(a2 + 161) ^ 1;
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t (*PhysicsSphericalJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.angularLimitInYZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsRevoluteJoint.pin0.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsRevoluteJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsRevoluteJoint.pin1.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsRevoluteJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.checksForInternalCollisions.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsRevoluteJoint.checksForInternalCollisions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsRevoluteJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.isActive.getter()
{
  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t PhysicsRevoluteJoint.angularLimit.getter()
{
  return *(void *)(v0 + 164);
}

uint64_t PhysicsRevoluteJoint.angularLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 164) = result;
  *(unsigned char *)(v2 + 172) = a2 & 1;
  return result;
}

uint64_t (*PhysicsRevoluteJoint.angularLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static PhysicsRevoluteJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsRevoluteJoint(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

uint64_t (*PhysicsPrismaticJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.linearLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsSphericalJoint.init(pin0:pin1:angularLimitInYZ:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(unsigned char *)(a6 + 161) = 0;
  outlined init with take of GeometricPin(a1, a6);
  uint64_t result = outlined init with take of GeometricPin(a2, a6 + 80);
  *(void *)(a6 + 164) = a3;
  *(unsigned char *)(a6 + 172) = a4 & 1;
  *(unsigned char *)(a6 + 160) = a5;
  return result;
}

BOOL static PhysicsPrismaticJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

uint64_t PhysicsDistanceJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsDistanceJoint.pin0.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsDistanceJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsDistanceJoint.pin1.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsDistanceJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.checksForInternalCollisions.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsDistanceJoint.checksForInternalCollisions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsDistanceJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.isActive.getter()
{
  return *(unsigned __int8 *)(v0 + 161);
}

float PhysicsDistanceJoint.distanceLimit.getter()
{
  return *(float *)(v0 + 164);
}

void PhysicsDistanceJoint.distanceLimit.setter(float a1, float a2)
{
  *(float *)(v2 + 164) = a1;
  *(float *)(v2 + 168) = a2;
}

uint64_t (*PhysicsDistanceJoint.distanceLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PhysicsDistanceJoint.tolerance.getter()
{
  return *(float *)(v0 + 172);
}

void PhysicsDistanceJoint.tolerance.setter(float a1)
{
  *(float *)(v1 + 172) = a1;
}

uint64_t (*PhysicsDistanceJoint.tolerance.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.init(pin0:pin1:distanceLimit:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  *(unsigned char *)(a4 + 161) = 0;
  *(_DWORD *)(a4 + 172) = 1008981770;
  outlined init with take of GeometricPin(a1, a4);
  uint64_t result = outlined init with take of GeometricPin(a2, a4 + 80);
  *(float *)(a4 + 164) = a5;
  *(float *)(a4 + 168) = a6;
  *(unsigned char *)(a4 + 160) = a3;
  return result;
}

uint64_t PhysicsCustomJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsCustomJoint.pin0.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsCustomJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsCustomJoint.pin1.setter(uint64_t a1)
{
  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsCustomJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.checksForInternalCollisions.getter()
{
  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsCustomJoint.checksForInternalCollisions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsCustomJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.isActive.getter()
{
  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t static PhysicsCustomJoint.MotionLimit.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a1 + 8) == 1)
  {
    BOOL v5 = v3 == 0;
    if (v3) {
      unsigned int v6 = 0;
    }
    else {
      unsigned int v6 = *((unsigned __int8 *)a2 + 8);
    }
    if (v5) {
      unsigned int v4 = 0;
    }
    if (v2) {
      return v4;
    }
    else {
      return v6;
    }
  }
  else if (v4)
  {
    return 0;
  }
  else
  {
    BOOL v8 = *(float *)&v2 == *(float *)&v3;
    return COERCE_FLOAT(HIDWORD(*a1)) == *((float *)&v3 + 1) && v8;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsCustomJoint.MotionLimit(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a1 + 8) == 1)
  {
    BOOL v5 = v3 == 0;
    if (v3) {
      unsigned int v6 = 0;
    }
    else {
      unsigned int v6 = *((unsigned __int8 *)a2 + 8);
    }
    if (v5) {
      unsigned int v4 = 0;
    }
    if (v2) {
      return v4;
    }
    else {
      return v6;
    }
  }
  else if (v4)
  {
    return 0;
  }
  else
  {
    BOOL v8 = *(float *)&v2 == *(float *)&v3;
    return COERCE_FLOAT(HIDWORD(*a1)) == *((float *)&v3 + 1) && v8;
  }
}

void PhysicsCustomJoint.linearMotionAlongX.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 172);
  *(void *)a1 = *(void *)(v1 + 164);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongX.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 164) = *(void *)result;
  *(unsigned char *)(v1 + 172) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.linearMotionAlongY.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 184);
  *(void *)a1 = *(void *)(v1 + 176);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongY.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 176) = *(void *)result;
  *(unsigned char *)(v1 + 184) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.linearMotionAlongZ.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 196);
  *(void *)a1 = *(void *)(v1 + 188);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongZ.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 188) = *(void *)result;
  *(unsigned char *)(v1 + 196) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundX.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 208);
  *(void *)a1 = *(void *)(v1 + 200);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundX.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 200) = *(void *)result;
  *(unsigned char *)(v1 + 208) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundY.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 220);
  *(void *)a1 = *(void *)(v1 + 212);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundY.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 212) = *(void *)result;
  *(unsigned char *)(v1 + 220) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundZ.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 232);
  *(void *)a1 = *(void *)(v1 + 224);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundZ.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 224) = *(void *)result;
  *(unsigned char *)(v1 + 232) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.init(pin0:pin1:linearMotionAlongX:linearMotionAlongY:linearMotionAlongZ:angularMotionAroundX:angularMotionAroundY:angularMotionAroundZ:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v12 = *a3;
  char v13 = *((unsigned char *)a3 + 8);
  uint64_t v14 = *a4;
  char v15 = *((unsigned char *)a4 + 8);
  uint64_t v16 = *a5;
  char v17 = *((unsigned char *)a5 + 8);
  uint64_t v18 = *a6;
  char v19 = *((unsigned char *)a6 + 8);
  uint64_t v24 = *a7;
  char v23 = *((unsigned char *)a7 + 8);
  uint64_t v22 = *a8;
  char v21 = *((unsigned char *)a8 + 8);
  *(unsigned char *)(a9 + 161) = 0;
  outlined init with take of GeometricPin(a1, a9);
  uint64_t result = outlined init with take of GeometricPin(a2, a9 + 80);
  *(void *)(a9 + 164) = v12;
  *(unsigned char *)(a9 + 172) = v13;
  *(void *)(a9 + 176) = v14;
  *(unsigned char *)(a9 + 184) = v15;
  *(void *)(a9 + 188) = v16;
  *(unsigned char *)(a9 + 196) = v17;
  *(void *)(a9 + 200) = v18;
  *(unsigned char *)(a9 + 208) = v19;
  *(void *)(a9 + 212) = v24;
  *(unsigned char *)(a9 + 220) = v23;
  *(void *)(a9 + 224) = v22;
  *(unsigned char *)(a9 + 232) = v21;
  *(unsigned char *)(a9 + 160) = a10;
  return result;
}

RealityFoundation::PhysicsJoints __swiftcall PhysicsJoints.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *uint64_t v0 = 0;
  v0[1] = v1;
  return result;
}

uint64_t PhysicsJoints.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = result;
  return result;
}

uint64_t PhysicsJoints.init(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  __n128 v5 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  uint64_t v8 = Array.init<A>(_:)();
  *a2 = 0;
  a2[1] = v8;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t PhysicsJoints.startIndex.getter()
{
  return *(void *)v0;
}

Swift::Int __swiftcall PhysicsJoints.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall PhysicsJoints.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t PhysicsJoints.count.getter()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

unint64_t PhysicsJoints.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (*(void *)(v3 + 16) > result) {
      return outlined init with copy of __REAssetService(v3 + 40 * result + 32, a2);
    }
  }
  __break(1u);
  return result;
}

uint64_t key path getter for PhysicsJoints.subscript(_:) : PhysicsJoints@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v3 < *(void *)(v4 + 16)) {
      return outlined init with copy of __REAssetService(v4 + 40 * v3 + 32, a3);
    }
  }
  __break(1u);
  return result;
}

uint64_t key path setter for PhysicsJoints.subscript(_:) : PhysicsJoints(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __n128 v5 = *(void **)(a2 + 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 8) = v5;
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  __n128 v5 = (void *)result;
  *(void *)(a2 + 8) = result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v5[2])
  {
    __swift_assign_boxed_opaque_existential_1(&v5[5 * v4 + 4], v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t PhysicsJoints.subscript.setter(uint64_t *a1, unint64_t a2)
{
  __n128 v5 = *(void **)(v2 + 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 8) = v5;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  __n128 v5 = (void *)result;
  *(void *)(v2 + 8) = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (v5[2] <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  __swift_assign_boxed_opaque_existential_1(&v5[5 * a2 + 4], a1);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*PhysicsJoints.subscript.modify(void (**a1)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t result = (void (*)(uint64_t *, char))malloc(0x60uLL);
  *a1 = result;
  *((void *)result + 10) = a2;
  *((void *)result + 11) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 8);
    if (*(void *)(v6 + 16) > a2)
    {
      outlined init with copy of __REAssetService(v6 + 40 * a2 + 32, (uint64_t)result);
      return PhysicsJoints.subscript.modify;
    }
  }
  __break(1u);
  return result;
}

void PhysicsJoints.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 88);
  if (a2)
  {
    unint64_t v4 = v2 + 5;
    outlined init with copy of __REAssetService(*a1, (uint64_t)(v2 + 5));
    __n128 v5 = *(void **)(v3 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 8) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = v2[11];
      __n128 v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(void *)(v10 + 8) = v5;
    }
    unint64_t v7 = v2[10];
    if (v5[2] > v7)
    {
      __swift_assign_boxed_opaque_existential_1(&v5[5 * v7 + 4], v2 + 5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 5));
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v4 = *(void **)(v3 + 8);
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 8) = v4;
  if ((v8 & 1) == 0)
  {
LABEL_13:
    uint64_t v11 = v2[11];
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    *(void *)(v11 + 8) = v4;
  }
  unint64_t v9 = v2[10];
  if (v4[2] <= v9)
  {
    __break(1u);
    return;
  }
  __swift_assign_boxed_opaque_existential_1(&v4[5 * v9 + 4], v2);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);

  free(v2);
}

uint64_t PhysicsJoints.replaceSubrange<A>(_:with:)(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhysicsJoint]);
  return Array.replaceSubrange<A>(_:with:)();
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance PhysicsJoints@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance PhysicsJoints(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance PhysicsJoints@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance PhysicsJoints(void *a1, void *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PhysicsJoints(uint64_t *a1, unint64_t *a2)
{
  return PhysicsJoints.subscript.setter(a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PhysicsJoints(void (***a1)(uint64_t *a1, char a2), unint64_t *a2))()
{
  uint64_t v4 = (void (**)(uint64_t *, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = PhysicsJoints.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PhysicsJoints(uint64_t *a1, void **a2)
{
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1], a1[2], a1[3]);

  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PhysicsJoints(void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance PhysicsJoints@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance PhysicsJoints(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance PhysicsJoints()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance PhysicsJoints()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

void protocol witness for RangeReplaceableCollection.init() in conformance PhysicsJoints(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = 0;
  a1[1] = v1;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance PhysicsJoints(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  PhysicsJoints.replaceSubrange<A>(_:with:)(*a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

long long *specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(long long *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = 0;
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(void *)&v13[0] = a2;
      outlined init with take of BindableDataInternal(result, (uint64_t)v13 + 8);
      v11[0] = v13[0];
      v11[1] = v13[1];
      v11[2] = v13[2];
      uint64_t v12 = 0;
      uint64_t v4 = 0;
      while (1)
      {
        outlined init with copy of (Int, URL)((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for Repeated<PhysicsJoint>);
        uint64_t v5 = v10[0];
        unint64_t result = (long long *)outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Repeated<PhysicsJoint>);
        if (v4 < 0 || v4 >= v5) {
          break;
        }
        if (v4 >= *(uint64_t *)&v11[0]) {
          goto LABEL_12;
        }
        uint64_t v12 = v4 + 1;
        uint64_t v6 = *(void *)(v15 + 16);
        outlined init with copy of __REAssetService((uint64_t)v11 + 8, (uint64_t)v10);
        outlined init with copy of (Int, URL)((uint64_t)v10, (uint64_t)v9, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
        specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v9);
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
        uint64_t v4 = v12;
        if (v12 == *(void *)&v11[0])
        {
          uint64_t v7 = v14;
          uint64_t v8 = v15;
          unint64_t result = (long long *)outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<Repeated<PhysicsJoint>>);
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    unint64_t result = (long long *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    uint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
    *a3 = v7;
    a3[1] = v8;
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance PhysicsJoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E2D0](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance PhysicsJoints(long long *a1)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 16);
  outlined init with take of BindableDataInternal(a1, (uint64_t)v5);
  outlined init with copy of (Int, URL)((uint64_t)v5, (uint64_t)v4, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance PhysicsJoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E288](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance PhysicsJoints(long long *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  outlined init with take of BindableDataInternal(a1, (uint64_t)v5);
  outlined init with copy of (Int, URL)((uint64_t)v5, (uint64_t)v4, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance PhysicsJoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F9E2A0](a1, a2, a5, a3, a6, a4);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance PhysicsJoints@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

unint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2[1];
  unint64_t v4 = *(void *)(v3 + 16);
  if (*v2 == v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v5 = result;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 > result)
  {
    outlined init with copy of __REAssetService(v3 + 40 * result + 32, a2);
    return specialized Array.replaceSubrange<A>(_:with:)(v5, v5 + 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance PhysicsJoints(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1]);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance PhysicsJoints@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v4 = *(void *)(v3 + 16);
  if (*v1 == v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < v4)
  {
    outlined init with copy of __REAssetService(v3 + 40 * v2 + 32, a1);
    return specialized Array.replaceSubrange<A>(_:with:)(v2, v2 + 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t protocol witness for RangeReplaceableCollection.removeFirst(_:) in conformance PhysicsJoints(int64_t result)
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v2 = *v1;
      uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*v1, result, *(void *)(v1[1] + 16));
      if (v3)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if (result >= v2) {
        return specialized Array.replaceSubrange<A>(_:with:)(v2, result);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance PhysicsJoints(char a1)
{
  if (a1)
  {
    uint64_t result = *v1;
    int64_t v3 = *(void *)(v1[1] + 16);
    if (v3 < *v1) {
      __break(1u);
    }
    else {
      return specialized Array.replaceSubrange<A>(_:with:)(result, v3);
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
    *uint64_t v1 = 0;
    v1[1] = v4;
  }
  return result;
}

int64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance PhysicsJoints(uint64_t (*a1)(uint64_t))
{
  int64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1);
  if (!v2)
  {
    int64_t v4 = *(void *)(*(void *)(v1 + 8) + 16);
    if (v4 < result) {
      __break(1u);
    }
    else {
      return specialized Array.replaceSubrange<A>(_:with:)(result, v4);
    }
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PhysicsJoints@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = result;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance PhysicsJoints(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 8) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance PhysicsJoints(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  int64_t result = (void (*)(uint64_t *))malloc(0x28uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 8);
    if (v6 < *(void *)(v7 + 16))
    {
      outlined init with copy of __REAssetService(v7 + 40 * v6 + 32, (uint64_t)result);
      return protocol witness for Collection.subscript.read in conformance PhysicsJoints;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance PhysicsJoints(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  __swift_destroy_boxed_opaque_existential_1(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance PhysicsJoints@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = v2[1];
  uint64_t v6 = *(void *)(result + 16);
  if (v6 < *v2)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = *a1;
  if (*a1 < v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = a1[1];
  if (v6 >= v8)
  {
    a2[2] = v5;
    a2[3] = result;
    *a2 = v7;
    a2[1] = v8;
    return swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance PhysicsJoints@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  a1[2] = v3;
  a1[3] = v4;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PhysicsJoints()
{
  return *v0 == *(void *)(v0[1] + 16);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance PhysicsJoints@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for Collection.index(after:) in conformance PhysicsJoints@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance PhysicsJoints(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PhysicsJoints(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v2;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PhysicsJoints()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance PhysicsJoints()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, *(void *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PhysicsJoints(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x22A689940);
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t))
{
  unint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  unint64_t v5 = *(void *)(v4 + 16);
  if (*v1 != v5)
  {
    if (v5 <= v3) {
      unint64_t v7 = *v1;
    }
    else {
      unint64_t v7 = *(void *)(v4 + 16);
    }
    swift_bridgeObjectRetain();
    for (uint64_t i = 40 * v3 + 72; ; i += 40)
    {
      if (v7 == v3)
      {
        __break(1u);
        goto LABEL_35;
      }
      char v9 = a1(v4 + i - 40);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
      if (v9) {
        break;
      }
      if (v5 == ++v3)
      {
        swift_bridgeObjectRelease();
        return *(void *)(v4 + 16);
      }
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v4 + 16) - 1 != v3)
    {
      unint64_t v5 = v3 + 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_42;
      }
      while (1)
      {
        v1[1] = v4;
        unint64_t v11 = *(void *)(v4 + 16);
        while (v5 < v11)
        {
          outlined init with copy of __REAssetService(v4 + i, (uint64_t)v17);
          uint64_t v4 = a1((uint64_t)v17);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
          if (v2) {
            return v3;
          }
          if ((v4 & 1) == 0)
          {
            if (v5 != v3)
            {
              if ((v3 & 0x8000000000000000) != 0) {
                goto LABEL_37;
              }
              uint64_t v4 = v1[1];
              unint64_t v13 = *(void *)(v4 + 16);
              if (v3 >= v13) {
                goto LABEL_38;
              }
              outlined init with copy of __REAssetService(v4 + 40 * v3 + 32, (uint64_t)v17);
              if (v5 >= v13) {
                goto LABEL_39;
              }
              outlined init with copy of __REAssetService(v4 + i, (uint64_t)v16);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v1[1] = v4;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v4);
                v1[1] = v4;
              }
              if (v3 >= *(void *)(v4 + 16)) {
                goto LABEL_40;
              }
              __swift_assign_boxed_opaque_existential_1((uint64_t *)(v4 + 40 * v3 + 32), v16);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
              uint64_t v4 = v1[1];
              char v15 = swift_isUniquelyReferenced_nonNull_native();
              v1[1] = v4;
              if ((v15 & 1) == 0)
              {
                uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v4);
                v1[1] = v4;
              }
              if (v5 >= *(void *)(v4 + 16)) {
                goto LABEL_41;
              }
              __swift_assign_boxed_opaque_existential_1((uint64_t *)(v4 + i), v17);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
            }
            if (__OFADD__(v3++, 1)) {
              goto LABEL_36;
            }
          }
          ++v5;
          uint64_t v4 = v1[1];
          unint64_t v11 = *(void *)(v4 + 16);
          i += 40;
          if (v5 == v11) {
            return v3;
          }
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v4);
      }
    }
  }
  return v3;
}

uint64_t specialized static PhysicsJoints.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 != *(void *)(v3 + 16))
  {
    char v10 = 0;
    return v10 & 1;
  }
  if (!v4)
  {
    char v10 = 1;
    return v10 & 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = v2 + 32;
  uint64_t v7 = v3 + 32;
  uint64_t v8 = v4 - 1;
  while (1)
  {
    uint64_t result = outlined init with copy of __REAssetService(v6, (uint64_t)v13);
    if (v5 >= *(void *)(v3 + 16)) {
      break;
    }
    outlined init with copy of __REAssetService(v7, (uint64_t)v12);
    char v10 = areJointDefinitionsEqual(_:_:)(v13, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (v10)
    {
      v6 += 40;
      v7 += 40;
      if (v8 != v5++) {
        continue;
      }
    }
    return v10 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static PhysicsCustomJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!specialized static GeometricPin.== infix(_:_:)(a1, a2)
    || !specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)
    || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 164);
  uint64_t v6 = *(void *)(a2 + 164);
  if (*(unsigned char *)(a1 + 172) == 1)
  {
    if (v5)
    {
      if (v6) {
        char v7 = *(unsigned char *)(a2 + 172);
      }
      else {
        char v7 = 0;
      }
      if ((v7 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v6) {
        LOBYTE(v8) = 0;
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 172);
      }
      if ((v8 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 172)) {
      return 0;
    }
    uint64_t result = 0;
    if (*(float *)&v5 != *(float *)&v6 || *((float *)&v5 + 1) != *((float *)&v6 + 1)) {
      return result;
    }
  }
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a2 + 176);
  if (*(unsigned char *)(a1 + 184) == 1)
  {
    if (v9)
    {
      if (v10) {
        char v11 = *(unsigned char *)(a2 + 184);
      }
      else {
        char v11 = 0;
      }
      if ((v11 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v10) {
        LOBYTE(v12) = 0;
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(a2 + 184);
      }
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 184)) {
      return 0;
    }
    uint64_t result = 0;
    if (*(float *)&v9 != *(float *)&v10 || *((float *)&v9 + 1) != *((float *)&v10 + 1)) {
      return result;
    }
  }
  uint64_t v13 = *(void *)(a1 + 188);
  uint64_t v14 = *(void *)(a2 + 188);
  if (*(unsigned char *)(a1 + 196) == 1)
  {
    if (v13)
    {
      if (v14) {
        char v15 = *(unsigned char *)(a2 + 196);
      }
      else {
        char v15 = 0;
      }
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v14) {
        LOBYTE(v16) = 0;
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 196);
      }
      if ((v16 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 196)) {
      return 0;
    }
    uint64_t result = 0;
    if (*(float *)&v13 != *(float *)&v14 || *((float *)&v13 + 1) != *((float *)&v14 + 1)) {
      return result;
    }
  }
  uint64_t v17 = *(void *)(a1 + 200);
  uint64_t v18 = *(void *)(a2 + 200);
  if (*(unsigned char *)(a1 + 208) == 1)
  {
    if (v17)
    {
      if (v18) {
        char v19 = *(unsigned char *)(a2 + 208);
      }
      else {
        char v19 = 0;
      }
      if ((v19 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v18) {
        LOBYTE(v20) = 0;
      }
      else {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 208);
      }
      if ((v20 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 208)) {
      return 0;
    }
    uint64_t result = 0;
    if (*(float *)&v17 != *(float *)&v18 || *((float *)&v17 + 1) != *((float *)&v18 + 1)) {
      return result;
    }
  }
  uint64_t v21 = *(void *)(a1 + 212);
  uint64_t v22 = *(void *)(a2 + 212);
  if (*(unsigned char *)(a1 + 220) == 1)
  {
    if (v21)
    {
      if (v22) {
        char v23 = *(unsigned char *)(a2 + 220);
      }
      else {
        char v23 = 0;
      }
      if ((v23 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v22) {
        LOBYTE(v24) = 0;
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(a2 + 220);
      }
      if ((v24 & 1) == 0) {
        return 0;
      }
    }
LABEL_82:
    uint64_t v25 = *(void *)(a1 + 224);
    uint64_t v26 = *(void *)(a2 + 224);
    if (*(unsigned char *)(a1 + 232) == 1)
    {
      if (v25)
      {
        if (*(unsigned char *)(a2 + 232)) {
          return v26 != 0;
        }
      }
      else if (*(unsigned char *)(a2 + 232))
      {
        return v26 == 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 232) & 1) == 0 {
           && *(float *)&v25 == *(float *)&v26
    }
           && *((float *)&v25 + 1) == *((float *)&v26 + 1))
    {
      return 1;
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 220)) {
    return 0;
  }
  uint64_t result = 0;
  if (*(float *)&v21 == *(float *)&v22 && *((float *)&v21 + 1) == *((float *)&v22 + 1)) {
    goto LABEL_82;
  }
  return result;
}

BOOL specialized static PhysicsDistanceJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160)
    && *(unsigned __int8 *)(a1 + 161) == *(unsigned __int8 *)(a2 + 161)
    && (*(float *)(a1 + 164) == *(float *)(a2 + 164) ? (BOOL v4 = *(float *)(a1 + 168) == *(float *)(a2 + 168)) : (BOOL v4 = 0), v4))
  {
    return *(float *)(a1 + 172) == *(float *)(a2 + 172);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static PhysicsRevoluteJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!specialized static GeometricPin.== infix(_:_:)(a1, a2)
    || !specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)
    || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 172) & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 172)) {
      return 0;
    }
    uint64_t v4 = *(void *)(a2 + 164);
    return *(float *)(a1 + 164) == *(float *)&v4 && *(float *)(a1 + 168) == *((float *)&v4 + 1);
  }
  return (*(unsigned char *)(a2 + 172) & 1) != 0;
}

BOOL specialized static PhysicsSphericalJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = specialized static GeometricPin.== infix(_:_:)(a1, a2);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v21);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v19);
  if (!v4)
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v19);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v21);
    outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v18);
    outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v17);
    goto LABEL_8;
  }
  BOOL v5 = specialized static GeometricPin.== infix(_:_:)((uint64_t)&v22, (uint64_t)&v20);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v19);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v21);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v18);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v17);
  if (!v5)
  {
LABEL_8:
    outlined destroy of PhysicsSphericalJoint((uint64_t)v17);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v18);
    outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v16);
    outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v15);
    goto LABEL_9;
  }
  int v6 = v18[160];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v18);
  int v7 = v17[160];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v17);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v16);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v15);
  if (v6 != v7)
  {
LABEL_9:
    outlined destroy of PhysicsSphericalJoint((uint64_t)v15);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v16);
    return 0;
  }
  int v8 = v16[161];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v16);
  int v9 = v15[161];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v15);
  if (v8 == v9)
  {
    if (*(unsigned char *)(a1 + 172))
    {
      outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v14);
      uint64_t v10 = v14[172];
LABEL_14:
      outlined destroy of PhysicsSphericalJoint((uint64_t)v14);
      return v10;
    }
    if (*(unsigned char *)(a2 + 172))
    {
      outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v14);
      uint64_t v10 = 0;
      goto LABEL_14;
    }
    uint64_t v12 = *(void *)(a1 + 164);
    uint64_t v13 = *(void *)(a2 + 164);
    if (*(float *)&v12 == *(float *)&v13) {
      return *((float *)&v12 + 1) == *((float *)&v13 + 1);
    }
  }
  return 0;
}

uint64_t outlined init with copy of GeometricPin(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of GeometricPin(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of GeometricPin(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        char v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsFixedJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint;
  if (!lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint;
  if (!lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsSphericalJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint;
  if (!lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint;
  if (!lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsRevoluteJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint;
  if (!lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint;
  if (!lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsPrismaticJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint;
  if (!lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint;
  if (!lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsDistanceJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint;
  if (!lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint;
  if (!lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsCustomJoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint;
  if (!lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint;
  if (!lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<PhysicsJoints>, (void (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (void (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (void (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (void (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<PhysicsJoints> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<PhysicsJoints>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<PhysicsJoints> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<PhysicsJoints>);
}

uint64_t sub_227EC2214()
{
  return 0;
}

uint64_t dispatch thunk of PhysicsJoint.pin0.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PhysicsJoint.pin0.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PhysicsJoint.pin0.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PhysicsJoint.checksForInternalCollisions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PhysicsJoint.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t initializeWithCopy for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_weakCopyAssign() + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  return a1;
}

uint64_t initializeWithTake for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsFixedJoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 162)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsFixedJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 162) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 162) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsFixedJoint()
{
  return &type metadata for PhysicsFixedJoint;
}

ValueMetadata *type metadata accessor for PhysicsSphericalJoint()
{
  return &type metadata for PhysicsSphericalJoint;
}

ValueMetadata *type metadata accessor for PhysicsRevoluteJoint()
{
  return &type metadata for PhysicsRevoluteJoint;
}

uint64_t initializeWithCopy for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_weakCopyAssign() + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v4 = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 164) = v4;
  return a1;
}

uint64_t initializeWithTake for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  return a1;
}

uint64_t assignWithTake for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsSphericalJoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 173)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsSphericalJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 172) = 0;
    *(_DWORD *)(result + 168) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 173) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 173) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsPrismaticJoint()
{
  return &type metadata for PhysicsPrismaticJoint;
}

uint64_t initializeWithCopy for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_weakCopyAssign() + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t initializeWithTake for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t assignWithTake for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsDistanceJoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsDistanceJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsDistanceJoint()
{
  return &type metadata for PhysicsDistanceJoint;
}

uint64_t destroy for PhysicsFixedJoint()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  uint64_t v10 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v10;
  *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_weakCopyAssign() + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v4 = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 164) = v4;
  uint64_t v5 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v5;
  uint64_t v6 = *(void *)(a2 + 188);
  *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
  *(void *)(a1 + 188) = v6;
  uint64_t v7 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v7;
  uint64_t v8 = *(void *)(a2 + 212);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 212) = v8;
  uint64_t v9 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = v9;
  return a1;
}

uint64_t initializeWithTake for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

uint64_t assignWithTake for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsCustomJoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 233)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsCustomJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 232) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 233) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 233) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsCustomJoint()
{
  return &type metadata for PhysicsCustomJoint;
}

uint64_t storeEnumTagSinglePayload for PhysicsCustomJoint.MotionLimit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for PhysicsCustomJoint.MotionLimit(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for PhysicsCustomJoint.MotionLimit(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsCustomJoint.MotionLimit()
{
  return &type metadata for PhysicsCustomJoint.MotionLimit;
}

ValueMetadata *type metadata accessor for PhysicsJoints()
{
  return &type metadata for PhysicsJoints;
}

uint64_t outlined init with copy of PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsSphericalJoint(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall __makeXfos(_:_:)(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  unint64_t v4 = *((void *)a1._rawValue + 2);
  unint64_t v5 = v4 / 0xA;
  rawValue = a2->_rawValue;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= rawValue[3] >> 1)
  {
    a2->_rawValue = rawValue;
    if (!v4) {
      return;
    }
  }
  else
  {
    if (rawValue[2] <= v5) {
      unint64_t v16 = v4 / 0xA;
    }
    else {
      unint64_t v16 = rawValue[2];
    }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 0, rawValue);
    a2->_rawValue = rawValue;
    if (!v4) {
      return;
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = (char *)a1._rawValue + 32;
  while (1)
  {
    uint64_t v19 = __OFADD__(v17, 10) ? 0x7FFFFFFFFFFFFFFFLL : v17 + 10;
    if (v17 >= v4) {
      break;
    }
    if (v17 + 1 >= v4) {
      goto LABEL_29;
    }
    if (v17 + 2 >= v4) {
      goto LABEL_30;
    }
    if (v17 + 3 >= v4) {
      goto LABEL_31;
    }
    if (v17 + 4 >= v4) {
      goto LABEL_32;
    }
    if (v17 + 5 >= v4) {
      goto LABEL_33;
    }
    if (v17 + 6 >= v4) {
      goto LABEL_34;
    }
    if (v17 + 7 >= v4) {
      goto LABEL_35;
    }
    unint64_t v20 = v17 + 8;
    if (v17 + 8 >= v4) {
      goto LABEL_36;
    }
    unint64_t v21 = v17 + 9;
    if (v17 + 9 >= v4) {
      goto LABEL_37;
    }
    LODWORD(v14) = *(_DWORD *)&v18[4 * v17];
    LODWORD(v13) = *(_DWORD *)&v18[4 * v17 + 4];
    LODWORD(v11) = *(_DWORD *)&v18[4 * v17 + 8];
    LODWORD(v22) = *(_DWORD *)&v18[4 * v17 + 12];
    LODWORD(v12) = *(_DWORD *)&v18[4 * v17 + 16];
    LODWORD(v10) = *(_DWORD *)&v18[4 * v17 + 20];
    unsigned int v23 = *(_DWORD *)&v18[4 * v17 + 24];
    LODWORD(v8) = *(_DWORD *)&v18[4 * v17 + 28];
    unint64_t v25 = rawValue[2];
    unint64_t v24 = rawValue[3];
    LODWORD(v15) = *(_DWORD *)&v18[4 * v20];
    LODWORD(v9) = *(_DWORD *)&v18[4 * v21];
    if (v25 >= v24 >> 1)
    {
      long long v38 = v8;
      int v39 = v22;
      long long v36 = v9;
      unsigned int v37 = v23;
      long long v34 = v11;
      long long v35 = v10;
      long long v32 = v13;
      long long v33 = v12;
      long long v30 = v15;
      long long v31 = v14;
      uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, rawValue);
      long long v15 = v30;
      long long v14 = v31;
      long long v13 = v32;
      long long v12 = v33;
      long long v11 = v34;
      long long v10 = v35;
      long long v9 = v36;
      unsigned int v23 = v37;
      long long v8 = v38;
      LODWORD(v22) = v39;
      rawValue = v29;
    }
    *(void *)&long long v26 = __PAIR64__(v13, v14);
    *((void *)&v26 + 1) = v11;
    DWORD1(v22) = v12;
    *((void *)&v22 + 1) = __PAIR64__(v23, v10);
    *(void *)&long long v27 = __PAIR64__(v15, v8);
    *((void *)&v27 + 1) = v9;
    rawValue[2] = v25 + 1;
    long long v28 = &rawValue[6 * v25];
    v28[2] = v26;
    v28[3] = v22;
    v28[4] = v27;
    unint64_t v17 = v19;
    if (v19 >= (uint64_t)v4)
    {
      a2->_rawValue = rawValue;
      return;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t __RKEmphasisSpinAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisSpinAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisSpinAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisSpinAnimation.createSpinAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulSpinAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildSpinAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 97, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicSpinAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    uint64_t v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  unsigned int v23 = &rawValue[6 * v21];
  _OWORD v23[2] = v30;
  void v23[3] = v29;
  _DWORD v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  long long v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

void __RKEntityTagsComponent.buildTagsCache()()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    int64_t v2 = v0[1];
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (v2)
    {
      uint64_t v10 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
      do
      {
        uint64_t v3 = String.init(utf8String:)();
        if (v4) {
          uint64_t v5 = v3;
        }
        else {
          uint64_t v5 = 0;
        }
        if (v4) {
          unint64_t v6 = v4;
        }
        else {
          unint64_t v6 = 0xE000000000000000;
        }
        unint64_t v8 = *(void *)(v10 + 16);
        unint64_t v7 = *(void *)(v10 + 24);
        if (v8 >= v7 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        }
        *(void *)(v10 + 16) = v8 + 1;
        uint64_t v9 = v10 + 16 * v8;
        *(void *)(v9 + 32) = v5;
        *(void *)(v9 + 40) = v6;
        v1 += 8;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t __RKEntityTagsComponent.tags.getter()
{
  if (!*(void *)(v0 + 16))
  {
    __RKEntityTagsComponent.buildTagsCache()();
    *(void *)(v0 + 16) = v1;
  }

  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityTagsComponent.tags.setter(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void **)(v1 + 16);
  if (!v4)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    *(_OWORD *)__s = *(_OWORD *)v2;
    uint64_t v27 = 0;
    uint64_t v28 = v5;
    __RKEntityTagsComponent.buildTagsCache()();
    unint64_t v4 = v6;
    *(void *)(v2 + 16) = v6;
  }
  if ((specialized static Array<A>.== infix(_:_:)(a1, v4) & 1) != 0
    || (swift_release(),
        *(void *)(v2 + 24) = 0,
        swift_bridgeObjectRetain(),
        uint64_t result = swift_bridgeObjectRelease(),
        *(void *)(v2 + 16) = a1,
        unint64_t v8 = a1[2],
        (*(void *)(v2 + 8) = v8) == 0))
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v8 >> 60) {
      goto LABEL_42;
    }
    uint64_t result = 8 * v8;
    if ((uint64_t)(8 * v8) < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_43:
      __break(1u);
    }
    else if (result <= 0x7FFFFFFF)
    {
      uint64_t v25 = v2;
      uint64_t v9 = RECIntrospectionAlloc();
      uint64_t v10 = v9;
      uint64_t v11 = 0;
      for (uint64_t i = a1 + 5; ; i += 2)
      {
        uint64_t v14 = *(i - 1);
        uint64_t v13 = *i;
        MEMORY[0x270FA5388](v9);
        if ((v13 & 0x1000000000000000) != 0) {
          break;
        }
        if ((v13 & 0x2000000000000000) != 0)
        {
          *(void *)__s = v14;
          *(void *)&__s[8] = v13 & 0xFFFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain();
          uint64_t result = strlen(__s);
          int64_t v20 = result + 1;
          if (__OFADD__(result, 1)) {
            goto LABEL_39;
          }
          if (v20 < (uint64_t)0xFFFFFFFF80000000) {
            goto LABEL_40;
          }
          if (v20 > 0x7FFFFFFF) {
            goto LABEL_41;
          }
          unint64_t v21 = (char *)RECIntrospectionAlloc();
          float v22 = v21;
          if (v21 != __s || v21 >= &__s[v20]) {
            memmove(v21, __s, v20);
          }
          *(void *)(v10 + 8 * v11) = v22;
          goto LABEL_30;
        }
        if ((v14 & 0x1000000000000000) == 0) {
          break;
        }
        long long v15 = (const char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
        swift_bridgeObjectRetain();
        uint64_t result = strlen(v15);
        int64_t v16 = result + 1;
        if (__OFADD__(result, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v16 < (uint64_t)0xFFFFFFFF80000000) {
          goto LABEL_37;
        }
        if (v16 > 0x7FFFFFFF) {
          goto LABEL_38;
        }
        unint64_t v17 = (char *)RECIntrospectionAlloc();
        uint64_t v18 = v17;
        if (v17 != v15 || v17 >= &v15[v16]) {
          memmove(v17, (const void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32), v16);
        }
        *(void *)(v10 + 8 * v11) = v18;
        uint64_t v9 = swift_bridgeObjectRelease();
LABEL_10:
        if (v8 == ++v11)
        {
          swift_bridgeObjectRelease();
          *(void *)uint64_t v2 = v10;
          uint64_t v23 = *(void *)(v2 + 8);
          type metadata accessor for ArrayPointerCleanupHelper();
          uint64_t v24 = swift_allocObject();
          *(void *)(v24 + 16) = v10;
          *(void *)(v24 + 24) = v23;
          uint64_t result = swift_release();
          *(void *)(v25 + 24) = v24;
          return result;
        }
      }
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
LABEL_30:
      uint64_t v9 = swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    __break(1u);
  }
  return result;
}

char *closure #1 in __RKEntityTagsComponent.tags.setter(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (char *)strlen(a1);
  int64_t v7 = (int64_t)(result + 1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t result = (char *)RECIntrospectionAlloc();
  unint64_t v8 = result;
  if (result != a1 || result >= &a1[v7]) {
    uint64_t result = (char *)memmove(result, a1, v7);
  }
  *(void *)(a2 + 8 * a3) = v8;
  return result;
}

uint64_t (*__RKEntityTagsComponent.tags.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  if (!v3)
  {
    __RKEntityTagsComponent.buildTagsCache()();
    *(void *)(v1 + 16) = v3;
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return __RKEntityTagsComponent.tags.modify;
}

uint64_t __RKEntityTagsComponent.tags.modify(void **a1, char a2)
{
  if ((a2 & 1) == 0) {
    return __RKEntityTagsComponent.tags.setter(*a1);
  }
  uint64_t v2 = (void *)swift_bridgeObjectRetain();
  __RKEntityTagsComponent.tags.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityTagsComponent.Registration.init()()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberArrayWithCountDataTypeWithTag(), (uint64_t v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityTagsComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(void *)(v0 + 16) = v1;
  long long v4 = xmmword_228327310;
  int v5 = 1;
  unint64_t v6 = &v4;
  uint64_t v7 = 0;
  unint64_t v8 = @objc createTagsComponentObject(componentType:);
  uint64_t v9 = @objc destroyTagsComponentObject(componentType:rawComponentPointer:);
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = v1;
  uint64_t v13 = 0;
  uint64_t v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(void *)(v0 + 24) = v2;
  REStructBuilderDestroy();
  return v0;
}

double @objc createTagsComponentObject(componentType:)()
{
  uint64_t v0 = (_OWORD *)swift_slowAlloc();
  double result = 0.0;
  *uint64_t v0 = 0u;
  v0[1] = 0u;
  return result;
}

void @objc destroyTagsComponentObject(componentType:rawComponentPointer:)()
{
  swift_arrayDestroy();

  JUMPOUT(0x22A696500);
}

uint64_t __RKEntityTagsComponent.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityTagsComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __RKEntityTagsComponent.registration.getter()
{
  return swift_retain();
}

uint64_t static __RKEntityTagsComponent.registration.setter(void *a1)
{
  static __RKEntityTagsComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityTagsComponent.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t ArrayPointerCleanupHelper.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      do
      {
        v2 += 8;
        RECIntrospectionFree();
        --v1;
      }
      while (v1);
    }
    RECIntrospectionFree();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t Entity.__tags.getter()
{
  swift_beginAccess();
  if (!static __RKEntityTagsComponent.registration) {
    return MEMORY[0x263F8EE78];
  }
  if (!REEntityGetCustomComponent()) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v1 = Object;
  uint64_t v2 = *(void *)(Object + 16);
  if (!v2)
  {
    __RKEntityTagsComponent.buildTagsCache()();
    uint64_t v2 = v3;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 16) = v2;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Entity.__tags.setter(void *a1)
{
  swift_beginAccess();
  if (!static __RKEntityTagsComponent.registration) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *((void *)static __RKEntityTagsComponent.registration + 3);
  if (a1[2])
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v1 + 16), v3)) && RECustomComponentGetObject()) {
      return __RKEntityTagsComponent.tags.setter(a1);
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = REEntityGetCustomComponent();
  if (result) {
    return REEntityRemoveComponentByClass();
  }
  return result;
}

void (*Entity.__tags.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  long long v4 = v3 + 3;
  v3[4] = v1;
  swift_beginAccess();
  if (static __RKEntityTagsComponent.registration
    && REEntityGetCustomComponent()
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    uint64_t v6 = Object;
    uint64_t v7 = *(void *)(Object + 16);
    if (!v7)
    {
      __RKEntityTagsComponent.buildTagsCache()();
      uint64_t v7 = v8;
      swift_bridgeObjectRelease();
      *(void *)(v6 + 16) = v7;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  *long long v4 = v7;
  return Entity.__tags.modify;
}

void Entity.__tags.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  if (a2)
  {
    long long v4 = (void *)swift_bridgeObjectRetain();
    Entity.__tags.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Entity.__tags.setter(v3);
  }

  free(v2);
}

char *partial apply for closure #1 in __RKEntityTagsComponent.tags.setter(const char *a1)
{
  return closure #1 in __RKEntityTagsComponent.tags.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for ArrayPointerCleanupHelper()
{
  return self;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityTagsComponent()
{
  return &protocol witness table for __RKEntityTagsComponent.Registration;
}

uint64_t sub_227EC467C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Entity.__tags.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227EC46A8()
{
  uint64_t v0 = (void *)swift_bridgeObjectRetain();
  return Entity.__tags.setter(v0);
}

uint64_t destroy for __RKEntityTagsComponent()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for __RKEntityTagsComponent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __RKEntityTagsComponent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityTagsComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityTagsComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTagsComponent()
{
  return &type metadata for __RKEntityTagsComponent;
}

uint64_t type metadata accessor for __RKEntityTagsComponent.Registration()
{
  return self;
}

uint64_t method lookup function for __RKEntityTagsComponent.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityTagsComponent.Registration);
}

unint64_t lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityTagsComponent.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EC49F4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTagsComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityTagsComponent.Registration.RegistrationError;
}

uint64_t __RKVisibilityShowDropAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityShowDropAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowDropAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 174, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #1 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 104, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #2 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x263F8EE78]);
    uint64_t v13 = &outlined read-only object #0 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  int64_t v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  int64_t v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of QueryEnumerator.enumerate<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of QueryEnumerator.enumerate<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t StateMachineCondition.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9 = *a3;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = v9;
  uint64_t v10 = a6 + *(int *)(type metadata accessor for StateMachineCondition() + 40);
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v11(v10, a4, a5);
}

uint64_t type metadata accessor for StateMachineCondition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StateMachineCondition.parameterName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineCondition.parameterName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineCondition.parameterName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineCondition.conditionOperator.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *StateMachineCondition.conditionOperator.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*StateMachineCondition.conditionOperator.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineCondition.testValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t StateMachineCondition.testValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*StateMachineCondition.testValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineCondition.referencedParameters.getter(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  v9[0] = 0;
  v9[1] = 0;
  char v10 = -1;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(v3 + 56) = type metadata accessor for StateMachineParameter();
  *(void *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 32));
  StateMachineParameter.init(name:bindTarget:)(v5, v4, v9, v6, (uint64_t)boxed_opaque_existential_1);
  swift_bridgeObjectRetain();
  return v3;
}

BOOL static StateMachineConditionOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StateMachineConditionOperator.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int StateMachineConditionOperator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

RealityFoundation::StateMachineConditionTrigger __swiftcall StateMachineConditionTrigger.init(_:)(RealityFoundation::StateMachineConditionTrigger result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t StateMachineConditionTrigger.parameterName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineConditionTrigger.parameterName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineConditionTrigger.parameterName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineConditionTrigger.referencedParameters.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  *(void *)(v3 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
  *(void *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  uint64_t v4 = swift_allocObject();
  *(void *)(v3 + 32) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 511;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_227EC51D4()
{
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 32), *(void *)(v0 + 40), v1);
  }

  return MEMORY[0x270FA0238](v0, 50, 7);
}

unint64_t lazy protocol witness table accessor for type StateMachineConditionOperator and conformance StateMachineConditionOperator()
{
  unint64_t result = lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator;
  if (!lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator);
  }
  return result;
}

uint64_t protocol witness for StateMachineConditionProtocol.referencedParameters.getter in conformance StateMachineConditionTrigger()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  *(void *)(v3 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
  *(void *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  uint64_t v4 = swift_allocObject();
  *(void *)(v3 + 32) = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 511;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t dispatch thunk of StateMachineConditionProtocol.referencedParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateMachineCondition()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineCondition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 17) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v11 = (a1 + v6 + 17) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 17) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for StateMachineCondition(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 + 17 + a1) & ~v7;
  uint64_t v9 = (v7 + 17 + a2) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

uint64_t assignWithCopy for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineCondition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for StateMachineCondition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x227EC5B94);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
          float v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for StateMachineConditionOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StateMachineConditionOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EC5D18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineConditionOperator()
{
  return &type metadata for StateMachineConditionOperator;
}

ValueMetadata *type metadata accessor for StateMachineConditionTrigger()
{
  return &type metadata for StateMachineConditionTrigger;
}

uint64_t one-time initialization function for notificationName()
{
  uint64_t result = MEMORY[0x22A688A50](0xD00000000000001ELL, 0x8000000228350D90);
  static NotificationAction.notificationName = result;
  return result;
}

id static NotificationAction.notificationName.getter()
{
  if (one-time initialization token for notificationName != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NotificationAction.notificationName;

  return v0;
}

unint64_t static NotificationAction.sceneKey.getter()
{
  return 0xD000000000000024;
}

unint64_t static NotificationAction.identifierKey.getter()
{
  return 0xD000000000000029;
}

unint64_t static NotificationAction.sourceEntityKey.getter()
{
  return 0xD00000000000002BLL;
}

unint64_t static NotificationAction.customArgumentsKey.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t NotificationAction.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NotificationAction.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NotificationAction.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t NotificationAction.customArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NotificationAction.customArguments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NotificationAction.customArguments.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t NotificationAction.animatedValueType.getter()
{
  return 0;
}

RealityFoundation::NotificationAction __swiftcall NotificationAction.init(name:customArguments:)(Swift::String name, Swift::OpaquePointer customArguments)
{
  *(Swift::String *)uint64_t v2 = name;
  *(Swift::OpaquePointer *)(v2 + 16) = customArguments;
  result.name = name;
  result.customArguments = customArguments;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NotificationAction.CodingKeys()
{
  if (*v0) {
    return 0x72416D6F74737563;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NotificationAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NotificationAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NotificationAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NotificationAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NotificationAction.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NotificationAction.CodingKeys>);
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = v9;
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

unint64_t lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

uint64_t NotificationAction.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NotificationAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v16 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  char v15 = 1;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v14[1];
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction()
{
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NotificationAction@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return NotificationAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NotificationAction(void *a1)
{
  return NotificationAction.encode(to:)(a1);
}

uint64_t destroy for NotificationAction()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for NotificationAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NotificationAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NotificationAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationAction()
{
  return &type metadata for NotificationAction;
}

unsigned char *storeEnumTagSinglePayload for NotificationAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EC6764);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NotificationAction.CodingKeys()
{
  return &unk_26DC92C88;
}

void protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance NotificationActionHandler(_OWORD *a1)
{
  long long v1 = a1[11];
  v8[10] = a1[10];
  v8[11] = v1;
  long long v2 = a1[13];
  v8[12] = a1[12];
  v8[13] = v2;
  long long v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  long long v4 = a1[9];
  v8[8] = a1[8];
  v8[9] = v4;
  long long v5 = a1[3];
  void v8[2] = a1[2];
  v8[3] = v5;
  long long v6 = a1[5];
  v8[4] = a1[4];
  v8[5] = v6;
  long long v7 = a1[1];
  v8[0] = *a1;
  v8[1] = v7;
  specialized NotificationActionHandler.postNotification(event:)(v8);
}

uint64_t specialized NotificationAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72416D6F74737563 && a2 == 0xEF73746E656D7567)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void specialized NotificationActionHandler.postNotification(event:)(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 32) = 0xD000000000000029;
  *(void *)(inited + 40) = 0x8000000228350D00;
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v3;
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  unint64_t v22 = v5;
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    goto LABEL_6;
  }
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    swift_release();
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000024, 0x8000000228350CD0, &v20);
    outlined destroy of Any?((uint64_t)&v20);
    goto LABEL_9;
  }
  uint64_t v7 = SceneNullable;
  if ((id)RESceneGetSwiftObject())
  {
    swift_release();
    uint64_t v8 = type metadata accessor for Scene();
    uint64_t v9 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t v8 = type metadata accessor for Scene();
    swift_allocObject();
    uint64_t v9 = Scene.init(coreScene:)(v7);
    swift_release();
  }
  type metadata accessor for Scene();
  uint64_t v21 = v8;
  *(void *)&long long v20 = v9;
  outlined init with take of Any(&v20, v19);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD000000000000024, 0x8000000228350CD0, isUniquelyReferenced_nonNull_native);
  unint64_t v22 = v5;
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = Strong;
    uint64_t v21 = type metadata accessor for Entity();
    *(void *)&long long v20 = v12;
    outlined init with take of Any(&v20, v19);
    uint64_t v13 = v22;
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD00000000000002BLL, 0x8000000228350D30, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000002BLL, 0x8000000228350D30, &v20);
    outlined destroy of Any?((uint64_t)&v20);
    uint64_t v13 = v22;
  }
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(void *)&long long v20 = v2;
  outlined init with take of Any(&v20, v19);
  swift_bridgeObjectRetain();
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD00000000000002ELL, 0x8000000228350D60, v15);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for notificationName != -1) {
    swift_once();
  }
  uint64_t v17 = static NotificationAction.notificationName;
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_postNotificationName_object_userInfo_, v17, 0, isa);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for NotificationActionHandler()
{
  return &type metadata for NotificationActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in NotificationActionHandler()
{
  return &protocol witness table for NotificationAction;
}

uint64_t __RKEntityInteractionSpecification.init(decodeContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v46 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (uint64_t *)((char *)&v46 - v20);
  uint64_t v48 = v4;
  uint64_t v22 = *(int *)(v4 + 24);
  uint64_t v50 = a2;
  long long v23 = (void *)(a2 + v22);
  *long long v23 = 0;
  v23[1] = 0;
  char v56 = v23;
  long long v24 = *(void **)a1;
  long long v25 = *(void **)(a1 + 8);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v60 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v58 = *(void *)(a1 + 40);
  uint64_t v59 = v27;
  id v28 = v24;
  id v29 = v25;
  uint64_t v57 = v26;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  id v30 = v53;
  __RKEntityTriggerSpecification.init(decodeContext:)((void **)a1, v21);
  if (v30)
  {

    uint64_t v31 = 1;
  }
  else
  {
    uint64_t v31 = 0;
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, v31, 1, v8);
  id v53 = v28;
  id v32 = v29;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityActionSpecification.init(decodeContext:)((void **)a1, (uint64_t)v15);
  uint64_t v34 = v54;
  uint64_t v33 = v55;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v15, 0, 1, v55);
  outlined init with copy of (Int, URL)((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
  {
    float v35 = &demangling cache variable for type metadata for __RKEntityTriggerSpecification?;
    uint64_t v36 = (uint64_t)v18;
LABEL_8:
    outlined destroy of BodyTrackingComponent?(v36, v35);
    lazy protocol witness table accessor for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError();
    swift_allocError();
    swift_willThrow();
    swift_release();

    outlined release of [String : String]((uint64_t)&v60);
    outlined release of [String : String]((uint64_t)&v59);
    outlined release of [String : String]((uint64_t)&v58);
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    return swift_bridgeObjectRelease();
  }
  uint64_t v37 = (uint64_t)v18;
  uint64_t v38 = v52;
  _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(v37, v52, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t v39 = v51;
  outlined init with copy of (Int, URL)((uint64_t)v15, v51, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v39, 1, v33) == 1)
  {
    outlined destroy of __RKEntityTriggerSpecification(v38);
    float v35 = &demangling cache variable for type metadata for __RKEntityActionSpecification?;
    uint64_t v36 = v39;
    goto LABEL_8;
  }
  swift_release();

  outlined release of [String : String]((uint64_t)&v60);
  outlined release of [String : String]((uint64_t)&v59);
  outlined release of [String : String]((uint64_t)&v58);
  outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  uint64_t v41 = v47;
  _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(v39, v47, type metadata accessor for __RKEntityActionSpecification);
  uint64_t v42 = v38;
  uint64_t v43 = v49;
  _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(v42, v49, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t v44 = v48;
  _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(v41, v43 + *(int *)(v48 + 20), type metadata accessor for __RKEntityActionSpecification);
  long long v45 = (void *)(v43 + *(int *)(v44 + 24));
  void *v45 = 0;
  v45[1] = 0;
  swift_bridgeObjectRelease();
  return _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(v43, v50, type metadata accessor for __RKEntityInteractionSpecification);
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityTriggerSpecification(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityTriggerSpecification(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityInteractionSpecification.InteractionUSDLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EC75CCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionSpecification.InteractionUSDLoadingError()
{
  return &type metadata for __RKEntityInteractionSpecification.InteractionUSDLoadingError;
}

void one-time initialization function for basicPulseAnimationData()
{
  static EmphasizeAnimations.basicPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicPulseAnimationData;
}

void one-time initialization function for playfulPulseAnimationData()
{
  static EmphasizeAnimations.playfulPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulPulseAnimationData;
}

void one-time initialization function for wildPulseAnimationData()
{
  static EmphasizeAnimations.wildPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildPulseAnimationData;
}

void *specialized static EmphasizeAnimations.makeTransforms(_:_:)(uint64_t a1, void **a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v4 / 0xA;
  uint64_t v6 = *a2;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v6[3] >> 1)
  {
    *a2 = v6;
    if (!v4) {
      return result;
    }
  }
  else
  {
    if (v6[2] <= v5) {
      unint64_t v10 = v4 / 0xA;
    }
    else {
      unint64_t v10 = v6[2];
    }
    unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 0, v6);
    uint64_t v6 = result;
    *a2 = result;
    if (!v4) {
      return result;
    }
  }
  uint64_t v11 = a1 + 32;
  if (one-time initialization token for identity != -1) {
LABEL_39:
  }
    unint64_t result = (void *)swift_once();
  unint64_t v12 = 0;
  do
  {
    if (__OFADD__(v12, 10)) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12 + 10;
    }
    if (v12 >= v4)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 + 1 >= v4) {
      goto LABEL_30;
    }
    if (v12 + 2 >= v4) {
      goto LABEL_31;
    }
    if (v12 + 3 >= v4) {
      goto LABEL_32;
    }
    if (v12 + 4 >= v4) {
      goto LABEL_33;
    }
    if (v12 + 5 >= v4) {
      goto LABEL_34;
    }
    if (v12 + 6 >= v4) {
      goto LABEL_35;
    }
    if (v12 + 7 >= v4) {
      goto LABEL_36;
    }
    if (v12 + 8 >= v4) {
      goto LABEL_37;
    }
    if (v12 + 9 >= v4) {
      goto LABEL_38;
    }
    LODWORD(v14) = *(_DWORD *)(v11 + 4 * v12);
    DWORD1(v14) = *(_DWORD *)(v11 + 4 * (v12 + 1));
    *((void *)&v14 + 1) = *(unsigned int *)(v11 + 4 * (v12 + 2));
    LODWORD(v15) = *(_DWORD *)(v11 + 4 * (v12 + 3));
    LODWORD(v9) = *(_DWORD *)(v11 + 4 * (v12 + 4));
    *(void *)&long long v8 = *(void *)(v11 + 4 * (v12 + 5));
    LODWORD(v16) = *(_DWORD *)(v11 + 4 * (v12 + 7));
    DWORD1(v16) = *(_DWORD *)(v11 + 4 * (v12 + 8));
    *((void *)&v16 + 1) = *(unsigned int *)(v11 + 4 * (v12 + 9));
    unint64_t v18 = v6[2];
    unint64_t v17 = v6[3];
    if (v18 >= v17 >> 1)
    {
      int v23 = v15;
      long long v24 = v14;
      long long v21 = v16;
      long long v22 = v8;
      long long v20 = v9;
      unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v6);
      long long v9 = v20;
      long long v16 = v21;
      long long v8 = v22;
      LODWORD(v15) = v23;
      long long v14 = v24;
      uint64_t v6 = result;
    }
    DWORD1(v15) = v9;
    *((void *)&v15 + 1) = v8;
    v6[2] = v18 + 1;
    uint64_t v19 = &v6[6 * v18];
    _OWORD v19[2] = v14;
    v19[3] = v15;
    v19[4] = v16;
    unint64_t v12 = v13;
  }
  while (v13 < (uint64_t)v4);
  *a2 = v6;
  return result;
}

void *specialized static EmphasizeAnimations.createEmphasizePulseAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicPulseAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulPulseAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 99, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildPulseAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

float *specialized static EmphasizeAnimations.bakeEmphasisTransforms(_:transforms:isAdditive:)(uint64_t a1, float *a2, char a3)
{
  swift_bridgeObjectRetain();
  REEntityComputeMeshBounds();
  float32x4_t v57 = v6;
  float32x4_t v58 = v5;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v59);
  uint64_t v8 = v59[0];
  uint64_t v7 = v59[1];
  uint64_t v10 = v59[2];
  uint64_t v9 = v59[3];
  uint64_t v12 = v59[4];
  uint64_t v11 = v59[5];
  swift_release();
  outlined init with take of Transform?((uint64_t)v59, (uint64_t)v60);
  if ((v60[48] & 1) == 0)
  {
    *(void *)&long long v14 = v8;
    *((void *)&v14 + 1) = v7;
    long long v56 = v14;
    *(void *)&long long v14 = v10;
    *((void *)&v14 + 1) = v9;
    float32x4_t v55 = (float32x4_t)v14;
    *(void *)&long long v13 = v12;
    *((void *)&v13 + 1) = v11;
    goto LABEL_5;
  }
  if (one-time initialization token for identity != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    float32x4_t v55 = (float32x4_t)xmmword_2681C7AB0;
    long long v56 = static Transform.identity;
    long long v13 = xmmword_2681C7AC0;
LABEL_5:
    float32x4_t v54 = (float32x4_t)v13;
    uint64_t v15 = *((void *)a2 + 2);
    if (!v15) {
      return a2;
    }
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    float32x4_t v18 = vsubq_f32(v57, v58);
    v18.f32[0] = (float)(v18.f32[2] + (float)(v18.f32[1] + (float)(v18.f32[0] + 0.0))) / 3.0;
    float32x4_t v57 = v18;
    float32x2_t v19 = *(float32x2_t *)(a2 + 16);
    float v20 = a2[18];
    float32x4_t v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2);
    float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
    float32x4_t v21 = vmulq_f32(v55, (float32x4_t)xmmword_22831EFE0);
    int32x4_t v22 = (int32x4_t)vnegq_f32(v21);
    int8x16_t v23 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v22));
    int8x16_t v24 = vextq_s8(v23, v23, 8uLL);
    int32x4_t v25 = vrev64q_s32((int32x4_t)v21);
    v25.i32[0] = v22.i32[1];
    float32x4_t v49 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v22, 8uLL);
    v25.i32[3] = v22.i32[2];
    float32x4_t v50 = (float32x4_t)v25;
    float32x4_t v51 = (float32x4_t)v24;
    while (v17 < *((void *)a2 + 2))
    {
      float32x4_t v58 = *(float32x4_t *)&a2[v16 + 16];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = (float *)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
      }
      *(float32x2_t *)v38.f32 = vmul_n_f32(vsub_f32(*(float32x2_t *)v58.f32, v19), v57.f32[0]);
      float v39 = v57.f32[0] * (float)(v58.f32[2] - v20);
      *(void *)&long long v40 = v38.i64[0];
      *((float *)&v40 + 2) = v39;
      HIDWORD(v40) = 0;
      uint64_t v41 = &a2[v16];
      *(_OWORD *)&a2[v16 + 16] = v40;
      if ((a3 & 1) == 0)
      {
        unint64_t v42 = *((void *)a2 + 2);
        if (v17 >= v42) {
          goto LABEL_21;
        }
        float32x4_t v43 = *(float32x4_t *)&a2[v16 + 12];
        float32x2_t v44 = *(float32x2_t *)(v41 + 8);
        float v45 = a2[v16 + 10];
        if (one-time initialization token for identity == -1)
        {
          if (v17 >= v42) {
            goto LABEL_18;
          }
        }
        else
        {
          float32x4_t v58 = v38;
          float32x4_t v47 = *(float32x4_t *)&a2[v16 + 12];
          float v48 = v39;
          swift_once();
          float32x4_t v43 = v47;
          float v39 = v48;
          v38.i64[0] = v58.i64[0];
          if (v17 >= *((void *)a2 + 2))
          {
LABEL_18:
            __break(1u);
            return a2;
          }
        }
        *(float32x2_t *)&long long v26 = vmul_f32(*(float32x2_t *)&v56, v44);
        *((float *)&v26 + 2) = *((float *)&v56 + 2) * v45;
        HIDWORD(v26) = 0;
        int32x4_t v27 = (int32x4_t)vnegq_f32(v43);
        int8x16_t v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v43, vtrn1q_s32((int32x4_t)v43, v27));
        float32x4_t v29 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v27, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v53);
        float32x4_t v30 = (float32x4_t)vrev64q_s32((int32x4_t)v43);
        v30.i32[0] = v27.i32[1];
        v30.i32[3] = v27.i32[2];
        float32x4_t v31 = vmlaq_f32(vmulq_laneq_f32(v43, v55, 3), v30, v52);
        float32x4_t v32 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v49, vmuls_lane_f32(*((float *)&v56 + 1), *(float32x2_t *)v38.f32, 1)), v51, *(float *)&v56 * v38.f32[0]), v50, *((float *)&v56 + 2) * v39);
        int32x4_t v33 = (int32x4_t)vnegq_f32(v32);
        int8x16_t v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
        float32x4_t v35 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v34, v34, 8uLL), v53);
        float32x4_t v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
        v36.i32[0] = v33.i32[1];
        v36.i32[3] = v33.i32[2];
        float32x4_t v37 = vaddq_f32(v54, vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v32, v55, 3), v36, v52), v35));
        v37.i32[3] = 0;
        *((_OWORD *)v41 + 2) = v26;
        *(float32x4_t *)&a2[v16 + 12] = vaddq_f32(v31, v29);
        *((float32x4_t *)v41 + 4) = v37;
      }
      ++v17;
      v16 += 12;
      if (v15 == v17) {
        return a2;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once();
  }
}

uint64_t outlined init with take of Transform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transform?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t REEncoder.__deallocating_deinit()
{
  return REEncoder.__deallocating_deinit(MEMORY[0x263F36FB0]);
}

uint64_t type metadata accessor for REEncoder()
{
  return self;
}

unint64_t REEncoder.encode<A>(_:)(unint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = type metadata accessor for PrivateEncoder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 40) = v7;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v7;
  if (!REEncoderOpen())
  {
    void v16[3] = v5;
    v16[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
    v16[0] = v6;
    swift_retain();
    unint64_t v8 = a1;
    dispatch thunk of Encodable.encode(to:)();
    if (v2)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      return v8;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    PrivateEncoder.terminateContainers(_:)(0);
    if (!REEncoderClose())
    {
      uint64_t v15 = (void *)REEncoderCopyToCFData();
      unint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      swift_release();
      return v8;
    }
  }
  unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
  swift_allocError();
  *(void *)uint64_t v13 = v8;
  *(void *)(v13 + 8) = v10;
  *(unsigned char *)(v13 + 16) = v12 & 1;
  swift_willThrow();
  swift_release();
  return v8;
}

uint64_t PrivateEncoder.writeKey(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of CodingKey.intValue.getter();
  char v3 = v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of CodingKey.stringValue.getter();
  if (v3)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v5 = REEncoderWriteString();
    uint64_t result = swift_release();
    if (!v5) {
      return result;
    }
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  uint64_t result = REEncoderWriteInt64();
  if (result)
  {
LABEL_5:
    unint64_t v6 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v8 = v7;
    char v10 = v9;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v11 = v6;
    *(void *)(v11 + 8) = v8;
    *(unsigned char *)(v11 + 16) = v10 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t PrivateEncoder.container<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v0 + 24) + 16) + 1);
  char v2 = (void *)(v0 + 40);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  if (*(void *)(v5 + 16) >= v4)
  {
    char v6 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v3 + 48 * v4 - 16, (uint64_t)&v22, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v6 = v23[24];
    outlined init with take of BindableDataInternal(&v22, (uint64_t)&v18);
    char v21 = v6;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v18, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    uint64_t v5 = *(void *)(v0 + 24);
  }
  *(unsigned char *)(v0 + 48) = v6;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v5 + 16));
  uint64_t v7 = type metadata accessor for KeyedEC();
  uint64_t v8 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = KeyedEC.__allocating_init(encoder:codingPath:)(v1, v8);
  *(unsigned char *)(v1 + 48) = 0;
  uint64_t v19 = v7;
  float v20 = &protocol witness table for KeyedEC<A>;
  *(void *)&long long v18 = v9;
  outlined init with take of BindableDataInternal(&v18, (uint64_t)&v22);
  v23[24] = 1;
  swift_beginAccess();
  char v10 = *(void **)(v1 + 40);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 40) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *char v2 = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    *char v2 = v10;
  }
  void v10[2] = v13 + 1;
  long long v14 = &v10[6 * v13];
  long long v15 = v22;
  long long v16 = *(_OWORD *)v23;
  *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)&v23[9];
  void v14[2] = v15;
  uint64_t v14[3] = v16;
  swift_endAccess();
  *(void *)&long long v22 = v9;
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t KeyedEC.__allocating_init(encoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    REEncoderBeginContainer();
  }
  return v4;
}

uint64_t PrivateEncoder.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  uint64_t v3 = (void *)(v1 + 40);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 40);
  unint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  if (*(void *)(v6 + 16) >= v5)
  {
    char v8 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v4 + 48 * v5 - 16, (uint64_t)&v24, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v7 = v25[24];
    outlined init with take of BindableDataInternal(&v24, (uint64_t)&v20);
    char v23 = v7;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v20, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v8 = v7 ^ 1;
    uint64_t v6 = *(void *)(v1 + 24);
  }
  *(unsigned char *)(v1 + 48) = v8;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v6 + 16));
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = type metadata accessor for UnkeyedEC();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = v9;
  if (*(unsigned char *)(v1 + 48) == 1)
  {
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    REEncoderBeginContainer();
  }
  *(unsigned char *)(v1 + 48) = 0;
  uint64_t v21 = v10;
  long long v22 = &protocol witness table for UnkeyedEC;
  *(void *)&long long v20 = v11;
  outlined init with take of BindableDataInternal(&v20, (uint64_t)&v24);
  v25[24] = 0;
  swift_beginAccess();
  unint64_t v12 = *(void **)(v1 + 40);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 40) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *uint64_t v3 = v12;
  }
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
    *uint64_t v3 = v12;
  }
  _OWORD v12[2] = v15 + 1;
  long long v16 = &v12[6 * v15];
  long long v17 = v24;
  long long v18 = *(_OWORD *)v25;
  *(_OWORD *)((char *)v16 + 57) = *(_OWORD *)&v25[9];
  char v16[2] = v17;
  void v16[3] = v18;
  swift_endAccess();
  a1[3] = v10;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, (void (*)(void))type metadata accessor for UnkeyedEC);
  a1[4] = result;
  *a1 = v11;
  return result;
}

uint64_t type metadata accessor for PrivateEncoder()
{
  return self;
}

uint64_t type metadata instantiation function for KeyedEC()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for KeyedEC()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance PrivateEncoder()
{
  return PrivateEncoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance PrivateEncoder@<X0>(uint64_t *a1@<X8>)
{
  return PrivateEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance PrivateEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = type metadata accessor for SingleValueEC();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  a1[3] = v5;
  a1[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type SingleValueEC and conformance SingleValueEC, (void (*)(void))type metadata accessor for SingleValueEC);
  *a1 = v6;
  swift_retain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall KeyedEC.terminate()()
{
}

uint64_t KeyedEC.encodeNil(forKey:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v1[3] + 16) + 1);
  long long v15 = *(_OWORD *)(v4 + 80);
  uint64_t v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    uint64_t result = REEncoderWriteNil();
    if (result)
    {
      unint64_t v7 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v9 = v8;
      char v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(unsigned char *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v2[3] + 16) + 1);
  long long v16 = *(_OWORD *)(v5 + 80);
  uint64_t v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    uint64_t result = REEncoderWriteBool();
    if (result)
    {
      unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v10 = v9;
      char v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(unsigned char *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x263F36FC8]);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  long long v16;

  uint64_t v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v2[3] + 16) + 1);
  long long v16 = *(_OWORD *)(v5 + 80);
  uint64_t v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    uint64_t result = REEncoderWriteInt8();
    if (result)
    {
      unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v10 = v9;
      char v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(unsigned char *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  long long v16;

  uint64_t v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v2[3] + 16) + 1);
  long long v16 = *(_OWORD *)(v5 + 80);
  uint64_t v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    uint64_t result = REEncoderWriteInt16();
    if (result)
    {
      unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v10 = v9;
      char v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(unsigned char *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x263F36FC0]);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x263F36FD8]);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  long long v16;

  uint64_t v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v2[3] + 16) + 1);
  long long v16 = *(_OWORD *)(v5 + 80);
  uint64_t v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    uint64_t result = REEncoderWriteUInt8();
    if (result)
    {
      unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v10 = v9;
      char v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(unsigned char *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  long long v16;

  uint64_t v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v2[3] + 16) + 1);
  long long v16 = *(_OWORD *)(v5 + 80);
  uint64_t v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    uint64_t result = REEncoderWriteUInt16();
    if (result)
    {
      unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v10 = v9;
      char v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(unsigned char *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x263F36FD0]);
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v1[3] + 16) + 1);
  long long v15 = *(_OWORD *)(v4 + 80);
  uint64_t v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    uint64_t result = REEncoderWriteDouble();
    if (result)
    {
      unint64_t v7 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v9 = v8;
      char v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(unsigned char *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  long long v15;

  uint64_t v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v1[3] + 16) + 1);
  long long v15 = *(_OWORD *)(v4 + 80);
  uint64_t v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    uint64_t result = REEncoderWriteFloat();
    if (result)
    {
      unint64_t v7 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v9 = v8;
      char v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = v9;
      *(unsigned char *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, const char *, uint64_t))
{
  uint64_t v6 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = v3[2];
  uint64_t v11 = v9;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v6[3] + 16) + 1);
  long long v22 = *(_OWORD *)(v11 + 80);
  uint64_t v20 = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v21);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (!v4)
  {
    uint64_t result = a3(*(void *)(v10 + 16), "", a1);
    if (result)
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v4;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  long long v22;

  uint64_t v6 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = v3[2];
  uint64_t v11 = v9;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v6[3] + 16) + 1);
  long long v22 = *(_OWORD *)(v11 + 80);
  uint64_t v20 = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v21);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (!v4)
  {
    uint64_t result = a3(*(void *)(v10 + 16), "", a1);
    if (result)
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v3[3] + 16) + 1);
  long long v18 = *(_OWORD *)(v6 + 80);
  uint64_t v16 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_1, a3);
  PrivateEncoder.writeKey(_:)(v17);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (!v4)
  {
    String.utf8CString.getter();
    int v9 = REEncoderWriteString();
    uint64_t result = swift_release();
    if (v9)
    {
      unint64_t v10 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v12 = v11;
      char v14 = v13;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v15 = v10;
      *(void *)(v15 + 8) = v12;
      *(unsigned char *)(v15 + 16) = v14 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a3;
  uint64_t v37 = a4;
  v26[1] = a1;
  uint64_t v30 = *v4;
  uint64_t v6 = *(void *)(v30 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  int v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v26 - v11;
  uint64_t v13 = v4[2];
  uint64_t v27 = v14;
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v14 + 24) + 16) + 1);
  uint64_t v28 = v7;
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v31 = a2;
  float32x4_t v29 = v15;
  v15((uint64_t *)v12, a2, v6);
  uint64_t v16 = (void *)(v13 + 24);
  swift_beginAccess();
  char v17 = *(void **)(v13 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v13 + 24) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *uint64_t v16 = v17;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1) {
    *uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
  }
  uint64_t v21 = v29;
  v29((uint64_t *)v9, (uint64_t)v12, v6);
  uint64_t v22 = *(void *)(v30 + 88);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v9, (uint64_t *)(v13 + 24), v6, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v6);
  swift_endAccess();
  uint64_t v35 = v6;
  uint64_t v36 = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  v21(boxed_opaque_existential_1, v31, v6);
  uint64_t v24 = v32;
  PrivateEncoder.writeKey(_:)(v34);
  if (!v24)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    uint64_t v35 = type metadata accessor for PrivateEncoder();
    uint64_t v36 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
    v34[0] = v13;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v27);
}

uint64_t KeyedEC.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  return KeyedEC.encode<A>(_:forKey:)((uint64_t)&v5, a2, a3, a4);
}

uint64_t KeyedEC.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t)(v2 + 4);
  uint64_t v4 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  if (v23)
  {
    outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)v19);
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v5 = v20;
    uint64_t v6 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  PrivateEncoder.terminateContainers(_:)(*(void *)(v8 + 16) + 1);
  int v9 = *(_UNKNOWN ***)(v4 + 88);
  uint64_t v23 = *(void *)(v4 + 80);
  uint64_t v10 = v23;
  uint64_t v24 = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v12(boxed_opaque_existential_1, a2, v10);
  PrivateEncoder.writeKey(_:)(v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  uint64_t v13 = type metadata accessor for KeyedEC();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v9;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  v12(v15, a2, v10);
  v22[0] = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v16 = KeyedEC.__allocating_init(encoder:codingPath:)(v7, v22[0]);
  uint64_t v23 = v13;
  uint64_t v24 = &protocol witness table for KeyedEC<A>;
  v22[0] = v16;
  outlined init with take of Terminatable?((uint64_t)v22, (uint64_t)v19);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v19, v3);
  swift_endAccess();
  v22[0] = v16;
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t KeyedEC.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(v2 + 4);
  uint64_t v5 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  if (v25)
  {
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)v21);
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v6 = v22;
    uint64_t v7 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v8 = v2[2];
  uint64_t v9 = v2[3];
  PrivateEncoder.terminateContainers(_:)(*(void *)(v9 + 16) + 1);
  uint64_t v11 = *(_UNKNOWN ***)(v5 + 88);
  uint64_t v25 = *(void *)(v5 + 80);
  uint64_t v10 = v25;
  long long v26 = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v13(boxed_opaque_existential_1, a1, v10);
  PrivateEncoder.writeKey(_:)(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 64) = v11;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  v13(v15, a1, v10);
  v24[0] = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v16 = v24[0];
  uint64_t v17 = type metadata accessor for UnkeyedEC();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(void *)(v18 + 16) = v8;
  *(void *)(v18 + 24) = v16;
  if ((*(unsigned char *)(v8 + 48) & 1) == 0) {
    REEncoderBeginContainer();
  }
  uint64_t v25 = v17;
  long long v26 = &protocol witness table for UnkeyedEC;
  v24[0] = v18;
  outlined init with take of Terminatable?((uint64_t)v24, (uint64_t)v21);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v21, v4);
  swift_endAccess();
  a2[3] = v17;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, (void (*)(void))type metadata accessor for UnkeyedEC);
  a2[4] = result;
  *a2 = v18;
  return result;
}

uint64_t KeyedEC.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  dispatch thunk of CodingKey.init(stringValue:)();
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    KeyedEC.superEncoder(forKey:)((uint64_t)v6, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v6, v3);
  }
  return result;
}

uint64_t KeyedEC.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(v2[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v9 = *(void *)(v5 + 80);
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 64) = *(void *)(v5 + 88);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a1, v9);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v11 = type metadata accessor for PrivateEncoder();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v12 + 40) = v13;
  *(unsigned char *)(v12 + 48) = 0;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v6;
  a2[3] = v11;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
  a2[4] = result;
  *a2 = v12;
  return result;
}

uint64_t KeyedEC.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);
  return v0;
}

uint64_t KeyedEC.__deallocating_deinit()
{
  KeyedEC.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyedEC()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance KeyedEC<A>(uint64_t a1)
{
  return KeyedEC.encodeNil(forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEC.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1)
{
  return KeyedEC.encode(_:forKey:)(a1);
}

{
  return KeyedEC.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E428]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E430]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for KeyedEC();
  return a6(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEC.encode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEC.encodeConditional<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for KeyedEC();
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E3B8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E3C8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E3F0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E3D0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x263F8E418]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E3C0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E3E8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E410]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E3D8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E3F8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E3E0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x263F8E408]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8E400]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x263F8E420]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for KeyedEC();
  return a5(a1 & 0x1FF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for KeyedEC();
  return a5(a1 & 0x1FFFF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for KeyedEC();
  return a5(a1 | ((HIDWORD(a1) & 1) << 32), a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a2 & 1;
  uint64_t v11 = type metadata accessor for KeyedEC();
  return a6(a1, v10, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = a3 & 1;
  uint64_t v13 = type metadata accessor for KeyedEC();
  return a7(a1, a2, v12, a4, v13, a6);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance KeyedEC<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEC.nestedContainer<A>(keyedBy:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedEC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedEC.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder() in conformance KeyedEC<A>@<X0>(uint64_t *a1@<X8>)
{
  return KeyedEC.superEncoder()(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder(forKey:) in conformance KeyedEC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedEC.superEncoder(forKey:)(a1, a2);
}

void protocol witness for Terminatable.terminate() in conformance KeyedEC<A>()
{
}

uint64_t KeyedEC.terminate()(uint64_t (*a1)(void))
{
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v1 + 32, (uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
  if (v11)
  {
    outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v7);
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v3 = v8;
    uint64_t v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v6 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v6 + 48) & 1) == 0) {
    return a1(*(void *)(v6 + 16));
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UnkeyedEC.IndexedCodingKey@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t result = BinaryInteger.description.getter();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnkeyedEC.IndexedCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnkeyedEC.IndexedCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encodeNil()()
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v0 + 24) + 16) + 1);
  if (REEncoderWriteNil())
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Bool a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteBool())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Double a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteDouble())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Float a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteFloat())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int8 a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteInt8())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int16 a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteInt16())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int32 a1)
{
}

uint64_t UnkeyedEC.encode(_:)(uint64_t a1, uint64_t (*a2)(void, const char *, uint64_t))
{
  uint64_t v6 = v2 + 16;
  uint64_t v5 = *(void *)(v2 + 16);
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v6 + 8) + 16) + 1);
  uint64_t result = a2(*(void *)(v5 + 16), "", a1);
  if (result)
  {
    unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v10 = v9;
    char v12 = v11;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v10;
    *(unsigned char *)(v13 + 16) = v12 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  uint64_t v6 = v2 + 16;
  uint64_t v5 = *(void *)(v2 + 16);
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v6 + 8) + 16) + 1);
  uint64_t result = a2(*(void *)(v5 + 16), "", a1);
  if (result)
  {
    unint64_t v8 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v10 = v9;
    char v12 = v11;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v10;
    *(unsigned char *)(v13 + 16) = v12 & 1;
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::String a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  String.utf8CString.getter();
  int v2 = REEncoderWriteString();
  swift_release();
  if (v2)
  {
    unint64_t v3 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v5 = v4;
    char v7 = v6;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(unsigned char *)(v8 + 16) = v7 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt8 a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteUInt8())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt16 a1)
{
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteUInt16())
  {
    unint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt32 a1)
{
}

uint64_t UnkeyedEC.encode<A>(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (uint64_t)v3;
  uint64_t v8 = v3[2];
  PrivateEncoder.terminateContainers(_:)(*(void *)(v3[3] + 16) + 1);
  uint64_t v9 = v3[9];
  *(void *)&long long v21 = v9;
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v10 = &v21;
  uint64_t v11 = BinaryInteger.description.getter();
  uint64_t v13 = *(void *)(v5 + 72);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = (long long *)v11;
    uint64_t v4 = v12;
    uint64_t v24 = a3;
    *(void *)(v5 + 72) = v15;
    a3 = (void *)(v8 + 24);
    swift_beginAccess();
    a1 = *(void **)(v8 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v8 + 24) = a1;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *a3 = a1;
LABEL_3:
  unint64_t v18 = a1[2];
  unint64_t v17 = a1[3];
  if (v18 >= v17 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, a1);
    *a3 = a1;
  }
  uint64_t v22 = &unk_26DC92FC0;
  unint64_t v23 = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  uint64_t v19 = swift_allocObject();
  *(void *)&long long v21 = v19;
  *(void *)(v19 + 16) = v9;
  *(unsigned char *)(v19 + 24) = 0;
  *(void *)(v19 + 32) = v10;
  *(void *)(v19 + 40) = v4;
  a1[2] = v18 + 1;
  outlined init with take of BindableDataInternal(&v21, (uint64_t)&a1[5 * v18 + 4]);
  swift_endAccess();
  uint64_t v22 = (void *)type metadata accessor for PrivateEncoder();
  unint64_t v23 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
  *(void *)&long long v21 = v8;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[31] == 2) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteBool())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unsigned char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[24]) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteDouble())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v21 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v22) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteFloat())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unsigned char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[31]) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteInt8())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unsigned char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[30]) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteInt16())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v10);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (!v22) {
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  }
  while (1)
  {
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    String.utf8CString.getter();
    uint64_t v13 = REEncoderWriteString();
    swift_release();
    if (v13) {
      break;
    }
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    if (!v22) {
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
    }
  }
  uint64_t v15 = specialized static REEncoder.Error.getStatus(_:)();
  char v17 = v16;
  uint64_t v19 = v18;
  lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
  swift_allocError();
  *(void *)uint64_t v20 = v15;
  *(void *)(v20 + 8) = v17;
  *(unsigned char *)(v20 + 16) = v19 & 1;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unsigned char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[31]) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteUInt8())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unsigned char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned char v21[32];

  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = &v21[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[30]) {
      break;
    }
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteUInt16())
    {
      unint64_t v14 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v16 = v15;
      char v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = v16;
      *(unsigned char *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F36FC8]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F36FC0]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F36FD8]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F36FD0]);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(void, const char *, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)v25 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a2, v13);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v26) {
      break;
    }
    uint64_t v16 = v25[2];
    uint64_t v17 = *(void *)(v6 + 16);
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v6 + 24) + 16) + 1);
    if (a4(*(void *)(v17 + 16), "", v16))
    {
      unint64_t v18 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v20 = v19;
      char v22 = v21;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v23 = v18;
      *(void *)(v23 + 8) = v20;
      *(unsigned char *)(v23 + 16) = v22 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;

  uint64_t v6 = v4;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v26 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v25 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a2, v13);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v28) {
      break;
    }
    uint64_t v16 = v27;
    uint64_t v17 = *(void *)(v6 + 16);
    PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v6 + 24) + 16) + 1);
    if (a4(*(void *)(v17 + 16), "", v16))
    {
      unint64_t v18 = specialized static REEncoder.Error.getStatus(_:)();
      uint64_t v20 = v19;
      char v22 = v21;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(void *)uint64_t v23 = v18;
      *(void *)(v23 + 8) = v20;
      *(unsigned char *)(v23 + 16) = v22 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, AssociatedTypeWitness);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  uint64_t v31 = a4;
  uint64_t v33 = a1;
  uint64_t v32 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (uint64_t *)((char *)&v26 - v7);
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  __n128 v11 = (char *)&v26 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v16 - 8);
  __n128 v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, v33, a2, v17);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v32 = v19;
  uint64_t v33 = v16;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v21 = v27;
  char v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    float32x4_t v29 = v22;
    uint64_t v30 = AssociatedConformanceWitness;
    uint64_t v23 = *(void (**)(void *, char *, uint64_t))(v21 + 32);
    uint64_t v24 = (void (**)(void *, uint64_t))(v21 + 8);
    while (1)
    {
      v23(v8, v11, AssociatedTypeWitness);
      UnkeyedEC.encode<A>(_:)(v8, AssociatedTypeWitness, v31);
      if (v4) {
        break;
      }
      (*v24)(v8, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
      if (v29(v11, 1, AssociatedTypeWitness) == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v33);
      }
    }
    (*v24)(v8, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v32, v33);
}

uint64_t UnkeyedEC.encodeConditional<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  return UnkeyedEC.encode<A>(_:)(&v4, a2, a3);
}

uint64_t UnkeyedEC.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v0 + 4), (uint64_t)v21, &demangling cache variable for type metadata for Terminatable?);
  if (v22)
  {
    outlined init with copy of __REAssetService((uint64_t)v21, (uint64_t)v18);
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v2 = v19;
    uint64_t v3 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  PrivateEncoder.terminateContainers(_:)(*(void *)(v5 + 16) + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v7 = v0[9];
  v21[0] = v7;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain();
  uint64_t v8 = BinaryInteger.description.getter();
  uint64_t v10 = v0[9];
  uint64_t v11 = v10 + 1;
  if (__OFADD__(v10, 1)) {
    __break(1u);
  }
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = type metadata accessor for KeyedEC();
  v1[9] = v11;
  *(void *)(inited + 56) = &unk_26DC92FC0;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  uint64_t v15 = swift_allocObject();
  *(void *)(inited + 32) = v15;
  *(void *)(v15 + 16) = v7;
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = v12;
  *(void *)(v15 + 40) = v13;
  v21[0] = v5;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v16 = KeyedEC.__allocating_init(encoder:codingPath:)(v4, v21[0]);
  uint64_t v22 = v14;
  uint64_t v23 = &protocol witness table for KeyedEC<A>;
  v21[0] = v16;
  outlined init with take of Terminatable?((uint64_t)v21, (uint64_t)v18);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v18, (uint64_t)(v1 + 4));
  swift_endAccess();
  v21[0] = v16;
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t UnkeyedEC.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v1 + 4), (uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
  if (v27)
  {
    outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)v23);
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v5 = v24;
    uint64_t v6 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  PrivateEncoder.terminateContainers(_:)(*(void *)(v8 + 16) + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v10 = v1[9];
  v26[0] = v10;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain();
  uint64_t v11 = BinaryInteger.description.getter();
  uint64_t v13 = v1[9];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  uint64_t v16 = v11;
  uint64_t v17 = v12;
  v2[9] = v15;
  *(void *)(inited + 56) = &unk_26DC92FC0;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  uint64_t v18 = swift_allocObject();
  *(void *)(inited + 32) = v18;
  *(void *)(v18 + 16) = v10;
  *(unsigned char *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = v16;
  *(void *)(v18 + 40) = v17;
  v26[0] = v8;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v19 = v26[0];
  uint64_t v20 = type metadata accessor for UnkeyedEC();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(void *)(v21 + 16) = v7;
  *(void *)(v21 + 24) = v19;
  if ((*(unsigned char *)(v7 + 48) & 1) == 0) {
    REEncoderBeginContainer();
  }
  uint64_t v27 = v20;
  uint64_t v28 = &protocol witness table for UnkeyedEC;
  v26[0] = v21;
  outlined init with take of Terminatable?((uint64_t)v26, (uint64_t)v23);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v23, v4);
  swift_endAccess();
  a1[3] = v20;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, (void (*)(void))type metadata accessor for UnkeyedEC);
  a1[4] = result;
  *a1 = v21;
  return result;
}

uint64_t UnkeyedEC.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = *(void *)(v1[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v7 = v1[9];
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v8 = BinaryInteger.description.getter();
  uint64_t v10 = v1[9];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  v2[9] = v12;
  *(void *)(inited + 56) = &unk_26DC92FC0;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  uint64_t v15 = swift_allocObject();
  *(void *)(inited + 32) = v15;
  *(void *)(v15 + 16) = v7;
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v14;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v16 = v4;
  uint64_t v17 = type metadata accessor for PrivateEncoder();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = MEMORY[0x263F8EE78];
  *(void *)(v18 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v18 + 40) = v19;
  *(unsigned char *)(v18 + 48) = 0;
  *(void *)(v18 + 16) = v5;
  *(void *)(v18 + 24) = v16;
  a1[3] = v17;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
  a1[4] = result;
  *a1 = v18;
  return result;
}

uint64_t UnkeyedEC.__deallocating_deinit()
{
  return UnkeyedEC.__deallocating_deinit();
}

{
  uint64_t v0;
  uint64_t vars8;

  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnkeyedEC()
{
  return self;
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance UnkeyedEC()
{
  return *(void *)(*(void *)v0 + 72);
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance UnkeyedEC()
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Bool a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Double a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Float a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int a1)
{
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int8 a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int16 a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int32 a1)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt a1)
{
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt8 a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt16 a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt32 a1)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance UnkeyedEC(void *a1, uint64_t a2, void *a3)
{
  return UnkeyedEC.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, void *a3)
{
  return UnkeyedEC.encodeConditional<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(a1, a2, a3);
}

{
  return protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, char *a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F8E7E0]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x263F8EA28]);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:) in conformance UnkeyedEC()
{
  return UnkeyedEC.nestedContainer<A>(keyedBy:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance UnkeyedEC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedEC.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance UnkeyedEC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedEC.superEncoder()(a1);
}

uint64_t SingleValueEC.encode<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  v3[3] = type metadata accessor for PrivateEncoder();
  v3[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, (void (*)(void))type metadata accessor for PrivateEncoder);
  v3[0] = v1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t type metadata accessor for SingleValueEC()
{
  return self;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance SingleValueEC()
{
  uint64_t result = REEncoderWriteNil();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC()
{
  uint64_t result = REEncoderWriteBool();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  int v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  String.utf8CString.getter();
  uint64_t v0 = REEncoderWriteString();
  uint64_t result = swift_release();
  if (v0)
  {
    uint64_t v2 = specialized static REEncoder.Error.getStatus(_:)();
    char v4 = v3;
    uint64_t v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteDouble();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteFloat();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteInt8();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteInt16();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteUInt8();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REEncoderWriteUInt16();
  if (result)
  {
    unint64_t v1 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v3 = v2;
    char v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x263F36FC8]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x263F36FC0]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x263F36FD8]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x263F36FD0]);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, const char *, uint64_t))
{
  uint64_t result = a4(*(void *)(*(void *)(*(void *)v4 + 16) + 16), "", a1);
  if (result)
  {
    unint64_t v6 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v8 = v7;
    char v10 = v9;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v11 = v6;
    *(void *)(v11 + 8) = v8;
    *(unsigned char *)(v11 + 16) = v10 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  uint64_t result = a4(*(void *)(*(void *)(*(void *)v4 + 16) + 16), "", a1);
  if (result)
  {
    unint64_t v6 = specialized static REEncoder.Error.getStatus(_:)();
    uint64_t v8 = v7;
    char v10 = v9;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(void *)uint64_t v11 = v6;
    *(void *)(v11 + 8) = v8;
    *(unsigned char *)(v11 + 16) = v10 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance SingleValueEC()
{
  return SingleValueEC.encode<A>(_:)();
}

uint64_t REDecoder.__deallocating_deinit()
{
  return REEncoder.__deallocating_deinit(MEMORY[0x263F36F38]);
}

uint64_t REEncoder.__deallocating_deinit(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REDecoder()
{
  return self;
}

uint64_t REDecoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  type metadata accessor for PrivateDecoder();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 40) = v7;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v7;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  int v9 = REDecoderSetFromCFData();

  if (v9 || REDecoderOpen())
  {
    unint64_t v10 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v12 = v11;
    char v14 = v13;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v15 = v10;
    *(void *)(v15 + 8) = v12;
    *(unsigned char *)(v15 + 16) = v14 & 1;
    swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, (void (*)(void))type metadata accessor for PrivateDecoder);
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
    if (!v23)
    {
      PrivateEncoder.terminateContainers(_:)(0);
      if (REDecoderClose())
      {
        unint64_t v17 = specialized static REDecoder.Error.getStatus(_:)();
        uint64_t v19 = v18;
        char v21 = v20;
        lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
        swift_allocError();
        *(void *)uint64_t v22 = v17;
        *(void *)(v22 + 8) = v19;
        *(unsigned char *)(v22 + 16) = v21 & 1;
        swift_willThrow();
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(a2, a1);
      }
    }
  }
  return swift_release();
}

uint64_t PrivateEncoder.terminateContainers(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + 40;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 40) + 16) > a1)
  {
    while (1)
    {
      uint64_t result = swift_beginAccess();
      uint64_t v5 = *(void **)v3;
      if (!*(void *)(*(void *)v3 + 16)) {
        break;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v3 = v5;
      if (result)
      {
        uint64_t v6 = v5[2];
        if (!v6) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        uint64_t v5 = (void *)result;
        *(void *)uint64_t v3 = result;
        uint64_t v6 = *(void *)(result + 16);
        if (!v6)
        {
LABEL_8:
          __break(1u);
          return result;
        }
      }
      uint64_t v7 = v6 - 1;
      uint64_t v8 = &v5[6 * v7];
      long long v9 = v8[2];
      *(_OWORD *)uint64_t v12 = v8[3];
      *(_OWORD *)&v12[9] = *(_OWORD *)((char *)v8 + 57);
      v5[2] = v7;
      *(void *)uint64_t v3 = v5;
      long long v13 = v9;
      *(_OWORD *)char v14 = *(_OWORD *)v12;
      *(_OWORD *)&v14[9] = *(_OWORD *)&v12[9];
      swift_endAccess();
      uint64_t v10 = *(void *)&v14[8];
      uint64_t v11 = *(void *)&v14[16];
      __swift_project_boxed_opaque_existential_1(&v13, *(uint64_t *)&v14[8]);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
      if (*(void *)(*(void *)v3 + 16) <= a1) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t PrivateDecoder.decode(_:)()
{
  if (REDecoderReadString())
  {
    unint64_t v0 = specialized static REDecoder.Error.getStatus(_:)();
    unint64_t v2 = v1;
    char v4 = v3 & 1;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v5 = v0;
  }
  else
  {
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD000000000000017;
    unint64_t v2 = 0x8000000228351060;
    char v4 = 1;
  }
  *(void *)(v5 + 8) = v2;
  *(unsigned char *)(v5 + 16) = v4;
  return swift_willThrow();
}

uint64_t PrivateDecoder.container<A>(keyedBy:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v0 + 24) + 16) + 1);
  char v4 = (void *)(v0 + 40);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v0 + 40);
  unint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  if (*(void *)(v7 + 16) >= v6)
  {
    char v8 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v5 + 48 * v6 - 16, (uint64_t)&v24, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v8 = v25[24];
    outlined init with take of BindableDataInternal(&v24, (uint64_t)&v20);
    char v23 = v8;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v20, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    uint64_t v7 = *(void *)(v0 + 24);
  }
  *(unsigned char *)(v0 + 48) = v8;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v7 + 16));
  uint64_t v9 = type metadata accessor for KeyedDC();
  uint64_t v10 = *(void *)(v3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v3, v10);
  uint64_t result = swift_release();
  if (!v2)
  {
    *(unsigned char *)(v3 + 48) = 0;
    uint64_t v21 = v9;
    uint64_t v22 = &protocol witness table for KeyedDC<A>;
    *(void *)&long long v20 = v11;
    outlined init with take of BindableDataInternal(&v20, (uint64_t)&v24);
    v25[24] = 1;
    swift_beginAccess();
    long long v13 = *(void **)(v3 + 40);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 40) = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      *char v4 = v13;
    }
    unint64_t v16 = v13[2];
    unint64_t v15 = v13[3];
    if (v16 >= v15 >> 1)
    {
      long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
      *char v4 = v13;
    }
    v13[2] = v16 + 1;
    unint64_t v17 = &v13[6 * v16];
    long long v18 = v24;
    long long v19 = *(_OWORD *)v25;
    *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)&v25[9];
    void v17[2] = v18;
    uint64_t v17[3] = v19;
    swift_endAccess();
    *(void *)&long long v24 = v11;
    swift_getWitnessTable();
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t PrivateDecoder.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(void *)(*(void *)(v1 + 24) + 16) + 1);
  uint64_t v5 = (void *)(v1 + 40);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 40);
  unint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) >= v7)
  {
    char v10 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v6 + 48 * v7 - 16, (uint64_t)&v26, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v9 = v27[24];
    outlined init with take of BindableDataInternal(&v26, (uint64_t)&v22);
    char v25 = v9;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v22, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    char v10 = v9 ^ 1;
    uint64_t v8 = *(void *)(v1 + 24);
  }
  *(unsigned char *)(v1 + 48) = v10;
  PrivateEncoder.terminateContainers(_:)(*(void *)(v8 + 16));
  uint64_t v11 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v1, v11);
  uint64_t result = swift_release();
  if (!v3)
  {
    *(unsigned char *)(v1 + 48) = 0;
    uint64_t v14 = type metadata accessor for UnkeyedDC();
    uint64_t v23 = v14;
    long long v24 = &protocol witness table for UnkeyedDC;
    *(void *)&long long v22 = v12;
    outlined init with take of BindableDataInternal(&v22, (uint64_t)&v26);
    v27[24] = 0;
    swift_beginAccess();
    unint64_t v15 = *(void **)(v1 + 40);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 40) = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      *uint64_t v5 = v15;
    }
    unint64_t v18 = v15[2];
    unint64_t v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
      *uint64_t v5 = v15;
    }
    v15[2] = v18 + 1;
    long long v19 = &v15[6 * v18];
    long long v20 = v26;
    long long v21 = *(_OWORD *)v27;
    *(_OWORD *)((char *)v19 + 57) = *(_OWORD *)&v27[9];
    _OWORD v19[2] = v20;
    void v19[3] = v21;
    swift_endAccess();
    a1[3] = v14;
    uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, (void (*)(void))type metadata accessor for UnkeyedDC);
    a1[4] = result;
    *a1 = v12;
  }
  return result;
}

uint64_t PrivateEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrivateDecoder()
{
  return self;
}

uint64_t type metadata completion function for KeyedDC()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance PrivateEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance PrivateDecoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance PrivateDecoder()
{
  return PrivateDecoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance PrivateDecoder@<X0>(uint64_t *a1@<X8>)
{
  return PrivateDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance PrivateDecoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = type metadata accessor for SingleValueDC();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  a1[3] = v5;
  a1[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type SingleValueDC and conformance SingleValueDC, (void (*)(void))type metadata accessor for SingleValueDC);
  *a1 = v6;
  swift_retain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall KeyedDC.terminate()()
{
}

uint64_t KeyedDC.allKeys.getter()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else
  {
    uint64_t v1 = KeyedDC._allKeys.getter();
    *(void *)(v0 + 72) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyedDC._allKeys.getter()
{
  uint64_t v1 = v0;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v78 = type metadata accessor for Optional();
  unsigned long long v73 = *(void (***)(char *, uint64_t))(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v68 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v10);
  long long v82 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v77 = (char *)&v68 - v13;
  MEMORY[0x270FA5388](v14);
  unsigned long long v70 = (char *)&v68 - v15;
  uint64_t v87 = static Array._allocateUninitialized(_:)();
  uint64_t v16 = v0[2];
  uint64_t v17 = REDecoderContainerElementCount();
  long long v79 = v5;
  uint64_t v68 = v8;
  uint64_t v80 = v16;
  if (v17)
  {
    type metadata accessor for OS_os_log();
    unint64_t v18 = static OS_os_log.default.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v20 = 134217984;
      uint64_t v8 = v68;
      uint64_t v88 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, v18, v19, "Warning: Dictionary contains an odd number of elements: %ld", v20, 0xCu);
      long long v21 = v20;
      uint64_t v5 = v79;
      MEMORY[0x22A696500](v21, -1, -1);
    }
  }
  if (v17 >= 0) {
    uint64_t v22 = v17;
  }
  else {
    uint64_t v22 = v17 + 1;
  }
  Swift::Int v23 = v22 >> 1;
  uint64_t v24 = type metadata accessor for Array();
  Swift::Int v83 = v23;
  uint64_t v76 = v24;
  Array.reserveCapacity(_:)(v23);
  if (v17 < -1) {
    goto LABEL_46;
  }
  if ((unint64_t)(v17 + 1) < 3) {
    return v87;
  }
  uint64_t v26 = 0;
  uint64_t v69 = v1 + 10;
  long long v81 = v1 + 11;
  uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v74 = (void (**)(char *, char *, uint64_t))(v9 + 16);
  char v75 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v71 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v72 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  ++v73;
  while (1)
  {
    uint64_t v85 = -1;
    uint64_t v86 = 0;
    uint64_t v89 = 0;
    REDecoderContainerGetKeyAndOffset();
    if (v89) {
      break;
    }
    uint64_t v46 = v86;
    dispatch thunk of CodingKey.init(intValue:)();
    if ((*v27)(v8, 1, v3) != 1)
    {
      float32x4_t v47 = v70;
      (*v75)(v70, v8, v3);
      (*v74)(v77, v47, v3);
      Array.append(_:)();
      uint64_t v48 = v85;
      float32x4_t v49 = v69;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v84 = (void *)*v49;
      float32x4_t v51 = v84;
      *float32x4_t v49 = 0x8000000000000000;
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
      uint64_t v54 = v51[2];
      BOOL v55 = (v52 & 1) == 0;
      uint64_t v56 = v54 + v55;
      if (__OFADD__(v54, v55)) {
        goto LABEL_43;
      }
      char v57 = v52;
      if (v51[3] >= v56)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
        if ((v57 & 1) != (v59 & 1)) {
          goto LABEL_48;
        }
        unint64_t v53 = v58;
      }
      uint64_t v5 = v79;
      uint64_t v60 = v84;
      if (v57)
      {
        *(void *)(v84[7] + 8 * v53) = v48;
      }
      else
      {
        v84[(v53 >> 6) + 8] |= 1 << v53;
        uint64_t v61 = 8 * v53;
        *(void *)(v60[6] + v61) = v46;
        *(void *)(v60[7] + v61) = v48;
        uint64_t v62 = v60[2];
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (v63) {
          goto LABEL_45;
        }
        v60[2] = v64;
      }
      *uint64_t v69 = v60;
      swift_bridgeObjectRelease();
      swift_endAccess();
      (*v71)(v70, v3);
      goto LABEL_41;
    }
    (*v73)(v8, v78);
LABEL_13:
    if (v83 == ++v26) {
      return v87;
    }
  }
  uint64_t v28 = String.init(cString:)();
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  dispatch thunk of CodingKey.init(stringValue:)();
  if ((*v27)(v5, 1, v3) == 1)
  {
    swift_bridgeObjectRelease();
    (*v73)(v5, v78);
    goto LABEL_13;
  }
  uint64_t v31 = v2;
  uint64_t v32 = v82;
  (*v75)(v82, v5, v3);
  (*v74)(v77, v32, v3);
  Array.append(_:)();
  uint64_t v33 = v85;
  int8x16_t v34 = v81;
  swift_beginAccess();
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v84 = (void *)*v34;
  uint64_t v36 = v84;
  void *v34 = 0x8000000000000000;
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  uint64_t v39 = v36[2];
  BOOL v40 = (v37 & 1) == 0;
  uint64_t v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  char v42 = v37;
  if (v36[3] >= v41)
  {
    if (v35)
    {
      float v45 = v84;
      if ((v37 & 1) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      float v45 = v84;
      if ((v42 & 1) == 0) {
        goto LABEL_38;
      }
    }
    goto LABEL_29;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, v35);
  unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  if ((v42 & 1) == (v44 & 1))
  {
    unint64_t v38 = v43;
    float v45 = v84;
    if ((v42 & 1) == 0)
    {
LABEL_38:
      v45[(v38 >> 6) + 8] |= 1 << v38;
      int v65 = (uint64_t *)(v45[6] + 16 * v38);
      *int v65 = v28;
      v65[1] = v30;
      *(void *)(v45[7] + 8 * v38) = v33;
      uint64_t v66 = v45[2];
      BOOL v63 = __OFADD__(v66, 1);
      uint64_t v67 = v66 + 1;
      if (v63) {
        goto LABEL_44;
      }
      _OWORD v45[2] = v67;
      swift_bridgeObjectRetain();
      goto LABEL_40;
    }
LABEL_29:
    *(void *)(v45[7] + 8 * v38) = v33;
LABEL_40:
    void *v81 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    (*v71)(v82, v3);
    uint64_t v2 = v31;
    uint64_t v5 = v79;
    uint64_t v8 = v68;
LABEL_41:
    uint64_t v27 = v72;
    goto LABEL_13;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t KeyedDC.contains(_:)()
{
  uint64_t v1 = v0;
  KeyedDC.allKeys.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = dispatch thunk of CodingKey.intValue.getter();
  char v4 = v3;
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v7 = v6;
  if (v4)
  {
    uint64_t v10 = v5;
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 88) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v10, v7);
      char v9 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    char v9 = 0;
    return v9 & 1;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(void *)(*(void *)(v0 + 80) + 16)) {
    goto LABEL_7;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(v2);
  char v9 = v8;
  return v9 & 1;
}

uint64_t KeyedDC.readKey(_:)()
{
  KeyedDC.allKeys.getter();
  swift_bridgeObjectRelease();
  uint64_t v1 = dispatch thunk of CodingKey.intValue.getter();
  char v3 = v2;
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  if (v3)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v0 + 88) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v4, (uint64_t)v6);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return REDecoderContainerSetOffset();
      }
      swift_bridgeObjectRelease();
    }
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    uint64_t v14 = static OS_os_log.default.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)v6, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v14, v15, "Warning: Dictionary does not contain key: \"%s\"", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v17, -1, -1);
      MEMORY[0x22A696500](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xD00000000000002BLL;
    unint64_t v26 = 0x80000002283510D0;
  }
  else
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v0 + 80) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v1);
      if (v7)
      {
        swift_bridgeObjectRelease();
        return REDecoderContainerSetOffset();
      }
    }
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    uint64_t v10 = static OS_os_log.default.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v25 = v13;
      *(_DWORD *)uint64_t v12 = 134218242;
      uint64_t v27 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)v6, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v10, v11, "Warning: Dictionary does not contain key: %ld \"%s\"", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v13, -1, -1);
      MEMORY[0x22A696500](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xD00000000000002ALL;
    unint64_t v26 = 0x8000000228351100;
    uint64_t v27 = v1;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 8736;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
  }
  v20._countAndFlagsBits = v4;
  v20._object = v6;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 34;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  uint64_t v23 = v25;
  unint64_t v22 = v26;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(void *)uint64_t v24 = v23;
  *(void *)(v24 + 8) = v22;
  *(unsigned char *)(v24 + 16) = 1;
  return swift_willThrow();
}

uint64_t KeyedDC.decodeNil(forKey:)()
{
  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  char Nil = KeyedDC.readKey(_:)();
  if (!v2) {
    char Nil = REDecoderTryReadNil();
  }
  return Nil & 1;
}

uint64_t KeyedDC.decode(_:forKey:)()
{
  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  KeyedDC.readKey(_:)();
  if (!v2)
  {
    if (REDecoderReadBool())
    {
      unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v7 = v6;
      char v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v10 = v5;
      *(void *)(v10 + 8) = v7;
      *(unsigned char *)(v10 + 16) = v9 & 1;
      swift_willThrow();
    }
    else
    {
      char v4 = 0;
    }
  }
  return v4 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v2)
  {
    uint64_t result = REDecoderReadDouble();
    if (result)
    {
      unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v7 = v6;
      char v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v10 = v5;
      *(void *)(v10 + 8) = v7;
      *(unsigned char *)(v10 + 16) = v9 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v2)
  {
    uint64_t result = REDecoderReadFloat();
    if (result)
    {
      unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v7 = v6;
      char v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v10 = v5;
      *(void *)(v10 + 8) = v7;
      *(unsigned char *)(v10 + 16) = v9 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;

  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v2) {
    return PrivateDecoder.decode(_:)();
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1)
{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F58]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F60]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F48]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F50]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F78]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F80]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F68]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x263F36F70]);
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(void, const char *, void *))
{
  uint64_t v5 = v3;
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::Int v7 = *(void *)(*(void *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    v15[0] = 0;
    if (a2(*(void *)(v6 + 16), "", v15))
    {
      unint64_t v9 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v11 = v10;
      char v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v14 = v9;
      *(void *)(v14 + 8) = v11;
      *(unsigned char *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15[0];
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(void, const char *, unsigned __int8 *))
{
  uint64_t v5 = v3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::Int v7 = *(void *)(*(void *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    unsigned __int8 v15 = 0;
    if (a2(*(void *)(v6 + 16), "", &v15))
    {
      unint64_t v9 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v11 = v10;
      char v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v14 = v9;
      *(void *)(v14 + 8) = v11;
      *(unsigned char *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(void, const char *, unsigned __int16 *))
{
  uint64_t v5 = v3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::Int v7 = *(void *)(*(void *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    unsigned __int16 v15 = 0;
    if (a2(*(void *)(v6 + 16), "", &v15))
    {
      unint64_t v9 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v11 = v10;
      char v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v14 = v9;
      *(void *)(v14 + 8) = v11;
      *(unsigned char *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(void, const char *, unsigned int *))
{
  uint64_t v5 = v3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::Int v7 = *(void *)(*(void *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    unsigned int v15 = 0;
    if (a2(*(void *)(v6 + 16), "", &v15))
    {
      unint64_t v9 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v11 = v10;
      char v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v14 = v9;
      *(void *)(v14 + 8) = v11;
      *(unsigned char *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v6 = (uint64_t)v5;
  uint64_t v35 = a4;
  uint64_t v25 = a5;
  uint64_t v28 = *v5;
  uint64_t v8 = *(void *)(v28 + 80);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v27 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v25 - v12;
  uint64_t v14 = v5[2];
  Swift::Int v15 = *(void *)(v5[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v29 = a2;
  unint64_t v26 = v16;
  v16(v13, a2, v8);
  uint64_t v17 = (void *)(v14 + 24);
  swift_beginAccess();
  Swift::String v18 = *(void **)(v14 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v14 + 24) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::String v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *uint64_t v17 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1) {
    *uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
  }
  uint64_t v22 = (uint64_t)v27;
  v26(v27, v13, v8);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v22, (uint64_t *)(v14 + 24), v8, *(void *)(v28 + 88));
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  swift_endAccess();
  uint64_t v23 = v30;
  KeyedDC.readKey(_:)();
  if (!v23)
  {
    uint64_t v33 = type metadata accessor for PrivateDecoder();
    uint64_t v34 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, (void (*)(void))type metadata accessor for PrivateDecoder);
    uint64_t v32 = v14;
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
  }
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v6);
}

uint64_t $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) + 24;
  swift_beginAccess();
  uint64_t v2 = *(void **)v1;
  if (!*(void *)(*(void *)v1 + 16))
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(void *)uint64_t v1 = v2;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t KeyedDC.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t)(v2 + 4);
  uint64_t v7 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  if (v23)
  {
    outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)v19);
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v9 = v20;
    uint64_t v8 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v10 = v2[2];
  Swift::Int v11 = *(void *)(v2[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v4)
  {
    uint64_t v13 = type metadata accessor for KeyedDC();
    uint64_t v14 = v2[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v16 = *(void *)(v7 + 80);
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = *(void *)(v7 + 88);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_1, a2, v16);
    v22[0] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    uint64_t v18 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v10, v22[0]);
    swift_release();
    uint64_t v23 = v13;
    uint64_t v24 = &protocol witness table for KeyedDC<A>;
    v22[0] = v18;
    outlined init with take of Terminatable?((uint64_t)v22, (uint64_t)v19);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v19, v6);
    swift_endAccess();
    v22[0] = v18;
    swift_getWitnessTable();
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t KeyedDC.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t)(v2 + 4);
  uint64_t v8 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
  if (v24)
  {
    outlined init with copy of __REAssetService((uint64_t)v23, (uint64_t)v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v9 = v21;
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v11 = v2[2];
  Swift::Int v12 = *(void *)(v2[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t result = KeyedDC.readKey(_:)();
  if (!v4)
  {
    uint64_t v14 = v2[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v16 = *(void *)(v8 + 80);
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = *(void *)(v8 + 88);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_1, a1, v16);
    v23[0] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    uint64_t v18 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v11, v23[0]);
    swift_release();
    uint64_t v19 = type metadata accessor for UnkeyedDC();
    uint64_t v24 = v19;
    uint64_t v25 = &protocol witness table for UnkeyedDC;
    v23[0] = v18;
    outlined init with take of Terminatable?((uint64_t)v23, (uint64_t)v20);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v20, v7);
    swift_endAccess();
    a2[3] = v19;
    uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, (void (*)(void))type metadata accessor for UnkeyedDC);
    a2[4] = result;
    *a2 = v18;
  }
  return result;
}

uint64_t KeyedDC.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  dispatch thunk of CodingKey.init(stringValue:)();
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    KeyedDC.superDecoder(forKey:)((uint64_t)v6, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v6, v3);
  }
  return result;
}

uint64_t KeyedDC.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(v2[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v9 = *(void *)(v5 + 80);
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 64) = *(void *)(v5 + 88);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a1, v9);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v11 = type metadata accessor for PrivateDecoder();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v12 + 40) = v13;
  *(unsigned char *)(v12 + 48) = 0;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v6;
  a2[3] = v11;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, (void (*)(void))type metadata accessor for PrivateDecoder);
  a2[4] = result;
  *a2 = v12;
  return result;
}

uint64_t KeyedDC.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t KeyedDC.__deallocating_deinit()
{
  KeyedDC.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyedDC()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance KeyedDC<A>()
{
  return KeyedDC.allKeys.getter();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance KeyedDC<A>()
{
  return KeyedDC.contains(_:)() & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance KeyedDC<A>()
{
  return KeyedDC.decodeNil(forKey:)() & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>()
{
  return KeyedDC.decode(_:forKey:)() & 1;
}

{
  return KeyedDC.decode(_:forKey:)();
}

{
  return KeyedDC.decode(_:forKey:)();
}

{
  return KeyedDC.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1)
{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E3A8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E3B0]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for KeyedDC();
  return a4(a1, v7, a3);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return KeyedDC.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for KeyedDC();
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E338]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E340]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E348]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E358]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E360]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E368]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E370]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E380]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E350]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E378]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E388]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E390]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E398]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x263F8E3A0]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for KeyedDC();
  return a4(a1, v7, a3) & 0x1FF;
}

{
  uint64_t v7;

  uint64_t v7 = type metadata accessor for KeyedDC();
  return a4(a1, v7, a3) & 0x1FFFF;
}

{
  uint64_t v7;
  unint64_t v8;

  uint64_t v7 = type metadata accessor for KeyedDC();
  uint64_t v8 = a4(a1, v7, a3);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  uint64_t v8 = type metadata accessor for KeyedDC();
  uint64_t result = a4(a1, v8, a3);
  if (v4) {
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  uint64_t v8 = type metadata accessor for KeyedDC();
  uint64_t result = a4(a1, v8, a3);
  if (v4) {
    return v10;
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance KeyedDC<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDC.nestedContainer<A>(keyedBy:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedDC.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance KeyedDC<A>@<X0>(uint64_t *a1@<X8>)
{
  return KeyedDC.superDecoder()(a1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedDC.superDecoder(forKey:)(a1, a2);
}

void protocol witness for Terminatable.terminate() in conformance KeyedDC<A>()
{
}

uint64_t UnkeyedDC.count.getter()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0) {
    return *(void *)(v0 + 72);
  }
  Swift::Int v1 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t result = REDecoderContainerElementCount();
  *(void *)(v0 + 72) = result;
  *(_WORD *)(v0 + 80) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double protocol witness for CodingKey.init(stringValue:) in conformance UnkeyedDC.IndexedCodingKey@<D0>(_OWORD *a1@<X8>)
{
  swift_bridgeObjectRelease();
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  return *(void *)v0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UnkeyedDC.IndexedCodingKey@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnkeyedDC.IndexedCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnkeyedDC.IndexedCodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedDC.decodeNil()()
{
  Swift::Int v1 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  int Nil = REDecoderTryReadNil();
  if (Nil)
  {
    uint64_t v3 = *(void *)(v0 + 88);
    BOOL v4 = __OFADD__(v3, 1);
    uint64_t v5 = v3 + 1;
    if (v4) {
      __break(1u);
    }
    else {
      *(void *)(v0 + 88) = v5;
    }
  }
  return Nil;
}

uint64_t UnkeyedDC.decode(_:)()
{
  uint64_t v2 = v1;
  Swift::Int v3 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = PrivateDecoder.decode(_:)();
  if (!v2)
  {
    uint64_t v5 = *(void *)(v0 + 88);
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6) {
      __break(1u);
    }
    else {
      *(void *)(v0 + 88) = v7;
    }
  }
  return result;
}

uint64_t UnkeyedDC.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v5 = (uint64_t)v4;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v36 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v4[2];
  Swift::Int v10 = *(void *)(v4[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = v4[11];
  *(void *)&long long v33 = v11;
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v30 = v13;
  uint64_t v14 = (void *)(v9 + 24);
  swift_beginAccess();
  Swift::Int v15 = *(void **)(v9 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v9 + 24) = v15;
  uint64_t v29 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::Int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *uint64_t v14 = v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    Swift::Int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
    *uint64_t v14 = v15;
  }
  uint64_t v34 = &unk_26DC93040;
  unint64_t v35 = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  uint64_t v19 = swift_allocObject();
  *(void *)&long long v33 = v19;
  *(void *)(v19 + 16) = v11;
  *(unsigned char *)(v19 + 24) = 0;
  uint64_t v20 = v30;
  *(void *)(v19 + 32) = v12;
  *(void *)(v19 + 40) = v20;
  void v15[2] = v18 + 1;
  outlined init with take of BindableDataInternal(&v33, (uint64_t)&v15[5 * v18 + 4]);
  swift_endAccess();
  uint64_t v34 = (void *)type metadata accessor for PrivateDecoder();
  unint64_t v35 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, (void (*)(void))type metadata accessor for PrivateDecoder);
  *(void *)&long long v33 = v9;
  swift_retain();
  uint64_t v21 = v36;
  uint64_t v22 = v31;
  uint64_t result = dispatch thunk of Decodable.init(from:)();
  if (v22) {
    return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
  }
  uint64_t v24 = *(void *)(v5 + 88);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v5 + 88) = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v21, a2);
    return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
  }
  __break(1u);
  return result;
}

uint64_t UnkeyedDC.nestedContainer<A>(keyedBy:)()
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t)(v0 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v0 + 4), (uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  if (v23)
  {
    outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)v19);
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v4 = v20;
    uint64_t v5 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v6 = v0[2];
  Swift::Int v7 = *(void *)(v0[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for KeyedDC();
  uint64_t v9 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  v22[0] = v0[11];
  uint64_t v11 = v22[0];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = v13;
  *(void *)(inited + 56) = &unk_26DC93040;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  uint64_t v15 = swift_allocObject();
  *(void *)(inited + 32) = v15;
  *(void *)(v15 + 16) = v11;
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = v12;
  *(void *)(v15 + 40) = v14;
  v22[0] = v9;
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v16 = v2;
  uint64_t v17 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v6, v22[0]);
  uint64_t result = swift_release();
  if (!v16)
  {
    uint64_t v23 = v8;
    uint64_t v24 = &protocol witness table for KeyedDC<A>;
    v22[0] = v17;
    outlined init with take of Terminatable?((uint64_t)v22, (uint64_t)v19);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v19, v3);
    swift_endAccess();
    v22[0] = v17;
    swift_getWitnessTable();
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t UnkeyedDC.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v1 + 4), (uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  if (v25)
  {
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)v21);
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
    uint64_t v6 = v22;
    uint64_t v7 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  }
  uint64_t v8 = v1[2];
  Swift::Int v9 = *(void *)(v1[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  v24[0] = v1[11];
  uint64_t v12 = v24[0];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v15 = v14;
  *(void *)(inited + 56) = &unk_26DC93040;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  uint64_t v16 = swift_allocObject();
  *(void *)(inited + 32) = v16;
  *(void *)(v16 + 16) = v12;
  *(unsigned char *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = v13;
  *(void *)(v16 + 40) = v15;
  v24[0] = v10;
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v17 = v3;
  uint64_t v18 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v8, v24[0]);
  uint64_t result = swift_release();
  if (!v17)
  {
    uint64_t v20 = type metadata accessor for UnkeyedDC();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for UnkeyedDC;
    v24[0] = v18;
    outlined init with take of Terminatable?((uint64_t)v24, (uint64_t)v21);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v21, v5);
    swift_endAccess();
    a1[3] = v20;
    uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, (void (*)(void))type metadata accessor for UnkeyedDC);
    a1[4] = result;
    *a1 = v18;
  }
  return result;
}

uint64_t UnkeyedDC.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = *(void *)(v1[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v6 = v1[11];
  swift_bridgeObjectRetain();
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v9 = v8;
  *(void *)(inited + 56) = &unk_26DC93040;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)(inited + 32) = v10;
  *(void *)(v10 + 16) = v6;
  *(unsigned char *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v11 = v3;
  uint64_t v12 = type metadata accessor for PrivateDecoder();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)(v13 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v13 + 40) = v14;
  *(unsigned char *)(v13 + 48) = 0;
  *(void *)(v13 + 16) = v4;
  *(void *)(v13 + 24) = v11;
  a1[3] = v12;
  uint64_t result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, (void (*)(void))type metadata accessor for PrivateDecoder);
  a1[4] = result;
  *a1 = v13;
  return result;
}

uint64_t UnkeyedDC.__deallocating_deinit()
{
  return UnkeyedEC.__deallocating_deinit();
}

uint64_t type metadata accessor for UnkeyedDC()
{
  return self;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance UnkeyedDC()
{
  return UnkeyedDC.count.getter();
}

uint64_t protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance UnkeyedDC()
{
  Swift::Int v1 = *(void *)(*(void *)(*(void *)v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  return REDecoderIsAtEndOfContainer();
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance UnkeyedDC()
{
  return *(void *)(*(void *)v0 + 88);
}

BOOL protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance UnkeyedDC()
{
  return UnkeyedDC.decodeNil()();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance UnkeyedDC()
{
  return specialized UnkeyedDC.decode(_:)() & 1;
}

{
  return UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F58]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F60]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F48]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F50]);
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F78]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F80]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F68]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x263F36F70]);
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance UnkeyedDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return UnkeyedDC.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E110]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E118]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E120]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E128]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E138]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E130]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E140]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E148]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x263F8E150]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  uint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance UnkeyedDC()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance UnkeyedDC()
{
  return UnkeyedDC.nestedContainer<A>(keyedBy:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance UnkeyedDC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedDC.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance UnkeyedDC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedDC.superDecoder()(a1);
}

uint64_t SingleValueDC.decode<A>(_:)()
{
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t SingleValueEC.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SingleValueDC()
{
  return self;
}

uint64_t protocol witness for SingleValueDecodingContainer.codingPath.getter in conformance SingleValueDC()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueDecodingContainer.decodeNil() in conformance SingleValueDC()
{
  return REDecoderTryReadNil();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC()
{
  if (REDecoderReadBool())
  {
    unint64_t v0 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v2 = v1;
    char v4 = v3;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v5 = v0;
    *(void *)(v5 + 8) = v2;
    *(unsigned char *)(v5 + 16) = v4 & 1;
    swift_willThrow();
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

{
  return PrivateDecoder.decode(_:)();
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REDecoderReadDouble();
  if (result)
  {
    uint64_t v1 = specialized static REDecoder.Error.getStatus(_:)();
    char v3 = v2;
    uint64_t v5 = v4;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)char v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  uint64_t result = REDecoderReadFloat();
  if (result)
  {
    uint64_t v1 = specialized static REDecoder.Error.getStatus(_:)();
    char v3 = v2;
    uint64_t v5 = v4;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)char v6 = v1;
    *(void *)(v6 + 8) = v3;
    *(unsigned char *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2)
{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F58]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F60]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F48]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F50]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F78]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F80]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F68]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x263F36F70]);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, const char *, unsigned __int8 *))
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  unsigned __int8 v12 = 0;
  if (!a3(*(void *)(v4 + 16), "", &v12)) {
    return v12;
  }
  unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = v7;
  *(unsigned char *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, const char *, unsigned __int16 *))
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  unsigned __int16 v12 = 0;
  if (!a3(*(void *)(v4 + 16), "", &v12)) {
    return v12;
  }
  unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = v7;
  *(unsigned char *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, const char *, unsigned int *))
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  unsigned int v12 = 0;
  if (!a3(*(void *)(v4 + 16), "", &v12)) {
    return v12;
  }
  unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = v7;
  *(unsigned char *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, const char *, void *))
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  v12[0] = 0;
  if (!a3(*(void *)(v4 + 16), "", v12)) {
    return v12[0];
  }
  unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
  uint64_t v7 = v6;
  char v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = v7;
  *(unsigned char *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance SingleValueDC()
{
  return SingleValueDC.decode<A>(_:)();
}

uint64_t associated type witness table accessor for KeyedDecodingContainerProtocol.Key : CodingKey in KeyedDC<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of BindableDataInternal(&v12, v10 + 40 * a1 + 32);
}

unint64_t specialized static REDecoder.Error.getStatus(_:)()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v0 = 0xD000000000000017;
  uint64_t v11 = 0;
  int Status = REDecoderGetStatus();
  if (Status == 3)
  {
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    uint64_t v3 = static OS_os_log.default.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v9 = v6;
      *(_DWORD *)unint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E776F6E6B6E75, 0xE700000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v3, v4, "REDecoder decoding error: %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v6, -1, -1);
      MEMORY[0x22A696500](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v9 = 0xD00000000000001ALL;
    unint64_t v10 = 0x80000002283510B0;
    v7._countAndFlagsBits = 0x6E776F6E6B6E75;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    type metadata accessor for OS_os_log();
    uint64_t v2 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    if (Status == 1) {
      return 0xD000000000000025;
    }
  }
  return v0;
}

uint64_t specialized KeyedDC.init(decoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 80) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v2 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  if (*(unsigned char *)(a1 + 48))
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    if (REDecoderBeginContainer())
    {
      swift_release();
      unint64_t v6 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v8 = v7;
      char v10 = v9;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v11 = v6;
      *(void *)(v11 + 8) = v8;
      *(unsigned char *)(v11 + 16) = v10 & 1;
      swift_willThrow();
    }
  }
  return v2;
}

uint64_t specialized KeyedDC.__allocating_init(decoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  return specialized KeyedDC.init(decoder:codingPath:)(a1, a2);
}

uint64_t specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UnkeyedDC();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_WORD *)(v4 + 80) = 256;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    if (REDecoderBeginContainer())
    {
      swift_release();
      unint64_t v5 = specialized static REDecoder.Error.getStatus(_:)();
      uint64_t v7 = v6;
      char v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(void *)uint64_t v10 = v5;
      *(void *)(v10 + 8) = v7;
      *(unsigned char *)(v10 + 16) = v9 & 1;
      swift_willThrow();
    }
  }
  return v4;
}

unint64_t specialized static REEncoder.Error.getStatus(_:)()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v0 = 0xD000000000000017;
  uint64_t v11 = 0;
  int Status = REEncoderGetStatus();
  if (Status == 3)
  {
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    uint64_t v3 = static OS_os_log.default.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v9 = v6;
      *(_DWORD *)unint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E776F6E6B6E75, 0xE700000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v3, v4, "REEncoder encoding error: %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v6, -1, -1);
      MEMORY[0x22A696500](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v9 = 0xD00000000000001ALL;
    unint64_t v10 = 0x8000000228351040;
    v7._countAndFlagsBits = 0x6E776F6E6B6E75;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    type metadata accessor for OS_os_log();
    uint64_t v2 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    if (Status == 1) {
      return 0xD000000000000025;
    }
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error;
  if (!lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error);
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)()
{
  Swift::Int v1 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  if (REDecoderReadBool())
  {
    unint64_t v2 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v4 = v3;
    char v6 = v5;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v7 = v2;
    *(void *)(v7 + 8) = v4;
    *(unsigned char *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      __break(1u);
    }
    char v8 = 0;
    *(void *)(v0 + 88) = v10;
  }
  return v8 & 1;
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  Swift::Int v1 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  unint64_t result = REDecoderReadDouble();
  if (result)
  {
    uint64_t v3 = specialized static REDecoder.Error.getStatus(_:)();
    char v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)char v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(unsigned char *)(v8 + 16) = v7 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      __break(1u);
    }
    *(void *)(v0 + 88) = v11;
  }
  return result;
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  Swift::Int v1 = *(void *)(*(void *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  unint64_t result = REDecoderReadFloat();
  if (result)
  {
    uint64_t v3 = specialized static REDecoder.Error.getStatus(_:)();
    char v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)char v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(unsigned char *)(v8 + 16) = v7 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      __break(1u);
    }
    *(void *)(v0 + 88) = v11;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(void, const char *, void *))
{
  uint64_t v3 = v1;
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v5 = v1 + 16;
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::Int v6 = *(void *)(*(void *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  v17[0] = 0;
  if (a1(*(void *)(v4 + 16), "", v17))
  {
    unint64_t v7 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v9 = v8;
    char v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v12 = v7;
    *(void *)(v12 + 8) = v9;
    *(unsigned char *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v14 = *(void *)(v3 + 88);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      __break(1u);
    }
    uint64_t result = v17[0];
    *(void *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(void, const char *, unsigned __int8 *))
{
  uint64_t v3 = v1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = v1 + 16;
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::Int v6 = *(void *)(*(void *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  unsigned __int8 v17 = 0;
  if (a1(*(void *)(v4 + 16), "", &v17))
  {
    unint64_t v7 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v9 = v8;
    char v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v12 = v7;
    *(void *)(v12 + 8) = v9;
    *(unsigned char *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v14 = *(void *)(v3 + 88);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      __break(1u);
    }
    uint64_t result = v17;
    *(void *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(void, const char *, unsigned __int16 *))
{
  uint64_t v3 = v1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = v1 + 16;
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::Int v6 = *(void *)(*(void *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  unsigned __int16 v17 = 0;
  if (a1(*(void *)(v4 + 16), "", &v17))
  {
    unint64_t v7 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v9 = v8;
    char v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v12 = v7;
    *(void *)(v12 + 8) = v9;
    *(unsigned char *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v14 = *(void *)(v3 + 88);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      __break(1u);
    }
    uint64_t result = v17;
    *(void *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(void, const char *, unsigned int *))
{
  uint64_t v3 = v1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = v1 + 16;
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::Int v6 = *(void *)(*(void *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  unsigned int v17 = 0;
  if (a1(*(void *)(v4 + 16), "", &v17))
  {
    unint64_t v7 = specialized static REDecoder.Error.getStatus(_:)();
    uint64_t v9 = v8;
    char v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(void *)uint64_t v12 = v7;
    *(void *)(v12 + 8) = v9;
    *(unsigned char *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v14 = *(void *)(v3 + 88);
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      __break(1u);
    }
    uint64_t result = v17;
    *(void *)(v3 + 88) = v16;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error;
  if (!lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

uint64_t sub_227ED57EC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined init with take of Terminatable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Terminatable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Terminatable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Terminatable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for UnkeyedEC.IndexedCodingKey()
{
  return &unk_26DC92FC0;
}

uint64_t destroy for UnkeyedDC.IndexedCodingKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnkeyedEC.IndexedCodingKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnkeyedEC.IndexedCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for UnkeyedDC.IndexedCodingKey()
{
  return &unk_26DC93040;
}

uint64_t initializeBufferWithCopyOfBuffer for REDecoder.Error(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for REDecoder.Error(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REDecoder.Error);
}

uint64_t outlined copy of REDecoder.Error()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for REDecoder.Error()
{
  return outlined consume of REDecoder.Error();
}

uint64_t outlined consume of REDecoder.Error()
{
  return swift_bridgeObjectRelease();
}

uint64_t *assignWithCopy for REDecoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for REDecoder.Error(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REDecoder.Error, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

uint64_t *assignWithTake for REDecoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for REDecoder.Error(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

ValueMetadata *type metadata accessor for REDecoder.Error()
{
  return &type metadata for REDecoder.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for REEncoder.Error(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for REDecoder.Error(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REEncoder.Error);
}

uint64_t initializeBufferWithCopyOfBuffer for REDecoder.Error(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for REEncoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for REDecoder.Error(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REEncoder.Error, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REEncoder.Error);
}

uint64_t *assignWithCopy for REDecoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for REEncoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for REDecoder.Error(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REEncoder.Error);
}

uint64_t *assignWithTake for REDecoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for REEncoder.Error()
{
  return &type metadata for REEncoder.Error;
}

uint64_t specialized AssetServiceScopedRegistry.instance(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 32);
  Swift::UInt v6 = v5(v3, v4);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    type metadata accessor for __USDARReferenceProvidingPlugin();
    unsigned int v17 = (void (*)(uint64_t, uint64_t))v5;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x263F8EE80];
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v19;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v17(v3, v4);
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v6;
    aBlock[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    void aBlock[3] = &block_descriptor_34;
    BOOL v15 = _Block_copy(aBlock);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v15);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void v19[6];
  uint64_t v20;

  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  char v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<CustomMaterial.CustomShaderParameters>);
    swift_allocObject();
    uint64_t v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<CustomMaterial.CustomShaderParameters>, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<CustomMaterial.CustomShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    BOOL v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v19[5] = v16;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    _OWORD v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    void v19[3] = &block_descriptor_90;
    unsigned int v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void v19[6];
  uint64_t v20;

  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  char v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<UnlitMaterial.UnlitShaderParameters>);
    swift_allocObject();
    uint64_t v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<UnlitMaterial.UnlitShaderParameters>, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    BOOL v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v19[5] = v16;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    _OWORD v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    void v19[3] = &block_descriptor_3;
    unsigned int v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void v19[6];
  uint64_t v20;

  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  char v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>);
    swift_allocObject();
    uint64_t v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<PhysicallyBasedMaterial.PBRShaderParameters>, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    BOOL v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v19[5] = v16;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    _OWORD v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    void v19[3] = &block_descriptor_71;
    unsigned int v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void v19[6];
  uint64_t v20;

  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  char v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    type metadata accessor for SimpleMaterial.SimpleMaterialMapping();
    swift_allocObject();
    uint64_t v11 = SimpleMaterial.SimpleMaterialMapping.init(_:)(v19);
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    BOOL v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v19[5] = v16;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    _OWORD v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    void v19[3] = &block_descriptor_99;
    unsigned int v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void v22[6];
  uint64_t v23;

  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  char v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v22);
    type metadata accessor for __ARReferenceProvider();
    uint64_t v11 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__ARReferenceProvidingPlugin>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_22831E350;
    if (one-time initialization token for instances != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v13 = specialized AssetServiceScopedRegistry.instance(for:)(v22);
    swift_release();
    *(void *)(v12 + 56) = type metadata accessor for __RealityFileARReferenceProvidingPlugin();
    *(void *)(v12 + 64) = &protocol witness table for __RealityFileARReferenceProvidingPlugin;
    *(void *)(v12 + 32) = v13;
    if (one-time initialization token for instances != -1) {
      swift_once();
    }
    uint64_t v14 = specialized AssetServiceScopedRegistry.instance(for:)(v22);
    *(void *)(v12 + 96) = type metadata accessor for __USDARReferenceProvidingPlugin();
    *(void *)(v12 + 104) = &protocol witness table for __USDARReferenceProvidingPlugin;
    *(void *)(v12 + 72) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *(void *)(v11 + 16) = v12;
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v23;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v16 = a1[3];
    unsigned int v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v6;
    v22[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v22[5] = v19;
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 1107296256;
    v22[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v22[3] = &block_descriptor_43;
    uint64_t v20 = _Block_copy(v22);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v20);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

void *specialized AssetServiceScopedRegistry.instance(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  Swift::UInt v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 24);
  if (*(void *)(v8 + 16) && (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v20);
    type metadata accessor for __RealityFileARReferenceProvidingPlugin();
    uint64_t v11 = (void *)swift_allocObject();
    if (one-time initialization token for schemePrefix != -1) {
      swift_once();
    }
    uint64_t v12 = *((void *)&static __RealityFileURLResolver.schemePrefix + 1);
    v11[7] = static __RealityFileURLResolver.schemePrefix;
    v11[8] = v12;
    v11[9] = MEMORY[0x263F8EE80];
    outlined init with take of BindableDataInternal(&v20, (uint64_t)(v11 + 2));
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, v6, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 24) = v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v14 = a1[3];
    uint64_t v15 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = v6;
    uint64_t v23 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v24 = v17;
    *(void *)&long long v20 = MEMORY[0x263EF8330];
    *((void *)&v20 + 1) = 1107296256;
    uint64_t v21 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v22 = &block_descriptor_52;
    uint64_t v18 = _Block_copy(&v20);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v18);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

id CustomMaterial.Program.surfaceShader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  id v7 = *(id *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();

  return v7;
}

void CustomMaterial.Program.geometryModifier.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  Swift::UInt v6 = *(void **)(v1 + 96);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(v1 + 104);
  outlined copy of CustomMaterial.GeometryModifier?(v2, v3, v4, v5, v6);
}

void CustomMaterial.Program.descriptor.getter(_WORD *a1@<X8>)
{
  *a1 = *(_WORD *)(v1 + 105);
}

void CustomMaterial.Program.Descriptor.lightingModel.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CustomMaterial.Program.Descriptor.lightingModel.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*CustomMaterial.Program.Descriptor.lightingModel.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Program.Descriptor.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *CustomMaterial.Program.Descriptor.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CustomMaterial.Program.Descriptor.blendMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Program.Descriptor.init()(_WORD *a1@<X8>)
{
  *a1 = 512;
}

void CustomMaterial.Program.Descriptor.hash(into:)()
{
  int v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int CustomMaterial.Program.Descriptor.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.Program.Descriptor()
{
  Swift::UInt v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CustomMaterial.Program.Descriptor()
{
  int v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Program.Descriptor()
{
  Swift::UInt v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  swift_allocObject();
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(a1, a2, a3);
}

uint64_t CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  *(void *)(v4 + 200) = v3;
  uint64_t v5 = *a1;
  *(void *)(v4 + 208) = *v3;
  *(void *)(v4 + 216) = v5;
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 1);
  uint64_t v6 = a1[4];
  *(void *)(v4 + 240) = a1[3];
  *(void *)(v4 + 248) = v6;
  *(unsigned char *)(v4 + 425) = *((unsigned char *)a1 + 40);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 256) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 272) = v7;
  *(void *)(v4 + 288) = *(void *)(a2 + 32);
  *(unsigned char *)(v4 + 428) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(v4 + 429) = *a3;
  return MEMORY[0x270FA2498](CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:), 0, 0);
}