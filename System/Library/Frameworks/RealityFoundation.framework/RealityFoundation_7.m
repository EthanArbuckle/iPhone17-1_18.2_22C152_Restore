uint64_t BlendShapeWeights.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BlendShapeWeights.CodingKeys>);
  v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BlendShapeWeights@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return BlendShapeWeights.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BlendShapeWeights(void *a1)
{
  return BlendShapeWeights.encode(to:)(a1);
}

void *TimelineDefinition.resource.getter()
{
  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v2, (uint64_t)v11);
    uint64_t v3 = v12;
    uint64_t v4 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    if (TimelineAsset)
    {
      uint64_t v6 = TimelineAsset;
      RETimelineDefinitionGetName();
      uint64_t v7 = String.init(cString:)();
      uint64_t v9 = v8;
      type metadata accessor for AnimationResource();
      v1 = (void *)swift_allocObject();
      v1[2] = v6;
      v1[3] = v7;
      v1[4] = v9;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

Swift::Void __swiftcall TimelineClipProperties.writeProperties(_:)(Swift::OpaquePointer a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v2 = v1[7];
  long long v30 = v1[6];
  long long v31 = v2;
  long long v32 = v1[8];
  uint64_t v33 = *((void *)v1 + 18);
  long long v3 = v1[3];
  long long v26 = v1[2];
  long long v27 = v3;
  long long v4 = v1[5];
  long long v28 = v1[4];
  long long v29 = v4;
  long long v5 = v1[1];
  long long v24 = *v1;
  long long v25 = v5;
  uint64_t v6 = v33;
  long long v14 = v30;
  long long v15 = v31;
  LOBYTE(v16) = v32;
  *(void *)((char *)&v16 + 4) = *(void *)((char *)&v32 + 4);
  *(void *)&long long v17 = v33;
  TimelineBaseProperties.writeProperties(_:)(a1);
  if ((BYTE9(v24) & 1) == 0)
  {
    if (BYTE8(v24)) {
      goto LABEL_8;
    }
    uint64_t v8 = v24;
LABEL_7:
    *(void *)&long long v14 = v8;
    RETimelineDefinitionSetClipStart();
LABEL_8:
    if (BYTE9(v25)) {
      goto LABEL_9;
    }
LABEL_13:
    if (BYTE8(v25)) {
      goto LABEL_16;
    }
    uint64_t v10 = v25;
LABEL_15:
    *(void *)&long long v14 = v10;
    RETimelineDefinitionSetClipEnd();
LABEL_16:
    if (BYTE9(v26)) {
      goto LABEL_17;
    }
LABEL_21:
    if (BYTE8(v26)) {
      goto LABEL_24;
    }
    uint64_t v12 = v26;
LABEL_23:
    *(void *)&long long v14 = v12;
    RETimelineDefinitionSetClipDuration();
LABEL_24:
    if ((BYTE8(v27) & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (!*(void *)(v33 + 16)) {
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (ClipStart)
  {
    uint64_t v8 = *ClipStart;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_7;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE9(v25) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  if (!*(void *)(v6 + 16)) {
    goto LABEL_16;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (ClipEnd)
  {
    uint64_t v10 = *ClipEnd;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_15;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE9(v26) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_17:
  if (!*(void *)(v6 + 16)) {
    goto LABEL_24;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (ClipDuration)
  {
    uint64_t v12 = *ClipDuration;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_23;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE8(v27) & 1) == 0) {
    goto LABEL_30;
  }
LABEL_25:
  if (*(void *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2) {
      RETimelineDefinitionGetClipOffset();
    }
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
LABEL_30:
  RETimelineDefinitionSetClipOffset();
  if ((BYTE8(v28) & 1) != 0 && *(void *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2) {
      RETimelineDefinitionGetClipDelay();
    }
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
  RETimelineDefinitionSetClipDelay();
  if ((v29 & 1) != 0 && *(void *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2) {
      RETimelineDefinitionGetClipSpeed();
    }
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
  RETimelineDefinitionSetClipSpeed();
  long long v20 = v30;
  long long v21 = v31;
  long long v22 = v32;
  uint64_t v23 = v33;
  long long v16 = v26;
  long long v17 = v27;
  long long v18 = v28;
  long long v19 = v29;
  long long v14 = v24;
  long long v15 = v25;
  TimelineClipProperties.repeatMode.getter(&v13);
  RETimelineDefinitionSetClipLoopBehavior();
}

uint64_t closure #1 in TimelineClipProperties.createClip()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v11);
  uint64_t v5 = *((void *)&v12 + 1);
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v12 = v7;
  long long v13 = *(_OWORD *)(a1 + 128);
  uint64_t v14 = *(void *)(a1 + 144);
  if (*((void *)&v11 + 1) || !*(void *)(v14 + 16))
  {
    outlined retain of TimelineBaseProperties((uint64_t)&v11);
  }
  else
  {
    outlined retain of TimelineBaseProperties((uint64_t)&v11);
    RETimelineDefinitionGetName();
    String.init(cString:)();
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v11);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t TimelineClip = RETimelineDefinitionCreateTimelineClip();
  swift_release();
  TimelineClipProperties.writeProperties(_:)((Swift::OpaquePointer)TimelineClip);
  type metadata accessor for TimelineDefinition();
  *(void *)(swift_initStackObject() + 16) = TimelineClip;
  RERetain();
  uint64_t v9 = TimelineDefinition.resource.getter();
  swift_setDeallocating();
  RERelease();
  *a2 = v9;
  return RERelease();
}

uint64_t AnimationDefinition.trimmed(start:end:duration:)@<X0>(uint64_t a1@<X0>, char a2@<W3>, char a3@<W5>, uint64_t a4@<X6>, void (**a5)(void, void, void, void)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9 = a2 & 1;
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = a3 & 1;
  uint64_t v12 = MEMORY[0x270FA5388](a6);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v19 = (char *)&v24 - v18;
  long long v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  if ((v13 & 1) != 0 && v9 && v11)
  {
    return v20(v12, v16, a4);
  }
  else
  {
    uint64_t v24 = v15;
    uint64_t v25 = v12;
    uint64_t v22 = v13 & 1;
    uint64_t v23 = v14;
    v20((uint64_t)&v24 - v18, v16, a4);
    a5[14](a1, v22, a4, a5);
    a5[17](v23, v9, a4, a5);
    if (v22 | v9) {
      a5[20](v24, v11, a4, a5);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v25, v19, a4);
  }
}

uint64_t AnimationDefinition.repeated(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, v4, a1);
  double v8 = (*(double (**)(uint64_t, uint64_t))(a2 + 272))(a1, a2);
  (*(void (**)(double, void, uint64_t, uint64_t))(a2 + 160))(v8 * a4, 0, a1, a2);
  char v10 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 256))(&v10, a1, a2);
}

uint64_t AnimationDefinition.repeated(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  double v8 = (*(double (**)(uint64_t, uint64_t))(a3 + 272))(a2, a3);
  (*(void (**)(double, void, uint64_t, uint64_t))(a3 + 160))(v8 * (double)a1, 0, a2, a3);
  char v10 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 256))(&v10, a2, a3);
}

uint64_t AnimationDefinition.repeatingForever()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, v3, a1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 160))(0x7FF0000000000000, 0, a1, a2);
  char v7 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 256))(&v7, a1, a2);
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance InvalidAnimationDefinition()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance InvalidAnimationDefinition(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

void protocol witness for AnimationDefinition.fillMode.getter in conformance InvalidAnimationDefinition(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 20);
}

unsigned char *protocol witness for AnimationDefinition.fillMode.setter in conformance InvalidAnimationDefinition(unsigned char *result)
{
  *(unsigned char *)(v1 + 20) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.getter in conformance InvalidAnimationDefinition@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of BindTarget(v2, v3, v4);
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance InvalidAnimationDefinition(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget(*(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  *(unsigned char *)(v1 + 40) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance InvalidAnimationDefinition()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance InvalidAnimationDefinition(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance InvalidAnimationDefinition()
{
  return *(void *)(v0 + 80);
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance InvalidAnimationDefinition(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

double protocol witness for AnimationDefinition.offset.getter in conformance InvalidAnimationDefinition()
{
  return *(double *)(v0 + 96);
}

void protocol witness for AnimationDefinition.offset.setter in conformance InvalidAnimationDefinition(double a1)
{
  *(double *)(v1 + 96) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double protocol witness for AnimationDefinition.delay.getter in conformance InvalidAnimationDefinition()
{
  return *(double *)(v0 + 104);
}

void protocol witness for AnimationDefinition.delay.setter in conformance InvalidAnimationDefinition(double a1)
{
  *(double *)(v1 + 104) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float protocol witness for AnimationDefinition.speed.getter in conformance InvalidAnimationDefinition()
{
  return *(float *)(v0 + 112);
}

void protocol witness for AnimationDefinition.speed.setter in conformance InvalidAnimationDefinition(float a1)
{
  *(float *)(v1 + 112) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void protocol witness for AnimationDefinition.repeatMode.getter in conformance InvalidAnimationDefinition(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 116);
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance InvalidAnimationDefinition(unsigned char *result)
{
  *(unsigned char *)(v1 + 116) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance InvalidAnimationDefinition())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double protocol witness for AnimationDefinition.duration.getter in conformance InvalidAnimationDefinition()
{
  return 0.0;
}

uint64_t protocol witness for AnimationDefinitionInternal.generate() in conformance InvalidAnimationDefinition()
{
  lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD00000000000001CLL;
  *(void *)(v0 + 8) = 0x800000022834E530;
  *(unsigned char *)(v0 + 16) = 0;
  return swift_willThrow();
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v13 = *(char **)(result + 8);
  uint64_t v14 = *((void *)v13 + 2);
  if (v14 < *(void *)result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = (uint64_t)a2;
  if (*(void *)result > (uint64_t)a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v11 = a3;
  if (v14 < (uint64_t)a3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v7 = a4;
  if (a2 == a3) {
    goto LABEL_23;
  }
  uint64_t v12 = a4 - a5;
  if (a4 == a5) {
    goto LABEL_34;
  }
  if ((uint64_t)a2 >= (uint64_t)a3) {
    goto LABEL_35;
  }
  uint64_t v10 = a7;
  uint64_t v9 = result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_36;
  }
  while (2)
  {
    uint64_t v15 = 0;
    *(void *)(v9 + 8) = v13;
    uint64_t v16 = *(void *)(v10 + 16);
    if (v16 <= v7) {
      uint64_t v16 = v7;
    }
    char v13 = (char *)(v16 - v7);
    v10 += 40 * v7 + 32;
    uint64_t v17 = (char *)v11 + ~v8;
    uint64_t v18 = 40 * v8 + 32;
    while (1)
    {
      if ((uint64_t)&v15[v7] >= a5)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v7 < 0) {
        goto LABEL_26;
      }
      if (v13 == v15) {
        goto LABEL_27;
      }
      outlined init with copy of __REAssetService(v10, (uint64_t)v20);
      uint64_t v11 = *(void **)(v9 + 8);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v9 + 8) = v11;
      if (result)
      {
        if (v8 < 0) {
          break;
        }
        goto LABEL_16;
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      uint64_t v11 = (void *)result;
      *(void *)(v9 + 8) = result;
      if (v8 < 0) {
        break;
      }
LABEL_16:
      if ((unint64_t)&v15[v8] >= v11[2]) {
        goto LABEL_28;
      }
      __swift_assign_boxed_opaque_existential_1((void *)((char *)v11 + v18), v20);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (v17 == v15) {
        goto LABEL_22;
      }
      ++v15;
      v10 += 40;
      v18 += 40;
      if (!&v15[v12]) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_22:
    v7 += (uint64_t)(v15 + 1);
LABEL_23:
    if (v7 != a5)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      char v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      continue;
    }
    return result;
  }
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = DRMeshGetPartCount();
  if (result < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < a3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a2 != a3)
  {
    if (a4 == a5) {
      goto LABEL_19;
    }
    do
    {
      if (a4 >= a5) {
        goto LABEL_13;
      }
      DRMeshGetPartAt();
      uint64_t result = DRMeshSetPartAt();
      if (__OFADD__(a2, 1)) {
        goto LABEL_14;
      }
      ++a4;
      if (a2 + 1 == a3) {
        goto LABEL_5;
      }
      ++a2;
    }
    while (a5 != a4);
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_5:
  if (a4 != a5)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 0 || (uint64_t v8 = (void *)result, v10 = *(void **)result, *(void *)(*(void *)result + 16) < a3))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  if (a2 == a3) {
    goto LABEL_20;
  }
  uint64_t v12 = a4 - a5;
  if (a4 == a5) {
    goto LABEL_28;
  }
  uint64_t v13 = a2 - a3;
  if (a2 >= a3) {
    goto LABEL_29;
  }
  uint64_t v11 = a6;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_30;
  }
  while (1)
  {
    if (one-time initialization token for identity != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v11 + 16);
    if (v15 <= v7) {
      uint64_t v15 = v7;
    }
    uint64_t v16 = v15 - v7;
    uint64_t v17 = (long long *)(v11 + 48 * v7 + 64);
    uint64_t v18 = &v10[6 * v9 + 8];
    do
    {
      if (v7 + v14 >= v6)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (v7 < 0) {
        goto LABEL_23;
      }
      if (v16 == v14) {
        goto LABEL_24;
      }
      if ((unint64_t)(v9 + v14) >= v10[2]) {
        goto LABEL_25;
      }
      long long v20 = *(v17 - 1);
      long long v19 = *v17;
      *(v18 - 2) = *(v17 - 2);
      *(v18 - 1) = v20;
      *uint64_t v18 = v19;
      if (!(v13 + 1 + v14)) {
        goto LABEL_19;
      }
      ++v14;
      v17 += 3;
      v18 += 3;
    }
    while (v12 + v14);
    __break(1u);
LABEL_19:
    *uint64_t v8 = v10;
    v7 += v14 + 1;
LABEL_20:
    if (v7 == v6) {
      return result;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    uint64_t v10 = (void *)result;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0 || (v11 = a3, uint64_t v8 = (void *)result, v10 = *(void *)result, *(void *)(*(void *)result + 16) < a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  if (a2 == a3) {
    goto LABEL_18;
  }
  uint64_t v13 = a4 - a5;
  if (a4 == a5) {
    goto LABEL_26;
  }
  if (a2 >= a3) {
    goto LABEL_27;
  }
  uint64_t v12 = a6;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v12 + 16);
    if (v15 <= v7) {
      uint64_t v15 = v7;
    }
    uint64_t v16 = v15 - v7;
    do
    {
      if (v7 + v14 >= v6)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (v7 < 0) {
        goto LABEL_21;
      }
      if (v16 == v14) {
        goto LABEL_22;
      }
      if ((unint64_t)(v9 + v14) >= *(void *)(v10 + 16)) {
        goto LABEL_23;
      }
      *(_DWORD *)(v10 + 4 * v9 + 32 + 4 * v14) = *(_DWORD *)(v12 + 4 * v7 + 32 + 4 * v14);
      if (~v9 + v11 == v14) {
        goto LABEL_17;
      }
      ++v14;
    }
    while (v13 + v14);
    __break(1u);
LABEL_17:
    *uint64_t v8 = v10;
    v7 += v14 + 1;
LABEL_18:
    if (v7 == v6) {
      return result;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    uint64_t v10 = result;
  }
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(unint64_t result)
{
  int64_t v3 = *v1;
  int64_t v4 = *(void *)(v1[1] + 16);
  if (*v1 >= v4)
  {
    return *v1;
  }
  else
  {
    uint64_t v5 = v1;
    uint64_t v6 = (uint64_t (*)(unsigned char *))result;
    uint64_t v14 = -8;
    int64_t v7 = v3;
    while ((v3 & 0x8000000000000000) == 0)
    {
      int64_t v8 = v5[1];
      if ((unint64_t)v7 >= *(void *)(v8 + 16)) {
        goto LABEL_19;
      }
      outlined init with copy of __REAssetService(v8 + 40 * v7 + 32, (uint64_t)v13);
      char v9 = v6(v13);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      if (v2) {
        return v7;
      }
      if (v9)
      {
        if (v7 >= v4 - 1) {
          return v7;
        }
        for (uint64_t i = v14 + 40 * v4--; ; i -= 40)
        {
          int64_t v11 = v5[1];
          if (v4 >= *(void *)(v11 + 16)) {
            break;
          }
          outlined init with copy of __REAssetService(v11 + i, (uint64_t)v13);
          char v12 = v6(v13);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
          if ((v12 & 1) == 0)
          {
            uint64_t result = specialized MutableCollection.swapAt(_:_:)(v7, v4);
            goto LABEL_5;
          }
          if (v7 >= --v4) {
            return v7;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v7 >= v4) {
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(int *);
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  int v10;
  int v11;

  int64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    int64_t v4 = v1;
    uint64_t v5 = (uint64_t (*)(int *))result;
    uint64_t v6 = 0;
    while (1)
    {
      int64_t v7 = *v4;
      if ((unint64_t)v6 >= *(void *)(*v4 + 16)) {
        break;
      }
      int64_t v11 = *(_DWORD *)(v7 + 4 * v6 + 32);
      uint64_t result = v5(&v11);
      if (v2) {
        return v6;
      }
      if (result)
      {
        if (v6 >= v3 - 1) {
          return v6;
        }
        while (v3 - 1 < *(void *)(v7 + 16))
        {
          uint64_t v10 = *(_DWORD *)(v7 + 28 + 4 * v3);
          uint64_t result = v5(&v10);
          if ((result & 1) == 0)
          {
            int64_t v4 = v9;
            uint64_t result = specialized MutableCollection.swapAt(_:_:)(v6, --v3);
            goto LABEL_5;
          }
          int64_t v8 = v3 - 2;
          --v3;
          if (v6 >= v8) {
            return v6;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v6 >= v3) {
        return v6;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(long long *))
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t PartCount = DRMeshGetPartCount();
  if (PartCount < 1) {
    return 0;
  }
  uint64_t v3 = PartCount;
  uint64_t v4 = 0;
  uint64_t v5 = &v25;
  uint64_t v6 = (char *)&v25 + 8;
  int64_t v7 = &v26;
  long long v8 = xmmword_22832C800;
  long long v9 = xmmword_22831FD10;
  long long v10 = xmmword_22831FD20;
  int64_t v11 = &v27;
  do
  {
    long long v24 = 0uLL;
    long long v25 = v8;
    long long v26 = v9;
    long long v27 = v10;
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    uint64_t v16 = v11;
    DRMeshGetPartAt();
    char v17 = a1(&v24);
    if (v1) {
      break;
    }
    if (v17)
    {
      --v3;
      uint64_t v18 = DRMeshGetPartCount();
      if (v3 < 0 || v3 >= v18) {
LABEL_19:
      }
        __break(1u);
      if (v12 >= v3) {
        return v12;
      }
      while (1)
      {
        long long v24 = 0uLL;
        long long v25 = xmmword_22832C800;
        long long v26 = xmmword_22831FD10;
        long long v27 = xmmword_22831FD20;
        DRMeshGetPartAt();
        char v19 = a1(&v24);
        if ((v19 & 1) == 0) {
          break;
        }
        uint64_t v20 = DRMeshGetPartCount();
        uint64_t v21 = v3 - 1;
        if (v3 < 1 || v3 > v20)
        {
          __break(1u);
          goto LABEL_19;
        }
        --v3;
        if (v12 >= v21) {
          return v12;
        }
      }
      specialized MutableCollection.swapAt(_:_:)(v12, v3);
    }
    uint64_t v4 = v12 + 1;
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    int64_t v7 = v15;
    long long v9 = xmmword_22831FD10;
    long long v8 = xmmword_22832C800;
    long long v10 = xmmword_22831FD20;
    int64_t v11 = v16;
  }
  while (v12 + 1 < v3);
  return v4;
}

int64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(long long *))
{
  int64_t v3 = *(void *)(*v1 + 16);
  if (!v3) {
    return 0;
  }
  if (one-time initialization token for identity != -1) {
LABEL_18:
  }
    swift_once();
  int64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *v1;
    if ((unint64_t)v5 >= *(void *)(*v1 + 16)) {
      goto LABEL_17;
    }
    int64_t v7 = (_OWORD *)(v6 + 48 * v5);
    long long v8 = v7[3];
    long long v9 = v7[4];
    long long v15 = v7[2];
    long long v16 = v8;
    long long v17 = v9;
    char v10 = a1(&v15);
    if (v2) {
      return v5;
    }
    if (v10) {
      break;
    }
LABEL_6:
    if (++v5 >= v3) {
      return v5;
    }
  }
  if (v5 < v3 - 1)
  {
    int64_t v11 = (long long *)(v6 + 48 * v3--);
    while (v3 < *(void *)(v6 + 16))
    {
      long long v12 = *v11;
      long long v13 = v11[1];
      long long v15 = *(v11 - 1);
      long long v16 = v12;
      long long v17 = v13;
      if ((a1(&v15) & 1) == 0)
      {
        specialized MutableCollection.swapAt(_:_:)(v5, v3);
        goto LABEL_6;
      }
      --v3;
      v11 -= 3;
      if (v5 >= v3) {
        return v5;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return v5;
}

float32x2_t simd_mix(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  return vmla_f32(a1, vsub_f32(a2, a1), a3);
}

double simd_mix(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  *(void *)&double result = vmlaq_f32(a1, vsubq_f32(a2, a1), a3).u64[0];
  return result;
}

double simd_inverse(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, (float32x4_t)xmmword_22831EFE0);
  int8x16_t v2 = (int8x16_t)vmulq_f32(a1, a1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  float32x2_t v3 = vrecpe_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrecps_f32((float32x2_t)v2.u32[0], v3));
  *(void *)&double result = vmulq_n_f32(v1, vmul_f32(v4, vrecps_f32((float32x2_t)v2.u32[0], v4)).f32[0]).u64[0];
  return result;
}

double simd_mul(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vnegq_f32(a2);
  int8x16_t v3 = (int8x16_t)vtrn2q_s32((int32x4_t)a2, vtrn1q_s32((int32x4_t)a2, v2));
  float32x4_t v4 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a2, (int8x16_t)v2, 8uLL), *(float32x2_t *)a1.f32, 1), (float32x4_t)vextq_s8(v3, v3, 8uLL), a1.f32[0]);
  float32x4_t v5 = (float32x4_t)vrev64q_s32((int32x4_t)a2);
  v5.i32[0] = v2.i32[1];
  v5.i32[3] = v2.i32[2];
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a2, a1, 3), v5, a1, 2), v4).u64[0];
  return result;
}

uint64_t specialized BidirectionalCollection.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized TimelineDefinition.__allocating_init(_:)(uint64_t a1)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  if (!a1)
  {
    uint64_t v4 = 0;
LABEL_8:
    *(void *)(v2 + 16) = v4;
    return v2;
  }
  swift_retain();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline) {
      goto LABEL_7;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
LABEL_7:
      uint64_t v4 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      goto LABEL_8;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v7 = 0;
    while (result - a3 + v7)
    {
      uint64_t v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2) {
        return v8;
      }
    }
    return 0;
  }
  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      unint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v9 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v9 = 4;
      }
      unint64_t v5 = v4 - v9;
      int64x2_t v10 = 0uLL;
      v11.i64[0] = 0;
      v11.i64[1] = result;
      int64x2_t v12 = vdupq_n_s64(1uLL);
      unint64_t v13 = v5;
      do
      {
        int64x2_t v10 = vaddq_s64(v10, v12);
        int64x2_t v11 = vaddq_s64(v11, v12);
        v13 -= 4;
      }
      while (v13);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip1q_s64(v11, v10), vzip2q_s64(v11, v10)));
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v15 = v5 + result - a3;
    unint64_t v16 = a2 - v5;
    uint64_t result = v6;
    while (v15)
    {
      if (!v14) {
        goto LABEL_27;
      }
      ++result;
      ++v14;
      ++v15;
      if (!--v16) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

double simd_mul(simd_float4x4 a1, simd_float4x4 a2)
{
  uint64_t v2 = 0;
  v4[2] = a2.columns[2];
  v4[3] = a2.columns[3];
  memset(v5, 0, sizeof(v5));
  do
  {
    v5[v2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1.columns[0], COERCE_FLOAT(v4[v2])), (float32x4_t)a1.columns[1], *(float32x2_t *)&v4[v2], 1), (float32x4_t)a1.columns[2], (float32x4_t)v4[v2], 2), (float32x4_t)a1.columns[3], (float32x4_t)v4[v2], 3);
    ++v2;
  }
  while (v2 != 4);
  return *(double *)v5;
}

unint64_t lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Float] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<JointTransforms>, (void (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>, (void (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>, (void (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<JointTransforms> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<JointTransforms>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<JointTransforms> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<JointTransforms>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeights> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeights>, (void (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>, (void (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>, (void (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeights> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeights>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<BlendShapeWeights> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<BlendShapeWeights>);
}

uint64_t sub_22814A97C()
{
  return 0;
}

uint64_t sub_22814A98C@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)result + 16))
  {
    *a3 = *(_DWORD *)(*(void *)result + 4 * v3 + 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_22814A9C0()
{
  return 0;
}

ValueMetadata *type metadata accessor for AnimationFillMode()
{
  return &type metadata for AnimationFillMode;
}

uint64_t dispatch thunk of AnimatableData.__rk_animationIdentity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnimatableData.__rk_animationInverse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnimatableData.__rk_combineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnimatableData.__rk_invertAndCombineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnimatableData.__rk_animationInterpolation(towards:t:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

ValueMetadata *type metadata accessor for JointTransforms()
{
  return &type metadata for JointTransforms;
}

ValueMetadata *type metadata accessor for BlendShapeWeights()
{
  return &type metadata for BlendShapeWeights;
}

uint64_t type metadata accessor for TimelineDefinition()
{
  return self;
}

uint64_t dispatch thunk of AnimationDefinition.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnimationDefinition.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnimationDefinition.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 112))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 136))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 160))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 240))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 256))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t dispatch thunk of AnimationDefinition.duration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t destroy for TimelineBaseProperties(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  }

  return swift_release();
}

uint64_t initializeWithCopy for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 16);
  int v5 = (long long *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(unsigned char *)(a2 + 32));
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(unsigned char *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    char v14 = *(unsigned char *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 32) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(unsigned char *)(a2 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  int v16 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  int v5 = (_OWORD *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 255) {
    goto LABEL_5;
  }
  int v7 = *(unsigned __int8 *)(a2 + 32);
  if (v7 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *v5;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *v5;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of BindTarget(v8, v9, v6);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBaseProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimelineBaseProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimelineBaseProperties()
{
  return &type metadata for TimelineBaseProperties;
}

ValueMetadata *type metadata accessor for TimelineClipProperties()
{
  return &type metadata for TimelineClipProperties;
}

void *type metadata accessor for BlendShapeWeights.CodingKeys()
{
  return &unk_26DCAD508;
}

unsigned char *storeEnumTagSinglePayload for BlendShapeWeights.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22814B1F4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for JointTransforms.CodingKeys()
{
  return &type metadata for JointTransforms.CodingKeys;
}

uint64_t destroy for InvalidAnimationDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 40);

  return outlined consume of BindTarget(v2, v3, v4);
}

uint64_t initializeWithCopy for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget(v5, v6, v7);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  return a1;
}

uint64_t assignWithCopy for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 40);
  outlined copy of BindTarget(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of BindTarget(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  uint64_t v11 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy117_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 109) = *(void *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of BindTarget(v6, v7, v8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidAnimationDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 117)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidAnimationDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 117) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 117) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidAnimationDefinition()
{
  return &type metadata for InvalidAnimationDefinition;
}

uint64_t __REAssetBundle.__resource<A>(ofType:identifier:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (AssetHandle)
  {
    type metadata accessor for __REAsset();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = AssetHandle;
    type metadata accessor for __RERenderGraphEmitter();
    if (swift_dynamicCastMetatype())
    {
      *(void *)(swift_allocObject() + 16) = v8;
      int v9 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v9 ^ 1u, 1, a1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
      return swift_release();
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    return v11(a2, 1, 1, a1);
  }
}

uint64_t __REAssetBundle.resource<A>(ofType:identifier:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return __REAssetBundle.__resource<A>(ofType:identifier:)(a1, a2);
}

uint64_t __REAssetBundle.__renderGraphEmitter(identifier:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  uint64_t result = 0;
  if (AssetHandle)
  {
    type metadata accessor for __REAsset();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = AssetHandle;
    type metadata accessor for __RERenderGraphEmitter();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
  }
  return result;
}

uint64_t AnimationPlaybackController.time.setter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentSetCurrentPlaybackTime();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.setParent(parent:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass)
    {
      uint64_t v5 = ComponentByClass;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v7 = *(void *)(Strong + 16);
        swift_release();
        MEMORY[0x22A68B7E0](v5, *(void *)(v1 + 16), v7, *(void *)(a1 + 16));
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.__allocating_init(entity:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  *(void *)(v3 + 16) = a2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v3;
}

uint64_t AnimationPlaybackController.isPaused.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x263F36DC8]);
}

uint64_t AnimationPlaybackController.isComplete.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x263F36DC0]);
}

uint64_t AnimationPlaybackController.init(entity:identifier:)(uint64_t a1, uint64_t a2)
{
  swift_weakInit();
  *(void *)(v2 + 16) = a2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v2;
}

uint64_t AnimationPlaybackController.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Hasher._combine(_:)(*(void *)(result + 16));
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AnimationPlaybackController.pause()()
{
}

Swift::Void __swiftcall AnimationPlaybackController.resume()()
{
}

Swift::Void __swiftcall AnimationPlaybackController.stop()()
{
}

uint64_t AnimationPlaybackController.pause()(void (*a1)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      a1();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.deinit()
{
  swift_weakDestroy();
  return v0;
}

uint64_t AnimationPlaybackController.__deallocating_deinit()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

Swift::Int AnimationPlaybackController.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Hasher._combine(_:)(*(void *)(Strong + 16));
    swift_release();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationPlaybackController()
{
  return AnimationPlaybackController.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnimationPlaybackController()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Hasher._combine(_:)(*(void *)(result + 16));
    return swift_release();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationPlaybackController()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Hasher._combine(_:)(*(void *)(Strong + 16));
    swift_release();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPlaybackController(uint64_t *a1, uint64_t *a2)
{
  return specialized static AnimationPlaybackController.== infix(_:_:)(*a1, *a2);
}

uint64_t AnimationPlaybackController.isValid.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x263F36DD8]);
}

uint64_t AnimationPlaybackController.isPlaying.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x263F36DD0]);
}

uint64_t AnimationPlaybackController.isStopped.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x263F36DC0]);
}

uint64_t AnimationPlaybackController.isPaused.getter(uint64_t (*a1)(uint64_t, void))
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  REAnimationComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass) {
    uint64_t v4 = a1(ComponentByClass, *(void *)(v1 + 16));
  }
  else {
    uint64_t v4 = 0;
  }
  swift_release();
  return v4;
}

float AnimationPlaybackController.speed.getter()
{
  return AnimationPlaybackController.speed.getter(MEMORY[0x263F36DB8]);
}

uint64_t AnimationPlaybackController.speed.setter(float a1)
{
  return AnimationPlaybackController.speed.setter(MEMORY[0x263F36DF8], a1);
}

void (*AnimationPlaybackController.speed.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = (float *)(v3 + 32);
  *((void *)v3 + 3) = v1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    float v5 = 1.0;
    if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
    {
      REAnimationComponentGetPlaybackSpeed();
      float v5 = v6;
    }
    swift_release();
  }
  else
  {
    float v5 = 1.0;
  }
  *uint64_t v4 = v5;
  return AnimationPlaybackController.speed.modify;
}

void AnimationPlaybackController.speed.modify(uint64_t a1, uint64_t a2)
{
}

double AnimationPlaybackController.time.getter()
{
  swift_beginAccess();
  double v0 = 0.0;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass() && (REAnimationComponentIsValid() & 1) != 0)
    {
      REAnimationComponentGetCurrentPlaybackTime();
      double v0 = v1;
      swift_release();
      if ((~*(void *)&v0 & 0x7FF0000000000000) == 0 && (*(void *)&v0 & 0xFFFFFFFFFFFFFLL) != 0) {
        return 0.0;
      }
    }
    else
    {
      swift_release();
    }
  }
  return v0;
}

void (*AnimationPlaybackController.time.modify(void *a1))(void **a1)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = (double *)(v3 + 24);
  *((void *)v3 + 4) = v1;
  swift_beginAccess();
  double v5 = 0.0;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass() && (REAnimationComponentIsValid() & 1) != 0)
    {
      REAnimationComponentGetCurrentPlaybackTime();
      double v5 = v6;
      swift_release();
      if ((~*(void *)&v5 & 0x7FF0000000000000) == 0 && (*(void *)&v5 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v5 = 0.0;
      }
    }
    else
    {
      swift_release();
    }
  }
  *uint64_t v4 = v5;
  return AnimationPlaybackController.time.modify;
}

void AnimationPlaybackController.time.modify(void **a1)
{
  uint64_t v1 = *a1;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentSetCurrentPlaybackTime();
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }

  free(v1);
}

float AnimationPlaybackController.blendFactor.getter()
{
  return AnimationPlaybackController.speed.getter(MEMORY[0x263F36DB0]);
}

float AnimationPlaybackController.speed.getter(float (*a1)(uint64_t, void))
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 1.0;
  }
  REAnimationComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  float v4 = 1.0;
  if (ComponentByClass)
  {
    uint64_t v5 = ComponentByClass;
    if (REAnimationComponentIsValid()) {
      float v4 = a1(v5, *(void *)(v1 + 16));
    }
  }
  swift_release();
  return v4;
}

uint64_t AnimationPlaybackController.blendFactor.setter(float a1)
{
  return AnimationPlaybackController.speed.setter(MEMORY[0x263F36DF0], a1);
}

uint64_t AnimationPlaybackController.speed.setter(void (*a1)(float), float a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      a1(a2);
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

void (*AnimationPlaybackController.blendFactor.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  float v4 = (float *)(v3 + 32);
  *((void *)v3 + 3) = v1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    float v5 = 1.0;
    if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
    {
      REAnimationComponentGetBlendFactor();
      float v5 = v6;
    }
    swift_release();
  }
  else
  {
    float v5 = 1.0;
  }
  *float v4 = v5;
  return AnimationPlaybackController.blendFactor.modify;
}

void AnimationPlaybackController.blendFactor.modify(uint64_t a1, uint64_t a2)
{
}

void AnimationPlaybackController.speed.modify(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void, float))
{
  float v4 = *(void **)a1;
  float v5 = *(float *)(*(void *)a1 + 32);
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass)
    {
      a3(ComponentByClass, *(void *)(v4[3] + 16), v5);
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }

  free(v4);
}

double AnimationPlaybackController.duration.getter()
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0.0;
  }
  REAnimationComponentGetComponentType();
  double v0 = 0.0;
  if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
  {
    REAnimationComponentGetDuration();
    double v0 = v1;
  }
  swift_release();
  return v0;
}

CMTimebaseRef AnimationPlaybackController.clock.getter()
{
  timebaseOut[1] = *(CMTimebaseRef *)MEMORY[0x263EF8340];
  timebaseOut[0] = 0;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  double v1 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v0, v1, timebaseOut);

  CMTimebaseRef v2 = timebaseOut[0];
  swift_beginAccess();
  CMTimebaseRef result = (CMTimebaseRef)swift_weakLoadStrong();
  if (!result) {
    goto LABEL_9;
  }
  if (!REEntityGetComponent())
  {
    CMTimebaseRef result = (CMTimebaseRef)swift_release();
LABEL_9:
    if (v2) {
      return v2;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((REAnimationComponentIsValid() & 1) == 0)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    CMTimebaseRef result = (CMTimebaseRef)MEMORY[0x22A692210](ServiceLocator);
    if (result)
    {
      id v6 = (id)REAnimationServiceGetRootTimebase();

      swift_release();
      return (CMTimebaseRef)v6;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  CMTimebaseRef result = (CMTimebaseRef)(id)REAnimationComponentGetAnimationParentTimebase();
  float v4 = result;
  if (!result)
  {
    if (v2)
    {
      float v4 = v2;
      goto LABEL_7;
    }
LABEL_16:
    __break(1u);
    return result;
  }
LABEL_7:
  swift_release();

  return v4;
}

uint64_t AnimationPlaybackController.clock.setter()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (REEntityGetComponent() && REAnimationComponentIsValid())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      id v0 = (id)swift_dynamicCastUnknownClassUnconditional();
      REAnimationComponentSetAnimationParentTimebase();
    }
    swift_release();
  }
  return swift_unknownObjectRelease();
}

uint64_t (*AnimationPlaybackController.clock.modify(CMTimebaseRef *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = AnimationPlaybackController.clock.getter();
  return AnimationPlaybackController.clock.modify;
}

uint64_t AnimationPlaybackController.clock.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return AnimationPlaybackController.clock.setter();
  }
  swift_unknownObjectRetain();
  AnimationPlaybackController.clock.setter();

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall AnimationPlaybackController.stop(blendOutDuration:)(Swift::Double blendOutDuration)
{
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentStopAnimationWithTime();
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }
}

BOOL specialized static AnimationPlaybackController.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_beginAccess();
  uint64_t v3 = swift_weakLoadStrong();
  if (Strong)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(Strong + 16);
      uint64_t v5 = *(void *)(v3 + 16);
      swift_release();
      swift_release();
      return v4 == v5;
    }
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    swift_release();
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AnimationPlaybackController and conformance AnimationPlaybackController()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController;
  if (!lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController)
  {
    type metadata accessor for AnimationPlaybackController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController);
  }
  return result;
}

uint64_t type metadata accessor for AnimationPlaybackController()
{
  return self;
}

uint64_t sub_22814CDFC@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_22814CE4C()
{
  return swift_weakAssign();
}

void sub_22814CE9C(float *a1@<X8>)
{
  *a1 = AnimationPlaybackController.speed.getter();
}

uint64_t sub_22814CEC8(float *a1)
{
  return AnimationPlaybackController.speed.setter(*a1);
}

void sub_22814CEF0(double *a1@<X8>)
{
  *a1 = AnimationPlaybackController.time.getter();
}

uint64_t sub_22814CF1C()
{
  return AnimationPlaybackController.time.setter();
}

void sub_22814CF44(float *a1@<X8>)
{
  *a1 = AnimationPlaybackController.blendFactor.getter();
}

uint64_t sub_22814CF70(float *a1)
{
  return AnimationPlaybackController.blendFactor.setter(*a1);
}

CMTimebaseRef sub_22814CF98@<X0>(CMTimebaseRef *a1@<X8>)
{
  CMTimebaseRef result = AnimationPlaybackController.clock.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22814CFC4()
{
  return AnimationPlaybackController.clock.setter();
}

uint64_t method lookup function for AnimationPlaybackController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnimationPlaybackController);
}

uint64_t dispatch thunk of AnimationPlaybackController.__identifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AnimationPlaybackController.entity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AnimationPlaybackController.isPaused.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AnimationPlaybackController.isComplete.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AnimationPlaybackController.__allocating_init(entity:identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of AnimationPlaybackController.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of AnimationPlaybackController.pause()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of AnimationPlaybackController.resume()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of AnimationPlaybackController.stop()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of AnimationPlaybackController.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestLoadable.enforceResourceSharingBeforeECSCommits()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v2, v4);
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
}

uint64_t RequestLoadable.awaitForResourceSharing()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](RequestLoadable.awaitForResourceSharing(), 0, 0);
}

uint64_t RequestLoadable.awaitForResourceSharing()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 56) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v2 + 32));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_1, v1);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *(void *)(v4 + 16) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  uint64_t v6 = MEMORY[0x263F8EE60];
  v5[1] = RequestLoadable.awaitForResourceSharing();
  return MEMORY[0x270FA2360](v5, 0, 0, 0xD00000000000001BLL, 0x800000022834FB40, partial apply for closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:), v4, v6 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = RequestLoadable.awaitForResourceSharing();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = RequestLoadable.awaitForResourceSharing();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void one-time initialization function for usdExtensions()
{
  static LoadUtilities.usdExtensions = (uint64_t)&outlined read-only object #0 of one-time initialization function for usdExtensions;
}

uint64_t static LoadUtilities.getURL(name:in:allowingExtensions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, char *a5@<X8>)
{
  id v60 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v54 - v13;
  uint64_t v61 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  v56 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v57 = (char *)&v54 - v18;
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v23 = (void *)MEMORY[0x22A688A50](a1, a2, v20);
  id v24 = objc_msgSend(v23, sel_pathExtension);

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  LOBYTE(v24) = specialized Sequence<>.contains(_:)(v25, v27, a4);
  swift_bridgeObjectRelease();
  if (v24)
  {
    uint64_t v28 = (void *)MEMORY[0x22A688A50](v58, v59);
    id v29 = objc_msgSend(v60, sel_URLForResource_withExtension_, v28, 0);

    if (v29)
    {
      v55 = v22;
      long long v30 = v57;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      long long v31 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      uint64_t v32 = v61;
      v31(v14, v30, v61);
      uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
      v33(v14, 0, 1, v32);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v32) != 1)
      {
        uint64_t v34 = v55;
        uint64_t v35 = v61;
        v31(v55, v14, v61);
        v31(a5, v34, v35);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v33)(a5, 0, 1, v35);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, 1, 1, v61);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v37 = a4[2];
  if (!v37) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(a5, 1, 1, v61);
  }
  v55 = a5;
  v38 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  v54 = a4;
  v41 = a4 + 5;
  do
  {
    uint64_t v44 = *(v41 - 1);
    uint64_t v43 = *v41;
    swift_bridgeObjectRetain();
    v45 = (void *)MEMORY[0x22A688A50](v58, v59);
    v46 = (void *)MEMORY[0x22A688A50](v44, v43);
    swift_bridgeObjectRelease();
    id v47 = objc_msgSend(v60, sel_URLForResource_withExtension_, v45, v46, v54);

    if (v47)
    {
      v48 = v57;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v49 = *v38;
      uint64_t v50 = v61;
      (*v38)(v11, v48, v61);
      v42 = *v39;
      (*v39)(v11, 0, 1, v50);
      if ((*v40)(v11, 1, v50) != 1)
      {
        swift_bridgeObjectRelease();
        v51 = v56;
        uint64_t v52 = v61;
        v49(v56, v11, v61);
        v53 = v55;
        v49(v55, v51, v52);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v42)(v53, 0, 1, v52);
      }
    }
    else
    {
      v42 = *v39;
      (*v39)(v11, 1, 1, v61);
    }
    v41 += 2;
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    --v37;
  }
  while (v37);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v42)(v55, 1, 1, v61);
}

uint64_t static LoadUtilities.getURL(name:in:typeExtension:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = (void *)MEMORY[0x22A688A50](a1, a2, v15);
  id v19 = objc_msgSend(v18, sel_pathExtension);

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20 == a4 && v22 == a5)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    id v29 = (void *)MEMORY[0x22A688A50](a1, a2);
    id v30 = objc_msgSend(a3, sel_URLForResource_withExtension_, v29, 0);

    if (v30)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v17, 0, 1, v31);
    }
    else
    {
      uint64_t v32 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v17, 1, 1, v32);
    }
    return outlined init with take of URL?((uint64_t)v17, v36);
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_9;
  }
  uint64_t v25 = (void *)MEMORY[0x22A688A50](a1, a2);
  uint64_t v26 = (void *)MEMORY[0x22A688A50](a4, a5);
  id v27 = objc_msgSend(a3, sel_URLForResource_withExtension_, v25, v26);

  if (v27)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 0, 1, v28);
  }
  else
  {
    uint64_t v33 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v13, 1, 1, v33);
  }
  uint64_t v17 = v13;
  return outlined init with take of URL?((uint64_t)v17, v36);
}

uint64_t static LoadUtilities.getURLForRealityFile(withScene:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __n128 v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000, v12);
  id v16 = objc_msgSend(a3, sel_URLsForResourcesWithExtension_subdirectory_, v15, 0);

  if (!v16)
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    return v28(a4, 1, 1, v27);
  }
  uint64_t v84 = a4;
  v86 = v14;
  uint64_t v96 = a1;
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v18 + 120, (uint64_t)&v100);
  uint64_t v19 = v102;
  uint64_t v20 = v103;
  __swift_project_boxed_opaque_existential_1(&v100, v102);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 32);
  swift_retain();
  uint64_t v22 = v17;
  uint64_t v23 = v21(v19, v20);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
  uint64_t v85 = *(void *)(v17 + 16);
  if (!v85)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v86, 1, 1, v7);
LABEL_8:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v84, 1, 1, v29);
  }
  unint64_t v25 = 0;
  unint64_t v91 = v17 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v93 = v8 + 16;
  v88 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v89 = v8 + 48;
  v87 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v90 = v8 + 56;
  v74[1] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v26 = v86;
  uint64_t v82 = v7;
  v81 = v10;
  uint64_t v80 = v18;
  uint64_t v75 = v8;
  uint64_t v79 = v23;
  while (1)
  {
    if (v25 >= *(void *)(v22 + 16)) {
      goto LABEL_69;
    }
    id v30 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v30(v26, v91 + *(void *)(v8 + 72) * v25, v7);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v31(v26, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v26, 1, v7) == 1) {
      goto LABEL_8;
    }
    v78 = v31;
    unint64_t v92 = v25;
    (*v88)(v10, v26, v7);
    URL._bridgeToObjectiveC()(v32);
    uint64_t v34 = v33;
    uint64_t v35 = RERealityFileMountFileAtURL();

    if (!v35) {
      goto LABEL_11;
    }
    uint64_t v99 = v35;
    uint64_t result = RERealityFileGetAssetDescriptorCount();
    if (result < 0) {
      goto LABEL_70;
    }
    uint64_t v36 = result;
    v77 = (void (*)(uint64_t, char *, uint64_t))v30;
    if (result)
    {
      uint64_t v37 = 0;
      v38 = (void *)MEMORY[0x263F8EE78];
      uint64_t v39 = v96;
      do
      {
        uint64_t result = RERealityFileGetAssetDescriptorAtIndex();
        if (result)
        {
          uint64_t result = RERealityFileAssetDescriptorAsSceneDescriptor();
          if (result)
          {
            uint64_t v40 = result;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
              v38 = (void *)result;
            }
            unint64_t v42 = v38[2];
            unint64_t v41 = v38[3];
            if (v42 >= v41 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v38);
              v38 = (void *)result;
            }
            v38[2] = v42 + 1;
            v38[v42 + 4] = v40;
          }
        }
        ++v37;
      }
      while (v36 != v37);
    }
    else
    {
      v38 = (void *)MEMORY[0x263F8EE78];
      uint64_t v39 = v96;
    }
    uint64_t v43 = v38[2];
    if (v43) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_10:
    RERealityFileUnmount();
    uint64_t v7 = v82;
    uint64_t v10 = v81;
    uint64_t v8 = v75;
LABEL_11:
    unint64_t v25 = v92 + 1;
    uint64_t result = (*v87)(v10, v7);
    if (v25 == v85)
    {
      v78(v26, 1, 1, v7);
      goto LABEL_8;
    }
  }
  unint64_t v44 = 0;
  unint64_t v45 = v97;
  uint64_t v94 = v22;
  uint64_t v76 = v43;
  v83 = v38 + 4;
  while (1)
  {
    if (v44 >= v38[2]) {
      goto LABEL_68;
    }
    if (RESceneDescriptorGetSceneName())
    {
      uint64_t v46 = String.init(cString:)();
      unint64_t v48 = v47;
      if (v46 != v39) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v46 = 0;
      unint64_t v48 = 0xE000000000000000;
      if (v39) {
        goto LABEL_37;
      }
    }
    if (v48 == v45)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = v84;
      unint64_t v67 = v45;
      goto LABEL_63;
    }
LABEL_37:
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v46;
      unint64_t v67 = v48;
      goto LABEL_62;
    }
    if (one-time initialization token for usdExtensions != -1) {
      swift_once();
    }
    v49 = (void *)static LoadUtilities.usdExtensions;
    uint64_t v98 = *(void *)(static LoadUtilities.usdExtensions + 16);
    if (v98) {
      break;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_30:
    ++v44;
    uint64_t v22 = v94;
    if (v44 == v43)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v86;
      goto LABEL_10;
    }
  }
  unint64_t v95 = v48;
  uint64_t v51 = *(void *)(static LoadUtilities.usdExtensions + 32);
  uint64_t v50 = *(void **)(static LoadUtilities.usdExtensions + 40);
  uint64_t v100 = v39;
  uint64_t v101 = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v52._countAndFlagsBits = 46;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = v51;
  v53._object = v50;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  unint64_t v54 = v95;
  swift_bridgeObjectRelease();
  uint64_t v56 = v100;
  unint64_t v55 = v101;
  if (v46 == v100 && v54 == v101) {
    goto LABEL_59;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  if (v98 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v96;
    unint64_t v45 = v97;
    goto LABEL_30;
  }
  uint64_t result = v97;
  if (v49[2] < 2uLL) {
    goto LABEL_71;
  }
  uint64_t v57 = v49[6];
  uint64_t v58 = (void *)v49[7];
  uint64_t v100 = v96;
  uint64_t v101 = v97;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v59._countAndFlagsBits = 46;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = v57;
  unint64_t v54 = v95;
  v60._object = v58;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v56 = v100;
  unint64_t v55 = v101;
  if (v46 == v100 && v54 == v101)
  {
LABEL_59:
    unint64_t v55 = v54;
    goto LABEL_61;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_60:
    uint64_t v46 = v56;
LABEL_61:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v46;
    unint64_t v67 = v55;
LABEL_62:
    uint64_t v68 = v84;
LABEL_63:
    v69 = v87;
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    v71 = (uint64_t *)(v68 + *(int *)(v70 + 48));
    v72 = v81;
    uint64_t v73 = v82;
    v77(v68, v81, v82);
    uint64_t *v71 = v39;
    v71[1] = v67;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v68, 0, 1, v70);
    RERealityFileUnmount();
    swift_release();
    return (*v69)(v72, v73);
  }
  swift_bridgeObjectRelease();
  if (v98 == 2)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v96;
    unint64_t v45 = v97;
    uint64_t v43 = v76;
    goto LABEL_30;
  }
  uint64_t v61 = (void **)(v49 + 9);
  unint64_t v62 = 2;
  while (1)
  {
    uint64_t result = v97;
    if (v62 >= v49[2]) {
      break;
    }
    uint64_t v64 = (uint64_t)*(v61 - 1);
    v63 = *v61;
    uint64_t v100 = v96;
    uint64_t v101 = v97;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits = 46;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    swift_bridgeObjectRetain();
    v66._countAndFlagsBits = v64;
    v66._object = v63;
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    unint64_t v54 = v95;
    swift_bridgeObjectRelease();
    uint64_t v56 = v100;
    unint64_t v55 = v101;
    if (v46 == v100 && v54 == v101) {
      goto LABEL_59;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_60;
    }
    ++v62;
    swift_bridgeObjectRelease();
    v61 += 2;
    if (v98 == v62) {
      goto LABEL_57;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

uint64_t NetworkSendBlockingCategory.supportsResourceSharingBeforeECSCommits.getter()
{
  unsigned __int8 v1 = *v0;
  if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1) {
    swift_once();
  }
  uint64_t v2 = static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits;

  return specialized Set.contains(_:)(v1, v2);
}

RealityFoundation::NetworkSendBlockingCategory_optional __swiftcall NetworkSendBlockingCategory.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NetworkSendBlockingCategory.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 10;
  if (v5 < 0xA) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static NetworkSendBlockingCategory.allCases.getter()
{
  return &outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter;
}

unint64_t NetworkSendBlockingCategory.rawValue.getter()
{
  unint64_t result = 0x6F6974616D696E61;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F69647561;
      break;
    case 2:
      unint64_t result = 0x6D6E6F7269766E65;
      break;
    case 3:
      unint64_t result = 0x4D6E49746C697562;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 1752393069;
      break;
    case 6:
      unint64_t result = 0x73636973796870;
      break;
    case 7:
      unint64_t result = 0x65727574786574;
      break;
    case 8:
      unint64_t result = 0x6F4C797469746E65;
      break;
    case 9:
      unint64_t result = 0x6F65646976;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NetworkSendBlockingCategory(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

RealityFoundation::NetworkSendBlockingCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkSendBlockingCategory(Swift::String *a1)
{
  return NetworkSendBlockingCategory.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NetworkSendBlockingCategory@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = NetworkSendBlockingCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkSendBlockingCategory()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NetworkSendBlockingCategory()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkSendBlockingCategory()
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance NetworkSendBlockingCategory(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter;
}

uint64_t one-time initialization function for $clientIsOptingOutOfFlickerMitigations()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<Bool>);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  static RequestLoadableUtilities.$clientIsOptingOutOfFlickerMitigations = result;
  return result;
}

uint64_t one-time initialization function for categoriesSupportingResourceSharingBeforeECSCommits()
{
  uint64_t result = closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits();
  static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  unsigned __int8 v1 = (void *)MEMORY[0x22A688A50](0xD000000000000030, 0x800000022835A5A0);
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (!v2) {
    goto LABEL_6;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v7, v8);
  outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_6:
    uint64_t v4 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter, 0xD000000000000030, 0x800000022835A5A0);
    uint64_t v3 = specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    return v3;
  }
  if (v6 == 1)
  {
    uint64_t v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return MEMORY[0x263F8EE88];
  }
  return v3;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  id v6 = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)&v16[0] = a2;
  *((void *)&v16[0] + 1) = a3;
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 46;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  unint64_t v8 = 0xE90000000000006ELL;
  unint64_t v9 = 0x6F6974616D696E61;
  switch(v5)
  {
    case 1:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v10 = 1768191329;
      goto LABEL_11;
    case 2:
      unint64_t v8 = 0xEB00000000746E65;
      unint64_t v9 = 0x6D6E6F7269766E65;
      break;
    case 3:
      unint64_t v8 = 0xEF6C616972657461;
      unint64_t v9 = 0x4D6E49746C697562;
      break;
    case 4:
      unint64_t v8 = 0x800000022834DC30;
      unint64_t v9 = 0xD000000000000013;
      break;
    case 5:
      unint64_t v8 = 0xE400000000000000;
      unint64_t v9 = 1752393069;
      break;
    case 6:
      unint64_t v8 = 0xE700000000000000;
      unint64_t v9 = 0x73636973796870;
      break;
    case 7:
      unint64_t v8 = 0xE700000000000000;
      unint64_t v9 = 0x65727574786574;
      break;
    case 8:
      unint64_t v8 = 0xEA00000000006461;
      unint64_t v9 = 0x6F4C797469746E65;
      break;
    case 9:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v10 = 1701079414;
LABEL_11:
      unint64_t v9 = v10 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
      break;
    default:
      break;
  }
  unint64_t v11 = v8;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  __n128 v12 = (void *)MEMORY[0x22A688A50](*(void *)&v16[0], *((void *)&v16[0] + 1));
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v6, sel_objectForKey_, v12);

  if (v13
    && (_bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        outlined init with take of Any(v15, v16),
        outlined init with take of Any(v16, v15),
        (swift_dynamicCast() & 1) != 0))
  {
    return v17;
  }
  else
  {
    return 1;
  }
}

void closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)()
{
  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_49_0;
  id v0 = _Block_copy(aBlock);
  unsigned __int8 v1 = _Block_copy(v0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  _OWORD v4[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v4[5] = v2;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v4[3] = &block_descriptor_56;
  uint64_t v3 = _Block_copy(v4);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v3);
  _Block_release(v0);
}

uint64_t closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v30);
  uint64_t v10 = v31;
  uint64_t v11 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11)) {
    char v12 = 0;
  }
  else {
    char v12 = 3;
  }
  outlined init with copy of __REAssetService((uint64_t)v30, (uint64_t)aBlock);
  LOBYTE(v28[0]) = v12;
  uint64_t v13 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(aBlock);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v15 + ((v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = partial apply for closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_32;
  id v16 = _Block_copy(aBlock);
  unsigned __int8 v17 = _Block_copy(v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  v28[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v28[5] = v18;
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 1107296256;
  v28[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v28[3] = &block_descriptor_22;
  uint64_t v19 = _Block_copy(v28);
  swift_retain_n();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v19);
  _Block_release(v16);
  swift_release();
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v21 = v27;
  swift_bridgeObjectRetain();
  uint64_t v22 = static MainActor.shared.getter();
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v24 = MEMORY[0x263F8F500];
  v23[2] = v22;
  v23[3] = v24;
  v23[4] = v21;
  v23[5] = v13;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:), (uint64_t)v23);
  swift_release();
  swift_release_n();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

void closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(char a1)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
LABEL_12:
    aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_29;
    uint64_t v6 = _Block_copy(aBlock);
    uint64_t v7 = _Block_copy(v6);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    v10[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v10[5] = v8;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v10[3] = &block_descriptor_36_0;
    uint64_t v9 = _Block_copy(v10);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v9);
    _Block_release(v6);
    return;
  }
  RequestCopyError = (__CFError *)REAssetLoadRequestCopyError();
  if (RequestCopyError)
  {
    uint64_t v2 = RequestCopyError;
    CFIndex Code = CFErrorGetCode(RequestCopyError);
    if (Code == 300 || Code == 200)
    {
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      uint64_t v4 = swift_allocError();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (Code != 100)
      {
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
        uint64_t v4 = swift_allocError();
        *uint64_t v5 = v2;
        goto LABEL_11;
      }
      type metadata accessor for CancellationError();
      lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
      uint64_t v4 = swift_allocError();
      CancellationError.init()();
    }

LABEL_11:
    aBlock[0] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(throwing:)();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  _OWORD v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:), v7, v6);
}

uint64_t closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)()
{
  uint64_t v1 = v0[2];
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v0[2] + 32);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v4 = v0[3];
      uint64_t v5 = v3[3];
      uint64_t v6 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v5, v6);
      v3 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t withUnsafeOptOutOfFlickerMitigations<A>(_:file:line:)()
{
  if (one-time initialization token for $clientIsOptingOutOfFlickerMitigations != -1) {
    swift_once();
  }
  return TaskLocal.withValue<A>(_:operation:file:line:)();
}

uint64_t LoadRequest<A>.Fulfiller.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t LoadRequest<A>.CancellableHolder.__deallocating_deinit()
{
  outlined destroy of BodyTrackingComponent?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);

  return swift_deallocClassInstance();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = a3;
    unint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x263F8EE78];
    while (v8 < *(void *)(v4 + 16))
    {
      unsigned __int8 v12 = *(unsigned char *)(v4 + v8 + 32);
      unsigned __int8 v14 = v12;
      uint64_t result = closure #1 in closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits(&v14, a2, v6);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v15 = v9;
        if ((result & 1) == 0)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
          uint64_t v9 = v15;
        }
        unint64_t v11 = *(void *)(v9 + 16);
        unint64_t v10 = *(void *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v9 = v15;
        }
        *(void *)(v9 + 16) = v11 + 1;
        *(unsigned char *)(v9 + v11 + 32) = v12;
        uint64_t v6 = a3;
      }
      if (v5 == ++v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v32);
  uint64_t v5 = v33;
  uint64_t v6 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      uint64_t v26 = a1;
      uint64_t v8 = a1 + 32;
      swift_bridgeObjectRetain();
      uint64_t v9 = v7;
      while (1)
      {
        outlined init with copy of __REAssetService(v8, (uint64_t)aBlock);
        if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1) {
          swift_once();
        }
        uint64_t v10 = static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits;
        unint64_t v11 = v29;
        unsigned __int8 v12 = v30;
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v29);
        (*((void (**)(void *__return_ptr, void *, void (*)()))v12 + 1))(v27, v11, v12);
        char v13 = specialized Set.contains(_:)(v27[0], v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        if ((v13 & 1) == 0) {
          break;
        }
        v8 += 40;
        if (!--v9)
        {
          a1 = v26;
          swift_bridgeObjectRelease();
          uint64_t v2 = v1;
          goto LABEL_10;
        }
      }
      a1 = v26;
      swift_bridgeObjectRelease();
      char v14 = 0;
      uint64_t v2 = v1;
    }
    else
    {
LABEL_10:
      if (one-time initialization token for $clientIsOptingOutOfFlickerMitigations != -1) {
        swift_once();
      }
      TaskLocal.get()();
      char v14 = LOBYTE(aBlock[0]) ^ 1;
    }
    char v15 = v14 & 1;
    outlined init with copy of __REAssetService((uint64_t)v32, (uint64_t)aBlock);
    LOBYTE(v27[0]) = v15;
    uint64_t v16 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(aBlock);
    if (!v2)
    {
      uint64_t v17 = v16;
      id v30 = partial apply for closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:);
      uint64_t v31 = v16;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v29 = &block_descriptor_39;
      uint64_t v18 = _Block_copy(aBlock);
      uint64_t v19 = _Block_copy(v18);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      v27[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
      v27[5] = v20;
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 1107296256;
      v27[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      v27[3] = &block_descriptor_46_0;
      uint64_t v21 = _Block_copy(v27);
      swift_retain();
      swift_release();
      REAssetLoadRequestSetCompletionHandler();
      _Block_release(v21);
      _Block_release(v18);
      swift_release();
      if (v7)
      {
        uint64_t v22 = (void *)(a1 + 32);
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v23 = v22[3];
          uint64_t v24 = v22[4];
          __swift_project_boxed_opaque_existential_1(v22, v23);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v17, v23, v24);
          v22 += 5;
          --v7;
        }
        while (v7);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

unint64_t lazy protocol witness table accessor for type [NetworkSendBlockingCategory] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NetworkSendBlockingCategory]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for LoadUtilities()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for NetworkSendBlockingCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228150158);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkSendBlockingCategory()
{
  return &type metadata for NetworkSendBlockingCategory;
}

uint64_t dispatch thunk of RequestLoadable.networkSendBlockingCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RequestLoadable.addToLoadRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for RequestLoadableUtilities()
{
  return self;
}

uint64_t type metadata completion function for LoadRequest<A>.Fulfiller()
{
  return type metadata completion function for LoadRequest<A>.Fulfiller();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadRequest<A>.Fulfiller()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for LoadRequest<A>.CancellableHolder()
{
  return type metadata completion function for LoadRequest<A>.Fulfiller();
}

uint64_t type metadata accessor for LoadRequest<A>.CancellableHolder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(__CFError *a1)
{
  CFIndex Code = CFErrorGetCode(a1);
  if (Code == 300 || Code == 200) {
    goto LABEL_8;
  }
  if (Code != 100)
  {
    if (a1)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v3 = swift_allocError();
      *unsigned int v4 = a1;
      uint64_t v5 = a1;
      return v3;
    }
LABEL_8:
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v3 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    return v3;
  }
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
  uint64_t v3 = swift_allocError();
  CancellationError.init()();
  return v3;
}

uint64_t specialized static LoadUtilities.isUSDPathExtension(pathExtension:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for usdExtensions != -1) {
    swift_once();
  }
  uint64_t v4 = static LoadUtilities.usdExtensions;
  uint64_t v5 = *(void *)(static LoadUtilities.usdExtensions + 16);
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)(static LoadUtilities.usdExtensions + 32) == a1
    && *(void *)(static LoadUtilities.usdExtensions + 40) == a2;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  if (*(void *)(v4 + 48) == a1 && *(void *)(v4 + 56) == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v5 == 2) {
    return 0;
  }
  uint64_t v9 = (void *)(v4 + 72);
  for (uint64_t i = 2; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Entity.LoadError and conformance Entity.LoadError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228150614()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);

  closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1);
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t sub_228150774()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2281507AC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1, v4, v5, v7, v6);
}

void partial apply for closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)()
{
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(ValueMetadata *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a1, 0, a1, a2, a3);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  specialized Entity.ComponentSet.subscript.setter(a1, a2, a3, a4);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

uint64_t Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a4 + 80))(&v19, a3, a4);
  if (a3 == &type metadata for ModelComponent)
  {
    uint64_t Component = REEntityGetComponent();
    if (Component)
    {
      *(void *)&long long v17 = Component;
      static ModelComponent.__fromCore(_:borrowStrongReference:)((uint64_t *)&v17, a2 & 1, (uint64_t *)&v19);
      long long v17 = v19;
      int v18 = v20;
      int v12 = swift_dynamicCast();
      return ((uint64_t (*)(uint64_t, void, uint64_t, ValueMetadata *))off_26DCA6650->storeEnumTagSinglePayload)(a5, v12 ^ 1u, 1, &type metadata for ModelComponent);
    }
    goto LABEL_11;
  }
  if (v19 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a1, a4);
    if (REEntityGetCustomComponent())
    {
      uint64_t result = RECustomComponentGetObject();
      if (!result)
      {
        __break(1u);
        return result;
      }
      (*(void (**)(uint64_t, ValueMetadata *, uint64_t))(a4 + 32))(result, a3, a4);
      goto LABEL_10;
    }
LABEL_11:
    char v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 7);
    uint64_t v15 = a5;
    uint64_t v16 = 1;
    goto LABEL_12;
  }
  uint64_t v13 = REEntityGetComponent();
  if (!v13) {
    goto LABEL_11;
  }
  *(void *)&long long v19 = v13;
  (*(void (**)(long long *, ValueMetadata *, uint64_t))(a4 + 64))(&v19, a3, a4);
LABEL_10:
  char v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 7);
  uint64_t v15 = a5;
  uint64_t v16 = 0;
LABEL_12:

  return v14(v15, v16, 1, a3);
}

uint64_t Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, int a3, ValueMetadata *a4, uint64_t a5)
{
  LODWORD(v35) = a3;
  uint64_t v38 = a1;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - v14;
  Description = (unsigned int (**)(char *, uint64_t, ValueMetadata *))a4[-1].Description;
  MEMORY[0x270FA5388](v17);
  uint64_t v37 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v34 = (char *)&v34 - v20;
  __n128 v22 = MEMORY[0x270FA5388](v21);
  uint64_t v36 = (char *)&v34 - v23;
  uint64_t v24 = *(char **)(*(void *)v5 + 16);
  (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, __n128))(a5 + 80))(v39, a4, a5, v22);
  if (LODWORD(v39[0]) != 36)
  {
    uint64_t result = REComponentClassFromType();
    if (!result) {
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, a2, v9);
    if (Description[6](v15, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return REEntityRemoveComponentByClass();
    }
    uint64_t v31 = v36;
    Description[4](v36, (uint64_t)v15, a4);
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    uint64_t v33 = ComponentByClass;
    if (!ComponentByClass)
    {
      uint64_t v33 = REEntityAddComponentNoEvents();
      if (!v33) {
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v31, a4);
      }
    }
    if (a4 == &type metadata for ModelComponent)
    {
      Description[2](v34, (uint64_t)v31, &type metadata for ModelComponent);
      swift_dynamicCast();
      v43[1] = v39[0];
      v43[2] = v39[1];
      int v44 = v40;
      v43[0] = v33;
      ModelComponent.__toCore(_:returnStrongReference:)(v43, v35 & 1);
      swift_bridgeObjectRelease();
      swift_release();
      if (ComponentByClass) {
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v31, a4);
      }
    }
    else
    {
      v39[0] = v33;
      (*(void (**)(uint64_t *, ValueMetadata *, uint64_t))(a5 + 72))(v39, a4, a5);
      if (ComponentByClass) {
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v31, a4);
      }
    }
    REEntitySendAddAndActivateComponentEvents();
    return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v31, a4);
  }
  uint64_t v35 = specialized static SceneManager.customComponentType(_:)(v38, a5);
  uint64_t v36 = v24;
  uint64_t v25 = REEntityGetComponentByClass();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  if (Description[6](v12, 1, a4) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v25) {
      return REEntityRemoveComponentByClass();
    }
  }
  else
  {
    uint64_t v27 = v37;
    Description[4](v37, (uint64_t)v12, a4);
    if (v25 || REEntityAddComponentNoEvents())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v29 = Object;
        unint64_t v41 = a4;
        uint64_t v42 = a5;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
        Description[2]((char *)boxed_opaque_existential_1, (uint64_t)v27, a4);
        (*(void (**)(uint64_t *, uint64_t, void, BOOL, ValueMetadata *, uint64_t))(a5 + 40))(v39, v29, 0, v25 != 0, a4, a5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        if (!v25) {
          REEntitySendAddAndActivateComponentEvents();
        }
        RENetworkMarkComponentDirty();
      }
    }
    return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v27, a4);
  }
  return result;
}

BOOL Entity.ComponentSet.has(_:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 80))(&v6);
  if (v6 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a1, a2);
    Customuint64_t Component = REEntityGetCustomComponent();
  }
  else
  {
    Customuint64_t Component = REEntityGetComponent();
  }
  return CustomComponent != 0;
}

uint64_t Entity.ComponentSet.set<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v14 - v10;
  v14[1] = *v3;
  Description = (void (**)(char *, void, ValueMetadata *, __n128))a2[-1].Description;
  Description[2]((char *)v14 - v10, a1, a2, v9);
  ((void (*)(char *, void, uint64_t, ValueMetadata *))Description[7])(v11, 0, 1, a2);
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a2, (uint64_t)v11, 0, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t Entity.ComponentSet.count.getter()
{
  uint64_t v1 = *v0;
  if (REEntityGetComponentCount() < 1)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    do
    {
      v40[0] = v1;
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()) {
        break;
      }
      ++v2;
    }
    while (v2 < REEntityGetComponentCount());
  }
  uint64_t result = REEntityGetComponentCount();
  if (result < v2) {
    goto LABEL_64;
  }
  uint64_t v4 = result;
  if (v2 != result)
  {
    uint64_t v5 = 0;
    uint64_t v38 = result;
    while (1)
    {
      BOOL v6 = __OFADD__(v5++, 1);
      if (v6) {
        goto LABEL_62;
      }
      BOOL v6 = __OFADD__(v2++, 1);
      if (v6) {
        break;
      }
      uint64_t result = REEntityGetComponentCount();
      if (v2 < result)
      {
        while (1)
        {
          uint64_t Shared = REEngineGetShared();
          if (Shared)
          {
            uint64_t v8 = Shared;
            if (one-time initialization token for lock != -1) {
              swift_once();
            }
            os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v8)
            {
              type metadata accessor for __Engine();
              swift_allocObject();
              static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v8);
              swift_release();
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            __n128 v9 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine) {
              goto LABEL_43;
            }
          }
          else
          {
            static __ServiceLocator.sharedEngine = 0;
            swift_release();
            __n128 v9 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine) {
              goto LABEL_43;
            }
          }
          uint64_t Default = REEngineConfigurationCreateDefault();
          type metadata accessor for EngineConfiguration();
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = Default;
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v12 = REEngineConfigurationClone();
            uint64_t v13 = swift_allocObject();
            *(void *)(v13 + 16) = v12;
            swift_release_n();
            uint64_t v11 = v13;
          }
          REEngineConfigurationSetClockMode();
          if (one-time initialization token for defaultServices != -1) {
            swift_once();
          }
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v14 = REEngineConfigurationClone();
            uint64_t v15 = swift_allocObject();
            *(void *)(v15 + 16) = v14;
            swift_release_n();
            uint64_t v11 = v15;
          }
          REEngineConfigurationSetServicesToCreate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v16 = REEngineConfigurationClone();
            uint64_t v17 = swift_allocObject();
            *(void *)(v17 + 16) = v16;
            swift_release_n();
            uint64_t v11 = v17;
          }
          REEngineConfigurationSetServicesToUpdate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v18 = REEngineConfigurationClone();
            uint64_t v19 = swift_allocObject();
            *(void *)(v19 + 16) = v18;
            swift_release_n();
            uint64_t v11 = v19;
          }
          REEngineConfigurationSetStartupOptions();
          if (one-time initialization token for defaultRenderFlags != -1) {
            swift_once();
          }
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v20 = REEngineConfigurationClone();
            uint64_t v21 = swift_allocObject();
            *(void *)(v21 + 16) = v20;
            swift_release_n();
            uint64_t v11 = v21;
          }
          REEngineConfigurationSetRenderFlags();
          if (!specialized static __ServiceLocator.__sharedEngine.getter())
          {
            v40[0] = v11;
            __n128 v22 = specialized static __Engine.makeSharedEngine(_:)(v40);
            REEngineSetShared();
            static __ServiceLocator.sharedEngine = v22;
            swift_release();
            static __ServiceLocator.createdSharedEngine = 1;
          }
          swift_release();
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          uint64_t result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
          __n128 v9 = static __ServiceLocator.sharedEngine;
          if (!static __ServiceLocator.sharedEngine) {
            goto LABEL_66;
          }
LABEL_43:
          uint64_t result = swift_beginAccess();
          uint64_t v23 = v9[5];
          if (!v23) {
            goto LABEL_65;
          }
          uint64_t v24 = v23 + 80;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v24, (uint64_t)v40);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
          type metadata accessor for SceneManager();
          swift_dynamicCast();
          REEntityGetComponentAtIndex();
          Swift::UInt Class = REComponentGetClass();
          swift_beginAccess();
          uint64_t v26 = *(void *)(v39 + 16);
          swift_beginAccess();
          uint64_t v27 = *(void *)(v26 + 24);
          if (*(void *)(v27 + 16) && (uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v29 & 1) != 0))
          {
            int v30 = *(unsigned __int8 *)(*(void *)(v27 + 56) + 80 * v28 + 48);
            uint64_t result = swift_release();
            if (v30 == 2) {
              goto LABEL_12;
            }
          }
          else
          {
            if (one-time initialization token for handlesToCustomComponentTypes != -1) {
              swift_once();
            }
            swift_beginAccess();
            uint64_t v31 = static SceneManager.handlesToCustomComponentTypes;
            if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
              && (uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v33 & 1) != 0))
            {
              uint64_t v34 = *(void *)(*(void *)(v31 + 56) + 16 * v32);
              swift_endAccess();
              uint64_t v35 = *(void *)(v39 + 16);
              swift_beginAccess();
              if (!*(void *)(*(void *)(v35 + 16) + 16)
                || (specialized __RawDictionaryStorage.find<A>(_:)(v34), (v36 & 1) == 0))
              {
                uint64_t result = swift_release();
                goto LABEL_12;
              }
            }
            else
            {
              swift_endAccess();
            }
            uint64_t result = swift_release();
          }
          uint64_t v37 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
            __break(1u);
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          uint64_t result = REEntityGetComponentCount();
          ++v2;
          if (v37 >= result)
          {
            uint64_t v2 = v37;
LABEL_12:
            uint64_t v4 = v38;
            break;
          }
        }
      }
      if (v2 == v4) {
        return v5;
      }
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    return result;
  }
  return 0;
}

double Entity.ComponentSet.existentialBox(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 80))(&v13);
  if (v13 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a1, a2);
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v7 = Object;
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
        *(void *)(a3 + 24) = a1;
        *(void *)(a3 + 32) = a2;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
        v8(v7, a1, a2);
        return result;
      }
    }
  }
  else
  {
    uint64_t Component = REEntityGetComponent();
    if (Component)
    {
      uint64_t v12 = Component;
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 64);
      *(void *)(a3 + 24) = a1;
      *(void *)(a3 + 32) = a2;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      v11(&v12, a1, a2);
      return result;
    }
  }
  *(void *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t Entity.ComponentSet.entity.getter()
{
  return swift_retain();
}

void (*Entity.ComponentSet.subscript.modify(void *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4))(ValueMetadata ***a1, char a2)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[1] = a4;
  _OWORD v8[2] = v4;
  *uint64_t v8 = a3;
  uint64_t v9 = type metadata accessor for Optional();
  v8[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[5] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v8[6] = v12;
  Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a3, 1, a3, a4, (uint64_t)v12);
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(ValueMetadata ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[5];
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (*a1)[3];
  BOOL v6 = (*a1)[4];
  if (a2)
  {
    ((void (*)(ValueMetadata *, ValueMetadata *))v6->Description)((*a1)[6], v5);
  }
  else
  {
    uint64_t v7 = (uint64_t)v2[1];
    uint64_t v8 = *v2;
    ((void (*)(ValueMetadata *, ValueMetadata *, ValueMetadata *))v6[1].Kind)(v3, v4, v5);
    swift_retain();
    Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v8, (uint64_t)v3, 1, v8, v7);
    Description = (void (*)(ValueMetadata *, ValueMetadata *))v6->Description;
    Description(v3, v5);
    swift_release();
    Description(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

double Entity.ComponentSet.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.existentialBox(for:)(a1, a2, a3);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  swift_retain();
  Entity.ComponentSet.doSetExistential(_:newValue:)(a2, a3, a1);
  outlined destroy of Component?(a1);

  return swift_release();
}

uint64_t Entity.ComponentSet.doSetExistential(_:newValue:)(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr))(a2 + 80))(v20);
  if (LODWORD(v20[0]) != 36)
  {
    uint64_t result = REComponentClassFromType();
    if (!result) {
      return result;
    }
    outlined init with copy of Component?(a3, (uint64_t)&v18);
    if (!v19)
    {
      outlined destroy of Component?((uint64_t)&v18);
      return REEntityRemoveComponentByClass();
    }
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    uint64_t ComponentByClass = REEntityGetComponentByClass();
    uint64_t v10 = ComponentByClass;
    if (ComponentByClass || (uint64_t v10 = REEntityAddComponentNoEvents()) != 0)
    {
      if (a1 == &type metadata for ModelComponent)
      {
        outlined init with copy of __REAssetService((uint64_t)v20, (uint64_t)&v18);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
        swift_dynamicCast();
        v13[1] = v15;
        v13[2] = v16;
        int v14 = v17;
        v13[0] = v10;
        ModelComponent.__toCore(_:returnStrongReference:)(v13, 0);
        swift_bridgeObjectRelease();
        swift_release();
        if (ComponentByClass) {
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
      }
      else
      {
        uint64_t v11 = v21;
        uint64_t v12 = v22;
        __swift_project_boxed_opaque_existential_1(v20, v21);
        *(void *)&long long v18 = v10;
        (*(void (**)(long long *, uint64_t, uint64_t))(v12 + 72))(&v18, v11, v12);
        if (ComponentByClass) {
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        }
      }
    }
    REEntitySendAddAndActivateComponentEvents();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  specialized static SceneManager.customComponentType(_:)((uint64_t)a1, a2);
  Customuint64_t Component = REEntityGetCustomComponent();
  outlined init with copy of Component?(a3, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    if (CustomComponent || REEntityAddComponentNoEvents())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        (*(void (**)(void *, uint64_t, void, BOOL, ValueMetadata *, uint64_t))(a2 + 40))(v20, Object, 0, CustomComponent != 0, a1, a2);
        if (!CustomComponent) {
          REEntitySendAddAndActivateComponentEvents();
        }
        RENetworkMarkComponentDirty();
      }
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  uint64_t result = outlined destroy of Component?((uint64_t)&v18);
  if (CustomComponent) {
    return REEntityRemoveComponentByClass();
  }
  return result;
}

void (*Entity.ComponentSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x68uLL);
  *a1 = v8;
  uint64_t v9 = v8 + 5;
  v8[11] = a3;
  v8[12] = v4;
  v8[10] = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 80))(&v18, a2, a3);
  int v10 = v18;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[4] = 0;
  if (v10 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a2, a3);
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v12 = Object;
        uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32);
        v8[8] = a2;
        v8[9] = a3;
        __swift_allocate_boxed_opaque_existential_1(v9);
        v13(v12, a2, a3);
LABEL_7:
        outlined assign with take of Component?((uint64_t)v9, (uint64_t)v8);
      }
    }
  }
  else
  {
    uint64_t Component = REEntityGetComponent();
    if (Component)
    {
      uint64_t v17 = Component;
      uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a3 + 64);
      v8[8] = a2;
      v8[9] = a3;
      __swift_allocate_boxed_opaque_existential_1(v9);
      v15(&v17, a2, a3);
      goto LABEL_7;
    }
  }
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = v2[11];
    uint64_t v4 = (ValueMetadata *)v2[10];
    outlined init with copy of Component?((uint64_t)v2, (uint64_t)(v2 + 5));
    swift_retain();
    Entity.ComponentSet.doSetExistential(_:newValue:)(v4, v3, (uint64_t)(v2 + 5));
    outlined destroy of Component?((uint64_t)(v2 + 5));
    swift_release();
  }
  outlined destroy of Component?((uint64_t)v2);

  free(v2);
}

Swift::Void __swiftcall Entity.ComponentSet.set(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      v7[5] = v3;
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      DynamicType = (ValueMetadata *)swift_getDynamicType();
      uint64_t v6 = v4[4];
      outlined init with copy of __REAssetService((uint64_t)v4, (uint64_t)v7);
      Entity.ComponentSet.doSetExistential(_:newValue:)(DynamicType, v6, (uint64_t)v7);
      outlined destroy of Component?((uint64_t)v7);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t Entity.ComponentSet.remove(_:)(ValueMetadata *a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  Entity.ComponentSet.doSetExistential(_:newValue:)(a1, a2, (uint64_t)v4);
  return outlined destroy of Component?((uint64_t)v4);
}

Swift::Void __swiftcall Entity.ComponentSet.removeAll()()
{
  MEMORY[0x270F1DCB8](*(void *)(*(void *)v0 + 16));
}

uint64_t Entity.ComponentSet.publisher<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized static SceneManager.customComponentType(_:)(a1, *(void *)(a3 + 8));
  if (!REEntityGetCustomComponent()) {
    return 0;
  }
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(Object, a2, a3);
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v6;
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(void (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, ValueMetadata *a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  v20[1] = a2;
  uint64_t v21 = a1;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v22 = *v5;
  Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a3, 0, a3, a4, (uint64_t)v20 - v14);
  Description = (uint64_t (**)(void, char *, ValueMetadata *))a3[-1].Description;
  if (((uint64_t (**)(char *, char *, ValueMetadata *))Description)[6](v15, (char *)1, a3) != 1) {
    return ((uint64_t (**)(char *, char *, ValueMetadata *))Description)[4](a5, v15, a3);
  }
  v20[0] = a4;
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v18 = v17(v15, v9);
  v21(v18);
  ((uint64_t (**)(char *, char *, ValueMetadata *))Description)[2](v12, a5, a3);
  ((void (*)(char *, void, uint64_t, ValueMetadata *))Description[7])(v12, 0, 1, a3);
  uint64_t v22 = *v5;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, (uint64_t)v12, 0, a3, v20[0]);
  return v17(v12, v9);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  specialized Entity.ComponentSet.subscript.setter(a1, a2, a5, a6);
  uint64_t v8 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a5[-1].Description + 1);

  return v8(a1, a5);
}

void (*Entity.ComponentSet.subscript.modify(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, ValueMetadata *a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v13 = malloc(0x38uLL);
  *a1 = v13;
  v13[2] = a6;
  uint64_t v13[3] = v6;
  *uint64_t v13 = a2;
  v13[1] = a5;
  Description = a5[-1].Description;
  v13[4] = Description;
  size_t v15 = Description[8];
  v13[5] = malloc(v15);
  uint64_t v16 = (char *)malloc(v15);
  v13[6] = v16;
  Entity.ComponentSet.subscript.getter(a3, a4, a5, a6, v16);
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (ValueMetadata *)(*a1)[1];
  uint64_t v7 = (*a1)[2];
  uint64_t v8 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, ValueMetadata *))(v5 + 16))((*a1)[5], v4, v6);
    specialized Entity.ComponentSet.subscript.setter((uint64_t)v3, v8, v6, v7);
    uint64_t v9 = *(void (**)(void *, ValueMetadata *))(v5 + 8);
    v9(v3, v6);
    v9(v4, v6);
  }
  else
  {
    specialized Entity.ComponentSet.subscript.setter((*a1)[6], v8, v6, v7);
    (*(void (**)(void *, ValueMetadata *))(v5 + 8))(v4, v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Entity._getComponent<A>()@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a1, 0, a1, a2, a3);
}

uint64_t Entity._setComponent<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  Description = (void (**)(char *, void, ValueMetadata *, __n128))a2[-1].Description;
  Description[2]((char *)&v14 - v10, a1, a2, v9);
  ((void (*)(char *, void, uint64_t, ValueMetadata *))Description[7])(v11, 0, 1, a2);
  uint64_t v15 = v3;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a2, (uint64_t)v11, 0, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t specialized Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  return Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, a1, 0, a3, a4);
}

{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void (**Description)(char *, void, ValueMetadata *, __n128);
  void v15[2];

  uint64_t v8 = type metadata accessor for Optional();
  __n128 v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v15 - v11;
  Description = (void (**)(char *, void, ValueMetadata *, __n128))a3[-1].Description;
  Description[2]((char *)v15 - v11, a1, a3, v10);
  ((void (*)(char *, void, uint64_t, ValueMetadata *))Description[7])(v12, 0, 1, a3);
  v15[1] = *v4;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, (uint64_t)v12, 0, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t outlined destroy of Component?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Component?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet()
{
  return &type metadata for Entity.ComponentSet;
}

uint64_t REAudioFileAssetConfigurationWrapper.init(configuration:)(char *a1)
{
  char v2 = *a1;
  unsigned int v3 = a1[16];
  int v4 = a1[32];
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v5 = *((void *)a1 + 6);
  char v9 = a1[60];
  *(void *)(v1 + 16) = REAudioFileAssetConfigurationCreate();
  if (v2) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  REAudioFileAssetConfigurationSetStreaming();
  REAudioFileAssetConfigurationSetRandomizeStart();
  REAudioFileAssetConfigurationSetShouldLoop();
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x22A688A50](v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (v4 != 255)
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    REAudioFileAssetConfigurationSetCalibrationLevel();
  }
  if (v3 - 1 >= 2)
  {
    if (v3) {
      goto LABEL_14;
    }
    REAudioFileAssetConfigurationSetNormalizationMode();
    goto LABEL_13;
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (v3 <= 1) {
LABEL_13:
  }
    REAudioFileAssetConfigurationSetTargetLUFS();
LABEL_14:
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0) {
    REAudioFileAssetConfigurationSetLayoutTag();
  }
  return v1;
}

uint64_t REAudioFileAssetConfigurationWrapper.init(configuration:)(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 60);
  *(void *)(v1 + 16) = REAudioFileAssetConfigurationCreate();
  REAudioFileAssetConfigurationSetRandomizeStart();
  REAudioFileAssetConfigurationSetShouldLoop();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x22A688A50](v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (v3 != 255) {
    REAudioFileAssetConfigurationSetCalibrationLevel();
  }
  if (v2 - 1 >= 2)
  {
    if (v2) {
      goto LABEL_12;
    }
    REAudioFileAssetConfigurationSetNormalizationMode();
    goto LABEL_11;
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (v2 <= 1) {
LABEL_11:
  }
    REAudioFileAssetConfigurationSetTargetLUFS();
LABEL_12:
  if (v3 != 255) {
    REAudioFileAssetConfigurationSetCalibrationMode();
  }
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    REAudioFileAssetConfigurationSetLayoutTag();
  }
  return v1;
}

uint64_t REAudioFileAssetConfigurationWrapper.__deallocating_deinit()
{
  REAudioFileAssetConfigurationDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileAssetConfigurationWrapper()
{
  return self;
}

uint64_t REAudioFileConfigurationWrapper.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1) {

  }
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileConfigurationWrapper()
{
  return self;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v47 = a2;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  uint64_t v39 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  int v44 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v38 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v43 = (char *)&v38 - v9;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v45 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v48 = (v13 - 1) & v13;
  int64_t v49 = v15;
  for (unint64_t i = __clz(__rbit64(v13)) | (v15 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    uint64_t v21 = v45;
    uint64_t v22 = *(void *)(v45 + 48);
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = v24;
    uint64_t v26 = v22 + *(void *)(v24 + 72) * i;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v28 = (uint64_t)v43;
    v27(v43, v26, v23);
    uint64_t v29 = *(void *)(*(void *)(v21 + 56) + 8 * i);
    uint64_t v30 = v46;
    *(void *)(v28 + *(int *)(v46 + 48)) = v29;
    outlined init with take of Transform?(v28, (uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity));
    uint64_t v31 = *(int *)(v30 + 48);
    uint64_t v32 = v44;
    v27(v44, (uint64_t)v7, v23);
    uint64_t v33 = *(void *)&v7[v31];
    *(void *)&v32[v31] = v33;
    uint64_t v34 = *(void *)(v33 + 16);
    uint64_t v35 = *(void *)(v47 + 16);
    char v36 = *(void (**)(char *, uint64_t))(v25 + 8);
    swift_retain();
    v36(v32, v23);
    if (v34 == v35)
    {
      swift_release();
      uint64_t v37 = v40;
      outlined init with take of Transform?((uint64_t)v7, v40, &demangling cache variable for type metadata for (key: UUID, value: Entity));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v37, 0, 1, v46);
      return swift_release();
    }
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity));
    int64_t v15 = v49;
    unint64_t v13 = v48;
    if (v48) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v17 >= v42) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v41 + 8 * v17);
    int64_t v19 = v15 + 1;
    if (v18) {
      goto LABEL_20;
    }
    int64_t v19 = v15 + 2;
    if (v15 + 2 >= v42) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v41 + 8 * v19);
    if (v18) {
      goto LABEL_20;
    }
    int64_t v19 = v15 + 3;
    if (v15 + 3 >= v42) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v41 + 8 * v19);
    if (v18) {
      goto LABEL_20;
    }
    int64_t v19 = v15 + 4;
    if (v15 + 4 >= v42) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v41 + 8 * v19);
    if (v18) {
      goto LABEL_20;
    }
    uint64_t v20 = v15 + 5;
    if (v15 + 5 >= v42)
    {
LABEL_25:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, 1, 1, v46);
      return swift_release();
    }
    unint64_t v18 = *(void *)(v41 + 8 * v20);
    if (!v18)
    {
      while (1)
      {
        int64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_28;
        }
        if (v19 >= v42) {
          goto LABEL_25;
        }
        unint64_t v18 = *(void *)(v41 + 8 * v19);
        ++v20;
        if (v18) {
          goto LABEL_20;
        }
      }
    }
    int64_t v19 = v15 + 5;
LABEL_20:
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = v19;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t __RKEntityLookupTable.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return v0;
}

uint64_t __RKEntityLookupTable.init()()
{
  *(void *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return v0;
}

uint64_t __RKEntityLookupTable.entity(for:)(uint64_t a1)
{
  v14[4] = 91;
  v14[5] = 0xE100000000000000;
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  uint64_t v7 = swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 16);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_retain();
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  MEMORY[0x270FA5388](v7);
  void v14[2] = v11;
  v14[3] = a1;
  uint64_t v15 = 91;
  unint64_t v16 = 0xE100000000000000;
  uint64_t v12 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v12, &v15, partial apply for implicit closure #1 in __RKEntityLookupTable.entity(for:), v14);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.entity(for:)(uint64_t a1)
{
  _StringGuts.grow(_:)(19);
  v2._countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if (a1)
  {
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x20726F6620;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t __RKEntityLookupTable.uuid(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity)?);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::String v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = 91;
  unint64_t v23 = 0xE100000000000000;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  uint64_t v24 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8285;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_release();
  uint64_t v12 = v22;
  uint64_t v11 = (void *)v23;
  swift_beginAccess();
  swift_retain();
  uint64_t v13 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v13, a1, (uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v7, 1, v14) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity)?);
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  else
  {
    swift_release();
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v18 + 32))(a2, v7, v17);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a2, 0, 1, v17);
  }
  MEMORY[0x270FA5388](v16);
  *(void *)&v21[-16] = a2;
  *(void *)&v21[-8] = a1;
  v25._countAndFlagsBits = v12;
  v25._object = v11;
  uint64_t v19 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v19, &v25, partial apply for implicit closure #1 in __RKEntityLookupTable.uuid(for:), &v21[-32]);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in __RKEntityLookupTable.uuid(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v7._countAndFlagsBits = 0x6E696E7275746552;
  v7._object = (void *)0xEA00000000002067;
  String.append(_:)(v7);
  outlined init with copy of UUID?(a1, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    Swift::String v10 = (void *)0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  else
  {
    uint64_t v11 = UUID.description.getter();
    Swift::String v10 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  v13._countAndFlagsBits = v11;
  v13._object = v10;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x20726F6620;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v17[1] = a2;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  return v19;
}

uint64_t __RKEntityLookupTable.updateEntity(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 91;
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = swift_release();
  if (a1)
  {
    MEMORY[0x270FA5388](v9);
    uint64_t v18 = a2;
    uint64_t v19 = a1;
    uint64_t v20 = v10;
    unint64_t v21 = 0xE100000000000000;
    swift_retain();
    uint64_t v11 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v11, &v20, partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:), v17);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0x8000000000000000;
    uint64_t v13 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 16) = v22;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  else
  {
    MEMORY[0x270FA5388](v9);
    uint64_t v18 = a2;
    uint64_t v20 = v14;
    unint64_t v21 = 0xE100000000000000;
    uint64_t v15 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v20, partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:), v17);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v13 = specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();
  }
  return v13;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x800000022835A770;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 540876893;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  _StringGuts.grow(_:)(30);
  v0._object = (void *)0x800000022835A770;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6C696E203D205DLL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  return 0;
}

Swift::Void __swiftcall __RKEntityLookupTable.removeAllEntities()()
{
  uint64_t v1 = v0;
  v8[0] = 91;
  v8[1] = 0xE100000000000000;
  v8[4] = 0;
  v8[5] = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8285;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_release();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v6, v8);
  swift_bridgeObjectRelease();
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  *(void *)(v1 + 16) = v7;
  swift_bridgeObjectRelease();
}

uint64_t __RKEntityLookupTable.entity(name:)(int64_t a1, int64_t a2)
{
  int64_t v46 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity)?);
  MEMORY[0x270FA5388](v4 - 8);
  os_log_type_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v42 - v8;
  v47._countAndFlagsBits = 91;
  v47._object = (void *)0xE100000000000000;
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  uint64_t v48 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  Swift::String v43 = v47;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v2 + 16);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v44 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  int64_t v42 = v45 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v19 << 6);
LABEL_5:
  uint64_t v22 = *(void *)(v13 + 48);
  uint64_t v23 = type metadata accessor for UUID();
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v6, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v21, v23);
  uint64_t v24 = *(void *)(v13 + 56);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  *(void *)&v6[*(int *)(v25 + 48)] = *(void *)(v24 + 8 * v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 0, 1, v25);
  swift_retain();
  while (1)
  {
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for (key: UUID, value: Entity)?);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v9, 1, v30) == 1)
    {
      uint64_t v37 = swift_release();
      MEMORY[0x270FA5388](v37);
      *(&v42 - 2) = v46;
      *(&v42 - 1) = a2;
      Swift::String v49 = v43;
      uint64_t v38 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v38, &v49, partial apply for implicit closure #2 in __RKEntityLookupTable.entity(name:), &v42 - 4);
      swift_bridgeObjectRelease();
      return 0;
    }
    int64_t v31 = *(void *)&v9[*(int *)(v30 + 48)];
    REEntityGetName();
    if (String.init(cString:)() == v46 && v32 == a2) {
      break;
    }
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v35 = swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_34;
    }
    uint64_t v36 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v9, v36);
    uint64_t result = swift_release();
    if (v17) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v26 < v45)
    {
      unint64_t v27 = *(void *)(v44 + 8 * v26);
      if (v27) {
        goto LABEL_9;
      }
      int64_t v28 = v19 + 2;
      ++v19;
      if (v26 + 1 < v45)
      {
        unint64_t v27 = *(void *)(v44 + 8 * v28);
        if (v27) {
          goto LABEL_12;
        }
        int64_t v19 = v26 + 1;
        if (v26 + 2 < v45)
        {
          unint64_t v27 = *(void *)(v44 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_9;
          }
          int64_t v28 = v26 + 3;
          int64_t v19 = v26 + 2;
          if (v26 + 3 < v45)
          {
            unint64_t v27 = *(void *)(v44 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v26 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  break;
                }
                if (v26 >= v45)
                {
                  int64_t v19 = v42;
                  goto LABEL_23;
                }
                unint64_t v27 = *(void *)(v44 + 8 * v26);
                ++v28;
                if (v27) {
                  goto LABEL_9;
                }
              }
LABEL_37:
              __break(1u);
              return result;
            }
LABEL_12:
            int64_t v26 = v28;
LABEL_9:
            unint64_t v17 = (v27 - 1) & v27;
            unint64_t v21 = __clz(__rbit64(v27)) + (v26 << 6);
            int64_t v19 = v26;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v6, 1, 1, v29);
    unint64_t v17 = 0;
  }
  uint64_t v35 = swift_bridgeObjectRelease();
LABEL_34:
  MEMORY[0x270FA5388](v35);
  int64_t v39 = v46;
  *(&v42 - 4) = v31;
  *(&v42 - 3) = v39;
  *(&v42 - 2) = a2;
  Swift::String v49 = v43;
  uint64_t v40 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v40, &v49, partial apply for implicit closure #1 in __RKEntityLookupTable.entity(name:), &v42 - 6);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v41 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v41 - 8) + 8))(v9, v41);
  return v31;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.entity(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(19);
  v5._countAndFlagsBits = 0x6E696E7275746552;
  v5._object = (void *)0xEA00000000002067;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x20726F6620;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = a2;
  v8._object = a3;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityLookupTable.entity(name:)(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(20);
  v4._object = (void *)0x800000022835A750;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityLookupTable.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityLookupTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.entity(for:)()
{
  return implicit closure #1 in __RKEntityLookupTable.entity(for:)(*(void *)(v0 + 16));
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::String v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t result = *(void *)(v21 + 8 * v14);
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
  return 0;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::String v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = v13 + ((v11 ^ 1) & 1);
  if (__OFADD__(v13, (v11 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v15 = v11;
    uint64_t v16 = *(void *)(v10 + 24);
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v17 = *v5;
      if (v15)
      {
LABEL_8:
        uint64_t v18 = *(void *)(v17 + 56);
        uint64_t result = *(void *)(v18 + 8 * v12);
        *(void *)(v18 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v17 = *v5;
      if (v15) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v17);
      swift_bridgeObjectRetain();
      return 0;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.uuid(for:)()
{
  return implicit closure #1 in __RKEntityLookupTable.uuid(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for implicit closure #2 in __RKEntityLookupTable.entity(name:)()
{
  return implicit closure #2 in __RKEntityLookupTable.entity(name:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.entity(name:)()
{
  return implicit closure #1 in __RKEntityLookupTable.entity(name:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t type metadata accessor for __RKEntityLookupTable()
{
  return self;
}

uint64_t method lookup function for __RKEntityLookupTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityLookupTable);
}

uint64_t dispatch thunk of __RKEntityLookupTable.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.entity(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.uuid(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.updateEntity(_:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.removeAllEntities()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.entity(name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)(uint64_t a1, char a2)
{
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
    }
    else if ((a2 & 1) != 0 || (uint64_t v5 = specialized static Entity.entityInfoType(_:)()) == 0)
    {
      return makeEntity(for:)(a1);
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v7 = *(void *)(v6 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v6 + 16) = a1;
      MEMORY[0x22A68E750](a1, v6);
      swift_release();
      return v6;
    }
  }
  return result;
}

BOOL static Entity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t Entity.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Entity.init()();
  return v0;
}

uint64_t Entity.boundingBox.getter()
{
  return REEntityComputeMeshBounds();
}

uint64_t Entity.rcSceneEntity.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Parent = REEntityGetParent();
  if (!Parent) {
    return 0;
  }
  uint64_t v4 = Parent;
  if ((id)REEntityGetSwiftObject()) {
    goto LABEL_10;
  }
  if (REEntityIsBeingDestroyed())
  {
    __break(1u);
LABEL_10:
    type metadata accessor for Entity();
    uint64_t v8 = swift_dynamicCastClassUnconditional();
    goto LABEL_11;
  }
  uint64_t v6 = specialized static Entity.entityInfoType(_:)();
  if (v6)
  {
    uint64_t i = (*(uint64_t (**)(void))(v6 + 232))();
    uint64_t v7 = *(void *)(i + 16);
    swift_retain();
    MEMORY[0x22A68E750](v7, 0);
    *(void *)(i + 16) = v4;
    MEMORY[0x22A68E750](v4, i);
    swift_release();
    goto LABEL_12;
  }
  uint64_t v8 = makeEntity(for:)(v4);
LABEL_11:
  for (uint64_t i = v8; ; uint64_t i = v15)
  {
LABEL_12:
    if (!i)
    {
      uint64_t v17 = type metadata accessor for AnchoringComponent(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v2, 1, 1, v17);
      outlined destroy of AnchoringComponent?((uint64_t)v2);
      return i;
    }
    swift_retain();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    if (REEntityGetCustomComponent()) {
      break;
    }
    swift_release();
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v2);
    swift_release();
    uint64_t v9 = type metadata accessor for AnchoringComponent(0);
    int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v2, 1, v9);
    outlined destroy of AnchoringComponent?((uint64_t)v2);
    if (v10 != 1) {
      return i;
    }
    swift_retain();
    uint64_t v11 = REEntityGetParent();
    if (!v11)
    {
      swift_release_n();
      return 0;
    }
    uint64_t v12 = v11;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      goto LABEL_10;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v14 = specialized static Entity.entityInfoType(_:)();
    if (v14)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(v14 + 232))();
      uint64_t v16 = *(void *)(v15 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v16, 0);
      *(void *)(v15 + 16) = v12;
      MEMORY[0x22A68E750](v12, v15);
      swift_release_n();
      swift_release();
    }
    else
    {
      uint64_t v15 = makeEntity(for:)(v12);
      swift_release_n();
    }
  }
  uint64_t result = RECustomComponentGetObject();
  if (result)
  {
    swift_release();
    return i;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t Entity.id.getter()
{
  return REEntityGetLocalId();
}

uint64_t static Entity.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = specialized static Entity.entityInfoType(_:)();
      if (v3)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(v3 + 232))();
        uint64_t v5 = *(void *)(v4 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v5, 0);
        *(void *)(v4 + 16) = v1;
        MEMORY[0x22A68E750](v1, v4);
        swift_release();
        return v4;
      }
      else
      {
        return makeEntity(for:)(v1);
      }
    }
  }
  return result;
}

uint64_t Entity.init()()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = REEntityCreate();
  MEMORY[0x22A68E750]();
  RERelease();
  if (one-time initialization token for traitSetups != -1) {
    swift_once();
  }
  rawValue = (char *)traitSetups._rawValue;
  uint64_t v3 = *((void *)traitSetups._rawValue + 2);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = rawValue + 40;
    do
    {
      uint64_t v5 = (void (*)(uint64_t))*((void *)v4 - 1);
      swift_retain();
      v5(v0);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  REEntityGetOrAddComponent();
  swift_retain();
  __EntityInfoComponent.init(entity:)(v9);
  uint64_t v6 = v9[0];
  uint64_t v7 = v9[1];
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v6, v7);
  swift_release_n();
  swift_release();
  return v1;
}

uint64_t Entity.init(_coreEntity:)(void *a1)
{
  *(void *)(v1 + 16) = *a1;
  MEMORY[0x22A68E750]();
  return v1;
}

uint64_t Entity.deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);
  return v0;
}

uint64_t (*Entity.components.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return RealityRenderer.entities.modify;
}

uint64_t Entity.scene.getter()
{
  uint64_t result = REEntityGetSceneNullable();
  if (result)
  {
    uint64_t v1 = result;
    id v2 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v2)
    {
      return swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      return Scene.init(coreScene:)(v1);
    }
  }
  return result;
}

uint64_t Entity.name.getter()
{
  REEntityGetName();

  return String.init(cString:)();
}

uint64_t Entity.name.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEntitySetName();
  swift_release();

  return RENetworkMarkEntityMetadataDirty();
}

uint64_t (*Entity.name.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  REEntityGetName();
  *a1 = String.init(cString:)();
  a1[1] = v3;
  return Entity.name.modify;
}

uint64_t Entity.name.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if (a2)
  {
    REEntitySetName();
    swift_release();
    RENetworkMarkEntityMetadataDirty();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REEntitySetName();
    swift_release();
    return RENetworkMarkEntityMetadataDirty();
  }
}

uint64_t Entity.__boundingBox.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = REEntityComputeMeshBounds();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t Entity.__findAssetDependencies(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in Entity.__findAssetDependencies(_:);
  *(void *)(v2 + 24) = &v4;
  REEntityFindAssetDependencies();
  return swift_release();
}

uint64_t Entity.isActive.getter()
{
  return REEntityIsActive();
}

uint64_t Entity.isAnchored.getter()
{
  return REEntityIsAnchored();
}

uint64_t Entity.isEnabled.getter()
{
  return REEntityGetSelfEnabled();
}

uint64_t Entity.isEnabled.setter(char a1)
{
  MEMORY[0x22A68E740](*(void *)(v1 + 16), a1 & 1);

  return RENetworkMarkEntityMetadataDirty();
}

uint64_t (*Entity.isEnabled.modify(uint64_t a1))(unsigned __int8 *a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = REEntityGetSelfEnabled();
  return Entity.isEnabled.modify;
}

uint64_t Entity.isEnabled.modify(unsigned __int8 *a1)
{
  MEMORY[0x22A68E740](*(void *)(*(void *)a1 + 16), a1[8]);

  return RENetworkMarkEntityMetadataDirty();
}

uint64_t Entity.isEnabledInHierarchy.getter()
{
  return REEntityIsEnabledInHierarchy();
}

uint64_t Entity.findEntity(named:)()
{
  String.utf8CString.getter();
  uint64_t v0 = REEntityFindInHierarchyByName();
  swift_release();
  if (!v0) {
    return 0;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v4 = specialized static Entity.entityInfoType(_:)();
    if (v4)
    {
      uint64_t v2 = (*(uint64_t (**)(void))(v4 + 232))();
      uint64_t v5 = *(void *)(v2 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v5, 0);
      *(void *)(v2 + 16) = v0;
      MEMORY[0x22A68E750](v0, v2);
      swift_release();
      return v2;
    }
    return makeEntity(for:)(v0);
  }
  __break(1u);
  return result;
}

uint64_t static Entity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 112) = *a5;
  type metadata accessor for MainActor();
  *(void *)(v6 + 56) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 72) = v7;
  return MEMORY[0x270FA2498](static Entity.classLoad(named:in:options:asyncOptions:), v8, v7);
}

uint64_t static Entity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v3 = *(void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  unsigned __int8 v9 = *(unsigned char *)(v0 + 112);
  uint64_t v5 = static Entity.__loadAsync(named:in:options:asyncOptions:)(v4, v2, v3, v1, &v9);
  *(void *)(v0 + 80) = v5;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v8(v5);
}

uint64_t static Entity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 112) = *a5;
  type metadata accessor for MainActor();
  *(void *)(v6 + 56) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 72) = v7;
  return MEMORY[0x270FA2498](static Entity.classLoad(contentsOf:withName:options:asyncOptions:), v8, v7);
}

uint64_t static Entity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v3 = *(void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  unsigned __int8 v9 = *(unsigned char *)(v0 + 112);
  uint64_t v5 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v4, v2, v3, v1, &v9);
  *(void *)(v0 + 80) = v5;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  return v8(v5);
}

BOOL static Entity.ForwardDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t Entity.copy(to:recursive:)(uint64_t a1, char a2)
{
  uint64_t v5 = REEntityCopy();
  MEMORY[0x22A68E750](*(void *)(a1 + 16), 0);
  *(void *)(a1 + 16) = v5;
  MEMORY[0x22A68E750](v5, a1);
  RERelease();
  return Entity.didCloneHelper(from:recursive:)(v2, a2);
}

uint64_t Entity.coreEntity.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t key path setter for Entity.name : Entity()
{
  String.utf8CString.getter();
  REEntitySetName();
  swift_release();

  return RENetworkMarkEntityMetadataDirty();
}

uint64_t @objc closure #1 in Entity.findAssetDependencies(_:)(uint64_t a1, void (**a2)(uint64_t *))
{
  uint64_t v2 = *a2;
  uint64_t v4 = a1;
  swift_retain();
  v2(&v4);

  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t static Entity.__disableUpdateInteractionEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Entity.__disableUpdateInteractionEntities.setter(uint64_t a1)
{
  static Entity.__disableUpdateInteractionEntities = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Entity.__disableUpdateInteractionEntities.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__allocating_init(_coreEntity:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *a1;
  MEMORY[0x22A68E750]();
  return v2;
}

uint64_t static Entity.__testInit()()
{
  uint64_t v0 = REEntityCreate();
  type metadata accessor for Entity();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  MEMORY[0x22A68E750](v0, v1);
  return v1;
}

uint64_t Entity.__deallocating_deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);

  return swift_deallocClassInstance();
}

void Entity.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

Swift::Int Entity.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Identifiable.id.getter in conformance Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEntityGetLocalId();
  *a1 = result;
  return result;
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:preferAnchorEntity:)(uint64_t a1, char a2, char a3)
{
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
    __break(1u);
    return result;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = specialized static Entity.entityInfoType(_:)();
    if (v7)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(v7 + 232))();
      uint64_t v9 = *(void *)(v8 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v9, 0);
      *(void *)(v8 + 16) = a1;
      MEMORY[0x22A68E750](a1, v8);
      swift_release();
      return v8;
    }
  }
  if (a3)
  {
    REAnchoringComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for AnchorEntity();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = a1;
      MEMORY[0x22A68E750](a1, v8);
      return v8;
    }
  }

  return makeEntity(for:)(a1);
}

uint64_t makeEntity(for:)(uint64_t a1)
{
  REDirectionalLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for DirectionalLight();
  }
  else
  {
    REPointLightComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for PointLight();
    }
    else
    {
      RESpotLightComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        type metadata accessor for SpotLight();
      }
      else
      {
        REPerspectiveCameraComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          type metadata accessor for PerspectiveCamera();
        }
        else
        {
          RESceneUnderstandingComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            type metadata accessor for __RKSceneUnderstanding();
          }
          else
          {
            REMeshComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              type metadata accessor for ModelEntity();
            }
            else
            {
              RERigidBodyComponentGetComponentType();
              if (REEntityGetComponentByClass())
              {
                type metadata accessor for __RKPhysics();
              }
              else
              {
                REAnchoringComponentGetComponentType();
                if (REEntityGetComponentByClass()) {
                  type metadata accessor for AnchorEntity();
                }
                else {
                  type metadata accessor for Entity();
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  MEMORY[0x22A68E750](a1, v2);
  return v2;
}

uint64_t __RKPhysics.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Entity.init()();
  return v0;
}

uint64_t Entity.clone(recursive:)(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v4) {
    uint64_t v1 = 0;
  }
  if (v1)
  {
    uint64_t v6 = *v1;
    uint64_t v7 = *(void (**)(void, uint64_t, uint64_t))(v5 + 8);
    swift_retain();
    v7(a1 & 1, v6, v5);
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v3 + 232))();
    Entity.copy(to:recursive:)(v9, a1 & 1);
    uint64_t v10 = type metadata accessor for Entity();
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(v9, 1, v10);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v9);
    return v9;
  }
}

uint64_t Entity.__clone(recursive:remapInteractionIdentifiers:)(char a1, char a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 232))();
  Entity.copy(to:recursive:)(v5, a1);
  uint64_t v6 = type metadata accessor for Entity();
  RENetworkComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  specialized static Entity.enumerateCore(entity:recursive:block:)(v5, 1, v6);
  if (a2) {
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v5);
  }
  return v5;
}

uint64_t Entity.didCloneHelper(from:recursive:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  (*(void (**)(void))(*(void *)v2 + 248))();
  swift_beginAccess();
  id v6 = objc_getAssociatedObject(a1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    uint64_t v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v3, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, v7, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  swift_beginAccess();
  id v8 = objc_getAssociatedObject(a1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
  uint64_t result = swift_endAccess();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    uint64_t v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v3, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v10, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  if ((a2 & 1) == 0) {
    return result;
  }
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if (result < 0) {
    goto LABEL_47;
  }
  uint64_t v11 = result;
  if (result)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v12 >= result) {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_11:
  swift_release();
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v13 = result;
    if (!result)
    {
LABEL_16:
      uint64_t result = swift_release();
      if (v11 != v13) {
        goto LABEL_49;
      }
      if (!v11) {
        return result;
      }
      uint64_t v15 = 0;
      while (v11 != v15)
      {
        swift_retain();
        uint64_t result = REEntityGetChildCount();
        if (v15 >= result) {
          goto LABEL_43;
        }
        uint64_t result = REEntityGetChild();
        if (!result) {
          goto LABEL_50;
        }
        uint64_t v17 = result;
        if ((id)REEntityGetSwiftObject())
        {
          swift_release();
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t result = REEntityIsBeingDestroyed();
          if (result) {
            goto LABEL_45;
          }
          uint64_t v18 = specialized static Entity.entityInfoType(_:)();
          if (v18)
          {
            uint64_t v19 = (*(uint64_t (**)(void))(v18 + 232))();
            uint64_t v20 = *(void *)(v19 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v20, 0);
            *(void *)(v19 + 16) = v17;
            MEMORY[0x22A68E750](v17, v19);
            swift_release();
          }
          else
          {
            makeEntity(for:)(v17);
          }
          swift_release();
        }
        swift_retain();
        uint64_t result = REEntityGetChildCount();
        if (v15 >= result) {
          goto LABEL_44;
        }
        uint64_t result = REEntityGetChild();
        if (!result) {
          goto LABEL_51;
        }
        uint64_t v21 = result;
        if ((id)REEntityGetSwiftObject())
        {
          swift_release();
          type metadata accessor for Entity();
          uint64_t v16 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t result = REEntityIsBeingDestroyed();
          if (result) {
            goto LABEL_46;
          }
          uint64_t v22 = specialized static Entity.entityInfoType(_:)();
          if (v22)
          {
            uint64_t v16 = (*(uint64_t (**)(void))(v22 + 232))();
            uint64_t v23 = *(void *)(v16 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v23, 0);
            *(void *)(v16 + 16) = v21;
            MEMORY[0x22A68E750](v21, v16);
            swift_release();
          }
          else
          {
            uint64_t v16 = makeEntity(for:)(v21);
          }
          swift_release();
        }
        ++v15;
        Entity.didCloneHelper(from:recursive:)(v16, 1);
        swift_release();
        uint64_t result = swift_release();
        if (v11 == v15) {
          return result;
        }
      }
      goto LABEL_42;
    }
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v14 >= result) {
        break;
      }
      if (v13 == ++v14) {
        goto LABEL_16;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneOriginComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SceneOriginComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SceneOriginComponent.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SceneOriginComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SceneOriginComponent.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SceneOriginComponent(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SceneOriginComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void Entity.ForwardDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Entity.ForwardDirection.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Entity.findEntity(id:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (REEntityGetLocalId() == a1)
  {
    swift_retain();
    return v2;
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_39:
    swift_release();
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v4 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_45;
    }
    uint64_t v6 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_44;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent()) {
        goto LABEL_35;
      }
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_35;
      }
      id v8 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 0;
      }
      if (v9)
      {
        uint64_t result = swift_retain();
      }
      else
      {
        int v10 = *v8;
        uint64_t v11 = String.init(utf8String:)();
        if (v12) {
          Swift::Int v13 = v11;
        }
        else {
          Swift::Int v13 = 0;
        }
        if (v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = 0xE000000000000000;
        }
        id v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v8;
      }
      if (!v8) {
        goto LABEL_46;
      }
      swift_retain();
      uint64_t v15 = String.init(utf8String:)();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v18 = v17 ? v15 : 0;
      unint64_t v19 = v17 ? v17 : 0xE000000000000000;
      uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
      swift_bridgeObjectRelease();
      Class v21 = NSClassFromString(v20);

      swift_release();
      if (!v21) {
        goto LABEL_35;
      }
      swift_getObjCClassMetadata();
      type metadata accessor for Entity();
      uint64_t v22 = swift_dynamicCastMetatype();
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
        uint64_t v24 = *(void *)(v23 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v24, 0);
        *(void *)(v23 + 16) = v6;
        MEMORY[0x22A68E750](v6, v23);
        swift_release();
      }
      else
      {
LABEL_35:
        makeEntity(for:)(v6);
      }
    }
    uint64_t result = REEntityGetChildCount();
    if (v4 >= result) {
      goto LABEL_43;
    }
    uint64_t v25 = Entity.findEntity(id:)(a1);
    swift_release();
    if (v25)
    {
      swift_release();
      return v25;
    }
    if (++v4 >= REEntityGetChildCount()) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t Entity.descends(from:)(uint64_t a1)
{
  if (*(void *)(v1 + 16) == *(void *)(a1 + 16)) {
    return 1;
  }
  uint64_t result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    char v4 = Entity.descends(from:)(a1);
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t specialized static Entity.entityInfoType(_:)()
{
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  uint64_t result = REEntityGetCustomComponent();
  if (result)
  {
    uint64_t result = RECustomComponentGetObject();
    if (result)
    {
      uint64_t v1 = *(unsigned __int8 **)result;
      if (*(void *)(result + 8)) {
        BOOL v2 = 1;
      }
      else {
        BOOL v2 = v1 == 0;
      }
      if (v2)
      {
        uint64_t result = swift_retain();
      }
      else
      {
        int v3 = *v1;
        uint64_t v4 = String.init(utf8String:)();
        if (v5) {
          Swift::Int v6 = v4;
        }
        else {
          Swift::Int v6 = 0;
        }
        if (v5) {
          unint64_t v7 = v5;
        }
        else {
          unint64_t v7 = 0xE000000000000000;
        }
        uint64_t v1 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v3 == 42, v6, v7);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v1;
      }
      if (v1)
      {
        swift_retain();
        uint64_t v8 = String.init(utf8String:)();
        unint64_t v10 = v9;
        swift_release();
        if (v10) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = 0xE000000000000000;
        }
        Swift::Int v13 = (NSString *)MEMORY[0x22A688A50](v11, v12);
        swift_bridgeObjectRelease();
        Class v14 = NSClassFromString(v13);

        swift_release();
        if (v14)
        {
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          return swift_dynamicCastMetatype();
        }
        else
        {
          return 0;
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Entity()
{
  return self;
}

uint64_t partial apply for closure #1 in Entity.__findAssetDependencies(_:)(uint64_t a1)
{
  BOOL v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_228157440()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ForwardDirection and conformance Entity.ForwardDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection;
  if (!lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection);
  }
  return result;
}

uint64_t sub_22815752C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_228157538(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)result + 16) != *(void *)(*(void *)a2 + 16)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_228157558@<X0>(uint64_t *a1@<X8>)
{
  REEntityGetName();
  uint64_t result = String.init(cString:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_228157590@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REEntityGetSelfEnabled();
  *a1 = result;
  return result;
}

uint64_t sub_2281575C0(unsigned __int8 *a1, uint64_t a2)
{
  MEMORY[0x22A68E740](*(void *)(*(void *)a2 + 16), *a1);

  return RENetworkMarkEntityMetadataDirty();
}

uint64_t method lookup function for Entity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Entity);
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of Entity.components.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of Entity.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Entity.name.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Entity.__boundingBox.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Entity.__findAssetDependencies(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of Entity.isActive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of Entity.isAnchored.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of Entity.isEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of Entity.isEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of Entity.isEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of Entity.isEnabledInHierarchy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of Entity.__accessibilityElements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of Entity.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of Entity.__allocating_init(_coreEntity:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of Entity.didClone(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of Entity.findEntity(named:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t type metadata accessor for __RKPhysics()
{
  return self;
}

uint64_t type metadata accessor for __RKSceneUnderstanding()
{
  return self;
}

uint64_t dispatch thunk of CustomClonable.customClone(recursive:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for SceneOriginComponent()
{
  return &type metadata for SceneOriginComponent;
}

unsigned char *storeEnumTagSinglePayload for Entity.ForwardDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228157A30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.ForwardDirection()
{
  return &type metadata for Entity.ForwardDirection;
}

void *type metadata accessor for SceneOriginComponent.CodingKeys()
{
  return &unk_26DCADD50;
}

uint64_t outlined destroy of AnchoringComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __RKEntityCollisionTrigger.__allocating_init(targetEntity:collidingEntities:tags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_beginAccess();
  *(void *)(v6 + 24) = a1;
  swift_retain();
  swift_release();
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  return v6;
}

uint64_t __RKEntityCollisionTrigger.init(targetEntity:collidingEntities:tags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = 0;
  swift_beginAccess();
  *(void *)(v3 + 24) = a1;
  swift_retain();
  swift_release();
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 40) = a3;
  swift_release();
  *(_WORD *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 18) = 0;
  return v3;
}

uint64_t __RKEntityCollisionTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  v72 = &v67[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = &v67[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v10 = &v67[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (unint64_t)&v67[-v12];
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = &v67[-v15];
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = &v67[-v18];
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v67[-v21];
  type metadata accessor for __RKEntityCollisionTrigger();
  uint64_t v23 = swift_dynamicCastClass();
  uint64_t v73 = a1;
  uint64_t v69 = v23;
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v75 = v2;
  uint64_t v24 = v71;
  swift_beginAccess();
  if (*(void *)(v24 + 24))
  {
    swift_retain();
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v22);
    swift_release();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v22, 1, 1, v75);
    swift_retain();
  }
  v74 = v10;
  uint64_t v25 = v69;
  swift_beginAccess();
  uint64_t v26 = v70;
  if (*(void *)(v25 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v19);
    swift_release();
    uint64_t v27 = v75;
  }
  else
  {
    uint64_t v27 = v75;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v19, 1, 1, v75);
  }
  uint64_t v28 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of UUID?((uint64_t)v22, (uint64_t)v6);
  outlined init with copy of UUID?((uint64_t)v19, v28);
  unint64_t v4 = *(void *)(v26 + 48);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v4)(v6, 1, v27) != 1)
  {
    outlined init with copy of UUID?((uint64_t)v6, (uint64_t)v16);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v4)(v28, 1, v27) != 1)
    {
      uint64_t v29 = v70;
      uint64_t v30 = v72;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v70 + 32))(v72, v28, v27);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      int v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      int64_t v31 = *(void (**)(unsigned char *, uint64_t))(v29 + 8);
      v31(v30, v27);
      unint64_t v4 = (unint64_t)&demangling cache variable for type metadata for UUID?;
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      v31(v16, v27);
      outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
      if (v68) {
        goto LABEL_15;
      }
LABEL_33:
      swift_release();
      goto LABEL_34;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v16, v27);
LABEL_13:
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_33;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v4)(v28, 1, v27) != 1) {
    goto LABEL_13;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
LABEL_15:
  uint64_t v32 = v71;
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = specialized Set.init<A>(_:)(v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = specialized Set.init<A>(_:)(v35);
  swift_bridgeObjectRelease();
  char v37 = specialized Set.isDisjoint(with:)(v36, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    uint64_t v47 = 1;
LABEL_45:
    swift_release();
    return v47;
  }
  unint64_t v4 = *(void *)(v32 + 32);
  if (v4 >> 62) {
    goto LABEL_86;
  }
  uint64_t v38 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v39 = MEMORY[0x263F8EE78];
    if (v38)
    {
      uint64_t v76 = MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 & ~(v38 >> 63), 0);
      if (v38 < 0)
      {
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      uint64_t v41 = v76;
      v72 = (unsigned char *)(v4 & 0xC000000000000001);
      swift_beginAccess();
      uint64_t v42 = 0;
      Swift::String v43 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
      unint64_t v44 = v4;
      do
      {
        if (v72) {
          MEMORY[0x22A689930](v42, v4);
        }
        else {
          swift_retain();
        }
        if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
        {
          UUID.init(uuid:)();
          (*v43)(v13, 0, 1, v75);
        }
        else
        {
          (*v43)(v13, 1, 1, v75);
        }
        swift_release();
        uint64_t v76 = v41;
        unint64_t v46 = *(void *)(v41 + 16);
        unint64_t v45 = *(void *)(v41 + 24);
        if (v46 >= v45 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
          uint64_t v41 = v76;
        }
        ++v42;
        *(void *)(v41 + 16) = v46 + 1;
        outlined init with take of UUID?(v13, v41+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v46);
        unint64_t v4 = v44;
      }
      while (v38 != v42);
      swift_bridgeObjectRelease();
      uint64_t v39 = MEMORY[0x263F8EE78];
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v41 = MEMORY[0x263F8EE78];
    }
    unint64_t v13 = *(void *)(v69 + 32);
    uint64_t v52 = (uint64_t)v74;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      if (!v53) {
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v53 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v53) {
        goto LABEL_88;
      }
    }
    uint64_t v76 = v39;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53 & ~(v53 >> 63), 0);
    if (v53 < 0) {
      goto LABEL_91;
    }
    uint64_t v39 = v76;
    swift_beginAccess();
    uint64_t v54 = 0;
    unint64_t v55 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](v54, v13);
      }
      else {
        swift_retain();
      }
      if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
      {
        UUID.init(uuid:)();
        (*v55)(v52, 0, 1, v75);
      }
      else
      {
        (*v55)(v52, 1, 1, v75);
      }
      swift_release();
      uint64_t v76 = v39;
      unint64_t v57 = *(void *)(v39 + 16);
      unint64_t v56 = *(void *)(v39 + 24);
      unint64_t v4 = v57 + 1;
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        uint64_t v39 = v76;
      }
      ++v54;
      *(void *)(v39 + 16) = v4;
      uint64_t v58 = v39
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + *(void *)(v8 + 72) * v57;
      uint64_t v52 = (uint64_t)v74;
      outlined init with take of UUID?((uint64_t)v74, v58);
    }
    while (v53 != v54);
LABEL_88:
    swift_bridgeObjectRelease();
    uint64_t v64 = specialized Set.init<A>(_:)(v41);
    swift_bridgeObjectRelease();
    uint64_t v65 = specialized Set.init<A>(_:)(v39);
    swift_bridgeObjectRelease();
    char v66 = specialized Set.isDisjoint(with:)(v65, v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v66 & 1) == 0) {
      return 1;
    }
LABEL_34:
    type metadata accessor for __RKEntityTriggerGroup();
    uint64_t v47 = swift_dynamicCastClass();
    if (!v47) {
      return v47;
    }
    swift_beginAccess();
    unint64_t v48 = *(void *)(v47 + 24);
    if (v48 >> 62)
    {
LABEL_81:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      if (!v47) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v47) {
        goto LABEL_44;
      }
    }
    unint64_t v8 = v48 & 0xC000000000000001;
    if ((v48 & 0xC000000000000001) != 0) {
      break;
    }
    if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v49 = *(void *)(v48 + 32);
      swift_retain();
      goto LABEL_40;
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t v49 = MEMORY[0x22A689930](0, v48);
LABEL_40:
  char v50 = __RKEntityCollisionTrigger.matches(with:)(v49);
  uint64_t result = swift_release();
  if (v50)
  {
LABEL_41:
    uint64_t v47 = 1;
    goto LABEL_44;
  }
  if (v47 == 1)
  {
    uint64_t v47 = 0;
    goto LABEL_44;
  }
  if (v8)
  {
    uint64_t v51 = MEMORY[0x22A689930](1, v48);
LABEL_69:
    char v59 = __RKEntityCollisionTrigger.matches(with:)(v51);
    swift_release();
    if (v59) {
      goto LABEL_41;
    }
    unint64_t v4 = 0;
    unint64_t v13 = v48 & 0xFFFFFFFFFFFFFF8;
    uint64_t v60 = v47 - 2;
    do
    {
      uint64_t v47 = v60 != v4;
      if (v60 == v4) {
        break;
      }
      unint64_t v61 = v4 + 2;
      if (v8)
      {
        uint64_t v62 = MEMORY[0x22A689930](v4 + 2, v48);
        if (__OFADD__(v61, 1)) {
          goto LABEL_80;
        }
      }
      else
      {
        if (v61 >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_85;
        }
        uint64_t v62 = *(void *)(v48 + 8 * v4 + 48);
        swift_retain();
        if (__OFADD__(v61, 1))
        {
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
      }
      char v63 = __RKEntityCollisionTrigger.matches(with:)(v62);
      swift_release();
      ++v4;
    }
    while ((v63 & 1) == 0);
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v51 = *(void *)(v48 + 40);
    swift_retain();
    goto LABEL_69;
  }
LABEL_92:
  __break(1u);
  return result;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    while (1)
    {
      int64_t v12 = v11;
      if (!v8) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_31;
      }
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_31:
      uint64_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v24 = *(void *)(v5 + 48);
        uint64_t v25 = (void *)(v24 + 16 * v23);
        BOOL v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = 0;
LABEL_45:
          outlined consume of [String : AnimationResource].Iterator._Variant();
          return v30;
        }
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          uint64_t v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_44;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    goto LABEL_45;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_30;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  char *v41;
  char *v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  void v53[2];
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  void (**v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  void (**v67)(char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (**v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;

  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v69);
  uint64_t v5 = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v65 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v61 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  int v68 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)v53 - v12;
  MEMORY[0x270FA5388](v14);
  MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v60 = (uint64_t)v53 - v19;
  uint64_t v20 = *(void *)(a2 + 16);
  if (!v20) {
    return 1;
  }
  Swift::Int v21 = *(void *)(a1 + 16);
  if (!v21) {
    return 1;
  }
  uint64_t v54 = v18;
  char v66 = v17;
  if (v20 >= v21) {
    uint64_t v22 = a1;
  }
  else {
    uint64_t v22 = a2;
  }
  if (v20 < v21) {
    a2 = a1;
  }
  unint64_t v23 = *(void *)(v22 + 56);
  unint64_t v56 = v22 + 56;
  uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
  v53[1] = ~v24;
  if (-v24 < 64) {
    uint64_t v25 = ~(-1 << -(char)v24);
  }
  else {
    uint64_t v25 = -1;
  }
  BOOL v26 = v25 & v23;
  unint64_t v55 = (unint64_t)(63 - v24) >> 6;
  uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  unint64_t v67 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v70 = a2 + 56;
  uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  char v59 = v22;
  swift_bridgeObjectRetain();
  uint64_t v73 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  BOOL v29 = (uint64_t)v68;
  while (1)
  {
    uint64_t v58 = v28;
    unint64_t v57 = v26;
    if (v26)
    {
      uint64_t v62 = (v26 - 1) & v26;
      char v63 = v28;
      uint64_t v30 = __clz(__rbit64(v26)) | (v28 << 6);
    }
    else
    {
      int64_t v31 = v28 + 1;
      if (__OFADD__(v28, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v31 >= v55) {
        goto LABEL_48;
      }
      uint64_t v32 = *(void *)(v56 + 8 * v31);
      uint64_t v33 = v28 + 1;
      if (!v32)
      {
        uint64_t v33 = v28 + 2;
        if (v28 + 2 >= v55) {
          goto LABEL_48;
        }
        uint64_t v32 = *(void *)(v56 + 8 * v33);
        if (!v32)
        {
          uint64_t v33 = v28 + 3;
          if (v28 + 3 >= v55) {
            goto LABEL_48;
          }
          uint64_t v32 = *(void *)(v56 + 8 * v33);
          if (!v32)
          {
            uint64_t v34 = v28 + 4;
            if (v28 + 4 >= v55)
            {
LABEL_48:
              swift_bridgeObjectRelease();
              uint64_t v52 = 1;
              goto LABEL_46;
            }
            uint64_t v32 = *(void *)(v56 + 8 * v34);
            if (!v32)
            {
              while (1)
              {
                uint64_t v33 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  break;
                }
                if (v33 >= v55) {
                  goto LABEL_48;
                }
                uint64_t v32 = *(void *)(v56 + 8 * v33);
                ++v34;
                if (v32) {
                  goto LABEL_28;
                }
              }
LABEL_50:
              __break(1u);
              return result;
            }
            uint64_t v33 = v28 + 4;
          }
        }
      }
LABEL_28:
      uint64_t v62 = (v32 - 1) & v32;
      char v63 = v33;
      uint64_t v30 = __clz(__rbit64(v32)) + (v33 << 6);
    }
    uint64_t v35 = *(void *)(v59 + 48);
    v72 = *(void *)(v61 + 72);
    uint64_t v36 = v60;
    outlined init with copy of UUID?(v35 + v72 * v30, v60);
    char v37 = v36;
    uint64_t v38 = v66;
    outlined init with take of UUID?(v37, v66);
    if (*(void *)(v73 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v39 = v54;
      outlined init with copy of UUID?(v38, v54);
      uint64_t v40 = *v71;
      if ((*v71)(v39, 1, v6) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v41 = v65;
        (*v64)(v65, v39, v6);
        Hasher._combine(_:)(1u);
        _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v42 = v41;
        uint64_t v38 = v66;
        (*v67)(v42, v6);
      }
      Swift::String v43 = Hasher._finalize()();
      unint64_t v44 = -1 << *(unsigned char *)(v73 + 32);
      unint64_t v45 = v43 & ~v44;
      if ((*(void *)(v70 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45)) {
        break;
      }
    }
LABEL_12:
    uint64_t result = outlined destroy of BodyTrackingComponent?(v38, &demangling cache variable for type metadata for UUID?);
    BOOL v26 = v62;
    uint64_t v28 = v63;
  }
  unint64_t v46 = ~v44;
  while (1)
  {
    outlined init with copy of UUID?(*(void *)(v73 + 48) + v45 * v72, (uint64_t)v13);
    uint64_t v47 = (uint64_t)&v5[*(int *)(v69 + 48)];
    outlined init with copy of UUID?((uint64_t)v13, (uint64_t)v5);
    outlined init with copy of UUID?(v38, v47);
    if (v40((uint64_t)v5, 1, v6) == 1) {
      break;
    }
    outlined init with copy of UUID?((uint64_t)v5, v29);
    if (v40(v47, 1, v6) == 1)
    {
      (*v67)((char *)v29, v6);
      goto LABEL_36;
    }
    unint64_t v48 = v65;
    (*v64)(v65, v47, v6);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v50 = *v67;
    uint64_t v51 = v48;
    BOOL v29 = (uint64_t)v68;
    (*v67)(v51, v6);
    v50((char *)v29, v6);
    uint64_t v38 = v66;
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    if (v49) {
      goto LABEL_45;
    }
LABEL_37:
    unint64_t v45 = (v45 + 1) & v46;
    if (((*(void *)(v70 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (v40(v47, 1, v6) != 1)
  {
LABEL_36:
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for (UUID?, UUID?));
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    goto LABEL_37;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  uint64_t v38 = v66;
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_45:
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v38, &demangling cache variable for type metadata for UUID?);
  uint64_t v52 = 0;
LABEL_46:
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return v52;
}

uint64_t __RKEntityCollisionTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = type metadata accessor for __RKEntityCollisionTrigger();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  swift_beginAccess();
  *(void *)(v7 + 24) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v5;
  uint64_t result = swift_release();
  *(_WORD *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 18) = 0;
  a1[3] = v6;
  *a1 = v7;
  return result;
}

uint64_t __RKEntityCollisionTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = v3[3];
  if (v6 && *(void *)(v6 + 16) == *(void *)(a1 + 16))
  {
    uint64_t v19 = v3[4];
    uint64_t v18 = v3[5];
    type metadata accessor for __RKEntityCollisionTrigger();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 24) = 0;
    swift_beginAccess();
    *(void *)(v16 + 24) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(v16 + 32) = v19;
LABEL_24:
    *(void *)(v16 + 40) = v18;
    swift_release();
    *(_WORD *)(v16 + 16) = 0;
    *(unsigned char *)(v16 + 18) = 0;
    return v16;
  }
  unint64_t v7 = v3[4];
  swift_bridgeObjectRetain();
  char v8 = specialized Sequence<>.contains(_:)(a1, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    return 0;
  }
  uint64_t v21 = MEMORY[0x263F8EE78];
  unint64_t v9 = v3[4];
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_6;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_23:
    uint64_t v20 = v3[3];
    uint64_t v18 = v3[5];
    type metadata accessor for __RKEntityCollisionTrigger();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 24) = 0;
    swift_beginAccess();
    *(void *)(v16 + 24) = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    *(void *)(v16 + 32) = v17;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_22;
  }
LABEL_6:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = MEMORY[0x22A689930](i, v9);
      }
      else
      {
        uint64_t v14 = *(void *)(v9 + 8 * i + 32);
        swift_retain();
      }
      if (*(void *)(v14 + 16) == *(void *)(a2 + 16))
      {
        uint64_t v15 = swift_retain();
        MEMORY[0x22A688E10](v15);
        if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      else
      {
        uint64_t v13 = swift_retain();
        MEMORY[0x22A688E10](v13);
        if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = v21;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void __RKEntityCollisionTrigger.__allocating_init()()
{
}

void __RKEntityCollisionTrigger.init()()
{
}

uint64_t __RKEntityCollisionTrigger.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityCollisionTrigger.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityCollisionTrigger.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityCollisionTrigger()
{
  return self;
}

uint64_t sub_22815986C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t method lookup function for __RKEntityCollisionTrigger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityCollisionTrigger);
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.__allocating_init(targetEntity:collidingEntities:tags:)()
{
  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t SetEntityPropertyAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t SetEntityPropertyAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of ActionEntityResolution();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SetEntityPropertyAction.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.key.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SetEntityPropertyAction.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SetEntityPropertyAction.key.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t SetEntityPropertyAction.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*SetEntityPropertyAction.value.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.animatedValueType.getter()
{
  return 0;
}

uint64_t SetEntityPropertyAction.init(targetEntity:key:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  uint64_t v14 = a6 + *(int *)(type metadata accessor for SetEntityPropertyAction() + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v14, 1, 1, a5);
  *(void *)a6 = v11;
  *(void *)(a6 + 8) = v12;
  *(unsigned char *)(a6 + 16) = v13;
  *(void *)(a6 + 24) = a2;
  *(void *)(a6 + 32) = a3;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);

  return v16(v14, a4, v15);
}

uint64_t type metadata accessor for SetEntityPropertyAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SetEntityPropertyAction<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SetEntityPropertyAction.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SetEntityPropertyAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v38 = (char *)&v32 - v9;
  type metadata accessor for SetEntityPropertyAction.CodingKeys();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v37 = a3;
  uint64_t v13 = type metadata accessor for SetEntityPropertyAction();
  uint64_t v33 = *(void *)(v13 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v18 = (char *)&v32 + *(int *)(v17 + 40) - v15;
  uint64_t v19 = *(void (**)(__n128))(*(void *)(a2 - 8) + 56);
  uint64_t v40 = v18;
  v19(v14);
  uint64_t v20 = a1[3];
  uint64_t v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  uint64_t v21 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    uint64_t v24 = v41;
    uint64_t v25 = v42;
    BOOL v26 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  }
  else
  {
    uint64_t v22 = (uint64_t)v38;
    char v46 = 0;
    lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
    uint64_t v23 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v27 = v45;
    *(_OWORD *)uint64_t v16 = v44;
    v16[16] = v27;
    LOBYTE(v44) = 1;
    *((void *)v16 + 3) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v16 + 4) = v28;
    static SetEntityPropertyAction.decodeValueIfPresent(from:forKey:)(a2, v22);
    uint64_t v29 = v42;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v23);
    (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v40, v38, v41);
    uint64_t v30 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v34, v16, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v13);
  }
}

uint64_t type metadata accessor for SetEntityPropertyAction.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SetEntityPropertyAction<A>(void *a1, uint64_t a2)
{
  return SetEntityPropertyAction.encode(to:)(a1, a2);
}

uint64_t SetEntityPropertyAction.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v33 = (char *)&v28 - v8;
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v36 = a2;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v32 = v6;
  uint64_t v29 = v11;
  uint64_t v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetEntityPropertyAction.CodingKeys();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v28 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = *((unsigned char *)v3 + 16);
  uint64_t v17 = v3;
  long long v38 = *v3;
  char v39 = v16;
  char v40 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  uint64_t v18 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v18) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v20 = v33;
  uint64_t v21 = v34;
  uint64_t v37 = v13;
  uint64_t v23 = v35;
  uint64_t v22 = v36;
  LOBYTE(v38) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v28 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, (uint64_t)v17 + *(int *)(v22 + 40), v23);
  uint64_t v25 = v31;
  uint64_t v24 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v20, 1, v32) == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v20, v23);
  }
  else
  {
    uint64_t v26 = (uint64_t)v30;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v30, v20, v24);
    static SetEntityPropertyAction.encodeValue(_:to:forKey:)(v26, (uint64_t)v15, 2, v24, v29);
    uint64_t v27 = v37;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
  }
}

unint64_t SetEntityPropertyAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SetEntityPropertyAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t SetEntityPropertyAction.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6E45746567726174;
  }
  if (a1 == 1) {
    return 7955819;
  }
  return 0x65756C6176;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = SetEntityPropertyAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SetEntityPropertyAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys()
{
  return SetEntityPropertyAction.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SetEntityPropertyAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized SetEntityPropertyAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t static SetEntityPropertyAction.decodeValueIfPresent(from:forKey:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for SetEntityPropertyAction.CodingKeys();
  swift_getWitnessTable();
  type metadata accessor for KeyedDecodingContainer();
  if (KeyedDecodingContainer.contains(_:)())
  {
    uint64_t result = static SetEntityPropertyAction.decodeValue(from:forKey:)();
    if (v2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v6, 1, a1);
}

uint64_t static SetEntityPropertyAction.encodeValue(_:to:forKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a5;
  int v53 = a3;
  uint64_t v54 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  char v46 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v47 = (char *)&v44 - v10;
  MEMORY[0x270FA5388](v11);
  unint64_t v48 = (char *)&v44 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (char *)&v44 - v14;
  MEMORY[0x270FA5388](v15);
  char v50 = (char *)&v44 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v51 = (char *)&v44 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v44 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v44 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v44 - v29;
  __n128 v32 = MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v44 - v33;
  uint64_t v52 = v7;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v35((char *)&v44 - v33, a1, v36, v32);
  if (!swift_dynamicCast())
  {
    char v45 = (void (*)(char *, uint64_t, uint64_t))v35;
    char v37 = v53;
    if (swift_dynamicCast())
    {
      v45(v27, a1, a4);
      swift_dynamicCast();
      LOBYTE(v57) = v37;
      type metadata accessor for SetEntityPropertyAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedEncodingContainer();
      KeyedEncodingContainer.encode(_:forKey:)();
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCast())
    {
      v45(v24, a1, a4);
      swift_dynamicCast();
      *(void *)&long long v57 = v60;
      char v56 = v37;
      type metadata accessor for SetEntityPropertyAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedEncodingContainer();
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      char v38 = v37;
      if (swift_dynamicCast())
      {
        v45(v21, a1, a4);
        swift_dynamicCast();
        long long v57 = v60;
        char v56 = v37;
        type metadata accessor for SetEntityPropertyAction.CodingKeys();
        swift_getWitnessTable();
        type metadata accessor for KeyedEncodingContainer();
        char v39 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
        char v40 = &demangling cache variable for type metadata for SIMD3<Float>;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        if (!swift_dynamicCast())
        {
          type metadata accessor for simd_quatf(0);
          if (swift_dynamicCast())
          {
            v45(v50, a1, a4);
            swift_dynamicCast();
            long long v57 = v60;
            char v56 = v37;
            type metadata accessor for SetEntityPropertyAction.CodingKeys();
            swift_getWitnessTable();
            type metadata accessor for KeyedEncodingContainer();
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          }
          else
          {
            if (swift_dynamicCast())
            {
              v45(v49, a1, a4);
              swift_dynamicCast();
              LOBYTE(v57) = v37;
              type metadata accessor for SetEntityPropertyAction.CodingKeys();
              swift_getWitnessTable();
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
            }
            int v42 = swift_dynamicCast();
            uint64_t v43 = v45;
            if (v42)
            {
              v45(v48, a1, a4);
              swift_dynamicCast();
              LOBYTE(v57) = v38;
              type metadata accessor for SetEntityPropertyAction.CodingKeys();
              swift_getWitnessTable();
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
            }
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRelease();
              v43(v47, a1, a4);
              swift_dynamicCast();
              LOBYTE(v57) = v38;
              type metadata accessor for SetEntityPropertyAction.CodingKeys();
              swift_getWitnessTable();
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              swift_bridgeObjectRelease();
              return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
            }
            if (!swift_dynamicCast())
            {
              type metadata accessor for SetEntityPropertyAction.DecodingErrors();
              swift_getWitnessTable();
              swift_allocError();
              swift_willThrow();
              return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
            }
            v43(v46, a1, a4);
            swift_dynamicCast();
            long long v57 = v60;
            long long v58 = v61;
            long long v59 = v62;
            char v56 = v38;
            type metadata accessor for SetEntityPropertyAction.CodingKeys();
            swift_getWitnessTable();
            type metadata accessor for KeyedEncodingContainer();
            lazy protocol witness table accessor for type Transform and conformance Transform();
          }
          goto LABEL_12;
        }
        v45(v51, a1, a4);
        swift_dynamicCast();
        long long v57 = v60;
        char v56 = v37;
        type metadata accessor for SetEntityPropertyAction.CodingKeys();
        swift_getWitnessTable();
        type metadata accessor for KeyedEncodingContainer();
        char v39 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
        char v40 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
      }
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v39, v40);
    }
LABEL_12:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
  }
  ((void (*)(char *, uint64_t, uint64_t))v35)(v30, a1, a4);
  swift_dynamicCast();
  LOBYTE(v57) = v53;
  type metadata accessor for SetEntityPropertyAction.CodingKeys();
  swift_getWitnessTable();
  type metadata accessor for KeyedEncodingContainer();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, a4);
}

uint64_t type metadata completion function for SetEntityPropertyAction()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  if (*(_DWORD *)(v6 + 84)) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v11 = ((v8 + 40) & ~(unint64_t)v8) + v10;
  int v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *(void *)(a2 + 8);
    char v19 = *(unsigned char *)(a2 + 16);
    outlined copy of ActionEntityResolution();
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)(a1 + 16) = v19;
    unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v20 + 24) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(void *)(v20 + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    uint64_t v21 = (const void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + v9 + 40) & ~v9);
    uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_bridgeObjectRetain();
    if (v22(v21, 1, v5))
    {
      memcpy((void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 40) & v16), v21, v10);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 40) & v16, v21, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v7 + 56))(((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 40) & v16, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t destroy for SetEntityPropertyAction(uint64_t a1, uint64_t a2)
{
  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = ((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    int v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

uint64_t initializeWithCopy for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v9 + 24) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v9 + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)((v13 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  uint64_t v15 = (const void *)((v13 + 40 + v10) & ~v13);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84)) {
      size_t v17 = *(void *)(v12 + 64);
    }
    else {
      size_t v17 = *(void *)(v12 + 64) + 1;
    }
    memcpy(v14, v15, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v14, v15, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of ActionEntityResolution();
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v9 + 24) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v9 + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)((v13 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  uint64_t v15 = (void *)((v13 + 40 + v10) & ~v13);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v10) = v16(v14, 1, v11);
  int v17 = v16(v15, 1, v11);
  if (v10)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
    int v18 = *(_DWORD *)(v12 + 84);
    size_t v19 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, v11);
      return a1;
    }
    uint64_t v21 = *(void (**)(void *, uint64_t))(v12 + 8);
    uint64_t v20 = v12 + 8;
    v21(v14, v11);
    int v18 = *(_DWORD *)(v20 + 76);
    size_t v19 = *(void *)(v20 + 56);
  }
  if (v18) {
    size_t v22 = v19;
  }
  else {
    size_t v22 = v19 + 1;
  }
  memcpy(v14, v15, v22);
  return a1;
}

uint64_t initializeWithTake for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)((v6 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  char v8 = (const void *)((v6 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

uint64_t assignWithTake for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v7 + 24) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v7 + 32) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v11);
  uint64_t v13 = (void *)((v11 + 40 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  int v15 = v14(v13, 1, v9);
  if (v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      return a1;
    }
    int v16 = *(_DWORD *)(v10 + 84);
    size_t v17 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      return a1;
    }
    size_t v19 = *(void (**)(void *, uint64_t))(v10 + 8);
    uint64_t v18 = v10 + 8;
    v19(v12, v9);
    int v16 = *(_DWORD *)(v18 + 76);
    size_t v17 = *(void *)(v18 + 56);
  }
  if (v16) {
    size_t v20 = v17;
  }
  else {
    size_t v20 = v17 + 1;
  }
  memcpy(v12, v13, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetEntityPropertyAction(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 40) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v8 + 40) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *(void *)(v17 + 32);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(unsigned char *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for SetEntityPropertyAction(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 40) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero((void *)a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          *(unsigned char *)(a1 + 2) = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *(unsigned char *)a1 = v19;
        }
      }
    }
    else
    {
      bzero((void *)a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        *(unsigned char *)(a1 + v13) = v18;
        return;
      case 2:
        *(_WORD *)(a1 + v13) = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)(a1 + v13) = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      *(unsigned char *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x22815C3B4);
    case 4:
      *(_DWORD *)(a1 + v13) = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v21 = (unsigned char *)((v20 + v11 + 40) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26((v20 + v11 + 40) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)uint64_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)uint64_t v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v21 = v23;
                  break;
                default:
                  *uint64_t v21 = v23;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v20 + 24) = a2 ^ 0x80000000;
          *(void *)(v20 + 32) = 0;
        }
        else
        {
          *(void *)(v20 + 32) = a2 - 1;
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for SetEntityPropertyAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22815C4B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in SetEntityPropertyAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SetEntityPropertyAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in SetEntityPropertyAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t static SetEntityPropertyAction.decodeValue(from:forKey:)()
{
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for SetEntityPropertyAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v0) {
      return result;
    }
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for SetEntityPropertyAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v0) {
      return result;
    }
    return swift_dynamicCast();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for SetEntityPropertyAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t v2 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
    int v3 = &demangling cache variable for type metadata for SIMD2<Float>;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for SetEntityPropertyAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedDecodingContainer();
      uint64_t v2 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
      int v3 = &demangling cache variable for type metadata for SIMD3<Float>;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for simd_quatf(0);
        if (swift_dynamicCastMetatype())
        {
          type metadata accessor for SetEntityPropertyAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else if (swift_dynamicCastMetatype())
        {
          type metadata accessor for SetEntityPropertyAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else if (swift_dynamicCastMetatype())
        {
          type metadata accessor for SetEntityPropertyAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else if (swift_dynamicCastMetatype())
        {
          type metadata accessor for SetEntityPropertyAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else
        {
          if (!swift_dynamicCastMetatype())
          {
            type metadata accessor for SetEntityPropertyAction.DecodingErrors();
            swift_getWitnessTable();
            swift_allocError();
            return swift_willThrow();
          }
          type metadata accessor for SetEntityPropertyAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Transform and conformance Transform();
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        return result;
      }
      type metadata accessor for SetEntityPropertyAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedDecodingContainer();
      uint64_t v2 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
      int v3 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
    }
  }
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v2, v3);
  uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v0) {
    return swift_dynamicCast();
  }
  return result;
}

uint64_t SetEntityPropertyActionHandler.actionSkipped(event:)(uint64_t a1, uint64_t a2)
{
  return specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for ActionHandlerProtocol.actionStarted(event:) in conformance SetEntityPropertyActionHandler<A>(uint64_t a1, uint64_t a2)
{
  return SetEntityPropertyActionHandler.actionSkipped(event:)(a1, a2);
}

uint64_t specialized SetEntityPropertyAction.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t type metadata accessor for SetEntityPropertyAction.DecodingErrors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SetEntityPropertyActionHandler()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for SetEntityPropertyAction.DecodingErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22815CCA8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in SetEntityPropertyAction<A>.DecodingErrors()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SetEntityPropertyActionHandler<A>()
{
  return &protocol witness table for SetEntityPropertyAction<A>;
}

uint64_t specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)&v41 - v9;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v48 = 0;
    unint64_t v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v18._countAndFlagsBits = 0x2072656C646E6148;
    v18._object = (void *)0xEC00000020726F66;
    String.append(_:)(v18);
    *(void *)&long long v45 = type metadata accessor for SetEntityPropertyAction();
    swift_getMetatypeMetadata();
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000030;
    v20._object = (void *)0x8000000228351880;
    String.append(_:)(v20);
    specialized static AnimationLogger.logError(_:)(v48, v49);
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = Strong;
  uint64_t v43 = v5;
  uint64_t v13 = type metadata accessor for SetEntityPropertyAction();
  uint64_t v14 = a1 + *(int *)(type metadata accessor for ActionEvent() + 36);
  if ((*(unsigned char *)(v14 + 16) & 1) == 0)
  {
    uint64_t v48 = *(void *)v14;
    swift_bridgeObjectRetain();
    uint64_t v21 = Entity.subscript.getter(&v48);
    outlined consume of ActionEntityResolution();
    if (v21) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    outlined consume of ActionEntityResolution();
LABEL_14:
    uint64_t v48 = 0;
    unint64_t v49 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v24._countAndFlagsBits = 0x2072656C646E6148;
    v24._object = (void *)0xEC00000020726F66;
    String.append(_:)(v24);
    *(void *)&long long v45 = v13;
    swift_getMetatypeMetadata();
    v25._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD00000000000003BLL;
    v26._object = (void *)0x8000000228353B10;
    String.append(_:)(v26);
    REEntityGetName();
    v27._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 10535;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    specialized static AnimationLogger.logError(_:)(v48, v49);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = SceneNullable;
  uint64_t v44 = v12;
  id v17 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v17)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v16);
  }
  uint64_t v12 = v44;
  uint64_t v21 = Scene.findEntity(named:)();
  swift_release();
  outlined consume of ActionEntityResolution();
  if (!v21) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v44 = v12;
  uint64_t v22 = v14 + *(int *)(v13 + 40);
  uint64_t v23 = v43;
  int v42 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v42(v10, v22, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v4);
LABEL_19:
    uint64_t v47 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
  if (!swift_dynamicCast()) {
    goto LABEL_19;
  }
  if (*((void *)&v46 + 1))
  {
    outlined init with take of BindableDataInternal(&v45, (uint64_t)&v48);
    uint64_t v30 = v50;
    uint64_t v31 = v51;
    __swift_project_boxed_opaque_existential_1(&v48, v50);
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(v31 + 56))(*(void *)(v14 + 24), *(void *)(v14 + 32), v21, v30, v31);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  }
LABEL_20:
  outlined destroy of BindableDataInternal?((uint64_t)&v45);
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v32._countAndFlagsBits = 0x2072656C646E6148;
  v32._object = (void *)0xEC00000020726F66;
  String.append(_:)(v32);
  *(void *)&long long v45 = v13;
  swift_getMetatypeMetadata();
  v33._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._object = (void *)0x8000000228353ED0;
  v34._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v34);
  v42(v7, v22, v4);
  v35._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0xD000000000000031;
  v36._object = (void *)0x8000000228353F00;
  String.append(_:)(v36);
  uint64_t v37 = *(void *)(v14 + 24);
  char v38 = *(void **)(v14 + 32);
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 39;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  specialized static AnimationLogger.logError(_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t outlined destroy of BindableDataInternal?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AudioResource.ChannelLayoutError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22815D444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.ChannelLayoutError()
{
  return &type metadata for AudioResource.ChannelLayoutError;
}

ValueMetadata *type metadata accessor for AudioResource.CoreREError()
{
  return &type metadata for AudioResource.CoreREError;
}

unint64_t lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError;
  if (!lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError;
  if (!lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError);
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioResource.ChannelLayoutError()
{
  if (*v0) {
    return 0xD000000000000046;
  }
  else {
    return 0xD00000000000003DLL;
  }
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioResource.Error()
{
  return 0x206E776F6E6B6E55;
}

unsigned char *storeEnumTagSinglePayload for AudioResource.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22815D63CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Error()
{
  return &type metadata for AudioResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Error and conformance AudioResource.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error;
  if (!lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error;
  if (!lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error);
  }
  return result;
}

uint64_t __RKWaitAction.__allocating_init(duration:block:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 120) = a2;
  *(void *)(v6 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(void *)(v6 + 184) = 0;
  *(float *)(v6 + 108) = a3;
  *(void *)(v6 + 112) = a1;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.init(duration:block:)(uint64_t a1, uint64_t a2, float a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(void *)(v3 + 184) = 0;
  *(float *)(v3 + 108) = a3;
  *(void *)(v3 + 112) = a1;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v17 = StaticString.description.getter();
  uint64_t v18 = v2;
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v5 = v17;
  uint64_t v4 = v18;
  uint64_t v6 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(unsigned char *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 96);
    char v8 = *(unsigned char *)(v1 + 104);
    uint64_t v9 = 1;
    *(void *)(v1 + 96) = 1;
    *(unsigned char *)(v1 + 104) = 1;
    uint64_t v17 = v7;
    LOBYTE(v18) = v8;
    __RKEntityAction.state.didset((uint64_t)&v17);
    *(void *)(v1 + 184) = 0;
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v11 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = partial apply for closure #1 in __RKWaitAction.perform(with:);
    *(void *)(v1 + 40) = v10;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    *(double *)(v1 + 176) = *(float *)(v1 + 108);
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v15, (uint64_t)partial apply for closure #2 in __RKWaitAction.perform(with:), v12, &v17);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v17, v1 + 136);
    swift_endAccess();
    uint64_t v17 = v5;
    uint64_t v18 = v4;
    uint64_t v13 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v13, &v17);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_22815DA00()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t closure #1 in __RKWaitAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 136;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v2, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v6, (uint64_t)v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v5, v5[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v6, v2);
    swift_endAccess();
    Swift::String v3 = *(void (**)(uint64_t))(v1 + 112);
    uint64_t v4 = swift_retain();
    v3(v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in __RKWaitAction.perform(with:)()
{
  return closure #1 in __RKWaitAction.perform(with:)();
}

uint64_t closure #2 in __RKWaitAction.perform(with:)(uint64_t a1)
{
  double v1 = *(double *)(a1 + 8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    double v4 = *(double *)(result + 176);
    double v5 = v1 + *(double *)(result + 184);
    *(double *)(result + 184) = v5;
    if (v4 + -0.008 <= v5)
    {
      swift_beginAccess();
      uint64_t v6 = *(void *)(v3 + 96);
      char v7 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v8 = v6;
      char v9 = v7;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t partial apply for closure #2 in __RKWaitAction.perform(with:)(uint64_t a1)
{
  return closure #2 in __RKWaitAction.perform(with:)(a1);
}

uint64_t __RKWaitAction.reversed()()
{
  int v1 = *(_DWORD *)(v0 + 108);
  type metadata accessor for __RKWaitAction();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(void *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 108) = v1;
  *(void *)(v2 + 112) = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 108);
  uint64_t v5 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  uint64_t v6 = type metadata accessor for __RKWaitAction();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 120) = v4;
  *(void *)(v7 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(void *)(v7 + 184) = 0;
  *(_DWORD *)(v7 + 108) = v3;
  *(void *)(v7 + 112) = v5;
  swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(0);
  a1[3] = v6;
  *a1 = result;
  return result;
}

uint64_t __RKWaitAction.description.getter()
{
  v0._countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 539831584;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2108704;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  Float.write<A>(to:)();
  return 0;
}

void __RKWaitAction.__allocating_init(targetEntity:)()
{
}

void __RKWaitAction.init(targetEntity:)()
{
}

uint64_t __RKWaitAction.__ivar_destroyer()
{
  swift_release();
  return outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKWaitAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKWaitAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKWaitAction()
{
  return self;
}

uint64_t method lookup function for __RKWaitAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKWaitAction);
}

uint64_t dispatch thunk of __RKWaitAction.__allocating_init(duration:block:)()
{
  return (*(uint64_t (**)(void))(v0 + 664))();
}

unint64_t one-time initialization function for instanceRegistry()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__ARReferenceProvider>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static __ARReferenceProvider.instanceRegistry = v0;
  return result;
}

uint64_t static __ARReferenceProvider.shared.getter()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v3);
  if (one-time initialization token for instanceRegistry != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v1 = specialized AssetServiceScopedRegistry.instance(for:)(v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1;
}

uint64_t static __ARReferenceProvider.instance(for:)(void *a1)
{
  if (one-time initialization token for instanceRegistry != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v2 = specialized AssetServiceScopedRegistry.instance(for:)(a1);
  swift_release();
  return v2;
}

void __ARReferenceProvider.fetchPlugin(forGroup:)(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v5, (uint64_t)v9);
      uint64_t v6 = v10;
      uint64_t v7 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      v8._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      LOBYTE(v6) = String.hasPrefix(_:)(v8);
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with copy of __REAssetService((uint64_t)v9, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
LABEL_6:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

Swift::Bool __swiftcall __ARReferenceProvider.supportsGroup(named:)(Swift::String named)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v4, (uint64_t)v10);
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      v7._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      LOBYTE(v5) = String.hasPrefix(_:)(v7);
      swift_bridgeObjectRelease();
      if (v5) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)&v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (*((void *)&v14 + 1))
    {
      Swift::Bool v8 = 1;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_6:
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  Swift::Bool v8 = 0;
LABEL_10:
  outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v13);
  return v8;
}

uint64_t __ARReferenceProvider.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_6:
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
LABEL_7:
    uint64_t result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v23);
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  uint64_t v12 = v7 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of __REAssetService(v12, (uint64_t)v20);
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v15._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    LOBYTE(v13) = String.hasPrefix(_:)(v15);
    swift_bridgeObjectRelease();
    if (v13) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v12 += 40;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with copy of __REAssetService((uint64_t)v20, (uint64_t)&v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (!*((void *)&v24 + 1)) {
    goto LABEL_7;
  }
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  uint64_t v18 = v27;
  uint64_t v17 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 8) + 8))(a1, a2, a3, a4, v18);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
LABEL_6:
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
LABEL_7:
    uint64_t result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v25);
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  uint64_t v14 = v8 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of __REAssetService(v14, (uint64_t)v22);
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v17._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
    LOBYTE(v15) = String.hasPrefix(_:)(v17);
    swift_bridgeObjectRelease();
    if (v15) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v14 += 40;
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)&v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_7;
  }
  outlined init with take of BindableDataInternal(&v25, (uint64_t)v28);
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v19 + 8) + 16))(a1, a2, a3, a4, v20, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t __ARReferenceProvider.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __ARReferenceProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

double protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __ARReferenceProvider@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __ARReferenceProvider.fetchPlugin(forGroup:)((uint64_t)&v13);
  if (v14)
  {
    outlined init with take of BindableDataInternal(&v13, (uint64_t)v15);
    uint64_t v10 = v16;
    uint64_t v11 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8) + 8))(a1, a2, a3, a4, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v13);
    double result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __ARReferenceProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  __ARReferenceProvider.fetchPlugin(forGroup:)((uint64_t)&v15);
  if (v16)
  {
    outlined init with take of BindableDataInternal(&v15, (uint64_t)v17);
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v13 + 8) + 16))(a1, a2, a3, a4, v12, a6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v15);
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t outlined destroy of __ARReferenceProvidingPlugin?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __ARReferenceProvidingPlugin?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for __ARReferenceProvider()
{
  return self;
}

uint64_t method lookup function for __ARReferenceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __ARReferenceProvider);
}

uint64_t dispatch thunk of __ARReferenceProvider.supportsGroup(named:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t DynamicLightShadowComponent.castsShadow.getter()
{
  return *v0;
}

uint64_t DynamicLightShadowComponent.castsShadow.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*DynamicLightShadowComponent.castsShadow.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::DynamicLightShadowComponent __swiftcall DynamicLightShadowComponent.init(castsShadow:)(RealityFoundation::DynamicLightShadowComponent castsShadow)
{
  v1->castsShadow = castsShadow.castsShadow;
  return castsShadow;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance DynamicLightShadowComponent@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REDynamicLightShadowComponentGetCastsShadow();
  *a1 = result;
  return result;
}

uint64_t static DynamicLightShadowComponent.__fromCore(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REDynamicLightShadowComponentGetCastsShadow();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DynamicLightShadowComponent()
{
  REDynamicLightShadowComponentSetCastsShadow();

  return RENetworkMarkComponentDirty();
}

uint64_t DynamicLightShadowComponent.__toCore(_:)()
{
  REDynamicLightShadowComponentSetCastsShadow();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DynamicLightShadowComponent(_DWORD *a1@<X8>)
{
  *a1 = 78;
}

void static DynamicLightShadowComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 78;
}

unsigned char *storeEnumTagSinglePayload for DynamicLightShadowComponent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22815EC94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicLightShadowComponent()
{
  return &type metadata for DynamicLightShadowComponent;
}

uint64_t __RKVisibilityShowPopAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityShowPopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowPopAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 75, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #1 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 88, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #2 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x263F8EE78]);
    uint64_t v13 = &outlined read-only object #0 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  uint64_t v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  uint64_t v20 = &rawValue[6 * v18];
  uint64_t v20[2] = v25;
  void v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 MeshResource.GenerateTextOptions.containerFrame.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

double MeshResource.GenerateTextOptions.containerFrame.setter(uint64_t a1)
{
  outlined init with take of CGRect?(a1, (uint64_t)v5);
  char v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)uint64_t v1 = v5[0];
  *(_OWORD *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*MeshResource.GenerateTextOptions.containerFrame.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double MeshResource.GenerateTextOptions.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

BOOL static MeshResource.ShapeExtrusionOptions.ChamferMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MeshResource.ShapeExtrusionOptions.ChamferMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MeshResource.ShapeExtrusionOptions.ChamferMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

int32x4_t MeshResource.ShapeExtrusionOptions.MaterialAssignment.init(assignAll:)@<Q0>(unsigned int a1@<W0>, int32x4_t *a2@<X8>)
{
  int32x4_t result = vdupq_n_s32(a1);
  *a2 = result;
  a2[1].i32[0] = a1;
  return result;
}

uint64_t MeshResource.ShapeExtrusionOptions.MaterialAssignment.init(front:back:extrusion:frontChamfer:backChamfer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

double MeshResource.ShapeExtrusionOptions.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  char v2 = (_OWORD *)(a1 + 16);
  *(void *)a1 = 1048576000;
  *(unsigned char *)(a1 + 8) = 0;
  outlined destroy of CGPathProviding?(a1 + 16);
  *char v2 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(void *)&double result = 6;
  *(_OWORD *)(a1 + 64) = xmmword_22833CBF0;
  *(unsigned char *)(a1 + 80) = 2;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t outlined destroy of CGPathProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MeshResource.ShapeExtrusionOptions.extrusionMethod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  *(void *)a1 = *(void *)v1;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v2, v3);
}

uint64_t outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, unsigned __int8 a2)
{
  if (a2 - 1 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MeshResource.ShapeExtrusionOptions.extrusionMethod.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, unsigned __int8 a2)
{
  if (a2 - 1 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.extrusionMethod.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CGPathProviding?(v1 + 16, a1);
}

uint64_t outlined init with copy of CGPathProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter(uint64_t a1)
{
  return outlined assign with take of CGPathProviding?(a1, v1 + 16);
}

uint64_t outlined assign with take of CGPathProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MeshResource.ShapeExtrusionOptions._chamferProfileStorage.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float MeshResource.ShapeExtrusionOptions.chamferRadius.getter()
{
  return *(float *)(v0 + 56);
}

void MeshResource.ShapeExtrusionOptions.chamferRadius.setter(float a1)
{
  *(float *)(v1 + 56) = a1;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferRadius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.boundaryResolution.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 64);
}

void *MeshResource.ShapeExtrusionOptions.boundaryResolution.setter(void *result)
{
  *(void *)(v1 + 64) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.boundaryResolution.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.chamferResolution.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 72);
}

void *MeshResource.ShapeExtrusionOptions.chamferResolution.setter(void *result)
{
  *(void *)(v1 + 72) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferResolution.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.chamferMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 80);
}

unsigned char *MeshResource.ShapeExtrusionOptions.chamferMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 80) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.ShapeExtrusionOptions.materialAssignment.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = *(_DWORD *)(v1 + 100);
  __n128 result = *(__n128 *)(v1 + 84);
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

__n128 MeshResource.ShapeExtrusionOptions.materialAssignment.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 84) = *a1;
  *(_DWORD *)(v1 + 100) = v2;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.materialAssignment.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.init(extruding:textOptions:extrusionOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = *(unsigned char *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v9;
  char v17 = v8;
  uint64_t v10 = extrude(text:textOptions:shapeOptions:)(a1, (uint64_t)v16, a3);
  if (v4)
  {
    outlined destroy of MeshResource.ShapeExtrusionOptions(a3);
    uint64_t v11 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  }
  else
  {
    uint64_t v13 = specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v3 + 128))(v13);
    *(void *)&v16[0] = v5;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    outlined destroy of MeshResource.ShapeExtrusionOptions(a3);
    uint64_t v15 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
    if (v14) {
      swift_release_n();
    }
    else {
      swift_release();
    }
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  long long v5;

  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 64) = v5;
  *(unsigned char *)(v4 + 144) = *(unsigned char *)(a2 + 32);
  return MEMORY[0x270FA2498](MeshResource.init(extruding:textOptions:extrusionOptions:), 0, 0);
}

uint64_t outlined destroy of MeshResource.ShapeExtrusionOptions(uint64_t a1)
{
  return a1;
}

uint64_t MeshResource.init(extruding:textOptions:extrusionOptions:)()
{
  uint64_t v10 = v0;
  char v1 = *(unsigned char *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 64);
  v8[0] = *(_OWORD *)(v0 + 48);
  v8[1] = v4;
  char v9 = v1;
  *(void *)(v0 + 80) = extrude(text:textOptions:shapeOptions:)(v2, (uint64_t)v8, v3);
  *(void *)(v0 + 88) = 0;
  type metadata accessor for MainActor();
  *(void *)(v0 + 96) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](MeshResource.init(extruding:textOptions:extrusionOptions:), v6, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  char v1 = v0[11];
  uint64_t v2 = v0[10];
  swift_release();
  v0[13] = specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(v2);
  v0[14] = v1;
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v3 = MeshResource.init(extruding:textOptions:extrusionOptions:);
  }
  else {
    uint64_t v3 = MeshResource.init(extruding:textOptions:extrusionOptions:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  char v1 = (*(uint64_t (**)(void))(v0[5] + 128))(v0[13]);
  v0[15] = v1;
  v0[2] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = MeshResource.init(extruding:textOptions:extrusionOptions:);
  uint64_t v3 = v0[5];
  return RequestLoadable.awaitForResourceSharing()(v3, (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = MeshResource.init(extruding:textOptions:extrusionOptions:);
  }
  else {
    uint64_t v2 = MeshResource.init(extruding:textOptions:extrusionOptions:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  char v1 = v0[3];
  outlined destroy of MeshResource.ShapeExtrusionOptions(v0[4]);
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  char v1 = v0[3];
  outlined destroy of MeshResource.ShapeExtrusionOptions(v0[4]);
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  long long v4 = v0[15];
  return v3(v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  char v1 = v0[3];
  outlined destroy of MeshResource.ShapeExtrusionOptions(v0[4]);
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release_n();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(const CGPath *a1, uint64_t a2)
{
  uint64_t v6 = extrude(path:options:)(a1, a2);
  if (v3)
  {

    outlined destroy of MeshResource.ShapeExtrusionOptions(a2);
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = 32;
      do
      {
        memcpy(__dst, (const void *)(v7 + v9), sizeof(__dst));
        uint64_t v10 = ExtrudedShapeDescriptor.allDescriptors.getter();
        specialized Array.append<A>(contentsOf:)((uint64_t)v10);
        v9 += 520;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v14;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = MEMORY[0x263F8EE78];
    }
    uint64_t v2 = MeshResource.init(from:)(v11);

    outlined destroy of MeshResource.ShapeExtrusionOptions(a2);
  }
  return v2;
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](MeshResource.init(extruding:extrusionOptions:), 0, 0);
}

uint64_t MeshResource.init(extruding:extrusionOptions:)()
{
  uint64_t v10 = v0;
  uint64_t v1 = extrude(path:options:)(*(const CGPath **)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 32;
    do
    {
      memcpy(__dst, (const void *)(v1 + v3), sizeof(__dst));
      long long v4 = ExtrudedShapeDescriptor.allDescriptors.getter();
      specialized Array.append<A>(contentsOf:)((uint64_t)v4);
      v3 += 520;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  *uint64_t v6 = v0;
  v6[1] = MeshResource.init(extruding:extrusionOptions:);
  return MeshResource.init(from:)(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 24);

  outlined destroy of MeshResource.ShapeExtrusionOptions(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 56);
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of MeshResource.ShapeExtrusionOptions(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = MeshResource.init(extruding:extrusionOptions:);
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v5 = MeshResource.init(extruding:extrusionOptions:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

unint64_t lazy protocol witness table accessor for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode;
  if (!lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode);
  }
  return result;
}

uint64_t dispatch thunk of CGPathProviding.cgPath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for MeshResource.GenerateTextOptions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.GenerateTextOptions()
{
  return &type metadata for MeshResource.GenerateTextOptions;
}

uint64_t destroy for MeshResource.ShapeExtrusionOptions(uint64_t a1)
{
  uint64_t result = outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a1, *(unsigned char *)(a1 + 8));
  if (*(void *)(a1 + 40))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return result;
}

uint64_t initializeWithCopy for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 32);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 32) = v10;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithCopy for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v8)
    {
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    long long v9 = *(_OWORD *)(a2 + 16);
    long long v10 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    goto LABEL_8;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_8:
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithTake for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.CurveStrokeResolution()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.CurveStrokeResolution;
}

unsigned char *storeEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions.ChamferMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22816065CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.ChamferMode()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.ChamferMode;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.MaterialAssignment()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.MaterialAssignment;
}

uint64_t initializeBufferWithCopyOfBuffer for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1)
{
  return outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  return a1;
}

uint64_t assignWithTake for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v4, v5);
  return a1;
}

uint64_t destructiveInjectEnumTag for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.ExtrusionMethod()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.ExtrusionMethod;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  unsigned __int8 v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TextureResource.OptionError.errorDescription.getter(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    _StringGuts.grow(_:)(56);
    unint64_t v6 = 0xD000000000000035;
    unint64_t v5 = 0x800000022835AAC0;
  }
  else
  {
    _StringGuts.grow(_:)(54);
    unint64_t v5 = 0x800000022835AB00;
    unint64_t v6 = 0xD000000000000033;
  }
  String.append(_:)(*(Swift::String *)&v6);
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.OptionError()
{
  return TextureResource.OptionError.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.ExportError()
{
  uint64_t v1 = *v0;
  if (v0[2])
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    return Error.localizedDescription.getter();
  }
  return v1;
}

uint64_t static TextureResource.maybeCompress(textureAsset:options:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized _NativeDictionary.filter(_:)(v5, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized _NativeDictionary.filter(_:)(v7, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease_n();
  *a2 = v8;
  if (!*(void *)(v6 + 16)) {
    return swift_release();
  }
  long long v9 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(a1, v6);
  uint64_t result = swift_release();
  if (!v2)
  {
    if (v9)
    {
      uint64_t v11 = swift_retain();
      ((void (*)(uint64_t))v9)(v11);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
    }
  }
  return result;
}

uint64_t static TextureResource.exportKTX(contentsOf:to:compilationOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static TextureResource.exportKTX(contentsOf:to:options:)(a1, a2, a3);
}

uint64_t static TextureResource.exportKTX(contentsOf:to:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v31 = v4;
  swift_bridgeObjectRetain();
  specialized static TextureResource.importTextureData(contentsOf:options:)();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)&v35);
  uint64_t v6 = v37;
  uint64_t v7 = v38;
  __swift_project_boxed_opaque_existential_1(&v35, v37);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  static TextureResource.maybeCompress(textureAsset:options:)(TextureAssetFromData, (uint64_t *)&v31);
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v9, (uint64_t)&v33);
  if (v34)
  {
    outlined init with take of BindableDataInternal(&v33, (uint64_t)&v35);
    uint64_t v11 = v37;
    uint64_t v12 = v38;
    __swift_project_boxed_opaque_existential_1(&v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    *(void *)&long long v33 = 0;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    char v13 = _RERenderManagerExportTextureAssetToKTXWithErrorHandling();
    swift_release();
    if (v13)
    {
      if (*(void *)(v31 + 16))
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)logger);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          os_log_type_t type = v16;
          char v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          uint64_t v32 = v29;
          *(_DWORD *)char v17 = 136315138;
          buf = v17;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any].Keys);
          lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v18 = Sequence<>.joined(separator:)();
          unint64_t v20 = v19;
          swift_bridgeObjectRelease();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_227DD2000, v15, type, "Unexpected options %s", buf, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v29, -1, -1);
          MEMORY[0x22A696500](buf, -1, -1);
        }
      }
    }
    else
    {
      uint64_t v21 = v33;
      uint64_t v35 = 0;
      unint64_t v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v22._object = (void *)0x800000022835AA40;
      v22._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v22);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 0xD000000000000021;
      v24._object = (void *)0x800000022835AA60;
      String.append(_:)(v24);
      unint64_t v25 = v36;
      if (v21)
      {
        swift_bridgeObjectRelease();
        unint64_t v25 = 0;
        uint64_t v26 = v21;
      }
      else
      {
        uint64_t v26 = v35;
      }
      lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
      swift_allocError();
      *(void *)uint64_t v27 = v26;
      *(void *)(v27 + 8) = v25;
      *(unsigned char *)(v27 + 16) = v21 == 0;
      swift_willThrow();
    }
    RERelease();
    RERelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static TextureResource.exportCubeMapKTX(contentsOf:to:compilationOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static TextureResource.exportCubeMapKTX(contentsOf:to:options:)(a1, a2, a3);
}

uint64_t static TextureResource.exportCubeMapKTX(contentsOf:to:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v38 = v4;
  swift_bridgeObjectRetain();
  specialized static TextureResource.importTextureData(contentsOf:options:)();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v5, (uint64_t)&v42);
  if (v43)
  {
    outlined init with take of BindableDataInternal(&v42, (uint64_t)&v44);
    uint64_t v7 = v46;
    uint64_t v8 = v47;
    __swift_project_boxed_opaque_existential_1(&v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    uint64_t v41 = 0;
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v10 = RECreateCubeTextureDataFromLatLong();

    if (v10)
    {
      uint64_t v11 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v11, (uint64_t)&v44);
      uint64_t v13 = v46;
      uint64_t v12 = v47;
      __swift_project_boxed_opaque_existential_1(&v44, v46);
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
      static TextureResource.maybeCompress(textureAsset:options:)(TextureAssetFromData, (uint64_t *)&v38);
      uint64_t v40 = 0;
      URL.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      LOBYTE(v12) = _RERenderManagerExportTextureAssetToKTXWithErrorHandling();
      swift_release();
      if (v12)
      {
        if (*(void *)(v38 + 16))
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v15 = type metadata accessor for Logger();
          __swift_project_value_buffer(v15, (uint64_t)logger);
          os_log_type_t v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v16, v17))
          {
            os_log_type_t type = v17;
            uint64_t v18 = (uint8_t *)swift_slowAlloc();
            uint64_t v36 = swift_slowAlloc();
            uint64_t v39 = v36;
            *(_DWORD *)uint64_t v18 = 136315138;
            buf = v18;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any].Keys);
            lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v19 = Sequence<>.joined(separator:)();
            unint64_t v21 = v20;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v39);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_227DD2000, v16, type, "Unexpected options %s", buf, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x22A696500](v36, -1, -1);
            MEMORY[0x22A696500](buf, -1, -1);
          }
        }
        RERelease();
        RERelease();
      }
      else
      {
        uint64_t v28 = v40;
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v29._object = (void *)0x800000022835AA40;
        v29._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v29);
        type metadata accessor for URL();
        lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 0xD000000000000021;
        v31._object = (void *)0x800000022835AA60;
        String.append(_:)(v31);
        unint64_t v32 = v45;
        if (v28)
        {
          swift_bridgeObjectRelease();
          unint64_t v32 = 0;
          uint64_t v33 = v28;
        }
        else
        {
          uint64_t v33 = v44;
        }
        lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
        swift_allocError();
        *(void *)uint64_t v34 = v33;
        *(void *)(v34 + 8) = v32;
        *(unsigned char *)(v34 + 16) = v28 == 0;
        swift_willThrow();
        RERelease();
        RERelease();
      }
    }
    else
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v22._uint64_t countAndFlagsBits = 0xD000000000000022;
      v22._object = (void *)0x8000000228358A30;
      String.append(_:)(v22);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v24._object = (void *)0x8000000228358A10;
      String.append(_:)(v24);
      unint64_t v25 = v45;
      uint64_t v26 = v44;
      lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
      swift_allocError();
      *(void *)uint64_t v27 = v26;
      *(void *)(v27 + 8) = v25;
      *(unsigned char *)(v27 + 16) = 1;
      swift_willThrow();
    }
    RERelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v30) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v30) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v30) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v30) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v30) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    os_log_type_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v13, (uint64_t)v33);
    outlined init with take of Any(v33, v32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v19;
    v28[1] = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v8 + 56) + 32 * v23));
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  unint64_t *v32;
  uint64_t v33;

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      unint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      uint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        uint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          uint64_t v16 = v32[v11];
          if (!v16)
          {
            os_log_type_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            uint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                uint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    unint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_retain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    char v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v28 = v24 == v27;
        if (v24 == v27) {
          char v24 = 0;
        }
        v26 |= v28;
        Swift::String v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized static TextureResource.importTextureData(contentsOf:options:)()
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v0);
  uint64_t v2 = v1;
  RETextureImportOperationCreateWithURL();

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary._Variant.removeValue(forKey:)(v3, v4, &v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    outlined init with take of Any(&v23, v25);
    outlined init with copy of Any((uint64_t)v25, (uint64_t)&v23);
    if (!swift_dynamicCast())
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
      lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError();
      swift_allocError();
      *(void *)uint64_t v11 = v8;
      *(void *)(v11 + 8) = v10;
      *(unsigned char *)(v11 + 16) = 0;
      goto LABEL_15;
    }
    RETextureImportOperationSetSemantic();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary._Variant.removeValue(forKey:)(v5, v6, &v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    outlined init with take of Any(&v23, v25);
    outlined init with copy of Any((uint64_t)v25, (uint64_t)&v23);
    if (swift_dynamicCast())
    {
      uint64_t v7 = (void *)MEMORY[0x22A688A50]();
      swift_bridgeObjectRelease();
      RETextureImportOperationSetColorSpaceName();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      goto LABEL_10;
    }
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError();
    swift_allocError();
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v15;
    *(unsigned char *)(v16 + 16) = 1;
LABEL_15:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    goto LABEL_20;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_10:
  *(void *)&long long v23 = 0;
  uint64_t AssetData = RETextureImportOperationCreateAssetData();
  uint64_t v13 = v23;
  if (AssetData)
  {
    uint64_t v8 = AssetData;
    if ((void)v23) {
  }
    }
  else
  {
    *(void *)&v25[0] = 0;
    *((void *)&v25[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v17._uint64_t countAndFlagsBits = 0xD000000000000024;
    v17._object = (void *)0x800000022835AA90;
    String.append(_:)(v17);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x8000000228358A10;
    v19._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v19);
    uint64_t v8 = *((void *)&v25[0] + 1);
    if (v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = 0;
      uint64_t v20 = v13;
    }
    else
    {
      uint64_t v20 = *(void *)&v25[0];
    }
    lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
    swift_allocError();
    *(void *)uint64_t v21 = v20;
    *(void *)(v21 + 8) = v8;
    *(unsigned char *)(v21 + 16) = v13 == 0;
    swift_willThrow();
  }
LABEL_20:
  RERelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError;
  if (!lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.ExportError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for TextureResource.ExportError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of TextureResource.TextureImportOperationError);
}

uint64_t *assignWithCopy for TextureResource.ExportError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for TextureResource.ExportError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of TextureResource.TextureImportOperationError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of TextureResource.TextureImportOperationError);
}

uint64_t *assignWithTake for TextureResource.ExportError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for TextureResource.ExportError(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of TextureResource.TextureImportOperationError);
}

void *type metadata accessor for TextureResource.ExportError()
{
  return &unk_26DCAE590;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError;
  if (!lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.OptionError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for TextureResource.ExportError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REDecoder.Error);
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.ExportError(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for TextureResource.OptionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for TextureResource.ExportError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of REDecoder.Error, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

uint64_t *assignWithCopy for TextureResource.ExportError(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for TextureResource.OptionError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for TextureResource.ExportError(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

uint64_t *assignWithTake for TextureResource.ExportError(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

void *type metadata accessor for TextureResource.OptionError()
{
  return &unk_26DCAE620;
}

uint64_t static StateMachineCommandsBuilder.buildBlock()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t StateMachineState.init(name:dwellTime:commands:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t result = a3();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(void *)(a4 + 24) = result;
  return result;
}

uint64_t StateMachineState.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineState.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineState.dwellTime.getter()
{
  return *(double *)(v0 + 16);
}

void StateMachineState.dwellTime.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*StateMachineState.dwellTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineState.commands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineState.commands.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StateMachineState.commands.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineState.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *assignWithCopy for StateMachineState(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for StateMachineState(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineState()
{
  return &type metadata for StateMachineState;
}

ValueMetadata *type metadata accessor for StateMachineCommandsBuilder()
{
  return &type metadata for StateMachineCommandsBuilder;
}

uint64_t MaterialParameters.Texture.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  unint64_t v22 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v3 - 8);
  char v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  char v9 = *(unsigned char *)(v1 + 24);
  char v10 = *(unsigned char *)(v1 + 25);
  char v11 = *(unsigned char *)(v1 + 26);
  char v12 = *(unsigned char *)(v1 + 27);
  unint64_t v25 = *(void **)v1;
  uint64_t v7 = v25;
  uint64_t v26 = v6;
  uint64_t v27 = v8;
  char v28 = v9;
  char v29 = v10;
  char v30 = v11;
  char v31 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_228324960;
  *(void *)(v13 + 32) = 0x72656C706D6173;
  *(void *)(v13 + 40) = 0xE700000000000000;
  *(void *)(v13 + 72) = &type metadata for MaterialParameters.Texture.Sampler;
  if (v7)
  {
    id v14 = v7;
    swift_retain_n();
    id v15 = v14;
  }
  else
  {
    swift_retain_n();
    id v15 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  *(void *)(v13 + 48) = v15;
  swift_release();
  *(void *)(v13 + 80) = 0x656372756F736572;
  *(void *)(v13 + 88) = 0xE800000000000000;
  uint64_t v16 = type metadata accessor for TextureResource();
  *(void *)(v13 + 96) = v6;
  *(void *)(v13 + 120) = v16;
  *(void *)(v13 + 128) = 0x7865646E497675;
  uint64_t v17 = MEMORY[0x263F8D6C8];
  *(void *)(v13 + 136) = 0xE700000000000000;
  *(void *)(v13 + 144) = v8;
  *(void *)(v13 + 168) = v17;
  *(void *)(v13 + 176) = 0x656C7A7A697773;
  *(void *)(v13 + 184) = 0xE700000000000000;
  type metadata accessor for MTLTextureSwizzleChannels(0);
  *(void *)(v13 + 216) = v18;
  *(unsigned char *)(v13 + 192) = v9;
  *(unsigned char *)(v13 + 193) = v10;
  *(unsigned char *)(v13 + 194) = v11;
  *(unsigned char *)(v13 + 195) = v12;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v22, *MEMORY[0x263F8E830], v23);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void closure #1 in variable initialization expression of NamedFileAssetResolver.callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    __break(1u);
    goto LABEL_8;
  }
  swift_retain();
  String.init(utf8String:)();
  if (!v3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = String.init(utf8String:)();
  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v6 = (void *)specialized NamedFileAssetResolver.resolve(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
    objc_msgSend(v6, sel_fileSystemRepresentation);
    swift_release();
    id v7 = v6;
  }
  else
  {
    swift_release();
  }
}

uint64_t NamedFileAssetResolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NamedFileAssetResolver()
{
  return self;
}

uint64_t specialized NamedFileAssetResolver.resolve(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = MEMORY[0x270FA5388](v8).n128_u64[0];
  char v11 = (char *)&v26 - v10;
  char v12 = *(void **)(v2 + 24);
  objc_msgSend(v12, sel_lock, v9);
  uint64_t v13 = *(void *)(v2 + 16);
  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v15)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v13 + 56);
      uint64_t v18 = type metadata accessor for URL();
      uint64_t v19 = *(void *)(v18 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v11, v17 + *(void *)(v19 + 72) * v16, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v11, 0, 1, v18);
    }
    else
    {
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)v7);
  type metadata accessor for URL();
  uint64_t v20 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v18) == 1)
  {
    outlined destroy of URL?((uint64_t)v7);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v22 = URL.path.getter();
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v18);
    uint64_t v21 = MEMORY[0x22A688A50](v22, v24);
    swift_bridgeObjectRelease();
  }
  outlined destroy of URL?((uint64_t)v11);
  objc_msgSend(v12, sel_unlock);
  return v21;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HasPerspectiveCamera.camera.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v12);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v9);
  uint64_t result = swift_release();
  unint64_t v4 = v10 | ((unint64_t)v11 << 32);
  if ((v4 & 0xFF00000000) == 0x200000000)
  {
    int v5 = 2139095040;
    int v6 = 1008981770;
    LOBYTE(v7) = 1;
    int v8 = 1114636288;
  }
  else
  {
    int v6 = v9[0];
    int v5 = v9[1];
    int v8 = v10;
    uint64_t v7 = HIDWORD(v4) & 1;
  }
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 12) = v7;
  return result;
}

uint64_t HasPerspectiveCamera.camera.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = 0x100000000;
  if (!*(unsigned char *)(a1 + 12)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 | *(unsigned int *)(a1 + 8);
  int v5 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v7);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v4);
  swift_release();
  return v5(v7, 0);
}

void (*HasPerspectiveCamera.camera.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  _OWORD v7[2] = v3;
  *uint64_t v7 = a2;
  HasPerspectiveCamera.camera.getter((uint64_t)(v7 + 3));
  return HasPerspectiveCamera.camera.modify;
}

void HasPerspectiveCamera.camera.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v3 = *(_DWORD *)(*(void *)a1 + 28);
  int v2 = *(_DWORD *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 36);
  v5[0] = *(_DWORD *)(*(void *)a1 + 24);
  v5[1] = v3;
  _OWORD v5[2] = v2;
  char v6 = v4;
  HasPerspectiveCamera.camera.setter((uint64_t)v5);

  free(v1);
}

float sub_22816321C@<S0>(uint64_t a1@<X8>)
{
  HasPerspectiveCamera.camera.getter((uint64_t)&v4);
  float result = v5;
  char v3 = v6;
  *(void *)a1 = v4;
  *(float *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 12) = v3;
  return result;
}

uint64_t sub_228163268(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  char v2 = *((unsigned char *)a1 + 12);
  uint64_t v4 = *a1;
  int v5 = v1;
  char v6 = v2;
  return HasPerspectiveCamera.camera.setter((uint64_t)&v4);
}

uint64_t sub_2281632B0()
{
  return 16;
}

__n128 sub_2281632BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t __RKEmphasisBaseAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisBaseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBaseAnimation()
{
  return self;
}

uint64_t method lookup function for __RKEmphasisBaseAnimation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEmphasisBaseAnimation);
}

uint64_t specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(float32x2_t a1, float a2, float32x2_t a3, float a4, uint64_t a5, float32x2_t **a6)
{
  uint64_t v7 = *a6;
  float32x2_t v8 = (*a6)[2];
  if (!*(void *)&v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  char v6 = a6;
  float32x2_t v9 = vsub_f32(a3, a1);
  float v14 = (float)((float)(a4 - a2) + (float)(v9.f32[1] + (float)(v9.f32[0] + 0.0))) / 3.0;
  long long v13 = *(_OWORD *)v7[8].f32;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_7:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    uint64_t v7 = (float32x2_t *)result;
  }
  unsigned __int8 v11 = v7 + 8;
  do
  {
    *(float32x2_t *)&long long v12 = vmul_n_f32(vsub_f32(*v11, *(float32x2_t *)&v13), v14);
    *((float *)&v12 + 2) = v14 * (float)(v11[1].f32[0] - *((float *)&v13 + 2));
    HIDWORD(v12) = 0;
    *(_OWORD *)v11->f32 = v12;
    v11 += 6;
    --*(void *)&v8;
  }
  while (v8);
  *char v6 = v7;
  return result;
}

void CustomMaterial.lightingModel.getter(char *a1@<X8>)
{
  unsigned int v2 = *(unsigned __int16 *)(v1 + 152);
  int v3 = (v2 >> 2) & 2;
  if ((v2 & 4) != 0) {
    LOBYTE(v3) = 0;
  }
  if ((v2 & 2) != 0) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  *a1 = v4;
}

uint64_t CustomMaterial.baseColor.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(void *, void, void))CustomMaterial.BaseColor.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.roughness.getter()
{
  return CustomMaterial.roughness.getter((uint64_t (*)(void *, void, void))CustomMaterial.Roughness.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.getter()
{
  return CustomMaterial.roughness.getter((uint64_t (*)(void *, void, void))CustomMaterial.Metallic.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.normal.getter()
{
  return CustomMaterial.normal.getter((uint64_t (*)(void *, void, void))CustomMaterial.Normal.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.emissiveColor.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(void *, void, void))CustomMaterial.EmissiveColor.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.getter(uint64_t (*a1)(void *, void, void))
{
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

uint64_t CustomMaterial.ambientOcclusion.getter()
{
  return CustomMaterial.normal.getter((uint64_t (*)(void *, void, void))CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.specular.getter()
{
  return CustomMaterial.roughness.getter((uint64_t (*)(void *, void, void))CustomMaterial.Specular.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.clearcoat.getter()
{
  return CustomMaterial.roughness.getter((uint64_t (*)(void *, void, void))CustomMaterial.Clearcoat.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.clearcoatRoughness.getter()
{
  return CustomMaterial.roughness.getter((uint64_t (*)(void *, void, void))CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.roughness.getter(uint64_t (*a1)(void *, void, void))
{
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

uint64_t CustomMaterial.custom.getter@<X0>(int8x16_t *a1@<X8>)
{
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return CustomMaterial.Custom.init(material:alternateTintKey:)(v4, a1);
}

void CustomMaterial.blending.getter(uint64_t a1@<X8>)
{
  if (*(_WORD *)(v1 + 152))
  {
    char v15 = &type metadata for CustomMaterial;
    unint64_t v16 = &protocol witness table for CustomMaterial;
    v14[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v1, v14[0] + 16);
    CustomMaterial.Opacity.init(material:alternateTintKey:)(v14, (uint64_t)v17);
    char v15 = &type metadata for CustomMaterial;
    unint64_t v16 = &protocol witness table for CustomMaterial;
    v14[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v1, v14[0] + 16);
    CustomMaterial.BaseColor.init(material:alternateTintKey:)(v14, 0, 0, (uint64_t)&v13);
    int v3 = v13;
    swift_release();
    double Alpha = CGColorGetAlpha(v3);

    swift_beginAccess();
    uint64_t FunctionConstant = REMaterialAssetGetFunctionConstant();
    if (FunctionConstant)
    {
      char v6 = (void *)FunctionConstant;
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 1702195828 && v7 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();

        uint64_t v8 = 0x100000000;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        uint64_t v8 = 0x100000000;
        if ((v9 & 1) == 0) {
          uint64_t v8 = 0;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    *(float *)&unsigned int v10 = Alpha;
    uint64_t v11 = v18;
    int v12 = v8 | v19;
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 20) = BYTE4(v8);
    *(_DWORD *)(a1 + 16) = v12;
  }
  else
  {
    *(_OWORD *)a1 = xmmword_228323FE0;
    *(unsigned char *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

unint64_t CustomMaterial.opacityThreshold.getter()
{
  uint64_t v1 = v0;
  unsigned int v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v4, (uint64_t)v26);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v26[1];
  uint64_t v24 = (void *)v26[0];
  uint64_t v6 = v26[2];
  uint64_t v7 = v26[3];
  uint64_t v8 = v26[4];
  uint64_t v9 = v26[5];
  uint64_t v11 = v26[6];
  uint64_t v10 = v26[7];
  int v12 = v27;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v25);
  if (v12 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v28);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v25);
    uint64_t v20 = (void *)v28[0];
    uint64_t v13 = v28[1];
    uint64_t v14 = v28[2];
    uint64_t v15 = v28[3];
    uint64_t v16 = v28[4];
    uint64_t v17 = v28[5];
    uint64_t v18 = v28[6];
    uint64_t v19 = v28[7];
    int v12 = v29;
    if (v29 == 255)
    {
LABEL_7:
      uint64_t v22 = 0;
      unsigned __int8 v21 = 1;
      return v22 | ((unint64_t)v21 << 32);
    }
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v25);
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v11;
    uint64_t v19 = v10;
    uint64_t v20 = v24;
  }
  if (v12 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v20, v13, v14, v15, v16, v17, v18, v19, v12);
    goto LABEL_7;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v20, v13, v14, v15, v16, v17, v18, v19, 2u);
  unsigned __int8 v21 = 0;
  uint64_t v22 = v20;
  return v22 | ((unint64_t)v21 << 32);
}

void CustomMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

void CustomMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

void CustomMaterial.faceCulling.getter(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 48))
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(v1 + 40);
    if (v2 >= 3) {
      LOBYTE(v2) = 2;
    }
    *a1 = v2;
  }
}

void CustomMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 320) == 1;
}

void *specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  uint64_t v12;
  void v13[4];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v13[3];
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x270FA5388](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v12, v13, v8);
      if (!v4) {
        return (void *)v12;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = _StringObject.sharedUTF8.getter();
      }
      return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v9, v10, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

void *specialized String.withCString<A>(_:)(void *(*a1)(uint64_t *__return_ptr, void *, __n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v13[3];
    }
  }
  else
  {
    __n128 v8 = MEMORY[0x270FA5388](a1);
    if ((a4 & 0x2000000000000000) != 0)
    {
      v13[0] = a3;
      v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = a1(&v12, v13, v8);
      if (!v4) {
        return (void *)v12;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = _StringObject.sharedUTF8.getter();
      }
      return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v9, v10, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

BOOL static CustomMaterial.LightingModel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

__n128 static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v6 = *(void **)(a3 + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  unint64_t v9 = *(void *)(a3 + 32);
  unsigned __int8 v10 = *(unsigned char *)(a3 + 40);
  uint64_t v12 = *(void *)a4;
  uint64_t v11 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v14 = *(void *)(a4 + 24);
  uint64_t v15 = *(void **)(a4 + 32);
  char v16 = *(unsigned char *)(a4 + 40);
  int v48 = *a5;
  uint64_t v63 = *(void *)a3;
  uint64_t v52 = v6;
  uint64_t v53 = v63;
  unint64_t v54 = (unint64_t)v6;
  *(void *)&long long v55 = v7;
  *((void *)&v55 + 1) = v8;
  v56.n128_u64[0] = v9;
  v56.n128_u8[8] = v10;
  uint64_t v57 = v12;
  uint64_t v58 = v11;
  uint64_t v46 = v11;
  uint64_t v59 = v13;
  uint64_t v60 = v14;
  long long v61 = v15;
  char v62 = v16;
  specialized static CustomMaterial.ensureFunctionsExist(surfaceShader:geometryModifier:)(&v53, &v57);
  if (!v5)
  {
    char v41 = v16;
    long long v42 = v15;
    uint64_t v43 = v13;
    uint64_t v44 = v8;
    uint64_t v45 = v7;
    uint64_t v18 = (uint64_t)v52;
    if (v46)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = (void *)v46;
      uint64_t v20 = v12;
      uint64_t v21 = v12;
      uint64_t v22 = (void *)v9;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v19 = (void *)0xE000000000000000;
      uint64_t v22 = (void *)v9;
      uint64_t v20 = v12;
    }
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v21;
    v23._object = v19;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 95;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = v63;
    v25._object = v52;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = 95;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    unint64_t v27 = 0xE500000000000000;
    uint64_t v28 = 0x74696C6E75;
    if (v48 != 1)
    {
      uint64_t v28 = 0x616F637261656C63;
      unint64_t v27 = 0xE900000000000074;
    }
    if (v48) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 7629164;
    }
    if (v48) {
      unint64_t v30 = v27;
    }
    else {
      unint64_t v30 = 0xE300000000000000;
    }
    unint64_t v31 = v30;
    String.append(_:)(*(Swift::String *)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = v53;
    unint64_t v32 = v54;
    if (v46)
    {
      uint64_t v57 = v20;
      uint64_t v58 = v46;
      uint64_t v59 = v43;
      uint64_t v60 = v14;
      long long v61 = v42;
      char v62 = v41 & 1;
      outlined copy of CustomMaterial.GeometryModifier?(v20, v46, v43, v14, v42);
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = 0x6D6F65675FLL;
      v34._object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)(&v57, (uint64_t)&v53);
      swift_bridgeObjectRelease();
      uint64_t v18 = (uint64_t)v52;
      outlined consume of CustomMaterial.GeometryModifier?(v20, v46, v43, v14, v42);
    }
    else
    {
      static CustomMaterial.createDefaultGeometryModifier()((uint64_t)&v53);
    }
    char v35 = v53;
    unint64_t v36 = v54;
    __n128 v47 = v56;
    long long v49 = v55;
    uint64_t v57 = v63;
    uint64_t v58 = v18;
    uint64_t v59 = v45;
    uint64_t v60 = v44;
    long long v61 = v22;
    char v62 = v10;
    uint64_t v53 = v33;
    unint64_t v54 = v32;
    v37._uint64_t countAndFlagsBits = 0x667275735FLL;
    v37._object = (void *)0xE500000000000000;
    String.append(_:)(v37);
    static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:)(&v57, (uint64_t)&v53);
    swift_bridgeObjectRelease();
    unint64_t v38 = v54;
    long long v39 = v55;
    __n128 v40 = v56;
    *(unsigned char *)a1 = v53;
    *(void *)(a1 + 8) = v38;
    *(_OWORD *)(a1 + 16) = v39;
    *(__n128 *)(a1 + 32) = v40;
    *(unsigned char *)a2 = v35;
    *(void *)(a2 + 8) = v36;
    __n128 result = v47;
    *(_OWORD *)(a2 + 16) = v49;
    *(__n128 *)(a2 + 32) = v47;
  }
  return result;
}

uint64_t static CustomMaterial.SurfaceShader.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

void CustomMaterial.process(blending:doShaderUpdate:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == 1)
  {
    if (a2)
    {
      unsigned __int16 v5 = *(_WORD *)(v2 + 152);
      uint64_t v6 = *(void *)(v2 + 160);
      char v7 = *(unsigned char *)(v2 + 168);
      char v8 = *(unsigned char *)(v2 + 169);
      char v9 = *(unsigned char *)(v2 + 170);
      uint64_t v10 = *(void *)(v2 + 176);
      uint64_t v11 = *(void *)(v2 + 184);
      uint64_t v12 = *(void *)(v2 + 192);
      uint64_t v13 = *(void *)(v2 + 200);
      uint64_t v14 = *(void *)(v2 + 208);
      uint64_t v15 = *(void **)(v2 + 216);
      uint64_t v16 = *(void *)(v2 + 224);
      uint64_t v17 = *(void *)(v2 + 232);
      uint64_t v19 = *(void *)(v2 + 240);
      uint64_t v18 = *(void *)(v2 + 248);
      uint64_t v20 = *(void *)(v2 + 256);
      uint64_t v21 = *(void **)(v2 + 264);
      LOWORD(v86) = v5 & 0xFFFE;
      *((void *)&v86 + 1) = v6;
      LOBYTE(v87) = v7;
      BYTE1(v87) = v8;
      BYTE2(v87) = v9;
      *((void *)&v87 + 1) = v10;
      *(void *)&long long v88 = v11;
      *((void *)&v88 + 1) = v12;
      *(void *)&long long v89 = v13;
      *((void *)&v89 + 1) = v14;
      *(void *)&long long v90 = v15;
      *((void *)&v90 + 1) = v16;
      *(void *)&long long v91 = v17;
      *((void *)&v91 + 1) = v19;
      *(void *)&long long v92 = v18;
      *((void *)&v92 + 1) = v20;
      uint64_t v93 = v21;
      long long v82 = v90;
      long long v83 = v91;
      long long v84 = v92;
      uint64_t v85 = v21;
      long long v78 = v86;
      long long v79 = v87;
      long long v80 = v88;
      long long v81 = v89;
      unsigned __int16 v61 = v5;
      uint64_t v62 = v6;
      char v63 = v7;
      char v64 = v8;
      char v65 = v9;
      uint64_t v66 = v10;
      uint64_t v67 = v11;
      uint64_t v68 = v12;
      uint64_t v69 = v13;
      uint64_t v70 = v14;
      uint64_t v71 = v15;
      uint64_t v72 = v16;
      uint64_t v73 = v17;
      uint64_t v74 = v19;
      uint64_t v75 = v18;
      uint64_t v76 = v20;
      v77 = v21;
      uint64_t v58 = v13;
      uint64_t v60 = v12;
      uint64_t v56 = v14;
      outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v11, v12, v13, v14, v15);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v16, v17, v19, v18, v20, v21);
      if (!specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(&v61, (unsigned __int16 *)&v78)) {
        specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)((uint64_t)&v86);
      }
      outlined consume of __MaterialResource.CoreMaterialFunction?(v10, v11, v60, v58, v56, v15);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v16, v17, v19, v18, v20, v21);
    }
    return;
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  LODWORD(v24) = *(void *)a1;
  uint64_t v25 = swift_retain();
  specialized Material.setParameter<A>(_:alternateTintKey:)(v25, v23 & 0x1FFFFFFFFLL, v24);
  if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
  {
    *((void *)&v87 + 1) = &type metadata for CustomMaterial;
    *(void *)&long long v88 = &protocol witness table for CustomMaterial;
    *(void *)&long long v86 = swift_allocObject();
    outlined init with copy of CustomMaterial(v2, v86 + 16);
    CustomMaterial.BaseColor.init(material:alternateTintKey:)(&v86, 0, 0, (uint64_t)&v78);
    Swift::String v26 = (CGColor *)v78;
    swift_release();
    CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(v26, v24);

    if (CopyWithAlpha)
    {
      *((void *)&v87 + 1) = &type metadata for CustomMaterial;
      *(void *)&long long v88 = &protocol witness table for CustomMaterial;
      *(void *)&long long v86 = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v86 + 16);
      uint64_t v28 = CopyWithAlpha;
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(&v86, 0, 0, (uint64_t)&v78);

      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v28, *((uint64_t *)&v78 + 1), v79, 0, 0);
      swift_release();
    }
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v50 = v22;
    uint64_t v51 = v4;
    goto LABEL_18;
  }
  uint64_t v52 = v22;
  unsigned __int16 v29 = *(_WORD *)(v2 + 152);
  uint64_t v30 = *(void *)(v2 + 160);
  char v31 = *(unsigned char *)(v2 + 168);
  char v32 = *(unsigned char *)(v2 + 169);
  char v33 = *(unsigned char *)(v2 + 170);
  uint64_t v34 = *(void *)(v2 + 176);
  uint64_t v35 = *(void *)(v2 + 184);
  unint64_t v36 = v23;
  uint64_t v37 = *(void *)(v2 + 192);
  uint64_t v38 = *(void *)(v2 + 200);
  uint64_t v39 = *(void *)(v2 + 208);
  __n128 v40 = *(void **)(v2 + 216);
  uint64_t v42 = *(void *)(v2 + 224);
  uint64_t v41 = *(void *)(v2 + 232);
  uint64_t v44 = *(void *)(v2 + 240);
  uint64_t v43 = *(void *)(v2 + 248);
  uint64_t v45 = *(void *)(v2 + 256);
  uint64_t v46 = *(void **)(v2 + 264);
  __int16 v47 = v29 | 1;
  __int16 v48 = v29 | 0x201;
  if ((v29 & 0x200) != 0)
  {
    __int16 v48 = v29 | 1;
    __int16 v47 = v29 & 0xFDFE | 1;
  }
  if ((v36 & 0x100000000) != 0) {
    __int16 v47 = v48;
  }
  LOWORD(v86) = v47;
  *((void *)&v86 + 1) = v30;
  LOBYTE(v87) = v31;
  BYTE1(v87) = v32;
  BYTE2(v87) = v33;
  *((void *)&v87 + 1) = v34;
  *(void *)&long long v88 = v35;
  *((void *)&v88 + 1) = v37;
  *(void *)&long long v89 = v38;
  *((void *)&v89 + 1) = v39;
  *(void *)&long long v90 = v40;
  *((void *)&v90 + 1) = v42;
  *(void *)&long long v91 = v41;
  *((void *)&v91 + 1) = v44;
  *(void *)&long long v92 = v43;
  *((void *)&v92 + 1) = v45;
  uint64_t v93 = v46;
  long long v82 = v90;
  long long v83 = v91;
  long long v84 = v92;
  uint64_t v85 = v46;
  long long v78 = v86;
  long long v79 = v87;
  long long v80 = v88;
  long long v81 = v89;
  unsigned __int16 v61 = v29;
  uint64_t v62 = v30;
  char v63 = v31;
  char v64 = v32;
  char v65 = v33;
  uint64_t v66 = v34;
  uint64_t v67 = v35;
  uint64_t v68 = v37;
  uint64_t v69 = v38;
  uint64_t v70 = v39;
  uint64_t v71 = v40;
  uint64_t v72 = v42;
  uint64_t v73 = v41;
  uint64_t v74 = v44;
  uint64_t v75 = v43;
  uint64_t v76 = v45;
  v77 = v46;
  uint64_t v53 = v34;
  uint64_t v54 = v37;
  uint64_t v49 = v35;
  uint64_t v55 = v38;
  uint64_t v57 = v39;
  uint64_t v59 = v40;
  outlined copy of __MaterialResource.CoreMaterialFunction?(v34, v35, v37, v38, v39, v40);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
  if (specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)((unsigned __int16 *)&v78, &v61))
  {
    outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
    uint64_t v50 = v52;
    uint64_t v51 = v4;
LABEL_18:
    outlined consume of __EntityInfoComponent?(v50, v51);
    return;
  }
  outlined copy of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
  specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)((uint64_t)&v86);
  outlined consume of __EntityInfoComponent?(v52, v4);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);

  outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
}

uint64_t specialized Material.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of __RKMaterialParameterBlock.Parameter?(a1, (uint64_t)v12);
  if (v12[64] == 255)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v9 = REMaterialParameterBlockValueCopy();
      uint64_t v10 = *(void **)(v3 + 32);
      *(void *)(v3 + 32) = v9;
    }
    specialized String.withCString<A>(_:)(a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v12, (uint64_t)v13);
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v13, (uint64_t)v11);
    uint64_t v7 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)((const char *)(v7 + 32), (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined release of __RKMaterialParameterBlock.Parameter?(a1);
  }
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  unsigned char v11[80];
  unsigned char v12[80];
  unsigned char v13[80];

  outlined init with take of __RKMaterialParameterBlock.Parameter?(a1, (uint64_t)v12);
  if (v12[64] == 255)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v9 = REMaterialParameterBlockValueCopy();
      uint64_t v10 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v9;
    }
    specialized String.withCString<A>(_:)(a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v12, (uint64_t)v13);
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v13, (uint64_t)v11);
    uint64_t v7 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)((const char *)(v7 + 32), (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined release of __RKMaterialParameterBlock.Parameter?(a1);
  }
}

uint64_t specialized Material.setUVTransform(_:withSuffix:)(uint64_t a1, void *a2, double a3, double a4, float a5)
{
  _print_unlocked<A, B>(_:_:)();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v10 = REMaterialParameterBlockValueCopy();
    uint64_t v11 = *(void **)(v5 + 32);
    *(void *)(v5 + 32) = v10;
  }
  REMaterialParameterBlockValueSetFloat2();
  swift_bridgeObjectRelease();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v13 = REMaterialParameterBlockValueCopy();
    uint64_t v14 = *(void **)(v5 + 32);
    *(void *)(v5 + 32) = v13;
  }
  __sincosf_stret(a5);
  REMaterialParameterBlockValueSetFloat4();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v5;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;

  _print_unlocked<A, B>(_:_:)();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v10 = REMaterialParameterBlockValueCopy();
    uint64_t v11 = *(void **)(v5 + 72);
    *(void *)(v5 + 72) = v10;
  }
  REMaterialParameterBlockValueSetFloat2();
  swift_bridgeObjectRelease();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v13 = REMaterialParameterBlockValueCopy();
    uint64_t v14 = *(void **)(v5 + 72);
    *(void *)(v5 + 72) = v13;
  }
  __sincosf_stret(a5);
  REMaterialParameterBlockValueSetFloat4();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CustomMaterial.SurfaceShader.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of (Int, URL)(v10, (uint64_t)&v19, &demangling cache variable for type metadata for __RenderService?);
  if (v20)
  {
    outlined init with take of BindableDataInternal(&v19, (uint64_t)v21);
    uint64_t v12 = v22;
    uint64_t v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
    id v14 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if (v14)
    {
      char v15 = a4 & 1;
      id v16 = objc_allocWithZone(MEMORY[0x263F128B0]);
      swift_unknownObjectRetain();
      id v17 = objc_msgSend(v16, sel_init);
      swift_bridgeObjectRetain();
      id v18 = v17;
      swift_bridgeObjectRelease();
      *(void *)a5 = a1;
      *(void *)(a5 + 8) = a2;
      *(void *)(a5 + 16) = v14;
      *(void *)(a5 + 24) = v9;
      *(void *)(a5 + 32) = v18;
      *(unsigned char *)(a5 + 40) = v15;

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      *(_OWORD *)(a5 + 25) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  id v10 = objc_allocWithZone(MEMORY[0x263F128B0]);
  swift_bridgeObjectRetain();
  id v11 = objc_msgSend(v10, sel_init);
  uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v12, (uint64_t)&v16, &demangling cache variable for type metadata for __RenderService?);
  if (v17)
  {
    outlined init with take of BindableDataInternal(&v16, (uint64_t)v18);
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    id v15 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if (v15)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)a5 = a1;
      *(void *)(a5 + 8) = a2;
      *(void *)(a5 + 16) = v15;
      *(void *)(a5 + 24) = v9;
      *(void *)(a5 + 32) = v11;
      *(unsigned char *)(a5 + 40) = a4 & 1;

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      *(_OWORD *)(a5 + 25) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t CustomMaterial.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  uint64_t v11 = *a2;
  char v54 = *((unsigned char *)a2 + 8);
  uint64_t v12 = (void *)a2[3];
  uint64_t v47 = a2[2];
  uint64_t v13 = (void *)REMaterialParameterBlockValueCreate();
  uint64_t v63 = MEMORY[0x263F8EE78];
  char v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = v13;
  uint64_t v67 = 0;
  char v68 = 1;
  long long v69 = xmmword_2283349E0;
  char v71 = 0;
  int v70 = 0;
  memset(v75, 0, sizeof(v75));
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v98 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v94 = 3;
  __int16 v97 = 0;
  __int16 v99 = 257;
  uint64_t v14 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (!v14)
  {
    outlined consume of CustomMaterial.CustomUniformsState?(a3, a4, a5);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)v75, &demangling cache variable for type metadata for __REAssetService?);
    swift_release();
    uint64_t result = outlined consume of CustomMaterial.Descriptor?(v92, v93, v94);
    *(_OWORD *)((char *)a6 + 314) = 0u;
    a6[18] = 0u;
    a6[19] = 0u;
    a6[16] = 0u;
    a6[17] = 0u;
    a6[14] = 0u;
    a6[15] = 0u;
    a6[12] = 0u;
    a6[13] = 0u;
    a6[10] = 0u;
    a6[11] = 0u;
    a6[8] = 0u;
    a6[9] = 0u;
    a6[6] = 0u;
    a6[7] = 0u;
    a6[4] = 0u;
    a6[5] = 0u;
    a6[2] = 0u;
    a6[3] = 0u;
    *a6 = 0u;
    a6[1] = 0u;
    return result;
  }
  uint64_t v15 = v14;
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  swift_retain();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v62 = v15;
  uint64_t v63 = v11;
  char v64 = v54;
  uint64_t v65 = v47;
  uint64_t v66 = v12;
  uint64_t v67 = 2;
  char v68 = 0;
  swift_beginAccess();
  uint64_t result = REMaterialAssetGetFunctionLinkCount();
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v17 = result;
  uint64_t v44 = v12;
  if (!result)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    char v39 = a5;
    uint64_t v41 = v45;
    __n128 v40 = v46;
LABEL_20:
    outlined consume of CustomMaterial.CustomUniformsState?(v40, v41, v39);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v34, v35, v36, v37, v38);

    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_21;
  }
  char v43 = a5;
  uint64_t v42 = (uint64_t)a6;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v55 = 0;
  uint64_t v24 = 0;
  do
  {
    uint64_t v25 = v17;
    uint64_t v26 = v21;
    REMaterialAssetGetFunctionLinkAtIndex();
    int Stage = REFunctionLinkGetStage();
    if ((Stage | 2) == 3)
    {
      __MaterialResource.CoreMaterialFunction.init(_:)((uint64_t)v56);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
      uint64_t v50 = v56[0];
      uint64_t v49 = v57;
      uint64_t v51 = v58;
      uint64_t v52 = v60;
      uint64_t v53 = v59;
      uint64_t v55 = v61;
    }
    if (Stage == 4 || Stage == 2)
    {
      __MaterialResource.CoreMaterialFunction.init(_:)((uint64_t)v56);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v26, v22, v23);
      uint64_t v18 = v56[0];
      uint64_t v19 = v57;
      uint64_t v20 = v58;
      uint64_t v21 = v59;
      uint64_t v22 = v60;
      uint64_t v23 = v61;
    }
    else
    {
      uint64_t v21 = v26;
    }
    ++v24;
    uint64_t v17 = v25;
  }
  while (v25 != v24);
  a6 = (_OWORD *)v42;
  if (!v20)
  {
    uint64_t v41 = v45;
    __n128 v40 = v46;
    char v39 = v43;
    uint64_t v34 = v49;
    uint64_t v33 = v50;
    uint64_t v35 = v51;
    uint64_t v37 = v52;
    uint64_t v36 = v53;
    uint64_t v38 = v55;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v29 = v23;
  __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
  uint64_t v77 = 0;
  char v78 = 1;
  __int16 v79 = 258;
  uint64_t v80 = v50;
  uint64_t v81 = v49;
  uint64_t v82 = v51;
  uint64_t v83 = v53;
  uint64_t v84 = v52;
  uint64_t v85 = v55;
  uint64_t v86 = v18;
  uint64_t v87 = v19;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v90 = v22;
  long long v91 = v23;
  if (v43 == -1)
  {
    uint64_t v48 = v18;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v21, v22, v23);
    uint64_t v31 = REDirectParameterBufferCreate();
    outlined consume of __MaterialResource.CoreMaterialFunction?(v48, v19, v20, v21, v22, v23);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v48, v19, v20, v21, v22, v23);
    swift_release();
    uint64_t v30 = 0;
    char v32 = 0;
  }
  else
  {
    outlined consume of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v21, v22, v23);
    swift_release();
    uint64_t v30 = v45;
    uint64_t v31 = (uint64_t)v46;
    char v32 = v43;
  }
  uint64_t v72 = v31;
  uint64_t v73 = v30;
  char v74 = v32;
  outlined init with copy of CustomMaterial((uint64_t)&v62, v42);
  return outlined destroy of CustomMaterial((uint64_t)&v62);
}

uint64_t (*CustomMaterial.GeometryModifier.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void (*CustomMaterial.GeometryModifier.library.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[3] = v5;
  v3[4] = malloc(*(void *)(v5 + 64));
  *uint64_t v3 = *(void *)(v1 + 16);
  swift_unknownObjectRetain();
  return CustomMaterial.GeometryModifier.library.modify;
}

void CustomMaterial.GeometryModifier.library.modify(uint64_t **a1, char a2)
{
}

id CustomMaterial.GeometryModifier.init(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:)(a1, a2, a3, a4);
}

{
  char ServicesToUpdate;
  id result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
    *(void *)a4 = a1;
    *(void *)(a4 + 8) = a2;
    *(void *)(a4 + 16) = a3;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = result;
    *(unsigned char *)(a4 + 40) = 0;
  }
  else
  {
    uint64_t result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*CustomMaterial.GeometryModifier.libraryAsset.modify(void *a1))()
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  v3[16] = *(void *)(v1 + 24);
  return CustomMaterial.GeometryModifier.libraryAsset.modify;
}

uint64_t (*CustomMaterial.GeometryModifier.__linkSPI.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id CustomMaterial.GeometryModifier.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(a1, a2, a3, a4, a5);
}

{
  char ServicesToUpdate;
  id result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    uint64_t result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
    *(void *)a5 = a1;
    *(void *)(a5 + 8) = a2;
    *(void *)(a5 + 16) = a3;
    *(void *)(a5 + 24) = 0;
    *(void *)(a5 + 32) = result;
    *(unsigned char *)(a5 + 40) = a4 & 1;
  }
  else
  {
    uint64_t result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*protocol witness for MaterialFunction.library.modify in conformance CustomMaterial.GeometryModifier(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CustomMaterial.GeometryModifier.library.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t CustomMaterial.SurfaceShader.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomMaterial.SurfaceShader.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.SurfaceShader.library.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CustomMaterial.GeometryModifier.library.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v2 + 24))
  {
    Logger.init()();
    char v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v10 = 0;
      _os_log_impl(&dword_227DD2000, v8, v9, "CustomMaterial: Assigned MTLLibrary when libraryAsset was already initialized. Overriding asset...", v10, 2u);
      MEMORY[0x22A696500](v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)(v2 + 24) = 0;
  }
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v2 + 16) = a1;
  return result;
}

void (*CustomMaterial.SurfaceShader.library.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[3] = v5;
  v3[4] = malloc(*(void *)(v5 + 64));
  *uint64_t v3 = *(void *)(v1 + 16);
  swift_unknownObjectRetain();
  return CustomMaterial.SurfaceShader.library.modify;
}

void CustomMaterial.SurfaceShader.library.modify(uint64_t **a1, char a2)
{
}

void CustomMaterial.GeometryModifier.library.modify(uint64_t **a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  if (a2)
  {
    uint64_t v6 = (void *)v3[4];
    uint64_t v7 = swift_unknownObjectRetain();
    a3(v7);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = v3[1];
    if (*(void *)(v8 + 24))
    {
      Logger.init()();
      os_log_type_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_227DD2000, v9, v10, "CustomMaterial: Assigned MTLLibrary when libraryAsset was already initialized. Overriding asset...", v11, 2u);
        MEMORY[0x22A696500](v11, -1, -1);
      }
      uint64_t v13 = v3[3];
      uint64_t v12 = v3[4];
      uint64_t v14 = v3[2];

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      *(void *)(v8 + 24) = 0;
      uint64_t v8 = v3[1];
    }
    uint64_t v6 = (void *)v3[4];
    swift_unknownObjectRelease();
    *(void *)(v8 + 16) = v4;
  }
  free(v6);

  free(v3);
}

id CustomMaterial.SurfaceShader.init(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:)(a1, a2, a3, a4);
}

void CustomMaterial.SurfaceShader.libraryAsset.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

uint64_t *CustomMaterial.GeometryModifier.libraryAsset.setter(uint64_t *result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *result;
  if (!*result) {
    goto LABEL_5;
  }
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = (uint64_t *)outlined init with copy of (Int, URL)(v4, (uint64_t)&v8, &demangling cache variable for type metadata for __RenderService?);
  if (!v9)
  {
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v8, (uint64_t)v10);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  id v7 = (id)REShaderLibraryAssetGetMetalLibrary();
  uint64_t result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v7)
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    *(void *)(v2 + 16) = v7;
LABEL_5:
    *(void *)(v2 + 24) = v3;
  }
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.libraryAsset.modify(void *a1))()
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  v3[16] = *(void *)(v1 + 24);
  return CustomMaterial.GeometryModifier.libraryAsset.modify;
}

void CustomMaterial.GeometryModifier.libraryAsset.modify(long long **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)((char *)*a1 + 40);
  uint64_t v4 = *((void *)*a1 + 16);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 40;
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v5, (uint64_t)v3, &demangling cache variable for type metadata for __RenderService?);
      if (*((void *)v2 + 8))
      {
        outlined init with take of BindableDataInternal(v3, (uint64_t)v2);
        uint64_t v6 = *((void *)v2 + 3);
        uint64_t v7 = *((void *)v2 + 4);
        __swift_project_boxed_opaque_existential_1(v2, v6);
        (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
        id v8 = (id)REShaderLibraryAssetGetMetalLibrary();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
        if (!v8) {
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      __break(1u);
LABEL_15:
      __break(1u);
      return;
    }
LABEL_10:
    *(void *)(*((void *)v2 + 17) + 24) = v4;
    goto LABEL_11;
  }
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v9, (uint64_t)v2, &demangling cache variable for type metadata for __RenderService?);
  if (!*((void *)v2 + 3)) {
    goto LABEL_15;
  }
  outlined init with take of BindableDataInternal(v2, (uint64_t)v3);
  uint64_t v10 = *((void *)v2 + 8);
  uint64_t v11 = *((void *)v2 + 9);
  __swift_project_boxed_opaque_existential_1(v3, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  id v8 = (id)REShaderLibraryAssetGetMetalLibrary();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if (v8)
  {
LABEL_9:
    uint64_t v12 = *((void *)v2 + 17);
    swift_unknownObjectRelease();
    *(void *)(v12 + 16) = v8;
    goto LABEL_10;
  }
LABEL_11:

  free(v2);
}

uint64_t CustomMaterial.SurfaceShader.__linkSPI.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CustomMaterial.SurfaceShader.__linkSPI.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.__linkSPI.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id CustomMaterial.SurfaceShader.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for MaterialFunction.library.getter in conformance CustomMaterial.SurfaceShader()
{
  return swift_unknownObjectRetain();
}

uint64_t (*protocol witness for MaterialFunction.library.modify in conformance CustomMaterial.SurfaceShader(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CustomMaterial.SurfaceShader.library.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MaterialFunction.__linkSPI.getter in conformance CustomMaterial.SurfaceShader()
{
  return *(unsigned __int8 *)(v0 + 40);
}

void CustomMaterial.LightingModel.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t CustomMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t CustomMaterial.__resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*CustomMaterial.__resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t CustomMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*CustomMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t CustomMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*CustomMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__blending.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  char v4 = *(unsigned char *)(v1 + 76);
  int v5 = *(_DWORD *)(v1 + 72);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return outlined copy of CustomMaterial.Blending?(v2, v3);
}

uint64_t CustomMaterial.__blending.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  char v5 = *((unsigned char *)a1 + 20);
  uint64_t v6 = v1 + 72;
  uint64_t result = outlined consume of CustomMaterial.Blending?(*(void *)(v6 - 16), *(void *)(v6 - 8));
  *(void *)(v6 - 16) = v2;
  *(void *)(v6 - 8) = v3;
  *(unsigned char *)(v6 + 4) = v5;
  *(_DWORD *)uint64_t v6 = v4;
  return result;
}

uint64_t (*CustomMaterial.__blending.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__requiresUnmanagedVideoComponent.getter()
{
  return (*(unsigned __int16 *)(v0 + 152) >> 5) & 1;
}

uint64_t CustomMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 104;
  outlined init with copy of (Int, URL)(v3, (uint64_t)&v6, &demangling cache variable for type metadata for __REAssetService?);
  if (v7) {
    return outlined init with take of BindableDataInternal(&v6, a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for __REAssetService?);
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, a1);
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for __REAssetService?);
  return outlined init with copy of __REAssetService(a1, v3);
}

uint64_t static CustomMaterial.getLightingModel(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v16);
    swift_dynamicCast();
    int v4 = (v11 >> 2) & 2;
    if ((v11 & 4) != 0) {
      LOBYTE(v4) = 0;
    }
    if ((v11 & 2) != 0) {
      char v5 = 1;
    }
    else {
      char v5 = v4;
    }
    *a2 = v5;
    outlined destroy of CustomMaterial((uint64_t)v10);
    outlined destroy of CustomMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v16);
    swift_dynamicCast();
    v12[3] = &type metadata for PhysicallyBasedMaterial;
    v12[4] = &protocol witness table for PhysicallyBasedMaterial;
    v12[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial((uint64_t)v10, v12[0] + 16);
    PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v12, (uint64_t)&v13);
    float v6 = v13;
    uint64_t v7 = v14;
    uint64_t v8 = v15;
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v10);
    outlined consume of MaterialParameters.Texture?(v7, v8);
    if (v6 == 0.0) {
      *a2 = 0;
    }
    else {
      *a2 = 2;
    }
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    *a2 = 0;
    outlined destroy of SimpleMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    *a2 = 1;
    outlined destroy of UnlitMaterial((uint64_t)v17);
  }
  else
  {
    *a2 = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t static CustomMaterial.getBlending(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v46);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    CustomMaterial.blending.getter(a2);
    outlined destroy of CustomMaterial((uint64_t)v29);
    outlined destroy of CustomMaterial((uint64_t)v45);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    PhysicallyBasedMaterial.blending.getter((uint64_t)&v36);
    uint64_t v4 = (uint64_t)v36;
    char v5 = v37;
    uint64_t v6 = v38;
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v29);
    if (v6)
    {
      if (v6 == 1)
      {
        uint64_t v7 = 0;
        int v8 = 0;
LABEL_17:
        *(void *)a2 = v7;
        *(void *)(a2 + 8) = v6;
        *(unsigned char *)(a2 + 20) = 0;
        *(_DWORD *)(a2 + 16) = v8;
        outlined destroy of PhysicallyBasedMaterial((uint64_t)v45);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      }
      swift_retain();
      int v22 = 84148994;
    }
    else
    {
      int v22 = 0;
    }
    outlined consume of PhysicallyBasedMaterial.Blending(v4, v5, v6);
    uint64_t v7 = v4;
    int v8 = v22;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    int v9 = v31;
    outlined destroy of SimpleMaterial((uint64_t)v29);
    uint64_t v10 = 1065353216;
    if (!v9) {
      uint64_t v10 = 0;
    }
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v9 ^ 1u;
    *(unsigned char *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    outlined destroy of SimpleMaterial((uint64_t)v45);
  }
  else if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    swift_bridgeObjectRetain_n();
    id v11 = v30;
    swift_bridgeObjectRetain_n();
    id v12 = v11;
    specialized String.withCString<A>(_:)(0x6E6954726F6C6F63, 0xE900000000000074, v12, (uint64_t)v34);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    float v13 = (CGColor *)v34[0];
    uint64_t v14 = v34[1];
    uint64_t v15 = v34[2];
    uint64_t v16 = v34[3];
    uint64_t v17 = v34[4];
    uint64_t v18 = v34[5];
    uint64_t v19 = v34[6];
    uint64_t v20 = v34[7];
    LODWORD(v21) = v35;
    outlined init with copy of UnlitMaterial((uint64_t)v29, (uint64_t)v33);
    if (v21 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v36);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v33);
      float v13 = v36;
      uint64_t v14 = (uint64_t)v37;
      uint64_t v15 = v38;
      uint64_t v16 = v39;
      uint64_t v17 = v40;
      uint64_t v18 = v41;
      uint64_t v19 = v42;
      uint64_t v20 = v43;
      LODWORD(v21) = v44;
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v33);
    }
    double Alpha = 0.0;
    if (v21 != 255)
    {
      if (v21 == 6)
      {
        double Alpha = CGColorGetAlpha(v13);
      }
      else if (v21 == 5)
      {
        v24.n128_u64[0] = (unint64_t)v13;
        v24.n128_u64[1] = v14;
        uint64_t v21 = (CGColor *)specialized SIMD4<>.cgColor.getter(v24);
        double Alpha = CGColorGetAlpha(v21);

        LOBYTE(v21) = 5;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    BOOL v25 = (v32 & 1) == 0;
    *(float *)&unsigned int v26 = Alpha;
    uint64_t v27 = v26;
    if ((v32 & 1) == 0) {
      uint64_t v27 = 0;
    }
    *(void *)a2 = v27;
    *(void *)(a2 + 8) = v25;
    *(unsigned char *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    outlined destroy of UnlitMaterial((uint64_t)v29);
    outlined destroy of UnlitMaterial((uint64_t)v45);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_228323FE0;
    *(unsigned char *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

void CustomMaterial.copyParameterBlock(from:)()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C0]), sel_init);
  swift_beginAccess();
  REMaterialAssetGetMaterialDefinition();
  REMaterialDefinitionAssetGetParameterKeys();
  uint64_t v1 = 0;
  v0;
  static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
}

id CustomMaterial.copyCustomParameters(from:)(uint64_t a1)
{
  uint64_t v116 = a1;
  swift_beginAccess();
  id result = (id)REMaterialAssetGetGeomFlattenedCustomParamNames();
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = (id)REMaterialAssetGetSurfFlattenedCustomParamNames();
  if (!v4) {
    return (id)swift_bridgeObjectRelease();
  }
  char v5 = v4;
  uint64_t v100 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v99 = v3;
  uint64_t v8 = 0;
  if (!v7)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v52 = v100;
    uint64_t v53 = *(void *)(v100 + 16);
    if (v53)
    {
      uint64_t v115 = v8;
      uint64_t v102 = v101 + 8;
      char v54 = (uint64_t *)(v100 + 40);
      while (1)
      {
        char v74 = (const char *)*(v54 - 1);
        uint64_t v73 = *v54;
        uint64_t v75 = *(void *)(v116 + 8);
        uint64_t v76 = *(void *)(v116 + 24);
        uint64_t v34 = *(uint64_t **)(v116 + 32);
        MEMORY[0x270FA5388](v52);
        *(&v99 - 4) = v75;
        *((unsigned char *)&v99 - 24) = v77;
        uint64_t v97 = v76;
        uint64_t v98 = v34;
        uint64_t v110 = v78;
        uint64_t v111 = v53;
        v113 = &v99;
        uint64_t v114 = v73;
        v112 = v74;
        if ((v73 & 0x1000000000000000) != 0
          || !(v73 & 0x2000000000000000 | (unint64_t)v74 & 0x1000000000000000))
        {
          break;
        }
        if ((v73 & 0x2000000000000000) == 0)
        {
          LODWORD(v108) = v77;
          v109 = &v99;
          if (((unint64_t)v74 & 0x1000000000000000) != 0 || _StringObject.sharedUTF8.getter())
          {
            swift_bridgeObjectRetain_n();
            __int16 v79 = v34;
            swift_bridgeObjectRetain_n();
            v79;
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_bridgeObjectRetain_n();
            uint64_t v96 = v34;
            swift_bridgeObjectRetain_n();
            v96;
            swift_bridgeObjectRetain();
          }
          uint64_t v80 = v115;
          closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v126);
          if (v80) {
            goto LABEL_49;
          }
          uint64_t v115 = 0;

          goto LABEL_35;
        }
        v117 = v74;
        uint64_t v118 = v73 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n();
        uint64_t v81 = v34;
        swift_bridgeObjectRetain_n();
        uint64_t v82 = v81;
        swift_bridgeObjectRetain();
        uint64_t v83 = v115;
        closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v126);

        if (v83) {
          goto LABEL_50;
        }
        uint64_t v115 = 0;

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
LABEL_38:
        uint64_t v84 = v126;
        uint64_t v85 = v127;
        uint64_t v86 = v128;
        uint64_t v87 = v129;
        uint64_t v88 = v130;
        uint64_t v89 = v131;
        uint64_t v90 = v132;
        uint64_t v91 = v133;
        int v92 = v134;
        outlined init with copy of CustomMaterial(v116, (uint64_t)&v117);
        if (v92 == 255)
        {
          swift_retain();
          __MaterialResource.subscript.getter((uint64_t)&v135);
          swift_release();
          outlined destroy of CustomMaterial((uint64_t)&v117);
          int v92 = v143;
          if (v143 == 255)
          {
            uint64_t v52 = swift_bridgeObjectRelease();
            goto LABEL_27;
          }
        }
        else
        {
          outlined destroy of CustomMaterial((uint64_t)&v117);
          v135 = v84;
          uint64_t v136 = v85;
          uint64_t v137 = v86;
          uint64_t v138 = v87;
          uint64_t v139 = v88;
          uint64_t v140 = v89;
          uint64_t v141 = v90;
          uint64_t v142 = v91;
        }
        uint64_t v55 = v141;
        v113 = (void *)v142;
        uint64_t v56 = v139;
        uint64_t v57 = v140;
        uint64_t v58 = v137;
        uint64_t v59 = v138;
        uint64_t v60 = v135;
        v117 = (const char *)v135;
        uint64_t v118 = v136;
        int v61 = v92;
        uint64_t v62 = v136;
        uint64_t v104 = v136;
        uint64_t v105 = v137;
        uint64_t v119 = v137;
        uint64_t v120 = v138;
        uint64_t v106 = v138;
        uint64_t v107 = v139;
        uint64_t v121 = v139;
        uint64_t v122 = v140;
        uint64_t v108 = v140;
        v109 = (void *)v141;
        uint64_t v123 = v141;
        uint64_t v124 = v142;
        char v125 = v61;
        int v103 = v61;
        v112 = (const char *)(String.utf8CString.getter() + 32);
        outlined copy of __RKMaterialParameterBlock.Parameter(v60, v62, v58, v59, v56, v57, v55, (uint64_t)v113, v61);
        __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v112, (uint64_t)&v117);
        swift_bridgeObjectRelease();
        swift_release();
        unsigned __int8 v63 = v103;
        char v64 = v60;
        uint64_t v65 = v60;
        uint64_t v66 = v104;
        uint64_t v67 = v105;
        uint64_t v68 = v106;
        uint64_t v69 = v107;
        uint64_t v71 = v108;
        uint64_t v70 = (uint64_t)v109;
        uint64_t v72 = (uint64_t)v113;
        outlined consume of __RKMaterialParameterBlock.Parameter?(v65, v104, v105, v106, v107, v108, (uint64_t)v109, (uint64_t)v113, v103);
        outlined consume of __RKMaterialParameterBlock.Parameter?(v64, v66, v67, v68, v69, v71, v70, v72, v63);
LABEL_27:
        char v54 = (uint64_t *)(v110 + 16);
        uint64_t v53 = v111 - 1;
        if (v111 == 1) {
          return (id)swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRetain_n();
      uint64_t v93 = v34;
      swift_bridgeObjectRetain_n();
      uint64_t v94 = v93;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
      uint64_t v95 = v115;
      _StringGuts._slowWithCString<A>(_:)();

      if (v95) {
        goto LABEL_50;
      }
      uint64_t v115 = 0;

LABEL_35:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_38;
    }
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v102 = v101 + 8;
  int v9 = (uint64_t *)(v3 + 40);
  while (1)
  {
    id v29 = (const char *)*(v9 - 1);
    uint64_t v28 = *v9;
    uint64_t v30 = *(void *)(v116 + 8);
    char v31 = *(unsigned char *)(v116 + 16);
    uint64_t v32 = *(void *)(v116 + 24);
    uint64_t v33 = *(uint64_t **)(v116 + 32);
    MEMORY[0x270FA5388](v6);
    uint64_t v34 = &v99 - 6;
    *(&v99 - 4) = v30;
    *((unsigned char *)&v99 - 24) = v31;
    uint64_t v97 = v32;
    uint64_t v98 = v33;
    uint64_t v110 = v35;
    uint64_t v111 = v7;
    v113 = (void *)v36;
    uint64_t v114 = v28;
    v112 = v29;
    if ((v28 & 0x1000000000000000) != 0
      || !(v28 & 0x2000000000000000 | (unint64_t)v29 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain_n();
      uint64_t v50 = v33;
      swift_bridgeObjectRetain_n();
      uint64_t v51 = v50;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
      _StringGuts._slowWithCString<A>(_:)();

      if (v8) {
        goto LABEL_48;
      }
      uint64_t v115 = 0;

      goto LABEL_15;
    }
    uint64_t v34 = &v99;
    if ((v28 & 0x2000000000000000) == 0) {
      break;
    }
    v117 = v29;
    uint64_t v118 = v28 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    uint64_t v39 = v33;
    swift_bridgeObjectRetain_n();
    uint64_t v40 = v39;
    swift_bridgeObjectRetain();
    closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v126);

    if (v8) {
      goto LABEL_48;
    }
    uint64_t v115 = 0;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_18:
    uint64_t v41 = v126;
    uint64_t v42 = v127;
    uint64_t v43 = v128;
    uint64_t v44 = v129;
    uint64_t v45 = v130;
    uint64_t v46 = v131;
    uint64_t v47 = v132;
    uint64_t v48 = v133;
    int v49 = v134;
    outlined init with copy of CustomMaterial(v116, (uint64_t)&v117);
    if (v49 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v135);
      swift_release();
      outlined destroy of CustomMaterial((uint64_t)&v117);
      int v49 = v143;
      if (v143 == 255)
      {
        uint64_t v6 = swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    else
    {
      outlined destroy of CustomMaterial((uint64_t)&v117);
      v135 = v41;
      uint64_t v136 = v42;
      uint64_t v137 = v43;
      uint64_t v138 = v44;
      uint64_t v139 = v45;
      uint64_t v140 = v46;
      uint64_t v141 = v47;
      uint64_t v142 = v48;
    }
    uint64_t v10 = v141;
    v113 = (void *)v142;
    uint64_t v11 = v139;
    uint64_t v12 = v140;
    uint64_t v14 = v137;
    uint64_t v13 = v138;
    uint64_t v15 = v135;
    v117 = (const char *)v135;
    uint64_t v118 = v136;
    int v16 = v49;
    uint64_t v17 = v136;
    uint64_t v104 = v136;
    uint64_t v105 = v137;
    uint64_t v119 = v137;
    uint64_t v120 = v138;
    uint64_t v106 = v138;
    uint64_t v107 = v139;
    uint64_t v121 = v139;
    uint64_t v122 = v140;
    uint64_t v108 = v140;
    v109 = (void *)v141;
    uint64_t v123 = v141;
    uint64_t v124 = v142;
    char v125 = v16;
    int v103 = v16;
    v112 = (const char *)(String.utf8CString.getter() + 32);
    outlined copy of __RKMaterialParameterBlock.Parameter(v15, v17, v14, v13, v11, v12, v10, (uint64_t)v113, v16);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v112, (uint64_t)&v117);
    swift_bridgeObjectRelease();
    swift_release();
    unsigned __int8 v18 = v103;
    uint64_t v19 = v15;
    uint64_t v20 = v15;
    uint64_t v22 = v104;
    uint64_t v21 = v105;
    uint64_t v23 = v106;
    uint64_t v24 = v107;
    uint64_t v26 = v108;
    uint64_t v25 = (uint64_t)v109;
    uint64_t v27 = (uint64_t)v113;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v20, v104, v105, v106, v107, v108, (uint64_t)v109, (uint64_t)v113, v103);
    outlined consume of __RKMaterialParameterBlock.Parameter?(v19, v22, v21, v23, v24, v26, v25, v27, v18);
LABEL_7:
    uint64_t v8 = v115;
    int v9 = (uint64_t *)(v110 + 16);
    uint64_t v7 = v111 - 1;
    if (v111 == 1) {
      goto LABEL_23;
    }
  }
  if (((unint64_t)v29 & 0x1000000000000000) == 0) {
    _StringObject.sharedUTF8.getter();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v37 = v33;
  swift_bridgeObjectRetain_n();
  uint64_t v38 = v37;
  swift_bridgeObjectRetain();
  closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v126);
  if (!v8)
  {
    uint64_t v115 = 0;

LABEL_15:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }

LABEL_48:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_49:

LABEL_50:
  swift_bridgeObjectRelease();
  id result = (id)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t CustomMaterial.copyParameters(from:)(void *a1)
{
  uint64_t v2 = v1;
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)&v67);
  uint64_t v4 = v67;
  uint64_t v5 = v68;
  v42[0] = v67;
  v42[1] = v68;
  char v44 = v70;
  int v43 = v69;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v42, 1);
  outlined consume of __EntityInfoComponent?(v4, v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7);
  if (v8 == 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  if (!v8) {
    uint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v10 = 2;
  }
  *(void *)(v1 + 40) = v10;
  *(unsigned char *)(v1 + 48) = 0;
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v71);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      CustomMaterial.copyParameterBlock(from:)();
      outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
      swift_dynamicCast();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v42);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v67);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    if (swift_dynamicCast())
    {
      CustomMaterial.copyParameterBlock(from:)();
      outlined destroy of SimpleMaterial((uint64_t)&v67);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    if (!swift_dynamicCast()) {
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
    swift_dynamicCast();
    uint64_t v11 = v45;
    swift_bridgeObjectRetain_n();
    id v12 = v11;
    swift_bridgeObjectRetain_n();
    id v13 = v12;
    specialized String.withCString<A>(_:)(0x6E6954726F6C6F63, 0xE900000000000074, v13, (uint64_t)&v49);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v14 = v49;
    uint64_t v15 = v50;
    uint64_t v40 = v51;
    uint64_t v16 = v52;
    uint64_t v17 = v53;
    uint64_t v18 = v54;
    uint64_t v19 = v55;
    uint64_t v20 = v56;
    int v21 = v57;
    outlined init with copy of UnlitMaterial((uint64_t)v42, (uint64_t)v46);
    if (v21 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v58);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v46);
      id v14 = v58;
      uint64_t v15 = v59;
      uint64_t v40 = v60;
      uint64_t v16 = v61;
      uint64_t v17 = v62;
      uint64_t v18 = v63;
      uint64_t v19 = v64;
      uint64_t v20 = v65;
      int v21 = v66;
      if (v66 == 255) {
        goto LABEL_23;
      }
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v46);
    }
    if (v21 == 6)
    {
      uint64_t v47 = &type metadata for CustomMaterial;
      uint64_t v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      outlined copy of __RKMaterialParameterBlock.Parameter(v14, v15, v40, v16, v17, v18, v19, v20, 6);
      outlined copy of __RKMaterialParameterBlock.Parameter(v14, v15, v40, v16, v17, v18, v19, v20, 6);
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);

      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v14, v50, v51, 0, 0);
      swift_release();
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, 6u);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, 6u);
    }
    else if (v21 == 5)
    {
      v22.n128_u64[0] = (unint64_t)v14;
      uint64_t v38 = v15;
      v22.n128_u64[1] = v15;
      uint64_t v23 = (void *)specialized SIMD4<>.cgColor.getter(v22);
      uint64_t v47 = &type metadata for CustomMaterial;
      uint64_t v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);

      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v23, v50, v51, 0, 0);
      swift_release();
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v38, v40, v16, v17, v18, v19, v20, 5u);
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, v21);
    }
LABEL_23:
    uint64_t v24 = v45;
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    swift_bridgeObjectRetain_n();
    id v26 = v25;
    specialized String.withCString<A>(_:)(0xD000000000000010, 0x8000000228352310, v26, (uint64_t)&v49);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v27 = v49;
    uint64_t v28 = v51;
    uint64_t v29 = v52;
    uint64_t v30 = v53;
    uint64_t v31 = v54;
    uint64_t v39 = v50;
    uint64_t v41 = v55;
    uint64_t v32 = v56;
    int v33 = v57;
    outlined init with copy of UnlitMaterial((uint64_t)v42, (uint64_t)v46);
    if (v33 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v58);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v46);
      uint64_t v34 = v58;
      uint64_t v35 = v59;
      uint64_t v28 = v60;
      uint64_t v29 = v61;
      uint64_t v30 = v62;
      uint64_t v31 = v63;
      uint64_t v41 = v64;
      uint64_t v32 = v65;
      int v33 = v66;
      if (v66 == 255)
      {
LABEL_29:
        outlined destroy of UnlitMaterial((uint64_t)v42);
        outlined destroy of UnlitMaterial((uint64_t)&v67);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      }
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v46);
      uint64_t v34 = v27;
      uint64_t v35 = v39;
    }
    if (v33 == 1)
    {
      uint64_t v47 = &type metadata for CustomMaterial;
      uint64_t v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      outlined copy of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
      swift_retain();
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);
      swift_release();
      id v36 = v49;
      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v49, v35, 84148994, 0, 0);
      swift_release();

      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, v33);
    }
    goto LABEL_29;
  }
  CustomMaterial.copyParameterBlock(from:)();
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
  swift_dynamicCast();
  CustomMaterial.copyCustomParameters(from:)((uint64_t)v42);
  outlined destroy of CustomMaterial((uint64_t)v42);
  outlined destroy of CustomMaterial((uint64_t)&v67);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
}

uint64_t CustomMaterial.blending.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 20);
  int v4 = *(_DWORD *)(a1 + 16);
  v6[0] = *(void *)a1;
  uint64_t v1 = v6[0];
  v6[1] = v2;
  char v8 = v3;
  int v7 = v4;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v6, 1);

  return outlined consume of __EntityInfoComponent?(v1, v2);
}

uint64_t CustomMaterial.baseColor.setter(uint64_t a1)
{
  return CustomMaterial.baseColor.setter(a1, (void (*)(void, void, void, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t static CustomMaterial.createDefaultSurfaceShader(from:with:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = *a2;
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  outlined init with copy of __REAssetService(a1, (uint64_t)v55);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v59);
    outlined init with copy of __REAssetService(a1, (uint64_t)v55);
    swift_dynamicCast();
    uint64_t v7 = v62;
    uint64_t v8 = v63;
    uint64_t v9 = v64;
    uint64_t v10 = v65;
    uint64_t v11 = v66;
    id v12 = v67;
    *a3 = v62;
    a3[1] = v8;
    a3[2] = v9;
    a3[3] = v10;
    a3[4] = v11;
    a3[5] = (uint64_t)v12;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v7, v8, v9, v10, v11, v12);
    return outlined destroy of CustomMaterial((uint64_t)v59);
  }
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v59);
  uint64_t v14 = v60;
  uint64_t v15 = v61;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  if (!AssetHandle)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v58);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)&v49);
    swift_dynamicCast();
    BOOL v17 = v5 == 2;
    if (v5 == 2) {
      uint64_t v18 = 0x6F637261656C435FLL;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      uint64_t v19 = (void *)0xEA00000000007461;
    }
    else {
      uint64_t v19 = (void *)0xE000000000000000;
    }
    if ((v57 & 2) == 0)
    {
      uint64_t v20 = 0;
      int v21 = (void *)0xE000000000000000;
LABEL_28:
      unint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      unint64_t v49 = 0xD000000000000025;
      unint64_t v50 = 0x800000022835ACB0;
      v41._uint64_t countAndFlagsBits = v18;
      v41._object = v19;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._uint64_t countAndFlagsBits = v20;
      v42._object = v21;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      unint64_t v22 = v49;
      unint64_t v40 = v50;
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v55);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v59);
      goto LABEL_29;
    }
    uint64_t v46 = v19;
    uint64_t v47 = v18;
    uint64_t v24 = v56;
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    swift_bridgeObjectRetain_n();
    id v26 = v25;
    specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v26, (uint64_t)v51);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = (void *)v51[0];
    uint64_t v27 = v51[3];
    uint64_t v44 = v51[2];
    uint64_t v45 = v51[1];
    uint64_t v28 = v51[4];
    uint64_t v29 = v51[5];
    uint64_t v31 = v51[6];
    uint64_t v30 = v51[7];
    int v32 = v52;
    outlined init with copy of PhysicallyBasedMaterial((uint64_t)v55, (uint64_t)&v49);
    if (v32 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)v53);
      swift_release();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v49);
      uint64_t v33 = v53[1];
      uint64_t v48 = (void *)v53[0];
      uint64_t v34 = v53[2];
      uint64_t v35 = v53[3];
      uint64_t v36 = v53[4];
      uint64_t v37 = v53[5];
      uint64_t v38 = v53[6];
      uint64_t v39 = v53[7];
      int v32 = v54;
    }
    else
    {
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v49);
      uint64_t v34 = v44;
      uint64_t v33 = v45;
      uint64_t v35 = v27;
      uint64_t v36 = v28;
      uint64_t v37 = v29;
      uint64_t v38 = v31;
      uint64_t v39 = v30;
    }
    uint64_t v19 = v46;
    if (v32 != 255)
    {
      if (v32 == 2)
      {
        outlined consume of __RKMaterialParameterBlock.Parameter?(v48, v33, v34, v35, v36, v37, v38, v39, 2u);
        int v21 = (void *)0xEC00000074756F74;
        uint64_t v20 = 0x75436168706C415FLL;
LABEL_27:
        uint64_t v18 = v47;
        goto LABEL_28;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v48, v33, v34, v35, v36, v37, v38, v39, v32);
    }
    uint64_t v20 = 0;
    int v21 = (void *)0xE000000000000000;
    goto LABEL_27;
  }
  if (swift_dynamicCast())
  {
    outlined destroy of SimpleMaterial((uint64_t)v59);
    unint64_t v22 = 0xD00000000000001CLL;
    uint64_t v23 = "surfaceShader_SimpleMaterial";
LABEL_19:
    unint64_t v40 = (unint64_t)(v23 - 32) | 0x8000000000000000;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
    *a3 = 4;
    a3[1] = v22;
    a3[2] = v40;
    a3[3] = AssetHandle;
    a3[4] = (uint64_t)&outlined read-only object #0 of static CustomMaterial.createDefaultSurfaceShader(from:with:);
    a3[5] = (uint64_t)v43;
    goto LABEL_30;
  }
  if (swift_dynamicCast())
  {
    outlined destroy of UnlitMaterial((uint64_t)v59);
    unint64_t v22 = 0xD00000000000001BLL;
    uint64_t v23 = "surfaceShader_UnlitMaterial";
    goto LABEL_19;
  }
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
LABEL_30:
  RERelease();
  return swift_release();
}

uint64_t static CustomMaterial.createDefaultGeometryModifier()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v9);
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  int v5 = *(void (**)(uint64_t, uint64_t))(v4 + 32);
  swift_retain();
  v5(v3, v4);
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (AssetHandle)
  {
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
    uint64_t result = swift_release();
    *(unsigned char *)a1 = 3;
    *(void *)(a1 + 8) = 0xD000000000000010;
    *(void *)(a1 + 16) = 0x8000000228351180;
    *(void *)(a1 + 24) = AssetHandle;
    *(void *)(a1 + 32) = &outlined read-only object #0 of static CustomMaterial.createDefaultGeometryModifier();
    *(void *)(a1 + 40) = v7;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[3];
  id v17 = (id)a1[4];
  int v6 = *((unsigned __int8 *)a1 + 40);
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  if (v5)
  {
    swift_retain();
    RERetain();
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v18);
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    uint64_t v10 = v3;
    int v11 = v6;
    uint64_t v12 = v4;
    id v13 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
    swift_retain();
    v13(v8, v9);
    uint64_t v4 = v12;
    int v6 = v11;
    uint64_t v3 = v10;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = 0x696C6C6174656D2ELL;
    v14._object = (void *)0xE900000000000062;
    String.append(_:)(v14);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  swift_release();
  uint64_t v15 = &outlined read-only object #1 of static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:);
  *(unsigned char *)a2 = 3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v3;
  if (v6) {
    uint64_t v15 = &outlined read-only object #0 of static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:);
  }
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v17;
  swift_bridgeObjectRetain();

  return v17;
}

id static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[3];
  id v17 = (id)a1[4];
  int v6 = *((unsigned __int8 *)a1 + 40);
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  if (v5)
  {
    swift_retain();
    RERetain();
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v18);
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    uint64_t v10 = v3;
    int v11 = v6;
    uint64_t v12 = v4;
    id v13 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
    swift_retain();
    v13(v8, v9);
    uint64_t v4 = v12;
    int v6 = v11;
    uint64_t v3 = v10;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = 0x696C6C6174656D2ELL;
    v14._object = (void *)0xE900000000000062;
    String.append(_:)(v14);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  swift_release();
  uint64_t v15 = &outlined read-only object #1 of static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:);
  *(unsigned char *)a2 = 4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v3;
  if (v6) {
    uint64_t v15 = &outlined read-only object #0 of static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:);
  }
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v17;
  swift_bridgeObjectRetain();

  return v17;
}

uint64_t CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)@<X0>(void *a1@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *(unsigned __int8 *)a1;
  uint64_t v38 = a1[1];
  uint64_t v30 = a1[2];
  uint64_t v27 = a1[3];
  uint64_t v36 = a1[4];
  uint64_t v56 = (void *)a1[5];
  uint64_t v33 = *(unsigned __int8 *)a2;
  uint64_t v5 = a2[1];
  uint64_t v34 = a2[2];
  uint64_t v35 = a2[3];
  int v6 = (void *)a2[5];
  uint64_t v29 = a2[4];
  char v32 = *a3;
  uint64_t v8 = *((void *)a3 + 1);
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v9 = a3[28];
  uint64_t v10 = *((unsigned int *)a3 + 6);
  uint64_t v24 = v10 | (v9 << 32);
  uint64_t v11 = a3[29];
  uint64_t v31 = *((void *)a3 + 4);
  char v25 = a3[41];
  char v26 = a3[40];
  uint64_t v12 = REMaterialParameterBlockValueCreate();
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a4 + 104) = 0u;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = v12;
  *(void *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 48) = 1;
  *(_OWORD *)(a4 + 56) = xmmword_2283349E0;
  *(unsigned char *)(a4 + 76) = 0;
  *(_DWORD *)(a4 + 72) = 0;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(void *)(a4 + 272) = 0;
  *(void *)(a4 + 280) = 0;
  *(void *)(a4 + 320) = 0;
  *(void *)(a4 + 296) = 0;
  *(void *)(a4 + 304) = 0;
  *(void *)(a4 + 288) = 3;
  *(_WORD *)(a4 + 312) = 0;
  *(_WORD *)(a4 + 328) = 257;
  LOBYTE(v39) = v32;
  uint64_t v40 = v8;
  uint64_t v41 = v7;
  char v43 = v9;
  int v42 = v10;
  char v44 = v11;
  uint64_t v45 = v31;
  char v46 = v26;
  char v47 = v25;
  LOWORD(v48) = CustomMaterial.Descriptor.toCustomFeatureFlags()();
  *((void *)&v48 + 1) = 0;
  LOBYTE(v49) = 1;
  *(_WORD *)((char *)&v49 + 1) = 258;
  *((void *)&v49 + 1) = v33;
  *(void *)&long long v50 = v5;
  *((void *)&v50 + 1) = v34;
  *(void *)&long long v51 = v35;
  *((void *)&v51 + 1) = v29;
  *(void *)&long long v52 = v6;
  *((void *)&v52 + 1) = v37;
  *(void *)&long long v53 = v38;
  *((void *)&v53 + 1) = v30;
  *(void *)&long long v54 = v27;
  *((void *)&v54 + 1) = v36;
  uint64_t v55 = v56;
  if (one-time initialization token for shaderCacheRegistry != -1) {
    swift_once();
  }
  uint64_t v14 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v14, (uint64_t)&v39);
  specialized AssetServiceScopedRegistry.instance(for:)(&v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  uint64_t v15 = specialized ShaderCache.getResource(_:)((uint64_t)&v48);
  if (v28)
  {
    swift_release();
    outlined consume of CustomMaterial.Blending?(v8, v7);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of CustomMaterial.Blending?(*(void *)(a4 + 56), 2);
    outlined destroy of BodyTrackingComponent?(a4 + 104, &demangling cache variable for type metadata for __REAssetService?);
    swift_release();
    return outlined consume of CustomMaterial.Descriptor?(*(void *)(a4 + 272), *(void *)(a4 + 280), *(void *)(a4 + 288));
  }
  else
  {
    uint64_t v16 = v15;
    swift_release();
    long long v17 = v53;
    *(_OWORD *)(a4 + 216) = v52;
    *(_OWORD *)(a4 + 232) = v17;
    *(_OWORD *)(a4 + 248) = v54;
    long long v18 = v49;
    *(_OWORD *)(a4 + 152) = v48;
    *(_OWORD *)(a4 + 168) = v18;
    long long v19 = v51;
    *(_OWORD *)(a4 + 184) = v50;
    *(void *)a4 = v16;
    *(void *)(a4 + 264) = v55;
    *(_OWORD *)(a4 + 200) = v19;
    *(void *)(a4 + 40) = v11;
    *(unsigned char *)(a4 + 48) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v21 = type metadata accessor for __MaterialResource();
    *(void *)(inited + 32) = v16;
    *(void *)(inited + 56) = v21;
    *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
    swift_retain_n();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    *(void *)(a4 + 80) = REDirectParameterBufferCreate();
    *(void *)(a4 + 88) = 0;
    *(unsigned char *)(a4 + 96) = 0;
    if (v7 == 2) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v8;
    }
    uint64_t v39 = v23;
    uint64_t v40 = v7;
    BYTE4(v41) = BYTE4(v24);
    LODWORD(v41) = v24;
    CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)&v39, 0);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);
    return outlined consume of __EntityInfoComponent?(v23, v7);
  }
}

uint64_t CustomMaterial.Descriptor.toCustomFeatureFlags()()
{
  if (((*(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32)) & 0x100000000) != 0) {
    int v1 = 513;
  }
  else {
    int v1 = 1;
  }
  if ((unint64_t)(*(void *)(v0 + 16) - 1) >= 2) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  unsigned int v3 = v2 | (0x800020004uLL >> (16 * *(unsigned char *)v0));
  if (*(unsigned char *)(v0 + 41)) {
    uint64_t result = v3 | 0x10;
  }
  else {
    uint64_t result = v3;
  }
  if ((*(unsigned char *)(v0 + 40) & 1) == 0) {
    return (*(unsigned __int16 *)(v0 + 32) << 6) & 0x1C00 | (32 * (*(_WORD *)(v0 + 32) & 0xF)) | result;
  }
  return result;
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v11 = (void *)a1[4];
  char v12 = *((unsigned char *)a1 + 40);
  uint64_t v13 = *(void *)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  long long v17 = *(void **)(a2 + 32);
  char v18 = *(unsigned char *)(a2 + 40);
  int v19 = *a3;
  uint64_t v38 = *(void *)a4;
  uint64_t v40 = *(void *)(a4 + 8);
  uint64_t v41 = *(void *)a2;
  unint64_t v39 = *(unsigned int *)(a4 + 16) | ((unint64_t)*(unsigned __int8 *)(a4 + 20) << 32);
  char v37 = *a5;
  uint64_t v47 = v7;
  uint64_t v48 = v8;
  uint64_t v49 = v10;
  uint64_t v50 = v9;
  long long v51 = v11;
  LOBYTE(v52) = v12;
  uint64_t v42 = v14;
  uint64_t v43 = v16;
  uint64_t v44 = v15;
  uint64_t v45 = v17;
  LOBYTE(v46) = v18;
  int v60 = v19;
  unsigned __int8 v61 = v19;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)__src, (uint64_t)&v54, (uint64_t)&v47, (uint64_t)&v41, &v61);
  if (v6)
  {
    outlined consume of __EntityInfoComponent?(v38, v40);
    outlined consume of CustomMaterial.GeometryModifier?(v13, v14, v16, v15, v17);

    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of CustomMaterial.GeometryModifier?(v13, v14, v16, v15, v17);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    char v21 = __src[0];
    uint64_t v22 = __src[1];
    uint64_t v23 = __src[2];
    uint64_t v24 = __src[3];
    char v25 = (void *)__src[4];
    char v26 = (void *)__src[5];
    char v34 = v54;
    uint64_t v27 = v56;
    uint64_t v33 = v55;
    uint64_t v28 = v57;
    uint64_t v29 = v58;
    uint64_t v30 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v26;
    LOBYTE(v54) = v21;
    uint64_t v55 = v22;
    uint64_t v56 = v23;
    id v35 = v31;
    uint64_t v57 = v24;
    uint64_t v58 = v25;
    id v59 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = v30;
    LOBYTE(v47) = v34;
    uint64_t v48 = v33;
    uint64_t v49 = v27;
    uint64_t v50 = v28;
    long long v51 = v29;
    id v52 = v32;
    LOBYTE(v41) = v60;
    uint64_t v42 = v38;
    uint64_t v43 = v40;
    BYTE4(v44) = BYTE4(v39);
    LODWORD(v44) = v39;
    BYTE5(v44) = v37;
    uint64_t v45 = 0;
    __int16 v46 = 0;
    outlined copy of CustomMaterial.Blending(v38, v40);
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v54, &v47, (char *)&v41, (uint64_t)__src);
    memcpy(a6, __src, 0x14AuLL);
    RERelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of __EntityInfoComponent?(v38, v40);
  }
}

__n128 CustomMaterial.Descriptor.init(lightingModel:blending:faceCulling:options:)@<Q0>(unsigned char *a1@<X0>, __n128 *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int32 v5 = a2[1].n128_u32[0];
  unsigned __int8 v6 = a2[1].n128_u8[4];
  char v7 = *a3;
  uint64_t v8 = *a4;
  unsigned __int8 v9 = *((unsigned char *)a4 + 8);
  *(unsigned char *)a5 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a5 + 8) = *a2;
  *(unsigned char *)(a5 + 28) = v6;
  *(_DWORD *)(a5 + 24) = v5;
  *(unsigned char *)(a5 + 29) = v7;
  *(void *)(a5 + 32) = v8;
  *(_WORD *)(a5 + 40) = v9;
  return result;
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  unsigned __int8 v9 = *a3;
  uint64_t v20 = *(void *)a1;
  long long v21 = *(_OWORD *)(a1 + 8);
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  char v24 = v6;
  long long v10 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v10;
  uint64_t v18 = v7;
  char v19 = v8;
  unsigned __int8 v16 = v9;
  long long v13 = xmmword_228323FE0;
  char v15 = 0;
  int v14 = 0;
  char v12 = 2;
  return CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)(&v20, (uint64_t)v17, &v16, (uint64_t)&v13, &v12, a4);
}

BOOL static CustomMaterial.Descriptor.AttributeSet.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.Descriptor.AttributeSet.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t CustomMaterial.Descriptor.FunctionConstantOptions.rawValue.getter()
{
  return *(void *)v0;
}

RealityFoundation::CustomMaterial::Descriptor::FunctionConstantOptions __swiftcall CustomMaterial.Descriptor.FunctionConstantOptions.init(rawValue:)(RealityFoundation::CustomMaterial::Descriptor::FunctionConstantOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableVideo.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableSpecularTreatment.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.disablePostProcessTonemap.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableDitherOpacity.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enablePassthroughBlur.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableVCABlur.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableBarycentricCoordinates.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void CustomMaterial.Descriptor.lightingModel.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CustomMaterial.Descriptor.lightingModel.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.lightingModel.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.Descriptor.blending.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 28);
  int v5 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return outlined copy of CustomMaterial.Blending?(v2, v3);
}

uint64_t CustomMaterial.Descriptor.blending.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  char v5 = *((unsigned char *)a1 + 20);
  uint64_t v6 = v1 + 24;
  uint64_t result = outlined consume of CustomMaterial.Blending?(*(void *)(v6 - 16), *(void *)(v6 - 8));
  *(void *)(v6 - 16) = v2;
  *(void *)(v6 - 8) = v3;
  *(unsigned char *)(v6 + 4) = v5;
  *(_DWORD *)uint64_t v6 = v4;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.blending.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.faceCulling.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 29);
}

unsigned char *CustomMaterial.Descriptor.faceCulling.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 29) = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.faceCulling.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.options.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t CustomMaterial.Descriptor.options.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.options.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.attributeSet.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 41);
}

unsigned char *CustomMaterial.Descriptor.attributeSet.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 41) = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.attributeSet.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CustomMaterial.Descriptor.init(lightingModel:blending:faceCulling:options:attributeSet:)@<Q0>(unsigned char *a1@<X0>, __n128 *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int32 v6 = a2[1].n128_u32[0];
  unsigned __int8 v7 = a2[1].n128_u8[4];
  char v8 = *a3;
  uint64_t v9 = *a4;
  char v10 = *((unsigned char *)a4 + 8);
  char v11 = *a5;
  *(unsigned char *)a6 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a6 + 8) = *a2;
  *(unsigned char *)(a6 + 28) = v7;
  *(_DWORD *)(a6 + 24) = v6;
  *(unsigned char *)(a6 + 29) = v8;
  *(void *)(a6 + 32) = v9;
  *(unsigned char *)(a6 + 40) = v10;
  *(unsigned char *)(a6 + 41) = v11;
  return result;
}

void CustomMaterial.Descriptor.hash(into:)()
{
  Swift::UInt v1 = v0[29];
  Swift::UInt v2 = *((void *)v0 + 4);
  int v3 = v0[40];
  if ((unint64_t)(*((void *)v0 + 2) - 1) >= 2) {
    Swift::UInt v4 = (v0[28] & 1) + 1;
  }
  else {
    Swift::UInt v4 = 0;
  }
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int CustomMaterial.Descriptor.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  unsigned __int8 v3 = v0[28];
  Swift::UInt v4 = v0[29];
  Swift::UInt v5 = *((void *)v0 + 4);
  unsigned __int8 v6 = v0[40];
  Hasher.init(_seed:)();
  if ((unint64_t)(v2 - 1) >= 2) {
    Swift::UInt v7 = (v3 & 1) + 1;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v4);
  if (v6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Descriptor()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  unsigned __int8 v3 = v0[28];
  Swift::UInt v4 = v0[29];
  Swift::UInt v5 = *((void *)v0 + 4);
  unsigned __int8 v6 = v0[40];
  Hasher.init(_seed:)();
  if ((unint64_t)(v2 - 1) >= 2) {
    Swift::UInt v7 = (v3 & 1) + 1;
  }
  else {
    Swift::UInt v7 = 0;
  }
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v4);
  if (v6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:descriptor:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  char v8 = (void *)a1[4];
  char v9 = *((unsigned char *)a1 + 40);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  int v14 = *(void **)(a2 + 32);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 40);
  int v16 = *a3;
  uint64_t v38 = *((void *)a3 + 1);
  uint64_t v39 = *((void *)a3 + 2);
  unint64_t v40 = *((unsigned int *)a3 + 6) | ((unint64_t)a3[28] << 32);
  unsigned __int8 v37 = a3[29];
  uint64_t v36 = (void *)*((void *)a3 + 4);
  unsigned __int8 v35 = a3[40];
  unsigned __int8 v34 = a3[41];
  uint64_t v48 = *a1;
  uint64_t v49 = v5;
  uint64_t v50 = v7;
  uint64_t v51 = v6;
  id v52 = v8;
  LOBYTE(v53) = v9;
  uint64_t v41 = v10;
  uint64_t v42 = v11;
  uint64_t v43 = v13;
  uint64_t v44 = v12;
  uint64_t v45 = v14;
  unsigned __int8 v46 = v15;
  int v61 = v16;
  unsigned __int8 v62 = v16;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)__src, (uint64_t)&v55, (uint64_t)&v48, (uint64_t)&v41, &v62);
  if (v4)
  {
    outlined consume of CustomMaterial.Blending?(v38, v39);
    outlined consume of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);

    swift_unknownObjectRelease();
  }
  else
  {
    outlined consume of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    char v18 = __src[0];
    uint64_t v20 = __src[1];
    uint64_t v19 = __src[2];
    uint64_t v21 = __src[3];
    uint64_t v22 = (void *)__src[4];
    uint64_t v23 = (void *)__src[5];
    char v32 = v55;
    uint64_t v24 = v57;
    uint64_t v31 = v56;
    uint64_t v26 = v58;
    char v25 = v59;
    uint64_t v27 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v28 = v23;
    LOBYTE(v55) = v18;
    uint64_t v56 = v20;
    uint64_t v57 = v19;
    id v29 = v28;
    uint64_t v58 = v21;
    id v59 = v22;
    id v60 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = v27;
    LOBYTE(v48) = v32;
    uint64_t v49 = v31;
    uint64_t v50 = v24;
    uint64_t v51 = v26;
    id v52 = v25;
    id v53 = v30;
    LOBYTE(v41) = v61;
    uint64_t v42 = v38;
    uint64_t v43 = v39;
    BYTE4(v44) = BYTE4(v40);
    LODWORD(v44) = v40;
    BYTE5(v44) = v37;
    uint64_t v45 = v36;
    unsigned __int8 v46 = v35;
    unsigned __int8 v47 = v34;
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v55, &v48, (char *)&v41, (uint64_t)__src);
    memcpy(a4, __src, 0x14AuLL);
    RERelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t CustomMaterial.init(from:surfaceShader:geometryModifier:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v20 = *(void *)a2;
  uint64_t v26 = *(void *)(a2 + 32);
  uint64_t v27 = *(void *)(a2 + 24);
  char v25 = *(unsigned char *)(a2 + 40);
  long long v23 = a3[1];
  long long v24 = *a3;
  uint64_t v22 = *((void *)a3 + 4);
  char v21 = *((unsigned char *)a3 + 40);
  static CustomMaterial.getLightingModel(from:)((uint64_t)a1, (char *)__src);
  unsigned __int8 v19 = __src[0];
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)__src);
  uint64_t v18 = __src[0];
  uint64_t v6 = __src[1];
  char v7 = BYTE4(__src[2]);
  int v8 = __src[2];
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 112))(v10, v9);
  uint64_t v36 = v20;
  BOOL v13 = v11 < 3 && (v12 & 1) == 0;
  long long v37 = *(_OWORD *)(a2 + 8);
  if (v13) {
    char v14 = v11;
  }
  else {
    char v14 = 2;
  }
  uint64_t v38 = v27;
  uint64_t v39 = v26;
  char v40 = v25;
  v33[0] = v24;
  v33[1] = v23;
  uint64_t v34 = v22;
  char v35 = v21;
  unsigned __int8 v32 = v19;
  v29[0] = v18;
  v29[1] = v6;
  char v31 = v7;
  int v30 = v8;
  char v28 = v14;
  outlined copy of CustomMaterial.Blending(v18, v6);
  uint64_t v15 = __src[44];
  CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)(&v36, (uint64_t)v33, &v32, (uint64_t)v29, &v28, __src);
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined consume of __EntityInfoComponent?(v18, v6);
  }
  else
  {
    memcpy(a4, __src, 0x14AuLL);
    CustomMaterial.copyParameters(from:)(a1);
    outlined consume of __EntityInfoComponent?(v18, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
}

void CustomMaterial.init(from:geometryModifier:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v36 = *(void *)a2;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v35 = *(void *)(a2 + 24);
  uint64_t v6 = *(void **)(a2 + 32);
  char v34 = *(unsigned char *)(a2 + 40);
  static CustomMaterial.getLightingModel(from:)((uint64_t)a1, (char *)__src);
  int v7 = LOBYTE(__src[0]);
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)__src);
  uint64_t v42 = __src[0];
  uint64_t v59 = __src[1];
  unint64_t v8 = LODWORD(__src[2]) | ((unint64_t)BYTE4(__src[2]) << 32);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10);
  if (v11 < 3 && (v12 & 1) == 0) {
    char v14 = v11;
  }
  else {
    char v14 = 2;
  }
  LOBYTE(v52) = v7;
  static CustomMaterial.createDefaultSurfaceShader(from:with:)((uint64_t)a1, (unsigned __int8 *)&v52, __src);
  uint64_t v15 = (void *)__src[2];
  if (__src[2])
  {
    char v31 = v14;
    unsigned __int8 v32 = v6;
    uint64_t v16 = __src[1];
    uint64_t v38 = __src[0];
    uint64_t v39 = __src[3];
    uint64_t v40 = __src[4];
    uint64_t v41 = (void *)__src[5];
    __src[0] = 0;
    __src[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v36;
    v17._object = v4;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 95;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v15;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = 95;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    unint64_t v21 = 0xE500000000000000;
    uint64_t v22 = 0x74696C6E75;
    if (v7 != 1)
    {
      uint64_t v22 = 0x616F637261656C63;
      unint64_t v21 = 0xE900000000000074;
    }
    if (v7) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 7629164;
    }
    if (v7) {
      unint64_t v24 = v21;
    }
    else {
      unint64_t v24 = 0xE300000000000000;
    }
    unint64_t v25 = v24;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    uint64_t v52 = v36;
    uint64_t v53 = (uint64_t)v4;
    uint64_t v54 = v5;
    uint64_t v55 = v35;
    uint64_t v56 = (uint64_t)v32;
    LOBYTE(v57) = v34;
    v26._uint64_t countAndFlagsBits = 0x6D6F65675FLL;
    v26._object = (void *)0xE500000000000000;
    String.append(_:)(v26);
    static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)(&v52, (uint64_t)__src);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)__src[5];
    LOBYTE(v52) = v38;
    uint64_t v53 = v16;
    uint64_t v54 = v15;
    uint64_t v55 = v39;
    uint64_t v56 = v40;
    uint64_t v57 = v41;
    LOBYTE(v51[0]) = __src[0];
    v51[1] = __src[1];
    v51[2] = __src[2];
    v51[3] = __src[3];
    v51[4] = __src[4];
    v51[5] = __src[5];
    v43[0] = v7;
    uint64_t v44 = v42;
    uint64_t v45 = v59;
    char v47 = BYTE4(v8);
    int v46 = v8;
    char v48 = v31;
    uint64_t v49 = 0;
    __int16 v50 = 0;
    outlined copy of CustomMaterial.Blending(v42, v59);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v38, v16, (uint64_t)v15, v39, v40, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v28 = v27;
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v52, v51, v43, (uint64_t)__src);
    if (v37)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      outlined consume of __EntityInfoComponent?(v42, v59);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v38, v16, (uint64_t)v15, v39, v40, v41);
      return;
    }
    memcpy(a3, __src, 0x14AuLL);
    CustomMaterial.copyParameters(from:)(a1);
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of __MaterialResource.CoreMaterialFunction?(v38, v16, (uint64_t)v15, v39, v40, v41);
    outlined consume of __EntityInfoComponent?(v42, v59);
    uint64_t v30 = (uint64_t)a1;
  }
  else
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
    swift_allocError();
    *id v29 = 2;
    swift_willThrow();
    outlined consume of __EntityInfoComponent?(v42, v59);
    uint64_t v30 = (uint64_t)a1;
  }
  __swift_destroy_boxed_opaque_existential_1(v30);
}

__n128 CustomMaterial.Custom.value.getter()
{
  return *(__n128 *)v0;
}

void CustomMaterial.Custom.value.setter(__n128 a1)
{
  __n128 *v1 = a1;
}

uint64_t (*CustomMaterial.Custom.value.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Custom.__valueKey.getter()
{
  return 0x6172615072657375;
}

uint64_t static CustomMaterial.Custom.__textureKey.getter()
{
  return 0x4365727574786574;
}

uint64_t CustomMaterial.Custom.texture.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Custom.texture.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*CustomMaterial.Custom.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.Custom.init(value:texture:)@<X0>(uint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3 = *(void *)result;
  unsigned __int32 v4 = *(_DWORD *)(result + 8);
  *a2 = a3;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u32[2] = v4;
  return result;
}

double CustomMaterial.Custom.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  if (v7)
  {
    swift_retain();
    id v8 = (id)REMaterialCreateDefaultSamplerDescriptor();
    char v9 = 1;
    uint64_t v10 = 84148994;
  }
  else
  {
    id v8 = 0;
    uint64_t v10 = 0;
    char v9 = -1;
  }
  strcpy((char *)a1, "textureCustom");
  *(_WORD *)(a1 + 14) = -4864;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v10;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v9;
  *(_OWORD *)a2 = xmmword_22831EBD0;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 80) = 5;
  return result;
}

uint64_t CustomMaterial.Custom.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, int8x16_t *a2@<X8>)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v5 = Material.getFloat4Parameter(key:)(0x6172615072657375, 0xED0000726574656DLL, v4);
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v10 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  Material.getTextureParameter(key:)(0x4365727574786574, 0xED00006D6F747375, v10, (uint64_t)&v19);
  uint64_t v13 = v20;
  if (v20)
  {
    char v14 = v19;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v14, v13);
    int v15 = 84148994;
  }
  else
  {
    int v15 = 0;
  }
  v11.i32[0] = 0;
  v12.i32[0] = v9 & 1;
  int8x16_t v16 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v11), 0);
  v17.i64[0] = (uint64_t)v5;
  v17.i64[1] = v7;
  *a2 = vandq_s8(v17, v16);
  a2[1].i64[0] = v13;
  a2[1].i32[2] = v15;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

uint64_t (*CustomMaterial.baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.BaseColor.init(material:alternateTintKey:)(v4, 0, 0, a1);
  return CustomMaterial.baseColor.modify;
}

uint64_t CustomMaterial.baseColor.modify(uint64_t a1, char a2)
{
  return CustomMaterial.baseColor.modify(a1, a2, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(void, void, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.metallic.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Metallic.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.metallic.modify;
}

uint64_t CustomMaterial.metallic.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.roughness.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(void, void, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.roughness.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Roughness.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.roughness.modify;
}

uint64_t CustomMaterial.roughness.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void *key path getter for CustomMaterial.baseColor : CustomMaterial@<X0>(uint64_t a1@<X0>, void *(*a2)(void *__return_ptr, void *, void, void)@<X3>, uint64_t a3@<X8>)
{
  void v9[3] = &type metadata for CustomMaterial;
  v9[4] = &protocol witness table for CustomMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v9[0] + 16);
  double result = a2(v10, v9, 0, 0);
  uint64_t v7 = v10[1];
  int v8 = v11;
  *(void *)a3 = v10[0];
  *(void *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void key path setter for CustomMaterial.baseColor : CustomMaterial(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v6 = *a1;
  swift_retain();
  id v7 = v6;
  a5();
  swift_release();
}

uint64_t CustomMaterial.emissiveColor.setter(uint64_t a1)
{
  return CustomMaterial.baseColor.setter(a1, (void (*)(void, void, void, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.setter(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  uint64_t v2 = *(void **)a1;
  a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);

  return swift_release();
}

uint64_t (*CustomMaterial.emissiveColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.emissiveColor.modify;
}

uint64_t CustomMaterial.emissiveColor.modify(uint64_t a1, char a2)
{
  return CustomMaterial.baseColor.modify(a1, a2, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.modify(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v4 = *(void **)a1;
  if (a2)
  {
    swift_retain();
    id v5 = v4;
    a3();

    swift_release();
  }
  else
  {
    ((void (*)(void, void, void, void, void))a3)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }

  return swift_release();
}

uint64_t CustomMaterial.specular.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(void, void, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.specular.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Specular.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.specular.modify;
}

uint64_t CustomMaterial.specular.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void key path getter for CustomMaterial.opacityThreshold : CustomMaterial(uint64_t a1@<X8>)
{
  specialized Material.subscript.getter(0xD000000000000010, 0x800000022834DA00, (uint64_t)v5);
  unsigned __int8 v2 = v6;
  BOOL v3 = 1;
  if (v6 == 255)
  {
    int v4 = 0;
  }
  else
  {
    if (v6 == 2)
    {
      unsigned __int8 v2 = 2;
      int v4 = (int)v5[0];
    }
    else
    {
      int v4 = 0;
    }
    BOOL v3 = v6 != 2;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5[0], (uint64_t)v5[1], (uint64_t)v5[2], (uint64_t)v5[3], (uint64_t)v5[4], (uint64_t)v5[5], (uint64_t)v5[6], (uint64_t)v5[7], v2);
  }
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v3;
}

uint64_t key path setter for CustomMaterial.opacityThreshold : CustomMaterial(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 4) & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v3 = REMaterialParameterBlockValueCopy();
      int v4 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = v3;
    }
    return REMaterialParameterBlockValueSetFloat();
  }
  return result;
}

uint64_t CustomMaterial.opacityThreshold.setter(uint64_t result)
{
  if ((result & 0x100000000) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v2 = REMaterialParameterBlockValueCopy();
      uint64_t v3 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v2;
    }
    return REMaterialParameterBlockValueSetFloat();
  }
  return result;
}

void (*CustomMaterial.opacityThreshold.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x160uLL);
  *a1 = v3;
  v3[43] = v1;
  int v4 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain_n();
  id v5 = v4;
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v6, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v7 = v27[2];
  uint64_t v25 = v27[1];
  Swift::String v26 = (void *)v27[0];
  uint64_t v8 = v27[3];
  uint64_t v9 = v27[4];
  uint64_t v10 = v27[5];
  uint64_t v11 = v27[6];
  uint64_t v12 = v27[7];
  int v13 = v28;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v29);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v3);
    char v14 = (void *)v29[0];
    uint64_t v15 = v29[1];
    uint64_t v16 = v29[2];
    uint64_t v17 = v29[3];
    uint64_t v18 = v29[4];
    uint64_t v19 = v29[5];
    uint64_t v20 = v29[6];
    uint64_t v21 = v29[7];
    int v13 = v30;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v3);
    uint64_t v15 = v25;
    char v14 = v26;
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    uint64_t v18 = v9;
    uint64_t v19 = v10;
    uint64_t v20 = v11;
    uint64_t v21 = v12;
  }
  BOOL v22 = 1;
  if (v13 == 255)
  {
    int v23 = 0;
  }
  else
  {
    if (v13 == 2) {
      int v23 = (int)v14;
    }
    else {
      int v23 = 0;
    }
    BOOL v22 = v13 != 2;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v16, v17, v18, v19, v20, v21, v13);
  }
  *((_DWORD *)v3 + 83) = v23;
  *((unsigned char *)v3 + 336) = v22;
  return CustomMaterial.opacityThreshold.modify;
}

void CustomMaterial.opacityThreshold.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if ((*(unsigned char *)(*(void *)a1 + 336) & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v2 = v1[43];
      uint64_t v3 = REMaterialParameterBlockValueCopy();
      int v4 = *(void **)(v2 + 32);
      *(void *)(v2 + 32) = v3;
    }
    REMaterialParameterBlockValueSetFloat();
  }

  free(v1);
}

unsigned __int8 *CustomMaterial.faceCulling.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 40) = *result;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

uint64_t *(*CustomMaterial.faceCulling.modify(uint64_t *(*result)(uint64_t *result)))(uint64_t *result)
{
  *(void *)double result = v1;
  if (*(unsigned char *)(v1 + 48))
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(v1 + 40);
    if (v2 >= 3) {
      LOBYTE(v2) = 2;
    }
    *((unsigned char *)result + 8) = v2;
    return CustomMaterial.faceCulling.modify;
  }
  return result;
}

uint64_t *CustomMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(void *)(v1 + 40) = *((unsigned __int8 *)result + 8);
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

uint64_t (*CustomMaterial.blending.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  CustomMaterial.blending.getter(a1);
  return CustomMaterial.blending.modify;
}

uint64_t CustomMaterial.blending.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v3 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  v5[0] = *(void *)a1;
  uint64_t v2 = v5[0];
  v5[1] = v1;
  int v6 = v3;
  char v7 = BYTE4(v3);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v5, 1);

  return outlined consume of __EntityInfoComponent?(v2, v1);
}

uint64_t key path setter for CustomMaterial.normal : CustomMaterial()
{
  uint64_t v0 = swift_retain();
  specialized Material.setParameter<A>(_:alternateTintKey:)(v0);

  return swift_release();
}

uint64_t CustomMaterial.normal.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    swift_retain();
    id v2 = (id)REMaterialCreateDefaultSamplerDescriptor();
    unsigned __int8 v3 = 1;
    uint64_t v4 = 84148994;
  }
  else
  {
    id v2 = 0;
    uint64_t v4 = 0;
    unsigned __int8 v3 = -1;
  }
  v6[0] = v2;
  v6[1] = v1;
  void v6[2] = 0;
  v6[3] = v4;
  long long v7 = 0u;
  long long v8 = 0u;
  unsigned __int8 v9 = v3;
  outlined copy of __RKMaterialParameterBlock.Parameter?(v2, v1, 0, v4, 0, 0, 0, 0, v3);
  specialized Material.subscript.setter((uint64_t)v6, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v1, 0, v4, 0, 0, 0, 0, v3);

  return swift_release();
}

void (*CustomMaterial.normal.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned __int8 v3 = malloc(0x2B8uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  id v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v7, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = v21[1];
  uint64_t v9 = v21[3];
  uint64_t v19 = v21[2];
  uint64_t v20 = (void *)v21[0];
  uint64_t v11 = v21[4];
  uint64_t v10 = v21[5];
  uint64_t v13 = v21[6];
  uint64_t v12 = v21[7];
  int v14 = v22;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v14 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    uint64_t v15 = (void *)v23[0];
    uint64_t v8 = v23[1];
    uint64_t v16 = v23[2];
    uint64_t v9 = v23[3];
    uint64_t v11 = v23[4];
    uint64_t v10 = v23[5];
    uint64_t v13 = v23[6];
    uint64_t v12 = v23[7];
    int v14 = v24;
    if (v24 == 255)
    {
LABEL_7:
      uint64_t v8 = 0;
      int v17 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    uint64_t v16 = v19;
    uint64_t v15 = v20;
  }
  if (v14 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v15, v8, v16, v9, v11, v10, v13, v12, v14);
    goto LABEL_7;
  }
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v15, v8, v16, v9, v11, v10, v13, v12, 1u);
  int v17 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v17;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.normal.modify;
}

void CustomMaterial.normal.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized Material.setParameter<A>(_:alternateTintKey:)(v3);
    swift_release();
  }
  else
  {
    specialized Material.setParameter<A>(_:alternateTintKey:)(*(void *)(*(void *)a1 + 672));
  }
  swift_release();

  free(v2);
}

uint64_t CustomMaterial.ambientOcclusion.setter(uint64_t a1)
{
  return CustomMaterial.ambientOcclusion.setter(a1, (void (*)(void, void, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void (*CustomMaterial.ambientOcclusion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x2B8uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  id v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x80000002283523B0, v7, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = v23[1];
  uint64_t v21 = v23[2];
  unsigned __int8 v22 = (void *)v23[0];
  uint64_t v9 = v23[4];
  uint64_t v20 = v23[3];
  uint64_t v10 = v23[5];
  uint64_t v11 = v23[6];
  uint64_t v12 = v23[7];
  int v13 = v24;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v25);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    int v14 = (void *)v25[0];
    uint64_t v8 = v25[1];
    uint64_t v15 = v25[2];
    uint64_t v16 = v25[3];
    uint64_t v9 = v25[4];
    uint64_t v10 = v25[5];
    uint64_t v11 = v25[6];
    uint64_t v12 = v25[7];
    int v13 = v26;
    if (v26 == 255)
    {
LABEL_7:
      uint64_t v8 = 0;
      int v18 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    uint64_t v15 = v21;
    int v14 = v22;
    uint64_t v16 = v20;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v8, v15, v16, v9, v10, v11, v12, v13);
    goto LABEL_7;
  }
  int v17 = v14;
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v8, v15, v16, v9, v10, v11, v12, 1u);
  int v18 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v18;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.ambientOcclusion.modify;
}

void CustomMaterial.ambientOcclusion.modify(uint64_t a1, char a2)
{
}

uint64_t CustomMaterial.clearcoat.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(void, void, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.clearcoat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Clearcoat.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.clearcoat.modify;
}

uint64_t CustomMaterial.clearcoat.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float key path getter for CustomMaterial.metallic : CustomMaterial@<S0>(uint64_t a1@<X0>, void (*a2)(void *__return_ptr, void *, void, void)@<X3>, uint64_t a3@<X8>)
{
  void v9[3] = &type metadata for CustomMaterial;
  v9[4] = &protocol witness table for CustomMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v9[0] + 16);
  a2(v10, v9, 0, 0);
  float result = *(float *)v10;
  uint64_t v7 = v10[1];
  int v8 = v11;
  *(_DWORD *)a3 = v10[0];
  *(void *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t key path setter for CustomMaterial.metallic : CustomMaterial(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, void, void, float))
{
  float v6 = *a1;
  uint64_t v7 = *((unsigned int *)a1 + 4);
  uint64_t v8 = swift_retain();
  a5(v8, v7, 0, 0, v6);

  return swift_release();
}

uint64_t CustomMaterial.clearcoatRoughness.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(void, void, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.setter(uint64_t a1, void (*a2)(void, void, void, void, float))
{
  a2(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0, *(float *)a1);

  return swift_release();
}

uint64_t (*CustomMaterial.clearcoatRoughness.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.clearcoatRoughness.modify;
}

uint64_t CustomMaterial.clearcoatRoughness.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, void, void, float))
{
  float v4 = *(float *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (a2)
  {
    uint64_t v6 = swift_retain();
    a3(v6, v5, 0, 0, v4);
    swift_release();
  }
  else
  {
    a3(*(void *)(a1 + 8), v5, 0, 0, *(float *)a1);
  }

  return swift_release();
}

uint64_t CustomMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*CustomMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return CustomMaterial.textureCoordinateTransform.modify;
}

uint64_t CustomMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return CustomMaterial.textureCoordinateTransform.modify(a1, a2, 0, (void *)0xE000000000000000);
}

uint64_t CustomMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t CustomMaterial.textureCoordinateTransform.setter(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a2, a3, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t (*CustomMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return CustomMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t CustomMaterial.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return CustomMaterial.textureCoordinateTransform.modify(a1, a2, 49, (void *)0xE100000000000000);
}

uint64_t CustomMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a3, a4, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

double key path getter for CustomMaterial.custom : CustomMaterial@<D0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  v7[3] = &type metadata for CustomMaterial;
  v7[4] = &protocol witness table for CustomMaterial;
  v7[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v7[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v7, &v8);
  double result = *(double *)v8.i64;
  uint64_t v5 = v9;
  __int32 v6 = v10;
  *a2 = v8;
  a2[1].i64[0] = v5;
  a2[1].i32[2] = v6;
  return result;
}

uint64_t key path setter for CustomMaterial.custom : CustomMaterial(__n128 *a1)
{
  __n128 v4 = *a1;
  int v1 = a1[1].n128_i32[2];
  uint64_t v2 = swift_retain();
  specialized Material.setParameter<A>(_:alternateTintKey:)(v2, v1, v4);

  return swift_release();
}

uint64_t CustomMaterial.custom.setter(__n128 *a1)
{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1[1].n128_i64[0], a1[1].n128_i32[2], *a1);

  return swift_release();
}

void (*CustomMaterial.custom.modify(int8x16_t **a1))(__n128 **a1, char a2)
{
  uint64_t v3 = (int8x16_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[2].i64[0] = v1;
  _DWORD v5[3] = &type metadata for CustomMaterial;
  void v5[4] = &protocol witness table for CustomMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v5[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v5, v3);
  return CustomMaterial.custom.modify;
}

void CustomMaterial.custom.modify(__n128 **a1, char a2)
{
  uint64_t v2 = *a1;
  __n128 v3 = **a1;
  int v4 = (*a1)[1].n128_i32[2];
  uint64_t v5 = (*a1)[1].n128_i64[0];
  if (a2)
  {
    __n128 v7 = v3;
    uint64_t v6 = swift_retain();
    specialized Material.setParameter<A>(_:alternateTintKey:)(v6, v4, v7);
    swift_release();
  }
  else
  {
    specialized Material.setParameter<A>(_:alternateTintKey:)(v5, v4, v3);
  }
  swift_release();

  free(v2);
}

unint64_t one-time initialization function for shaderCacheRegistry()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<CustomMaterial.CustomShaderParameters>>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static CustomMaterial.shaderCacheRegistry = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static PhysicallyBasedMaterial.shaderCacheRegistry = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static UnlitMaterial.shaderCacheRegistry = v0;
  return result;
}

uint64_t CustomMaterial.shaderCache.getter()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 144);
  }
  else
  {
    uint64_t v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1) {
      swift_once();
    }
    CustomMaterial.assetService.getter((uint64_t)v4);
    uint64_t v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(void *)(v2 + 144) = v1;
  }
  swift_retain();
  return v1;
}

unint64_t CustomMaterial.CustomShaderParameters.materialPath.getter()
{
  __int16 v1 = *v0;
  if ((*v0 & 4) != 0)
  {
    if (v1) {
      return 0xD000000000000034;
    }
    else {
      return 0xD000000000000029;
    }
  }
  else
  {
    unint64_t v2 = 0xD000000000000032;
    if (v1) {
      unint64_t v2 = 0xD00000000000003DLL;
    }
    if ((v1 & 8) == 0) {
      unint64_t v2 = 0xD000000000000029;
    }
    unint64_t v3 = 0xD000000000000039;
    if ((v1 & 1) == 0) {
      unint64_t v3 = 0xD00000000000002ELL;
    }
    if ((v1 & 2) != 0) {
      return v3;
    }
    else {
      return v2;
    }
  }
}

unint64_t CustomMaterial.CustomShaderParameters.functionConstants.getter()
{
  unint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_228325BC0;
  *(void *)(v2 + 32) = 0xD000000000000026;
  *(void *)(v2 + 40) = 0x800000022835ABC0;
  *(void *)(v2 + 48) = (v1 >> 9) & 1;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 0;
  *(void *)(v2 + 80) = 0xD000000000000018;
  *(void *)(v2 + 88) = 0x800000022835ACE0;
  *(void *)(v2 + 96) = (v1 >> 5) & 1;
  *(void *)(v2 + 104) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v2 + 128) = 0xD000000000000012;
  *(void *)(v2 + 136) = 0x800000022835AD00;
  uint64_t v3 = (v1 >> 6) & 1;
  *(void *)(v2 + 144) = v3;
  *(void *)(v2 + 152) = 0;
  *(unsigned char *)(v2 + 160) = 1;
  *(void *)(v2 + 176) = 0xD000000000000018;
  *(void *)(v2 + 184) = 0x800000022835AD20;
  *(void *)(v2 + 192) = v3;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = 0;
  *(void *)(v2 + 224) = 0x6C6E55686374614DLL;
  *(void *)(v2 + 232) = 0xEF726F6C6F437469;
  *(void *)(v2 + 240) = (v1 >> 7) & 1;
  *(void *)(v2 + 248) = 0;
  *(unsigned char *)(v2 + 256) = 0;
  *(void *)(v2 + 272) = 0xD000000000000018;
  *(void *)(v2 + 280) = 0x800000022835AD40;
  *(void *)(v2 + 288) = (v1 >> 8) & 1;
  *(void *)(v2 + 296) = 0;
  *(unsigned char *)(v2 + 304) = 0;
  *(void *)(v2 + 320) = 0xD000000000000019;
  *(void *)(v2 + 328) = 0x800000022835AD60;
  *(void *)(v2 + 336) = (v1 >> 4) & 1;
  *(void *)(v2 + 344) = 0;
  *(unsigned char *)(v2 + 352) = 1;
  *(void *)(v2 + 368) = 0xD00000000000001CLL;
  *(void *)(v2 + 376) = 0x800000022835AD80;
  *(void *)(v2 + 384) = (v1 >> 12) & 1;
  *(void *)(v2 + 392) = 0;
  *(unsigned char *)(v2 + 400) = 0;

  return specialized Dictionary.init(dictionaryLiteral:)(v2);
}

void CustomMaterial.CustomShaderParameters.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 88);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2)
    {
LABEL_3:
      Swift::UInt8 v6 = v3 & 1;
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3 != 2) {
      goto LABEL_3;
    }
  }
  Swift::UInt8 v6 = 0;
LABEL_6:
  Hasher._combine(_:)(v6);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    __MaterialResource.CoreMaterialFunction.hash(into:)();
    if (v5)
    {
LABEL_8:
      Hasher._combine(_:)(1u);
      __MaterialResource.CoreMaterialFunction.hash(into:)();
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_8;
    }
  }
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.CustomShaderParameters()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.CustomShaderParameters()
{
  return Hasher._finalize()();
}

uint64_t CustomMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 320);
}

uint64_t CustomMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 320) = result;
  return result;
}

uint64_t (*CustomMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *CustomMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 320) = *result;
  return result;
}

unsigned __int8 *(*CustomMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 320) == 1;
  return CustomMaterial.triangleFillMode.modify;
}

unsigned __int8 *CustomMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 320) = result[8];
  return result;
}

uint64_t (*CustomMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CustomMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance CustomMaterial()
{
  return *(void *)(v0 + 320);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance CustomMaterial(uint64_t result)
{
  *(void *)(v1 + 320) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance CustomMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance CustomMaterial()
{
  return *(unsigned __int8 *)(v0 + 328);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance CustomMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 328) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance CustomMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance CustomMaterial()
{
  return *(unsigned __int8 *)(v0 + 329);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance CustomMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 329) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance CustomMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance CustomMaterial()
{
  return *(void *)(v0 + 40);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance CustomMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t protocol witness for Material.__requiresUnmanagedVideoComponent.getter in conformance CustomMaterial()
{
  return (*(unsigned __int16 *)(v0 + 152) >> 5) & 1;
}

uint64_t CustomMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 328);
}

uint64_t CustomMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 328) = result;
  return result;
}

unsigned char *(*CustomMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 328);
  return CustomMaterial.writesDepth.modify;
}

unsigned char *CustomMaterial.writesDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 328) = result[8];
  return result;
}

uint64_t CustomMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 329);
}

uint64_t CustomMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 329) = result;
  return result;
}

unsigned char *(*CustomMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 329);
  return CustomMaterial.readsDepth.modify;
}

unsigned char *CustomMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 329) = result[8];
  return result;
}

uint64_t CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1, a2, a3, a4, a5, (void *(*)(uint64_t *__return_ptr, void *, __n128))partial apply for closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:), a6);
}

uint64_t CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1, a2, a3, a4, a5, (void *(*)(uint64_t *__return_ptr, void *, __n128))partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:), a6);
}

uint64_t CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *(*a6)(uint64_t *__return_ptr, void *, __n128)@<X5>, uint64_t a7@<X8>)
{
  v21[2] = a3;
  void v21[3] = a4;
  int v11 = specialized String.withCString<A>(_:)(a6, (uint64_t)v21, a3, a4);
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    uint64_t result = outlined init with copy of (Int, URL)(v12, (uint64_t)&v22, &demangling cache variable for type metadata for __RenderService?);
    if (!v23)
    {
      __break(1u);
      return result;
    }
    outlined init with take of BindableDataInternal(&v22, (uint64_t)v24);
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
    id v16 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v16)
    {
      char v17 = a5 & 1;
      id v18 = objc_allocWithZone(MEMORY[0x263F128B0]);
      swift_unknownObjectRetain();
      id v19 = objc_msgSend(v18, sel_init);
      swift_bridgeObjectRetain();
      id v20 = v19;
      swift_bridgeObjectRelease();
      *(void *)a7 = a1;
      *(void *)(a7 + 8) = a2;
      *(void *)(a7 + 16) = v16;
      *(void *)(a7 + 24) = v11;
      *(void *)(a7 + 32) = v20;
      *(unsigned char *)(a7 + 40) = v17;

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(_OWORD *)(a7 + 25) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  return result;
}

uint64_t closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  *a1 = AssetHandle;
  return result;
}

uint64_t CustomMaterial.clearcoatNormal.getter()
{
  return CustomMaterial.normal.getter((uint64_t (*)(void *, void, void))CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.normal.getter(uint64_t (*a1)(void *, void, void))
{
  v4[3] = &type metadata for CustomMaterial;
  _OWORD v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

void *key path getter for CustomMaterial.normal : CustomMaterial@<X0>(uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr, void *, void, void)@<X3>, uint64_t a3@<X8>)
{
  v8[3] = &type metadata for CustomMaterial;
  v8[4] = &protocol witness table for CustomMaterial;
  v8[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v8[0] + 16);
  uint64_t result = a2(&v9, v8, 0, 0);
  int v7 = v10;
  *(void *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v7;
  return result;
}

uint64_t key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, void, void))
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = swift_retain();
  a5(v7, v6, 0, 0);

  return swift_release();
}

uint64_t CustomMaterial.clearcoatNormal.setter(uint64_t a1)
{
  return CustomMaterial.ambientOcclusion.setter(a1, (void (*)(void, void, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.ambientOcclusion.setter(uint64_t a1, void (*a2)(void, void, void, void))
{
  a2(*(void *)a1, *(unsigned int *)(a1 + 8), 0, 0);

  return swift_release();
}

void (*CustomMaterial.clearcoatNormal.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x2B8uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  uint64_t v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x80000002283523D0, v7, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = v23[1];
  uint64_t v21 = v23[2];
  long long v22 = (void *)v23[0];
  uint64_t v9 = v23[4];
  uint64_t v20 = v23[3];
  uint64_t v10 = v23[5];
  uint64_t v11 = v23[6];
  uint64_t v12 = v23[7];
  int v13 = v24;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v25);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    uint64_t v14 = (void *)v25[0];
    uint64_t v8 = v25[1];
    uint64_t v15 = v25[2];
    uint64_t v16 = v25[3];
    uint64_t v9 = v25[4];
    uint64_t v10 = v25[5];
    uint64_t v11 = v25[6];
    uint64_t v12 = v25[7];
    int v13 = v26;
    if (v26 == 255)
    {
LABEL_7:
      uint64_t v8 = 0;
      int v18 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    uint64_t v15 = v21;
    uint64_t v14 = v22;
    uint64_t v16 = v20;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v8, v15, v16, v9, v10, v11, v12, v13);
    goto LABEL_7;
  }
  char v17 = v14;
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v8, v15, v16, v9, v10, v11, v12, 1u);
  int v18 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v18;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.clearcoatNormal.modify;
}

void CustomMaterial.clearcoatNormal.modify(uint64_t a1, char a2)
{
}

void CustomMaterial.ambientOcclusion.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, void, void))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 680);
  if (a2)
  {
    uint64_t v6 = swift_retain();
    a3(v6, v5, 0, 0);
    swift_release();
  }
  else
  {
    a3(*(void *)(*(void *)a1 + 672), v5, 0, 0);
  }
  swift_release();

  free(v4);
}

uint64_t static CustomMaterial.GeometryModifier.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomMaterial.GeometryModifier(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

void CustomMaterial.GeometryModifier.hash(into:)()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 40));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    Swift::UInt v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
}

Swift::Int CustomMaterial.GeometryModifier.hashValue.getter()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    Swift::UInt v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.GeometryModifier()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    Swift::UInt v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  return Hasher._finalize()();
}

uint64_t sub_22816D0FC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(void *)(v0 + 80) - 1) >= 2) {
    swift_release();
  }
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(unsigned char *)(v0 + 112));
  if (*(void *)(v0 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  }
  swift_release();
  if (*(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((unint64_t)(*(void *)(v0 + 304) - 1) >= 3) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 346, 7);
}

BOOL specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a1 + 17);
  int v3 = *((unsigned __int8 *)a1 + 18);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v6 = *((void *)a1 + 6);
  uint64_t v8 = *((void *)a1 + 7);
  uint64_t v9 = (void *)*((void *)a1 + 8);
  uint64_t v10 = *((void *)a1 + 9);
  uint64_t v11 = *((void *)a1 + 10);
  uint64_t v12 = *((void *)a1 + 11);
  uint64_t v13 = *((void *)a1 + 12);
  uint64_t v14 = *((void *)a1 + 13);
  uint64_t v15 = (void *)*((void *)a1 + 14);
  char v16 = *((unsigned char *)a2 + 16);
  int v17 = *((unsigned __int8 *)a2 + 17);
  int v18 = *((unsigned __int8 *)a2 + 18);
  uint64_t v20 = *((void *)a2 + 3);
  uint64_t v19 = *((void *)a2 + 4);
  uint64_t v22 = *((void *)a2 + 5);
  uint64_t v21 = *((void *)a2 + 6);
  uint64_t v23 = *((void *)a2 + 7);
  unsigned __int8 v24 = (void *)*((void *)a2 + 8);
  uint64_t v78 = *((void *)a2 + 9);
  uint64_t v25 = *((void *)a2 + 11);
  uint64_t v79 = *((void *)a2 + 10);
  uint64_t v26 = *((void *)a2 + 13);
  uint64_t v77 = *((void *)a2 + 12);
  uint64_t v27 = (void *)*((void *)a2 + 14);
  if (a1[8])
  {
    if (!*((unsigned char *)a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a1 + 1) != *((void *)a2 + 1)) {
      char v16 = 1;
    }
    if (v16) {
      return 0;
    }
  }
  if (v2 == 2)
  {
    if (v17 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v17 == 2 || ((v17 ^ v2) & 1) != 0) {
      return result;
    }
  }
  if (v3 == 2)
  {
    if (v18 != 2) {
      return 0;
    }
LABEL_18:
    uint64_t v30 = v10;
    if (v7)
    {
      uint64_t v31 = v7;
      uint64_t v86 = v5;
      uint64_t v87 = v4;
      uint64_t v88 = v7;
      uint64_t v89 = v6;
      uint64_t v90 = v8;
      id v91 = v9;
      if (v22)
      {
        LOBYTE(v80) = v20;
        uint64_t v81 = v19;
        uint64_t v82 = v22;
        uint64_t v83 = v21;
        uint64_t v84 = v23;
        uint64_t v85 = v24;
        uint64_t v71 = v13;
        uint64_t v74 = v12;
        uint64_t v67 = v27;
        uint64_t v68 = v11;
        uint64_t v65 = v30;
        uint64_t v66 = v14;
        uint64_t v63 = v26;
        uint64_t v64 = v15;
        uint64_t v32 = v6;
        uint64_t v33 = v4;
        uint64_t v34 = v31;
        uint64_t v35 = v8;
        outlined copy of __MaterialResource.CoreMaterialFunction?(v5, v4, v31, v6, v8, v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v36 = v9;
        char v37 = specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(&v86, &v80);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v33, v34, v32, v35, v9);
        uint64_t v26 = v63;
        uint64_t v15 = v64;
        uint64_t v27 = v67;
        uint64_t v11 = v68;
        uint64_t v38 = v65;
        uint64_t v14 = v66;
        uint64_t v13 = v71;
        uint64_t v12 = v74;
        if ((v37 & 1) == 0) {
          return 0;
        }
        goto LABEL_23;
      }
      uint64_t v72 = v4;
      uint64_t v75 = v6;
      uint64_t v47 = v8;
      swift_bridgeObjectRetain();
      uint64_t v69 = v47;
      swift_bridgeObjectRetain();
      id v48 = v9;
    }
    else
    {
      uint64_t v69 = v8;
      uint64_t v72 = v4;
      uint64_t v75 = v6;
      uint64_t v38 = v10;
      if (!v22)
      {
LABEL_23:
        if (v12)
        {
          uint64_t v86 = v38;
          uint64_t v87 = v11;
          uint64_t v88 = v12;
          uint64_t v89 = v13;
          uint64_t v90 = v14;
          id v91 = v15;
          if (v25)
          {
            LOBYTE(v80) = v78;
            uint64_t v81 = v79;
            uint64_t v82 = v25;
            uint64_t v83 = v77;
            uint64_t v84 = v26;
            uint64_t v85 = v27;
            uint64_t v39 = v12;
            uint64_t v40 = v38;
            uint64_t v41 = v13;
            uint64_t v42 = v11;
            uint64_t v43 = v14;
            uint64_t v44 = v15;
            outlined copy of __MaterialResource.CoreMaterialFunction?(v38, v11, v12, v13, v14, v15);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v45 = v44;
            char v46 = specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(&v86, &v80);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of __MaterialResource.CoreMaterialFunction?(v40, v42, v39, v41, v43, v44);
            return (v46 & 1) != 0;
          }
          uint64_t v55 = v38;
          uint64_t v70 = v11;
          uint64_t v73 = v13;
          uint64_t v76 = v12;
          uint64_t v58 = v15;
          uint64_t v59 = v14;
          uint64_t v60 = v26;
          swift_bridgeObjectRetain();
          uint64_t v56 = v59;
          swift_bridgeObjectRetain();
          uint64_t v57 = v58;
          id v61 = v58;
          uint64_t v25 = 0;
          uint64_t v26 = v60;
        }
        else
        {
          uint64_t v55 = v38;
          uint64_t v70 = v11;
          uint64_t v73 = v13;
          uint64_t v76 = 0;
          uint64_t v56 = v14;
          uint64_t v57 = v15;
          if (!v25) {
            return 1;
          }
        }
        uint64_t v62 = v26;
        outlined copy of __MaterialResource.CoreMaterialFunction?(v78, v79, v25, v77, v26, v27);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v55, v70, v76, v73, v56, v57);
        uint64_t v49 = v78;
        uint64_t v50 = v79;
        uint64_t v51 = v25;
        uint64_t v52 = v77;
        uint64_t v53 = v62;
        uint64_t v54 = v27;
LABEL_33:
        outlined consume of __MaterialResource.CoreMaterialFunction?(v49, v50, v51, v52, v53, v54);
        return 0;
      }
    }
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v19, v22, v21, v23, v24);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v72, v7, v75, v69, v9);
    uint64_t v49 = v20;
    uint64_t v50 = v19;
    uint64_t v51 = v22;
    uint64_t v52 = v21;
    uint64_t v53 = v23;
    uint64_t v54 = v24;
    goto LABEL_33;
  }
  BOOL result = 0;
  BOOL v29 = (v3 & 1) == 0;
  if (v18 != 2 && ((v29 ^ v18) & 1) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized static CustomMaterial.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  int v20 = a1[29];
  int v21 = *a1;
  int v18 = *a2;
  int v19 = a1[40];
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 4);
  uint64_t v15 = *((void *)a1 + 4);
  if (v2 == 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  if (v2 == 2) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = *((unsigned int *)a1 + 6) | ((unint64_t)a1[28] << 32);
  }
  int v16 = a2[29];
  int v17 = a2[40];
  if (v4 == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v4 == 2) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = *((void *)a2 + 2);
  }
  if (v4 == 2) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *((unsigned int *)a2 + 6) | ((unint64_t)a2[28] << 32);
  }
  outlined copy of CustomMaterial.Blending?(*((void *)a1 + 1), v2);
  outlined copy of CustomMaterial.Blending?(v3, v4);
  if ((unint64_t)(v2 - 1) >= 2)
  {
    if (v8 != 1)
    {
      outlined consume of __EntityInfoComponent?(v7, v8);
      outlined consume of __EntityInfoComponent?(v5, v2);
      uint64_t v10 = ((v9 ^ v6) >> 32) & 1;
      goto LABEL_24;
    }
    uint64_t v11 = v5;
    uint64_t v12 = v2;
LABEL_22:
    outlined consume of __EntityInfoComponent?(v11, v12);
    return 0;
  }
  if (v8 != 1)
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    goto LABEL_22;
  }
  LODWORD(v10) = 0;
LABEL_24:
  if (v21 != v18) {
    LODWORD(v10) = 1;
  }
  if (v20 != v16) {
    LODWORD(v10) = 1;
  }
  if ((v10 | v19)) {
    return v17 & ~v10;
  }
  else {
    return (v15 == v14) & ~v17;
  }
}

uint64_t specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if ((uint64_t v2 = *(void **)(a1 + 16),
          uint64_t v4 = *(void *)(a1 + 24),
          uint64_t v3 = *(void **)(a1 + 32),
          uint64_t v5 = *a2,
          uint64_t v6 = a2[1],
          uint64_t v8 = a2[3],
          uint64_t v7 = (void *)a2[4],
          *(void *)a1 == *a2)
      && *(void *)(a1 + 8) == v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_unknownObjectRetain();
      unint64_t v9 = (void *)MEMORY[0x22A688A50](v5, v6);
      unsigned int v10 = objc_msgSend(v2, sel_isEqual_, v9);
      swift_unknownObjectRelease();

      if (v10)
      {
        if (v4)
        {
          if (v8 && v4 == v8) {
            goto LABEL_9;
          }
        }
        else if (!v8)
        {
LABEL_9:
          type metadata accessor for NSObject();
          id v11 = v3;
          id v12 = v7;
          char v13 = static NSObject.== infix(_:_:)();

          return v13 & 1;
        }
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError;
  if (!lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError;
  if (!lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError);
  }
  return result;
}

void specialized static CustomMaterial.ensureFunctionsExist(surfaceShader:geometryModifier:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = a2[1];
  if (v5)
  {
    uint64_t v16 = *a1;
    uint64_t v6 = *a2;
    uint64_t v7 = (void *)a2[2];
    uint64_t v17 = a2[3];
    uint64_t v8 = (void *)a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v9 = v8;
    id v10 = objc_msgSend(v7, sel_functionNames);
    id v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v10) = specialized Sequence<>.contains(_:)(v6, v5, v11);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
      swift_allocError();
      *uint64_t v15 = 0;
      swift_willThrow();
      outlined consume of CustomMaterial.GeometryModifier?(v6, v5, (uint64_t)v7, v17, v8);
      return;
    }
    outlined consume of CustomMaterial.GeometryModifier?(v6, v5, (uint64_t)v7, v17, v8);
    uint64_t v3 = v16;
  }
  id v12 = objc_msgSend(v4, sel_functionNames, v16);
  char v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v12) = specialized Sequence<>.contains(_:)(v3, v2, v13);
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
    swift_allocError();
    *uint64_t v14 = 1;
    swift_willThrow();
  }
}

uint64_t partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1);
}

unint64_t lazy protocol witness table accessor for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI;
  if (!lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel;
  if (!lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier;
  if (!lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader;
  if (!lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader);
  }
  return result;
}

uint64_t sub_22816DEF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_22816DF04()
{
  uint64_t v0 = swift_unknownObjectRetain();
  return CustomMaterial.SurfaceShader.library.setter(v0);
}

uint64_t sub_22816DF30@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 24);
  return result;
}

uint64_t sub_22816DF3C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return CustomMaterial.SurfaceShader.libraryAsset.setter(&v2);
}

void *sub_22816DF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.baseColor : CustomMaterial(a1, (void *(*)(void *__return_ptr, void *, void, void))CustomMaterial.BaseColor.init(material:alternateTintKey:), a2);
}

void sub_22816DFA0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

float sub_22816DFCC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(void *__return_ptr, void *, void, void))CustomMaterial.Metallic.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816DFF8(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_22816E024@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(void *__return_ptr, void *, void, void))CustomMaterial.Roughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E050(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void *sub_22816E07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.baseColor : CustomMaterial(a1, (void *(*)(void *__return_ptr, void *, void, void))CustomMaterial.EmissiveColor.init(material:alternateTintKey:), a2);
}

void sub_22816E0A8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

float sub_22816E0D4@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(void *__return_ptr, void *, void, void))CustomMaterial.Specular.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E100(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t sub_22816E134@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(result + 48))
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(result + 40);
    if (v2 >= 3) {
      LOBYTE(v2) = 2;
    }
    *a2 = v2;
  }
  return result;
}

unsigned __int8 *sub_22816E158(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 40) = *result;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

double sub_22816E168@<D0>(uint64_t a1@<X8>)
{
  CustomMaterial.blending.getter((uint64_t)&v5);
  int v2 = v6;
  char v3 = v7;
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(unsigned char *)(a1 + 20) = v3;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

void sub_22816E1B4(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  char v2 = *((unsigned char *)a1 + 20);
  long long v3 = *a1;
  char v5 = v2;
  int v4 = v1;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)&v3, 1);
}

void *sub_22816E200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (void *(*)(uint64_t *__return_ptr, void *, void, void))CustomMaterial.Normal.init(material:alternateTintKey:), a2);
}

void *sub_22816E230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (void *(*)(uint64_t *__return_ptr, void *, void, void))CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_22816E288@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(void *__return_ptr, void *, void, void))CustomMaterial.Clearcoat.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E2B4(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_22816E2E0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(void *__return_ptr, void *, void, void))CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E30C(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

double sub_22816E338@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_62Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_22816E344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_63Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_22816E350@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_62Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_62Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  double result = *(double *)v7;
  float32x2_t v5 = v7[1];
  __int32 v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_22816E3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_63Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t keypath_set_63Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a5, a6, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t sub_22816E3F0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 320) == 1;
  return result;
}

unsigned __int8 *sub_22816E404(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 320) = *result;
  return result;
}

uint64_t sub_22816E410@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 328);
  return result;
}

unsigned char *sub_22816E41C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 328) = *result;
  return result;
}

uint64_t sub_22816E428@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 329);
  return result;
}

unsigned char *sub_22816E434(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 329) = *result;
  return result;
}

void *sub_22816E440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (void *(*)(uint64_t *__return_ptr, void *, void, void))CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:), a2);
}

uint64_t sub_22816E46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, void, void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

ValueMetadata *type metadata accessor for CustomMaterialError()
{
  return &type metadata for CustomMaterialError;
}

ValueMetadata *type metadata accessor for CustomMaterialErrorSPI()
{
  return &type metadata for CustomMaterialErrorSPI;
}

uint64_t dispatch thunk of MaterialFunction.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MaterialFunction.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MaterialFunction.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MaterialFunction.library.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MaterialFunction.library.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MaterialFunction.library.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of MaterialFunction.__linkSPI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t destroy for CustomMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(void *)(a1 + 64) - 1) >= 2) {
    swift_release();
  }
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(a1 + 80), *(void **)(a1 + 88), *(unsigned char *)(a1 + 96));
  if (*(void *)(a1 + 128)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  swift_release();
  if (*(void *)(a1 + 192))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 240))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 288);
  if ((unint64_t)(result - 1) >= 3)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CustomMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  float32x2_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  __int32 v6 = (_OWORD *)(a1 + 56);
  uint64_t v7 = a2 + 56;
  uint64_t v8 = *(void *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  if (v8 == 1 || v8 == 2)
  {
    *__int32 v6 = *(_OWORD *)v7;
    *(void *)(a1 + 69) = *(void *)(v7 + 13);
  }
  else
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 64) = v8;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    swift_retain();
  }
  id v10 = *(void **)(a2 + 80);
  id v11 = *(void **)(a2 + 88);
  char v12 = *(unsigned char *)(a2 + 96);
  outlined copy of CustomMaterial.CustomUniformsState(v10, v11, v12);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = v12;
  char v13 = (_OWORD *)(a1 + 104);
  uint64_t v14 = (_OWORD *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 128);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v15;
    *(void *)(a1 + 136) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 120);
    *char v13 = *v14;
    *(_OWORD *)(a1 + 120) = v17;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  uint64_t v18 = *(void *)(a2 + 192);
  swift_retain();
  if (v18)
  {
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    uint64_t v19 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v19;
    int v20 = *(void **)(a2 + 216);
    *(void *)(a1 + 216) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v20;
    uint64_t v22 = *(void *)(a2 + 240);
    if (v22)
    {
LABEL_10:
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v22;
      uint64_t v23 = *(void *)(a2 + 256);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = v23;
      unsigned __int8 v24 = *(void **)(a2 + 264);
      *(void *)(a1 + 264) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v25 = v24;
      goto LABEL_13;
    }
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v26;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    uint64_t v22 = *(void *)(a2 + 240);
    if (v22) {
      goto LABEL_10;
    }
  }
  long long v27 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v27;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
LABEL_13:
  uint64_t v28 = *(void *)(a2 + 288);
  if (v28 == 3)
  {
    long long v29 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v29;
    *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
  }
  else
  {
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    if (v28 == 1 || v28 == 2)
    {
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(void *)(a1 + 293) = *(void *)(a2 + 293);
    }
    else
    {
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(void *)(a1 + 288) = v28;
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
      swift_retain();
    }
    *(unsigned char *)(a1 + 301) = *(unsigned char *)(a2 + 301);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
    *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  }
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  return a1;
}

uint64_t assignWithCopy for CustomMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 32);
  float32x2_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = (_OWORD *)(a1 + 56);
  id v9 = (_OWORD *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  if (v10 == 2)
  {
    if (v11 == 1 || v11 == 2) {
      goto LABEL_4;
    }
LABEL_9:
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    swift_retain();
    goto LABEL_13;
  }
  if (v11 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 56);
LABEL_12:
    uint64_t v13 = *(void *)(a2 + 69);
    *uint64_t v8 = *v9;
    *(void *)(a1 + 69) = v13;
    goto LABEL_13;
  }
  if (v10 == 1)
  {
    if (v11 == 1)
    {
LABEL_4:
      long long v12 = *v9;
      *(void *)(a1 + 69) = *(void *)(a2 + 69);
      *uint64_t v8 = v12;
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v11 == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1 + 56, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
LABEL_13:
  uint64_t v14 = *(void **)(a2 + 80);
  uint64_t v15 = *(void **)(a2 + 88);
  char v16 = *(unsigned char *)(a2 + 96);
  outlined copy of CustomMaterial.CustomUniformsState(v14, v15, v16);
  long long v17 = *(void **)(a1 + 80);
  uint64_t v18 = *(void **)(a1 + 88);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  char v19 = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = v16;
  outlined consume of CustomMaterial.CustomUniformsState(v17, v18, v19);
  uint64_t v20 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v20)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
      goto LABEL_20;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  else if (v20)
  {
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 104, a2 + 104);
    goto LABEL_20;
  }
  long long v21 = *(_OWORD *)(a2 + 104);
  long long v22 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 104) = v21;
  *(_OWORD *)(a1 + 120) = v22;
LABEL_20:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  uint64_t v23 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v23;
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  unsigned __int8 v24 = (_OWORD *)(a1 + 176);
  id v25 = (_OWORD *)(a2 + 176);
  uint64_t v26 = *(void *)(a2 + 192);
  if (*(void *)(a1 + 192))
  {
    if (v26)
    {
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v27 = *(void **)(a2 + 216);
      uint64_t v28 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v27;
      id v29 = v27;
    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 176);
      long long v33 = *(_OWORD *)(a2 + 192);
      long long v32 = *(_OWORD *)(a2 + 208);
      *unsigned __int8 v24 = *v25;
      *(_OWORD *)(a1 + 192) = v33;
      *(_OWORD *)(a1 + 208) = v32;
    }
  }
  else if (v26)
  {
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    uint64_t v30 = *(void **)(a2 + 216);
    *(void *)(a1 + 216) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v30;
  }
  else
  {
    long long v34 = *v25;
    long long v35 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v35;
    *unsigned __int8 v24 = v34;
  }
  id v36 = (_OWORD *)(a1 + 224);
  char v37 = (_OWORD *)(a2 + 224);
  uint64_t v38 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240))
  {
    if (v38)
    {
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void **)(a2 + 264);
      uint64_t v40 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v39;
      id v41 = v39;
    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 224);
      long long v45 = *(_OWORD *)(a2 + 240);
      long long v44 = *(_OWORD *)(a2 + 256);
      *id v36 = *v37;
      *(_OWORD *)(a1 + 240) = v45;
      *(_OWORD *)(a1 + 256) = v44;
    }
  }
  else if (v38)
  {
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v42 = *(void **)(a2 + 264);
    *(void *)(a1 + 264) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v43 = v42;
  }
  else
  {
    long long v46 = *v37;
    long long v47 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v47;
    *id v36 = v46;
  }
  id v48 = (unsigned char *)(a2 + 300);
  uint64_t v49 = (_OWORD *)(a1 + 272);
  uint64_t v50 = (_OWORD *)(a2 + 272);
  uint64_t v51 = *(void *)(a1 + 288);
  uint64_t v52 = *(void *)(a2 + 288);
  if (v51 != 3)
  {
    if (v52 == 3)
    {
      outlined destroy of CustomMaterial.Descriptor(a1 + 272);
      long long v55 = *(_OWORD *)(a2 + 298);
      long long v56 = *(_OWORD *)(a2 + 288);
      _OWORD *v49 = *v50;
      *(_OWORD *)(a1 + 288) = v56;
      *(_OWORD *)(a1 + 298) = v55;
      goto LABEL_56;
    }
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    uint64_t v59 = (long long *)(a1 + 280);
    uint64_t v60 = (long long *)(a2 + 280);
    uint64_t v61 = *(void *)(a2 + 288);
    if (v51 == 2)
    {
      if (v61 != 1 && v61 != 2) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
    if (v61 == 2)
    {
      outlined destroy of CustomMaterial.Blending(a1 + 280);
    }
    else
    {
      if (v51 == 1)
      {
        if (v61 != 1) {
          goto LABEL_51;
        }
LABEL_45:
        long long v62 = *v60;
        *(void *)(a1 + 293) = *(void *)(a2 + 293);
        *uint64_t v59 = v62;
        goto LABEL_55;
      }
      if (v61 != 1)
      {
        *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_retain();
        swift_release();
        *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
        *(unsigned char *)(a1 + 297) = *(unsigned char *)(a2 + 297);
        *(unsigned char *)(a1 + 298) = *(unsigned char *)(a2 + 298);
        *(unsigned char *)(a1 + 299) = *(unsigned char *)(a2 + 299);
        *(unsigned char *)(a1 + 300) = *v48;
        goto LABEL_55;
      }
      outlined destroy of BodyTrackingComponent?(a1 + 280, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    }
    uint64_t v63 = *(void *)(a2 + 293);
    *uint64_t v59 = *v60;
    *(void *)(a1 + 293) = v63;
    goto LABEL_55;
  }
  if (v52 != 3)
  {
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    uint64_t v57 = *(void *)(a2 + 288);
    if (v57 == 1 || v57 == 2)
    {
      long long v58 = *(_OWORD *)(a2 + 280);
      *(void *)(a1 + 293) = *(void *)(a2 + 293);
      *(_OWORD *)(a1 + 280) = v58;
LABEL_55:
      *(unsigned char *)(a1 + 301) = *(unsigned char *)(a2 + 301);
      uint64_t v64 = *(void *)(a2 + 304);
      *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
      *(void *)(a1 + 304) = v64;
      *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
      goto LABEL_56;
    }
LABEL_51:
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    *(unsigned char *)(a1 + 300) = *v48;
    swift_retain();
    goto LABEL_55;
  }
  long long v53 = *v50;
  long long v54 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
  _OWORD *v49 = v53;
  *(_OWORD *)(a1 + 288) = v54;
LABEL_56:
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  return a1;
}

uint64_t outlined destroy of CustomMaterial.Blending(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of __MaterialResource.CoreMaterialFunction(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of CustomMaterial.Descriptor(uint64_t a1)
{
  if ((unint64_t)(*(void *)(a1 + 16) - 1) >= 2) {
    swift_release();
  }
  return a1;
}

void *__swift_memcpy330_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14AuLL);
}

uint64_t assignWithTake for CustomMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a2 + 64);
  if (v5 == 2) {
    goto LABEL_7;
  }
  if (v6 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 56);
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 69) = *(void *)(a2 + 69);
    goto LABEL_8;
  }
  if (v5 == 1) {
    goto LABEL_7;
  }
  if (v6 == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1 + 56, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
LABEL_8:
  char v7 = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(void **)(a1 + 80);
  id v9 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  char v10 = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(a1 + 96) = v7;
  outlined consume of CustomMaterial.CustomUniformsState(v8, v9, v10);
  if (*(void *)(a1 + 128)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  long long v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  if (*(void *)(a1 + 192))
  {
    uint64_t v12 = *(void *)(a2 + 192);
    if (v12)
    {
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v12;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);

      goto LABEL_15;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 176);
  }
  long long v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
LABEL_15:
  if (*(void *)(a1 + 240))
  {
    uint64_t v15 = *(void *)(a2 + 240);
    if (v15)
    {
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v15;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      swift_bridgeObjectRelease();
      char v16 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);

      goto LABEL_20;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 224);
  }
  long long v17 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
LABEL_20:
  uint64_t v18 = *(void *)(a1 + 288);
  if (v18 != 3)
  {
    uint64_t v19 = *(void *)(a2 + 288);
    if (v19 == 3)
    {
      outlined destroy of CustomMaterial.Descriptor(a1 + 272);
      goto LABEL_23;
    }
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    if (v18 != 2)
    {
      if (v19 == 2)
      {
        outlined destroy of CustomMaterial.Blending(a1 + 280);
      }
      else if (v18 != 1)
      {
        if (v19 != 1)
        {
          *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
          *(void *)(a1 + 288) = v19;
          swift_release();
          *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
          *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
          goto LABEL_32;
        }
        outlined destroy of BodyTrackingComponent?(a1 + 280, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
      }
    }
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(void *)(a1 + 293) = *(void *)(a2 + 293);
LABEL_32:
    *(unsigned char *)(a1 + 301) = *(unsigned char *)(a2 + 301);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
    *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
    goto LABEL_33;
  }
LABEL_23:
  long long v20 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
LABEL_33:
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 330)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 330) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 330) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial()
{
  return &type metadata for CustomMaterial;
}

ValueMetadata *type metadata accessor for CustomMaterial.GeometryModifier()
{
  return &type metadata for CustomMaterial.GeometryModifier;
}

void destroy for CustomMaterial.GeometryModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.GeometryModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.SurfaceShader()
{
  return &type metadata for CustomMaterial.SurfaceShader;
}

unsigned char *storeEnumTagSinglePayload for CustomMaterialError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22816F738);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.LightingModel()
{
  return &type metadata for CustomMaterial.LightingModel;
}

uint64_t destroy for CustomMaterial.Descriptor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if ((unint64_t)(result - 1) >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5 == 1 || v5 == 2)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 13) = *(void *)(a2 + 21);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
    swift_retain();
  }
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v6 == 2)
  {
    if (v7 == 1 || v7 == 2) {
      goto LABEL_4;
    }
LABEL_9:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
    swift_retain();
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 8);
LABEL_12:
    uint64_t v9 = *(void *)((char *)v5 + 13);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 13) = v9;
    goto LABEL_13;
  }
  if (v6 != 1)
  {
    if (v7 != 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
      *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
      *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
      *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
      goto LABEL_13;
    }
    outlined destroy of BodyTrackingComponent?(a1 + 8, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_12;
  }
  if (v7 != 1) {
    goto LABEL_9;
  }
LABEL_4:
  long long v8 = *v5;
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(_OWORD *)uint64_t v4 = v8;
LABEL_13:
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  uint64_t v10 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Descriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v6 != 2)
  {
    if (v7 == 2)
    {
      outlined destroy of CustomMaterial.Blending(v4);
    }
    else if (v6 != 1)
    {
      if (v7 != 1)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)(a1 + 16) = v7;
        swift_release();
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v4, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(void *)(v4 + 13) = *(void *)(v5 + 13);
LABEL_8:
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Descriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  if (v4 <= 1) {
    int v4 = 1;
  }
  int v6 = v4 - 2;
  if (v5 < 1) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor()
{
  return &type metadata for CustomMaterial.Descriptor;
}

unsigned char *storeEnumTagSinglePayload for CustomMaterialErrorSPI(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22816FC34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor.AttributeSet()
{
  return &type metadata for CustomMaterial.Descriptor.AttributeSet;
}

ValueMetadata *type metadata accessor for CustomMaterial.Descriptor.FunctionConstantOptions()
{
  return &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions;
}

uint64_t initializeWithCopy for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  return a1;
}

__n128 __swift_memcpy28_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Custom(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Custom(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Custom(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Custom()
{
  return &type metadata for CustomMaterial.Custom;
}

void destroy for CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 88))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void **)(a1 + 112);
  }
}

uint64_t initializeWithCopy for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 40);
  if (!v4)
  {
    long long v12 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v12;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 88);
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    return a1;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  unsigned int v6 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  uint64_t v8 = *(void *)(a2 + 88);
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v10;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  uint64_t v5 = (_OWORD *)(a1 + 24);
  unsigned int v6 = (_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v7)
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void **)(a2 + 64);
      uint64_t v9 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v8;
      id v10 = v8;
    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 24);
      long long v14 = v6[1];
      long long v13 = v6[2];
      *uint64_t v5 = *v6;
      v5[1] = v14;
      void v5[2] = v13;
    }
  }
  else if (v7)
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    id v11 = *(void **)(a2 + 64);
    *(void *)(a1 + 64) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v12 = v11;
  }
  else
  {
    long long v15 = *v6;
    long long v16 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v16;
    *uint64_t v5 = v15;
  }
  long long v17 = (_OWORD *)(a1 + 72);
  uint64_t v18 = (_OWORD *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88))
  {
    if (v19)
    {
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v20 = *(void **)(a2 + 112);
      long long v21 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v20;
      id v22 = v20;
    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 72);
      long long v26 = *(_OWORD *)(a2 + 88);
      long long v25 = *(_OWORD *)(a2 + 104);
      *long long v17 = *v18;
      *(_OWORD *)(a1 + 88) = v26;
      *(_OWORD *)(a1 + 104) = v25;
    }
  }
  else if (v19)
  {
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    uint64_t v23 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = v23;
  }
  else
  {
    long long v27 = *v18;
    long long v28 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v28;
    *long long v17 = v27;
  }
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.CustomShaderParameters(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  long long v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6)
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      swift_bridgeObjectRelease();
      long long v7 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);

      goto LABEL_6;
    }
    outlined destroy of __MaterialResource.CoreMaterialFunction((uint64_t)v4);
  }
  long long v8 = v5[1];
  *long long v4 = *v5;
  v4[1] = v8;
  _OWORD v4[2] = v5[2];
LABEL_6:
  if (!*(void *)(a1 + 88))
  {
LABEL_10:
    long long v11 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v11;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    return a1;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  if (!v9)
  {
    outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 72);
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  id v10 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.CustomShaderParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.CustomShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomShaderParameters()
{
  return &type metadata for CustomMaterial.CustomShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with take of __RKMaterialParameterBlock.Parameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of __RKMaterialParameterBlock.Parameter?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of (__RKMaterialParameterBlock.Parameter?, __RKMaterialParameterBlock.Parameter?)(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 144);
  outlined consume of __RKMaterialParameterBlock.Parameter?(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_2281706E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 162, 7);
}

uint64_t outlined consume of CustomMaterial.Descriptor?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3) {
    return outlined consume of CustomMaterial.Blending?(a2, a3);
  }
  return result;
}

double closure #1 in __RKMaterialParameterBlock.get(parameter:)partial apply@<D0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)(a1);
}

unint64_t NetworkSessionError.localizedDescription.getter()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000022;
      break;
    case 2:
      unint64_t result = 0x6D20644920707041;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x776F6C667265764FLL;
      break;
    case 6:
    case 7:
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0x6C706D6920746F4ELL;
      break;
    case 0xA:
      unint64_t result = 0x7165722072657355;
      break;
    case 0xB:
      unint64_t result = 0x656461656C206F4ELL;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000019;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000017;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t NetworkSessionError.errorDescription.getter()
{
  unint64_t result = 0xD000000000000012;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000022;
      break;
    case 2:
      unint64_t result = 0x6D20644920707041;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x776F6C667265764FLL;
      break;
    case 6:
    case 7:
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0x6C706D6920746F4ELL;
      break;
    case 0xA:
      unint64_t result = 0x7165722072657355;
      break;
    case 0xB:
      unint64_t result = 0x656461656C206F4ELL;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000019;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000017;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static NetworkSessionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NetworkSessionError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NetworkSessionError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t NetworkParticipantError.localizedDescription.getter()
{
  return 0xD000000000000012;
}

unint64_t NetworkParticipantError.errorDescription.getter()
{
  return 0xD000000000000012;
}

uint64_t static NetworkParticipantError.== infix(_:_:)()
{
  return 1;
}

void NetworkParticipantError.hash(into:)()
{
}

Swift::Int NetworkParticipantError.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NetworkSessionError and conformance NetworkSessionError()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError;
  if (!lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError;
  if (!lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSessionError and conformance NetworkSessionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkParticipantError and conformance NetworkParticipantError()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError;
  if (!lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError;
  if (!lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkParticipantError and conformance NetworkParticipantError);
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance NetworkParticipantError()
{
  return 0xD000000000000012;
}

uint64_t getEnumTagSinglePayload for NetworkSessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkSessionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228170F9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkSessionError()
{
  return &type metadata for NetworkSessionError;
}

unsigned char *storeEnumTagSinglePayload for NetworkParticipantError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x228171070);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkParticipantError()
{
  return &type metadata for NetworkParticipantError;
}

uint64_t HasSceneUnderstanding.sceneUnderstanding.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v9);
  if (!REEntityGetComponent())
  {
    uint64_t result = swift_release();
    char v6 = 2;
    BOOL v7 = 1;
LABEL_10:
    *(unsigned char *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    return result;
  }
  int SourceType = RESceneUnderstandingComponentGetSourceType();
  if ((SourceType & 0x80000000) == 0)
  {
    int v4 = SourceType;
    if (RESceneUnderstandingComponentIsEntityType())
    {
      uint64_t result = swift_release();
      char v6 = 0;
    }
    else
    {
      int IsEntityType = RESceneUnderstandingComponentIsEntityType();
      uint64_t result = swift_release();
      if (IsEntityType) {
        char v6 = 1;
      }
      else {
        char v6 = 2;
      }
    }
    BOOL v7 = v4 == 2;
    goto LABEL_10;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Entity.deferActivationUntilFullyLoaded()()
{
  uint64_t v1 = v0;
  if (REEntityIsActive())
  {
    static os_log_type_t.default.getter();
    type metadata accessor for OS_os_log();
    int v2 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  MEMORY[0x22A68E740](*(void *)(v1 + 16), 0);
  REDeferredActivationComponentGetComponentType();

  REEntityGetOrAddComponentByClass();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    unsigned __int8 v10 = (_OWORD *)(*(void *)(v1 + 48) + 80 * v9);
    long long v11 = v10[3];
    _OWORD v17[2] = v10[2];
    void v17[3] = v11;
    v17[4] = v10[4];
    long long v12 = v10[1];
    v17[0] = *v10;
    v17[1] = v12;
    uint64_t result = specialized Set._Variant.insert(_:)((uint64_t)&v16, (Swift::Int)v17);
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

BOOL static ParticleEmitterComponent.EmitterShape.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ParticleEmitterComponent.EmitterShape.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  uint64_t result = 0x746E696F70;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E616C70;
      break;
    case 2:
      uint64_t result = 7892834;
      break;
    case 3:
      uint64_t result = 0x657265687073;
      break;
    case 4:
      uint64_t result = 1701736291;
      break;
    case 5:
      uint64_t result = 0x7265646E696C7963;
      break;
    case 6:
      uint64_t result = 0x7375726F74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.EmitterShape.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.EmitterShape.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.EmitterShape.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.TorusCodingKeys>);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  long long v45 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.CylinderCodingKeys>);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.ConeCodingKeys>);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.SphereCodingKeys>);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  MEMORY[0x270FA5388](v9);
  id v36 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.BoxCodingKeys>);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  MEMORY[0x270FA5388](v11);
  long long v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.PlaneCodingKeys>);
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x270FA5388](v13);
  int64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.PointCodingKeys>);
  uint64_t v30 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.EmitterShape.CodingKeys>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  MEMORY[0x270FA5388](v19);
  id v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v23)
  {
    case 1:
      char v51 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
      goto LABEL_10;
    case 2:
      char v52 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();
      long long v27 = v33;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v34;
      uint64_t v28 = v35;
      goto LABEL_9;
    case 3:
      char v53 = 3;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();
      long long v27 = v36;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v37;
      uint64_t v28 = v38;
      goto LABEL_9;
    case 4:
      char v54 = 4;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();
      long long v27 = v39;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      goto LABEL_9;
    case 5:
      char v55 = 5;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();
      long long v27 = v42;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v43;
      uint64_t v28 = v44;
      goto LABEL_9;
    case 6:
      char v56 = 6;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();
      long long v27 = v45;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v46;
      uint64_t v28 = v47;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v26);
      break;
    default:
      char v50 = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();
      uint64_t v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v16);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v24);
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys);
  }
  return result;
}

uint64_t ParticleEmitterComponent.EmitterShape.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.TorusCodingKeys>);
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.CylinderCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v63 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.ConeCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v8);
  long long v62 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.SphereCodingKeys>);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.BoxCodingKeys>);
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v59 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.PlaneCodingKeys>);
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.PointCodingKeys>);
  uint64_t v46 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.EmitterShape.CodingKeys>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1[3];
  uint64_t v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CodingKeys and conformance ParticleEmitterComponent.EmitterShape.CodingKeys();
  uint64_t v26 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v44 = v20;
    uint64_t v43 = v18;
    long long v45 = v17;
    uint64_t v28 = v61;
    long long v27 = v62;
    uint64_t v29 = v63;
    uint64_t v30 = v64;
    uint64_t v66 = v22;
    uint64_t v31 = v24;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v32 + 16) == 1)
    {
      char v33 = *(unsigned char *)(v32 + 32);
      switch(v33)
      {
        case 1:
          char v68 = 1;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PlaneCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PlaneCodingKeys();
          long long v27 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v47;
          uint64_t v39 = v48;
          goto LABEL_13;
        case 2:
          char v69 = 2;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.BoxCodingKeys and conformance ParticleEmitterComponent.EmitterShape.BoxCodingKeys();
          long long v27 = v59;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v49;
          uint64_t v39 = v50;
          goto LABEL_13;
        case 3:
          char v70 = 3;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.SphereCodingKeys and conformance ParticleEmitterComponent.EmitterShape.SphereCodingKeys();
          long long v27 = v28;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v51;
          uint64_t v39 = v52;
          goto LABEL_13;
        case 4:
          char v71 = 4;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.ConeCodingKeys and conformance ParticleEmitterComponent.EmitterShape.ConeCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v39 = v53;
          uint64_t v40 = v54;
          goto LABEL_13;
        case 5:
          char v72 = 5;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.CylinderCodingKeys and conformance ParticleEmitterComponent.EmitterShape.CylinderCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v55);
          break;
        case 6:
          char v73 = 6;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.TorusCodingKeys and conformance ParticleEmitterComponent.EmitterShape.TorusCodingKeys();
          long long v27 = v60;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v57;
          uint64_t v39 = v58;
LABEL_13:
          (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v39);
          break;
        default:
          char v67 = 0;
          lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape.PointCodingKeys and conformance ParticleEmitterComponent.EmitterShape.PointCodingKeys();
          uint64_t v34 = v44;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v43);
          break;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v31, v21);
      *uint64_t v30 = v33;
    }
    else
    {
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v36 = v21;
      uint64_t v38 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v38 = &type metadata for ParticleEmitterComponent.EmitterShape;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v38, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v36);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.EmitterShape@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.EmitterShape.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.EmitterShape(void *a1)
{
  return ParticleEmitterComponent.EmitterShape.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.BirthLocation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REVFXEmitterComponentGetBirthLocation();
  if (result == 1)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    char v9 = 1;
    unint64_t v10 = 1;
    goto LABEL_15;
  }
  if (result != 2)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    char v9 = 1;
    goto LABEL_15;
  }
  uint64_t result = REVFXEmitterComponentGetBirthLocationVertex();
  float v6 = fabsf(v5);
  if (v6 <= -1.0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 >= 1.8447e19)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  float v7 = fabsf(v3);
  if (v7 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 >= 1.8447e19)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  float v8 = fabsf(v4);
  if ((~LODWORD(v8) & 0x7F800000) == 0
    || (LODWORD(v6) & 0x7F800000) == 0x7F800000
    || (LODWORD(v7) & 0x7F800000) == 0x7F800000)
  {
    goto LABEL_20;
  }
  if (v8 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 < 1.8447e19)
  {
    char v9 = 0;
    unint64_t v10 = (unint64_t)v6;
    unint64_t v11 = (unint64_t)v7;
    unint64_t v12 = (unint64_t)v8;
LABEL_15:
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = v9;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

void ParticleEmitterComponent.BirthLocation.hash(into:)()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Swift::UInt v3 = (v1 | *(void *)(v0 + 24) | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  uint64_t v1 = 0x656D756C6F76;
  if (*v0 != 1) {
    uint64_t v1 = 0x7365636974726576;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636166727573;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthLocation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.BirthLocation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.BirthLocation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.VerticesCodingKeys>);
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.VolumeCodingKeys>);
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v22 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys>);
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthLocation.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = *(_OWORD *)(v1 + 16);
  int8x16_t v28 = *(int8x16_t *)v1;
  long long v29 = v14;
  int v15 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15 == 1)
  {
    if (vorrq_s8((int8x16_t)vdupq_lane_s64(v29, 0), v28).i64[1] | v28.i64[0] | *((void *)&v29 + 1))
    {
      v30.i8[0] = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
      uint64_t v16 = v22;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    }
    else
    {
      v30.i8[0] = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
    }
  }
  else
  {
    v30.i8[0] = 2;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
    uint64_t v17 = v25;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    int8x16_t v30 = v28;
    long long v31 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<UInt> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt>);
    uint64_t v18 = v27;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int ParticleEmitterComponent.BirthLocation.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    Swift::UInt v3 = (v1 | v4 | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.BirthLocation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.VerticesCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v44 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.VolumeCodingKeys>);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys>);
  uint64_t v43 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthLocation.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  long long v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys();
  uint64_t v17 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v37 = v9;
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    uint64_t v50 = v13;
    uint64_t v20 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v20 + 16) == 1)
    {
      if (*(unsigned char *)(v20 + 32))
      {
        if (*(unsigned char *)(v20 + 32) != 1)
        {
          LOBYTE(v46) = 2;
          lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v30 = v12;
          uint64_t v31 = v42;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt>);
          uint64_t v43 = v30;
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<UInt> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt>);
          uint64_t v33 = v40;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v33);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v43);
          char v34 = 0;
          uint64_t v24 = v46;
          uint64_t v21 = v47;
          uint64_t v22 = v48;
          uint64_t v23 = v49;
          uint64_t v35 = (uint64_t)v45;
LABEL_12:
          *(void *)uint64_t v31 = v24;
          *(void *)(v31 + 8) = v21;
          *(void *)(v31 + 16) = v22;
          *(void *)(v31 + 24) = v23;
          *(unsigned char *)(v31 + 32) = v34;
          return __swift_destroy_boxed_opaque_existential_1(v35);
        }
        LOBYTE(v46) = 1;
        lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v39);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v12);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 1;
      }
      else
      {
        LOBYTE(v46) = 0;
        lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v37);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v12);
        uint64_t v24 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      char v34 = 1;
      uint64_t v35 = (uint64_t)v45;
      uint64_t v31 = v42;
      goto LABEL_12;
    }
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v15;
    uint64_t v27 = v12;
    long long v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *long long v29 = &type metadata for ParticleEmitterComponent.BirthLocation;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v27);
  }
  uint64_t v35 = (uint64_t)v45;
  return __swift_destroy_boxed_opaque_existential_1(v35);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.BirthLocation@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.BirthLocation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.BirthLocation(void *a1)
{
  return ParticleEmitterComponent.BirthLocation.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance ParticleEmitterComponent.BirthLocation()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Swift::UInt v3 = (v1 | *(void *)(v0 + 24) | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.BirthLocation()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    Swift::UInt v3 = (v1 | v4 | v3 | v2) != 0;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  uint64_t v1 = 0x6C61636F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C616D726F6ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x646C726F77;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.BirthDirection.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.BirthDirection.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.BirthDirection.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.NormalCodingKeys>);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.LocalCodingKeys>);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.WorldCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.BirthDirection.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
    }
    else
    {
      char v28 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
      uint64_t v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
    }
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ParticleEmitterComponent.BirthDirection.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.NormalCodingKeys>);
  uint64_t v33 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.LocalCodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.WorldCodingKeys>);
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.BirthDirection.CodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys();
  uint64_t v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v6;
  uint64_t v30 = 0;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v39 = a1;
  int v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for ParticleEmitterComponent.BirthDirection;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    a1 = v39;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(unsigned char *)(v16 + 32))
  {
    if (v17 == 1)
    {
      char v41 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys();
      uint64_t v18 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v30 = v18;
      if (v18)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
LABEL_12:
        a1 = v39;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
    }
    else
    {
      char v42 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys();
      uint64_t v25 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v26 = v36;
      uint64_t v30 = v25;
      if (v25)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    }
  }
  else
  {
    char v40 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys();
    uint64_t v24 = v30;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    uint64_t v20 = v35;
  }
  *uint64_t v20 = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.BirthDirection@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.BirthDirection.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.BirthDirection(void *a1)
{
  return ParticleEmitterComponent.BirthDirection.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  uint64_t result = 0x68747269426E6FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6574616470556E6FLL;
      break;
    case 2:
      uint64_t result = 0x68746165446E6FLL;
      break;
    case 3:
      uint64_t result = 0x64696C6C6F436E6FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.SpawnOccasion.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();

  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();

  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t ParticleEmitterComponent.SpawnOccasion.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys>);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v23 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys>);
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SpawnOccasion.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v16)
  {
    case 1:
      char v33 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();
      int v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v24;
      uint64_t v18 = v25;
      goto LABEL_6;
    case 2:
      char v34 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();
      int v17 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v27;
      uint64_t v18 = v28;
      goto LABEL_6;
    case 3:
      char v35 = 3;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();
      int v17 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v30;
      uint64_t v18 = v31;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      break;
    default:
      char v32 = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ParticleEmitterComponent.SpawnOccasion.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys>);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v48 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys>);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys>);
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SpawnOccasion.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys();
  uint64_t v19 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v39 = v11;
  char v40 = v10;
  uint64_t v52 = 0;
  uint64_t v21 = v48;
  uint64_t v20 = v49;
  uint64_t v22 = v50;
  uint64_t v23 = v17;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v29 = &type metadata for ParticleEmitterComponent.SpawnOccasion;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_7:
    uint64_t v30 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  char v25 = *(unsigned char *)(v24 + 32);
  switch(v25)
  {
    case 1:
      char v54 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys();
      char v32 = v40;
      uint64_t v33 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_12;
      }
      uint64_t v35 = v42;
      uint64_t v34 = v43;
      goto LABEL_16;
    case 2:
      char v55 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys();
      char v32 = v46;
      uint64_t v36 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v36) {
        goto LABEL_12;
      }
      uint64_t v34 = v44;
      uint64_t v35 = v45;
LABEL_16:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
      goto LABEL_17;
    case 3:
      char v56 = 3;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys();
      uint64_t v37 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        uint64_t v30 = (uint64_t)v51;
        return __swift_destroy_boxed_opaque_existential_1(v30);
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      uint64_t v38 = v47;
      goto LABEL_19;
    default:
      char v53 = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys();
      uint64_t v26 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v26)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v39);
LABEL_17:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      uint64_t v38 = v47;
LABEL_19:
      unsigned char *v38 = v25;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SpawnOccasion@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.SpawnOccasion.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SpawnOccasion(void *a1)
{
  return ParticleEmitterComponent.SpawnOccasion.encode(to:)(a1);
}

BOOL static ParticleEmitterComponent.SimulationSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ParticleEmitterComponent.SimulationSpace.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  if (*v0) {
    return 0x6C61626F6C67;
  }
  else {
    return 0x6C61636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.SimulationSpace.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.SimulationSpace.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v18 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.LocalCodingKeys>);
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v17 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationSpace.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  if (v12)
  {
    char v22 = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
    uint64_t v14 = v18;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v20);
  }
  else
  {
    char v21 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v17);
  }
  return (*v13)(v11, v8);
}

Swift::Int ParticleEmitterComponent.SimulationSpace.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.SimulationSpace.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys>);
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.LocalCodingKeys>);
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationSpace.CodingKeys>);
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys();
  uint64_t v11 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    goto LABEL_6;
  }
  char v32 = a1;
  uint64_t v13 = v30;
  char v12 = v31;
  uint64_t v14 = v10;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    char v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v22 = &type metadata for ParticleEmitterComponent.SimulationSpace;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
    a1 = v32;
LABEL_6:
    uint64_t v23 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }
  v26[1] = v15;
  char v16 = *(unsigned char *)(v15 + 32);
  if (v16)
  {
    char v17 = *(unsigned char *)(v15 + 32);
    char v34 = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys();
    uint64_t v18 = v14;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v29;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v8);
    char v16 = v17;
  }
  else
  {
    char v33 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v25 = v29;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v8);
  }
  *char v12 = v16;
  uint64_t v23 = (uint64_t)v32;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SimulationSpace@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.SimulationSpace.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SimulationSpace(void *a1)
{
  return ParticleEmitterComponent.SimulationSpace.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  uint64_t v1 = 0x6573756170;
  if (*v0 != 1) {
    uint64_t v1 = 1886352499;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 2036427888;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.SimulationState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.SimulationState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.SimulationState.StopCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.SimulationState.StopCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.SimulationState.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.StopCodingKeys>);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.PauseCodingKeys>);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.PlayCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.SimulationState.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
    }
    else
    {
      char v28 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
      char v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
    }
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ParticleEmitterComponent.SimulationState.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.StopCodingKeys>);
  uint64_t v33 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.PauseCodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.PlayCodingKeys>);
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.SimulationState.CodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys();
  uint64_t v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v6;
  uint64_t v30 = 0;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v39 = a1;
  uint64_t v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for ParticleEmitterComponent.SimulationState;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    a1 = v39;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(unsigned char *)(v16 + 32))
  {
    if (v17 == 1)
    {
      char v41 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys();
      uint64_t v18 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v30 = v18;
      if (v18)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
LABEL_12:
        a1 = v39;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
    }
    else
    {
      char v42 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys();
      uint64_t v25 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v26 = v36;
      uint64_t v30 = v25;
      if (v25)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    }
  }
  else
  {
    char v40 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys();
    uint64_t v24 = v30;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    uint64_t v20 = v35;
  }
  *uint64_t v20 = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.SimulationState@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.SimulationState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.SimulationState(void *a1)
{
  return ParticleEmitterComponent.SimulationState.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 40) = 257;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 80) = 513;
  *(_OWORD *)(a1 + 96) = xmmword_22833D9B0;
  *(void *)(a1 + 112) = 1056964608;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&zmmword_22830EC90[16];
  *(void *)(a1 + 144) = 0x3E80000040C90FDALL;
  *(unsigned char *)(a1 + 152) = 2;
  *(_DWORD *)(a1 + 156) = 1065353216;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0x10000;
  *(unsigned char *)(a1 + 172) = 1;
  *(void *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 256;
  *(_OWORD *)(a1 + 192) = xmmword_22833D9C0;
  *(void *)(a1 + 208) = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 216) = 1065353216;
  uint64_t v3 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 224) = v2;
  *(void *)(a1 + 232) = v3;
  ParticleEmitterComponent.ParticleEmitter.init()(a1 + 240);
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_((uint64_t)v5);
  uint64_t result = outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v5, a1 + 576);
  *(unsigned char *)(a1 + 897) = 0;
  return result;
}

double ParticleEmitterComponent.emissionDuration.getter()
{
  return *(double *)v0;
}

void ParticleEmitterComponent.emissionDuration.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDuration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.emissionDurationVariation.getter()
{
  return *(double *)(v0 + 8);
}

void ParticleEmitterComponent.emissionDurationVariation.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDurationVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.idleDuration.getter()
{
  return *(double *)(v0 + 16);
}

void ParticleEmitterComponent.idleDuration.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*ParticleEmitterComponent.idleDuration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.idleDurationVariation.getter()
{
  return *(double *)(v0 + 24);
}

void ParticleEmitterComponent.idleDurationVariation.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*ParticleEmitterComponent.idleDurationVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.warmupDuration.getter()
{
  return *(double *)(v0 + 32);
}

void ParticleEmitterComponent.warmupDuration.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.warmupDuration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.shouldLoop.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ParticleEmitterComponent.shouldLoop.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.shouldLoop.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.emitterShape.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 41);
}

unsigned char *ParticleEmitterComponent.emitterShape.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 41) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.emitterShape.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.birthLocation.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  __n128 result = *(__n128 *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 ParticleEmitterComponent.birthLocation.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 64) = v4;
  *(unsigned char *)(v1 + 80) = v2;
  return result;
}

uint64_t (*ParticleEmitterComponent.birthLocation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.birthDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 81);
}

unsigned char *ParticleEmitterComponent.birthDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 81) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.birthDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.emitterShapeSize.getter()
{
  return v0[6];
}

void ParticleEmitterComponent.emitterShapeSize.setter(__n128 a1)
{
  v1[6] = a1;
}

uint64_t (*ParticleEmitterComponent.emitterShapeSize.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.speed.getter()
{
  return *(float *)(v0 + 112);
}

void ParticleEmitterComponent.speed.setter(float a1)
{
  *(float *)(v1 + 112) = a1;
}

uint64_t (*ParticleEmitterComponent.speed.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.speedVariation.getter()
{
  return *(float *)(v0 + 116);
}

void ParticleEmitterComponent.speedVariation.setter(float a1)
{
  *(float *)(v1 + 116) = a1;
}

uint64_t (*ParticleEmitterComponent.speedVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.emissionDirection.getter()
{
  return v0[8];
}

void ParticleEmitterComponent.emissionDirection.setter(__n128 a1)
{
  v1[8] = a1;
}

uint64_t (*ParticleEmitterComponent.emissionDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.radialAmount.getter()
{
  return *(float *)(v0 + 144);
}

void ParticleEmitterComponent.radialAmount.setter(float a1)
{
  *(float *)(v1 + 144) = a1;
}

uint64_t (*ParticleEmitterComponent.radialAmount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.torusInnerRadius.getter()
{
  return *(float *)(v0 + 148);
}

void ParticleEmitterComponent.torusInnerRadius.setter(float a1)
{
  *(float *)(v1 + 148) = a1;
}

uint64_t (*ParticleEmitterComponent.torusInnerRadius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.spawnOccasion.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 152);
}

unsigned char *ParticleEmitterComponent.spawnOccasion.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 152) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.spawnOccasion.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnVelocityFactor.getter()
{
  return *(float *)(v0 + 156);
}

void ParticleEmitterComponent.spawnVelocityFactor.setter(float a1)
{
  *(float *)(v1 + 156) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnVelocityFactor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnSpreadFactor.getter()
{
  return *(float *)(v0 + 160);
}

void ParticleEmitterComponent.spawnSpreadFactor.setter(float a1)
{
  *(float *)(v1 + 160) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnSpreadFactor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.spawnSpreadFactorVariation.getter()
{
  return *(float *)(v0 + 164);
}

void ParticleEmitterComponent.spawnSpreadFactorVariation.setter(float a1)
{
  *(float *)(v1 + 164) = a1;
}

uint64_t (*ParticleEmitterComponent.spawnSpreadFactorVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.getter()
{
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 168) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.spawnInheritsParentColor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.simulationState.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 169);
}

unsigned char *ParticleEmitterComponent.simulationState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 169) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.simulationState.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.simulationSpace.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 170);
}

char *ParticleEmitterComponent.simulationSpace.setter(char *result)
{
  char v2 = *result;
  *(unsigned char *)(v1 + 170) = *result;
  *(unsigned char *)(v1 + 171) = v2 ^ 1;
  return result;
}

uint64_t (*ParticleEmitterComponent.simulationSpace.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return ParticleEmitterComponent.simulationSpace.modify;
}

uint64_t ParticleEmitterComponent.simulationSpace.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(*(void *)result + 171) = (*(unsigned char *)(*(void *)result + 170) & 1) == 0;
  }
  return result;
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.getter()
{
  return *(unsigned __int8 *)(v0 + 171);
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 171) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.particlesInheritTransform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.fieldSimulationSpace.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 172);
}

unsigned char *ParticleEmitterComponent.fieldSimulationSpace.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 172) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.fieldSimulationSpace.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ParticleEmitterComponent.resetSimulation()()
{
  *(unsigned char *)(v0 + 184) = 1;
}

Swift::Void __swiftcall ParticleEmitterComponent.restart()()
{
  uint64_t v1 = *(void *)(v0 + 176);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 176) = v3;
  }
}

uint64_t ParticleEmitterComponent.isEmitting.getter()
{
  return *(unsigned __int8 *)(v0 + 185);
}

uint64_t ParticleEmitterComponent.isEmitting.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 185) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.isEmitting.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ParticleEmitterComponent.burst()()
{
  uint64_t v1 = *(void *)(v0 + 192);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 192) = v3;
  }
}

uint64_t ParticleEmitterComponent.burstCount.getter()
{
  return *(void *)(v0 + 200);
}

uint64_t ParticleEmitterComponent.burstCount.setter(uint64_t result)
{
  *(void *)(v1 + 200) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.burstCount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.burstCountVariation.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t ParticleEmitterComponent.burstCountVariation.setter(uint64_t result)
{
  *(void *)(v1 + 208) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.burstCountVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.simulationRate.getter()
{
  return *(float *)(v0 + 216);
}

void ParticleEmitterComponent.simulationRate.setter(float a1)
{
  float v2 = fminf(a1, 2.0);
  if (v2 < 0.0) {
    float v2 = 0.0;
  }
  *(float *)(v1 + 216) = v2;
}

uint64_t (*ParticleEmitterComponent.simulationRate.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return ParticleEmitterComponent.simulationRate.modify;
}

uint64_t ParticleEmitterComponent.simulationRate.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    float v2 = fminf(*(float *)(*(void *)result + 216), 2.0);
    if (v2 < 0.0) {
      float v2 = 0.0;
    }
    *(float *)(*(void *)result + 216) = v2;
  }
  return result;
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for ParticleEmitterComponent.collisionPlanes_v1 : ParticleEmitterComponent(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = *a1;
  swift_bridgeObjectRetain();
  ParticleEmitterComponent.collisionPlanes_v1.didset(v2);

  return swift_bridgeObjectRelease();
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 224);
  *(void *)(v1 + 224) = a1;
  if (*(void *)(a1 + 16) < *(void *)(v2 + 16))
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized Set.init<A>(_:)(v3);
    swift_bridgeObjectRelease();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized Set.init<A>(_:)(v5);
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 16) <= *(void *)(v4 + 16) >> 3) {
      specialized Set._subtract<A>(_:)(v6);
    }
    else {
      uint64_t v4 = specialized _NativeSet.subtracting<A>(_:)(v6, v4);
    }
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.didset(uint64_t result)
{
  if (*(void *)(*(void *)(v1 + 224) + 16) < *(void *)(result + 16))
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = specialized Set.init<A>(_:)(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    if (*(void *)(v5 + 16) <= *(void *)(v3 + 16) >> 3) {
      specialized Set._subtract<A>(_:)(v5);
    }
    else {
      uint64_t v3 = specialized _NativeSet.subtracting<A>(_:)(v5, v3);
    }
    swift_bridgeObjectRelease();
    return specialized Set.formUnion<A>(_:)(v3);
  }
  return result;
}

uint64_t (*ParticleEmitterComponent.collisionPlanes_v1.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 224);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return ParticleEmitterComponent.collisionPlanes_v1.modify;
}

uint64_t ParticleEmitterComponent.collisionPlanes_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(v3 + 224);
  *(void *)(v3 + 224) = *a1;
  unint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v2 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if (v6 < v5)
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = specialized Set.init<A>(_:)(v7);
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_bridgeObjectRetain();
      uint64_t v10 = specialized Set.init<A>(_:)(v9);
      swift_bridgeObjectRelease();
      if (*(void *)(v10 + 16) <= *(void *)(v8 + 16) >> 3)
      {
        specialized Set._subtract<A>(_:)(v10);
        swift_bridgeObjectRelease();
        uint64_t v11 = v8;
      }
      else
      {
        uint64_t v11 = specialized _NativeSet.subtracting<A>(_:)(v10, v8);
        swift_bridgeObjectRelease();
      }
      specialized Set.formUnion<A>(_:)(v11);
    }
    swift_bridgeObjectRelease();
  }
  else if (v6 < v5)
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized Set.init<A>(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    if (*(void *)(v15 + 16) <= *(void *)(v13 + 16) >> 3)
    {
      specialized Set._subtract<A>(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = v13;
    }
    else
    {
      uint64_t v16 = specialized _NativeSet.subtracting<A>(_:)(v15, v13);
      swift_bridgeObjectRelease();
    }
    specialized Set.formUnion<A>(_:)(v16);
  }

  return swift_bridgeObjectRelease();
}

double ParticleEmitterComponent.ParticleEmitter.init()@<D0>(uint64_t a1@<X8>)
{
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  CGColorRef v3 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  CGColorRef v4 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  CGColorRef v5 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  *(void *)a1 = 1120403456;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 29) = 0;
  *(void *)(a1 + 40) = 1017370378;
  *(void *)(a1 + 48) = GenericRGB;
  *(void *)(a1 + 56) = v3;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = 256;
  *(_OWORD *)(a1 + 96) = xmmword_22830EC70;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 1;
  *(void *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = xmmword_22833D9D0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 1050253722;
  *(unsigned char *)(a1 + 168) = 3;
  *(_OWORD *)(a1 + 172) = xmmword_22833D9E0;
  *(void *)(a1 + 188) = 1065353216;
  *(_DWORD *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 208) = xmmword_22833D9F0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)&zmmword_22830EC90[16];
  *(unsigned char *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_WORD *)(a1 + 264) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(unsigned char *)(a1 + 320) = 3;
  return result;
}

void *ParticleEmitterComponent.mainEmitter.getter@<X0>(void *a1@<X8>)
{
  CGColorRef v3 = (const void *)(v1 + 240);
  memcpy(v5, v3, 0x141uLL);
  memcpy(a1, v3, 0x141uLL);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter(v5);
}

void *ParticleEmitterComponent.mainEmitter.setter(const void *a1)
{
  CGColorRef v3 = (void *)(v1 + 240);
  memcpy(v5, v3, 0x141uLL);
  outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)v5);
  return memcpy(v3, a1, 0x141uLL);
}

uint64_t (*ParticleEmitterComponent.mainEmitter.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.spawnedEmitter.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a1);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
}

uint64_t key path setter for ParticleEmitterComponent.spawnedEmitter : ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a2 + 576, (uint64_t)v5);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a2 + 576);
  uint64_t result = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v4);
  *(unsigned char *)(a2 + 897) = result == 0;
  return result;
}

uint64_t ParticleEmitterComponent.spawnedEmitter.setter(uint64_t a1)
{
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1, (uint64_t)v3);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v4);
  outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v3, v1 + 576);
  uint64_t result = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v3);
  *(unsigned char *)(v1 + 897) = result == 0;
  return result;
}

void (*ParticleEmitterComponent.spawnedEmitter.modify(void *a1))(void **a1, char a2)
{
  CGColorRef v3 = malloc(0x150uLL);
  *a1 = v3;
  v3[41] = v1;
  return ParticleEmitterComponent.spawnedEmitter.modify;
}

void ParticleEmitterComponent.spawnedEmitter.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = v2[41];
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v3 + 576, (uint64_t)v2);
    *(unsigned char *)(v3 + 897) = _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v2) == 0;
  }

  free(v2);
}

void ParticleEmitterComponent.ParticleEmitter.BillboardMode.hash(into:)(uint64_t a1)
{
  Swift::UInt32 v3 = v1[1].n128_u32[0];
  if (v1[1].n128_u8[4] == 1)
  {
    Swift::UInt v5 = *v1 != 0 || v3 != 0;
    Hasher._combine(_:)(v5);
  }
  else
  {
    __n128 v7 = *v1;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(a1, v7);
    if ((v3 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v6 = v3;
    }
    else {
      Swift::UInt32 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 1701147238;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72616F626C6C6962;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  if (*v0) {
    return 0x6F69746169726176;
  }
  else {
    return 1936291937;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BillboardMode.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys>);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v23 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys>);
  uint64_t v32 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  int v36 = *((_DWORD *)v1 + 4);
  int v14 = *((unsigned __int8 *)v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14 == 1)
  {
    if (v12 | v13 || v36)
    {
      LOBYTE(v34) = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
      uint64_t v15 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v17 = v27;
      uint64_t v16 = v28;
    }
    else
    {
      LOBYTE(v34) = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
      uint64_t v15 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v17 = v24;
      uint64_t v16 = v25;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  else
  {
    LOBYTE(v34) = 2;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
    uint64_t v18 = v29;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v34 = v13;
    uint64_t v35 = v12;
    char v37 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v19 = v31;
    uint64_t v20 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v20)
    {
      LOBYTE(v34) = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v9);
}

Swift::Int ParticleEmitterComponent.ParticleEmitter.BillboardMode.hashValue.getter()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  if (v4 == 1)
  {
    if (v1 | v2) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v3 == 0;
    }
    Swift::UInt v6 = !v5;
    Hasher._combine(_:)(v6);
  }
  else
  {
    v7.n128_u64[0] = v2;
    v7.n128_u64[1] = v1;
    __n128 v10 = v7;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(v11, v10);
    if ((v3 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v8 = v3;
    }
    else {
      Swift::UInt32 v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BillboardMode.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys>);
  uint64_t v37 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys>);
  int v36 = *(char **)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  BOOL v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys>);
  uint64_t v33 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  Swift::UInt32 v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys();
  uint64_t v14 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_10;
  }
  uint64_t v32 = v6;
  uint64_t v41 = v10;
  uint64_t v16 = v38;
  uint64_t v15 = v39;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v25 = &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x263F8DCB0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v9);
LABEL_10:
    uint64_t v26 = (uint64_t)v40;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  uint64_t v18 = v41;
  if (*(unsigned char *)(v17 + 32))
  {
    if (*(unsigned char *)(v17 + 32) == 1)
    {
      LOBYTE(v43) = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*((void (**)(char *, uint64_t))v36 + 1))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v9);
      uint64_t v19 = 0;
      uint64_t v20 = 1;
      int v21 = 0;
      char v22 = 1;
    }
    else
    {
      LOBYTE(v43) = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      int v36 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      char v42 = 0;
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
      uint64_t v28 = v35;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v29 = v16;
      uint64_t v20 = v43;
      uint64_t v19 = v44;
      char v42 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      int v21 = v30;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v9);
      char v22 = 0;
    }
  }
  else
  {
    LOBYTE(v43) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v9);
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    char v22 = 1;
    int v21 = 0;
  }
  uint64_t v26 = (uint64_t)v40;
  *(void *)uint64_t v15 = v20;
  *(void *)(v15 + 8) = v19;
  *(_DWORD *)(v15 + 16) = v21;
  *(unsigned char *)(v15 + 20) = v22;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.BillboardMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.BillboardMode.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  unint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  if (v4 == 1)
  {
    if (v1 | v2) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v3 == 0;
    }
    Swift::UInt v6 = !v5;
    Hasher._combine(_:)(v6);
  }
  else
  {
    v7.n128_u64[0] = v2;
    v7.n128_u64[1] = v1;
    __n128 v10 = v7;
    Hasher._combine(_:)(2uLL);
    specialized SIMD.hash(into:)(v11, v10);
    if ((v3 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v8 = v3;
    }
    else {
      Swift::UInt32 v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

unint64_t ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x61467261656E696CLL;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6461466B63697571;
      break;
    case 4:
    case 5:
      unint64_t result = 0x6564614665736165;
      break;
    case 6:
      unint64_t result = 0x746E6174736E6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  return ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.OpacityCurve.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys>);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v45 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys>);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  char v42 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys>);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys>);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  MEMORY[0x270FA5388](v9);
  int v36 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys>);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys>);
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys>);
  uint64_t v30 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  MEMORY[0x270FA5388](v19);
  char v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v23)
  {
    case 1:
      char v51 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
      goto LABEL_10;
    case 2:
      char v52 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();
      uint64_t v27 = v33;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v34;
      uint64_t v28 = v35;
      goto LABEL_9;
    case 3:
      char v53 = 3;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();
      uint64_t v27 = v36;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v37;
      uint64_t v28 = v38;
      goto LABEL_9;
    case 4:
      char v54 = 4;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();
      uint64_t v27 = v39;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      goto LABEL_9;
    case 5:
      char v55 = 5;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();
      uint64_t v27 = v42;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v43;
      uint64_t v28 = v44;
      goto LABEL_9;
    case 6:
      char v56 = 6;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();
      uint64_t v27 = v45;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v46;
      uint64_t v28 = v47;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v26);
      break;
    default:
      char v50 = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();
      uint64_t v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v16);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v24);
      break;
  }
  return result;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.OpacityCurve.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys>);
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v63 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v8);
  long long v62 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys>);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys>);
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v59 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys>);
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys>);
  uint64_t v46 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1[3];
  uint64_t v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys();
  uint64_t v26 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v44 = v20;
    uint64_t v43 = v18;
    uint64_t v45 = v17;
    uint64_t v28 = v61;
    uint64_t v27 = v62;
    uint64_t v29 = v63;
    uint64_t v30 = v64;
    uint64_t v66 = v22;
    uint64_t v31 = v24;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v32 + 16) == 1)
    {
      char v33 = *(unsigned char *)(v32 + 32);
      switch(v33)
      {
        case 1:
          char v68 = 1;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys();
          uint64_t v27 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v47;
          uint64_t v39 = v48;
          goto LABEL_13;
        case 2:
          char v69 = 2;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys();
          uint64_t v27 = v59;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v49;
          uint64_t v39 = v50;
          goto LABEL_13;
        case 3:
          char v70 = 3;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys();
          uint64_t v27 = v28;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v51;
          uint64_t v39 = v52;
          goto LABEL_13;
        case 4:
          char v71 = 4;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v39 = v53;
          uint64_t v40 = v54;
          goto LABEL_13;
        case 5:
          char v72 = 5;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v55);
          break;
        case 6:
          char v73 = 6;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys();
          uint64_t v27 = v60;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v57;
          uint64_t v39 = v58;
LABEL_13:
          (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v39);
          break;
        default:
          char v67 = 0;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys();
          uint64_t v34 = v44;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v43);
          break;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v31, v21);
      *uint64_t v30 = v33;
    }
    else
    {
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v36 = v21;
      uint64_t v38 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v38 = &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v38, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v36);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.OpacityCurve.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.OpacityCurve.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  uint64_t result = 0x6973616572636E69;
  switch(*v0)
  {
    case 1:
    case 3:
    case 5:
      uint64_t result = 0x6973616572636564;
      break;
    case 2:
      uint64_t result = 0x6973616572636E69;
      break;
    case 4:
      uint64_t result = 0x6973616572636E69;
      break;
    case 6:
      uint64_t result = 0x646574726F736E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.SortOrder.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys>);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v45 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys>);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys>);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys>);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v36 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys>);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  MEMORY[0x270FA5388](v11);
  char v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys>);
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys>);
  uint64_t v30 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v23)
  {
    case 1:
      char v51 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
      goto LABEL_10;
    case 2:
      char v52 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();
      uint64_t v27 = v33;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v34;
      uint64_t v28 = v35;
      goto LABEL_9;
    case 3:
      char v53 = 3;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();
      uint64_t v27 = v36;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v37;
      uint64_t v28 = v38;
      goto LABEL_9;
    case 4:
      char v54 = 4;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();
      uint64_t v27 = v39;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      goto LABEL_9;
    case 5:
      char v55 = 5;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();
      uint64_t v27 = v42;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v43;
      uint64_t v28 = v44;
      goto LABEL_9;
    case 6:
      char v56 = 6;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();
      uint64_t v27 = v45;
      uint64_t v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v46;
      uint64_t v28 = v47;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v26);
      break;
    default:
      char v50 = 0;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();
      uint64_t v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v16);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v22, v24);
      break;
  }
  return result;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.SortOrder.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys>);
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v60 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v63 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v8);
  long long v62 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys>);
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys>);
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v59 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys>);
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys>);
  uint64_t v46 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys>);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1[3];
  uint64_t v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys();
  uint64_t v26 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v26)
  {
    uint64_t v44 = v20;
    uint64_t v43 = v18;
    uint64_t v45 = v17;
    uint64_t v28 = v61;
    uint64_t v27 = v62;
    uint64_t v29 = v63;
    uint64_t v30 = v64;
    uint64_t v66 = v22;
    uint64_t v31 = v24;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v32 + 16) == 1)
    {
      char v33 = *(unsigned char *)(v32 + 32);
      switch(v33)
      {
        case 1:
          char v68 = 1;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys();
          uint64_t v27 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v47;
          uint64_t v39 = v48;
          goto LABEL_13;
        case 2:
          char v69 = 2;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys();
          uint64_t v27 = v59;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v49;
          uint64_t v39 = v50;
          goto LABEL_13;
        case 3:
          char v70 = 3;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys();
          uint64_t v27 = v28;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v51;
          uint64_t v39 = v52;
          goto LABEL_13;
        case 4:
          char v71 = 4;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v39 = v53;
          uint64_t v40 = v54;
          goto LABEL_13;
        case 5:
          char v72 = 5;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v55);
          break;
        case 6:
          char v73 = 6;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys();
          uint64_t v27 = v60;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v40 = v57;
          uint64_t v39 = v58;
LABEL_13:
          (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v39);
          break;
        default:
          char v67 = 0;
          lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys();
          uint64_t v34 = v44;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v43);
          break;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v31, v21);
      *uint64_t v30 = v33;
    }
    else
    {
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v36 = v21;
      uint64_t v38 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v38 = &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v38, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v24, v36);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.SortOrder.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.SortOrder(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.SortOrder.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  uint64_t v1 = 0x65757161706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6576697469646461;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6168706C61;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BlendMode.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys>);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys>);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
    }
    else
    {
      char v28 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
      uint64_t v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
    }
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.BlendMode.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys>);
  uint64_t v33 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys>);
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys();
  uint64_t v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v6;
  uint64_t v30 = 0;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v39 = a1;
  uint64_t v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    a1 = v39;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(unsigned char *)(v16 + 32))
  {
    if (v17 == 1)
    {
      char v41 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys();
      uint64_t v18 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v30 = v18;
      if (v18)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
LABEL_12:
        a1 = v39;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
    }
    else
    {
      char v42 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys();
      uint64_t v25 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v26 = v36;
      uint64_t v30 = v25;
      if (v25)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    }
  }
  else
  {
    char v40 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys();
    uint64_t v24 = v30;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    uint64_t v20 = v35;
  }
  *uint64_t v20 = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.BlendMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.BlendMode(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.BlendMode.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.getter()
{
  return *(void *)v0;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.getter()
{
  return *(float *)(v0 + 32);
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter(float a1)
{
  *(float *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.getter()
{
  return *(float *)(v0 + 36);
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter(float a1)
{
  *(float *)(v1 + 36) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

unsigned char *ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 40) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  uint64_t v1 = 0x676E69706F6F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x657665526F747561;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636E4F79616C70;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys>);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys>);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
    }
    else
    {
      char v28 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
      int v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
    }
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys>);
  uint64_t v33 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys>);
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys();
  uint64_t v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v6;
  uint64_t v30 = 0;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v39 = a1;
  uint64_t v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v23 = &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    a1 = v39;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(unsigned char *)(v16 + 32))
  {
    if (v17 == 1)
    {
      char v41 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys();
      uint64_t v18 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v30 = v18;
      if (v18)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
LABEL_12:
        a1 = v39;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
    }
    else
    {
      char v42 = 2;
      lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys();
      uint64_t v25 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v26 = v36;
      uint64_t v30 = v25;
      if (v25)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    }
  }
  else
  {
    char v40 = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys();
    uint64_t v24 = v30;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    uint64_t v20 = v35;
  }
  *uint64_t v20 = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.encode(to:)(a1);
}

void __swiftcall ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()(RealityFoundation::ParticleEmitterComponent::ParticleEmitter::ImageSequence *__return_ptr retstr)
{
  *(int64x2_t *)&retstr->rowCount = vdupq_n_s64(3uLL);
  retstr->initialFrame = 0;
  retstr->initialFrameVariation = 0;
  *(void *)&retstr->frameRate = 1091567616;
  retstr->animationMode = RealityFoundation_ParticleEmitterComponent_ParticleEmitter_ImageSequence_AnimationRepeatMode_looping;
}

void ParticleEmitterComponent.ParticleEmitter.ImageSequence.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 32);
  Swift::UInt32 v5 = *(_DWORD *)(v0 + 36);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v4;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v5 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = v5;
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
}

unint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746E756F43776F72;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F436E6D756C6F63;
      break;
    case 2:
      unint64_t result = 0x466C616974696E69;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x746152656D617266;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6F6974616D696E61;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::UInt32 v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  _OWORD v15[2] = *(void *)(v1 + 16);
  void v15[3] = v8;
  v15[1] = *(void *)(v1 + 24);
  char v9 = *(unsigned char *)(v1 + 40);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v19 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v18 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v17 = v9;
    char v16 = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

Swift::Int ParticleEmitterComponent.ParticleEmitter.ImageSequence.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v27 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v26 = 1;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    char v25 = 2;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    char v24 = 3;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    char v23 = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v12 = v11;
    char v22 = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v15 = v14;
    char v20 = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v16 = v21;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    uint64_t v17 = v18;
    *(void *)(a2 + 16) = v19;
    *(void *)(a2 + 24) = v17;
    *(_DWORD *)(a2 + 32) = v12;
    *(_DWORD *)(a2 + 36) = v15;
    *(unsigned char *)(a2 + 40) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.ImageSequence.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return Hasher._finalize()();
}

float ParticleEmitterComponent.ParticleEmitter.birthRate.getter()
{
  return *(float *)v0;
}

void ParticleEmitterComponent.ParticleEmitter.birthRate.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.birthRate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.birthRateVariation.getter()
{
  return *(float *)(v0 + 4);
}

void ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.birthRateVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.dampingFactor.getter()
{
  return *(float *)(v0 + 8);
}

void ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.dampingFactor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.acceleration.getter()
{
  return v0[1];
}

void ParticleEmitterComponent.ParticleEmitter.acceleration.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.acceleration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.spreadingAngle.getter()
{
  return *(float *)(v0 + 32);
}

void ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter(float a1)
{
  *(float *)(v1 + 32) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.spreadingAngle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 36) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.size.getter()
{
  return *(float *)(v0 + 40);
}

void ParticleEmitterComponent.ParticleEmitter.size.setter(float a1)
{
  *(float *)(v1 + 40) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.size.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeVariation.getter()
{
  return *(float *)(v0 + 44);
}

void ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter(float a1)
{
  *(float *)(v1 + 44) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.startColorA.getter()
{
  return *(id *)(v0 + 48);
}

void ParticleEmitterComponent.ParticleEmitter.startColorA.setter(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.startColorA.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.startColorB.getter()
{
  return *(id *)(v0 + 56);
}

void ParticleEmitterComponent.ParticleEmitter.startColorB.setter(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.startColorB.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useStartColorRange.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.endColorA.getter()
{
  return *(id *)(v0 + 72);
}

void ParticleEmitterComponent.ParticleEmitter.endColorA.setter(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.endColorA.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id ParticleEmitterComponent.ParticleEmitter.endColorB.getter()
{
  return *(id *)(v0 + 80);
}

void ParticleEmitterComponent.ParticleEmitter.endColorB.setter(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.endColorB.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 88) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useEndColorRange.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 89) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.useEndColor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.billboardMode.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[7].n128_u32[0];
  unsigned __int8 v3 = v1[7].n128_u8[4];
  __n128 result = v1[6];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 ParticleEmitterComponent.ParticleEmitter.billboardMode.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  unsigned __int8 v3 = a1[1].n128_u8[4];
  __n128 result = *a1;
  v1[6] = *a1;
  v1[7].n128_u32[0] = v2;
  v1[7].n128_u8[4] = v3;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.billboardMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.mass.getter()
{
  return *(float *)(v0 + 120);
}

void ParticleEmitterComponent.ParticleEmitter.mass.setter(float a1)
{
  *(float *)(v1 + 120) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.mass.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.massVariation.getter()
{
  return *(float *)(v0 + 124);
}

void ParticleEmitterComponent.ParticleEmitter.massVariation.setter(float a1)
{
  *(float *)(v1 + 124) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.massVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.ParticleEmitter.lifeSpan.getter()
{
  return *(double *)(v0 + 128);
}

void ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter(double a1)
{
  *(double *)(v1 + 128) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.lifeSpan.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.getter()
{
  return *(double *)(v0 + 136);
}

void ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter(double a1)
{
  *(double *)(v1 + 136) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angle.getter()
{
  return *(float *)(v0 + 144);
}

void ParticleEmitterComponent.ParticleEmitter.angle.setter(float a1)
{
  *(float *)(v1 + 144) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angleVariation.getter()
{
  return *(float *)(v0 + 148);
}

void ParticleEmitterComponent.ParticleEmitter.angleVariation.setter(float a1)
{
  *(float *)(v1 + 148) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angleVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angularSpeed.getter()
{
  return *(float *)(v0 + 152);
}

void ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter(float a1)
{
  *(float *)(v1 + 152) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angularSpeed.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.getter()
{
  return *(float *)(v0 + 156);
}

void ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter(float a1)
{
  *(float *)(v1 + 156) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.bounce.getter()
{
  return *(float *)(v0 + 160);
}

void ParticleEmitterComponent.ParticleEmitter.bounce.setter(float a1)
{
  *(float *)(v1 + 160) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.bounce.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.friction.getter()
{
  return *(float *)(v0 + 164);
}

void ParticleEmitterComponent.ParticleEmitter.friction.setter(float a1)
{
  *(float *)(v1 + 164) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.friction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.opacityCurve.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 168);
}

unsigned char *ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 168) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.opacityCurve.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.getter()
{
  return *(float *)(v0 + 172);
}

void ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter(float a1)
{
  *(float *)(v1 + 172) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.getter()
{
  return *(float *)(v0 + 176);
}

void ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter(float a1)
{
  *(float *)(v1 + 176) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.getter()
{
  return *(float *)(v0 + 180);
}

void ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter(float a1)
{
  *(float *)(v1 + 180) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseStrength.getter()
{
  return *(float *)(v0 + 184);
}

void ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter(float a1)
{
  *(float *)(v1 + 184) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseStrength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseScale.getter()
{
  return *(float *)(v0 + 188);
}

void ParticleEmitterComponent.ParticleEmitter.noiseScale.setter(float a1)
{
  *(float *)(v1 + 188) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseScale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.getter()
{
  return *(float *)(v0 + 192);
}

void ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter(float a1)
{
  *(float *)(v1 + 192) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.attractionStrength.getter()
{
  return *(float *)(v0 + 196);
}

void ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter(float a1)
{
  *(float *)(v1 + 196) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.attractionStrength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.attractionCenter.getter()
{
  return v0[13];
}

void ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter(__n128 a1)
{
  v1[13] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.attractionCenter.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.vortexStrength.getter()
{
  return *(float *)(v0 + 224);
}

void ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter(float a1)
{
  *(float *)(v1 + 224) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.vortexStrength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.vortexDirection.getter()
{
  return v0[15];
}

void ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter(__n128 a1)
{
  v1[15] = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.vortexDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 256);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 256) = result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ParticleEmitterComponent.ParticleEmitter.stretchFactor.getter()
{
  return *(float *)(v0 + 260);
}

void ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter(float a1)
{
  *(float *)(v1 + 260) = a1;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.stretchFactor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.sortOrder.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 264);
}

unsigned char *ParticleEmitterComponent.ParticleEmitter.sortOrder.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 264) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.sortOrder.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void ParticleEmitterComponent.ParticleEmitter.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 265);
}

unsigned char *ParticleEmitterComponent.ParticleEmitter.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 265) = *result;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.blendMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.getter()
{
  return swift_retain();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 272) = a1;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.image.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ParticleEmitterComponent.ParticleEmitter.imageSequence.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 312);
  char v3 = *(unsigned char *)(v1 + 320);
  __n128 result = *(__n128 *)(v1 + 280);
  long long v5 = *(_OWORD *)(v1 + 296);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v3;
  return result;
}

__n128 ParticleEmitterComponent.ParticleEmitter.imageSequence.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 280) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 296) = v5;
  *(void *)(v1 + 312) = v2;
  *(unsigned char *)(v1 + 320) = v3;
  return result;
}

uint64_t (*ParticleEmitterComponent.ParticleEmitter.imageSequence.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)@<S0>(uint64_t a1@<X8>)
{
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  CGColorRef v3 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  CGColorRef v4 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  CGColorRef v5 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  REVFXEmitterComponentGetBirthRate();
  int v109 = v6;
  REVFXEmitterComponentGetBirthRateVariation();
  int v8 = v7;
  REVFXEmitterComponentGetDampingFactor();
  int v108 = v9;
  REVFXEmitterComponentGetAcceleration();
  long long v113 = v10;
  REVFXEmitterComponentGetSpreadingAngle();
  int v12 = v11;
  REVFXEmitterComponentGetParticleSize();
  int v107 = v13;
  REVFXEmitterComponentGetParticleSizeVariation();
  int v106 = v14;
  int BillboardMode = REVFXEmitterComponentGetBillboardMode();
  if (BillboardMode == 1)
  {
    REVFXEmitterComponentGetBillboardAxis();
    long long v104 = v17;
    REVFXEmitterComponentGetBillboardAxisVariation();
    int v112 = v18;
    char v110 = 0;
    uint64_t v16 = *((void *)&v104 + 1);
    uint64_t v111 = v104;
  }
  else
  {
    int v112 = 0;
    if (BillboardMode == 2)
    {
      uint64_t v16 = 0;
      uint64_t v111 = 1;
    }
    else
    {
      uint64_t v111 = 0;
      uint64_t v16 = 0;
    }
    char v110 = 1;
  }
  REVFXEmitterComponentGetParticleMass();
  int v20 = v19;
  REVFXEmitterComponentGetParticleMassVariation();
  int v22 = v21;
  REVFXEmitterComponentGetParticleLifeSpan();
  uint64_t v24 = v23;
  REVFXEmitterComponentGetParticleLifeSpanVariation();
  uint64_t v26 = v25;
  REVFXEmitterComponentGetParticleAngle();
  int v28 = v27;
  REVFXEmitterComponentGetParticleAngleVariation();
  int v30 = v29;
  REVFXEmitterComponentGetParticleAngularVelocity();
  int v105 = v31;
  REVFXEmitterComponentGetParticleAngularVelocityVariation();
  int v103 = v32;
  REVFXEmitterComponentGetParticleBounce();
  int v102 = v33;
  REVFXEmitterComponentGetParticleFriction();
  int v101 = v34;
  unsigned int OpacityOverLife = REVFXEmitterComponentGetOpacityOverLife();
  REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespan();
  int v100 = v35;
  REVFXEmitterComponentGetSizeMultiplierAtEndOfLifespanPower();
  int v99 = v36;
  REVFXEmitterComponentGetStartColorRangeA();
  uint64_t v97 = specialized SIMD4<>.cgColor.getter(v37);

  REVFXEmitterComponentGetStartColorRangeB();
  uint64_t v96 = specialized SIMD4<>.cgColor.getter(v38);

  char UseStartColorRange = REVFXEmitterComponentGetUseStartColorRange();
  REVFXEmitterComponentGetEndColorRangeA();
  uint64_t v94 = specialized SIMD4<>.cgColor.getter(v39);

  REVFXEmitterComponentGetEndColorRangeB();
  uint64_t v93 = specialized SIMD4<>.cgColor.getter(v40);

  char UseEndColorRange = REVFXEmitterComponentGetUseEndColorRange();
  char UseEndColor = REVFXEmitterComponentGetUseEndColor();
  REVFXEmitterComponentGetColorEvolutionPower();
  int v92 = v41;
  char Collisions = REVFXEmitterComponentGetCollisions();
  REVFXEmitterComponentGetNoiseStrength();
  int v90 = v42;
  REVFXEmitterComponentGetNoiseScale();
  int v88 = v43;
  REVFXEmitterComponentGetNoiseAnimationSpeed();
  int v87 = v44;
  REVFXEmitterComponentGetRadialGravityStrength();
  int v86 = v45;
  REVFXEmitterComponentGetRadialGravityCenter();
  long long v85 = v46;
  REVFXEmitterComponentGetVortexStrength();
  int v83 = v47;
  REVFXEmitterComponentGetVortexDirection();
  long long v82 = v48;
  char IsLightingEnabled = REVFXEmitterComponentGetIsLightingEnabled();
  REVFXEmitterComponentGetStretchFactor();
  float v80 = v49;
  unsigned int SortOrder = REVFXEmitterComponentGetSortOrder();
  int BlendMode = REVFXEmitterComponentGetBlendMode();
  uint64_t ParticleImage = REVFXEmitterComponentGetParticleImage();
  if (ParticleImage)
  {
    uint64_t v52 = ParticleImage;
    type metadata accessor for TextureResource();
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v52;
    *(void *)(v53 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    uint64_t v53 = 0;
  }
  if (REVFXEmitterComponentGetIsAnimated())
  {
    uint64_t RowCount = REVFXEmitterComponentGetRowCount();
    uint64_t ColumnCount = REVFXEmitterComponentGetColumnCount();
    uint64_t InitialFrame = REVFXEmitterComponentGetInitialFrame();
    uint64_t InitialFrameVariation = REVFXEmitterComponentGetInitialFrameVariation();
    REVFXEmitterComponentGetFrameRate();
    uint64_t v78 = v24;
    unsigned int v59 = v58;
    REVFXEmitterComponentGetFrameRateVariation();
    int v77 = v30;
    int v60 = v28;
    uint64_t v61 = v26;
    int v62 = v22;
    int v63 = v20;
    int v64 = v12;
    int v65 = v8;
    unsigned int v67 = v66;
    unsigned int AnimationRepeatMode = REVFXEmitterComponentGetAnimationRepeatMode();
    if (AnimationRepeatMode >= 3) {
      char v69 = 1;
    }
    else {
      char v69 = AnimationRepeatMode;
    }
    uint64_t v70 = v59;
    uint64_t v24 = v78;
    uint64_t v71 = v67;
    int v8 = v65;
    int v12 = v64;
    int v20 = v63;
    int v22 = v62;
    uint64_t v26 = v61;
    int v28 = v60;
    int v30 = v77;
    uint64_t v72 = v70 | (v71 << 32);
  }
  else
  {
    uint64_t RowCount = 0;
    uint64_t ColumnCount = 0;
    uint64_t InitialFrame = 0;
    uint64_t InitialFrameVariation = 0;
    uint64_t v72 = 0;
    char v69 = 3;
  }
  char v73 = SortOrder;
  if (SortOrder >= 7) {
    char v73 = 0;
  }
  if (OpacityOverLife >= 7) {
    char v74 = 6;
  }
  else {
    char v74 = OpacityOverLife;
  }
  *(_DWORD *)a1 = v109;
  *(_DWORD *)(a1 + 4) = v8;
  char v75 = BlendMode == 1;
  *(_DWORD *)(a1 + 8) = v108;
  if (BlendMode == 2) {
    char v75 = 2;
  }
  *(_OWORD *)(a1 + 16) = v113;
  *(_DWORD *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 36) = Collisions;
  *(_DWORD *)(a1 + 40) = v107;
  *(_DWORD *)(a1 + 44) = v106;
  *(void *)(a1 + 48) = v97;
  *(void *)(a1 + 56) = v96;
  *(unsigned char *)(a1 + 64) = UseStartColorRange;
  *(void *)(a1 + 72) = v94;
  *(void *)(a1 + 80) = v93;
  *(unsigned char *)(a1 + 88) = UseEndColorRange;
  *(unsigned char *)(a1 + 89) = UseEndColor;
  *(void *)(a1 + 96) = v111;
  *(void *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 112) = v112;
  *(unsigned char *)(a1 + 116) = v110;
  *(_DWORD *)(a1 + 120) = v20;
  *(_DWORD *)(a1 + 124) = v22;
  *(void *)(a1 + 128) = v24;
  *(void *)(a1 + 136) = v26;
  *(_DWORD *)(a1 + 144) = v28;
  *(_DWORD *)(a1 + 148) = v30;
  *(_DWORD *)(a1 + 152) = v105;
  *(_DWORD *)(a1 + 156) = v103;
  *(_DWORD *)(a1 + 160) = v102;
  *(_DWORD *)(a1 + 164) = v101;
  *(unsigned char *)(a1 + 168) = v74;
  *(_DWORD *)(a1 + 172) = v100;
  *(_DWORD *)(a1 + 176) = v99;
  *(_DWORD *)(a1 + 180) = v92;
  *(_DWORD *)(a1 + 184) = v90;
  *(_DWORD *)(a1 + 188) = v88;
  *(_DWORD *)(a1 + 192) = v87;
  *(_DWORD *)(a1 + 196) = v86;
  *(_OWORD *)(a1 + 208) = v85;
  *(_DWORD *)(a1 + 224) = v83;
  *(_OWORD *)(a1 + 240) = v82;
  *(unsigned char *)(a1 + 256) = IsLightingEnabled;
  float result = v80;
  *(float *)(a1 + 260) = v80;
  *(unsigned char *)(a1 + 264) = v73;
  *(unsigned char *)(a1 + 265) = v75;
  *(void *)(a1 + 272) = v53;
  *(void *)(a1 + 280) = RowCount;
  *(void *)(a1 + 288) = ColumnCount;
  *(void *)(a1 + 296) = InitialFrame;
  *(void *)(a1 + 304) = InitialFrameVariation;
  *(void *)(a1 + 312) = v72;
  *(unsigned char *)(a1 + 320) = v69;
  return result;
}

Swift::Void __swiftcall ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(Swift::OpaquePointer _, Swift::Bool isSpawn)
{
  uint64_t v16 = *(void **)(v2 + 48);
  int v12 = *(void **)(v2 + 56);
  int v13 = *(void **)(v2 + 72);
  int v15 = *(void **)(v2 + 80);
  unsigned int v14 = *(unsigned __int8 *)(v2 + 89);
  uint64_t v5 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 104);
  int v6 = *(_DWORD *)(v2 + 112);
  int v7 = *(unsigned __int8 *)(v2 + 116);
  int v8 = *(unsigned __int8 *)(v2 + 320);
  REVFXEmitterComponentSetBirthRate();
  REVFXEmitterComponentSetBirthRateVariation();
  REVFXEmitterComponentSetDampingFactor();
  REVFXEmitterComponentSetAcceleration();
  REVFXEmitterComponentSetSpreadingAngle();
  REVFXEmitterComponentSetParticleSize();
  REVFXEmitterComponentSetParticleSizeVariation();
  if (v7 == 1)
  {
    if (v4 | v5 || v6) {
      Swift::Bool v10 = isSpawn;
    }
    else {
      Swift::Bool v10 = isSpawn;
    }
    REVFXEmitterComponentSetBillboardMode();
    int v11 = v13;
  }
  else
  {
    REVFXEmitterComponentSetBillboardMode();
    REVFXEmitterComponentSetBillboardAxis();
    REVFXEmitterComponentSetBillboardAxisVariation();
    int v11 = v13;
    Swift::Bool v10 = isSpawn;
  }
  REVFXEmitterComponentSetParticleMass();
  REVFXEmitterComponentSetParticleMassVariation();
  REVFXEmitterComponentSetParticleLifeSpan();
  REVFXEmitterComponentSetParticleLifeSpanVariation();
  REVFXEmitterComponentSetParticleAngle();
  REVFXEmitterComponentSetParticleAngleVariation();
  REVFXEmitterComponentSetParticleAngularVelocity();
  REVFXEmitterComponentSetParticleAngularVelocityVariation();
  REVFXEmitterComponentSetParticleBounce();
  REVFXEmitterComponentSetParticleFriction();
  REVFXEmitterComponentSetOpacityOverLife();
  REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespan();
  REVFXEmitterComponentSetSizeMultiplierAtEndOfLifespanPower();
  REVFXEmitterComponentSetColorEvolutionPower();
  REVFXEmitterComponentSetCollision();
  REVFXEmitterComponentSetNoiseStrength();
  REVFXEmitterComponentSetNoiseScale();
  REVFXEmitterComponentSetNoiseAnimationSpeed();
  REVFXEmitterComponentSetRadialGravityStrength();
  REVFXEmitterComponentSetRadialGravityCenter();
  REVFXEmitterComponentSetVortexStrength();
  REVFXEmitterComponentSetVortexDirection();
  REVFXEmitterComponentSetIsLightingEnabled();
  REVFXEmitterComponentSetStretchFactor();
  REVFXEmitterComponentSetIsAnimated();
  REVFXEmitterComponentSetSortOrder();
  REVFXEmitterComponentSetBlendMode();
  REVFXEmitterComponentSetParticleImage();
  if (v8 != 3)
  {
    REVFXEmitterComponentSetRowCount();
    REVFXEmitterComponentSetColumnCount();
    REVFXEmitterComponentSetInitialFrame();
    REVFXEmitterComponentSetInitialFrameVariation();
    REVFXEmitterComponentSetFrameRate();
    REVFXEmitterComponentSetFrameRateVariation();
    REVFXEmitterComponentSetAnimationRepeatMode();
  }
  specialized SIMD4<>.init(_:)((CGColorRef)v16);
  REVFXEmitterComponentSetStartColorRangeA();
  specialized SIMD4<>.init(_:)((CGColorRef)v12);
  REVFXEmitterComponentSetStartColorRangeB();
  REVFXEmitterComponentSetUseStartColorRange();
  specialized SIMD4<>.init(_:)((CGColorRef)v11);
  REVFXEmitterComponentSetEndColorRangeA();
  specialized SIMD4<>.init(_:)((CGColorRef)v15);
  REVFXEmitterComponentSetEndColorRangeB();
  REVFXEmitterComponentSetUseEndColorRange();

  MEMORY[0x270F216B0](_._rawValue, v10, v14);
}

unint64_t ParticleEmitterComponent.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x61727544656C6469;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x754470756D726177;
      break;
    case 5:
      unint64_t result = 0x6F4C646C756F6873;
      break;
    case 6:
      unint64_t result = 0x5372657474696D65;
      break;
    case 7:
      unint64_t result = 0x636F4C6874726962;
      break;
    case 8:
      unint64_t result = 0x7269446874726962;
      break;
    case 10:
      unint64_t result = 0x6465657073;
      break;
    case 11:
      unint64_t result = 0x7261566465657073;
      break;
    case 12:
    case 17:
    case 27:
    case 35:
      unint64_t result = 0xD000000000000011;
      break;
    case 13:
      unint64_t result = 0x6D416C6169646172;
      break;
    case 15:
      unint64_t result = 0x63634F6E77617073;
      break;
    case 16:
      unint64_t result = 0xD000000000000013;
      break;
    case 18:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 19:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
    case 21:
    case 30:
      unint64_t result = 0x6974616C756D6973;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    case 23:
      unint64_t result = 0xD000000000000014;
      break;
    case 24:
      unint64_t result = 0x4374726174736572;
      break;
    case 25:
      unint64_t result = 0xD000000000000015;
      break;
    case 26:
      unint64_t result = 0x697474696D457369;
      break;
    case 28:
      unint64_t result = 0x756F437473727562;
      break;
    case 29:
      unint64_t result = 0xD000000000000013;
      break;
    case 31:
      unint64_t result = 0xD000000000000012;
      break;
    case 32:
      unint64_t result = 0xD000000000000016;
      break;
    case 33:
      unint64_t result = 0x74696D456E69616DLL;
      break;
    case 34:
      unint64_t result = 0x4564656E77617073;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.CodingKeys()
{
  return ParticleEmitterComponent.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 36;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v41 = *(void *)(v1 + 16);
  uint64_t v42 = v7;
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v38 = *(void *)(v1 + 32);
  uint64_t v39 = v8;
  v46[102] = *(unsigned __int8 *)(v1 + 40);
  int v40 = *(unsigned __int8 *)(v1 + 41);
  uint64_t v9 = *(void *)(v1 + 56);
  *(void *)&long long v34 = *(void *)(v1 + 48);
  *((void *)&v34 + 1) = v9;
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v36 = *(void *)(v1 + 72);
  uint64_t v37 = v10;
  int v35 = *(unsigned __int8 *)(v1 + 80);
  int v33 = *(unsigned __int8 *)(v1 + 81);
  long long v32 = *(_OWORD *)(v1 + 96);
  int v31 = *(_DWORD *)(v1 + 112);
  long long v30 = *(_OWORD *)(v1 + 128);
  int v29 = *(unsigned __int8 *)(v1 + 152);
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 169);
  v16[3] = *(unsigned __int8 *)(v1 + 168);
  int v17 = v9;
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 171);
  int v18 = *(unsigned __int8 *)(v1 + 170);
  int v19 = v9;
  int v20 = *(unsigned __int8 *)(v1 + 172);
  uint64_t v21 = *(void *)(v1 + 176);
  LODWORD(v9) = *(unsigned __int8 *)(v1 + 185);
  int v22 = *(unsigned __int8 *)(v1 + 184);
  int v23 = v9;
  uint64_t v11 = *(void *)(v1 + 200);
  uint64_t v24 = *(void *)(v1 + 192);
  uint64_t v25 = v11;
  uint64_t v12 = *(void *)(v1 + 224);
  uint64_t v26 = *(void *)(v1 + 208);
  uint64_t v27 = v12;
  uint64_t v28 = *(void *)(v1 + 232);
  memcpy(v45, (const void *)(v1 + 240), sizeof(v45));
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v46);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v44[0]) = 0;
  uint64_t v13 = v43;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  char v14 = v40;
  LOBYTE(v44[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v14;
  char v47 = 6;
  lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44[0] = v34;
  *(void *)&v44[1] = v37;
  *((void *)&v44[1] + 1) = v36;
  LOBYTE(v44[2]) = v35;
  char v47 = 7;
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = v33;
  char v47 = 8;
  lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44[0] = v32;
  char v47 = 9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t v43 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 10;
  uint64_t v42 = v3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 11;
  KeyedEncodingContainer.encode(_:forKey:)();
  v44[0] = v30;
  char v47 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 13;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 14;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v29;
  char v47 = 15;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 16;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 17;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 18;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 19;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v17;
  char v47 = 20;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = v18;
  char v47 = 21;
  lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 22;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = v20;
  char v47 = 23;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v44[0]) = 24;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 25;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 26;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 27;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 28;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 29;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v44[0]) = 30;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(void *)&v44[0] = v27;
  char v47 = 31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CollisionPlane_v1]);
  lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type [CollisionPlane_v1] and conformance <A> [A], &demangling cache variable for type metadata for [CollisionPlane_v1], (void (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&v44[0] = v28;
  char v47 = 32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CollisionPlane_v1>);
  lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type Set<CollisionPlane_v1> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<CollisionPlane_v1>, (void (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  memcpy(v44, v45, 0x141uLL);
  char v47 = 33;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v46, (uint64_t)v44);
  char v47 = 34;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v44[0]) = 35;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v42);
}

uint64_t ParticleEmitterComponent.init(from:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  *(void *)&long long v58 = v1;
  uint64_t v70 = v2;
  uint64_t v55 = v3;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.CodingKeys>);
  uint64_t v54 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v67[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)v67 + 8) = 0u;
  *(_OWORD *)((char *)&v67[1] + 8) = 0u;
  WORD4(v67[2]) = 257;
  memset(&v67[3], 0, 32);
  LOWORD(v67[5]) = 513;
  v67[6] = xmmword_22833D9B0;
  *(void *)&v67[7] = 1056964608;
  long long v57 = *(_OWORD *)&zmmword_22830EC90[16];
  v67[8] = *(_OWORD *)&zmmword_22830EC90[16];
  *(void *)&v67[9] = 0x3E80000040C90FDALL;
  BYTE8(v67[9]) = 2;
  HIDWORD(v67[9]) = 1065353216;
  *(void *)&v67[10] = 0;
  DWORD2(v67[10]) = 0x10000;
  BYTE12(v67[10]) = 1;
  *(void *)&v67[11] = 0;
  WORD4(v67[11]) = 256;
  v67[12] = xmmword_22833D9C0;
  *(void *)&v67[13] = 0;
  DWORD2(v67[13]) = 1065353216;
  *(void *)&v67[14] = MEMORY[0x263F8EE78];
  *((void *)&v67[14] + 1) = MEMORY[0x263F8EE88];
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  CGColorRef v7 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  CGColorRef v8 = CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0);
  CGColorRef v9 = CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0);
  *(void *)&v68[0] = 1120403456;
  DWORD2(v68[0]) = 0;
  memset(&v68[1], 0, 21);
  *((void *)&v68[2] + 1) = 1017370378;
  *(void *)&v68[3] = GenericRGB;
  *((void *)&v68[3] + 1) = v7;
  LOBYTE(v68[4]) = 0;
  *((void *)&v68[4] + 1) = v8;
  *(void *)&v68[5] = v9;
  WORD4(v68[5]) = 256;
  uint64_t v10 = v70;
  v68[6] = xmmword_22830EC70;
  LODWORD(v68[7]) = 0;
  BYTE4(v68[7]) = 1;
  *((void *)&v68[7] + 1) = 1065353216;
  v68[8] = xmmword_22833D9D0;
  v68[9] = 0uLL;
  *(void *)&v68[10] = 1050253722;
  BYTE8(v68[10]) = 3;
  *(_OWORD *)((char *)&v68[10] + 12) = xmmword_22833D9E0;
  *(void *)((char *)&v68[11] + 12) = 1065353216;
  DWORD1(v68[12]) = 0;
  v68[13] = xmmword_22833D9F0;
  LODWORD(v68[14]) = 0;
  v68[15] = v57;
  LOBYTE(v68[16]) = 0;
  DWORD1(v68[16]) = 0;
  WORD4(v68[16]) = 0;
  memset(&v68[17], 0, 48);
  LOBYTE(v68[20]) = 3;
  memcpy(&v67[15], v68, 0x141uLL);
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_((uint64_t)v69);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v69, (uint64_t)&v67[36]);
  BYTE1(v67[56]) = 0;
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys();
  *(void *)&long long v57 = v5;
  uint64_t v11 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {
    uint64_t v38 = (uint64_t)v10;
  }
  else
  {
    uint64_t v12 = v54;
    uint64_t v13 = v55;
    LOBYTE(v66[0]) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)&long long v58 = &v67[15];
    *(void *)&v67[0] = v14;
    LOBYTE(v66[0]) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)&v67[0] + 1) = v15;
    LOBYTE(v66[0]) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)&v67[1] = v16;
    LOBYTE(v66[0]) = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)&v67[1] + 1) = v17;
    LOBYTE(v66[0]) = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)&v67[2] = v18;
    LOBYTE(v66[0]) = 5;
    BYTE8(v67[2]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v61[0] = 6;
    lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE9(v67[2]) = v66[0];
    v61[0] = 7;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v67[3] = v66[0];
    unsigned char v67[4] = v66[1];
    LOBYTE(v67[5]) = v66[2];
    v61[0] = 8;
    lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE1(v67[5]) = v66[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v61[0] = 9;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v67[6] = v66[0];
    LOBYTE(v66[0]) = 10;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v67[7]) = v20;
    LOBYTE(v66[0]) = 11;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v67[7]) = v21;
    v61[0] = 12;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v67[8] = v66[0];
    LOBYTE(v66[0]) = 13;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v67[9]) = v22;
    LOBYTE(v66[0]) = 14;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v67[9]) = v23;
    v61[0] = 15;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE8(v67[9]) = v66[0];
    LOBYTE(v66[0]) = 16;
    KeyedDecodingContainer.decode(_:forKey:)();
    HIDWORD(v67[9]) = v24;
    LOBYTE(v66[0]) = 17;
    KeyedDecodingContainer.decode(_:forKey:)();
    LODWORD(v67[10]) = v25;
    LOBYTE(v66[0]) = 18;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD1(v67[10]) = v26;
    LOBYTE(v66[0]) = 19;
    BYTE8(v67[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v61[0] = 20;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE9(v67[10]) = v66[0];
    v61[0] = 21;
    lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE10(v67[10]) = v66[0];
    LOBYTE(v66[0]) = 22;
    BYTE11(v67[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v61[0] = 23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BYTE12(v67[10]) = v66[0];
    LOBYTE(v66[0]) = 24;
    *(void *)&v67[11] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v66[0]) = 25;
    BYTE8(v67[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v66[0]) = 26;
    BYTE9(v67[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v66[0]) = 27;
    *(void *)&v67[12] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v66[0]) = 28;
    *((void *)&v67[12] + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v66[0]) = 29;
    *(void *)&v67[13] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v66[0]) = 30;
    KeyedDecodingContainer.decode(_:forKey:)();
    DWORD2(v67[13]) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CollisionPlane_v1]);
    v61[0] = 31;
    lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type [CollisionPlane_v1] and conformance <A> [A], &demangling cache variable for type metadata for [CollisionPlane_v1], (void (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v67[14] = *(void *)&v66[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<CollisionPlane_v1>);
    v61[0] = 32;
    lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type Set<CollisionPlane_v1> and conformance <> Set<A>, &demangling cache variable for type metadata for Set<CollisionPlane_v1>, (void (*)(void))lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((void *)&v67[14] + 1) = *(void *)&v66[0];
    v64[335] = 33;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)v68);
    memcpy((void *)v58, v65, 0x141uLL);
    v63[335] = 34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v64, (uint64_t)v63);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v63, (uint64_t)&v67[36]);
    char v62 = 35;
    char v28 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(void, uint64_t))(v12 + 8))(v57, v56);
    LODWORD(v57) = v28 & 1;
    BYTE1(v67[56]) = v28 & 1;
    long long v43 = v67[1];
    long long v44 = v67[0];
    uint64_t v29 = *(void *)&v67[2];
    int v42 = BYTE8(v67[2]);
    LOBYTE(v12) = BYTE9(v67[2]);
    long long v41 = v67[3];
    long long v30 = v67[4];
    int v40 = LOBYTE(v67[5]);
    char v31 = BYTE1(v67[5]);
    long long v39 = v67[6];
    long long v45 = v67[8];
    int v46 = BYTE8(v67[9]);
    int v32 = DWORD1(v67[10]);
    char v33 = BYTE8(v67[10]);
    LODWORD(v56) = BYTE9(v67[10]);
    int v53 = BYTE11(v67[10]);
    LODWORD(v54) = BYTE10(v67[10]);
    int v52 = BYTE12(v67[10]);
    uint64_t v51 = *(void *)&v67[11];
    int v49 = BYTE9(v67[11]);
    int v50 = BYTE8(v67[11]);
    long long v48 = v67[12];
    uint64_t v47 = *(void *)&v67[13];
    int v34 = DWORD2(v67[13]);
    memcpy(v59, (const void *)v58, sizeof(v59));
    long long v58 = v67[14];
    uint64_t v35 = *(void *)&v67[7];
    uint64_t v36 = *(void *)&v67[9];
    uint64_t v37 = *(void *)((char *)&v67[9] + 12);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)&v67[36], (uint64_t)v60);
    *(_OWORD *)uint64_t v61 = v44;
    *(_OWORD *)&v61[16] = v43;
    *(void *)&v61[32] = v29;
    v61[40] = v42;
    v61[41] = v12;
    *(_OWORD *)&v61[48] = v41;
    *(_OWORD *)&v61[64] = v30;
    v61[80] = v40;
    v61[81] = v31;
    *(_OWORD *)&v61[96] = v39;
    *(void *)&v61[112] = v35;
    *(_OWORD *)&v61[128] = v45;
    *(void *)&v61[144] = v36;
    v61[152] = v46;
    *(void *)&v61[156] = v37;
    *(_DWORD *)&v61[164] = v32;
    v61[168] = v33;
    v61[169] = v56;
    v61[170] = v54;
    v61[171] = v53;
    v61[172] = v52;
    *(void *)&v61[176] = v51;
    v61[184] = v50;
    v61[185] = v49;
    *(_OWORD *)&v61[192] = v48;
    *(void *)&v61[208] = v47;
    *(_DWORD *)&v61[216] = v34;
    *(_OWORD *)&v61[224] = v58;
    memcpy(&v61[240], v59, 0x141uLL);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v60, (uint64_t)&v61[576]);
    v61[897] = v57;
    memcpy(v13, v61, 0x382uLL);
    outlined retain of ParticleEmitterComponent((uint64_t)v61);
    uint64_t v38 = (uint64_t)v70;
  }
  __swift_destroy_boxed_opaque_existential_1(v38);
  memcpy(v66, v67, 0x382uLL);
  return outlined release of ParticleEmitterComponent((uint64_t)v66);
}

void *static ParticleEmitterComponent.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  ParticleEmitterComponent.init()((uint64_t)v100);
  REVFXEmitterComponentGetEmissionDuration();
  uint64_t v94 = v2;
  v100[0] = v2;
  REVFXEmitterComponentGetEmissionDurationVariation();
  uint64_t v93 = v3;
  v100[1] = v3;
  REVFXEmitterComponentGetIdleDuration();
  uint64_t v92 = v4;
  v100[2] = v4;
  REVFXEmitterComponentGetIdleDurationVariation();
  uint64_t v91 = v5;
  v100[3] = v5;
  REVFXEmitterComponentGetWarmupDuration();
  uint64_t v90 = v6;
  v100[4] = v6;
  char Loops = REVFXEmitterComponentGetLoops();
  char v101 = Loops;
  unsigned int EmitterShape = REVFXEmitterComponentGetEmitterShape();
  if (EmitterShape >= 7) {
    char v9 = 0;
  }
  else {
    char v9 = 0x4060105020300uLL >> (8 * EmitterShape);
  }
  char v102 = v9;
  REVFXEmitterComponentGetRadialAmount();
  unsigned int v89 = v10;
  unsigned int v111 = v10;
  REVFXEmitterComponentGetTorusInnerRadius();
  unsigned int v12 = v11;
  unsigned int v112 = v11;
  ParticleEmitterComponent.BirthLocation.init(_:)((uint64_t)v97);
  uint64_t v14 = *((void *)&v97[0] + 1);
  uint64_t v13 = *(void *)&v97[0];
  uint64_t v16 = *((void *)&v97[1] + 1);
  uint64_t v15 = *(void *)&v97[1];
  char v17 = v97[2];
  long long v103 = v97[0];
  long long v104 = v97[1];
  char v105 = v97[2];
  unsigned int BirthDirection = REVFXEmitterComponentGetBirthDirection();
  if (BirthDirection >= 3) {
    char v19 = 1;
  }
  else {
    char v19 = BirthDirection;
  }
  char v88 = v19;
  char v106 = v19;
  REVFXEmitterComponentGetEmitterShapeSize();
  long long v87 = v20;
  long long v107 = v20;
  REVFXEmitterComponentGetParticleSpeed();
  unsigned int v22 = v21;
  unsigned int v108 = v21;
  REVFXEmitterComponentGetParticleSpeedVariation();
  unsigned int v24 = v23;
  unsigned int v109 = v23;
  REVFXEmitterComponentGetEmissionDirection();
  long long v84 = v25;
  long long v110 = v25;
  char IsLocalSimulationSpace = REVFXEmitterComponentGetIsLocalSimulationSpace();
  char v85 = IsLocalSimulationSpace ^ 1;
  char v86 = IsLocalSimulationSpace;
  char v119 = IsLocalSimulationSpace ^ 1;
  char v120 = IsLocalSimulationSpace;
  char v83 = REVFXEmitterComponentGetIsLocalFields() ^ 1;
  char v121 = v83;
  uint64_t RestartCount = REVFXEmitterComponentGetRestartCount();
  uint64_t v122 = RestartCount;
  char v123 = 0;
  char IsEmitting = REVFXEmitterComponentGetIsEmitting();
  char v124 = IsEmitting;
  uint64_t BurstCount = REVFXEmitterComponentGetBurstCount();
  uint64_t v126 = BurstCount;
  uint64_t BurstCountVariation = REVFXEmitterComponentGetBurstCountVariation();
  uint64_t v127 = BurstCountVariation;
  uint64_t BurstRestartCount = REVFXEmitterComponentGetBurstRestartCount();
  uint64_t v125 = BurstRestartCount;
  REVFXEmitterComponentGetSimulationRate();
  float v28 = fminf(v27, 2.0);
  if (v28 < 0.0) {
    float v29 = 0.0;
  }
  else {
    float v29 = v28;
  }
  float v128 = v29;
  REVFXEmitterComponentGetSpawnVelocityFactor();
  int v31 = v30;
  int v114 = v30;
  REVFXEmitterComponentGetSpawnSpreadFactor();
  unsigned int v33 = v32;
  unsigned int v115 = v32;
  REVFXEmitterComponentGetSpawnSpreadFactorVariation();
  unsigned int v35 = v34;
  unsigned int v116 = v34;
  char SpawnInheritParentColor = REVFXEmitterComponentGetSpawnInheritParentColor();
  char v117 = SpawnInheritParentColor;
  unsigned int SpawnOccasion = REVFXEmitterComponentGetSpawnOccasion();
  unsigned int v37 = 0x3010200u >> (8 * SpawnOccasion);
  if (SpawnOccasion >= 4) {
    LOBYTE(v37) = 0;
  }
  char v76 = v37;
  char v113 = v37;
  int SimulationState = REVFXEmitterComponentGetSimulationState();
  char v39 = SimulationState == 1;
  if (SimulationState == 2) {
    char v39 = 2;
  }
  char v75 = v39;
  char v118 = v39;
  int IsSpawningEnabled = REVFXEmitterComponentGetIsSpawningEnabled();
  v131[321] = IsSpawningEnabled;
  id v40 = (id)REVFXEmitterComponentGetCollisionPlanes();
  if (v40)
  {
    long long v41 = v40;
    uint64_t v71 = v16;
    uint64_t v73 = v15;
    type metadata accessor for NSValue();
    unint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v72 = a1;
      if (v43) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v72 = a1;
      if (v43)
      {
LABEL_17:
        __dst[0] = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43 & ~(v43 >> 63), 0);
        if (v43 < 0) {
          __break(1u);
        }
        char v69 = v17;
        uint64_t v70 = v13;
        uint64_t v44 = 0;
        uint64_t v45 = __dst[0];
        do
        {
          if ((v42 & 0xC000000000000001) != 0) {
            id v46 = (id)MEMORY[0x22A689930](v44, v42);
          }
          else {
            id v46 = *(id *)(v42 + 8 * v44 + 32);
          }
          uint64_t v47 = v46;
          memset(v97, 0, 80);
          objc_msgSend(v46, sel_getValue_size_, v97, 80, v65, v66, v67, v68);

          long long v48 = v97[0];
          long long v49 = v97[1];
          long long v50 = v97[2];
          long long v51 = v97[3];
          long long v52 = v97[4];
          __dst[0] = v45;
          unint64_t v54 = *(void *)(v45 + 16);
          unint64_t v53 = *(void *)(v45 + 24);
          if (v54 >= v53 >> 1)
          {
            long long v67 = v97[2];
            long long v68 = v97[1];
            long long v65 = v97[4];
            long long v66 = v97[3];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
            long long v52 = v65;
            long long v51 = v66;
            long long v50 = v67;
            long long v49 = v68;
            uint64_t v45 = __dst[0];
          }
          *(void *)(v45 + 16) = v54 + 1;
          uint64_t v55 = (_OWORD *)(v45 + 80 * v54);
          v55[2] = v48;
          ++v44;
          v55[3] = v49;
          v55[4] = v50;
          v55[5] = v51;
          v55[6] = v52;
        }
        while (v43 != v44);
        swift_bridgeObjectRelease();
        a1 = v72;
        uint64_t v13 = v70;
        char v17 = v69;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v45 = MEMORY[0x263F8EE78];
LABEL_28:
    uint64_t v56 = v129;
    *(void *)&long long v129 = v45;
    if (*(void *)(v45 + 16) < *(void *)(v56 + 16))
    {
      char v57 = v17;
      uint64_t v58 = swift_bridgeObjectRetain();
      uint64_t v59 = specialized Set.init<A>(_:)(v58);
      swift_bridgeObjectRelease();
      uint64_t v60 = swift_bridgeObjectRetain();
      uint64_t v61 = specialized Set.init<A>(_:)(v60);
      swift_bridgeObjectRelease();
      if (*(void *)(v61 + 16) <= *(void *)(v59 + 16) >> 3)
      {
        *(void *)&v97[0] = v59;
        specialized Set._subtract<A>(_:)(v61);
        swift_bridgeObjectRelease();
        uint64_t v62 = *(void *)&v97[0];
      }
      else
      {
        uint64_t v62 = specialized _NativeSet.subtracting<A>(_:)(v61, v59);
        swift_bridgeObjectRelease();
      }
      specialized Set.formUnion<A>(_:)(v62);
      char v17 = v57;
      a1 = v72;
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v73;
    uint64_t v16 = v71;
  }
  static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)((uint64_t)__src);
  memcpy(__dst, v130, 0x141uLL);
  outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)__dst);
  memcpy(v130, __src, sizeof(v130));
  if (IsSpawningEnabled)
  {
    static ParticleEmitterComponent.ParticleEmitter.fromCore(_:isSpawn:)((uint64_t)v96);
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v96, v63);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v131, (uint64_t)v97);
    outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v97, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of ParticleEmitterComponent.ParticleEmitter?);
    outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v96, (uint64_t)v131);
  }
  long long v74 = v129;
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v131, (uint64_t)v96);
  *(void *)&v97[0] = v94;
  *((void *)&v97[0] + 1) = v93;
  *(void *)&v97[1] = v92;
  *((void *)&v97[1] + 1) = v91;
  *(void *)&v97[2] = v90;
  BYTE8(v97[2]) = Loops;
  BYTE9(v97[2]) = v9;
  *(void *)&v97[3] = v13;
  *((void *)&v97[3] + 1) = v14;
  *(void *)&v97[4] = v15;
  *((void *)&v97[4] + 1) = v16;
  LOBYTE(v97[5]) = v17;
  BYTE1(v97[5]) = v88;
  v97[6] = v87;
  *(void *)&v97[7] = __PAIR64__(v24, v22);
  v97[8] = v84;
  *(void *)&v97[9] = __PAIR64__(v12, v89);
  BYTE8(v97[9]) = v76;
  HIDWORD(v97[9]) = v31;
  *(void *)&v97[10] = __PAIR64__(v35, v33);
  BYTE8(v97[10]) = SpawnInheritParentColor;
  BYTE9(v97[10]) = v75;
  BYTE10(v97[10]) = v85;
  BYTE11(v97[10]) = v86;
  BYTE12(v97[10]) = v83;
  *(void *)&v97[11] = RestartCount;
  BYTE8(v97[11]) = 0;
  BYTE9(v97[11]) = IsEmitting;
  *(void *)&v97[12] = BurstRestartCount;
  *((void *)&v97[12] + 1) = BurstCount;
  *(void *)&v97[13] = BurstCountVariation;
  *((float *)&v97[13] + 2) = v29;
  v97[14] = v74;
  memcpy(&v97[15], __src, 0x141uLL);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v96, (uint64_t)&v97[36]);
  BYTE1(v97[56]) = IsSpawningEnabled;
  return memcpy(a1, v97, 0x382uLL);
}

uint64_t ParticleEmitterComponent.__toCore(_:)(void **a1)
{
  v2._rawValue = *a1;
  int v3 = *(unsigned __int8 *)(v1 + 80);
  int v47 = *(unsigned __int8 *)(v1 + 184);
  long long v48 = *(__n128 **)(v1 + 224);
  memcpy(__dst, (const void *)(v1 + 240), sizeof(__dst));
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(v1 + 576, (uint64_t)v60);
  REVFXEmitterComponentSetEmissionDuration();
  REVFXEmitterComponentSetEmissionDurationVariation();
  REVFXEmitterComponentSetIdleDuration();
  REVFXEmitterComponentSetIdleDurationVariation();
  REVFXEmitterComponentSetWarmupDuration();
  REVFXEmitterComponentSetLoops();
  REVFXEmitterComponentSetEmitterShape();
  REVFXEmitterComponentSetRadialAmount();
  REVFXEmitterComponentSetTorusInnerRadius();
  REVFXEmitterComponentSetBirthLocation();
  if (v3 != 1) {
    REVFXEmitterComponentSetBirthLocationVertex();
  }
  uint64_t v4 = v48;
  REVFXEmitterComponentSetBirthDirection();
  REVFXEmitterComponentSetEmitterShapeSize();
  REVFXEmitterComponentSetParticleSpeed();
  REVFXEmitterComponentSetParticleSpeedVariation();
  REVFXEmitterComponentSetEmissionDirection();
  REVFXEmitterComponentSetSimulationState();
  REVFXEmitterComponentSetIsLocalSimulationSpace();
  REVFXEmitterComponentSetIsLocalFields();
  REVFXEmitterComponentSetRestartCount();
  REVFXEmitterComponentSetIsEmitting();
  REVFXEmitterComponentSetBurstCount();
  REVFXEmitterComponentSetBurstCountVariation();
  REVFXEmitterComponentSetBurstRestartCount();
  REVFXEmitterComponentSetSimulationRate();
  _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)v60);
  REVFXEmitterComponentSetIsSpawningEnabled();
  REVFXEmitterComponentSetSpawnVelocityFactor();
  REVFXEmitterComponentSetSpawnSpreadFactor();
  REVFXEmitterComponentSetSpawnSpreadFactorVariation();
  REVFXEmitterComponentSetSpawnInheritParentColor();
  REVFXEmitterComponentSetSpawnOccasion();
  if (v47) {
    REVFXEmitterComponentResetSimulation();
  }
  uint64_t v5 = v48[1].n128_i64[0];
  if (!v5)
  {
    CGColorRef v7 = (__n128 *)MEMORY[0x263F8EE78];
    uint64_t v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = v48 + 3;
  CGColorRef v7 = (__n128 *)MEMORY[0x263F8EE78];
  uint64_t v8 = v5;
  do
  {
    unint64_t v12 = v6[-1].n128_u64[0];
    if (v12)
    {
      unint64_t v13 = v6[-1].n128_u64[1];
      __n128 v53 = v6[1];
      __n128 v55 = *v6;
      __n128 v49 = v6[3];
      __n128 v51 = v6[2];
      __src[0] = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[1].n128_u64[0] + 1, 1);
        CGColorRef v7 = (__n128 *)__src[0];
      }
      unint64_t v10 = v7[1].n128_u64[0];
      unint64_t v9 = v7[1].n128_u64[1];
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        CGColorRef v7 = (__n128 *)__src[0];
      }
      v7[1].n128_u64[0] = v10 + 1;
      unsigned int v11 = &v7[5 * v10];
      v11[2].n128_u64[0] = v12;
      v11[2].n128_u64[1] = v13;
      void v11[3] = v55;
      v11[4] = v53;
      v11[5] = v51;
      v11[6] = v49;
    }
    v6 += 5;
    --v8;
  }
  while (v8);
  uint64_t v4 = v48;
  swift_bridgeObjectRelease();
  uint64_t v14 = v7[1].n128_i64[0];
  if (v14)
  {
LABEL_17:
    swift_retain();
    uint64_t v15 = v7 + 3;
    do
    {
      unint64_t v16 = v15[-1].n128_u64[0];
      double v17 = v15[-1].n128_f64[1];
      __n128 v18 = v15[2];
      __n128 v19 = v15[3];
      __n128 v20 = *v15;
      __n128 v21 = v15[1];
      v15 += 5;
      MEMORY[0x22A694D60](v2._rawValue, v16, v17, v20, v21, v18, v19);
      --v14;
    }
    while (v14);
    swift_release();
  }
LABEL_20:
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRetain();
    unsigned int v22 = v4 + 3;
    unsigned int v23 = (__n128 *)MEMORY[0x263F8EE78];
    do
    {
      if (!v22[-1].n128_u64[0])
      {
        unint64_t v27 = v22[-1].n128_u64[1];
        __n128 v54 = v22[1];
        __n128 v56 = *v22;
        __n128 v50 = v22[3];
        __n128 v52 = v22[2];
        __src[0] = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[1].n128_u64[0] + 1, 1);
          unsigned int v23 = (__n128 *)__src[0];
        }
        unint64_t v25 = v23[1].n128_u64[0];
        unint64_t v24 = v23[1].n128_u64[1];
        if (v25 >= v24 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          unsigned int v23 = (__n128 *)__src[0];
        }
        v23[1].n128_u64[0] = v25 + 1;
        int v26 = &v23[5 * v25];
        v26[2].n128_u64[0] = 0;
        v26[2].n128_u64[1] = v27;
        void v26[3] = v56;
        v26[4] = v54;
        v26[5] = v52;
        v26[6] = v50;
      }
      v22 += 5;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v28 = v23[1].n128_i64[0];
    if (!v28) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  unsigned int v23 = (__n128 *)MEMORY[0x263F8EE78];
  uint64_t v28 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v28)
  {
LABEL_32:
    swift_retain();
    float v29 = v23 + 3;
    do
    {
      double v30 = v29[-1].n128_f64[1];
      __n128 v31 = v29[2];
      __n128 v32 = v29[3];
      __n128 v33 = *v29;
      __n128 v34 = v29[1];
      v29 += 5;
      MEMORY[0x22A6942A0](v2._rawValue, v30, v33, v34, v31, v32);
      --v28;
    }
    while (v28);
    swift_release();
  }
LABEL_35:
  swift_release();
  uint64_t v35 = swift_bridgeObjectRetain();
  unint64_t v36 = specialized _NativeSet.filter(_:)(v35);
  unint64_t v37 = v36 + 56;
  uint64_t v38 = 1 << *(unsigned char *)(v36 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  uint64_t v40 = v39 & *(void *)(v36 + 56);
  int64_t v41 = (unint64_t)(v38 + 63) >> 6;
  uint64_t result = swift_retain();
  int64_t v43 = 0;
  while (1)
  {
    if (v40)
    {
      v40 &= v40 - 1;
      goto LABEL_39;
    }
    int64_t v44 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      return result;
    }
    if (v44 >= v41) {
      goto LABEL_59;
    }
    uint64_t v45 = *(void *)(v37 + 8 * v44);
    ++v43;
    if (!v45)
    {
      int64_t v43 = v44 + 1;
      if (v44 + 1 >= v41) {
        goto LABEL_59;
      }
      uint64_t v45 = *(void *)(v37 + 8 * v43);
      if (!v45)
      {
        int64_t v43 = v44 + 2;
        if (v44 + 2 >= v41) {
          goto LABEL_59;
        }
        uint64_t v45 = *(void *)(v37 + 8 * v43);
        if (!v45)
        {
          int64_t v43 = v44 + 3;
          if (v44 + 3 >= v41) {
            goto LABEL_59;
          }
          uint64_t v45 = *(void *)(v37 + 8 * v43);
          if (!v45)
          {
            int64_t v43 = v44 + 4;
            if (v44 + 4 >= v41) {
              goto LABEL_59;
            }
            uint64_t v45 = *(void *)(v37 + 8 * v43);
            if (!v45) {
              break;
            }
          }
        }
      }
    }
LABEL_58:
    uint64_t v40 = (v45 - 1) & v45;
LABEL_39:
    uint64_t result = REVFXEmitterComponentRemoveCollisionPlane();
  }
  int64_t v46 = v44 + 5;
  if (v46 < v41)
  {
    uint64_t v45 = *(void *)(v37 + 8 * v46);
    if (!v45)
    {
      while (1)
      {
        int64_t v43 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_63;
        }
        if (v43 >= v41) {
          goto LABEL_59;
        }
        uint64_t v45 = *(void *)(v37 + 8 * v43);
        ++v46;
        if (v45) {
          goto LABEL_58;
        }
      }
    }
    int64_t v43 = v46;
    goto LABEL_58;
  }
LABEL_59:
  swift_release_n();
  ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(v2, 0);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v60, (uint64_t)__src);
  if (_s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg((uint64_t)__src) != 1)
  {
    memcpy(v57, __src, sizeof(v57));
    ParticleEmitterComponent.ParticleEmitter.toCore(_:isSpawn:)(v2, 1);
  }
  MEMORY[0x22A694800](v2._rawValue);
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ParticleEmitterComponent(_DWORD *a1@<X8>)
{
  *a1 = 3003;
}

void static ParticleEmitterComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3003;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent(uint64_t a1)
{
  return ParticleEmitterComponent.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent(void *a1)
{
  return ParticleEmitterComponent.encode(to:)(a1);
}

RealityFoundation::CollisionPlaneExtent_v1 __swiftcall CollisionPlaneExtent_v1.init(width:height:)(Swift::Float width, Swift::Float height)
{
  *Swift::OpaquePointer v2 = width;
  v2[1] = height;
  result.height = height;
  result.width = width;
  return result;
}

uint64_t ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0x7461526874726962;
  switch(a1)
  {
    case 1:
    case 9:
    case 32:
      uint64_t result = 0xD000000000000012;
      break;
    case 2:
      uint64_t result = 0x46676E69706D6164;
      break;
    case 3:
      uint64_t result = 0x6172656C65636361;
      break;
    case 4:
      uint64_t result = 0x6E69646165727073;
      break;
    case 5:
      uint64_t result = 1702521203;
      break;
    case 6:
      unsigned int v3 = 1702521203;
      goto LABEL_16;
    case 7:
      uint64_t result = 0x6C6F437472617473;
      break;
    case 8:
      uint64_t result = 0x6C6F437472617473;
      break;
    case 10:
      uint64_t result = 0x726F6C6F43646E65;
      break;
    case 11:
      uint64_t result = 0x726F6C6F43646E65;
      break;
    case 12:
      uint64_t result = 0xD000000000000010;
      break;
    case 13:
      uint64_t result = 0x6F43646E45657375;
      break;
    case 14:
      uint64_t result = 0x72616F626C6C6962;
      break;
    case 15:
      uint64_t result = 1936941421;
      break;
    case 16:
      unsigned int v3 = 1936941421;
LABEL_16:
      uint64_t result = v3 | 0x6972615600000000;
      break;
    case 17:
      uint64_t result = 0x6E6170536566696CLL;
      break;
    case 18:
      uint64_t result = 0xD000000000000011;
      break;
    case 19:
      uint64_t result = 0x656C676E61;
      break;
    case 20:
      uint64_t result = 0x726156656C676E61;
      break;
    case 21:
      uint64_t result = 0x5372616C75676E61;
      break;
    case 22:
      uint64_t result = 0xD000000000000015;
      break;
    case 23:
      uint64_t result = 0x65636E756F62;
      break;
    case 24:
      uint64_t result = 0x6E6F697463697266;
      break;
    case 25:
      uint64_t result = 0x437974696361706FLL;
      break;
    case 26:
      uint64_t result = 0xD00000000000001DLL;
      break;
    case 27:
      uint64_t result = 0xD000000000000022;
      break;
    case 28:
      uint64_t result = 0xD000000000000013;
      break;
    case 29:
      uint64_t result = 0x7274536573696F6ELL;
      break;
    case 30:
      uint64_t result = 0x6163536573696F6ELL;
      break;
    case 31:
      uint64_t result = 0xD000000000000013;
      break;
    case 33:
      uint64_t result = 0xD000000000000010;
      break;
    case 34:
      uint64_t result = 0x7453786574726F76;
      break;
    case 35:
      uint64_t result = 0x6944786574726F76;
      break;
    case 36:
      uint64_t result = 0xD000000000000011;
      break;
    case 37:
      uint64_t result = 0x4668637465727473;
      break;
    case 38:
      uint64_t result = 0x6564724F74726F73;
      break;
    case 39:
      uint64_t result = 0x646F4D646E656C62;
      break;
    case 40:
      uint64_t result = 0x6567616D69;
      break;
    case 41:
      uint64_t result = 0x7165536567616D69;
      break;
    case 42:
      uint64_t result = 0x726F6C6F63;
      break;
    case 43:
      uint64_t result = 0x6F6973696C6C6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  return ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 44;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v65) = *(_DWORD *)(v1 + 4);
  LODWORD(v64) = *(_DWORD *)(v1 + 8);
  long long v60 = *(_OWORD *)(v1 + 16);
  int v73 = *(_DWORD *)(v1 + 32);
  int v46 = *(unsigned __int8 *)(v1 + 36);
  int v59 = *(_DWORD *)(v1 + 40);
  int v58 = *(_DWORD *)(v1 + 44);
  CGColorRef v7 = *(void **)(v1 + 48);
  uint64_t v62 = *(void **)(v1 + 56);
  uint64_t v63 = v7;
  int v57 = *(unsigned __int8 *)(v1 + 64);
  id v56 = *(id *)(v1 + 72);
  id v55 = *(id *)(v1 + 80);
  int v54 = *(unsigned __int8 *)(v1 + 88);
  int v53 = *(unsigned __int8 *)(v1 + 89);
  long long v50 = *(_OWORD *)(v1 + 96);
  int v52 = *(_DWORD *)(v1 + 112);
  int v51 = *(unsigned __int8 *)(v1 + 116);
  int v49 = *(_DWORD *)(v1 + 120);
  int v48 = *(_DWORD *)(v1 + 124);
  uint64_t v31 = *(void *)(v1 + 128);
  uint64_t v32 = *(void *)(v1 + 136);
  int v33 = *(_DWORD *)(v1 + 144);
  int v34 = *(_DWORD *)(v1 + 148);
  int v35 = *(_DWORD *)(v1 + 152);
  int v36 = *(_DWORD *)(v1 + 156);
  int v37 = *(_DWORD *)(v1 + 160);
  int v38 = *(_DWORD *)(v1 + 164);
  int v30 = *(unsigned __int8 *)(v1 + 168);
  int v39 = *(_DWORD *)(v1 + 172);
  int v41 = *(_DWORD *)(v1 + 176);
  long long v42 = *(_OWORD *)(v1 + 208);
  long long v43 = *(_OWORD *)(v1 + 240);
  int v40 = *(unsigned __int8 *)(v1 + 256);
  int v44 = *(unsigned __int8 *)(v1 + 264);
  int v45 = *(unsigned __int8 *)(v1 + 265);
  uint64_t v61 = *(void *)(v1 + 280);
  uint64_t v47 = *(void *)(v1 + 288);
  uint64_t v8 = *(void *)(v1 + 304);
  uint64_t v29 = *(void *)(v1 + 296);
  uint64_t v9 = *(void *)(v1 + 312);
  int v10 = *(unsigned __int8 *)(v1 + 320);
  uint64_t v11 = a1[3];
  unint64_t v12 = a1;
  uint64_t v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v68) = 0;
  long long v67 = v6;
  uint64_t v15 = v66;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v15)
  {
    double v17 = v62;
    unint64_t v16 = v63;
    int v27 = v10;
    uint64_t v28 = v9;
    uint64_t v66 = v8;
    uint64_t v18 = v61;
    LOBYTE(v68) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v68 = v60;
    char v74 = 3;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v20 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v65 = v20;
    specialized SIMD4<>.init(_:)((CGColorRef)v16);
    long long v68 = v21;
    char v74 = 7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v64 = v19;
    specialized SIMD4<>.init(_:)((CGColorRef)v17);
    long long v68 = v23;
    char v74 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    specialized SIMD4<>.init(_:)((CGColorRef)v56);
    long long v68 = v24;
    char v74 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    specialized SIMD4<>.init(_:)((CGColorRef)v55);
    long long v68 = v25;
    char v74 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v68 = v50;
    LODWORD(v69) = v52;
    BYTE4(v69) = v51;
    char v74 = 14;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 20;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 21;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 22;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 23;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 24;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = v30;
    char v74 = 25;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 26;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 27;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 28;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 29;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 30;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 31;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 32;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v68 = v42;
    char v74 = 33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 34;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v68 = v43;
    char v74 = 35;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 36;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = 37;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v68) = v44;
    char v74 = 38;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = v45;
    char v74 = 39;
    lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v68 = v18;
    *((void *)&v68 + 1) = v47;
    uint64_t v69 = v29;
    uint64_t v70 = v66;
    uint64_t v71 = v28;
    char v72 = v27;
    char v74 = 41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
    lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence? and conformance <A> A?, &demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?, (void (*)(void))lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v68) = 43;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v67, v14);
}

uint64_t ParticleEmitterComponent.ParticleEmitter.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v105 = 1.0;
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 0.293586522, 0.0, 1.0);
  CGColorRef v127 = CGColorCreateGenericRGB(0.999990999, 1.0, 1.0, 1.0);
  *(double *)&CGColorRef v125 = COERCE_DOUBLE(CGColorCreateGenericRGB(0.00130063295, 0.0325933062, 1.0, 1.0));
  *(double *)&CGColorRef v126 = COERCE_DOUBLE(CGColorCreateGenericRGB(0.294799924, 0.0149334101, 0.287591606, 1.0));
  char v199 = 1;
  uint64_t v9 = a1[3];
  char v124 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    unint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v114 = 0;
    __n128 v113 = 0uLL;
    int v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    char v10 = 0;
    char v11 = 0;
    __n128 v123 = 0u;
    LODWORD(v121) = 1.0;
    long long v119 = xmmword_22833D9F0;
    int v112 = 0;
    int v98 = 0;
    int v99 = 0;
    __n128 v111 = *(__n128 *)&zmmword_22830EC90[16];
    int v97 = 3;
    int v100 = 0;
    int v101 = 0;
    int v20 = 1120403456;
    int v27 = 1017370378;
    float v102 = 1.0;
    float v103 = 1.0;
    int v106 = 0;
    uint64_t v122 = 0x3FC999999999999ALL;
    int v108 = 0;
    int v109 = 0;
    int v110 = 0;
    int v107 = 1050253722;
    uint64_t v104 = 1036831949;
    float v12 = 1.0;
    char v13 = 1;
    int v14 = 0;
    int v15 = 0;
    unsigned __int32 v16 = 0;
    unsigned int v17 = 0;
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
    *(void *)&long long v130 = __PAIR64__(v17, v20);
    DWORD2(v130) = v16;
    __n128 v131 = v123;
    LODWORD(v132) = v15;
    BYTE4(v132) = 0;
    *(_WORD *)((char *)&v132 + 5) = v203;
    HIBYTE(v132) = v204;
    int v133 = v27;
    int v134 = v14;
    CGColorRef v135 = GenericRGB;
    CGColorRef v136 = v127;
    char v137 = v11;
    *(_DWORD *)uint64_t v138 = *(_DWORD *)v202;
    *(_DWORD *)&v138[3] = *(_DWORD *)&v202[3];
    CGColorRef v139 = v125;
    CGColorRef v140 = v126;
    char v141 = v10;
    char v142 = v13;
    int v143 = v200;
    __int16 v144 = v201;
    __n128 v145 = (__n128)1uLL;
    unsigned __int32 v146 = 0;
    char v147 = v199;
    __int16 v148 = v197;
    char v149 = v198;
    float v150 = v12;
    int v151 = 0;
    double v152 = v105;
    uint64_t v153 = v122;
    int v154 = v110;
    int v155 = v109;
    int v156 = v108;
    int v157 = v106;
    int v158 = v107;
    int v159 = HIDWORD(v104);
    char v160 = 3;
    char v162 = v196;
    __int16 v161 = v195;
    int v163 = v104;
    float v164 = v103;
    float v165 = v102;
    int v166 = v101;
    int v167 = v121;
    int v168 = v100;
    int v169 = v99;
    long long v170 = v119;
    int v171 = v98;
    uint64_t v172 = v193;
    int v173 = v194;
    __n128 v174 = v111;
    char v175 = v120;
    __int16 v176 = v191;
    char v177 = v192;
    int v178 = v112;
    char v179 = v118;
    char v180 = v115;
    int v181 = v189;
    __int16 v182 = v190;
    uint64_t v183 = 0;
    __n128 v184 = v113;
    unint64_t v185 = v114;
    unint64_t v186 = v116;
    uint64_t v187 = v117;
    char v188 = v97;
    return outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)&v130);
  }
  LOBYTE(v130) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v20 = v19;
  LOBYTE(v130) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  unsigned int v96 = v21;
  LOBYTE(v130) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  unsigned __int32 v95 = v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v128[0] = 3;
  uint64_t v24 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __n128 v123 = (__n128)v130;
  LOBYTE(v130) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v94 = v25;
  LOBYTE(v130) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v27 = v26;
  LOBYTE(v130) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v93 = v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  v128[0] = 7;
  uint64_t v121 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  uint64_t v122 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v120 = v24;
  uint64_t v118 = v23;
  uint64_t v91 = a2;
  int v30 = (CGColor *)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  v128[0] = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  CGColorRef GenericRGB = v30;
  CGColorRef v31 = v126;
  uint64_t v90 = (CGColor *)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  LOBYTE(v130) = 9;
  char v32 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v92 = 0;
  int v89 = v32 & 1;
  v128[0] = 10;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v92 = 0;
  CGColorRef v127 = (CGColorRef)(id)specialized SIMD4<>.cgColor.getter((__n128)v130);

  v128[0] = 11;
  uint64_t v33 = v92;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v92 = v33;
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    int v34 = v90;
    int v35 = v127;

    unint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v114 = 0;
    __n128 v113 = 0uLL;
    int v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    char v10 = 0;
    long long v119 = xmmword_22833D9F0;
    __n128 v111 = *(__n128 *)&zmmword_22830EC90[16];
    LODWORD(v121) = 1.0;
    int v112 = 0;
    int v98 = 0;
    uint64_t v122 = 0x3FC999999999999ALL;
    int v99 = 0;
    int v100 = 0;
    int v97 = 3;
    int v101 = 0;
    int v107 = 1050253722;
    float v102 = 1.0;
    float v103 = 1.0;
    uint64_t v104 = 1036831949;
    int v106 = 0;
    int v108 = 0;
    int v109 = 0;
    int v110 = 0;
    float v12 = 1.0;
    char v13 = 1;
    CGColorRef v125 = v35;
    CGColorRef v127 = v34;
LABEL_9:
    unsigned __int32 v16 = v95;
    unsigned int v17 = v96;
    char v11 = v89;
    int v14 = v93;
    int v15 = v94;
    goto LABEL_4;
  }
  *(double *)&CGColorRef v125 = COERCE_DOUBLE((id)specialized SIMD4<>.cgColor.getter((__n128)v130));

  LOBYTE(v130) = 12;
  uint64_t v36 = v92;
  char v37 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v92 = v36;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    int v38 = v127;
    CGColorRef v39 = v125;

    unint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v114 = 0;
    __n128 v113 = 0uLL;
    int v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    char v10 = 0;
    long long v119 = xmmword_22833D9F0;
    __n128 v111 = *(__n128 *)&zmmword_22830EC90[16];
    LODWORD(v121) = 1.0;
    int v112 = 0;
    uint64_t v122 = 0x3FC999999999999ALL;
    int v98 = 0;
    int v99 = 0;
    int v97 = 3;
    int v100 = 0;
    int v101 = 0;
    int v107 = 1050253722;
    uint64_t v104 = 1036831949;
    float v102 = 1.0;
    float v103 = 1.0;
    int v106 = 0;
    int v108 = 0;
    int v109 = 0;
    int v110 = 0;
    char v13 = 1;
    float v12 = 1.0;
    CGColorRef v125 = v38;
    CGColorRef v126 = v39;
    CGColorRef v127 = v90;
    goto LABEL_9;
  }
  int v88 = v37 & 1;
  LOBYTE(v130) = 13;
  char v40 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v92 = 0;
  int v87 = v40 & 1;
  v128[0] = 14;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v41 = v92;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v92 = v41;
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    long long v42 = GenericRGB;

    long long v43 = v90;
    int v44 = v127;

    CGColorRef v45 = v125;
    unint64_t v116 = 0;
    uint64_t v117 = 0;
    unint64_t v114 = 0;
    __n128 v113 = 0uLL;
    int v115 = 0;
    LODWORD(v118) = 0;
    LODWORD(v120) = 0;
    long long v119 = xmmword_22833D9F0;
    __n128 v111 = *(__n128 *)&zmmword_22830EC90[16];
    LODWORD(v121) = 1.0;
    int v112 = 0;
    int v98 = 0;
    uint64_t v122 = 0x3FC999999999999ALL;
    int v97 = 3;
    int v99 = 0;
    int v100 = 0;
    int v101 = 0;
    int v107 = 1050253722;
    float v102 = 1.0;
    float v103 = 1.0;
    uint64_t v104 = 1036831949;
    int v106 = 0;
    int v108 = 0;
    int v109 = 0;
    int v110 = 0;
    float v12 = 1.0;
    CGColorRef v125 = v44;
    CGColorRef v126 = v45;
    CGColorRef v127 = v43;
    CGColorRef GenericRGB = v42;
    unsigned __int32 v16 = v95;
    unsigned int v17 = v96;
    char v10 = v88;
    char v11 = v89;
    int v14 = v93;
    int v15 = v94;
    char v13 = v87;
    goto LABEL_4;
  }
  __n128 v85 = (__n128)v130;
  unsigned __int32 v86 = v131.n128_u32[0];
  unsigned __int8 v46 = v131.n128_u8[4];
  char v199 = v131.n128_i8[4];
  LOBYTE(v130) = 15;
  KeyedDecodingContainer.decode(_:forKey:)();
  float v84 = v47;
  LOBYTE(v130) = 16;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v83 = v48;
  LOBYTE(v130) = 17;
  KeyedDecodingContainer.decode(_:forKey:)();
  long long v50 = v49;
  LOBYTE(v130) = 18;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v122 = v51;
  LOBYTE(v130) = 19;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v110 = v52;
  LOBYTE(v130) = 20;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v109 = v53;
  LOBYTE(v130) = 21;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v108 = v54;
  LOBYTE(v130) = 22;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v106 = v55;
  LOBYTE(v130) = 23;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v107 = v56;
  LOBYTE(v130) = 24;
  KeyedDecodingContainer.decode(_:forKey:)();
  HIDWORD(v104) = v57;
  v128[0] = 25;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  HIDWORD(v82) = v130;
  LOBYTE(v130) = 26;
  KeyedDecodingContainer.decode(_:forKey:)();
  LODWORD(v104) = v58;
  LOBYTE(v130) = 27;
  KeyedDecodingContainer.decode(_:forKey:)();
  float v103 = v59;
  LOBYTE(v130) = 28;
  KeyedDecodingContainer.decode(_:forKey:)();
  float v102 = v60;
  LOBYTE(v130) = 29;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v101 = v61;
  LOBYTE(v130) = 30;
  KeyedDecodingContainer.decode(_:forKey:)();
  LODWORD(v121) = v62;
  LOBYTE(v130) = 31;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v100 = v63;
  LOBYTE(v130) = 32;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v99 = v64;
  v128[0] = 33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v119 = v130;
  LOBYTE(v130) = 34;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v98 = v65;
  v128[0] = 35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __n128 v111 = (__n128)v130;
  LOBYTE(v130) = 36;
  LOBYTE(v120) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LODWORD(v120) = v120;
  LOBYTE(v130) = 37;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v112 = v66;
  v128[0] = 38;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LODWORD(v118) = v130;
  v128[0] = 39;
  lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v115 = v130;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  v128[0] = 41;
  lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence? and conformance <A> A?, &demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?, (void (*)(void))lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __n128 v113 = (__n128)v130;
  unint64_t v116 = v131.n128_u64[1];
  unint64_t v114 = v131.n128_u64[0];
  uint64_t v117 = v132;
  int v97 = v133;
  char v129 = 43;
  char v67 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v92 = 0;
  char v68 = v67;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v68 &= 1u;
  *(_DWORD *)float v128 = v20;
  unsigned __int32 v69 = v95;
  *(_DWORD *)&v128[4] = v96;
  *(_DWORD *)&v128[8] = v95;
  *(__n128 *)&v128[16] = v123;
  int v71 = v93;
  int v70 = v94;
  *(_DWORD *)&v128[32] = v94;
  v128[36] = v68;
  *(_DWORD *)&v128[40] = v27;
  *(_DWORD *)&v128[44] = v93;
  CGColorRef v72 = GenericRGB;
  int v73 = v90;
  *(void *)&v128[48] = GenericRGB;
  *(void *)&v128[56] = v90;
  char v74 = v89;
  v128[64] = v89;
  CGColorRef v75 = v127;
  CGColorRef v76 = v125;
  *(void *)&v128[72] = v127;
  *(void *)&v128[80] = v125;
  v128[88] = v88;
  v128[89] = v87;
  *(__n128 *)&v128[96] = v85;
  *(_DWORD *)&v128[112] = v86;
  v128[116] = v46;
  int v77 = v83;
  float v78 = v84;
  *(float *)&v128[120] = v84;
  *(_DWORD *)&v128[124] = v83;
  CGColorRef v126 = v50;
  *(void *)&v128[128] = v50;
  uint64_t v79 = v122;
  *(void *)&v128[136] = v122;
  *(_DWORD *)&v128[144] = v110;
  *(_DWORD *)&v128[148] = v109;
  *(_DWORD *)&v128[152] = v108;
  *(_DWORD *)&v128[156] = v106;
  *(_DWORD *)&v128[160] = v107;
  *(_DWORD *)&v128[164] = HIDWORD(v104);
  v128[168] = BYTE4(v82);
  *(_DWORD *)&v128[172] = v104;
  *(float *)&v128[176] = v103;
  *(float *)&v128[180] = v102;
  *(_DWORD *)&v128[184] = v101;
  *(_DWORD *)&v128[188] = v121;
  *(_DWORD *)&v128[192] = v100;
  *(_DWORD *)&v128[196] = v99;
  *(_OWORD *)&v128[208] = v119;
  *(_DWORD *)&v128[224] = v98;
  *(__n128 *)&v128[240] = v111;
  v128[256] = v120;
  *(_DWORD *)&v128[260] = v112;
  v128[264] = v118;
  v128[265] = v115;
  *(void *)&v128[272] = 0;
  *(__n128 *)&v128[280] = v113;
  *(void *)&v128[296] = v114;
  unint64_t v81 = v116;
  uint64_t v80 = v117;
  *(void *)&v128[304] = v116;
  *(void *)&v128[312] = v117;
  v128[320] = v97;
  outlined retain of ParticleEmitterComponent.ParticleEmitter(v128);

  memcpy(v91, v128, 0x141uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
  *(void *)&long long v130 = __PAIR64__(v96, v20);
  DWORD2(v130) = v69;
  __n128 v131 = v123;
  LODWORD(v132) = v70;
  BYTE4(v132) = v68;
  *(_WORD *)((char *)&v132 + 5) = v203;
  HIBYTE(v132) = v204;
  int v133 = v27;
  int v134 = v71;
  CGColorRef v135 = v72;
  CGColorRef v136 = v73;
  char v137 = v74;
  *(_DWORD *)uint64_t v138 = *(_DWORD *)v202;
  *(_DWORD *)&v138[3] = *(_DWORD *)&v202[3];
  CGColorRef v139 = v75;
  CGColorRef v140 = v76;
  char v141 = v88;
  char v142 = v87;
  int v143 = v200;
  __int16 v144 = v201;
  __n128 v145 = v85;
  unsigned __int32 v146 = v86;
  char v147 = v199;
  __int16 v148 = v197;
  char v149 = v198;
  float v150 = v78;
  int v151 = v77;
  double v152 = *(double *)&v126;
  uint64_t v153 = v79;
  int v154 = v110;
  int v155 = v109;
  int v156 = v108;
  int v157 = v106;
  int v158 = v107;
  int v159 = HIDWORD(v104);
  char v160 = BYTE4(v82);
  char v162 = v196;
  __int16 v161 = v195;
  int v163 = v104;
  float v164 = v103;
  float v165 = v102;
  int v166 = v101;
  int v167 = v121;
  int v168 = v100;
  int v169 = v99;
  long long v170 = v119;
  int v171 = v98;
  uint64_t v172 = v193;
  int v173 = v194;
  __n128 v174 = v111;
  char v175 = v120;
  __int16 v176 = v191;
  char v177 = v192;
  int v178 = v112;
  char v179 = v118;
  char v180 = v115;
  int v181 = v189;
  __int16 v182 = v190;
  uint64_t v183 = 0;
  __n128 v184 = v113;
  unint64_t v185 = v114;
  unint64_t v186 = v81;
  uint64_t v187 = v80;
  char v188 = v97;
  return outlined release of ParticleEmitterComponent.ParticleEmitter((uint64_t)&v130);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.ParticleEmitter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ParticleEmitterComponent.ParticleEmitter.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.ParticleEmitter(void *a1)
{
  return ParticleEmitterComponent.ParticleEmitter.encode(to:)(a1);
}

double CollisionPlane_v1.extent.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double CollisionPlane_v1.extent.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*CollisionPlane_v1.extent.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CollisionPlane_v1.transform.getter()
{
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

void CollisionPlane_v1.init(extent:transform:)(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float32x4_t a4@<Q1>, double a5@<D2>)
{
  *(double *)&long long v7 = specialized simd_float4x4.init(translation:rotation:scale:)(a5, a4, a3);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 64) = v10;
}

float CollisionPlaneExtent_v1.width.getter()
{
  return *(float *)v0;
}

void CollisionPlaneExtent_v1.width.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*CollisionPlaneExtent_v1.width.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CollisionPlaneExtent_v1.height.getter()
{
  return *(float *)(v0 + 4);
}

void CollisionPlaneExtent_v1.height.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*CollisionPlaneExtent_v1.height.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionPlaneExtent_v1.hash(into:)()
{
  Swift::UInt32 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *v0;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

BOOL static CollisionPlaneExtent_v1.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CollisionPlaneExtent_v1.CodingKeys()
{
  if (*v0) {
    return 0x746867696568;
  }
  else {
    return 0x6874646977;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CollisionPlaneExtent_v1.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CollisionPlaneExtent_v1.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CollisionPlaneExtent_v1.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CollisionPlaneExtent_v1.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CollisionPlaneExtent_v1.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CollisionPlaneExtent_v1.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int CollisionPlaneExtent_v1.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v2;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t CollisionPlaneExtent_v1.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CollisionPlaneExtent_v1.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    char v15 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollisionPlaneExtent_v1@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return CollisionPlaneExtent_v1.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollisionPlaneExtent_v1(void *a1)
{
  return CollisionPlaneExtent_v1.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance CollisionPlaneExtent_v1()
{
  Swift::UInt32 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *v0;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollisionPlaneExtent_v1()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v1;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v2;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CollisionPlaneExtent_v1(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t CollisionPlane_v1.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t CollisionPlane_v1.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CollisionPlane_v1.hash(into:)(uint64_t a1)
{
  Swift::UInt32 v3 = v1->n128_u32[2];
  Swift::UInt32 v4 = v1->n128_u32[3];
  __n128 v8 = v1[1];
  __n128 v9 = v1[2];
  __n128 v10 = v1[3];
  __n128 v11 = v1[4];
  Hasher._combine(_:)(v1->n128_u64[0]);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v3;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = v4;
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  specialized SIMD.hash(into:)(a1, v8);
  specialized SIMD.hash(into:)(a1, v9);
  specialized SIMD.hash(into:)(a1, v10);

  return specialized SIMD.hash(into:)(a1, v11);
}

Swift::Int CollisionPlane_v1.hashValue.getter()
{
  long long v1 = *((_OWORD *)v0 + 1);
  long long v2 = *((_OWORD *)v0 + 2);
  long long v3 = *((_OWORD *)v0 + 3);
  long long v4 = *((_OWORD *)v0 + 4);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  long long v9 = v1;
  long long v10 = v2;
  long long v11 = v3;
  long long v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollisionPlane_v1@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CollisionPlane_v1.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollisionPlane_v1(void *a1)
{
  return CollisionPlane_v1.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CollisionPlane_v1()
{
  long long v1 = *((_OWORD *)v0 + 1);
  long long v2 = *((_OWORD *)v0 + 2);
  long long v3 = *((_OWORD *)v0 + 3);
  long long v4 = *((_OWORD *)v0 + 4);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  long long v9 = v1;
  long long v10 = v2;
  long long v11 = v3;
  long long v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollisionPlane_v1()
{
  long long v1 = *((_OWORD *)v0 + 1);
  long long v2 = *((_OWORD *)v0 + 2);
  long long v3 = *((_OWORD *)v0 + 3);
  long long v4 = *((_OWORD *)v0 + 4);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  long long v9 = v1;
  long long v10 = v2;
  long long v11 = v3;
  long long v12 = v4;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    long long v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = *(void *)(a1 + 48) + 80 * v10;
    float32x4_t v12 = *(float32x4_t *)(v11 + 48);
    v18[2] = *(float32x4_t *)(v11 + 32);
    void v18[3] = v12;
    v18[4] = *(float32x4_t *)(v11 + 64);
    float32x4_t v13 = *(float32x4_t *)(v11 + 16);
    v18[0] = *(float32x4_t *)v11;
    v18[1] = v13;
    specialized Set._Variant.remove(_:)(v18, (uint64_t)&v17);
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  swift_release();
}

void *specialized Set._subtract<A>(_:)(void *a1)
{
  return specialized Set._subtract<A>(_:)(a1, (void *(*)(uint64_t *__return_ptr, void))specialized Set._Variant.remove(_:));
}

{
  return specialized Set._subtract<A>(_:)(a1, (void *(*)(uint64_t *__return_ptr, void))specialized Set._Variant.remove(_:));
}

void *specialized Set._subtract<A>(_:)(void *result, void *(*a2)(uint64_t *__return_ptr, void))
{
  if (!*(void *)(*(void *)v2 + 16)) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = result + 7;
  uint64_t v6 = 1 << *((unsigned char *)result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & result[7];
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      goto LABEL_24;
    }
    unint64_t v14 = v5[v13];
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v14 = v5[v10];
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v14 = v5[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v9) {
            goto LABEL_24;
          }
          unint64_t v14 = v5[v10];
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_6:
    uint64_t result = a2(&v16, *(void *)(v4[6] + 8 * v12));
  }
  int64_t v15 = v13 + 4;
  if (v15 < v9)
  {
    unint64_t v14 = v5[v15];
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_29;
        }
        if (v10 >= v9) {
          goto LABEL_24;
        }
        unint64_t v14 = v5[v10];
        ++v15;
        if (v14) {
          goto LABEL_23;
        }
      }
    }
    int64_t v10 = v15;
    goto LABEL_23;
  }
LABEL_24:

  return (void *)swift_release();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v20[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    v20[0] = a1;
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a2 + 56;
      uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
      uint64_t v7 = ~v19;
      while (1)
      {
        uint64_t v8 = *(void *)(a1 + 32 + 8 * v5++);
        uint64_t v9 = static Hasher._hash(seed:_:)();
        unint64_t v10 = v9 & v7;
        if ((*(void *)(v6 + (((v9 & (unint64_t)v7) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (v9 & v7))) {
          break;
        }
LABEL_4:
        if (v5 == v4) {
          return v2;
        }
      }
      while (*(void *)(*(void *)(v2 + 48) + 8 * v10) != v8)
      {
        unint64_t v10 = (v10 + 1) & v7;
        if (((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_4;
        }
      }
      v20[1] = v5;
      unint64_t v11 = (unint64_t)(63 - v19) >> 6;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v11 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        MEMORY[0x270FA5388](isStackAllocationSafe);
        unint64_t v14 = (char *)&v18 - v13;
        memcpy((char *)&v18 - v13, (const void *)(v2 + 56), 8 * v11);
        uint64_t v15 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v14, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = (void *)swift_slowAlloc();
        memcpy(v16, (const void *)(v2 + 56), 8 * v11);
        uint64_t v15 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v16, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x22A696500](v16, -1, -1);
      }
      return v15;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  uint64_t v2 = a2;
  long long v43 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    char v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    int v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & v4;
    uint64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        unint64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        uint64_t v13 = *(void *)(v37 + 8 * v12);
        unint64_t v14 = v9 + 1;
        if (!v13)
        {
          unint64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          uint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            unint64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            uint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              unint64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              uint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  outlined consume of [String : AnimationResource].Iterator._Variant();
                  return v2;
                }
                uint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    unint64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    uint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                unint64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        uint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v19 = Hasher._finalize()();
      int v20 = -1 << *(unsigned char *)(v2 + 32);
      unsigned int v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    unsigned __int32 v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    uint64_t v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      int v38 = a1;
      CGColorRef v39 = v37;
      char v40 = v35;
      uint64_t v41 = v9;
      long long v42 = v7;
    }
    else
    {
      int v25 = ~v20;
      do
      {
        unsigned int v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        int v26 = (void *)(v22 + 16 * v21);
        int v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      int v38 = a1;
      CGColorRef v39 = v37;
      char v40 = v35;
      uint64_t v41 = v9;
      long long v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    uint64_t v29 = *(unsigned char *)(v2 + 32);
    int v30 = (unint64_t)((1 << v29) + 63) >> 6;
    CGColorRef v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      char v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      char v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x22A696500](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  __n128 *v17;
  Swift::UInt v18;
  float v19;
  float v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  size_t v31;
  uint64_t isStackAllocationSafe;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  void *v36;
  Swift::Int v37;
  uint64_t v39;
  int64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  unsigned char v45[72];
  void v46[7];

  uint64_t v2 = a2;
  v46[5] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    CGColorRef v39 = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & v5;
    char v40 = (unint64_t)(63 - v7) >> 6;
    unint64_t v10 = a2 + 56;
    do
    {
LABEL_6:
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v4 << 6);
      }
      else
      {
        uint64_t v13 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        if (v13 >= v40) {
          goto LABEL_47;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v13);
        uint64_t v15 = v4 + 1;
        if (!v14)
        {
          uint64_t v15 = v4 + 2;
          if (v4 + 2 >= v40) {
            goto LABEL_47;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v15);
          if (!v14)
          {
            uint64_t v15 = v4 + 3;
            if (v4 + 3 >= v40) {
              goto LABEL_47;
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              uint64_t v15 = v4 + 4;
              if (v4 + 4 >= v40) {
                goto LABEL_47;
              }
              unint64_t v14 = *(void *)(v6 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v4 + 5;
                if (v4 + 5 >= v40)
                {
LABEL_47:
                  swift_bridgeObjectRetain();
                  outlined consume of [String : AnimationResource].Iterator._Variant();
                  return v2;
                }
                unint64_t v14 = *(void *)(v6 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    uint64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      break;
                    }
                    if (v15 >= v40) {
                      goto LABEL_47;
                    }
                    unint64_t v14 = *(void *)(v6 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_23;
                    }
                  }
LABEL_50:
                  __break(1u);
                }
                uint64_t v15 = v4 + 5;
              }
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        uint64_t v4 = v15;
      }
      uint64_t v17 = (__n128 *)(*(void *)(a1 + 48) + 80 * v12);
      uint64_t v18 = v17->n128_u64[0];
      uint64_t v19 = v17->n128_f32[2];
      int v20 = v17->n128_f32[3];
      int v44 = v17[1];
      long long v43 = v17[2];
      long long v42 = v17[3];
      uint64_t v41 = v17[4];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      if ((LODWORD(v19) & 0x7FFFFFFF) != 0) {
        unsigned int v21 = LODWORD(v19);
      }
      else {
        unsigned int v21 = 0;
      }
      Hasher._combine(_:)(v21);
      if ((LODWORD(v20) & 0x7FFFFFFF) != 0) {
        unsigned __int32 v22 = LODWORD(v20);
      }
      else {
        unsigned __int32 v22 = 0;
      }
      Hasher._combine(_:)(v22);
      specialized SIMD.hash(into:)(v45, v44);
      specialized SIMD.hash(into:)(v45, v43);
      specialized SIMD.hash(into:)(v45, v42);
      specialized SIMD.hash(into:)(v45, v41);
      uint64_t v23 = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v2 + 32);
      int v25 = v23 & ~v24;
    }
    while (((*(void *)(v10 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0);
    int v26 = *(void *)(v2 + 48);
    while (1)
    {
      int v27 = v26 + 80 * v25;
      int v28 = *(void *)v27 == v18 && *(float *)(v27 + 8) == v19;
      uint64_t v29 = v28 && *(float *)(v27 + 12) == v20;
      if (v29
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 48), (float32x4_t)v42), (int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 64), (float32x4_t)v41)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 32), (float32x4_t)v43), (int8x16_t)vceqq_f32(*(float32x4_t *)(v26 + 80 * v25 + 16), (float32x4_t)v44)))) & 0x80000000) != 0)
      {
        break;
      }
      int v25 = (v25 + 1) & ~v24;
      if (((*(void *)(v10 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
        goto LABEL_6;
      }
    }
    v46[0] = a1;
    v46[1] = v6;
    v46[2] = v39;
    void v46[3] = v4;
    v46[4] = v9;
    int v30 = (unint64_t)(63 - v24) >> 6;
    CGColorRef v31 = 8 * v30;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v30 <= 0x80 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe);
      int v34 = (char *)&v39 - v33;
      memcpy((char *)&v39 - v33, (const void *)(v2 + 56), v31);
      int v35 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v34, v30, v2, v25, v46);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      return v35;
    }
    else
    {
      uint64_t v36 = (void *)swift_slowAlloc();
      memcpy(v36, (const void *)(v2 + 56), v31);
      char v37 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v36, v30, v2, v25, v46);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x22A696500](v36, -1, -1);
      return v37;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.subtracting<A>(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  uint64_t vars8;

  return specialized _NativeSet.subtracting<A>(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

Swift::Int specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  v34[5] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v7 = a1 + 56;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    char v32 = a3;
    uint64_t v33 = ~v8;
    if (-v8 < 64) {
      uint64_t v9 = ~(-1 << -(char)v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v6;
    int64_t v11 = (unint64_t)(63 - v8) >> 6;
    uint64_t v12 = a2 + 56;
    while (1)
    {
      do
      {
        if (v10)
        {
          unint64_t v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          unint64_t v14 = v13 | (v5 << 6);
        }
        else
        {
          int64_t v15 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v15 >= v11) {
            goto LABEL_35;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v15);
          int64_t v17 = v5 + 1;
          if (!v16)
          {
            int64_t v17 = v5 + 2;
            if (v5 + 2 >= v11) {
              goto LABEL_35;
            }
            unint64_t v16 = *(void *)(v7 + 8 * v17);
            if (!v16)
            {
              int64_t v17 = v5 + 3;
              if (v5 + 3 >= v11) {
                goto LABEL_35;
              }
              unint64_t v16 = *(void *)(v7 + 8 * v17);
              if (!v16)
              {
                int64_t v17 = v5 + 4;
                if (v5 + 4 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v16 = *(void *)(v7 + 8 * v17);
                if (!v16)
                {
                  int64_t v18 = v5 + 5;
                  if (v5 + 5 >= v11)
                  {
LABEL_35:
                    swift_bridgeObjectRetain();
                    outlined consume of [String : AnimationResource].Iterator._Variant();
                    return v3;
                  }
                  unint64_t v16 = *(void *)(v7 + 8 * v18);
                  if (!v16)
                  {
                    while (1)
                    {
                      int64_t v17 = v18 + 1;
                      if (__OFADD__(v18, 1)) {
                        break;
                      }
                      if (v17 >= v11) {
                        goto LABEL_35;
                      }
                      unint64_t v16 = *(void *)(v7 + 8 * v17);
                      ++v18;
                      if (v16) {
                        goto LABEL_23;
                      }
                    }
LABEL_37:
                    __break(1u);
                  }
                  int64_t v17 = v5 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v10 = (v16 - 1) & v16;
          unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
          int64_t v5 = v17;
        }
        Swift::UInt v19 = *(void *)(*(void *)(a1 + 48) + 8 * v14);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v19);
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v22 = v20 & ~v21;
      }
      while (((*(void *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0);
      uint64_t v23 = *(void *)(v3 + 48);
      if (*(void *)(v23 + 8 * v22) == v19) {
        break;
      }
      while (1)
      {
        unint64_t v22 = (v22 + 1) & ~v21;
        if (((*(void *)(v12 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
          break;
        }
        if (*(void *)(v23 + 8 * v22) == v19) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v34[0] = a1;
    v34[1] = v7;
    v34[2] = v33;
    v34[3] = v5;
    v34[4] = v10;
    unint64_t v24 = (unint64_t)(63 - v21) >> 6;
    size_t v25 = 8 * v24;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v24 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe);
      int v28 = (char *)&v32 - v27;
      memcpy((char *)&v32 - v27, (const void *)(v3 + 56), v25);
      Swift::Int v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v28, v24, v3, v22, v34, v32);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
    }
    else
    {
      int v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v3 + 56), v25);
      Swift::Int v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((Swift::Int)v30, v24, v3, v22, v34, v32);
      swift_release();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      MEMORY[0x22A696500](v30, -1, -1);
    }
    return v29;
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (unint64_t *)result;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v10 = *a5;
  unint64_t v9 = a5[1];
  unint64_t v11 = *(void *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v6, a2, v8, a3);
  }
  else
  {
    uint64_t v13 = a3 + 56;
    uint64_t v14 = ~(-1 << *(unsigned char *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1)) {
        goto LABEL_19;
      }
      uint64_t v15 = *(void *)(v10 + 32 + 8 * v9);
      a5[1] = v9 + 1;
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v16 = result & v14;
      unint64_t v17 = (result & (unint64_t)v14) >> 6;
      uint64_t v18 = 1 << (result & v14);
      if ((v18 & *(void *)(v13 + 8 * v17)) != 0)
      {
        uint64_t v19 = *(void *)(a3 + 48);
        if (*(void *)(v19 + 8 * v16) == v15)
        {
LABEL_14:
          uint64_t v22 = v17;
          unint64_t v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1)) {
              goto LABEL_20;
            }
            if (!v8) {
              return MEMORY[0x263F8EE88];
            }
          }
        }
        else
        {
          for (uint64_t i = v16 + 1; ; uint64_t i = v21 + 1)
          {
            unint64_t v21 = i & v14;
            if (((*(void *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
              break;
            }
            if (*(void *)(v19 + 8 * v21) == v15)
            {
              unint64_t v17 = v21 >> 6;
              uint64_t v18 = 1 << v21;
              goto LABEL_14;
            }
          }
        }
      }
      unint64_t v9 = a5[1];
      unint64_t v11 = *(void *)(v10 + 16);
      if (v9 == v11) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  void *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  uint64_t v7 = *(void *)(a3 + 16);
  CGColorRef v39 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  char v40 = a3 + 56;
  while (2)
  {
    int v38 = v8;
    do
    {
      while (1)
      {
        unint64_t v9 = a5[3];
        uint64_t v10 = a5[4];
        if (v10)
        {
          unint64_t v11 = (v10 - 1) & v10;
          uint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        uint64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        uint64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        uint64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          uint64_t v18 = v9 + 2;
          uint64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            uint64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              uint64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            uint64_t v18 = v9 + 4;
            uint64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              uint64_t v13 = v9 + 5;
              uint64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                uint64_t v15 = v14 - 1;
                uint64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    uint64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          uint64_t v13 = v18;
        }
LABEL_15:
        unint64_t v11 = (v17 - 1) & v17;
        uint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        unint64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        unint64_t v21 = *v19;
        Swift::Int v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v22 = Hasher._finalize()();
        unint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        size_t v25 = v24 >> 6;
        int v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        int v28 = (void *)(v27 + 16 * v24);
        Swift::Int v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        CGColorRef v31 = ~v23;
        for (uint64_t i = v24 + 1; ; uint64_t i = v33 + 1)
        {
          uint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          int v34 = (void *)(v27 + 16 * v33);
          int v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            size_t v25 = v33 >> 6;
            int v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_23:
      int v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return MEMORY[0x263F8EE88];
  }
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = (unint64_t *)result;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = a3 + 56;
  while (2)
  {
    uint64_t v43 = v9;
    while (1)
    {
LABEL_3:
      int64_t v12 = a5[3];
      unint64_t v11 = a5[4];
      if (!v11)
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_51;
        }
        int64_t v16 = (unint64_t)(a5[2] + 64) >> 6;
        if (v15 >= v16)
        {
          int64_t v15 = a5[3];
LABEL_47:
          a5[3] = v15;
          a5[4] = 0;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v7, a2, v43, a3);
        }
        uint64_t v17 = a5[1];
        unint64_t v18 = *(void *)(v17 + 8 * v15);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v12 + 2;
        if (v12 + 2 >= v16) {
          goto LABEL_47;
        }
        unint64_t v18 = *(void *)(v17 + 8 * v19);
        if (!v18)
        {
          if (v12 + 3 >= v16) {
            goto LABEL_48;
          }
          unint64_t v18 = *(void *)(v17 + 8 * (v12 + 3));
          if (v18)
          {
            int64_t v15 = v12 + 3;
            goto LABEL_14;
          }
          int64_t v19 = v12 + 4;
          if (v12 + 4 >= v16)
          {
            int64_t v15 = v12 + 3;
            goto LABEL_47;
          }
          unint64_t v18 = *(void *)(v17 + 8 * v19);
          if (!v18)
          {
            int64_t v15 = v12 + 5;
            if (v12 + 5 >= v16)
            {
LABEL_48:
              int64_t v15 = v19;
              goto LABEL_47;
            }
            unint64_t v18 = *(void *)(v17 + 8 * v15);
            if (!v18)
            {
              int64_t v15 = v16 - 1;
              int64_t v36 = v12 + 6;
              while (v16 != v36)
              {
                unint64_t v18 = *(void *)(v17 + 8 * v36++);
                if (v18)
                {
                  int64_t v15 = v36 - 1;
                  goto LABEL_14;
                }
              }
              goto LABEL_47;
            }
            goto LABEL_14;
          }
        }
        int64_t v15 = v19;
LABEL_14:
        uint64_t v13 = (v18 - 1) & v18;
        unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v12 = v15;
        goto LABEL_15;
      }
      uint64_t v13 = (v11 - 1) & v11;
      unint64_t v14 = __clz(__rbit64(v11)) | (v12 << 6);
LABEL_15:
      uint64_t v20 = *(void *)(*a5 + 48) + 80 * v14;
      Swift::UInt v21 = *(void *)v20;
      float v22 = *(float *)(v20 + 8);
      float v23 = *(float *)(v20 + 12);
      __n128 v40 = *(__n128 *)(v20 + 32);
      __n128 v41 = *(__n128 *)(v20 + 16);
      __n128 v38 = *(__n128 *)(v20 + 64);
      __n128 v39 = *(__n128 *)(v20 + 48);
      a5[3] = v12;
      a5[4] = v13;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      if ((LODWORD(v22) & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v24 = LODWORD(v22);
      }
      else {
        Swift::UInt32 v24 = 0;
      }
      Hasher._combine(_:)(v24);
      if ((LODWORD(v23) & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v25 = LODWORD(v23);
      }
      else {
        Swift::UInt32 v25 = 0;
      }
      Hasher._combine(_:)(v25);
      specialized SIMD.hash(into:)(v42, v41);
      specialized SIMD.hash(into:)(v42, v40);
      specialized SIMD.hash(into:)(v42, v39);
      specialized SIMD.hash(into:)(v42, v38);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v27 = result & ~v26;
      if ((*(void *)(v10 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27))
      {
        uint64_t v28 = ~v26;
        uint64_t v29 = *(void *)(a3 + 48);
        while (1)
        {
          uint64_t v30 = v29 + 80 * v27;
          BOOL v31 = *(void *)v30 == v21 && *(float *)(v30 + 8) == v22;
          BOOL v32 = v31 && *(float *)(v30 + 12) == v23;
          if (v32
            && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 48), (float32x4_t)v39), (int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 64), (float32x4_t)v38)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 32), (float32x4_t)v40), (int8x16_t)vceqq_f32(*(float32x4_t *)(v29 + 80 * v27 + 16), (float32x4_t)v41)))) & 0x80000000) != 0)
          {
            break;
          }
          unint64_t v27 = (v27 + 1) & v28;
          if (((*(void *)(v10 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
            goto LABEL_3;
          }
        }
        uint64_t v33 = (v27 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v34 = 1 << v27;
        uint64_t v35 = *(unint64_t *)((char *)v7 + v33);
        *(unint64_t *)((char *)v7 + v33) = v35 & ~v34;
        if ((v35 & v34) != 0) {
          break;
        }
      }
    }
    uint64_t v9 = v43 - 1;
    if (__OFSUB__(v43, 1))
    {
LABEL_51:
      __break(1u);
      return result;
    }
    if (v43 != 1) {
      continue;
    }
    return MEMORY[0x263F8EE88];
  }
}

Swift::Int specialized closure #1 in _NativeSet.subtracting<A>(_:)(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t *a6)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v16 = a5[3];
    unint64_t v17 = a5[4];
    if (!v17) {
      break;
    }
    uint64_t v18 = (v17 - 1) & v17;
    unint64_t v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    Swift::UInt v26 = *(void *)(*(void *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v26);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v28 = result & ~v27;
    uint64_t v12 = v28 >> 6;
    uint64_t v13 = 1 << v28;
    if (((1 << v28) & *(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v29 = *(void *)(a3 + 48);
      if (*(void *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        uint64_t v14 = v12;
        unint64_t v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1)) {
            goto LABEL_34;
          }
          if (!v10) {
            return MEMORY[0x263F8EE88];
          }
        }
      }
      else
      {
        for (unint64_t i = v28 + 1; ; unint64_t i = v31 + 1)
        {
          unint64_t v31 = i & ~v27;
          if (((*(void *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            break;
          }
          if (*(void *)(v29 + 8 * v31) == v26)
          {
            uint64_t v12 = v31 >> 6;
            uint64_t v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    int64_t v21 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v22 = a5[3];
    if (v20 >= v21) {
      goto LABEL_31;
    }
    uint64_t v23 = a5[1];
    unint64_t v24 = *(void *)(v23 + 8 * v20);
    if (!v24)
    {
      int64_t v22 = v16 + 1;
      if (v16 + 2 >= v21) {
        goto LABEL_31;
      }
      unint64_t v24 = *(void *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        int64_t v20 = v16 + 2;
      }
      else
      {
        int64_t v22 = v16 + 2;
        if (v16 + 3 >= v21) {
          goto LABEL_31;
        }
        unint64_t v24 = *(void *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          int64_t v20 = v16 + 3;
        }
        else
        {
          int64_t v20 = v16 + 4;
          int64_t v22 = v16 + 3;
          if (v16 + 4 >= v21) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v23 + 8 * v20);
          if (!v24)
          {
            int64_t v22 = v21 - 1;
            int64_t v25 = v16 + 5;
            while (v21 != v25)
            {
              unint64_t v24 = *(void *)(v23 + 8 * v25++);
              if (v24)
              {
                int64_t v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain();
            return specialized _NativeSet.extractSubset(using:count:)(v8, a2, v10, a3, a6);
          }
        }
      }
    }
LABEL_21:
    uint64_t v18 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v20 << 6);
    int64_t v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  unint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v6 = result;
  unint64_t v24 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  unint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_34;
      }
      if (v15 >= a2)
      {
LABEL_31:
        swift_release();
        return v6;
      }
      unint64_t v16 = v24[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          goto LABEL_31;
        }
        unint64_t v16 = v24[v11];
        if (!v16)
        {
          uint64_t v17 = v15 + 2;
          if (v17 >= a2) {
            goto LABEL_31;
          }
          unint64_t v16 = v24[v17];
          if (!v16)
          {
            while (1)
            {
              uint64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_35;
              }
              if (v11 >= a2) {
                goto LABEL_31;
              }
              unint64_t v16 = v24[v11];
              ++v17;
              if (v16) {
                goto LABEL_22;
              }
            }
          }
          uint64_t v11 = v17;
        }
      }
LABEL_22:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = *(void *)(a4 + 48) + 80 * v14;
    Swift::UInt v19 = *(void *)v18;
    __n128 v27 = *(__n128 *)(v18 + 32);
    __n128 v28 = *(__n128 *)(v18 + 16);
    __n128 v25 = *(__n128 *)(v18 + 64);
    __n128 v26 = *(__n128 *)(v18 + 48);
    uint64_t v29 = *(void *)(v18 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Swift::UInt32 v20 = (v29 & 0x7FFFFFFF) != 0 ? v29 : 0;
    Hasher._combine(_:)(v20);
    Swift::UInt32 v21 = (v29 & 0x7FFFFFFF00000000) != 0 ? HIDWORD(v29) : 0;
    Hasher._combine(_:)(v21);
    specialized SIMD.hash(into:)(v30, v28);
    specialized SIMD.hash(into:)(v30, v27);
    specialized SIMD.hash(into:)(v30, v26);
    specialized SIMD.hash(into:)(v30, v25);
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v22 = *(void *)(v6 + 48) + 80 * result;
    *(void *)uint64_t v22 = v19;
    *(void *)(v22 + 8) = v29;
    *(__n128 *)(v22 + 16) = v28;
    *(__n128 *)(v22 + 32) = v27;
    *(__n128 *)(v22 + 48) = v26;
    *(__n128 *)(v22 + 64) = v25;
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x263F8EE88];
LABEL_34:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v15 >= a2) {
      goto LABEL_34;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_34;
      }
      unint64_t v16 = a1[v11];
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*(void *)(v9 + 48) + 8 * v22) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_34;
    }
  }
  uint64_t v17 = v15 + 2;
  if (v17 >= a2) {
    goto LABEL_34;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_34;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;

  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_34:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *a1;
  }
  unint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      uint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    unint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_37;
    }
    if (v14 >= v30) {
      goto LABEL_34;
    }
    uint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      unint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_34;
      }
      uint64_t v15 = a1[v10];
      if (!v15) {
        break;
      }
    }
LABEL_21:
    uint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      char v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      BOOL v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        __n128 v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      char v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    __n128 v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *__n128 v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_34;
    }
  }
  unint64_t v16 = v14 + 2;
  if (v16 >= v30) {
    goto LABEL_34;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    unint64_t v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_34;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v29[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v29[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::UInt v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v10 + 48) + 8 * v23) = v19;
    ++*(void *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v29[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v29[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    unint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    unint64_t v6 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x22A696500](v7, -1, -1);
  }
  return v6;
}

unint64_t specialized closure #1 in _NativeSet.filter(_:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  size_t v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if (*(void *)(*(void *)(a3 + 48) + 80 * v14))
    {
      *(void *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v5, a2, v6, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v12) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v8 + 8 * v17);
  if (v16)
  {
    int64_t v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v7);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized static CollisionPlane_v1.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  if (a1->i64[0] == a2->i64[0] && a1->f32[2] == a2->f32[2] && a1->f32[3] == a2->f32[3]) {
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[3], a2[3]), (int8x16_t)vceqq_f32(a1[4], a2[4])), vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[1], a2[1])))) >> 31;
  }
  else {
    return 0;
  }
}

BOOL specialized static ParticleEmitterComponent.ParticleEmitter.BillboardMode.== infix(_:_:)(float *a1, uint64_t *a2)
{
  float v2 = a1[4];
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  int v5 = *((_DWORD *)a2 + 4);
  if (*((unsigned char *)a1 + 20) == 1)
  {
    if (*(_OWORD *)a1 != 0 || LODWORD(v2) != 0)
    {
      if (*((unsigned char *)a2 + 20))
      {
        if (v3 | v4) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = v5 == 0;
        }
        return !v7;
      }
      return 0;
    }
    if (!*((unsigned char *)a2 + 20)) {
      return 0;
    }
    return !(v3 | v4) && v5 == 0;
  }
  else
  {
    if (*((unsigned char *)a2 + 20)) {
      return 0;
    }
    uint64_t v9 = 0;
    long long v10 = *(_OWORD *)a1;
    long long v11 = *(_OWORD *)a2;
    float v12 = *((float *)a2 + 4);
    while (1)
    {
      long long v17 = v10;
      float v15 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
      long long v18 = v11;
      float v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
      BOOL v13 = v15 == v16;
      if (v9 == 2) {
        break;
      }
      while (1)
      {
        ++v9;
        if (v13) {
          break;
        }
        BOOL v13 = 0;
        BOOL result = 0;
        if (v9 == 2) {
          return result;
        }
      }
    }
    return v2 == v12 && v15 == v16;
  }
}

BOOL specialized static ParticleEmitterComponent.ParticleEmitter.ImageSequence.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 16), *(int64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) != 0&& *(float *)(a1 + 32) == *(float *)(a2 + 32)&& *(float *)(a1 + 36) == *(float *)(a2 + 36))
  {
    return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return result;
}

uint64_t specialized static ParticleEmitterComponent.BirthLocation.== infix(_:_:)(uint64_t a1, int8x16_t *a2)
{
  int8x16_t v3 = *(int8x16_t *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  int8x16_t v4 = *a2;
  int8x16_t v5 = a2[1];
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    if (vorrq_s8((int8x16_t)vdupq_lane_s64(v2, 0), v3).i64[1] | v3.i64[0] | *((void *)&v2 + 1))
    {
      if (a2[2].i8[0]) {
        return vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_lane_s64(v5.i64[0], 0), vorrq_s8(v4, v5)), 1), v4).u64[0] != 0;
      }
    }
    else if (a2[2].i8[0])
    {
      return vorrq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vorrq_s8((int8x16_t)vdupq_lane_s64(v5.i64[0], 0), vorrq_s8(v4, v5)), 1), v4).u64[0] == 0;
    }
  }
  else if ((a2[2].i8[0] & 1) == 0)
  {
    uint64_t v7 = 0;
    while (1)
    {
      v13[0] = v3;
      v13[1] = v2;
      uint64_t v9 = 8 * (v7 & 3);
      uint64_t v10 = *(void *)((char *)v13 + v9);
      v12[0] = v4;
      v12[1] = v5;
      uint64_t v11 = *(void *)((char *)v12 + v9);
      BOOL v8 = v10 == v11;
      if (v7 == 2) {
        break;
      }
      while (1)
      {
        ++v7;
        if (v8) {
          break;
        }
        if (v7 == 2) {
          return 0;
        }
        BOOL v8 = 0;
      }
    }
    if (v10 == v11) {
      return 1;
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.CodingKeys and conformance ParticleEmitterComponent.BirthLocation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VerticesCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VerticesCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.VolumeCodingKeys and conformance ParticleEmitterComponent.BirthLocation.VolumeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys and conformance ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.CodingKeys and conformance ParticleEmitterComponent.BirthDirection.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.NormalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.NormalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.LocalCodingKeys and conformance ParticleEmitterComponent.BirthDirection.LocalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection.WorldCodingKeys and conformance ParticleEmitterComponent.BirthDirection.WorldCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.CodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys and conformance ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.CodingKeys and conformance ParticleEmitterComponent.SimulationSpace.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace.LocalCodingKeys and conformance ParticleEmitterComponent.SimulationSpace.LocalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.CodingKeys and conformance ParticleEmitterComponent.SimulationState.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.StopCodingKeys and conformance ParticleEmitterComponent.SimulationState.StopCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PauseCodingKeys and conformance ParticleEmitterComponent.SimulationState.PauseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState.PlayCodingKeys and conformance ParticleEmitterComponent.SimulationState.PlayCodingKeys);
  }
  return result;
}

double _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOi0_(uint64_t a1)
{
  *(unsigned char *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined init with take of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *outlined retain of ParticleEmitterComponent.ParticleEmitter(void *a1)
{
  long long v2 = (void *)a1[6];
  int8x16_t v3 = (void *)a1[7];
  uint64_t v4 = (void *)a1[9];
  int8x16_t v5 = (void *)a1[10];
  swift_retain();
  id v6 = v2;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  return a1;
}

uint64_t outlined release of ParticleEmitterComponent.ParticleEmitter(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  int8x16_t v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(void **)(a1 + 72);

  swift_release();
  return a1;
}

uint64_t outlined retain of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v9 = *(unsigned char *)(a1 + 320);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    v9);
  return a1;
}

uint64_t outlined consume of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11)
{
  if (a7)
  {

    return swift_release();
  }
  return result;
}

uint64_t _s17RealityFoundation24ParticleEmitterComponentV0cD0VSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.CodingKeys and conformance ParticleEmitterComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.EmitterShape and conformance ParticleEmitterComponent.EmitterShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthLocation and conformance ParticleEmitterComponent.BirthLocation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.BirthDirection and conformance ParticleEmitterComponent.BirthDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SpawnOccasion and conformance ParticleEmitterComponent.SpawnOccasion);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationState and conformance ParticleEmitterComponent.SimulationState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.SimulationSpace and conformance ParticleEmitterComponent.SimulationSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter and conformance ParticleEmitterComponent.ParticleEmitter);
  }
  return result;
}

uint64_t outlined release of ParticleEmitterComponent(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 288);
  int8x16_t v3 = *(void **)(a1 + 296);
  long long v4 = *(void **)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 584);
  uint64_t v15 = *(void *)(a1 + 576);
  uint64_t v12 = *(void *)(a1 + 600);
  uint64_t v13 = *(void *)(a1 + 592);
  uint64_t v10 = *(void *)(a1 + 616);
  uint64_t v11 = *(void *)(a1 + 608);
  long long v8 = *(void **)(a1 + 632);
  char v9 = *(void **)(a1 + 624);
  long long v6 = *(_OWORD *)(a1 + 656);
  long long v7 = *(_OWORD *)(a1 + 640);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of ParticleEmitterComponent.ParticleEmitter?(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((void **)&v7 + 1), (void *)v6);
  return a1;
}

unint64_t type metadata accessor for NSValue()
{
  unint64_t result = lazy cache variable for type metadata for NSValue;
  if (!lazy cache variable for type metadata for NSValue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys and conformance ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BillboardMode and conformance ParticleEmitterComponent.ParticleEmitter.BillboardMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.OpacityCurve and conformance ParticleEmitterComponent.ParticleEmitter.OpacityCurve);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.SortOrder and conformance ParticleEmitterComponent.ParticleEmitter.SortOrder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.BlendMode and conformance ParticleEmitterComponent.ParticleEmitter.BlendMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.ParticleEmitter.ImageSequence and conformance ParticleEmitterComponent.ParticleEmitter.ImageSequence);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CollisionPlane_v1] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1.CodingKeys and conformance CollisionPlaneExtent_v1.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlaneExtent_v1 and conformance CollisionPlaneExtent_v1);
  }
  return result;
}

uint64_t sub_22818B694@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 170);
  return result;
}

char *sub_22818B6A0(char *result, uint64_t a2)
{
  char v2 = *result;
  *(unsigned char *)(a2 + 170) = *result;
  *(unsigned char *)(a2 + 171) = v2 ^ 1;
  return result;
}

float sub_22818B6B4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 216);
  *a2 = result;
  return result;
}

float *sub_22818B6C0(float *result, uint64_t a2)
{
  float v2 = fminf(*result, 2.0);
  if (v2 < 0.0) {
    float v2 = 0.0;
  }
  *(float *)(a2 + 216) = v2;
  return result;
}

uint64_t sub_22818B6E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 224);
  return swift_bridgeObjectRetain();
}

uint64_t sub_22818B6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?(a1 + 576, (uint64_t)v4);
  outlined init with take of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, a2);
  return outlined retain of ParticleEmitterComponent.ParticleEmitter?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of ParticleEmitterComponent.ParticleEmitter?);
}

uint64_t destroy for ParticleEmitterComponent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_release();
  int8x16_t v3 = *(void **)(a1 + 624);
  if (v3)
  {

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  uint64_t v6 = *(void *)(a2 + 176);
  uint64_t v7 = a2 + 240;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  uint64_t v8 = a1 + 240;
  *(void *)(a1 + 176) = v6;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  uint64_t v9 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v9;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v10 = *(void **)(a2 + 288);
  uint64_t v11 = *(void **)(a2 + 296);
  *(void *)(a1 + 288) = v10;
  *(void *)(a1 + 296) = v11;
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  uint64_t v13 = *(void **)(a2 + 312);
  uint64_t v12 = *(void **)(a2 + 320);
  *(void *)(a1 + 312) = v13;
  *(void *)(a1 + 320) = v12;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  long long v14 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 349) = *(void *)(a2 + 349);
  *(_OWORD *)(a1 + 336) = v14;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  long long v15 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v15;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  *(_OWORD *)(a1 + 412) = *(_OWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  *(unsigned char *)(a1 + 505) = *(unsigned char *)(a2 + 505);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  long long v16 = *(_OWORD *)(a2 + 520);
  long long v17 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  *(_OWORD *)(a1 + 520) = v16;
  *(_OWORD *)(a1 + 536) = v17;
  long long v18 = *(void **)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = v10;
  id v20 = v11;
  id v21 = v13;
  id v22 = v12;
  swift_retain();
  if (v18)
  {
    uint64_t v23 = v8 + 172;
    uint64_t v24 = v7 + 172;
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
    *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
    *(unsigned char *)(a1 + 612) = *(unsigned char *)(a2 + 612);
    *(void *)(a1 + 616) = *(void *)(a2 + 616);
    *(void *)(a1 + 624) = v18;
    unint64_t v25 = *(void **)(a2 + 632);
    *(void *)(a1 + 632) = v25;
    *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
    BOOL v26 = *(void **)(a2 + 648);
    *(void *)(a1 + 648) = v26;
    uint64_t v27 = *(void **)(a2 + 656);
    *(void *)(a1 + 656) = v27;
    *(_WORD *)(a1 + 664) = *(_WORD *)(a2 + 664);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(void *)(a1 + 685) = *(void *)(a2 + 685);
    *(void *)(a1 + 696) = *(void *)(a2 + 696);
    long long v28 = *(_OWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 720) = v28;
    *(void *)(a1 + 736) = *(void *)(a2 + 736);
    *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
    *(_OWORD *)(v23 + 336) = *(_OWORD *)(v24 + 336);
    *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
    *(void *)(a1 + 768) = *(void *)(a2 + 768);
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
    *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
    *(unsigned char *)(a1 + 832) = *(unsigned char *)(a2 + 832);
    *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
    *(unsigned char *)(a1 + 840) = *(unsigned char *)(a2 + 840);
    *(unsigned char *)(a1 + 841) = *(unsigned char *)(a2 + 841);
    *(void *)(a1 + 848) = *(void *)(a2 + 848);
    long long v29 = *(_OWORD *)(a2 + 856);
    long long v30 = *(_OWORD *)(a2 + 872);
    *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
    *(_OWORD *)(a1 + 856) = v29;
    *(_OWORD *)(a1 + 872) = v30;
    id v31 = v18;
    id v32 = v25;
    id v33 = v26;
    id v34 = v27;
    swift_retain();
  }
  else
  {
    memcpy((void *)(v8 + 336), (const void *)(v7 + 336), 0x141uLL);
  }
  *(unsigned char *)(a1 + 897) = *(unsigned char *)(a2 + 897);
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  uint64_t v6 = *(void **)(a2 + 288);
  uint64_t v7 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = v6;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 296);
  uint64_t v10 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v9;
  id v11 = v9;

  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  uint64_t v12 = *(void **)(a2 + 312);
  uint64_t v13 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = v12;
  id v14 = v12;

  long long v15 = *(void **)(a2 + 320);
  long long v16 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v15;
  id v17 = v15;

  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  long long v18 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 349) = *(void *)(a2 + 349);
  *(_OWORD *)(a1 + 336) = v18;
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  *(unsigned char *)(a1 + 505) = *(unsigned char *)(a2 + 505);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_retain();
  swift_release();
  long long v19 = *(_OWORD *)(a2 + 520);
  long long v20 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  *(_OWORD *)(a1 + 520) = v19;
  *(_OWORD *)(a1 + 536) = v20;
  id v21 = *(void **)(a1 + 624);
  uint64_t v22 = *(void *)(a2 + 624);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
      *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
      *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
      *(unsigned char *)(a1 + 612) = *(unsigned char *)(a2 + 612);
      *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
      *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
      char v37 = *(void **)(a2 + 624);
      *(void *)(a1 + 624) = v37;
      __n128 v38 = *(void **)(a2 + 632);
      *(void *)(a1 + 632) = v38;
      *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
      __n128 v39 = *(void **)(a2 + 648);
      *(void *)(a1 + 648) = v39;
      __n128 v40 = *(void **)(a2 + 656);
      *(void *)(a1 + 656) = v40;
      *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
      *(unsigned char *)(a1 + 665) = *(unsigned char *)(a2 + 665);
      long long v41 = *(_OWORD *)(a2 + 672);
      *(void *)(a1 + 685) = *(void *)(a2 + 685);
      *(_OWORD *)(a1 + 672) = v41;
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
      *(void *)(a1 + 704) = *(void *)(a2 + 704);
      *(void *)(a1 + 712) = *(void *)(a2 + 712);
      *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
      *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
      *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
      *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
      *(_DWORD *)(a1 + 736) = *(_DWORD *)(a2 + 736);
      *(_DWORD *)(a1 + 740) = *(_DWORD *)(a2 + 740);
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
      *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
      *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
      *(_DWORD *)(a1 + 756) = *(_DWORD *)(a2 + 756);
      *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
      *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
      *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
      *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(unsigned char *)(a1 + 832) = *(unsigned char *)(a2 + 832);
      *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
      *(unsigned char *)(a1 + 840) = *(unsigned char *)(a2 + 840);
      *(unsigned char *)(a1 + 841) = *(unsigned char *)(a2 + 841);
      *(void *)(a1 + 848) = *(void *)(a2 + 848);
      long long v42 = *(_OWORD *)(a2 + 856);
      long long v43 = *(_OWORD *)(a2 + 872);
      *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
      *(_OWORD *)(a1 + 856) = v42;
      *(_OWORD *)(a1 + 872) = v43;
      id v44 = v37;
      id v45 = v38;
      id v46 = v39;
      id v47 = v40;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy((void *)(a1 + 576), (const void *)(a2 + 576), 0x141uLL);
    goto LABEL_8;
  }
  if (!v22)
  {
    outlined destroy of ParticleEmitterComponent.ParticleEmitter((id *)(a1 + 576));
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(unsigned char *)(a1 + 612) = *(unsigned char *)(a2 + 612);
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
  uint64_t v23 = *(void **)(a2 + 624);
  *(void *)(a1 + 624) = v23;
  id v24 = v23;

  unint64_t v25 = *(void **)(a2 + 632);
  BOOL v26 = *(void **)(a1 + 632);
  *(void *)(a1 + 632) = v25;
  id v27 = v25;

  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  long long v28 = *(void **)(a2 + 648);
  long long v29 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = v28;
  id v30 = v28;

  id v31 = *(void **)(a2 + 656);
  id v32 = *(void **)(a1 + 656);
  *(void *)(a1 + 656) = v31;
  id v33 = v31;

  *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
  *(unsigned char *)(a1 + 665) = *(unsigned char *)(a2 + 665);
  long long v34 = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 685) = *(void *)(a2 + 685);
  *(_OWORD *)(a1 + 672) = v34;
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 732);
  *(_DWORD *)(a1 + 736) = *(_DWORD *)(a2 + 736);
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(a2 + 740);
  *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(a2 + 756);
  *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
  *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(unsigned char *)(a1 + 832) = *(unsigned char *)(a2 + 832);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(unsigned char *)(a1 + 840) = *(unsigned char *)(a2 + 840);
  *(unsigned char *)(a1 + 841) = *(unsigned char *)(a2 + 841);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  swift_retain();
  swift_release();
  long long v35 = *(_OWORD *)(a2 + 856);
  long long v36 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
  *(_OWORD *)(a1 + 856) = v35;
  *(_OWORD *)(a1 + 872) = v36;
LABEL_8:
  *(unsigned char *)(a1 + 897) = *(unsigned char *)(a2 + 897);
  return a1;
}

id *outlined destroy of ParticleEmitterComponent.ParticleEmitter(id *a1)
{
  return a1;
}

void *__swift_memcpy898_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x382uLL);
}

uint64_t assignWithTake for ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v6 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);

  uint64_t v7 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);

  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  id v8 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);

  uint64_t v9 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);

  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 349) = *(void *)(a2 + 349);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v10;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  *(_OWORD *)(a1 + 412) = *(_OWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(_DWORD *)(a1 + 500) = *(_DWORD *)(a2 + 500);
  *(_WORD *)(a1 + 504) = *(_WORD *)(a2 + 504);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_release();
  long long v11 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v11;
  *(_OWORD *)(a1 + 545) = *(_OWORD *)(a2 + 545);
  uint64_t v12 = *(void **)(a1 + 624);
  if (!v12) {
    goto LABEL_5;
  }
  uint64_t v13 = *(void *)(a2 + 624);
  if (!v13)
  {
    outlined destroy of ParticleEmitterComponent.ParticleEmitter((id *)(a1 + 576));
LABEL_5:
    memcpy((void *)(a1 + 576), (const void *)(a2 + 576), 0x141uLL);
    goto LABEL_6;
  }
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(unsigned char *)(a1 + 612) = *(unsigned char *)(a2 + 612);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = v13;

  id v14 = *(void **)(a1 + 632);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);

  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  long long v15 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);

  long long v16 = *(void **)(a1 + 656);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);

  *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
  *(unsigned char *)(a1 + 665) = *(unsigned char *)(a2 + 665);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 685) = *(void *)(a2 + 685);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  long long v17 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v17;
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 748);
  *(_DWORD *)(a1 + 764) = *(_DWORD *)(a2 + 764);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(unsigned char *)(a1 + 832) = *(unsigned char *)(a2 + 832);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(_WORD *)(a1 + 840) = *(_WORD *)(a2 + 840);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  swift_release();
  long long v18 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 872) = v18;
  *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
LABEL_6:
  *(unsigned char *)(a1 + 897) = *(unsigned char *)(a2 + 897);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 898)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 224);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 888) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_WORD *)(result + 896) = 0;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 898) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 224) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 898) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent()
{
  return &type metadata for ParticleEmitterComponent;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.EmitterShape()
{
  return &type metadata for ParticleEmitterComponent.EmitterShape;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.BirthLocation()
{
  return &type metadata for ParticleEmitterComponent.BirthLocation;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.BirthDirection()
{
  return &type metadata for ParticleEmitterComponent.BirthDirection;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SpawnOccasion()
{
  return &type metadata for ParticleEmitterComponent.SpawnOccasion;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SimulationSpace()
{
  return &type metadata for ParticleEmitterComponent.SimulationSpace;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.SimulationState()
{
  return &type metadata for ParticleEmitterComponent.SimulationState;
}

uint64_t destroy for ParticleEmitterComponent.ParticleEmitter(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  int8x16_t v3 = *(void **)(a2 + 48);
  long long v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void **)(a2 + 72);
  long long v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(unsigned char *)(a1 + 265) = *(unsigned char *)(a2 + 265);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  long long v8 = *(_OWORD *)(a2 + 280);
  long long v9 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  *(_OWORD *)(a1 + 280) = v8;
  *(_OWORD *)(a1 + 296) = v9;
  id v10 = v3;
  id v11 = v4;
  id v12 = v6;
  id v13 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  long long v4 = *(void **)(a2 + 48);
  long long v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  id v6 = v4;

  long long v7 = *(void **)(a2 + 56);
  long long v8 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  id v10 = *(void **)(a2 + 72);
  id v11 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 80);
  id v14 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v13;
  id v15 = v13;

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  long long v16 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(_OWORD *)(a1 + 96) = v16;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(unsigned char *)(a1 + 265) = *(unsigned char *)(a2 + 265);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_retain();
  swift_release();
  long long v17 = *(_OWORD *)(a2 + 280);
  long long v18 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 296) = v18;
  return a1;
}

void *__swift_memcpy321_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x141uLL);
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  long long v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v5 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_release();
  long long v7 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v7;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)(a2 + 305);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 321)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(unsigned char *)(result + 320) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 321) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 321) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 13) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 21) = v3;
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.BillboardMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 20) = 1;
  }
  else
  {
    *(unsigned char *)(result + 20) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.BillboardMode;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.OpacityCurve;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.SortOrder;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.BlendMode;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ImageSequence(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ImageSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode;
}

uint64_t getEnumTagSinglePayload for CollisionPlane_v1(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CollisionPlane_v1(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CollisionPlane_v1()
{
  return &type metadata for CollisionPlane_v1;
}

ValueMetadata *type metadata accessor for CollisionPlaneExtent_v1()
{
  return &type metadata for CollisionPlaneExtent_v1;
}

void *type metadata accessor for CollisionPlaneExtent_v1.CodingKeys()
{
  return &unk_26DCAFAD0;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD5) {
    goto LABEL_17;
  }
  if (a2 + 43 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 43) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 43;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 43;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 43;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2C;
  int v8 = v6 - 44;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 43 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 43) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD4)
  {
    unsigned int v6 = ((a2 - 213) >> 8) + 1;
    *uint64_t result = a2 + 43;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818D118);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 43;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDD) {
    goto LABEL_17;
  }
  if (a2 + 35 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 35) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 35;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v8 = v6 - 36;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *uint64_t result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818D2ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 35;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.CodingKeys()
{
  return &unk_26DCAFBF0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys()
{
  return &unk_26DCAFC80;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys()
{
  return &unk_26DCAFD10;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.PlayOnceCodingKeys()
{
  return &unk_26DCAFD30;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.LoopingCodingKeys()
{
  return &unk_26DCAFD50;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.AutoReverseCodingKeys()
{
  return &unk_26DCAFD70;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys()
{
  return &unk_26DCAFE00;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AlphaCodingKeys()
{
  return &unk_26DCAFE20;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.OpaqueCodingKeys()
{
  return &unk_26DCAFE40;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode.AdditiveCodingKeys()
{
  return &unk_26DCAFE60;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys()
{
  return &unk_26DCAFEF0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingDepthCodingKeys()
{
  return &unk_26DCAFF10;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingDepthCodingKeys()
{
  return &unk_26DCAFF30;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingIDCodingKeys()
{
  return &unk_26DCAFF50;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingIDCodingKeys()
{
  return &unk_26DCAFF70;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.IncreasingAgeCodingKeys()
{
  return &unk_26DCAFF90;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.DecreasingAgeCodingKeys()
{
  return &unk_26DCAFFB0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder.UnsortedCodingKeys()
{
  return &unk_26DCAFFD0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys()
{
  return &unk_26DCB0060;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeOutCodingKeys()
{
  return &unk_26DCB0080;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.LinearFadeInCodingKeys()
{
  return &unk_26DCB00A0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.GradualFadeInOutCodingKeys()
{
  return &unk_26DCB00C0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.QuickFadeInOutCodingKeys()
{
  return &unk_26DCB00E0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeInCodingKeys()
{
  return &unk_26DCB0100;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.EaseFadeOutCodingKeys()
{
  return &unk_26DCB0120;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve.ConstantCodingKeys()
{
  return &unk_26DCB0140;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys()
{
  return &unk_26DCB01D0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardCodingKeys()
{
  return &unk_26DCB01F0;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.BillboardYAlignedCodingKeys()
{
  return &unk_26DCB0210;
}

void *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys()
{
  return &unk_26DCB02A0;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.CodingKeys()
{
  return &unk_26DCB0330;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.PlayCodingKeys()
{
  return &unk_26DCB0350;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.PauseCodingKeys()
{
  return &unk_26DCB0370;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationState.StopCodingKeys()
{
  return &unk_26DCB0390;
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.SimulationSpace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818D5C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.CodingKeys()
{
  return &unk_26DCB0420;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.LocalCodingKeys()
{
  return &unk_26DCB0440;
}

void *type metadata accessor for ParticleEmitterComponent.SimulationSpace.GlobalCodingKeys()
{
  return &unk_26DCB0460;
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.SpawnOccasion(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818D6E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.CodingKeys()
{
  return &unk_26DCB04F0;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnBirthCodingKeys()
{
  return &unk_26DCB0510;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnUpdateCodingKeys()
{
  return &unk_26DCB0530;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnDeathCodingKeys()
{
  return &unk_26DCB0550;
}

void *type metadata accessor for ParticleEmitterComponent.SpawnOccasion.OnCollideCodingKeys()
{
  return &unk_26DCB0570;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.CodingKeys()
{
  return &unk_26DCB0600;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.WorldCodingKeys()
{
  return &unk_26DCB0620;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.LocalCodingKeys()
{
  return &unk_26DCB0640;
}

void *type metadata accessor for ParticleEmitterComponent.BirthDirection.NormalCodingKeys()
{
  return &unk_26DCB0660;
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.BirthDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818D868);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.CodingKeys()
{
  return &unk_26DCB06F0;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.SurfaceCodingKeys()
{
  return &unk_26DCB0710;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.VolumeCodingKeys()
{
  return &unk_26DCB0730;
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22818D95CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.BirthLocation.VerticesCodingKeys()
{
  return &unk_26DCB07C0;
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.EmitterShape(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22818DA60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.CodingKeys()
{
  return &unk_26DCB0850;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.PointCodingKeys()
{
  return &unk_26DCB0870;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.PlaneCodingKeys()
{
  return &unk_26DCB0890;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.BoxCodingKeys()
{
  return &unk_26DCB08B0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.SphereCodingKeys()
{
  return &unk_26DCB08D0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.ConeCodingKeys()
{
  return &unk_26DCB08F0;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.CylinderCodingKeys()
{
  return &unk_26DCB0910;
}

void *type metadata accessor for ParticleEmitterComponent.EmitterShape.TorusCodingKeys()
{
  return &unk_26DCB0930;
}

uint64_t specialized CollisionPlaneExtent_v1.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.EmitterShape.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E696F70 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E616C70 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7892834 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657265687073 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701736291 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7265646E696C7963 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7375726F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.EmitterCodingKeys.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x2C) {
    return 44;
  }
  else {
    return v0;
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.OpacityCurve.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61467261656E696CLL && a2 == 0xED000074754F6564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61467261656E696CLL && a2 == 0xEC0000006E496564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022835B160 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6461466B63697571 && a2 == 0xEE0074754F6E4965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6564614665736165 && a2 == 0xEA00000000006E49 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6564614665736165 && a2 == 0xEB0000000074754FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72616F626C6C6962 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022835B140 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701147238 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BillboardMode.FreeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1936291937 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746169726176 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F43776F72 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F436E6D756C6F63 && a2 == 0xEB00000000746E75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x466C616974696E69 && a2 == 0xEC000000656D6172 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022835B180 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746152656D617266 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022835B1A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xED000065646F4D6ELL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E4F79616C70 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69706F6F6CLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657665526F747561 && a2 == 0xEB00000000657372)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.BlendMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6168706C61 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65757161706FLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6576697469646461 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.ParticleEmitter.SortOrder.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6973616572636E69 && a2 == 0xEF6874706544676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xEF6874706544676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973616572636E69 && a2 == 0xEC0000004449676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xEC0000004449676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6973616572636E69 && a2 == 0xED0000656741676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6973616572636564 && a2 == 0xED0000656741676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x646574726F736E75 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000022835B1C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022835B1E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61727544656C6469 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022835B200 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754470756D726177 && a2 == 0xEE006E6F69746172 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F4C646C756F6873 && a2 == 0xEA0000000000706FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5372657474696D65 && a2 == 0xEC00000065706168 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x636F4C6874726962 && a2 == 0xED00006E6F697461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7269446874726962 && a2 == 0xEE006E6F69746365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022835B220 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7261566465657073 && a2 == 0xEE006E6F69746169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022835B240 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6D416C6169646172 && a2 == 0xEC000000746E756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022835B260 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x63634F6E77617073 && a2 == 0xED00006E6F697361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000022835B280 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022835B2A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000022835B2C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022835B2E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEF65746174536E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEF65636170536E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000022835B300 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000022835B320 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x4374726174736572 && a2 == 0xEC000000746E756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022835B340 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x697474696D457369 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022835B360 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x756F437473727562 && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000022835B380 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x6974616C756D6973 && a2 == 0xEE00657461526E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022835B3A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000022835B3C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x74696D456E69616DLL && a2 == 0xEB00000000726574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x4564656E77617073 && a2 == 0xEE0072657474696DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022835B3E0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 35;
    }
    else {
      return 36;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.BirthLocation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636166727573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7365636974726576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.SpawnOccasion.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68747269426E6FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616470556E6FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68746165446E6FLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64696C6C6F436E6FLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.BirthDirection.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646C726F77 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.SimulationSpace.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61626F6C67 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.SimulationState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2036427888 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6573756170 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1886352499 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    long long v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : AnimationResource].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id static __RKEntityCustomAction.RKEntityCustomActionNotification.name.getter()
{
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static __RKEntityCustomAction.RKEntityCustomActionNotification.name;

  return v0;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.sceneKey.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.identifierKey.getter()
{
  return 0xD000000000000022;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.entityKey.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static __RKEntityCustomAction.RKEntityCustomActionNotification.customArgumentsKey.getter()
{
  return 0xD000000000000027;
}

uint64_t key path getter for __RKEntityCustomAction.handler : __RKEntityCustomAction@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 120);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    BOOL v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Entity?) -> ();
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityCustomAction.handler : __RKEntityCustomAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 112);
  *(void *)(v7 + 112) = v6;
  *(void *)(v7 + 120) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t __RKEntityCustomAction.handler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityCustomAction.handler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 112);
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityCustomAction.handler.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityCustomAction.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityCustomAction.customArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for __RKEntityCustomAction.customArgumentsBlock : __RKEntityCustomAction@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(void *)(v3 + 160);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Entity?, @guaranteed [String : String]?) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityCustomAction.customArgumentsBlock : __RKEntityCustomAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity?, @in_guaranteed [String : String]?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 152);
  *(void *)(v7 + 152) = v6;
  *(void *)(v7 + 160) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t __RKEntityCustomAction.customArgumentsBlock.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 152);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityCustomAction.customArgumentsBlock.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 152);
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityCustomAction.customArgumentsBlock.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityCustomAction.__allocating_init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v15 = (void *)swift_allocObject();
  v15[19] = 0;
  v15[14] = 0;
  v15[20] = 0;
  v15[15] = 0;
  v15[16] = a2;
  v15[17] = a3;
  swift_beginAccess();
  uint64_t v16 = v15[14];
  v15[14] = a4;
  v15[15] = a5;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  if (!a6) {
    a6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  v15[18] = a6;
  swift_beginAccess();
  uint64_t v17 = v15[19];
  v15[19] = a7;
  v15[20] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v17);
  swift_release();
  uint64_t v18 = __RKEntityAction.init(targetEntity:)(a1);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a4);
  return v18;
}

uint64_t __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = specialized __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(a1, a2, a3, a4, a5, a6, a7, a8);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a4);
  return v10;
}

uint64_t __RKEntityCustomAction.perform(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)&long long v43 = StaticString.description.getter();
  *((void *)&v43 + 1) = v4;
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  long long v6 = v43;
  uint64_t v7 = (void *)(v1 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 104) == 1 && *v7 == 1 && (swift_beginAccess(), *(unsigned char *)(v2 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    uint64_t v20 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v43);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v8, &v43);
  uint64_t v9 = *(void *)(v2 + 96);
  char v10 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = 1;
  *(unsigned char *)(v2 + 104) = 1;
  *(void *)&long long v43 = v9;
  BYTE8(v43) = v10;
  __RKEntityAction.state.didset((uint64_t)&v43);
  swift_beginAccess();
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 152);
  if (v11)
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v2 + 144);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v11);
    uint64_t v13 = swift_retain();
    v11(v13, v12);
    swift_release();
    uint64_t v14 = (uint64_t)v11;
LABEL_7:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
LABEL_8:
    v42[0] = v6;
    uint64_t v15 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v15, v42);
    uint64_t v16 = *(void *)(v2 + 96);
    char v17 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 2;
    uint64_t v18 = 1;
    *(unsigned char *)(v2 + 104) = 1;
    *(void *)&v42[0] = v16;
    BYTE8(v42[0]) = v17;
    __RKEntityAction.state.didset((uint64_t)v42);
    v42[0] = v6;
    uint64_t v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, v42);
    swift_bridgeObjectRelease();
    return v18;
  }
  swift_beginAccess();
  unint64_t v22 = *(void (**)(uint64_t))(v2 + 112);
  if (!v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 32) = 0xD000000000000022;
    *(void *)(inited + 40) = 0x800000022835B420;
    uint64_t v29 = *(void *)(v2 + 128);
    uint64_t v28 = *(void *)(v2 + 136);
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v29;
    *(void *)(inited + 56) = v28;
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v44 = type metadata accessor for Scene();
    *(void *)&long long v43 = v3;
    outlined init with take of Any(&v43, v42);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD00000000000001DLL, 0x800000022835B400, isUniquelyReferenced_nonNull_native);
    unint64_t v45 = v30;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v32 = *(void *)(v2 + 16);
    if (v32)
    {
      uint64_t v44 = type metadata accessor for Entity();
      *(void *)&long long v43 = v32;
      outlined init with take of Any(&v43, v42);
      swift_retain();
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD00000000000001ELL, 0x800000022835B450, v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001ELL, 0x800000022835B450, &v43);
      outlined destroy of Any?((uint64_t)&v43);
      unint64_t v30 = v45;
    }
    uint64_t v36 = *(void *)(v2 + 144);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    *(void *)&long long v43 = v36;
    outlined init with take of Any(&v43, v42);
    swift_bridgeObjectRetain();
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, 0xD000000000000027, 0x800000022835B470, v37);
    uint64_t v38 = v30;
    swift_bridgeObjectRelease();
    id v39 = objc_msgSend(self, sel_defaultCenter);
    if (one-time initialization token for name != -1) {
      swift_once();
    }
    uint64_t v40 = static __RKEntityCustomAction.RKEntityCustomActionNotification.name;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v38);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v39, sel_postNotificationName_object_userInfo_, v40, 0, isa);

    goto LABEL_8;
  }
  swift_beginAccess();
  uint64_t v23 = *(void *)(v2 + 16);
  if (!v23)
  {
    swift_retain();
    v22(0);
    uint64_t v14 = (uint64_t)v22;
    goto LABEL_7;
  }
  uint64_t v24 = *(void *)(v23 + 16);
  swift_retain();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v25 = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v34 = specialized static Entity.entityInfoType(_:)();
    if (v34)
    {
      uint64_t v26 = (*(uint64_t (**)(void))(v34 + 232))();
      uint64_t v35 = *(void *)(v26 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v35, 0);
      *(void *)(v26 + 16) = v24;
      MEMORY[0x22A68E750](v24, v26);
      swift_release();
      goto LABEL_22;
    }
    uint64_t v25 = makeEntity(for:)(v24);
LABEL_15:
    uint64_t v26 = v25;
LABEL_22:
    v22(v26);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v22);
    swift_release();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityCustomAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[16];
  uint64_t v4 = v1[17];
  swift_beginAccess();
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[15];
  uint64_t v14 = v1[18];
  swift_beginAccess();
  uint64_t v7 = v1[19];
  uint64_t v8 = v1[20];
  uint64_t v15 = type metadata accessor for __RKEntityCustomAction();
  uint64_t v9 = (void *)swift_allocObject();
  v9[14] = 0;
  v9[20] = 0;
  v9[19] = 0;
  v9[15] = 0;
  v9[16] = v3;
  v9[17] = v4;
  swift_beginAccess();
  uint64_t v13 = v9[14];
  v9[14] = v5;
  v9[15] = v6;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v5);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v13);
  v9[18] = v14;
  swift_beginAccess();
  uint64_t v10 = v9[19];
  v9[19] = v7;
  v9[20] = v8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v10);
  swift_release();
  uint64_t v11 = __RKEntityAction.init(targetEntity:)(v2);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
  a1[3] = v15;
  *a1 = v11;
  return result;
}

uint64_t __RKEntityCustomAction.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = v2[2];
  if (v5 && *(void *)(a1 + 16) == *(void *)(v5 + 16))
  {
    uint64_t v7 = v2[16];
    uint64_t v8 = v2[17];
    swift_beginAccess();
    uint64_t v9 = v2[14];
    uint64_t v10 = v2[15];
    uint64_t v17 = v2[18];
    swift_beginAccess();
    uint64_t v11 = v2[19];
    uint64_t v12 = v2[20];
    type metadata accessor for __RKEntityCustomAction();
    uint64_t v13 = (void *)swift_allocObject();
    v13[14] = 0;
    v13[20] = 0;
    v13[19] = 0;
    v13[15] = 0;
    v13[16] = v7;
    v13[17] = v8;
    swift_beginAccess();
    uint64_t v16 = v13[14];
    v13[14] = v9;
    v13[15] = v10;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v9);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    v13[18] = v17;
    swift_beginAccess();
    uint64_t v14 = v13[19];
    v13[19] = v11;
    v13[20] = v12;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
    swift_release();
    uint64_t v6 = __RKEntityAction.init(targetEntity:)(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v9);
  }
  else
  {
    __RKEntityCustomAction.copy(with:)(v19);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v18;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void __RKEntityCustomAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityCustomAction.init(targetEntity:)()
{
}

uint64_t __RKEntityCustomAction.__ivar_destroyer()
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 152);

  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v1);
}

uint64_t __RKEntityCustomAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 152));
  return v0;
}

uint64_t __RKEntityCustomAction.__deallocating_deinit()
{
  __RKEntityCustomAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized __RKEntityCustomAction.init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = 0;
  v8[20] = 0;
  v8[15] = 0;
  unsigned char v8[16] = a2;
  v8[17] = a3;
  v8[14] = 0;
  swift_beginAccess();
  uint64_t v14 = v8[14];
  v8[14] = a4;
  v8[15] = a5;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  if (!a6) {
    a6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  v8[18] = a6;
  swift_beginAccess();
  uint64_t v15 = v8[19];
  v8[19] = a7;
  v8[20] = a8;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a7);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
  swift_release();
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t type metadata accessor for __RKEntityCustomAction()
{
  return self;
}

uint64_t method lookup function for __RKEntityCustomAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityCustomAction);
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.handler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.customArgumentsBlock.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityCustomAction.__allocating_init(targetEntity:actionIdentifier:handler:customArguments:customArgumentsBlock:)()
{
  return (*(uint64_t (**)(void))(v0 + 600))();
}

ValueMetadata *type metadata accessor for __RKEntityCustomAction.RKEntityCustomActionNotification()
{
  return &type metadata for __RKEntityCustomAction.RKEntityCustomActionNotification;
}

uint64_t sub_228194B14()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity?) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Entity?) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t __RKEmphasisFloatAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisFloatAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisFloatAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisFloatAnimation.createFloatAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 375, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulFloatAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 404, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildFloatAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 318, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicFloatAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    uint64_t v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  uint64_t v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  uint64_t v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

uint64_t Entity.addRetargetingAnimationRig(source:)()
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22A692220](ServiceLocator))
  {
    if (RERigAssetCreateBipedToBipedAutoRetargetAsset())
    {
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      return RERigComponentSetRig();
    }
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    strcpy((char *)v2, "Unknown error");
    *(_WORD *)(v2 + 14) = -4864;
  }
  else
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v2 = 0xD000000000000016;
    *(void *)(v2 + 8) = 0x800000022835B590;
  }
  *(unsigned char *)(v2 + 16) = 1;
  return swift_willThrow();
}

Swift::Void __swiftcall Entity.removeAnimationRig()()
{
  RERigComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RERigComponentSetRig();
  }
}

uint64_t Entity.addAnimationRig(url:)()
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x22A692220](ServiceLocator))
  {
    URL._bridgeToObjectiveC()(v1);
    uint64_t v3 = v2;
    uint64_t AssetHandleForURL = REAssetManagerCreateAssetHandleForURL();

    if (AssetHandleForURL)
    {
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      return RERigComponentSetRig();
    }
    _StringGuts.grow(_:)(51);
    v8._uint64_t countAndFlagsBits = 0xD000000000000031;
    v8._object = (void *)0x800000022835B5B0;
    String.append(_:)(v8);
    Swift::String v9 = URL.path(percentEncoded:)(1);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0xE000000000000000;
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000016;
    unint64_t v7 = 0x800000022835B590;
  }
  *(void *)(v6 + 8) = v7;
  *(unsigned char *)(v6 + 16) = 1;
  return swift_willThrow();
}

void Scene.timebase.getter()
{
  v2[1] = *(CMTimebaseRef *)MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    if (RETimebaseServiceCreateEngineSourceTimebase()) {
      goto LABEL_6;
    }
  }
  else
  {
    swift_retain();
  }
  v2[0] = 0;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v1 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v0, v1, v2);

  if (v2[0])
  {
LABEL_6:
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t specialized getEventID<A>(_:)()
{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationHasTimelineEventStart, &demangling cache variable for type metadata for REAnimationHasTimelineEventStart.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationHasTimelineEventUpdate, &demangling cache variable for type metadata for REAnimationHasTimelineEventUpdate.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationHasTimelineEventEnd, &demangling cache variable for type metadata for REAnimationHasTimelineEventEnd.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationTimelineEventSkipped, &demangling cache variable for type metadata for REAnimationTimelineEventSkipped.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationTimelineEventPause, &demangling cache variable for type metadata for REAnimationTimelineEventPause.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationTimelineEventResume, &demangling cache variable for type metadata for REAnimationTimelineEventResume.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationTimelineEventTerminated, &demangling cache variable for type metadata for REAnimationTimelineEventTerminated.Type);
}

{
  return specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REAnimationTimelineEventCreated, &demangling cache variable for type metadata for REAnimationTimelineEventCreated.Type);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  ValueMetadata *v4;
  uint64_t *v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t result;
  void *v19;

  if (one-time initialization token for registeredEventsToEventBusIds != -1) {
    swift_once();
  }
  swift_beginAccess();
  CFAllocatorRef v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  uint64_t v1 = *((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v1)
  {
    uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineUpdateEvent);
    if (v3) {
      goto LABEL_36;
    }
  }
  swift_endAccess();
  if (swift_conformsToProtocol2()) {
    uint64_t v4 = &type metadata for EngineUpdateEvent;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v6 = &type metadata for EngineUpdateEvent;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    unint64_t v7 = &type metadata for EngineUpdateEvent;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v5 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    Swift::String v8 = &type metadata for EngineUpdateEvent;
  }
  else {
    Swift::String v8 = 0;
  }
  if (v8)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    Swift::String v9 = &type metadata for EngineUpdateEvent;
  }
  else {
    Swift::String v9 = 0;
  }
  if (v9)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
LABEL_30:
    float v10 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(v5);
    if (!v1) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  float v10 = &type metadata for EngineUpdateEvent;
  if (!v1) {
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if (v12) {
    return *(void *)(v0[7] + 8 * v11);
  }
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EngineUpdateEvent.Type);
  String.init<A>(describing:)();
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x22A68E7E0](v14 + 32);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, (uint64_t)&type metadata for EngineUpdateEvent, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  CFAllocatorRef v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineUpdateEvent);
    if (v17)
    {
LABEL_36:
      uint64_t v13 = *(void *)(v0[7] + 8 * v2);
      swift_endAccess();
      return v13;
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, &demangling cache variable for type metadata for AccessibilityCustomActionEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)(&demangling cache variable for type metadata for AccessibilityDecrementEvent, &demangling cache variable for type metadata for AccessibilityDecrementEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, &demangling cache variable for type metadata for AccessibilityIncrementEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)(&demangling cache variable for type metadata for AccessibilityActivateEvent, &demangling cache variable for type metadata for AccessibilityActivateEvent.Protocol);
}

{
  return specialized getEventID<A>(_:)((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, &demangling cache variable for type metadata for AccessibilityRotorNavigationEvent.Protocol);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  ValueMetadata *v4;
  uint64_t *v5;
  ValueMetadata *v6;
  ValueMetadata *v7;
  ValueMetadata *v8;
  ValueMetadata *v9;
  ValueMetadata *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t result;
  void *v19;

  if (one-time initialization token for registeredEventsToEventBusIds != -1) {
    swift_once();
  }
  swift_beginAccess();
  CFAllocatorRef v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  uint64_t v1 = *((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v1)
  {
    uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineRenderEvent);
    if (v3) {
      goto LABEL_36;
    }
  }
  swift_endAccess();
  if (swift_conformsToProtocol2()) {
    uint64_t v4 = &type metadata for EngineRenderEvent;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v6 = &type metadata for EngineRenderEvent;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    unint64_t v7 = &type metadata for EngineRenderEvent;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v5 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    Swift::String v8 = &type metadata for EngineRenderEvent;
  }
  else {
    Swift::String v8 = 0;
  }
  if (v8)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    Swift::String v9 = &type metadata for EngineRenderEvent;
  }
  else {
    Swift::String v9 = 0;
  }
  if (v9)
  {
    uint64_t v5 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
LABEL_30:
    float v10 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(v5);
    if (!v1) {
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  float v10 = &type metadata for EngineRenderEvent;
  if (!v1) {
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if (v12) {
    return *(void *)(v0[7] + 8 * v11);
  }
LABEL_34:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EngineRenderEvent.Type);
  String.init<A>(describing:)();
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = MEMORY[0x22A68E7E0](v14 + 32);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, (uint64_t)&type metadata for EngineRenderEvent, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  CFAllocatorRef v0 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for EngineRenderEvent);
    if (v17)
    {
LABEL_36:
      uint64_t v13 = *(void *)(v0[7] + 8 * v2);
      swift_endAccess();
      return v13;
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized getEventID<A>(_:)(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v3 = a1(0);
  if (one-time initialization token for registeredEventsToEventBusIds != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  uint64_t v5 = *((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v5)
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v7) {
      goto LABEL_36;
    }
  }
  swift_endAccess();
  if (swift_conformsToProtocol2()) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    Swift::String v9 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
LABEL_30:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
    goto LABEL_31;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    Swift::String v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v11 = v3;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11)
  {
    Swift::String v9 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v12 = v3;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    Swift::String v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v13 = v3;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v3;
  if (v13)
  {
    Swift::String v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
    goto LABEL_30;
  }
LABEL_31:
  if (v5)
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if (v16) {
      return *(void *)(v4[7] + 8 * v15);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  String.init<A>(describing:)();
  uint64_t v18 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x22A68E7E0](v18 + 32);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v3, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v23;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v21)
    {
LABEL_36:
      uint64_t v17 = *(void *)(v4[7] + 8 * v6);
      swift_endAccess();
      return v17;
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized getEventID<A>(_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  if (one-time initialization token for registeredEventsToEventBusIds != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v6)
    {
LABEL_10:
      uint64_t v9 = *(void *)(v4[7] + 8 * v5);
      swift_endAccess();
      return v9;
    }
    swift_endAccess();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v8) {
      return *(void *)(v4[7] + 8 * v7);
    }
  }
  else
  {
    swift_endAccess();
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  String.init<A>(describing:)();
  uint64_t v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v11 = MEMORY[0x22A68E7E0](v10 + 32);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v15 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v3, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v13) {
      goto LABEL_10;
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

void *ConstantForceEffect.update(parameters:)(void *result)
{
  float32x4_t v2 = v1[1];
  float32x4_t v3 = vmulq_f32(v2, v2);
  int32x2_t v4 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
  float32x4_t v5 = 0uLL;
  if (*(float *)v4.i32 != 0.0)
  {
    *(float *)v4.i32 = sqrtf(*(float *)v4.i32);
    *(float32x2_t *)v5.f32 = vdiv_f32(*(float32x2_t *)v2.f32, (float32x2_t)vdup_lane_s32(v4, 0));
    v5.f32[2] = v2.f32[2] / *(float *)v4.i32;
    v5.i32[3] = 0;
  }
  uint64_t v6 = result[1];
  if (v6 < 0)
  {
    __break(1u);
  }
  else if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = result[25];
    uint64_t v9 = result[26];
    *(float32x2_t *)&long long v10 = vmul_n_f32(*(float32x2_t *)v5.f32, v1->f32[0]);
    *((void *)&v10 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v1->f32[0], v5, 2));
    do
    {
      if (v7 < v9) {
        *(_OWORD *)(v8 + 16 * v7) = v10;
      }
      ++v7;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  aBlock[0] = a4;
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  String.utf8CString.getter();
  uint64_t v12 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffectsCodable != -1) {
    swift_once();
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = static ForceEffectComponent.registeredForceEffectsCodable;
  static ForceEffectComponent.registeredForceEffectsCodable = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a6, a7, v12, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffectsCodable = v20;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  swift_retain();
  static EntityAction.eventBus(_:)(a1);
  specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REForceEffectEventFilter();
  swift_release();
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a4;
  void v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a2;
  void v14[7] = a3;
  aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
  void aBlock[3] = &block_descriptor_122;
  unint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REEventBusSubscribeWithMatch();
  _Block_release(v15);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
}

uint64_t ConstantRadialForceEffect.update(parameters:)(uint64_t result, double a2, double a3, double a4, double a5, float32x4_t a6)
{
  if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    uint64_t v7 = *(void *)(result + 40);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v7)
    {
      uint64_t v8 = 0;
      float v9 = *v6;
      uint64_t v10 = *(void *)(result + 200);
      uint64_t v11 = *(void *)(result + 208);
      uint64_t v12 = (float *)(*(void *)(result + 32) + 8);
      do
      {
        *(float32x2_t *)a6.f32 = vsub_f32(0, *(float32x2_t *)(v12 - 2));
        float32x4_t v13 = a6;
        v13.f32[2] = 0.0 - *v12;
        float32x4_t v14 = vmulq_f32(v13, v13);
        int32x2_t v15 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u64[0];
        float32x4_t v16 = 0uLL;
        if (*(float *)v15.i32 == 0.0)
        {
          if (v8 < v11) {
            goto LABEL_10;
          }
        }
        else
        {
          *(float *)v15.i32 = sqrtf(*(float *)v15.i32);
          *(float32x2_t *)v16.f32 = vdiv_f32(*(float32x2_t *)a6.f32, (float32x2_t)vdup_lane_s32(v15, 0));
          v16.f32[2] = (float)(0.0 - *v12) / *(float *)v15.i32;
          v16.i32[3] = 0;
          if (v8 < v11)
          {
LABEL_10:
            *(float32x2_t *)a6.f32 = vmul_n_f32(*(float32x2_t *)v16.f32, v9);
            a6.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v9, v16, 2));
            *(float32x4_t *)(v10 + 16 * v8) = a6;
          }
        }
        ++v8;
        v12 += 4;
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t RadialForceEffect.update(parameters:)(uint64_t result, double a2, double a3, double a4, double a5, __n128 a6)
{
  if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v7)
    {
      uint64_t v8 = 0;
      float v9 = *v6;
      float v10 = v6[1];
      uint64_t v11 = *(void *)(result + 32);
      uint64_t v12 = *(void *)(result + 200);
      uint64_t v13 = *(void *)(result + 208);
      if (v10 < 0.0) {
        float v10 = 0.0;
      }
      do
      {
        float32x4_t v14 = *(float32x4_t *)(v11 + 16 * v8);
        float32x4_t v15 = vmulq_f32(v14, v14);
        int32x2_t v16 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u64[0];
        *(float *)v16.i32 = sqrtf(*(float *)v16.i32);
        if (*(float *)v16.i32 == 0.0)
        {
          v17.i64[0] = 0;
          v17.i32[2] = 0;
          v17.i32[3] = a6.n128_i32[3];
          if (v8 < v13) {
            goto LABEL_12;
          }
        }
        else
        {
          *(float32x2_t *)v14.f32 = vdiv_f32(vsub_f32(0, *(float32x2_t *)v14.f32), (float32x2_t)vdup_lane_s32(v16, 0));
          v17.f32[2] = (float)(0.0 - v14.f32[2]) / *(float *)v16.i32;
          v17.i32[3] = 0;
          if (v8 < v13)
          {
LABEL_12:
            float v18 = *(float *)v16.i32 - v10;
            *(float32x2_t *)&long long v19 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v17.f32, v18), v9);
            *((void *)&v19 + 1) = COERCE_UNSIGNED_INT(v9 * vmuls_lane_f32(v18, v17, 2));
            *(_OWORD *)(v12 + 16 * v8) = v19;
          }
        }
        ++v8;
      }
      while (v7 != v8);
    }
  }
  return result;
}

uint64_t VortexForceEffect.update(parameters:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    float32x4_t v2 = v1[1];
    float32x4_t v3 = vmulq_f32(v2, v2);
    int32x2_t v4 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
    float32x4_t v5 = 0uLL;
    if (*(float *)v4.i32 != 0.0)
    {
      *(float *)v4.i32 = sqrtf(*(float *)v4.i32);
      *(float32x2_t *)v5.f32 = vdiv_f32(*(float32x2_t *)v2.f32, (float32x2_t)vdup_lane_s32(v4, 0));
      v5.f32[2] = v2.f32[2] / *(float *)v4.i32;
      v5.i32[3] = 0;
    }
    uint64_t v6 = *(void *)(result + 8);
    if (v6 < 0)
    {
      __break(1u);
    }
    else if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(result + 32);
      float v9 = v1->f32[0];
      uint64_t v10 = *(void *)(result + 200);
      uint64_t v11 = *(void *)(result + 208);
      float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL);
      float32x4_t v13 = vnegq_f32(v5);
      do
      {
        if (v7 < v11)
        {
          int8x16_t v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v8 + 16 * v7), *(int32x4_t *)(v8 + 16 * v7)), *(int8x16_t *)(v8 + 16 * v7), 0xCuLL), v13), *(float32x4_t *)(v8 + 16 * v7), v12);
          v15.i32[0] = vextq_s8(v14, v14, 8uLL).u32[0];
          v15.i32[1] = v14.i32[0];
          *(float32x2_t *)&long long v16 = vmul_n_f32(v15, v9);
          *((void *)&v16 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v9, *(float32x2_t *)v14.i8, 1));
          *(_OWORD *)(v10 + 16 * v7) = v16;
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t DragForceEffect.update(parameters:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 96) & 1) == 0)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (v2)
    {
      uint64_t v3 = 0;
      float v4 = *v1;
      uint64_t v5 = *(void *)(result + 200);
      uint64_t v6 = *(void *)(result + 208);
      uint64_t v7 = (float *)(*(void *)(result + 80) + 8);
      do
      {
        if (v3 < v6)
        {
          *(float32x2_t *)&long long v8 = vmul_n_f32(vsub_f32(0, *(float32x2_t *)(v7 - 2)), v4);
          *((float *)&v8 + 2) = v4 * (float)(0.0 - *v7);
          HIDWORD(v8) = 0;
          *(_OWORD *)(v5 + 16 * v3) = v8;
        }
        ++v3;
        v7 += 4;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t TurbulenceForceEffect.update(parameters:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 48) & 1) == 0 && (*(unsigned char *)(result + 96) & 1) == 0)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2 < 0) {
      __break(1u);
    }
    if (v2)
    {
      uint64_t v3 = 0;
      float v12 = *v1;
      uint64_t v4 = *(void *)(result + 80);
      uint64_t v5 = *(void *)(result + 200);
      uint64_t v6 = *(void *)(result + 208);
      uint64_t v7 = *(void *)(result + 32) + 8;
      do
      {
        *(void *)&long long v8 = qword_26DC862F0;
        *((void *)&v8 + 1) = *(unsigned int *)algn_26DC862F8;
        long long v13 = v8;
        uint64_t result = REPhysicsForceEffectSimplexNoiseDerivative4();
        if (v3 < v6)
        {
          float32x4_t v10 = vmulq_f32(*(float32x4_t *)(v4 + 16 * v3), *(float32x4_t *)(v4 + 16 * v3));
          v10.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
          *(float32x2_t *)&long long v11 = vmul_n_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)&v13, v9), v12), v10.f32[0]);
          *((void *)&v11 + 1) = COERCE_UNSIGNED_INT((float)(v12 * (float)(v9 * *((float *)&v13 + 2))) * v10.f32[0]);
          *(_OWORD *)(v5 + 16 * v3) = v11;
        }
        ++v3;
        v7 += 16;
      }
      while (v2 != v3);
    }
  }
  return result;
}

float32x2_t normalizeSafe(vec:)(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, a1);
  int32x2_t v2 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).u64[0];
  if (*(float *)v2.i32 == 0.0)
  {
    return 0;
  }
  else
  {
    *(float *)v2.i32 = sqrtf(*(float *)v2.i32);
    return vdiv_f32(*(float32x2_t *)a1.f32, (float32x2_t)vdup_lane_s32(v2, 0));
  }
}

uint64_t *SpatialForceFalloff.init(bounds:rate:distanceOffset:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4 = *result;
  *(double *)a2 = a4;
  *(void *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = a3;
  return result;
}

double SpatialForceFalloff.distanceOffset.getter()
{
  return *(double *)v0;
}

void SpatialForceFalloff.distanceOffset.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*SpatialForceFalloff.distanceOffset.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialForceFalloff.bounds.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double SpatialForceFalloff.bounds.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*SpatialForceFalloff.bounds.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialForceFalloff.rate.getter()
{
  return *(double *)(v0 + 16);
}

void SpatialForceFalloff.rate.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpatialForceFalloff.rate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::TimedForceFalloff __swiftcall TimedForceFalloff.init(duration:rate:)(Swift::Double duration, Swift::Double rate)
{
  *int32x2_t v2 = duration;
  v2[1] = rate;
  result.rate = rate;
  result.duration = duration;
  return result;
}

double TimedForceFalloff.duration.getter()
{
  return *(double *)v0;
}

void TimedForceFalloff.duration.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*TimedForceFalloff.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double TimedForceFalloff.rate.getter()
{
  return *(double *)(v0 + 8);
}

void TimedForceFalloff.rate.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*TimedForceFalloff.rate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.AccelerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.AccelerationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ForceMode.CodingKeys()
{
  uint64_t result = 0x6563726F66;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6172656C65636361;
      break;
    case 2:
      uint64_t result = 0x65736C75706D69;
      break;
    case 3:
      uint64_t result = 0x797469636F6C6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ForceMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ForceMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.ForceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.ForceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.ImpulseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.ImpulseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForceMode.VelocityCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ForceMode.VelocityCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ForceMode.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.VelocityCodingKeys>);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x270FA5388](v3);
  long long v29 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.ImpulseCodingKeys>);
  uint64_t v27 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.AccelerationCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v23 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.ForceCodingKeys>);
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ForceMode.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  float32x2_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v16)
  {
    case 1:
      char v33 = 1;
      lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();
      float32x4_t v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v24;
      uint64_t v18 = v25;
      goto LABEL_6;
    case 2:
      char v34 = 2;
      lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();
      float32x4_t v17 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v27;
      uint64_t v18 = v28;
      goto LABEL_6;
    case 3:
      char v35 = 3;
      lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();
      float32x4_t v17 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v30;
      uint64_t v18 = v31;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      break;
    default:
      char v32 = 0;
      lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ForceMode.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.VelocityCodingKeys>);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x270FA5388](v3);
  int v48 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.ImpulseCodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  MEMORY[0x270FA5388](v5);
  id v46 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.AccelerationCodingKeys>);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.ForceCodingKeys>);
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ForceMode.CodingKeys>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  float32x4_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys();
  uint64_t v19 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  uint64_t v52 = 0;
  uint64_t v21 = v48;
  uint64_t v20 = v49;
  uint64_t v22 = v50;
  uint64_t v23 = v17;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *long long v29 = &type metadata for ForceMode;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_7:
    uint64_t v30 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v30);
  }
  char v25 = *(unsigned char *)(v24 + 32);
  switch(v25)
  {
    case 1:
      char v54 = 1;
      lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys();
      char v32 = v40;
      uint64_t v33 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_12;
      }
      uint64_t v35 = v42;
      uint64_t v34 = v43;
      goto LABEL_16;
    case 2:
      char v55 = 2;
      lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys();
      char v32 = v46;
      uint64_t v36 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v36) {
        goto LABEL_12;
      }
      uint64_t v34 = v44;
      uint64_t v35 = v45;
LABEL_16:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
      goto LABEL_17;
    case 3:
      char v56 = 3;
      lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys();
      uint64_t v37 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        uint64_t v30 = (uint64_t)v51;
        return __swift_destroy_boxed_opaque_existential_1(v30);
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      Swift::OpaquePointer v38 = v47;
      goto LABEL_19;
    default:
      char v53 = 0;
      lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys();
      uint64_t v26 = v52;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v26)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v39);
LABEL_17:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      uint64_t v30 = (uint64_t)v51;
      Swift::OpaquePointer v38 = v47;
LABEL_19:
      unsigned char *v38 = v25;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ForceMode@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return ForceMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ForceMode(void *a1)
{
  return ForceMode.encode(to:)(a1);
}

uint64_t ForceEffectProtocol.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return ForceEffectProtocol.parameterTypes.getter(a1);
}

{
  uint64_t result;

  if (one-time initialization token for position != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static PhysicsBodyParameterTypes.position;
  return result;
}

uint64_t static ForceEffectProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ForceEffectProtocol.__register(engine:_:)(0, a1, a2, a3, a4);
}

uint64_t static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _typeName(_:qualified:)();
  String.utf8CString.getter();
  uint64_t v10 = REForceEffectEventFilter();
  swift_release();
  if (one-time initialization token for registeredForceEffects != -1) {
    swift_once();
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = static ForceEffectComponent.registeredForceEffects;
  static ForceEffectComponent.registeredForceEffects = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, v10, isUniquelyReferenced_nonNull_native);
  static ForceEffectComponent.registeredForceEffects = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  swift_retain();
  static EntityAction.eventBus(_:)(a1);
  specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REForceEffectEventFilter();
  swift_release();
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a4;
  v12[3] = a5;
  v12[4] = a2;
  void v12[5] = a3;
  aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
  void aBlock[3] = &block_descriptor_128;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  REEventBusSubscribeWithMatch();
  _Block_release(v13);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v25[1] = a4;
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ForceEffectEvent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v25 - v13;
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v41);
  if (*(void *)(a2 + 136))
  {
    v25[0] = a3;
    type metadata accessor for ForceEffectProtocolWrapper();
    swift_unknownObjectRetain();
    uint64_t v15 = swift_dynamicCastClassUnconditional();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15 + *(void *)(*(void *)v15 + 96), a5);
    long long v38 = v41[12];
    long long v39 = v41[13];
    uint64_t v40 = v42;
    long long v34 = v41[8];
    long long v35 = v41[9];
    long long v36 = v41[10];
    long long v37 = v41[11];
    long long v30 = v41[4];
    long long v31 = v41[5];
    long long v32 = v41[6];
    long long v33 = v41[7];
    long long v26 = v41[0];
    long long v27 = v41[1];
    long long v28 = v41[2];
    long long v29 = v41[3];
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, a5);
    uint64_t v16 = &v14[*(int *)(v11 + 36)];
    long long v17 = v39;
    *((_OWORD *)v16 + 12) = v38;
    *((_OWORD *)v16 + 13) = v17;
    *((void *)v16 + 28) = v40;
    long long v18 = v35;
    *((_OWORD *)v16 + 8) = v34;
    *((_OWORD *)v16 + 9) = v18;
    long long v19 = v37;
    *((_OWORD *)v16 + 10) = v36;
    *((_OWORD *)v16 + 11) = v19;
    long long v20 = v31;
    *((_OWORD *)v16 + 4) = v30;
    *((_OWORD *)v16 + 5) = v20;
    long long v21 = v33;
    *((_OWORD *)v16 + 6) = v32;
    *((_OWORD *)v16 + 7) = v21;
    long long v22 = v27;
    *(_OWORD *)uint64_t v16 = v26;
    *((_OWORD *)v16 + 1) = v22;
    long long v23 = v29;
    *((_OWORD *)v16 + 2) = v28;
    *((_OWORD *)v16 + 3) = v23;
    outlined retain of OrbitEntityActionHandler((uint64_t)v41);
    ((void (*)(char *))v25[0])(v14);
    swift_release();
    outlined release of TimelineDefinition?((uint64_t)v41);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    outlined release of TimelineDefinition?((uint64_t)v41);
  }
  return 0;
}

uint64_t static ForceEffectParameters.__fromCore(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)result;
  if (!*(void *)result) {
    goto LABEL_32;
  }
  float v4 = *(float *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 48);
  uint64_t v11 = *(void *)(result + 56);
  uint64_t v10 = *(void *)(result + 64);
  uint64_t v12 = *(void *)(result + 72);
  uint64_t v24 = *(void *)(result + 80);
  uint64_t v25 = *(void *)(result + 104);
  uint64_t v26 = *(void *)(result + 112);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v13 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  uint64_t v15 = specialized static Entity.entityInfoType(_:)(v2);
  if (v15)
  {
    uint64_t v14 = (*(uint64_t (**)(void))(v15 + 232))();
    uint64_t v23 = *(void *)(v14 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v23, 0);
    *(void *)(v14 + 16) = v2;
    MEMORY[0x22A68E750](v2, v14);
    swift_release();
    goto LABEL_8;
  }
  uint64_t v13 = makeEntity(for:)(v2);
LABEL_4:
  uint64_t v14 = v13;
LABEL_8:
  if (v7) {
    uint64_t v16 = v6;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v12) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v9) {
    uint64_t v18 = v6;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v11) {
    uint64_t v19 = v6;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v10) {
    uint64_t v20 = v6;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t result = v8 == 0;
  if (v8) {
    uint64_t v21 = v6;
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  if (v24) {
    uint64_t v22 = v6;
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v18;
  *(unsigned char *)(a2 + 48) = v9 == 0;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v21;
  *(unsigned char *)(a2 + 72) = result;
  *(void *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = v11 == 0;
  *(void *)(a2 + 104) = v10;
  *(void *)(a2 + 112) = v20;
  *(unsigned char *)(a2 + 120) = v10 == 0;
  *(void *)(a2 + 128) = v7;
  *(void *)(a2 + 136) = v16;
  *(unsigned char *)(a2 + 144) = v7 == 0;
  *(void *)(a2 + 152) = v12;
  *(void *)(a2 + 160) = v17;
  *(unsigned char *)(a2 + 168) = v12 == 0;
  *(void *)(a2 + 176) = v24;
  *(void *)(a2 + 184) = v22;
  *(unsigned char *)(a2 + 192) = v24 == 0;
  *(void *)(a2 + 200) = v25;
  *(void *)(a2 + 208) = v6;
  *(void *)(a2 + 216) = v26;
  *(void *)(a2 + 224) = v6;
  return result;
}

id static ForceEffectProtocol.create(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result = (id)REForceEffectComponentGetForceEffectUserClass();
  if (result)
  {
    type metadata accessor for ForceEffectProtocolWrapper();
    swift_unknownObjectRetain();
    uint64_t v9 = swift_dynamicCastClassUnconditional();
    static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)(a1, v9 + *(void *)(*(void *)v9 + 96), a2, a3, a4);
    swift_unknownObjectRelease();
    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  REForceEffectComponentGetForceEffectPosition();
  __n128 v35 = v11;
  REForceEffectComponentGetForceEffectOrientation();
  __n128 v34 = v12;
  REForceEffectComponentGetForceEffectStrengthScale();
  float v14 = v13;
  int ForceEffectMask = REForceEffectComponentGetForceEffectMask();
  int HasSpatialFalloff = REForceEffectComponentForceEffectHasSpatialFalloff();
  char v17 = HasSpatialFalloff;
  double v18 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  if (HasSpatialFalloff)
  {
    REForceEffectComponentGetForceEffectBoundSphereRadius();
    float v22 = v21;
    REForceEffectComponentGetForceEffectSpatialFalloffRate();
    double v19 = v22;
    double v20 = v23;
  }
  int HasTimedFalloff = REForceEffectComponentForceEffectHasTimedFalloff();
  char v25 = HasTimedFalloff;
  double v26 = 0.0;
  if (HasTimedFalloff)
  {
    REForceEffectComponentGetForceEffectTimedFalloffRate();
    float v28 = v27;
    REForceEffectComponentGetForceEffectTimedFalloffDuration();
    double v18 = v29;
    double v26 = v28;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v33, a3);
  *(void *)&long long v39 = 0;
  *((double *)&v39 + 1) = v19;
  double v40 = v20;
  char v41 = v17 ^ 1;
  *(double *)long long v37 = v18;
  *(double *)&v37[1] = v26;
  char v38 = v25 ^ 1;
  int v36 = ForceEffectMask;
  a5[3] = type metadata accessor for ForceEffect();
  a5[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return ForceEffect.init(effect:strengthScale:spatialFalloff:timedFalloff:position:orientation:mask:)((uint64_t)v10, &v39, v37, &v36, a3, a4, (uint64_t)boxed_opaque_existential_1, v14, v35, v34);
}

uint64_t ForceEffect.init(effect:strengthScale:spatialFalloff:timedFalloff:position:orientation:mask:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, __n128 a9@<Q1>, __n128 a10@<Q2>)
{
  long long v29 = *a2;
  uint64_t v28 = *((void *)a2 + 2);
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  char v26 = *((unsigned char *)a3 + 16);
  char v27 = *((unsigned char *)a2 + 24);
  int v30 = *a4;
  char v17 = (int *)type metadata accessor for ForceEffect();
  uint64_t v18 = a7 + v17[9];
  uint64_t v19 = a7 + v17[10];
  uint64_t v20 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a7, a1, a5);
  *(_OWORD *)uint64_t v18 = v29;
  *(void *)(v18 + 16) = v28;
  *(unsigned char *)(v18 + 24) = v27;
  *(void *)uint64_t v19 = v15;
  *(void *)(v19 + 8) = v16;
  *(unsigned char *)(v19 + 16) = v26;
  *(__n128 *)(a7 + v17[11]) = a9;
  *(__n128 *)(a7 + v17[12]) = a10;
  float v21 = a8;
  *(float *)(a7 + v17[13]) = v21;
  *(_DWORD *)(a7 + v17[14]) = v30;
  uint64_t v34 = a5;
  swift_getMetatypeMetadata();
  uint64_t v22 = String.init<A>(describing:)();
  float v23 = (uint64_t *)(a7 + v17[16]);
  *float v23 = v22;
  v23[1] = v24;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v33, a5, a6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a5);
  *(unsigned char *)(a7 + v17[15]) = v33;
  return result;
}

uint64_t static ForceEffectProtocol<>.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ForceEffectProtocol<>.__register(engine:_:)(0, a1, a2, a3, a4, a5, a6);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a7;
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for ForceEffectEvent();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  MEMORY[0x270FA5388](v11);
  float v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v23 - v16;
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v43);
  uint64_t v18 = specialized Data.init(bytes:count:)(*(unsigned char **)(a2 + 120), *(void *)(a2 + 128));
  unint64_t v20 = v19;
  long long v40 = v43[12];
  long long v41 = v43[13];
  uint64_t v42 = v44;
  long long v36 = v43[8];
  long long v37 = v43[9];
  long long v38 = v43[10];
  long long v39 = v43[11];
  long long v32 = v43[4];
  long long v33 = v43[5];
  long long v34 = v43[6];
  long long v35 = v43[7];
  long long v28 = v43[0];
  long long v29 = v43[1];
  long long v30 = v43[2];
  long long v31 = v43[3];
  outlined copy of Data._Representation(v18, v19);
  outlined retain of OrbitEntityActionHandler((uint64_t)v43);
  __n128 v21 = ForceEffectEvent.init<>(effectData:parameters:)(v18, v20, a5, a6, (uint64_t)v13);
  (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v14 + 56))(v13, 0, 1, v10, v21);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v10);
  v24(v17);
  outlined release of TimelineDefinition?((uint64_t)v43);
  outlined consume of Data._Representation(v18, v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v10);
  return 0;
}

__n128 ForceEffectEvent.init<>(effectData:parameters:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = v13[13];
  long long v41 = v13[12];
  long long v42 = v14;
  uint64_t v43 = *((void *)v13 + 28);
  long long v15 = v13[9];
  long long v37 = v13[8];
  long long v38 = v15;
  long long v16 = v13[11];
  long long v39 = v13[10];
  long long v40 = v16;
  long long v17 = v13[5];
  long long v33 = v13[4];
  long long v34 = v17;
  long long v18 = v13[7];
  long long v35 = v13[6];
  long long v36 = v18;
  long long v19 = v13[1];
  long long v29 = *v13;
  long long v30 = v19;
  long long v20 = v13[2];
  __n128 v32 = (__n128)v13[3];
  long long v31 = v20;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(a1, a2);
  if (v5)
  {
    outlined release of TimelineDefinition?((uint64_t)&v29);
    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a3);
    uint64_t v22 = a5 + *(int *)(type metadata accessor for ForceEffectEvent() + 36);
    long long v23 = v42;
    *(_OWORD *)(v22 + 192) = v41;
    *(_OWORD *)(v22 + 208) = v23;
    *(void *)(v22 + 224) = v43;
    long long v24 = v38;
    *(_OWORD *)(v22 + 128) = v37;
    *(_OWORD *)(v22 + 144) = v24;
    long long v25 = v40;
    *(_OWORD *)(v22 + 160) = v39;
    *(_OWORD *)(v22 + 176) = v25;
    long long v26 = v34;
    *(_OWORD *)(v22 + 64) = v33;
    *(_OWORD *)(v22 + 80) = v26;
    long long v27 = v36;
    *(_OWORD *)(v22 + 96) = v35;
    *(_OWORD *)(v22 + 112) = v27;
    long long v28 = v30;
    *(_OWORD *)uint64_t v22 = v29;
    *(_OWORD *)(v22 + 16) = v28;
    __n128 result = v32;
    *(_OWORD *)(v22 + 32) = v31;
    *(__n128 *)(v22 + 48) = result;
  }
  return result;
}

uint64_t static ForceEffectProtocol<>.create(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  long long v15 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForceEffectUserData = (unsigned char *)REForceEffectComponentGetForceEffectUserData();
  uint64_t ForceEffectUserDataSize = REForceEffectComponentGetForceEffectUserDataSize();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v11 = specialized Data.init(bytes:count:)(ForceEffectUserData, ForceEffectUserDataSize);
  unint64_t v13 = v12;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v4)
  {
    swift_release();
    return outlined consume of Data._Representation(v11, v13);
  }
  else
  {
    outlined consume of Data._Representation(v11, v13);
    static ForceEffectProtocol.createFromCoreAndUserForceEffect<A>(_:_:_:)(a1, (uint64_t)v8, a2, v16, v15);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, a2);
  }
}

uint64_t (*ForceEffect.effect.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.spatialFalloff.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (__n128 *)(v2 + *(int *)(a1 + 36));
  unint64_t v4 = v3[1].n128_u64[0];
  unsigned __int8 v5 = v3[1].n128_u8[8];
  __n128 result = *v3;
  *a2 = *v3;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u8[8] = v5;
  return result;
}

__n128 ForceEffect.spatialFalloff.setter(__n128 *a1, uint64_t a2)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unsigned __int8 v4 = a1[1].n128_u8[8];
  unsigned __int8 v5 = (__n128 *)(v2 + *(int *)(a2 + 36));
  __n128 result = *a1;
  *unsigned __int8 v5 = *a1;
  v5[1].n128_u64[0] = v3;
  v5[1].n128_u8[8] = v4;
  return result;
}

uint64_t (*ForceEffect.spatialFalloff.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.timedFalloff.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3 = (__n128 *)(v2 + *(int *)(a1 + 40));
  unsigned __int8 v4 = v3[1].n128_u8[0];
  __n128 result = *v3;
  *a2 = *v3;
  a2[1].n128_u8[0] = v4;
  return result;
}

__n128 ForceEffect.timedFalloff.setter(__n128 *a1, uint64_t a2)
{
  unsigned __int8 v3 = a1[1].n128_u8[0];
  unsigned __int8 v4 = (__n128 *)(v2 + *(int *)(a2 + 40));
  __n128 result = *a1;
  *unsigned __int8 v4 = *a1;
  v4[1].n128_u8[0] = v3;
  return result;
}

uint64_t (*ForceEffect.timedFalloff.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.position.getter(uint64_t a1)
{
  return *(__n128 *)(v1 + *(int *)(a1 + 44));
}

uint64_t ForceEffect.position.setter(uint64_t result, __n128 a2)
{
  *(__n128 *)(v2 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t (*ForceEffect.position.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 ForceEffect.orientation.getter(uint64_t a1)
{
  return *(__n128 *)(v1 + *(int *)(a1 + 48));
}

uint64_t ForceEffect.orientation.setter(uint64_t result, __n128 a2)
{
  *(__n128 *)(v2 + *(int *)(result + 48)) = a2;
  return result;
}

uint64_t (*ForceEffect.orientation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ForceEffect.strengthScale.getter(uint64_t a1)
{
  return *(float *)(v1 + *(int *)(a1 + 52));
}

uint64_t ForceEffect.strengthScale.setter(uint64_t result, float a2)
{
  *(float *)(v2 + *(int *)(result + 52)) = a2;
  return result;
}

uint64_t (*ForceEffect.strengthScale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffect.mask.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(v2 + *(int *)(result + 56));
  return result;
}

_DWORD *ForceEffect.mask.setter(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 56)) = *result;
  return result;
}

uint64_t (*ForceEffect.mask.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall ForceEffect.toCore(_:_:)(Swift::Int a1, Swift::OpaquePointer a2)
{
  uint64_t v4 = v3;
  rawValue = v2;
  uint64_t v7 = *(v2 - 1);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v53 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v50 - v15;
  uint64_t v56 = v3 + *(int *)(v17 + 72);
  String.utf8CString.getter();
  uint64_t v51 = REForceEffectEventFilter();
  swift_release();
  uint64_t v18 = dynamic_cast_existential_3_conditional(v10);
  uint64_t v54 = v10;
  Swift::Int v55 = a1;
  v50[1] = v8;
  v50[0] = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v16;
  if (v18)
  {
    if (one-time initialization token for registeredForceEffectsCodable != -1) {
      swift_once();
    }
    uint64_t v19 = dynamic_cast_existential_3_conditional(v10);
    if (v19) {
      uint64_t v23 = v19;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v19) {
      uint64_t v24 = v20;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v19) {
      uint64_t v25 = v21;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v19) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = 0;
    }
    swift_beginAccess();
    uint64_t v27 = v26;
    uint64_t v10 = v54;
    specialized Dictionary.subscript.setter(v23, v24, v25, v27, v51);
    swift_endAccess();
    uint64_t v28 = v53;
    long long v29 = rawValue;
  }
  else
  {
    if (one-time initialization token for registeredForceEffects != -1) {
      swift_once();
    }
    long long v29 = rawValue;
    uint64_t v30 = rawValue[3];
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v58[0] = static ForceEffectComponent.registeredForceEffects;
    static ForceEffectComponent.registeredForceEffects = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v30, v51, isUniquelyReferenced_nonNull_native);
    static ForceEffectComponent.registeredForceEffects = *(void *)&v58[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v28 = v53;
  }
  String.utf8CString.getter();
  REForceEffectComponentSetForceEffectEventKey();
  swift_release();
  REForceEffectComponentSetForceEffectPosition();
  REForceEffectComponentSetForceEffectOrientation();
  REForceEffectComponentSetForceEffectStrengthScale();
  REForceEffectComponentSetForceEffectMask();
  REForceEffectComponentSetForceEffectForceMode();
  uint64_t v32 = v29[3];
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&aBlock, v10, v32);
  REForceEffectComponentSetForceEffectInputs();
  long long v33 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v33(v52, v4, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  if (!swift_dynamicCast())
  {
    memset(v58, 0, sizeof(v58));
    outlined destroy of BodyTrackingComponent?((uint64_t)v58, &demangling cache variable for type metadata for (Decodable & Encodable)?);
    type metadata accessor for ForceEffectProtocolWrapper();
    v33(v13, v4, v10);
    EntityActionWrapper.__allocating_init(action:)((uint64_t)v13);
    REForceEffectComponentSetAndRetainForceEffectUserClass();
    swift_release();
    long long v40 = rawValue;
    goto LABEL_37;
  }
  uint64_t v34 = v32;
  outlined init with take of Decodable & Encodable(v58, &aBlock);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v61);
  uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v37 = v36;
  unint64_t v38 = v36 >> 62;
  uint64_t v39 = v35;
  long long v40 = rawValue;
  switch(v36 >> 62)
  {
    case 1uLL:
      LODWORD(v41) = HIDWORD(v35) - v35;
      if (__OFSUB__(HIDWORD(v35), v35))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v41 = (int)v41;
LABEL_28:
      if (!v41) {
        goto LABEL_36;
      }
      if (!v38) {
        goto LABEL_32;
      }
      if (v38 != 1)
      {
        if (!__OFSUB__(*(void *)(v35 + 24), *(void *)(v35 + 16)))
        {
          REForceEffectComponentResizeForceEffectUserData();
          REForceEffectComponentGetForceEffectUserData();
          if (!__OFSUB__(*(void *)(v39 + 24), *(void *)(v39 + 16))) {
            goto LABEL_35;
          }
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (__OFSUB__(HIDWORD(v35), v35))
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
LABEL_32:
      REForceEffectComponentResizeForceEffectUserData();
      REForceEffectComponentGetForceEffectUserData();
LABEL_35:
      Data.copyBytes(to:count:)();
LABEL_36:
      outlined consume of Data._Representation(v39, v37);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
      uint64_t v32 = v34;
LABEL_37:
      if (*(unsigned char *)(v4 + *((int *)v40 + 9) + 24))
      {
        REForceEffectComponentForceEffectRemoveSpatialFalloff();
      }
      else
      {
        REForceEffectComponentSetForceEffectSpatialFalloffRate();
        REForceEffectComponentSetForceEffectBoundSphereRadius();
      }
      if (*(unsigned char *)(v4 + *((int *)v40 + 10) + 16))
      {
        REForceEffectComponentForceEffectRemoveTimedFalloff();
      }
      else
      {
        REForceEffectComponentSetForceEffectTimedFalloffRate();
        REForceEffectComponentSetForceEffectTimedFalloffDuration();
      }
      uint64_t v45 = specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      if (!MEMORY[0x22A692280](*(void *)(v45 + 16)))
      {
LABEL_50:
        __break(1u);
        JUMPOUT(0x228199440);
      }
      specialized getEventID<A>(_:)((uint64_t (*)(void))type metadata accessor for REEntityForceEffectComputeForcesEvent, &demangling cache variable for type metadata for REEntityForceEffectComputeForcesEvent.Type);
      REComponentGetEntity();
      rawValue = a2._rawValue;
      String.utf8CString.getter();
      REForceEffectEventFilter();
      swift_release();
      uint64_t v46 = v50[0];
      (*(void (**)(void, uint64_t, void *))(v7 + 16))(v50[0], v4, v40);
      unint64_t v47 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = v54;
      *(void *)(v48 + 24) = v32;
      (*(void (**)(unint64_t, uint64_t, void *))(v7 + 32))(v48 + v47, v46, v40);
      int v62 = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in ForceEffect.toCore(_:_:);
      uint64_t v63 = v48;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      float v60 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      int v61 = &block_descriptor_33;
      uint64_t v49 = _Block_copy(&aBlock);
      swift_release();
      REEventBusSubscribeWithMatch();
      _Block_release(v49);
      REForceEffectComponentSetForceEffectSubscription();
      return;
    case 2uLL:
      uint64_t v43 = *(void *)(v35 + 16);
      uint64_t v42 = *(void *)(v35 + 24);
      BOOL v44 = __OFSUB__(v42, v43);
      uint64_t v41 = v42 - v43;
      if (!v44) {
        goto LABEL_28;
      }
      goto LABEL_46;
    case 3uLL:
      goto LABEL_36;
    default:
      uint64_t v41 = BYTE6(v36);
      goto LABEL_28;
  }
}

void one-time initialization function for position()
{
  static PhysicsBodyParameterTypes.position = 1;
}

uint64_t PhysicsBodyParameterTypes.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *static PhysicsBodyParameterTypes.position.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void one-time initialization function for orientation()
{
  static PhysicsBodyParameterTypes.orientation = 2;
}

void *static PhysicsBodyParameterTypes.orientation.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for orientation, &static PhysicsBodyParameterTypes.orientation, a1);
}

void one-time initialization function for velocity()
{
  static PhysicsBodyParameterTypes.velocity = 4;
}

void *static PhysicsBodyParameterTypes.velocity.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

void one-time initialization function for angularVelocity()
{
  static PhysicsBodyParameterTypes.angularVelocity = 8;
}

void *static PhysicsBodyParameterTypes.angularVelocity.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for angularVelocity, &static PhysicsBodyParameterTypes.angularVelocity, a1);
}

void one-time initialization function for distance()
{
  static PhysicsBodyParameterTypes.distance = 16;
}

void *static PhysicsBodyParameterTypes.distance.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for distance, &static PhysicsBodyParameterTypes.distance, a1);
}

void one-time initialization function for mass()
{
  static PhysicsBodyParameterTypes.mass = 32;
}

void *static PhysicsBodyParameterTypes.mass.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for mass, &static PhysicsBodyParameterTypes.mass, a1);
}

void one-time initialization function for inertiaTensor()
{
  static PhysicsBodyParameterTypes.inertiaTensor = 64;
}

void *static PhysicsBodyParameterTypes.inertiaTensor.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for inertiaTensor, &static PhysicsBodyParameterTypes.inertiaTensor, a1);
}

void *static PhysicsBodyParameterTypes.position.getter@<X0>(void *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1) {
    __n128 result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

uint64_t PhysicsBodyParameterTypes.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PhysicsBodyParameterTypes()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PhysicsBodyParameterTypes()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t UnsafeForceEffectBuffer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 16))(a3, *v3 + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 72) * a1);
}

uint64_t UnsafeForceEffectBuffer.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    CMTimebaseRef v2[2] = v5;
    if (v5 >= v2[1])
    {
      uint64_t v11 = *(void *)(result + 16);
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
      uint64_t v9 = a2;
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v6 = *v2;
      uint64_t v7 = *(void *)(result + 16);
      uint64_t v12 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v6 + *(void *)(v12 + 72) * v5, v7);
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v9 = a2;
      uint64_t v10 = 0;
      uint64_t v11 = v7;
    }
    return v8(v9, v10, 1, v11);
  }
  return result;
}

__n128 UnsafeForceEffectBuffer.makeIterator()@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = -1;
  return result;
}

uint64_t UnsafeForceEffectBuffer.count.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeForceEffectBuffer<A>()
{
  return specialized Sequence._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance UnsafeForceEffectBuffer<A>(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x22A688D10](a1, a2);
}

uint64_t ForceEffectParameters.entity.getter()
{
  return swift_retain();
}

uint64_t ForceEffectParameters.physicsBodyCount.getter()
{
  return *(void *)(v0 + 8);
}

double ForceEffectParameters.fixedDeltaTime.getter()
{
  return *(double *)(v0 + 16);
}

double ForceEffectParameters.elapsedTime.getter()
{
  return *(double *)(v0 + 24);
}

__n128 ForceEffectParameters.positions.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[3].n128_u8[0];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.orientations.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.velocities.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[6].n128_u8[0];
  __n128 result = v1[5];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.angularVelocities.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 120);
  __n128 result = *(__n128 *)(v1 + 104);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.distances.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[9].n128_u8[0];
  __n128 result = v1[8];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.masses.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 168);
  __n128 result = *(__n128 *)(v1 + 152);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 ForceEffectParameters.inertiaTensors.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[12].n128_u8[0];
  __n128 result = v1[11];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t ForceEffectParameters.setForce(_:index:)(uint64_t result, __n128 a2)
{
  if ((result & 0x8000000000000000) == 0 && *(void *)(v2 + 208) > result) {
    *(__n128 *)(*(void *)(v2 + 200) + 16 * result) = a2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.CodingKeys and conformance ForceMode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.VelocityCodingKeys and conformance ForceMode.VelocityCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ImpulseCodingKeys and conformance ForceMode.ImpulseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.AccelerationCodingKeys and conformance ForceMode.AccelerationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys;
  if (!lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode.ForceCodingKeys and conformance ForceMode.ForceCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for ForceEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ForceEffectParameters.setTorque(_:index:)(uint64_t result, __n128 a2)
{
  if ((result & 0x8000000000000000) == 0 && *(void *)(v2 + 224) > result) {
    *(__n128 *)(*(void *)(v2 + 216) + 16 * result) = a2;
  }
  return result;
}

uint64_t ForceEffect.effect.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*ForceEffectEvent.effect.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffectEvent.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (long long *)(v2 + *(int *)(a1 + 36));
  long long v4 = v3[11];
  long long v5 = v3[13];
  long long v36 = v3[12];
  long long v37 = v5;
  long long v6 = v3[7];
  long long v7 = v3[9];
  long long v32 = v3[8];
  long long v8 = v32;
  long long v33 = v7;
  long long v9 = v3[9];
  long long v10 = v3[11];
  long long v34 = v3[10];
  long long v11 = v34;
  long long v35 = v10;
  long long v12 = v3[3];
  long long v13 = v3[5];
  long long v28 = v3[4];
  long long v14 = v28;
  long long v29 = v13;
  long long v15 = v3[5];
  long long v16 = v3[7];
  long long v30 = v3[6];
  long long v17 = v30;
  long long v31 = v16;
  long long v18 = v3[1];
  v25[0] = *v3;
  v25[1] = v18;
  long long v19 = v3[3];
  long long v21 = *v3;
  long long v20 = v3[1];
  long long v26 = v3[2];
  long long v22 = v26;
  long long v27 = v19;
  long long v23 = v3[13];
  *(_OWORD *)(a2 + 192) = v36;
  *(_OWORD *)(a2 + 208) = v23;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v4;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v17;
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v20;
  uint64_t v38 = *((void *)v3 + 28);
  *(void *)(a2 + 224) = *((void *)v3 + 28);
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v12;
  return outlined retain of OrbitEntityActionHandler((uint64_t)v25);
}

__n128 ForceEffectEvent.parameters.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  long long v5 = *(_OWORD *)(v4 + 208);
  v19[12] = *(_OWORD *)(v4 + 192);
  v19[13] = v5;
  uint64_t v20 = *(void *)(v4 + 224);
  long long v6 = *(_OWORD *)(v4 + 144);
  v19[8] = *(_OWORD *)(v4 + 128);
  v19[9] = v6;
  long long v7 = *(_OWORD *)(v4 + 176);
  v19[10] = *(_OWORD *)(v4 + 160);
  v19[11] = v7;
  long long v8 = *(_OWORD *)(v4 + 80);
  uint64_t v19[4] = *(_OWORD *)(v4 + 64);
  v19[5] = v8;
  long long v9 = *(_OWORD *)(v4 + 112);
  v19[6] = *(_OWORD *)(v4 + 96);
  v19[7] = v9;
  long long v10 = *(_OWORD *)(v4 + 16);
  v19[0] = *(_OWORD *)v4;
  v19[1] = v10;
  long long v11 = *(_OWORD *)(v4 + 48);
  v19[2] = *(_OWORD *)(v4 + 32);
  v19[3] = v11;
  outlined release of TimelineDefinition?((uint64_t)v19);
  long long v12 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v4 + 208) = v12;
  *(void *)(v4 + 224) = *(void *)(a1 + 224);
  long long v13 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v4 + 144) = v13;
  long long v14 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v4 + 176) = v14;
  long long v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 80) = v15;
  long long v16 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v4 + 112) = v16;
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v17;
  __n128 result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v4 + 48) = result;
  return result;
}

uint64_t (*ForceEffectEvent.parameters.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ForceEffectComponent.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ForceEffectComponent.effects.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ForceEffectComponent.effects.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::ForceEffectComponent __swiftcall ForceEffectComponent.init(effects:simulationState:)(Swift::OpaquePointer effects, RealityFoundation::ForceEffectComponent::SimulationState simulationState)
{
  char v3 = *(unsigned char *)simulationState;
  *(Swift::OpaquePointer *)uint64_t v2 = effects;
  *(unsigned char *)(v2 + 8) = v3;
  result.effects = effects;
  result.simulationState.value = simulationState;
  return result;
}

uint64_t ForceEffectComponent.init(effect:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ForceEffectBase>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22830EC60;
  uint64_t result = outlined init with take of BindableDataInternal(a1, v4 + 32);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL static ForceEffectComponent.SimulationState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ForceEffectComponent.SimulationState.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void ForceEffectComponent.simulationState.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *ForceEffectComponent.simulationState.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ForceEffectComponent.simulationState.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static ForceEffectComponent.__fromCore(_:)(Swift::OpaquePointer *a1)
{
  return (unint64_t)ForceEffectComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue);
}

RealityFoundation::ForceEffectComponent __swiftcall ForceEffectComponent.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t ForceEffectCount = REForceEffectComponentGetForceEffectCount();
  if (ForceEffectCount < 0)
  {
LABEL_28:
    __break(1u);
  }
  else
  {
    uint64_t v5 = ForceEffectCount;
    uint64_t v25 = v2;
    if (ForceEffectCount)
    {
      uint64_t v6 = 0;
      long long v7 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v5 == v6)
        {
          __break(1u);
          goto LABEL_28;
        }
        REForceEffectComponentGetForceEffectEventKey();
        uint64_t v8 = REForceEffectEventFilter();
        if (one-time initialization token for registeredForceEffectsCodable != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v9 = static ForceEffectComponent.registeredForceEffectsCodable;
        if (*(void *)(static ForceEffectComponent.registeredForceEffectsCodable + 16))
        {
          uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
          if (v11) {
            break;
          }
        }
        swift_endAccess();
        if (one-time initialization token for registeredForceEffects != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v15 = static ForceEffectComponent.registeredForceEffects;
        if (!*(void *)(static ForceEffectComponent.registeredForceEffects + 16)
          || (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8), (v17 & 1) == 0))
        {
          swift_endAccess();
          specialized static ForceEffectLogger.logWarning(_:)(0xD000000000000058, 0x800000022835B610);
          goto LABEL_26;
        }
        long long v18 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v16);
        uint64_t v20 = *v18;
        uint64_t v19 = v18[1];
        swift_endAccess();
        static ForceEffectProtocol.create(_:_:)(v6, v20, v19, (uint64_t *)&v26);
        outlined init with take of BindableDataInternal(&v26, (uint64_t)v27);
        outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v22 = v7[2];
        unint64_t v21 = v7[3];
        unint64_t v23 = v22 + 1;
        if (v22 >= v21 >> 1) {
          goto LABEL_22;
        }
LABEL_23:
        float32x2_t v7[2] = v23;
        outlined init with take of BindableDataInternal(&v26, (uint64_t)&v7[5 * v22 + 4]);
        uint64_t ForceEffectCount = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        if (v5 == ++v6) {
          goto LABEL_26;
        }
      }
      long long v12 = (uint64_t *)(*(void *)(v9 + 56) + 32 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      swift_endAccess();
      static ForceEffectProtocol<>.create(_:_:)(v6, v13, v14, (uint64_t *)&v26);
      outlined init with take of BindableDataInternal(&v26, (uint64_t)v27);
      outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v26);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v22 = v7[2];
      unint64_t v21 = v7[3];
      unint64_t v23 = v22 + 1;
      if (v22 < v21 >> 1) {
        goto LABEL_23;
      }
LABEL_22:
      long long v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v7);
      goto LABEL_23;
    }
    long long v7 = (void *)MEMORY[0x263F8EE78];
LABEL_26:
    *(void *)uint64_t v25 = v7;
    *(unsigned char *)(v25 + 8) = 3;
  }
  result.effects._rawValue = (void *)ForceEffectCount;
  result.simulationState.value = v4;
  return result;
}

uint64_t ForceEffectComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  int v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A692280](*(void *)(v5 + 16));
  if (result)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    REForceEffectComponentResizeForceEffects();
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v3 + 32;
      do
      {
        outlined init with copy of __REAssetService(v9, (uint64_t)v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForceEffectBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForceEffectInternal);
        swift_dynamicCast();
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v8, v2, v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        v9 += 40;
        ++v8;
      }
      while (v7 != v8);
    }
    if (v4 == 3) {
      return REForceEffectComponentRemoveSimulationState();
    }
    else {
      return REForceEffectComponentSetSimulationState();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static ForceEffectComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5004;
}

unint64_t one-time initialization function for registeredForceEffects()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static ForceEffectComponent.registeredForceEffects = result;
  return result;
}

unint64_t one-time initialization function for registeredForceEffectsCodable()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static ForceEffectComponent.registeredForceEffectsCodable = result;
  return result;
}

unint64_t protocol witness for static Component.__fromCore(_:) in conformance ForceEffectComponent(Swift::OpaquePointer *a1)
{
  return (unint64_t)ForceEffectComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue);
}

void protocol witness for static Component.__coreComponentType.getter in conformance ForceEffectComponent(_DWORD *a1@<X8>)
{
  *a1 = 5004;
}

float ConstantForceEffect.strength.getter()
{
  return *(float *)v0;
}

void ConstantForceEffect.parameterTypes.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*ConstantForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConstantForceEffect.CodingKeys()
{
  uint64_t v1 = 0x6F69746365726964;
  if (*v0 != 1) {
    uint64_t v1 = 0x646F4D6563726F66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6874676E65727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConstantForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ConstantForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConstantForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConstantForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ConstantForceEffect.encode(to:)(void *a1)
{
  return ConstantForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ConstantForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
}

uint64_t ConstantForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ConstantForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ConstantForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConstantForceEffect(void *a1)
{
  return ConstantForceEffect.encode(to:)(a1);
}

float ConstantRadialForceEffect.strength.getter()
{
  return *(float *)v0;
}

void *ConstantRadialForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

uint64_t (*ConstantRadialForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConstantRadialForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConstantRadialForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ConstantRadialForceEffect.encode(to:)(void *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ConstantRadialForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
}

uint64_t ConstantRadialForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ConstantRadialForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys, a2);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ConstantRadialForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ConstantRadialForceEffect(void *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1);
}

float VortexForceEffect.init(strength:axis:)@<S0>(__n128 *a1@<X8>, double a2@<D0>, __n128 a3@<Q1>)
{
  float result = a2;
  a1->n128_f32[0] = result;
  a1[1] = a3;
  a1[2].n128_u8[0] = 0;
  return result;
}

float VortexForceEffect.strength.getter()
{
  return *(float *)v0;
}

__n128 VortexForceEffect.axis.getter()
{
  return v0[1];
}

void *VortexForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void VortexForceEffect.forceMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *VortexForceEffect.forceMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*VortexForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance VortexForceEffect.CodingKeys()
{
  uint64_t v1 = 1936291937;
  if (*v0 != 1) {
    uint64_t v1 = 0x646F4D6563726F66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6874676E65727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance VortexForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized VortexForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VortexForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance VortexForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VortexForceEffect.encode(to:)(void *a1)
{
  return ConstantForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<VortexForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
}

uint64_t ConstantForceEffect.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = *(_OWORD *)(v3 + 16);
  int v14 = *(unsigned __int8 *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  uint64_t v10 = v16;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    char v11 = v14;
    long long v18 = v15;
    char v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = v11;
    char v17 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t VortexForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<VortexForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys, a2);
}

uint64_t ConstantForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = v7;
    uint64_t v12 = v18;
    uint64_t v11 = v19;
    LOBYTE(v21) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    char v20 = 1;
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v17 = v21;
    char v20 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v11);
    char v16 = v21;
    *(_DWORD *)uint64_t v12 = v14;
    *(_OWORD *)(v12 + 16) = v17;
    *(unsigned char *)(v12 + 32) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance VortexForceEffect@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for position != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static PhysicsBodyParameterTypes.position;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VortexForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return VortexForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VortexForceEffect(void *a1)
{
  return VortexForceEffect.encode(to:)(a1);
}

void __swiftcall DragForceEffect.init(strength:)(RealityFoundation::DragForceEffect *__return_ptr retstr, Swift::Double strength)
{
  Swift::Float v2 = strength;
  retstr->strength = v2;
  retstr->forceMode = RealityFoundation_ForceMode_force;
}

float DragForceEffect.strength.getter()
{
  return *(float *)v0;
}

void *DragForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

void DragForceEffect.forceMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 4);
}

unsigned char *DragForceEffect.forceMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 4) = *result;
  return result;
}

uint64_t (*DragForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DragForceEffect.CodingKeys()
{
  if (*v0) {
    return 0x646F4D6563726F66;
  }
  else {
    return 0x6874676E65727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DragForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized DragForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DragForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DragForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DragForceEffect.encode(to:)(void *a1)
{
  return ConstantRadialForceEffect.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<DragForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
}

uint64_t ConstantRadialForceEffect.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = *(unsigned __int8 *)(v3 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  uint64_t v10 = v14;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    char v16 = v13;
    char v15 = 1;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t DragForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ConstantRadialForceEffect.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<DragForceEffect.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys, a2);
}

uint64_t ConstantRadialForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v11 = v17;
    uint64_t v10 = v18;
    char v21 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v13 = v12;
    char v19 = 1;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v7);
    char v14 = v20;
    *(_DWORD *)uint64_t v10 = v13;
    *(unsigned char *)(v10 + 4) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance DragForceEffect@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect(&one-time initialization token for velocity, &static PhysicsBodyParameterTypes.velocity, a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance ConstantRadialForceEffect@<X0>(void *a1@<X2>, _DWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  if (*a1 != -1) {
    uint64_t result = swift_once();
  }
  *a3 = *a2;
  return result;
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance DragForceEffect(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DragForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DragForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DragForceEffect(void *a1)
{
  return DragForceEffect.encode(to:)(a1);
}

void __swiftcall TurbulenceForceEffect.init(strength:smoothness:speed:)(RealityFoundation::TurbulenceForceEffect *__return_ptr retstr, Swift::Double strength, Swift::Double smoothness, Swift::Double speed)
{
  Swift::Float v4 = strength;
  Swift::Float v5 = smoothness;
  retstr->strength = v4;
  retstr->smoothness = v5;
  Swift::Float v6 = speed;
  retstr->speed = v6;
  retstr->forceMode = RealityFoundation_ForceMode_force;
}

float TurbulenceForceEffect.strength.getter()
{
  return *(float *)v0;
}

float TurbulenceForceEffect.smoothness.getter()
{
  return *(float *)(v0 + 4);
}

float TurbulenceForceEffect.speed.getter()
{
  return *(float *)(v0 + 8);
}

uint64_t TurbulenceForceEffect.parameterTypes.getter@<X0>(int *a1@<X8>)
{
  if (one-time initialization token for velocity != -1) {
    uint64_t result = swift_once();
  }
  int v2 = static PhysicsBodyParameterTypes.velocity;
  if (one-time initialization token for position != -1) {
    uint64_t result = swift_once();
  }
  int v3 = static PhysicsBodyParameterTypes.position;
  if ((static PhysicsBodyParameterTypes.position & ~v2) == 0) {
    int v3 = 0;
  }
  *a1 = v3 | v2;
  return result;
}

void TurbulenceForceEffect.forceMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 12);
}

unsigned char *TurbulenceForceEffect.forceMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 12) = *result;
  return result;
}

uint64_t (*TurbulenceForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TurbulenceForceEffect.CodingKeys()
{
  uint64_t result = 0x6874676E65727473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E68746F6F6D73;
      break;
    case 2:
      uint64_t result = 0x6465657073;
      break;
    case 3:
      uint64_t result = 0x646F4D6563726F66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TurbulenceForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TurbulenceForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TurbulenceForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TurbulenceForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TurbulenceForceEffect.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TurbulenceForceEffect.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v8 = *(unsigned char *)(v1 + 12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = v8;
    v10[11] = 3;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TurbulenceForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TurbulenceForceEffect.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    v17[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v12 = v11;
    v17[13] = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v15 = v14;
    v17[11] = 3;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    char v16 = v17[12];
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 8) = v15;
    *(unsigned char *)(a2 + 12) = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ForceEffectProtocol.parameterTypes.getter in conformance TurbulenceForceEffect@<X0>(int *a1@<X8>)
{
  return TurbulenceForceEffect.parameterTypes.getter(a1);
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance TurbulenceForceEffect(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 12);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TurbulenceForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TurbulenceForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TurbulenceForceEffect(void *a1)
{
  return TurbulenceForceEffect.encode(to:)(a1);
}

RealityFoundation::RadialForceEffect __swiftcall RadialForceEffect.init(strength:restDistance:)(Swift::Double strength, Swift::Double restDistance)
{
  float v3 = strength;
  float v4 = restDistance;
  *(float *)uint64_t v2 = v3;
  *(float *)(v2 + 4) = v4;
  *(unsigned char *)(v2 + 8) = 0;
  result.restDistance = v4;
  result.strength = v3;
  return result;
}

float RadialForceEffect.strength.getter()
{
  return *(float *)v0;
}

float RadialForceEffect.restDistance.getter()
{
  return *(float *)(v0 + 4);
}

void *RadialForceEffect.parameterTypes.getter@<X0>(_DWORD *a1@<X8>)
{
  return static PhysicsBodyParameterTypes.position.getter(&one-time initialization token for position, &static PhysicsBodyParameterTypes.position, a1);
}

void RadialForceEffect.forceMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *RadialForceEffect.forceMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*RadialForceEffect.forceMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RadialForceEffect.CodingKeys()
{
  uint64_t v1 = 0x7473694474736572;
  if (*v0 != 1) {
    uint64_t v1 = 0x646F4D6563726F66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6874676E65727473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RadialForceEffect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized RadialForceEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RadialForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RadialForceEffect.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t RadialForceEffect.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RadialForceEffect.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *(unsigned char *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = v8;
    char v11 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RadialForceEffect.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RadialForceEffect.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v19 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    char v18 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v13 = v12;
    char v16 = 2;
    lazy protocol witness table accessor for type ForceMode and conformance ForceMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = v17;
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v13;
    *(unsigned char *)(a2 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for ForceEffectProtocol.forceMode.getter in conformance RadialForceEffect(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RadialForceEffect@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return RadialForceEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RadialForceEffect(void *a1)
{
  return RadialForceEffect.encode(to:)(a1);
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.init(bytes:count:)(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

void specialized static ForceEffectLogger.logWarning(_:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static ForceEffectLogger.logger);
  swift_bridgeObjectRetain_n();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_227DD2000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v8, -1, -1);
    MEMORY[0x22A696500](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

unint64_t lazy protocol witness table accessor for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect.CodingKeys and conformance ConstantForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForceMode and conformance ForceMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForceMode and conformance ForceMode;
  if (!lazy protocol witness table cache variable for type ForceMode and conformance ForceMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceMode and conformance ForceMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect.CodingKeys and conformance ConstantRadialForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect.CodingKeys and conformance VortexForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect.CodingKeys and conformance DragForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect.CodingKeys and conformance TurbulenceForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect.CodingKeys and conformance RadialForceEffect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes;
  if (!lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyParameterTypes and conformance PhysicsBodyParameterTypes);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UnsafeForceEffectBuffer<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState()
{
  unint64_t result = lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForceEffectComponent.SimulationState and conformance ForceEffectComponent.SimulationState);
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceEffectBounds()
{
  return &type metadata for ForceEffectBounds;
}

ValueMetadata *type metadata accessor for SpatialForceFalloff()
{
  return &type metadata for SpatialForceFalloff;
}

ValueMetadata *type metadata accessor for TimedForceFalloff()
{
  return &type metadata for TimedForceFalloff;
}

ValueMetadata *type metadata accessor for ForceMode()
{
  return &type metadata for ForceMode;
}

uint64_t dispatch thunk of ForceEffectProtocol.parameterTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ForceEffectProtocol.forceMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ForceEffectProtocol.update(parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ForceEffectBase.effect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ForceEffectBase.spatialFalloff.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ForceEffectBase.timedFalloff.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ForceEffectBase.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ForceEffectBase.orientation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ForceEffectBase.strengthScale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ForceEffectBase.mask.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t type metadata instantiation function for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t type metadata completion function for ForceEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ForceEffect(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  uint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v10 + 9);
  *uint64_t v9 = v11;
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  uint64_t v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  char v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v15 = *v16;
  char v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *char v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)unint64_t v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  char v20 = (void *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  char v21 = (void *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *char v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  uint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v10 + 9);
  *uint64_t v9 = v11;
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  uint64_t v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  char v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v15 = *v16;
  char v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *char v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)unint64_t v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  char v20 = (void *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  char v21 = (void *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *char v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  uint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v10 + 9);
  *uint64_t v9 = v11;
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  uint64_t v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  char v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v15 = *v16;
  char v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *char v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)unint64_t v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  *(_OWORD *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0) = *(_OWORD *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  return a1;
}

uint64_t assignWithTake for ForceEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  uint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v10 + 9);
  *uint64_t v9 = v11;
  unint64_t v12 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  uint64_t v15 = (_OWORD *)((v7 + 71) & 0xFFFFFFFFFFFFFFF0);
  char v16 = (_OWORD *)((v8 + 71) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v15 = *v16;
  char v17 = (_OWORD *)(((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (_OWORD *)(((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF0);
  *char v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)unint64_t v19 = *(_DWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v19 + 4) = *(_DWORD *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 4);
  *(unsigned char *)(v19 + 8) = *(unsigned char *)((((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF0) + 8);
  char v20 = (void *)(((unint64_t)v17 + 35) & 0xFFFFFFFFFFFFFFF0);
  char v21 = (void *)(((unint64_t)v18 + 35) & 0xFFFFFFFFFFFFFFF0);
  *char v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffect(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF0;
    if ((v8 & 0xFFFFFFF0) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22819D060);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((((((unint64_t)a1 + v6 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0)
                  + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ForceEffect(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)((((((unint64_t)&a1[v9 + 71] & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0) = a2 ^ 0x80000000;
                *(void *)(((((((unint64_t)&a1[v9 + 71] & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0)
                            + 35) & 0xFFFFFFFFFFFFFFF0)
                          + 8) = 0;
              }
              else
              {
                *(void *)(((((((unint64_t)&a1[v9 + 71] & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0)
                            + 35) & 0xFFFFFFFFFFFFFFF0)
                          + 8) = a2 - 1;
              }
            }
            else
            {
              char v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 71) & 0xFFFFFFF0) + 31) & 0xFFFFFFF0) + 35) & 0xFFFFFFF0) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 71) & 0xFFFFFFF0) + 31) & 0xFFFFFFF0) + 35) & 0xFFFFFFF0) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 71) & 0xFFFFFFF0) + 31) & 0xFFFFFFF0) + 35) & 0xFFFFFFF0) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 71) & 0xFFFFFFFFFFFFFFF0) + 31) & 0xFFFFFFFFFFFFFFF0) + 35) & 0xFFFFFFFFFFFFFFF0) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x22819D280);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for PhysicsBodyParameterTypes()
{
  return &type metadata for PhysicsBodyParameterTypes;
}

uint64_t type metadata accessor for UnsafeForceEffectBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UnsafeForceEffectBuffer.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  long long v9 = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v10;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ForceEffectParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffectParameters(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceEffectParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceEffectParameters()
{
  return &type metadata for ForceEffectParameters;
}

uint64_t type metadata completion function for ForceEffectEvent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForceEffectEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 232 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    long long v12 = *(_OWORD *)(v11 + 32);
    *(unsigned char *)(v10 + 48) = *(unsigned char *)(v11 + 48);
    *(_OWORD *)(v10 + 32) = v12;
    char v13 = *(unsigned char *)(v11 + 72);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(unsigned char *)(v10 + 72) = v13;
    char v14 = *(unsigned char *)(v11 + 96);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(unsigned char *)(v10 + 96) = v14;
    char v15 = *(unsigned char *)(v11 + 120);
    *(_OWORD *)(v10 + 104) = *(_OWORD *)(v11 + 104);
    *(unsigned char *)(v10 + 120) = v15;
    char v16 = *(unsigned char *)(v11 + 144);
    *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
    *(unsigned char *)(v10 + 144) = v16;
    char v17 = *(unsigned char *)(v11 + 168);
    *(_OWORD *)(v10 + 152) = *(_OWORD *)(v11 + 152);
    *(unsigned char *)(v10 + 168) = v17;
    char v18 = *(unsigned char *)(v11 + 192);
    *(_OWORD *)(v10 + 176) = *(_OWORD *)(v11 + 176);
    *(unsigned char *)(v10 + 192) = v18;
    *(_OWORD *)(v10 + 200) = *(_OWORD *)(v11 + 200);
    *(_OWORD *)(v10 + 216) = *(_OWORD *)(v11 + 216);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  char v9 = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  *(unsigned char *)(v7 + 48) = v9;
  char v10 = *(unsigned char *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(unsigned char *)(v7 + 72) = v10;
  char v11 = *(unsigned char *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(unsigned char *)(v7 + 96) = v11;
  char v12 = *(unsigned char *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  *(unsigned char *)(v7 + 120) = v12;
  char v13 = *(unsigned char *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(v8 + 128);
  *(unsigned char *)(v7 + 144) = v13;
  char v14 = *(unsigned char *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(v8 + 152);
  *(unsigned char *)(v7 + 168) = v14;
  char v15 = *(unsigned char *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(unsigned char *)(v7 + 192) = v15;
  *(_OWORD *)(v7 + 200) = *(_OWORD *)(v8 + 200);
  *(_OWORD *)(v7 + 216) = *(_OWORD *)(v8 + 216);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  long long v10 = *(_OWORD *)(v8 + 56);
  *(unsigned char *)(v7 + 72) = *(unsigned char *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = v10;
  long long v11 = *(_OWORD *)(v8 + 80);
  *(unsigned char *)(v7 + 96) = *(unsigned char *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v11;
  long long v12 = *(_OWORD *)(v8 + 104);
  *(unsigned char *)(v7 + 120) = *(unsigned char *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = v12;
  long long v13 = *(_OWORD *)(v8 + 128);
  *(unsigned char *)(v7 + 144) = *(unsigned char *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = v13;
  long long v14 = *(_OWORD *)(v8 + 152);
  *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = v14;
  long long v15 = *(_OWORD *)(v8 + 176);
  *(unsigned char *)(v7 + 192) = *(unsigned char *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = v15;
  *(void *)(v7 + 200) = *(void *)(v8 + 200);
  *(void *)(v7 + 208) = *(void *)(v8 + 208);
  *(void *)(v7 + 216) = *(void *)(v8 + 216);
  *(void *)(v7 + 224) = *(void *)(v8 + 224);
  return a1;
}

uint64_t initializeWithTake for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v14 = *(_OWORD *)(v8 + 160);
  long long v16 = *(_OWORD *)(v8 + 112);
  long long v15 = *(_OWORD *)(v8 + 128);
  *(_OWORD *)(v7 + 144) = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 160) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  *(_OWORD *)(v7 + 128) = v15;
  long long v18 = *(_OWORD *)(v8 + 192);
  long long v17 = *(_OWORD *)(v8 + 208);
  long long v19 = *(_OWORD *)(v8 + 176);
  *(void *)(v7 + 224) = *(void *)(v8 + 224);
  *(_OWORD *)(v7 + 192) = v18;
  *(_OWORD *)(v7 + 208) = v17;
  *(_OWORD *)(v7 + 176) = v19;
  return a1;
}

uint64_t assignWithTake for ForceEffectEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  long long v10 = *(_OWORD *)(v8 + 56);
  *(unsigned char *)(v7 + 72) = *(unsigned char *)(v8 + 72);
  *(_OWORD *)(v7 + 56) = v10;
  long long v11 = *(_OWORD *)(v8 + 80);
  *(unsigned char *)(v7 + 96) = *(unsigned char *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v11;
  long long v12 = *(_OWORD *)(v8 + 104);
  *(unsigned char *)(v7 + 120) = *(unsigned char *)(v8 + 120);
  *(_OWORD *)(v7 + 104) = v12;
  long long v13 = *(_OWORD *)(v8 + 128);
  *(unsigned char *)(v7 + 144) = *(unsigned char *)(v8 + 144);
  *(_OWORD *)(v7 + 128) = v13;
  long long v14 = *(_OWORD *)(v8 + 152);
  *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
  *(_OWORD *)(v7 + 152) = v14;
  long long v15 = *(_OWORD *)(v8 + 176);
  *(unsigned char *)(v7 + 192) = *(unsigned char *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = v15;
  *(void *)(v7 + 200) = *(void *)(v8 + 200);
  *(void *)(v7 + 208) = *(void *)(v8 + 208);
  *(void *)(v7 + 216) = *(void *)(v8 + 216);
  *(void *)(v7 + 224) = *(void *)(v8 + 224);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForceEffectEvent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 232;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22819DE1CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ForceEffectEvent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 232;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF18) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF18) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF18)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 232);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x22819E048);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(_OWORD *)(v18 + 200) = 0u;
            uint64_t v19 = a2 ^ 0x80000000;
            *(_OWORD *)(v18 + 216) = 0u;
            *(_OWORD *)(v18 + 184) = 0u;
            *(_OWORD *)(v18 + 168) = 0u;
            *(_OWORD *)(v18 + 152) = 0u;
            *(_OWORD *)(v18 + 136) = 0u;
            *(_OWORD *)(v18 + 120) = 0u;
            *(_OWORD *)(v18 + 104) = 0u;
            *(_OWORD *)(v18 + 88) = 0u;
            *(_OWORD *)(v18 + 72) = 0u;
            *(_OWORD *)(v18 + 56) = 0u;
            *(_OWORD *)(v18 + 40) = 0u;
            *(_OWORD *)(v18 + 24) = 0u;
            *(_OWORD *)(v18 + 8) = 0u;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)unint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ForceEffectEvent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ForceEffectComponent()
{
  return &type metadata for ForceEffectComponent;
}

ValueMetadata *type metadata accessor for ForceEffectComponent.SimulationState()
{
  return &type metadata for ForceEffectComponent.SimulationState;
}

uint64_t type metadata accessor for ForceEffectProtocolWrapper()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ConstantForceEffect()
{
  return &type metadata for ConstantForceEffect;
}

ValueMetadata *type metadata accessor for ConstantRadialForceEffect()
{
  return &type metadata for ConstantRadialForceEffect;
}

uint64_t getEnumTagSinglePayload for ConstantForceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConstantForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VortexForceEffect()
{
  return &type metadata for VortexForceEffect;
}

uint64_t getEnumTagSinglePayload for ConstantRadialForceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConstantRadialForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DragForceEffect()
{
  return &type metadata for DragForceEffect;
}

uint64_t getEnumTagSinglePayload for TurbulenceForceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TurbulenceForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TurbulenceForceEffect()
{
  return &type metadata for TurbulenceForceEffect;
}

uint64_t getEnumTagSinglePayload for RadialForceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadialForceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadialForceEffect()
{
  return &type metadata for RadialForceEffect;
}

void *type metadata accessor for RadialForceEffect.CodingKeys()
{
  return &unk_26DCB1510;
}

void *type metadata accessor for TurbulenceForceEffect.CodingKeys()
{
  return &unk_26DCB15A0;
}

void *type metadata accessor for DragForceEffect.CodingKeys()
{
  return &unk_26DCB1630;
}

void *type metadata accessor for VortexForceEffect.CodingKeys()
{
  return &unk_26DCB16C0;
}

unsigned char *storeEnumTagSinglePayload for DragForceEffect.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22819E534);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ConstantRadialForceEffect.CodingKeys()
{
  return &unk_26DCB1750;
}

unsigned char *storeEnumTagSinglePayload for ForceEffectComponent.SimulationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22819E638);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ConstantForceEffect.CodingKeys()
{
  return &unk_26DCB17E0;
}

unsigned char *storeEnumTagSinglePayload for ForceMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22819E73CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ForceMode.CodingKeys()
{
  return &unk_26DCB1870;
}

void *type metadata accessor for ForceMode.ForceCodingKeys()
{
  return &unk_26DCB1890;
}

void *type metadata accessor for ForceMode.AccelerationCodingKeys()
{
  return &unk_26DCB18B0;
}

void *type metadata accessor for ForceMode.ImpulseCodingKeys()
{
  return &unk_26DCB18D0;
}

void *type metadata accessor for ForceMode.VelocityCodingKeys()
{
  return &unk_26DCB18F0;
}

uint64_t specialized RadialForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7473694474736572 && a2 == 0xEC00000065636E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized VortexForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ConstantForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized TurbulenceForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E68746F6F6D73 && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized DragForceEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874676E65727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F4D6563726F66 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ForceMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6563726F66 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6172656C65636361 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736C75706D69 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t dynamic_cast_existential_3_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      if (swift_conformsToProtocol2()) {
        return a1;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22819FB38()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for ForceEffect() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in ForceEffect.toCore(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  type metadata accessor for ForceEffect();
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v7);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v5 + 24))(v7, v4, v5);
  v9[12] = v7[12];
  v9[13] = v7[13];
  uint64_t v10 = v8;
  v9[8] = v7[8];
  v9[9] = v7[9];
  v9[10] = v7[10];
  v9[11] = v7[11];
  v9[4] = v7[4];
  void v9[5] = v7[5];
  v9[6] = v7[6];
  v9[7] = v7[7];
  v9[0] = v7[0];
  v9[1] = v7[1];
  void v9[2] = v7[2];
  void v9[3] = v7[3];
  outlined release of TimelineDefinition?((uint64_t)v9);
  return 0;
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

_OWORD *outlined init with take of Decodable & Encodable(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_22819FD74()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_22819FDBC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol.__register(engine:_:)(a1, a2, v2[4], v2[5], v2[2]);
}

uint64_t type metadata accessor for Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Box()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t static Box<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Box<A>()
{
  return static Box<A>.== infix(_:_:)();
}

uint64_t Box.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MutableBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static MutableBox<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x270FA5388](v8);
  unsigned int v11 = (char *)&v17 - v10;
  unsigned int v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v13((char *)&v17 - v10, v12 + *(void *)(*(void *)v12 + 88), v4, v9);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v7, a2 + *(void *)(*(void *)a2 + 88), v4);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  v15(v11, v4);
  return v14 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> MutableBox<A>(uint64_t *a1, uint64_t *a2)
{
  return static MutableBox<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t static Indirect<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x270FA5388](v8);
  unsigned int v11 = (char *)&v17 - v10;
  unsigned int v13 = *(void (**)(char *, uint64_t, __n128))(v5 + 16);
  v13((char *)&v17 - v10, v12 + *(void *)(*(void *)v12 + 88), v9);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v7, a2 + *(void *)(*(void *)a2 + 88), a3);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, a3);
  v15(v11, a3);
  return v14 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Indirect<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static Indirect<A>.== infix(_:_:)(*a1, *a2, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for Indirect()
{
  return __swift_instantiateGenericMetadata();
}

double MaterialParameters.Texture.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = (id)REMaterialCreateDefaultSamplerDescriptor();
  *(void *)(a2 + 8) = a1;
  *(void *)(a2 + 16) = 0;
  *(void *)&double result = 84148994;
  *(_DWORD *)(a2 + 24) = 84148994;
  return result;
}

uint64_t MaterialParameters.allKeys.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = Material.allKeys.getter(v2, v3);
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_bridgeObjectRelease();
  return v5;
}

double MaterialParameters.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  Material.subscript.getter(a1, a2, v7, (uint64_t)v12);
  unsigned __int8 v8 = v13;
  if (v13 == 255)
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 64) = v8;
  }
  else
  {
    v10[0] = v12[0];
    v10[1] = v12[1];
    void v10[2] = v12[2];
    void v10[3] = v12[3];
    unsigned __int8 v11 = v13;
    return MaterialParameters.Value.init(_:)((uint64_t *)v10, a3);
  }
  return result;
}

{
  void *v3;
  uint64_t v7;
  unsigned __int8 v8;
  double result;
  _OWORD v10[4];
  unsigned __int8 v11;
  _OWORD v12[4];
  unsigned __int8 v13;

  uint64_t v7 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  Material.subscript.getter(a1, a2, v7, (uint64_t)v12);
  unsigned __int8 v8 = v13;
  if (v13 == 255)
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 64) = v8;
  }
  else
  {
    v10[0] = v12[0];
    v10[1] = v12[1];
    void v10[2] = v12[2];
    void v10[3] = v12[3];
    unsigned __int8 v11 = v13;
    return MaterialParameters.Value.init(_:)((uint64_t *)v10, a3);
  }
  return result;
}

__n128 MaterialParameters.subscript.setter(long long *a1, uint64_t a2, uint64_t a3)
{
  char v6 = *((unsigned char *)a1 + 64);
  long long v7 = a1[1];
  long long v18 = *a1;
  long long v19 = v7;
  long long v8 = a1[3];
  long long v20 = a1[2];
  long long v21 = v8;
  char v22 = v6;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v18, (uint64_t)v23);
  long long v16 = v23[1];
  long long v17 = v23[0];
  long long v15 = v23[2];
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  char v11 = v26;
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(void *)(v3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v12);
  long long v18 = v17;
  long long v19 = v16;
  long long v20 = v15;
  *(void *)&long long v21 = v9;
  *((void *)&v21 + 1) = v10;
  char v22 = v11;
  Material.subscript.setter((uint64_t)&v18, a2, a3, v12, v13);
  return result;
}

{
  uint64_t v3;
  char v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  char v22;
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  char v26;

  char v6 = *((unsigned char *)a1 + 64);
  long long v7 = a1[1];
  long long v18 = *a1;
  long long v19 = v7;
  long long v8 = a1[3];
  long long v20 = a1[2];
  long long v21 = v8;
  char v22 = v6;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v18, (uint64_t)v23);
  long long v16 = v23[1];
  long long v17 = v23[0];
  long long v15 = v23[2];
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  char v11 = v26;
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(void *)(v3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v12);
  long long v18 = v17;
  long long v19 = v16;
  long long v20 = v15;
  *(void *)&long long v21 = v9;
  *((void *)&v21 + 1) = v10;
  char v22 = v11;
  Material.subscript.setter((uint64_t)&v18, a2, a3, v12, v13);
  return result;
}

uint64_t MaterialParameters.Texture.sampler.getter@<X0>(void *a1@<X8>)
{
  if (*v1) {
    id v3 = *v1;
  }
  else {
    id v3 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  *a1 = v3;

  return MEMORY[0x270F9A8A0]();
}

double MaterialParameters.Texture.init(_:sampler:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 16) = 0;
  *(void *)&double result = 84148994;
  *(_DWORD *)(a3 + 24) = 84148994;
  *(void *)a3 = v3;
  return result;
}

RealityFoundation::MaterialParameters::Texture::Sampler __swiftcall MaterialParameters.Texture.Sampler.init()()
{
  unint64_t v1 = v0;
  result.descriptor.super.Class isa = (Class)(id)REMaterialCreateDefaultSamplerDescriptor();
  v1->descriptor.super.Class isa = result.descriptor.super.isa;
  return result;
}

RealityFoundation::MaterialParameters::Texture::Sampler __swiftcall MaterialParameters.Texture.Sampler.init(_:)(RealityFoundation::MaterialParameters::Texture::Sampler result)
{
  v1->descriptor.super.Class isa = result.descriptor.super.isa;
  return result;
}

uint64_t MaterialParameters.Value.getMaterialParameterType()()
{
  return dword_228343260[*(char *)(v0 + 64)];
}

void MaterialParameters.Texture.Sampler.modify<A>(_:)(void (*a1)())
{
  objc_msgSend(*v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  swift_dynamicCast();
  a1();
  if (v2)
  {
  }
  else
  {

    id *v1 = v4;
  }
}

void MaterialParameters.Texture.Sampler.access<A>(_:)(void (*a1)())
{
  objc_msgSend(*v1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  swift_dynamicCast();
  a1();
}

uint64_t MaterialParameters.Texture.resource.getter()
{
  return swift_retain();
}

uint64_t MaterialParameters.Texture.resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MaterialParameters.Texture.resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path getter for MaterialParameters.Texture.sampler : MaterialParameters.Texture@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  if (*a1)
  {
    id v3 = *a1;
    swift_retain();
  }
  else
  {
    swift_retain();
    id v3 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

void MaterialParameters.Texture.sampler.setter(void **a1)
{
  uint64_t v2 = *a1;

  id *v1 = v2;
}

void (*MaterialParameters.Texture.sampler.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  id v3 = *v1;
  if (*v1)
  {
    id v4 = *v1;
  }
  else
  {
    id v4 = (id)REMaterialCreateDefaultSamplerDescriptor();
    id v3 = 0;
  }
  *a1 = v4;
  id v5 = v3;
  return MaterialParameters.Texture.sampler.modify;
}

void MaterialParameters.Texture.sampler.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  id v4 = *v2;
  if (a2)
  {
    id v5 = v3;

    *uint64_t v2 = v3;
  }
  else
  {

    *uint64_t v2 = v3;
  }
}

uint64_t MaterialParameters.Texture.uvIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t MaterialParameters.Texture.uvIndex.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*MaterialParameters.Texture.uvIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialParameters.Texture.swizzle.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t MaterialParameters.Texture.swizzle.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*MaterialParameters.Texture.swizzle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialParameters.Handle.SharedHandle.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

double MaterialParameters.Value.init(_:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  switch(*((unsigned char *)a1 + 64))
  {
    case 1:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)(a2 + 16) = v4;
      *(void *)(a2 + 24) = v5;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 0;
      break;
    case 2:
      *(void *)a2 = *a1;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 2;
      break;
    case 3:
      *(void *)a2 = v2;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 3;
      break;
    case 4:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 4;
      break;
    case 5:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 5;
      break;
    case 6:
      *(void *)a2 = v2;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 6;
      break;
    case 7:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 7;
      break;
    case 8:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)(a2 + 16) = v4;
      *(void *)(a2 + 24) = v5;
      *(void *)(a2 + 32) = v6;
      *(void *)(a2 + 40) = v7;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 8;
      break;
    case 9:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)(a2 + 16) = v4;
      *(void *)(a2 + 24) = v5;
      *(void *)(a2 + 32) = v6;
      *(void *)(a2 + 40) = v7;
      long long v8 = *((_OWORD *)a1 + 3);
      *(_OWORD *)(a2 + 48) = v8;
      *(unsigned char *)(a2 + 64) = 9;
      break;
    case 0xA:
      *(void *)a2 = *a1 & 1;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 10;
      break;
    case 0xB:
      *(void *)a2 = *a1;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 11;
      break;
    case 0xC:
      *(void *)a2 = v2;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 12;
      break;
    case 0xD:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 13;
      break;
    case 0xE:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 14;
      break;
    case 0xF:
      *(void *)a2 = *a1;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 15;
      break;
    case 0x10:
      *(void *)a2 = v2;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 16;
      break;
    case 0x11:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 17;
      break;
    case 0x12:
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v3;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(unsigned char *)(a2 + 64) = 18;
      break;
    case 0x13:
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(unsigned char *)(a2 + 64) = -1;
      break;
    default:
      *(void *)a2 = v2;
      *(void *)&long long v8 = 0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 64) = 1;
      break;
  }
  return *(double *)&v8;
}

unint64_t MaterialParameters.Value.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v7 = 0uLL;
  char v8 = 3;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
  unint64_t v11 = 0;
  unint64_t result = *(void *)a1;
  long long v13 = 0uLL;
  long long v14 = 0uLL;
  switch(v9)
  {
    case 1:
      unint64_t v11 = 0;
      unint64_t result = v4;
      char v8 = 2;
      break;
    case 2:
      break;
    case 3:
      char v8 = 4;
      goto LABEL_20;
    case 4:
      char v8 = 5;
      goto LABEL_20;
    case 5:
      unint64_t v11 = 0;
      char v8 = 6;
      unint64_t result = v4;
      break;
    case 6:
      char v8 = 7;
      goto LABEL_20;
    case 7:
      char v8 = 8;
      goto LABEL_10;
    case 8:
      char v8 = 9;
      long long v7 = *(_OWORD *)(a1 + 48);
LABEL_10:
      unint64_t result = v4;
      unint64_t v11 = v3;
      long long v13 = v6;
      long long v14 = v5;
      break;
    case 9:
      unint64_t v11 = 0;
      unint64_t result = v4 & 1;
      char v8 = 10;
      break;
    case 10:
      unint64_t v11 = 0;
      unint64_t result = v4;
      char v8 = 11;
      break;
    case 11:
      unint64_t v11 = 0;
      char v8 = 12;
      unint64_t result = v4;
      break;
    case 12:
      char v8 = 13;
      goto LABEL_20;
    case 13:
      char v8 = 14;
      goto LABEL_20;
    case 14:
      unint64_t v11 = 0;
      unint64_t result = v4;
      char v8 = 15;
      break;
    case 15:
      unint64_t v11 = 0;
      char v8 = 16;
      unint64_t result = v4;
      break;
    case 16:
      char v8 = 17;
      goto LABEL_20;
    case 17:
      char v8 = 18;
LABEL_20:
      unint64_t result = v4;
      unint64_t v11 = v3;
      break;
    default:
      unint64_t result = (unint64_t)(id)REMaterialCreateDefaultSamplerDescriptor();
      long long v7 = 0uLL;
      char v8 = 0;
      long long v13 = xmmword_22832B280;
      unint64_t v11 = v4;
      long long v14 = 0uLL;
      break;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v7;
  *(unsigned char *)(a2 + 64) = v8;
  return result;
}

uint64_t MaterialParameters.Value.cgColorValue.getter()
{
  if (v0[4].n128_u8[0] == 5) {
    return specialized SIMD4<>.cgColor.getter(*v0);
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd4FloatValue.getter()
{
  if (v0[64] == 5) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.textureValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 64))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
  }
  else
  {
    int v6 = *(_DWORD *)(v1 + 24);
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t v5 = *(void *)(v1 + 16);
    unint64_t v3 = *(void **)v1;
    id v7 = v3;
    uint64_t result = swift_retain();
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t MaterialParameters.Value.textureResourceValue.getter()
{
  if (*(unsigned char *)(v0 + 64) == 1) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.floatValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 64);
  BOOL v3 = v2 == 2;
  uint64_t v4 = v2 != 2;
  if (!v3) {
    uint64_t v1 = 0;
  }
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.simd2FloatValue.getter()
{
  if (v0[64] == 3) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

id MaterialParameters.Value.colorValue.getter()
{
  if (*(unsigned char *)(v0 + 64) != 6) {
    return 0;
  }
  id v1 = *(id *)v0;
  id v2 = *(id *)v0;
  return v1;
}

uint64_t MaterialParameters.Value.float2x2Value.getter()
{
  int v1 = v0[64];
  if (v1 == 7) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

void MaterialParameters.Value.float3x3Value.getter(uint64_t a1@<X8>)
{
  int v2 = *((unsigned __int8 *)v1 + 64);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  long long v5 = 0uLL;
  if (v2 == 8)
  {
    long long v4 = v1[1];
    long long v5 = v1[2];
    long long v3 = *v1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 48) = v2 != 8;
}

void MaterialParameters.Value.float4x4Value.getter(uint64_t a1@<X8>)
{
  int v2 = *((unsigned __int8 *)v1 + 64);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  if (v2 == 9)
  {
    long long v5 = v1[2];
    long long v6 = v1[3];
    long long v3 = *v1;
    long long v4 = v1[1];
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 64) = v2 != 9;
}

uint64_t MaterialParameters.Value.BOOLValue.getter()
{
  if (v0[64] == 10) {
    return *v0 & 1;
  }
  else {
    return 2;
  }
}

uint64_t MaterialParameters.Value.intValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 64);
  BOOL v3 = v2 == 11;
  uint64_t v4 = v2 != 11;
  if (!v3) {
    uint64_t v1 = 0;
  }
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.uintValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 64);
  BOOL v3 = v2 == 15;
  uint64_t v4 = v2 != 15;
  if (!v3) {
    uint64_t v1 = 0;
  }
  return v1 | (v4 << 32);
}

uint64_t MaterialParameters.Value.simd2IntValue.getter()
{
  if (v0[64] == 12) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd2UIntValue.getter()
{
  if (v0[64] == 16) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd3IntValue.getter()
{
  if (v0[64] == 13) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd3UIntValue.getter()
{
  if (v0[64] == 17) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd4IntValue.getter()
{
  if (v0[64] == 14) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd4UIntValue.getter()
{
  if (v0[64] == 18) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

void key path getter for MaterialParameters.subscript(_:) : MaterialParameters(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  Material.subscript.getter(v4, v5, v6, (uint64_t)v14);
  unsigned __int8 v7 = v15;
  if (v15 == 255)
  {
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
  }
  else
  {
    v12[0] = v14[0];
    v12[1] = v14[1];
    _OWORD v12[2] = v14[2];
    v12[3] = v14[3];
    unsigned __int8 v13 = v15;
    MaterialParameters.Value.init(_:)((uint64_t *)v12, (uint64_t)v16);
    long long v8 = v16[0];
    long long v9 = v16[1];
    long long v10 = v16[2];
    long long v11 = v16[3];
    unsigned __int8 v7 = v17;
  }
  *(_OWORD *)a3 = v8;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v11;
  *(unsigned char *)(a3 + 64) = v7;
}

void key path setter for MaterialParameters.subscript(_:) : MaterialParameters(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v21 = a3[1];
  uint64_t v22 = *a3;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 64);
  *(void *)&long long v23 = *(void *)a1;
  long long v20 = (void *)v23;
  *((void *)&v23 + 1) = v19;
  *(void *)&long long v24 = v18;
  *((void *)&v24 + 1) = v4;
  *(void *)&long long v25 = v5;
  *((void *)&v25 + 1) = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v17;
  unsigned __int8 v28 = v8;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v23, (uint64_t)v29);
  long long v14 = v29[1];
  long long v15 = v29[0];
  long long v13 = v29[2];
  uint64_t v9 = v30;
  uint64_t v10 = v31;
  unsigned __int8 v11 = v32;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  long long v23 = v15;
  long long v24 = v14;
  long long v25 = v13;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  unsigned __int8 v28 = v11;
  swift_bridgeObjectRetain();
  outlined copy of MaterialParameters.Value?(v20, v19, v18, v4, v5, v6, v7, v17, v8);
  Material.subscript.setter((uint64_t)&v23, v22, v21, v12, v16);
}

void (*MaterialParameters.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  uint64_t v8 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  Material.subscript.getter(a2, a3, v8, (uint64_t)v13);
  unsigned __int8 v9 = v14;
  if (v14 == 255)
  {
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((unsigned char *)v7 + 64) = v9;
  }
  else
  {
    v11[0] = v13[0];
    v11[1] = v13[1];
    v11[2] = v13[2];
    void v11[3] = v13[3];
    unsigned __int8 v12 = v14;
    MaterialParameters.Value.init(_:)((uint64_t *)v11, (uint64_t)v7);
  }
  return MaterialParameters.subscript.modify;
}

{
  void *v3;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  _OWORD v11[4];
  unsigned __int8 v12;
  _OWORD v13[4];
  unsigned __int8 v14;

  uint64_t v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  uint64_t v8 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  Material.subscript.getter(a2, a3, v8, (uint64_t)v13);
  unsigned __int8 v9 = v14;
  if (v14 == 255)
  {
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((unsigned char *)v7 + 64) = v9;
  }
  else
  {
    v11[0] = v13[0];
    v11[1] = v13[1];
    v11[2] = v13[2];
    void v11[3] = v13[3];
    unsigned __int8 v12 = v14;
    MaterialParameters.Value.init(_:)((uint64_t *)v11, (uint64_t)v7);
  }
  return MaterialParameters.subscript.modify;
}

void MaterialParameters.subscript.modify(void ***a1, char a2)
{
  int v2 = *a1;
  BOOL v3 = **a1;
  uint64_t v4 = (uint64_t)(*a1)[1];
  uint64_t v6 = (uint64_t)(*a1)[2];
  uint64_t v5 = (uint64_t)(*a1)[3];
  uint64_t v8 = (uint64_t)(*a1)[4];
  uint64_t v7 = (uint64_t)(*a1)[5];
  uint64_t v10 = (uint64_t)(*a1)[6];
  unsigned __int8 v9 = (*a1)[7];
  unsigned __int8 v11 = *((unsigned char *)*a1 + 64);
  uint64_t v12 = (uint64_t)(*a1)[11];
  uint64_t v30 = (uint64_t)(*a1)[9];
  uint64_t v31 = (uint64_t)(*a1)[10];
  *(void *)&long long v38 = v3;
  *((void *)&v38 + 1) = v4;
  *(void *)&long long v39 = v6;
  *((void *)&v39 + 1) = v5;
  *(void *)&long long v40 = v8;
  *((void *)&v40 + 1) = v7;
  uint64_t v41 = v10;
  uint64_t v42 = v9;
  unsigned __int8 v43 = v11;
  if (a2)
  {
    uint64_t v28 = (uint64_t)v9;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    long long v22 = v33;
    long long v23 = v32;
    long long v21 = v34;
    uint64_t v19 = v36;
    uint64_t v20 = v35;
    unsigned __int8 v18 = v37;
    uint64_t v24 = *(void *)(v12 + 24);
    uint64_t v26 = *(void *)(v12 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v12, v24);
    long long v38 = v23;
    long long v39 = v22;
    long long v40 = v21;
    uint64_t v41 = v20;
    uint64_t v42 = v19;
    unsigned __int8 v43 = v18;
    swift_bridgeObjectRetain();
    outlined copy of MaterialParameters.Value?(v3, v4, v6, v5, v8, v7, v10, v28, v11);
    Material.subscript.setter((uint64_t)&v38, v30, v31, v24, v26);
    outlined consume of MaterialParameters.Value?(*v2, (uint64_t)v2[1], (uint64_t)v2[2], (uint64_t)v2[3], (uint64_t)v2[4], (uint64_t)v2[5], (uint64_t)v2[6], (uint64_t)v2[7], *((unsigned char *)v2 + 64));
  }
  else
  {
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    long long v27 = v33;
    long long v29 = v32;
    long long v25 = v34;
    uint64_t v13 = v35;
    unsigned __int8 v14 = v36;
    unsigned __int8 v15 = v37;
    uint64_t v16 = *(void *)(v12 + 24);
    uint64_t v17 = *(void *)(v12 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v12, v16);
    long long v38 = v29;
    long long v39 = v27;
    long long v40 = v25;
    uint64_t v41 = v13;
    uint64_t v42 = v14;
    unsigned __int8 v43 = v15;
    swift_bridgeObjectRetain();
    Material.subscript.setter((uint64_t)&v38, v30, v31, v16, v17);
  }

  free(v2);
}

id outlined copy of MaterialParameters.Value?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of MaterialParameters.Value(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t MaterialParameters.Metadata.displayName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialParameters.Metadata.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MaterialParameters.Metadata.displayName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::MaterialParameters::Metadata_optional __swiftcall MaterialParameters.metadata(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v4._uint64_t countAndFlagsBits = countAndFlagsBits;
  v4._object = object;
  RealityFoundation::MaterialParameters::Metadata_optional v7 = Material.metadata(for:)(v4);
  uint64_t v6 = v7.value.displayName.value._object;
  uint64_t v5 = v7.value.displayName.value._countAndFlagsBits;
  result.value.displayName.value._object = v6;
  result.value.displayName.value._uint64_t countAndFlagsBits = v5;
  return result;
}

void UniformParameters.Value.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 84148994;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  switch(*(unsigned char *)(a1 + 64))
  {
    case 1:
      break;
    case 2:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v3 = *(void *)a1;
      char v12 = 1;
      break;
    case 3:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 2;
      break;
    case 4:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 3;
      goto LABEL_20;
    case 5:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 4;
      goto LABEL_20;
    case 6:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 5;
      break;
    case 7:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 6;
      goto LABEL_20;
    case 8:
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 7;
      uint64_t v2 = *(void *)(a1 + 8);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      break;
    case 9:
      char v12 = 8;
      uint64_t v2 = *(void *)(a1 + 8);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      break;
    case 0xA:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v3 = *(void *)a1 & 1;
      char v12 = 9;
      break;
    case 0xB:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v3 = *(void *)a1;
      char v12 = 10;
      break;
    case 0xC:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 11;
      break;
    case 0xD:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 12;
      goto LABEL_20;
    case 0xE:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 13;
      goto LABEL_20;
    case 0xF:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v3 = *(void *)a1;
      char v12 = 14;
      break;
    case 0x10:
      uint64_t v2 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 15;
      break;
    case 0x11:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 16;
      goto LABEL_20;
    case 0x12:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 17;
LABEL_20:
      uint64_t v2 = *(void *)(a1 + 8);
      break;
    default:
      swift_retain();
      outlined consume of MaterialParameters.Value((void *)v3, v4, v6, v5, v8, v7, v9, v10, 0);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v12 = 0;
      uint64_t v3 = v4;
      break;
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v18;
  *(unsigned char *)(a2 + 64) = v12;
}

uint64_t UniformParameters.Value.cgColorValue.getter()
{
  if (v0[4].n128_u8[0] == 4) {
    return specialized SIMD4<>.cgColor.getter(*v0);
  }
  else {
    return 0;
  }
}

uint64_t MaterialParameters.Value.simd3FloatValue.getter()
{
  if (v0[64] == 4) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

id static UniformParameters.Value.cgColor(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 6;
  return a1;
}

uint64_t UniformParameters.Value.textureValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 64))
  {
    uint64_t result = 0;
    int v4 = 0;
  }
  else
  {
    int v4 = *(_DWORD *)(v1 + 8);
    uint64_t result = swift_retain();
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t UniformParameters.Value.floatValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 64);
  BOOL v3 = v2 == 1;
  uint64_t v4 = v2 != 1;
  if (!v3) {
    uint64_t v1 = 0;
  }
  return v1 | (v4 << 32);
}

uint64_t UniformParameters.Value.simd2FloatValue.getter()
{
  if (v0[64] == 2) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t UniformParameters.Value.simd3FloatValue.getter()
{
  if (v0[64] == 3) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

id UniformParameters.Value.colorValue.getter()
{
  if (*(unsigned char *)(v0 + 64) != 5) {
    return 0;
  }
  id v1 = *(id *)v0;
  id v2 = *(id *)v0;
  return v1;
}

uint64_t UniformParameters.Value.float2x2Value.getter()
{
  int v1 = v0[64];
  if (v1 == 6) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

void UniformParameters.Value.float3x3Value.getter(uint64_t a1@<X8>)
{
  int v2 = *((unsigned __int8 *)v1 + 64);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  long long v5 = 0uLL;
  if (v2 == 7)
  {
    long long v4 = v1[1];
    long long v5 = v1[2];
    long long v3 = *v1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 48) = v2 != 7;
}

void UniformParameters.Value.float4x4Value.getter(uint64_t a1@<X8>)
{
  int v2 = *((unsigned __int8 *)v1 + 64);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  if (v2 == 8)
  {
    long long v5 = v1[2];
    long long v6 = v1[3];
    long long v3 = *v1;
    long long v4 = v1[1];
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 64) = v2 != 8;
}

uint64_t UniformParameters.Value.BOOLValue.getter()
{
  if (v0[64] == 9) {
    return *v0 & 1;
  }
  else {
    return 2;
  }
}

double UniformParameters.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)&v19, "customParams.");
  HIWORD(v19) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  uint64_t v5 = v3[3];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  Material.subscript.getter(v19, *((uint64_t *)&v19 + 1), v5, (uint64_t)&v14);
  if (v18 == 255)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12[0] = v14;
    v12[1] = v15;
    _OWORD v12[2] = v16;
    v12[3] = v17;
    unsigned __int8 v13 = v18;
    MaterialParameters.Value.init(_:)((uint64_t *)v12, (uint64_t)&v19);
    swift_bridgeObjectRelease();
    unsigned __int8 v6 = v23;
    if (v23 != 255)
    {
      long long v7 = v22;
      long long v8 = v21;
      long long v9 = v20;
      long long v10 = v19;
      long long v14 = v19;
      long long v15 = v20;
      long long v16 = v21;
      long long v17 = v22;
      unsigned __int8 v18 = v23;
      outlined copy of MaterialParameters.Value((id)v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
      UniformParameters.Value.init(_:)((uint64_t)&v14, a2);
      outlined consume of MaterialParameters.Value?((void *)v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v8, *((uint64_t *)&v8 + 1), v7, *((uint64_t *)&v7 + 1), v6);
      return result;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 64) = -1;
  return result;
}

double key path getter for UniformParameters.subscript(_:) : UniformParameters@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  UniformParameters.subscript.getter(*a1, (uint64_t)v7);
  char v3 = v10;
  long long v4 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v4;
  double result = *(double *)&v8;
  long long v6 = v9;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v6;
  *(unsigned char *)(a2 + 64) = v3;
  return result;
}

void key path setter for UniformParameters.subscript(_:) : UniformParameters(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v3 = (void *)a3[1];
  uint64_t v12 = *a3;
  long long v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  long long v6 = *(void **)(a1 + 24);
  long long v7 = *(void **)(a1 + 32);
  long long v8 = *(void **)(a1 + 40);
  char v10 = *(void **)(a1 + 48);
  long long v9 = *(void **)(a1 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 64);
  v13[0] = *(id *)a1;
  v13[1] = v4;
  _OWORD v13[2] = v5;
  void v13[3] = v6;
  _OWORD v13[4] = v7;
  v13[5] = v8;
  v13[6] = v10;
  v13[7] = v9;
  unsigned __int8 v14 = v11;
  swift_bridgeObjectRetain();
  outlined copy of UniformParameters.Value?(v13[0], (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v10, (uint64_t)v9, v11);
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v3;
  UniformParameters.subscript.setter((uint64_t)v13, v15);
}

void UniformParameters.subscript.setter(uint64_t a1, Swift::String a2)
{
  uint64_t v3 = v2;
  long long v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(a1 + 56);
  int v10 = *(unsigned __int8 *)(a1 + 64);
  strcpy((char *)&v40, "customParams.");
  HIWORD(v40) = -4864;
  String.append(_:)(a2);
  swift_bridgeObjectRelease();
  uint64_t v26 = *((void *)&v40 + 1);
  uint64_t v27 = v40;
  if (v10 == 255)
  {
    uint64_t v17 = *(void *)(v2 + 24);
    uint64_t v18 = *(void *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v3, *(void *)(v3 + 24));
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    char v44 = 19;
    Material.subscript.setter((uint64_t)&v40, v27, v26, v17, v18);
  }
  else
  {
    long long v22 = v4;
    *(void *)&long long v34 = v4;
    *((void *)&v34 + 1) = v5;
    *(void *)&long long v35 = v6;
    *((void *)&v35 + 1) = v7;
    uint64_t v23 = v7;
    uint64_t v24 = v9;
    *(void *)&long long v36 = v8;
    *((void *)&v36 + 1) = v28;
    uint64_t v37 = v9;
    uint64_t v38 = v25;
    char v39 = v10;
    outlined copy of UniformParameters.Value(v4, v5, v6, v7, v8, v28, v9, v25, v10);
    MaterialParameters.Value.init(_:)((uint64_t)&v34, (uint64_t)&v40);
    long long v29 = v40;
    long long v30 = v41;
    long long v31 = v42;
    long long v32 = v43;
    char v33 = v44;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v29, (uint64_t)&v34);
    long long v20 = v35;
    long long v21 = v34;
    long long v19 = v36;
    uint64_t v11 = v37;
    uint64_t v12 = v38;
    uint64_t v13 = v5;
    char v14 = v39;
    uint64_t v15 = *(void *)(v2 + 24);
    uint64_t v16 = *(void *)(v2 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v3, *(void *)(v3 + 24));
    long long v29 = v21;
    long long v30 = v20;
    long long v31 = v19;
    *(void *)&long long v32 = v11;
    *((void *)&v32 + 1) = v12;
    char v33 = v14;
    Material.subscript.setter((uint64_t)&v29, v27, v26, v15, v16);
    outlined consume of UniformParameters.Value?(v22, v13, v6, v23, v8, v28, v24, v25, v10);
  }
}

void (*UniformParameters.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[10] = a3;
  v7[11] = v3;
  v7[9] = a2;
  UniformParameters.subscript.getter(a2, (uint64_t)v7);
  return UniformParameters.subscript.modify;
}

void UniformParameters.subscript.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (uint64_t)(*a1)[1];
  uint64_t v6 = (uint64_t)(*a1)[2];
  uint64_t v5 = (uint64_t)(*a1)[3];
  uint64_t v8 = (uint64_t)(*a1)[4];
  uint64_t v7 = (uint64_t)(*a1)[5];
  uint64_t v10 = (uint64_t)(*a1)[6];
  uint64_t v9 = (*a1)[7];
  unsigned __int8 v11 = *((unsigned char *)*a1 + 64);
  uint64_t v12 = (*a1)[10];
  uint64_t v14 = (uint64_t)(*a1)[9];
  v15[0] = v3;
  v15[1] = v4;
  _OWORD v15[2] = v6;
  void v15[3] = v5;
  void v15[4] = v8;
  v15[5] = v7;
  v15[6] = v10;
  v15[7] = v9;
  unsigned __int8 v16 = v11;
  if (a2)
  {
    uint64_t v13 = (uint64_t)v9;
    swift_bridgeObjectRetain();
    outlined copy of UniformParameters.Value?(v3, v4, v6, v5, v8, v7, v10, v13, v11);
    v18._uint64_t countAndFlagsBits = v14;
    v18._object = v12;
    UniformParameters.subscript.setter((uint64_t)v15, v18);
    outlined consume of UniformParameters.Value?(*v2, (uint64_t)v2[1], (uint64_t)v2[2], (uint64_t)v2[3], (uint64_t)v2[4], (uint64_t)v2[5], (uint64_t)v2[6], (uint64_t)v2[7], *((unsigned char *)v2 + 64));
  }
  else
  {
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = v14;
    v19._object = v12;
    UniformParameters.subscript.setter((uint64_t)v15, v19);
  }

  free(v2);
}

uint64_t static MaterialParameters.Texture.Sampler.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialParameters.Texture.Sampler()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t specialized static MaterialParameters.Texture.== infix(_:_:)(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (*(void *)(*(void *)(a1 + 8) + 16) != *(void *)(*(void *)(a2 + 8) + 16)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  a3.i32[0] = *(_DWORD *)(a1 + 24);
  uint8x8_t v7 = (uint8x8_t)vmovl_u8(a3).u64[0];
  int16x4_t v13 = (int16x4_t)v7;
  v7.i32[0] = *(_DWORD *)(a2 + 24);
  int16x4_t v12 = (int16x4_t)vmovl_u8(v7).u64[0];
  if (*(void *)a1)
  {
    id v8 = *(id *)a1;
    swift_retain();
  }
  else
  {
    swift_retain();
    id v8 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  swift_release();
  if (v5)
  {
    id v9 = v5;
    swift_retain();
  }
  else
  {
    swift_retain();
    id v9 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  swift_release();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  int v10 = static NSObject.== infix(_:_:)();

  uint16x4_t v11 = (uint16x4_t)vcltz_s16(vshl_n_s16(vceq_s16(v13, v12), 0xFuLL));
  v11.i16[0] = vminv_u16(v11);
  return v10 & v11.i32[0] & (v4 == v6);
}

uint64_t specialized static MaterialParameters.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x2_t v3 = *(float32x2_t *)a1;
  float32x2_t v2 = *(float32x2_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
  uint16x4_t v11 = *(void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  int v19 = *(unsigned __int8 *)(a2 + 64);
  v134[0] = v3;
  v134[1] = v2;
  v134[2] = v5;
  v134[3] = v4;
  v134[4] = v7;
  v134[5] = v6;
  v134[6] = v9;
  v134[7] = v8;
  char v135 = v10;
  CGColorRef v136 = v11;
  uint64_t v137 = v12;
  uint64_t v138 = v14;
  uint64_t v139 = v13;
  uint64_t v140 = v15;
  uint64_t v141 = v16;
  uint64_t v142 = v18;
  uint64_t v143 = v17;
  char v144 = v19;
  switch(v10)
  {
    case 1:
      if (v19 == 1)
      {
        int v87 = v11;
        uint64_t v90 = v17;
        uint64_t v93 = v15;
        uint64_t v96 = v16;
        int v83 = (void *)v3;
        uint64_t v105 = v12;
        uint64_t v26 = (uint64_t)v2;
        outlined copy of MaterialParameters.Value(v11, v12, v14, v13, v15, v16, v18, v17, 1);
        outlined copy of MaterialParameters.Value(v83, v26, v5, v4, v7, v6, v9, v8, 1);
        outlined copy of MaterialParameters.Value(v83, v26, v5, v4, v7, v6, v9, v8, 1);
        outlined copy of MaterialParameters.Value(v87, v105, v14, v13, v93, v96, v18, v90, 1);
        outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
        uint64_t v81 = v87[2];
        uint64_t v82 = v83[2];
        outlined consume of MaterialParameters.Value(v87, v105, v14, v13, v93, v96, v18, v90, 1);
        outlined consume of MaterialParameters.Value(v83, v26, v5, v4, v7, v6, v9, v8, 1);
        LOBYTE(v26) = v82 == v81;
        return v26 & 1;
      }
      long long v20 = v11;
      uint64_t v21 = v12;
      uint64_t v22 = v16;
      uint64_t v23 = v15;
      uint64_t v24 = v17;
      goto LABEL_59;
    case 2:
      if (v19 != 2) {
        goto LABEL_61;
      }
      float v27 = v3.f32[0];
      float v28 = *(float *)&v11;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      if (v27 != v28) {
        goto LABEL_62;
      }
      goto LABEL_65;
    case 3:
      if (v19 != 3) {
        goto LABEL_61;
      }
      long long v29 = v11;
      float32x2_t v30 = v3;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      if (v30.f32[0] != *(float *)&v29 || v30.f32[1] != *((float *)&v29 + 1)) {
        goto LABEL_62;
      }
      goto LABEL_65;
    case 4:
      if (v19 != 4) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v31 = v3;
      *((float32x2_t *)&v31 + 1) = v2;
      long long v106 = v31;
      *(void *)&long long v31 = v11;
      *((void *)&v31 + 1) = v12;
      long long v97 = v31;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v32 = 0;
      while (1)
      {
        long long v114 = v106;
        float v77 = *(float *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
        long long v115 = v97;
        float v78 = *(float *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
        BOOL v33 = v77 == v78;
        if (v32 == 2) {
          goto LABEL_72;
        }
        while (1)
        {
          ++v32;
          if (v33) {
            break;
          }
          if (v32 == 2) {
            goto LABEL_62;
          }
          BOOL v33 = 0;
        }
      }
    case 5:
      if (v19 != 5) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v34 = v3;
      *((float32x2_t *)&v34 + 1) = v2;
      long long v107 = v34;
      *(void *)&long long v34 = v11;
      *((void *)&v34 + 1) = v12;
      long long v98 = v34;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v35 = 0;
      while (1)
      {
        long long v116 = v107;
        float v77 = *(float *)((unint64_t)&v116 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        long long v117 = v98;
        float v78 = *(float *)((unint64_t)&v117 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        BOOL v36 = v77 == v78;
        if (v35 == 3) {
          break;
        }
        while (1)
        {
          ++v35;
          if (v36) {
            break;
          }
          if (v35 == 3) {
            goto LABEL_62;
          }
          BOOL v36 = 0;
        }
      }
LABEL_72:
      if (v77 != v78) {
        goto LABEL_62;
      }
      goto LABEL_65;
    case 6:
      uint64_t v91 = v17;
      uint64_t v94 = v15;
      uint64_t v99 = v16;
      uint64_t v108 = v12;
      int v88 = v11;
      if (v19 == 6)
      {
        uint64_t v37 = (void *)v3;
        uint64_t v85 = (uint64_t)v2;
        type metadata accessor for CGColorRef(0);
        outlined copy of MaterialParameters.Value(v37, v85, v5, v4, v7, v6, v9, v8, 6);
        outlined copy of MaterialParameters.Value(v88, v108, v14, v13, v94, v99, v18, v91, 6);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
        char v38 = static _CFObject.== infix(_:_:)();
        outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
        return v38 & 1;
      }
      id v75 = *(id *)&v3;
      uint16x4_t v11 = v88;
      uint64_t v17 = v91;
      uint64_t v12 = v108;
      uint64_t v15 = v94;
      uint64_t v16 = v99;
      goto LABEL_61;
    case 7:
      if (v19 != 7) {
        goto LABEL_61;
      }
      uint32x2_t v40 = (uint32x2_t)vand_s8((int8x8_t)vceq_f32(v2, (float32x2_t)v12), (int8x8_t)vceq_f32(v3, (float32x2_t)v11));
      unsigned int v41 = vpmin_u32(v40, v40).u32[0];
      goto LABEL_51;
    case 8:
      if (v19 != 8) {
        goto LABEL_61;
      }
      v64.i64[0] = v7;
      v64.i64[1] = v6;
      v65.i64[0] = v5;
      v65.i64[1] = v4;
      *(float32x2_t *)v66.f32 = v3;
      *(float32x2_t *)&v66.u32[2] = v2;
      v67.i64[0] = (uint64_t)v11;
      v67.i64[1] = v12;
      v68.i64[0] = v14;
      v68.i64[1] = v13;
      v69.i64[0] = v15;
      v69.i64[1] = v16;
      uint32x4_t v50 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v65, v68), (int8x16_t)vceqq_f32(v66, v67)), (int8x16_t)vceqq_f32(v64, v69));
      v50.i32[3] = v50.i32[2];
      goto LABEL_50;
    case 9:
      if (v19 != 9) {
        goto LABEL_61;
      }
      v42.i64[0] = v9;
      v42.i64[1] = v8;
      v43.i64[0] = v7;
      v43.i64[1] = v6;
      v44.i64[0] = v5;
      v44.i64[1] = v4;
      *(float32x2_t *)v45.f32 = v3;
      *(float32x2_t *)&v45.u32[2] = v2;
      v46.i64[0] = (uint64_t)v11;
      v46.i64[1] = v12;
      v47.i64[0] = v14;
      v47.i64[1] = v13;
      v48.i64[0] = v15;
      v48.i64[1] = v16;
      v49.i64[0] = v18;
      v49.i64[1] = v17;
      uint32x4_t v50 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v44, v47), (int8x16_t)vceqq_f32(v45, v46)), vandq_s8((int8x16_t)vceqq_f32(v43, v48), (int8x16_t)vceqq_f32(v42, v49)));
LABEL_50:
      unsigned int v41 = vminvq_u32(v50);
LABEL_51:
      LODWORD(v26) = v41 >> 31;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      return v26 & 1;
    case 10:
      if (v19 != 10) {
        goto LABEL_61;
      }
      BOOL v70 = (v3.i8[0] & 1) == 0;
      char v71 = (char)v11;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      LOBYTE(v26) = v70 ^ v71;
      return v26 & 1;
    case 11:
      if (v19 != 11) {
        goto LABEL_61;
      }
      goto LABEL_40;
    case 12:
      if (v19 == 12) {
        goto LABEL_42;
      }
      goto LABEL_61;
    case 13:
      if (v19 != 13) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v51 = v3;
      *((float32x2_t *)&v51 + 1) = v2;
      long long v109 = v51;
      *(void *)&long long v51 = v11;
      *((void *)&v51 + 1) = v12;
      long long v100 = v51;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v52 = 0;
      while (1)
      {
        long long v118 = v109;
        int v79 = *(_DWORD *)((unint64_t)&v118 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
        long long v119 = v100;
        int v80 = *(_DWORD *)((unint64_t)&v119 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
        BOOL v53 = v79 == v80;
        if (v52 == 2) {
          goto LABEL_86;
        }
        while (1)
        {
          ++v52;
          if (v53) {
            break;
          }
          if (v52 == 2) {
            goto LABEL_62;
          }
          BOOL v53 = 0;
        }
      }
    case 14:
      if (v19 != 14) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v54 = v3;
      *((float32x2_t *)&v54 + 1) = v2;
      long long v110 = v54;
      *(void *)&long long v54 = v11;
      *((void *)&v54 + 1) = v12;
      long long v101 = v54;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v55 = 0;
      while (1)
      {
        long long v120 = v110;
        int v79 = *(_DWORD *)((unint64_t)&v120 & 0xFFFFFFFFFFFFFFF3 | (4 * (v55 & 3)));
        long long v121 = v101;
        int v80 = *(_DWORD *)((unint64_t)&v121 & 0xFFFFFFFFFFFFFFF3 | (4 * (v55 & 3)));
        BOOL v56 = v79 == v80;
        if (v55 == 3) {
          goto LABEL_86;
        }
        while (1)
        {
          ++v55;
          if (v56) {
            break;
          }
          if (v55 == 3) {
            goto LABEL_62;
          }
          BOOL v56 = 0;
        }
      }
    case 15:
      if (v19 != 15) {
        goto LABEL_61;
      }
LABEL_40:
      int v57 = (int)v11;
      __int32 v58 = v3.i32[0];
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      LOBYTE(v26) = v58 == v57;
      return v26 & 1;
    case 16:
      if (v19 != 16) {
        goto LABEL_61;
      }
LABEL_42:
      float v59 = v11;
      float32x2_t v60 = v3;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      if (*(void **)&v60 == v59) {
        goto LABEL_65;
      }
      goto LABEL_62;
    case 17:
      if (v19 != 17) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v61 = v3;
      *((float32x2_t *)&v61 + 1) = v2;
      long long v111 = v61;
      *(void *)&long long v61 = v11;
      *((void *)&v61 + 1) = v12;
      long long v102 = v61;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v62 = 0;
      while (1)
      {
        long long v122 = v111;
        int v79 = *(_DWORD *)((unint64_t)&v122 & 0xFFFFFFFFFFFFFFF3 | (4 * (v62 & 3)));
        long long v123 = v102;
        int v80 = *(_DWORD *)((unint64_t)&v123 & 0xFFFFFFFFFFFFFFF3 | (4 * (v62 & 3)));
        BOOL v63 = v79 == v80;
        if (v62 == 2) {
          goto LABEL_86;
        }
        while (1)
        {
          ++v62;
          if (v63) {
            break;
          }
          if (v62 == 2) {
            goto LABEL_62;
          }
          BOOL v63 = 0;
        }
      }
    case 18:
      if (v19 != 18) {
        goto LABEL_61;
      }
      *(float32x2_t *)&long long v72 = v3;
      *((float32x2_t *)&v72 + 1) = v2;
      long long v112 = v72;
      *(void *)&long long v72 = v11;
      *((void *)&v72 + 1) = v12;
      long long v103 = v72;
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      uint64_t v73 = 0;
      break;
    default:
      if (!v19)
      {
        v130[0] = v3;
        v130[1] = v2;
        uint64_t v86 = (uint64_t)v2;
        int v89 = v11;
        v130[2] = v5;
        uint64_t v26 = (uint64_t)v3;
        __int16 v131 = v4;
        char v132 = BYTE2(v4);
        char v133 = BYTE3(v4);
        v126[0] = v11;
        v126[1] = v12;
        v126[2] = v14;
        __int16 v127 = v13;
        char v128 = BYTE2(v13);
        char v129 = BYTE3(v13);
        uint64_t v95 = v15;
        uint64_t v104 = v16;
        uint64_t v92 = v17;
        uint64_t v113 = v12;
        outlined copy of MaterialParameters.Value(v11, v12, v14, v13, v15, v16, v18, v17, 0);
        float v84 = (void *)v26;
        outlined copy of MaterialParameters.Value((id)v26, v86, v5, v4, v7, v6, v9, v8, 0);
        outlined copy of MaterialParameters.Value((id)v26, v86, v5, v4, v7, v6, v9, v8, 0);
        outlined copy of MaterialParameters.Value(v89, v113, v14, v13, v95, v104, v18, v92, 0);
        LOBYTE(v26) = specialized static MaterialParameters.Texture.== infix(_:_:)((uint64_t)v130, (uint64_t)v126, v76);
        outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
        outlined consume of MaterialParameters.Value(v89, v113, v14, v13, v95, v104, v18, v92, 0);
        outlined consume of MaterialParameters.Value(v84, v86, v5, v4, v7, v6, v9, v8, 0);
        return v26 & 1;
      }
      long long v20 = v11;
      uint64_t v21 = v12;
      uint64_t v22 = v16;
      uint64_t v23 = v15;
      uint64_t v24 = v17;
      id v25 = *(id *)&v3;
LABEL_59:
      swift_retain();
      uint64_t v17 = v24;
      uint64_t v15 = v23;
      uint64_t v16 = v22;
      uint64_t v12 = v21;
      uint16x4_t v11 = v20;
LABEL_61:
      outlined copy of MaterialParameters.Value(v11, v12, v14, v13, v15, v16, v18, v17, v19);
      outlined release of (MaterialParameters.Value, MaterialParameters.Value)((uint64_t)v134);
      goto LABEL_62;
  }
  while (1)
  {
    long long v124 = v112;
    int v79 = *(_DWORD *)((unint64_t)&v124 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    long long v125 = v103;
    int v80 = *(_DWORD *)((unint64_t)&v125 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    BOOL v74 = v79 == v80;
    if (v73 == 3) {
      break;
    }
    while (1)
    {
      ++v73;
      if (v74) {
        break;
      }
      if (v73 == 3) {
        goto LABEL_62;
      }
      BOOL v74 = 0;
    }
  }
LABEL_86:
  if (v79 == v80) {
LABEL_65:
  }
    LOBYTE(v26) = 1;
  else {
LABEL_62:
  }
    LOBYTE(v26) = 0;
  return v26 & 1;
}

id outlined copy of UniformParameters.Value(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 5) {
    return result;
  }
  if (!a9) {
    return (id)swift_retain();
  }
  return result;
}

void outlined consume of UniformParameters.Value?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    outlined consume of UniformParameters.Value(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void outlined consume of UniformParameters.Value(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 5)
  {
  }
  else if (!a9)
  {
    swift_release();
  }
}

id outlined copy of UniformParameters.Value?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of UniformParameters.Value(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

void sub_2281A334C(id *a1, void **a2)
{
  id v3 = *a1;
  uint64_t v4 = *a2;
  id v5 = *a1;

  *a2 = v3;
}

uint64_t sub_2281A3390()
{
  return 0;
}

uint64_t sub_2281A33A8()
{
  return 0;
}

uint64_t sub_2281A33C0()
{
  return 0;
}

ValueMetadata *type metadata accessor for MaterialParameters()
{
  return &type metadata for MaterialParameters;
}

uint64_t initializeWithCopy for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  return a1;
}

uint64_t assignWithTake for MaterialParameters.Texture(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialParameters.Texture(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialParameters.Texture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.Texture()
{
  return &type metadata for MaterialParameters.Texture;
}

ValueMetadata *type metadata accessor for MaterialParameters.Texture.Sampler()
{
  return &type metadata for MaterialParameters.Texture.Sampler;
}

ValueMetadata *type metadata accessor for MaterialParameters.Handle()
{
  return &type metadata for MaterialParameters.Handle;
}

uint64_t type metadata accessor for MaterialParameters.Handle.SharedHandle()
{
  return self;
}

uint64_t destroy for MaterialParameters.Value(uint64_t a1, uint64_t a2)
{
  return destroy for MaterialParameters.Value(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, char))outlined consume of MaterialParameters.Value);
}

uint64_t initializeWithCopy for MaterialParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of MaterialParameters.Value);
}

uint64_t *assignWithCopy for MaterialParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of MaterialParameters.Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of MaterialParameters.Value);
}

__n128 __swift_memcpy65_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for MaterialParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MaterialParameters.Value(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of MaterialParameters.Value);
}

uint64_t getEnumTagSinglePayload for MaterialParameters.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEE && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 238);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x12) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xED)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 238;
    if (a3 >= 0xEE) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEE) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.Value()
{
  return &type metadata for MaterialParameters.Value;
}

ValueMetadata *type metadata accessor for MaterialParameters.Metadata()
{
  return &type metadata for MaterialParameters.Metadata;
}

ValueMetadata *type metadata accessor for UniformParameters()
{
  return &type metadata for UniformParameters;
}

uint64_t destroy for UniformParameters.Value(uint64_t a1, uint64_t a2)
{
  return destroy for MaterialParameters.Value(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, char))outlined consume of UniformParameters.Value);
}

uint64_t destroy for MaterialParameters.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  return a3(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
}

uint64_t initializeWithCopy for UniformParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of UniformParameters.Value);
}

uint64_t initializeWithCopy for MaterialParameters.Value(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  char v13 = *((unsigned char *)a2 + 64);
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = v13;
  return a1;
}

uint64_t *assignWithCopy for UniformParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MaterialParameters.Value(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined copy of UniformParameters.Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of UniformParameters.Value);
}

uint64_t *assignWithCopy for MaterialParameters.Value(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  char v14 = *((unsigned char *)a2 + 64);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[7];
  char v23 = *((unsigned char *)a1 + 64);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  *((unsigned char *)a1 + 64) = v14;
  LOBYTE(v25) = v23;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v25);
  return a1;
}

uint64_t *assignWithTake for UniformParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for MaterialParameters.Value(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of UniformParameters.Value);
}

uint64_t *assignWithTake for MaterialParameters.Value(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  char v6 = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[7];
  char v15 = *((unsigned char *)a1 + 64);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v17;
  *((unsigned char *)a1 + 64) = v6;
  char v19 = v15;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniformParameters.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 239);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x11) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UniformParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 239;
    if (a3 >= 0xEF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for UniformParameters.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for UniformParameters.Value(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UniformParameters.Value()
{
  return &type metadata for UniformParameters.Value;
}

uint64_t outlined release of (MaterialParameters.Value, MaterialParameters.Value)(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  char v10 = *(unsigned char *)(a1 + 144);
  outlined consume of MaterialParameters.Value(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of MaterialParameters.Value(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void static AudioResource.Normalization._proto_dynamic(targetLUFS:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
}

void static AudioResource.Normalization._proto_static(targetLUFS:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for __ServiceLocator();
  uint64_t v12 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v13 = *(void *)(v12 + 24);
  swift_unownedRetainStrong();
  swift_release();
  id v14 = *(id *)(v13 + 32);
  swift_release();
  *uint64_t v11 = v14;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F0E0], v8);
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v5) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_7;
  }
  return result;
}

uint64_t one-time initialization function for default()
{
  type metadata accessor for PhysicsMaterialResource();
  uint64_t v0 = (int32x2_t *)swift_allocObject();
  v0[4] = 0;
  v0[2] = vdup_n_s32(0x3F4CCCCDu);
  v0[3].i32[0] = 1061997773;
  uint64_t result = PhysicsMaterialResource.makeCoreAsset()();
  static PhysicsMaterialResource.default = (uint64_t)v0;
  return result;
}

uint64_t static PhysicsMaterialResource.generate(friction:restitution:)(float a1, float a2)
{
  type metadata accessor for PhysicsMaterialResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 32) = 0;
  *(float *)(v4 + 16) = a1;
  *(float *)(v4 + 20) = a1;
  *(float *)(v4 + 24) = a2;
  PhysicsMaterialResource.makeCoreAsset()();
  return v4;
}

uint64_t static PhysicsMaterialResource.default.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }

  return swift_retain();
}

float PhysicsMaterialResource.__staticFriction.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 16);
}

float PhysicsMaterialResource.__dynamicFriction.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 20);
}

float PhysicsMaterialResource.__restitution.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 24);
}

uint64_t PhysicsMaterialResource.coreAsset.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 32);
  if (v2 && (REAssetHandleIsLoaded() & 1) != 0) {
    return v2;
  }
  type metadata accessor for __ServiceLocator();
  uint64_t v3 = static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  swift_release();
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v6 = REAssetManagerPhysicsMaterialAssetCreate2();
  if (v6)
  {
    uint64_t v2 = v6;
    *(void *)(v1 + 32) = v6;
    return v2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PhysicsMaterialResource.deinit()
{
  specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(0xD000000000000083, 0x800000022835B720, 54, (uint64_t)partial apply for closure #1 in PhysicsMaterialResource.deinit, v0);
  return v0;
}

uint64_t closure #1 in PhysicsMaterialResource.deinit()
{
  return RERelease();
}

uint64_t PhysicsMaterialResource.__deallocating_deinit()
{
  specialized unsafeAssumeOnEngineQueue<A>(debugFileName:debugLineNum:_:)(0xD000000000000083, 0x800000022835B720, 54, (uint64_t)partial apply for closure #1 in PhysicsMaterialResource.deinit, v0);

  return swift_deallocClassInstance();
}

uint64_t PhysicsMaterialResource.makeCoreAsset()()
{
  type metadata accessor for __ServiceLocator();
  uint64_t v1 = static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v5);
  swift_release();
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t result = REAssetManagerPhysicsMaterialAssetCreate2();
  if (result)
  {
    *(void *)(v0 + 32) = result;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static PhysicsMaterialResource.generate(staticFriction:dynamicFriction:restitution:)(float a1, float a2, float a3)
{
  type metadata accessor for PhysicsMaterialResource();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 32) = 0;
  *(float *)(v6 + 16) = a1;
  *(float *)(v6 + 20) = a2;
  *(float *)(v6 + 24) = a3;
  PhysicsMaterialResource.makeCoreAsset()();
  return v6;
}

uint64_t type metadata accessor for PhysicsMaterialResource()
{
  return self;
}

uint64_t partial apply for closure #1 in PhysicsMaterialResource.deinit()
{
  return closure #1 in PhysicsMaterialResource.deinit();
}

void PhysicsMaterialResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t PhysicsMaterialResource.addToLoadRequest(_:)()
{
  PhysicsMaterialResource.coreAsset.getter();

  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance PhysicsMaterialResource()
{
  PhysicsMaterialResource.coreAsset.getter();

  return REAssetLoadRequestAddAsset();
}

float sub_2281A4424@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_2281A446C(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 16) = v2;
  return result;
}

float sub_2281A44B8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 20);
  *a2 = result;
  return result;
}

uint64_t sub_2281A4500(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 20) = v2;
  return result;
}

float sub_2281A454C@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 24);
  *a2 = result;
  return result;
}

uint64_t sub_2281A4594(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 24) = v2;
  return result;
}

uint64_t method lookup function for PhysicsMaterialResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PhysicsMaterialResource);
}

uint64_t dispatch thunk of PhysicsMaterialResource.__staticFriction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PhysicsMaterialResource.__dynamicFriction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PhysicsMaterialResource.__restitution.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t sub_2281A4664()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t CameraControls.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t CameraControls.rawValue.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*CameraControls.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static CameraControls.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static CameraControls.tilt.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CameraControls.pan.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static CameraControls.orbit.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void static CameraControls.dolly.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void CameraControls.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CameraControls.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int CameraControls.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CameraControls and conformance CameraControls()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraControls and conformance CameraControls;
  if (!lazy protocol witness table cache variable for type CameraControls and conformance CameraControls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraControls and conformance CameraControls);
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraControls()
{
  return &type metadata for CameraControls;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (j << 6); ; unint64_t i = __clz(__rbit64(v18)) + (j << 6))
  {
    outlined init with copy of GeometricPin(*(void *)(a1 + 48) + 80 * i, (uint64_t)v21);
    outlined init with take of GeometricPin((uint64_t)v21, (uint64_t)v20);
    if (v20[1] == a2 && v20[2] == a3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
      outlined init with take of GeometricPin((uint64_t)v20, (uint64_t)a4);
      return swift_bridgeObjectRelease();
    }
    uint64_t result = outlined destroy of GeometricPin((uint64_t)v20);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v17 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++j;
    if (v18) {
      goto LABEL_19;
    }
    int64_t j = v17 + 1;
    if (v17 + 1 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * j);
    if (v18) {
      goto LABEL_19;
    }
    int64_t j = v17 + 2;
    if (v17 + 2 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * j);
    if (v18) {
      goto LABEL_19;
    }
    int64_t j = v17 + 3;
    if (v17 + 3 >= v12) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v8 + 8 * j);
    if (v18) {
      goto LABEL_19;
    }
    int64_t v19 = v17 + 4;
    if (v19 >= v12)
    {
LABEL_26:
      swift_release();
      a4[3] = 0u;
      a4[4] = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      *a4 = 0u;
      return swift_bridgeObjectRelease();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v19);
    for (int64_t j = v19; !v18; ++v19)
    {
      int64_t j = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_29;
      }
      if (j >= v12) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v8 + 8 * j);
    }
LABEL_19:
    unint64_t v11 = (v18 - 1) & v18;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void GeometricPinsComponent.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE88];
}

uint64_t GeometricPinsComponent.pins.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeometricPinsComponent.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v6, a1, a2, a3);

  return swift_bridgeObjectRelease();
}

double GeometricPinsComponent.removePin(named:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v6, a1, a2, v10);
  swift_bridgeObjectRelease();
  outlined init with copy of GeometricPin?((uint64_t)v10, (uint64_t)v8);
  if (v8[2])
  {
    outlined init with take of GeometricPin((uint64_t)v8, (uint64_t)v9);
    specialized Set._Variant.remove(_:)((uint64_t)v9, a3);
    outlined destroy of GeometricPin((uint64_t)v9);
    outlined destroy of GeometricPin?((uint64_t)v10);
  }
  else
  {
    outlined destroy of GeometricPin?((uint64_t)v10);
    outlined destroy of GeometricPin?((uint64_t)v8);
    double result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t outlined init with copy of GeometricPin?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeometricPin?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GeometricPinsComponent.set(pin:)(uint64_t a1)
{
  outlined init with copy of GeometricPin(a1, (uint64_t)v5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  specialized _NativeSet.update(with:isUnique:)((uint64_t)v5, isUniquelyReferenced_nonNull_native, v6);
  uint64_t *v1 = v4;
  swift_bridgeObjectRelease();
  return outlined destroy of GeometricPin?((uint64_t)v6);
}

uint64_t static GeometricPinsComponent.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v27 = MEMORY[0x263F8EE88];
  uint64_t result = REPinComponentGetPinCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    if (result)
    {
      uint64_t v5 = 0;
      do
      {
        int v17 = v3;
        REPinComponentGetPinNameAtIndex();
        uint64_t v9 = String.init(cString:)();
        uint64_t v11 = v10;
        REPinComponentGetPinOffsetPoseAtIndex();
        long long v15 = v12;
        HIDWORD(v13) = v17;
        long long v16 = v13;
        if (REPinComponentIsSkeletalJointPinAtIndex())
        {
          REPinComponentGetSkeletalJointNameAtIndex();
          uint64_t v6 = String.init(cString:)();
          uint64_t v8 = v7;
          swift_weakInit();
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          long long v24 = v16;
          long long v25 = v15;
          swift_weakAssign();
          uint64_t v20 = v9;
          uint64_t v21 = v11;
          swift_bridgeObjectRelease();
          uint64_t v22 = v6;
          uint64_t v23 = v8;
        }
        else
        {
          swift_weakInit();
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          long long v24 = v16;
          long long v25 = v15;
          swift_weakAssign();
          uint64_t v20 = v9;
          uint64_t v21 = v11;
          swift_bridgeObjectRelease();
          uint64_t v22 = 0;
          uint64_t v23 = 0;
        }
        outlined init with take of GeometricPin((uint64_t)v19, (uint64_t)v26);
        outlined init with copy of GeometricPin((uint64_t)v26, (uint64_t)v18);
        specialized Set._Variant.insert(_:)((uint64_t)v19, (uint64_t)v18);
        outlined destroy of GeometricPin((uint64_t)v19);
        uint64_t result = outlined destroy of GeometricPin((uint64_t)v26);
        ++v5;
        int v3 = HIDWORD(v16);
      }
      while (v4 != v5);
      uint64_t v14 = v27;
    }
    else
    {
      uint64_t v14 = MEMORY[0x263F8EE88];
    }
    *a1 = v14;
  }
  return result;
}

uint64_t GeometricPinsComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v28 = *a1;
  REPinComponentRemoveAllPins();
  uint64_t v8 = *(void *)(v7 + 56);
  uint64_t v25 = v7 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v26 = (unint64_t)(v9 + 63) >> 6;
  long long v12 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v29 = v7;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v26) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v25 + 8 * v19);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v25 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v19 + 2;
        if (v19 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v25 + 8 * v14);
        if (!v20) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    outlined init with copy of GeometricPin(*(void *)(v29 + 48) + 80 * v18, (uint64_t)v38);
    outlined init with take of GeometricPin((uint64_t)v38, (uint64_t)v33);
    uint64_t v31 = v34;
    uint64_t v32 = v35;
    swift_bridgeObjectRetain();
    static String.Encoding.utf8.getter();
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.cString(using:)();
    uint64_t v22 = *v12;
    (*v12)(v6, v3);
    swift_bridgeObjectRelease();
    if (v37)
    {
      uint64_t v31 = v36;
      uint64_t v32 = v37;
      static String.Encoding.utf8.getter();
      StringProtocol.cString(using:)();
      v22(v6, v3);
      REPoseIdentity();
      long long v16 = v15;
      HIDWORD(v16) = HIDWORD(v30);
      long long v30 = v16;
      REPinCreateExt();
      swift_bridgeObjectRelease();
    }
    else
    {
      REPoseIdentity();
      long long v24 = v23;
      HIDWORD(v24) = HIDWORD(v27);
      long long v27 = v24;
      REPinCreateExt();
    }
    swift_bridgeObjectRelease();
    REPinComponentAddPin();
    RERelease();
    uint64_t result = outlined destroy of GeometricPin((uint64_t)v33);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v26) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v25 + 8 * v21);
  if (v20)
  {
    int64_t v14 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v14 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v14 >= v26) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v25 + 8 * v14);
    ++v21;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance GeometricPinsComponent(_DWORD *a1@<X8>)
{
  *a1 = 2023;
}

void static GeometricPinsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2023;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      long long v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *int v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *int v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

double specialized Set._Variant.remove(_:)@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  float32x4_t v6 = a1[3];
  float32x4_t v27 = a1[2];
  float32x4_t v28 = v6;
  float32x4_t v29 = a1[4];
  float32x4_t v7 = a1[1];
  float32x4_t v25 = *a1;
  float32x4_t v26 = v7;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v24);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v5 + 48);
    while (1)
    {
      uint64_t v13 = v12 + 80 * v10;
      BOOL v14 = *(void *)v13 == a1->i64[0] && *(float *)(v13 + 8) == a1->f32[2];
      BOOL v15 = v14 && *(float *)(v13 + 12) == a1->f32[3];
      if (v15
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 48), a1[3]), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 64), a1[4])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 32), a1[2]), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 16), a1[1])))) & 0x80000000) != 0)
      {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_16;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    v25.i64[0] = *v2;
    *int v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v17 = v25.i64[0];
    }
    uint64_t v18 = *(void *)(v17 + 48) + 80 * v10;
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v20 = *(_OWORD *)(v18 + 32);
    long long v21 = *(_OWORD *)(v18 + 48);
    long long v22 = *(_OWORD *)(v18 + 64);
    *(void *)a2 = *(void *)v18;
    *(void *)(a2 + 8) = *(void *)(v18 + 8);
    *(_OWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v20;
    *(_OWORD *)(a2 + 48) = v21;
    *(_OWORD *)(a2 + 64) = v22;
    specialized _NativeSet._delete(at:)(v10);
    *int v2 = v25.i64[0];
    swift_bridgeObjectRelease();
    *(unsigned char *)(a2 + 80) = 0;
  }
  else
  {
LABEL_16:
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(unsigned char *)(a2 + 80) = 1;
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      outlined init with copy of GeometricPin(*(void *)(v6 + 48) + 80 * v9, (uint64_t)v15);
      BOOL v11 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v15, a1);
      outlined destroy of GeometricPin((uint64_t)v15);
      if (v11) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    v15[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v14 = v15[0];
    }
    outlined init with take of GeometricPin(*(void *)(v14 + 48) + 80 * v9, (uint64_t)a2);
    specialized _NativeSet._delete(at:)(v9);
    *uint64_t v3 = v15[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))specialized _NativeSet.copy(), a2);
}

{
  return specialized Set._Variant.remove(_:)(a1, (void (*)(void))specialized _NativeSet.copy(), a2);
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = result & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_9:
    *(void *)a3 = 0;
    char v15 = 1;
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(void *)(v11 + 8 * v10) != a1)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_9;
      }
    }
    while (*(void *)(v11 + 8 * v10) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v3;
  uint64_t v16 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v14 = v16;
  }
  *(void *)a3 = *(void *)(*(void *)(v14 + 48) + 8 * v10);
  specialized _NativeSet._delete(at:)(v10);
  *uint64_t v3 = v16;
  Swift::Int result = swift_bridgeObjectRelease();
  char v15 = 0;
LABEL_10:
  *(unsigned char *)(a3 + 8) = v15;
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  unsigned char v27[72];

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 48) + 80 * v6;
        unint64_t v11 = *(void *)v10;
        uint64_t v13 = *(_DWORD *)(v10 + 8);
        uint64_t v12 = *(_DWORD *)(v10 + 12);
        long long v23 = *(__n128 *)(v10 + 16);
        long long v24 = *(__n128 *)(v10 + 32);
        float32x4_t v25 = *(__n128 *)(v10 + 48);
        float32x4_t v26 = *(__n128 *)(v10 + 64);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if ((v13 & 0x7FFFFFFF) != 0) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        Hasher._combine(_:)(v14);
        if ((v12 & 0x7FFFFFFF) != 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = 0;
        }
        Hasher._combine(_:)(v15);
        specialized SIMD.hash(into:)(v27, v23);
        specialized SIMD.hash(into:)(v27, v24);
        specialized SIMD.hash(into:)(v27, v25);
        specialized SIMD.hash(into:)(v27, v26);
        BOOL v16 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v16 < v9) {
            goto LABEL_5;
          }
        }
        else if (v16 >= v9)
        {
          goto LABEL_17;
        }
        if (v2 >= (uint64_t)v16)
        {
LABEL_17:
          uint64_t v17 = *(void *)(v3 + 48);
          uint64_t v18 = (char *)(v17 + 80 * v2);
          long long v19 = (char *)(v17 + 80 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v18 >= v19 + 80))
          {
            memmove(v18, v19, 0x50uLL);
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  long long v20 = *(void *)(v3 + 16);
  long long v21 = __OFSUB__(v20, 1);
  long long v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned char v18[8];

  int64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56;
  unint64_t v6 = -1 << *(unsigned char *)(*v1 + 32);
  uint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain();
    unint64_t v9 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      Swift::Int v10 = (v9 + 1) & v8;
      while (1)
      {
        outlined init with copy of GeometricPin(*(void *)(v4 + 48) + 80 * v7, (uint64_t)v18);
        Hasher.init(_seed:)();
        String.hash(into:)();
        unint64_t v11 = Hasher._finalize()();
        outlined destroy of GeometricPin((uint64_t)v18);
        uint64_t v12 = v11 & v8;
        if (v3 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        if (v3 < (uint64_t)v7 || *(void *)(v4 + 48) + 80 * v3 >= *(void *)(v4 + 48) + 80 * v7 + 80)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v13 = v3 == v7;
          uint64_t v3 = v7;
          if (v13) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v3 = v7;
LABEL_6:
        uint64_t v7 = (v7 + 1) & v8;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_16;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_16:
    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v14 = *v2;
  uint64_t v15 = *(void *)(*v2 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v14 + 16) = v17;
    ++*(_DWORD *)(v14 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    Swift::Int result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v10;
    do
    {
      outlined init with copy of GeometricPin(*(void *)(v8 + 48) + 80 * v11, (uint64_t)v32);
      BOOL v13 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v32, a1);
      outlined destroy of GeometricPin((uint64_t)v32);
      if (v13) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }
    while (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t v14 = *(void *)(*v3 + 16);
  BOOL v15 = !v13;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v17 = *(void *)(*v3 + 24);
  uint64_t v31 = a3;
  if (v17 < v16 || (a2 & 1) == 0)
  {
    if (a2)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v17 >= v16)
      {
        specialized _NativeSet.copy()();
        if (!v13) {
          goto LABEL_11;
        }
        goto LABEL_26;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v20 = *v3;
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
    unint64_t v11 = v21 & ~v22;
    unint64_t v18 = v11 >> 6;
    uint64_t v19 = 1 << v11;
    if (((1 << v11) & *(void *)(v20 + 56 + 8 * (v11 >> 6))) == 0)
    {
LABEL_22:
      if (v13)
      {
LABEL_30:
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      goto LABEL_23;
    }
    uint64_t v23 = ~v22;
    while (1)
    {
      outlined init with copy of GeometricPin(*(void *)(v20 + 48) + 80 * v11, (uint64_t)v32);
      BOOL v24 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v32, a1);
      outlined destroy of GeometricPin((uint64_t)v32);
      if (v24) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v23;
      unint64_t v18 = v11 >> 6;
      uint64_t v19 = 1 << v11;
      if ((*(void *)(v20 + 56 + 8 * (v11 >> 6)) & (1 << v11)) == 0) {
        goto LABEL_22;
      }
    }
    if (!v13) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  if (!v13)
  {
LABEL_11:
    unint64_t v18 = v11 >> 6;
    uint64_t v19 = 1 << v11;
LABEL_23:
    uint64_t v25 = *v4;
    *(void *)(*v4 + 8 * v18 + 56) |= v19;
    uint64_t result = outlined init with take of GeometricPin(a1, *(void *)(v25 + 48) + 80 * v11);
    uint64_t v27 = *(void *)(v25 + 16);
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      *(void *)(v25 + 16) = v29;
      v31[3] = 0u;
      v31[4] = 0u;
      v31[1] = 0u;
      v31[2] = 0u;
      *uint64_t v31 = 0u;
      return result;
    }
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v30 = *v4;
  outlined init with take of GeometricPin(*(void *)(*v4 + 48) + 80 * v11, (uint64_t)v31);
  return outlined init with take of GeometricPin(a1, *(void *)(v30 + 48) + 80 * v11);
}

ValueMetadata *type metadata accessor for GeometricPinsComponent()
{
  return &type metadata for GeometricPinsComponent;
}

unint64_t Entity.ConfigurationCatalog.USDConfigurationReaderError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (void *)((char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Entity.ConfigurationCatalog.USDConfigurationReaderError(v0, (uint64_t)v7);
  unint64_t v8 = 0xD000000000000028;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = *v7;
      uint64_t v12 = (void *)v7[1];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD000000000000017;
      uint64_t v14 = "No prim found at path '";
      goto LABEL_8;
    case 2u:
      uint64_t v15 = *v7;
      uint64_t v16 = (void *)v7[1];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "Prim at path '");
      HIBYTE(v42[1]) = -18;
      v17._uint64_t countAndFlagsBits = v15;
      v17._object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0x800000022835B930;
      unint64_t v19 = 0xD000000000000016;
      goto LABEL_10;
    case 3u:
      uint64_t v20 = *v7;
      Swift::Int v21 = (void *)v7[1];
      uint64_t v22 = v7[2];
      uint64_t v23 = (void *)v7[3];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v24._uint64_t countAndFlagsBits = 0x207461206D697250;
      v24._object = (void *)0xEE00272068746170;
      String.append(_:)(v24);
      v25._uint64_t countAndFlagsBits = v20;
      v25._object = v21;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 0xD000000000000025;
      v26._object = (void *)0x800000022835B900;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = v22;
      v27._object = v23;
      String.append(_:)(v27);
      goto LABEL_9;
    case 4u:
      uint64_t v28 = *v7;
      uint64_t v29 = (void *)v7[1];
      uint64_t v30 = v7[2];
      uint64_t v31 = (void *)v7[3];
      uint64_t v33 = v7[4];
      uint64_t v32 = (void *)v7[5];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(99);
      v34._uint64_t countAndFlagsBits = 0x207461206D697250;
      v34._object = (void *)0xEE00272068746170;
      String.append(_:)(v34);
      v35._uint64_t countAndFlagsBits = v28;
      v35._object = v29;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v36._object = (void *)0x800000022835B8A0;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = v30;
      v37._object = v31;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._uint64_t countAndFlagsBits = 0xD000000000000032;
      v38._object = (void *)0x800000022835B8C0;
      String.append(_:)(v38);
      v39._uint64_t countAndFlagsBits = v33;
      v39._object = v32;
      String.append(_:)(v39);
      goto LABEL_9;
    case 5u:
      uint64_t v11 = *v7;
      uint64_t v12 = (void *)v7[1];
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD00000000000002CLL;
      uint64_t v14 = "Could not get an Entity from the prim path '";
LABEL_8:
      v42[0] = v13;
      v42[1] = (unint64_t)(v14 - 32) | 0x8000000000000000;
      v40._uint64_t countAndFlagsBits = v11;
      v40._object = v12;
      String.append(_:)(v40);
LABEL_9:
      swift_bridgeObjectRelease();
      unint64_t v19 = 11815;
      unint64_t v18 = 0xE200000000000000;
LABEL_10:
      String.append(_:)(*(Swift::String *)&v19);
      unint64_t v8 = v42[0];
      break;
    case 6u:
      return v8;
    case 7u:
      unint64_t v8 = 0xD000000000000030;
      break;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v7, v1);
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      v42[0] = 0xD000000000000029;
      v42[1] = 0x800000022835B9A0;
      _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, MEMORY[0x263F06EA8]);
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 11815;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      unint64_t v8 = v42[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
  return v8;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  uint64_t result = type metadata singleton initialization cache for Entity.ConfigurationCatalog.USDConfigurationReaderError;
  if (!type metadata singleton initialization cache for Entity.ConfigurationCatalog.USDConfigurationReaderError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Error in Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  return _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
      case 5u:
        uint64_t v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v11 = a2[2];
        uint64_t v12 = a2[3];
        a1[2] = v11;
        a1[3] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        uint64_t v15 = a2[4];
        uint64_t v16 = a2[5];
        a1[4] = v15;
        a1[5] = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 1:
    case 2:
    case 5:
      goto LABEL_7;
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
    case 2u:
    case 5u:
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      uint64_t v12 = a2[4];
      uint64_t v13 = a2[5];
      a1[4] = v12;
      a1[5] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Entity.ConfigurationCatalog.USDConfigurationReaderError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Entity.ConfigurationCatalog.USDConfigurationReaderError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  void v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  _OWORD v4[4] = a2;
  swift_defaultActor_initialize();
  type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer();
  uint64_t v9 = swift_allocObject();
  Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.init()();
  *(void *)(v5 + 240) = v9;
  *(void *)(v5 + 128) = a1;
  *(void *)(v5 + 136) = a2;
  swift_unknownObjectRetain();
  id v10 = a1;
  id v11 = (id)RIOImportSessionGetStage();
  v4[7] = v11;
  if (v11)
  {
    uint64_t v21 = a3;
    v4[8] = RIOPxrUsdStageCopySessionLayer();
    v4[9] = RIOPxrUsdEditTargetCreateWithLayer();
    RIOPxrUsdStageSetEditTarget();
    uint64_t v12 = RIOPxrUsdStageCopyDefaultPrim();
    v4[10] = v12;
    uint64_t v13 = (void *)RIOPxrUsdObjectCopyPath();
    uint64_t v14 = (void *)RIOPxrSdfPathCopyString();

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    *(void *)(v5 + 112) = v15;
    *(void *)(v5 + 120) = v17;
    _OWORD v4[2] = MEMORY[0x263F8EE78];
    static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v12, (uint64_t)(v4 + 2));
    unint64_t v18 = v4[2];
    type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache();
    swift_allocObject();
    *(void *)(v5 + 232) = Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(v18);
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v21, v5 + 144);
    return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:), v5, 0);
  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_release();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader();
    swift_defaultActor_destroy();

    swift_unknownObjectRelease();
    outlined destroy of BodyTrackingComponent?(a3, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    swift_deallocPartialClassInstance();
    unint64_t v19 = (uint64_t (*)(void))v4[1];
    return v19();
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)()
{
  uint64_t v2 = (void *)v0[9];
  unint64_t v1 = (void *)v0[10];
  uint64_t v3 = (void *)v0[7];
  uint64_t v4 = (void *)v0[8];
  uint64_t v12 = v0[5];
  uint64_t v5 = (void *)v0[3];
  uint64_t v6 = (void *)RIOPxrUsdStageCopyRootLayer();
  uint64_t v7 = (void *)RIOPxrTfTokenCreateWithCString();
  uint64_t v8 = (void *)RIOPxrVtValueCreateWithBool();
  RIOPxrSdfLayerSetCustomLayerData();

  swift_unknownObjectRelease();
  outlined destroy of BodyTrackingComponent?(v12, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v10 = v0[6];
  return v9(v10);
}

void static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(uint64_t a1, uint64_t a2)
{
  if (RIOPxrUsdPrimHasVariantSets())
  {
    RIOPxrUsdPrimCopyVariantSets();
    if (RIOPxrUsdVariantSetsCopySetNames()) {
      static Array._forceBridgeFromObjectiveC(_:result:)();
    }
    else {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)RIOPxrUsdPrimCopyChildren();
    type metadata accessor for RIOPxrUsdObjectRef(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    uint64_t v5 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_15;
    }
    uint64_t v6 = *(void *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      uint64_t v7 = 4;
      while (1)
      {
        id v8 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A689930](v7 - 4, v5) : *(id *)(v5 + 8 * v7);
        uint64_t v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v8, a2);

        if (!v2)
        {
          ++v7;
          if (v10 != v6) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[45] = a3;
  v4[46] = v3;
  v4[43] = a1;
  v4[44] = a2;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v3, 0);
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(*(void *)(v0 + 360), v0 + 104);
  if (*(void *)(v0 + 104) != 1)
  {
    long long v42 = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 64) = v42;
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 168);
    *(void *)(v0 + 96) = *(void *)(v0 + 184);
    long long v43 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 32) = v43;
    uint64_t v2 = *(void *)(v0 + 352);
    if (v2) {
      goto LABEL_3;
    }
LABEL_50:
    uint64_t v5 = 0;
    goto LABEL_52;
  }
  outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(*(void *)(v0 + 368) + 144, v0 + 16);
  outlined destroy of BodyTrackingComponent?(v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v2 = *(void *)(v0 + 352);
  if (!v2) {
    goto LABEL_50;
  }
LABEL_3:
  uint64_t v47 = v0;
  int64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, MEMORY[0x263F8EE78]);
  uint64_t v5 = v4;
  int64_t v6 = 0;
  uint64_t v48 = v2 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 64);
  int64_t v49 = (unint64_t)(63 - v7) >> 6;
  uint64_t v50 = v2;
  uint64_t v55 = v4;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v53 = (v9 - 1) & v9;
  int64_t v54 = v6;
  unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
  while (2)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v51 = *v15;
    uint64_t v52 = v15[1];
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v10);
    int64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0, MEMORY[0x263F8EE78]);
    int64_t v19 = 0;
    uint64_t v20 = *(void *)(v16 + 64);
    uint64_t v56 = v16 + 64;
    uint64_t v58 = v16;
    uint64_t v21 = -1 << *(unsigned char *)(v16 + 32);
    if (-v21 < 64) {
      uint64_t v22 = ~(-1 << -(char)v21);
    }
    else {
      uint64_t v22 = -1;
    }
    unint64_t v23 = v22 & v20;
    int64_t v57 = (unint64_t)(63 - v21) >> 6;
    if ((v22 & v20) != 0)
    {
LABEL_26:
      unint64_t v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v25 = v24 | (v19 << 6);
      goto LABEL_41;
    }
    while (1)
    {
      int64_t v26 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_56;
      }
      if (v26 >= v57) {
        goto LABEL_45;
      }
      unint64_t v27 = *(void *)(v56 + 8 * v26);
      ++v19;
      if (!v27)
      {
        int64_t v19 = v26 + 1;
        if (v26 + 1 >= v57) {
          goto LABEL_45;
        }
        unint64_t v27 = *(void *)(v56 + 8 * v19);
        if (!v27)
        {
          int64_t v19 = v26 + 2;
          if (v26 + 2 >= v57) {
            goto LABEL_45;
          }
          unint64_t v27 = *(void *)(v56 + 8 * v19);
          if (!v27) {
            break;
          }
        }
      }
LABEL_40:
      unint64_t v23 = (v27 - 1) & v27;
      unint64_t v25 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_41:
      uint64_t v29 = 16 * v25;
      uint64_t v30 = (uint64_t *)(*(void *)(v58 + 48) + v29);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = (uint64_t *)(*(void *)(v58 + 56) + v29);
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      unint64_t v36 = v18[2];
      unint64_t v37 = v18[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v36 >= v37 >> 1) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v36 + 1, 1, v18);
      }
      v18[2] = v36 + 1;
      Swift::String v38 = &v18[4 * v36];
      v38[4] = v31;
      v38[5] = v32;
      v38[6] = v34;
      v38[7] = v35;
      if (v23) {
        goto LABEL_26;
      }
    }
    int64_t v28 = v26 + 3;
    if (v28 >= v57)
    {
LABEL_45:
      swift_release();
      uint64_t v5 = v55;
      unint64_t v40 = v55[2];
      unint64_t v39 = v55[3];
      if (v40 >= v39 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v55);
      }
      unint64_t v9 = v53;
      int64_t v6 = v54;
      void v5[2] = v40 + 1;
      unsigned int v41 = &v5[3 * v40];
      v41[4] = v51;
      v41[5] = v52;
      v41[6] = v18;
      uint64_t v2 = v50;
      uint64_t v55 = v5;
      if (!v53)
      {
LABEL_8:
        int64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_57;
        }
        if (v11 < v49)
        {
          unint64_t v12 = *(void *)(v48 + 8 * v11);
          int64_t v13 = v6 + 1;
          if (v12) {
            goto LABEL_21;
          }
          int64_t v13 = v6 + 2;
          if (v6 + 2 < v49)
          {
            unint64_t v12 = *(void *)(v48 + 8 * v13);
            if (v12) {
              goto LABEL_21;
            }
            int64_t v13 = v6 + 3;
            if (v6 + 3 < v49)
            {
              unint64_t v12 = *(void *)(v48 + 8 * v13);
              if (v12) {
                goto LABEL_21;
              }
              uint64_t v14 = v6 + 4;
              if (v6 + 4 < v49)
              {
                unint64_t v12 = *(void *)(v48 + 8 * v14);
                if (!v12)
                {
                  while (1)
                  {
                    int64_t v13 = v14 + 1;
                    if (__OFADD__(v14, 1)) {
                      goto LABEL_58;
                    }
                    if (v13 >= v49) {
                      goto LABEL_51;
                    }
                    unint64_t v12 = *(void *)(v48 + 8 * v13);
                    ++v14;
                    if (v12) {
                      goto LABEL_21;
                    }
                  }
                }
                int64_t v13 = v6 + 4;
LABEL_21:
                uint64_t v53 = (v12 - 1) & v12;
                int64_t v54 = v13;
                unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
                continue;
              }
            }
          }
        }
LABEL_51:
        uint64_t v0 = v47;
        swift_release();
        uint64_t v44 = swift_bridgeObjectRetain();
        Entity.ConfigurationCatalog.USDConfigurationReader.validateSpecification(_:)(v44);
        swift_bridgeObjectRelease();
LABEL_52:
        *(void *)(v0 + 376) = 0;
        *(void *)(v0 + 384) = v5;
        *(void *)(v0 + 392) = _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReader and conformance Entity.ConfigurationCatalog.USDConfigurationReader, v1, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader);
        float32x4_t v45 = (void *)swift_task_alloc();
        *(void *)(v0 + 400) = v45;
        void *v45 = v0;
        v45[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
        return MEMORY[0x270FA2318]();
      }
      goto LABEL_7;
    }
    break;
  }
  unint64_t v27 = *(void *)(v56 + 8 * v28);
  if (v27)
  {
    int64_t v19 = v28;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v19 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v19 >= v57) {
      goto LABEL_45;
    }
    unint64_t v27 = *(void *)(v56 + 8 * v19);
    ++v28;
    if (v27) {
      goto LABEL_40;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return MEMORY[0x270FA2318]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v1, 0);
}

{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = (id)RIOImportSessionGetStage();
  v0[51] = v1;
  uint64_t v2 = v0[48];
  if (!v1)
  {
    uint64_t v7 = v0[46];
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_bridgeObjectRelease();
LABEL_14:
    $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v7);
    outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    int64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  v0[52] = RIOPxrUsdStageCopyEditTarget();
  int64_t v3 = (void *)RIOPxrUsdStageCopySessionLayer();
  v0[53] = RIOPxrUsdEditTargetCreateWithLayer();

  RIOPxrUsdStageSetEditTarget();
  if (v2)
  {
    uint64_t v4 = v0[47];
    uint64_t v5 = v0[48];
    int64_t v6 = swift_bridgeObjectRetain();
    Entity.ConfigurationCatalog.USDConfigurationReader.setSpecification(_:)(v6);
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_4:
      Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v5);
      swift_bridgeObjectRelease();
LABEL_13:
      unint64_t v10 = (void *)v0[52];
      int64_t v11 = (void *)v0[53];
      unint64_t v12 = (void *)v0[51];
      uint64_t v7 = v0[46];
      swift_willThrow();
      RIOPxrUsdStageSetEditTarget();

      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v4 = v0[47];
  }
  uint64_t v8 = *(void *)(v0[46] + 136);
  if (v8)
  {
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?((uint64_t)(v0 + 2), (uint64_t)(v0 + 24));
    unint64_t v9 = (void (*)(uint64_t))v0[24];
    if (v9 == (void (*)(uint64_t))1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 24), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    }
    else
    {
      swift_unknownObjectRetain();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v9);
      outlined destroy of Entity.ConfigurationCatalog.LoadOptions((uint64_t)(v0 + 24));
      if (v9)
      {
        v9(v8);
        if (v4)
        {
          swift_unknownObjectRelease();
          outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
          uint64_t v5 = v0[48];
          if (!v5) {
            goto LABEL_13;
          }
          goto LABEL_4;
        }
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
      }
      swift_unknownObjectRelease();
    }
  }
  uint64_t v15 = v0[49];
  uint64_t v16 = v0[46];
  int64_t v17 = (void *)swift_task_alloc();
  v0[54] = v17;
  *int64_t v17 = v0;
  v17[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  unint64_t v18 = v0[46];
  int64_t v19 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v17, v16, v15, 0xD00000000000001FLL, 0x800000022835BB80, partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:), v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  int64_t v3 = *(void *)(v2 + 368);
  if (v0) {
    uint64_t v4 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  else {
    uint64_t v4 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v1;
  void *v1 = v0;
  v1[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  return Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)(47, 0xE100000000000000);
}

{
  void *v0;

  v0[59] = v0[55];
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v0[46], 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 384);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 464);
    swift_retain();
    Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v1);
    if (v2)
    {
      int64_t v3 = *(void **)(v0 + 416);
      uint64_t v4 = *(void **)(v0 + 424);
      uint64_t v5 = *(void **)(v0 + 408);
      int64_t v6 = *(void *)(v0 + 368);
      swift_release_n();
      swift_bridgeObjectRelease();
      RIOPxrUsdStageSetEditTarget();

      $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v6);
      outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
      uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  *(void *)(v0 + 280) = 0;
  *(void *)(v0 + 288) = 0;
  *(void *)(v0 + 296) = 0;
  *(void *)(v0 + 304) = 1;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Entity.finishUSDLoad(forEntity:withOptions:)
                                                 + async function pointer to specialized static Entity.finishUSDLoad(forEntity:withOptions:));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v9;
  *unint64_t v9 = v0;
  v9[1] = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  unint64_t v10 = *(void *)(v0 + 456);
  return v11(v10, v0 + 280);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[48];
  if (v1)
  {
    Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(v1);
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = (void *)v0[52];
  int64_t v3 = (void *)v0[53];
  uint64_t v4 = (void *)v0[51];
  uint64_t v5 = v0[46];
  swift_willThrow();
  RIOPxrUsdStageSetEditTarget();

  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  int64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = *v1;
  int64_t v3 = *v1 + 280;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 368);
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    swift_release();
    uint64_t v5 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
    int64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 368);
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    uint64_t v5 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
    int64_t v6 = v7;
  }
  return MEMORY[0x270FA2498](v5, v6, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 496) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 344);
  swift_release();
  Entity.copy(to:recursive:)(v2, 1);
  swift_release();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[52];
  uint64_t v2 = (void *)v0[53];
  int64_t v3 = (void *)v0[51];
  uint64_t v4 = v0[46];
  swift_release();
  RIOPxrUsdStageSetEditTarget();

  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[52];
  uint64_t v2 = (void *)v0[53];
  int64_t v3 = (void *)v0[51];
  uint64_t v4 = v0[46];
  swift_release();
  RIOPxrUsdStageSetEditTarget();

  $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  int64_t v3 = (void *)*v2;
  v3[57] = a1;
  v3[58] = v1;
  swift_task_dealloc();
  if (v1)
  {
    v3[59] = v1;
    uint64_t v4 = v3[46];
    uint64_t v5 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  else
  {
    uint64_t v4 = v3[46];
    uint64_t v5 = Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v5, v4, 0);
}

uint64_t $defer #1 () in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  uint64_t v2 = *(NSObject **)(v1 + 24);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end();
  *(void *)(v3 + 24) = v1;
  void v6[4] = thunk for @callee_guaranteed () -> ()partial apply;
  _OWORD v6[5] = v3;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1107296256;
  void v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor_40_0;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

void Entity.ConfigurationCatalog.USDConfigurationReader.validateSpecification(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v20 = v2;
  while (1)
  {
    uint64_t v4 = (uint64_t *)(v2 + 24 * v3);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    uint64_t v7 = (void *)v4[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = (id)RIOImportSessionGetStage();
    if (!v8)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      return;
    }
    unint64_t v9 = v8;
    uint64_t v21 = v3;
    String.utf8CString.getter();
    unint64_t v10 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *int64_t v17 = v5;
      v17[1] = v6;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }
    id v11 = (id)RIOPxrTfTokenEmpty();
    PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

    if ((RIOPxrUsdPrimHasVariantSets() & 1) == 0)
    {
      type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *unint64_t v18 = v5;
      v18[1] = v6;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }

    int64_t v13 = (void *)RIOPxrUsdPrimCopyVariantSets();
    uint64_t v14 = v13;
    if (v7[2]) {
      break;
    }

    swift_bridgeObjectRelease();
    uint64_t v3 = v21 + 1;
    swift_bridgeObjectRelease();

    uint64_t v2 = v20;
    if (v21 + 1 == v1) {
      goto LABEL_11;
    }
  }
  uint64_t v19 = v5;
  uint64_t v15 = v7[5];
  uint64_t v22 = v7[4];
  String.utf8CString.getter();
  uint64_t v23 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LODWORD(v15) = RIOPxrUsdVariantSetsHasVariantSet();
  swift_release();
  if (v15)
  {
    String.utf8CString.getter();
    RIOPxrUsdVariantSetsCopyVariantSet();
    swift_release();
    if (RIOPxrUsdVariantSetCopyVariantNames()) {
      static Array._forceBridgeFromObjectiveC(_:result:)();
    }
    else {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *uint64_t v16 = v19;
    v16[1] = v6;
    _OWORD v16[2] = v22;
    v16[3] = v23;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.setSpecification(_:)(uint64_t result)
{
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    uint64_t v17 = result + 32;
    swift_bridgeObjectRetain();
    uint64_t v1 = 0;
    while (1)
    {
      uint64_t v2 = (uint64_t *)(v17 + 24 * v1);
      uint64_t v4 = *v2;
      uint64_t v3 = v2[1];
      uint64_t v5 = v2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v6 = (id)RIOImportSessionGetStage();
      if (!v6)
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v7 = v6;
      String.utf8CString.getter();
      id v8 = (void *)RIOPxrSdfPathCreateFromCString();
      swift_release();
      if ((RIOPxrUsdStageHasPrimAtPrimPath() & 1) == 0)
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        *uint64_t v14 = v4;
        v14[1] = v3;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }
      id v9 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      if ((RIOPxrUsdPrimHasVariantSets() & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();

      id v11 = (void *)RIOPxrUsdPrimCopyVariantSets();
      uint64_t v12 = *(void *)(v5 + 16);
      if (v12)
      {
        uint64_t v13 = v5 + 56;
        do
        {
          String.utf8CString.getter();
          String.utf8CString.getter();
          RIOPxrUsdVariantSetsSetSelection();
          swift_release();
          swift_release();
          v13 += 32;
          --v12;
        }
        while (v12);
      }
      ++v1;

      swift_bridgeObjectRelease();
      if (v1 == v16) {
        return swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *uint64_t v15 = v4;
    v15[1] = v3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t Entity.ConfigurationCatalog.USDConfigurationReader.clearSpecification(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t result = specialized StrideThroughIterator.next()();
  if ((v6 & 1) == 0)
  {
    uint64_t v20 = a1 + 32;
    unint64_t v19 = v4;
    while (result < v4)
    {
      id v8 = (uint64_t *)(v20 + 24 * result);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      uint64_t v11 = v8[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = Entity.ConfigurationCatalog.USDConfigurationReader.getPrimWithVariants(atPathString:)(v9, v10);
      swift_bridgeObjectRelease();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      int v13 = 0;
      uint64_t v14 = *(void *)(v11 + 16) - 1;
      BOOL v15 = *(void *)(v11 + 16) == 1;
      if (v14 > 0)
      {
LABEL_7:
        uint64_t v16 = v14 - 1;
        goto LABEL_13;
      }
      while (1)
      {
        BOOL v17 = !v15;
        if ((v17 | v13)) {
          break;
        }
        uint64_t v16 = 0;
        int v13 = 1;
LABEL_13:
        if ((unint64_t)v14 >= *(void *)(v11 + 16))
        {
          __break(1u);
          return swift_bridgeObjectRelease();
        }
        String.utf8CString.getter();
        unint64_t v18 = (void *)RIOPxrUsdPrimCopyVariantSet();
        swift_release();
        RIOPxrUsdVariantSetClearVariantSelection();

        uint64_t v14 = v16;
        BOOL v15 = v16 == 0;
        if (v16 > 0) {
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();

      unint64_t result = specialized StrideThroughIterator.next()();
      unint64_t v4 = v19;
      if (v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized StrideThroughIterator.next()()
{
  uint64_t result = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 <= 0)
  {
    if (v3 < result) {
      goto LABEL_3;
    }
  }
  else if (result < v3)
  {
LABEL_3:
    BOOL v4 = __OFADD__(result, v2);
    int64_t v5 = result + v2;
    char v6 = v4;
    unint64_t v7 = 0x8000000000000000;
    if (v4) {
      int64_t v5 = (v5 >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v7 = 0;
    }
    *(void *)(v0 + 24) = v7;
    *(unsigned char *)(v0 + 32) = v6 ^ 1;
    *(void *)(v0 + 40) = v5;
    return result;
  }
  if (result != v3
    || (*(unsigned char *)(v0 + 48) & 1) != 0
    || (*(unsigned char *)(v0 + 32) & 1) == 0 && *(void *)(v0 + 24) == 0x8000000000000000)
  {
    return 0;
  }
  *(unsigned char *)(v0 + 48) = 1;
  return result;
}

void *Entity.ConfigurationCatalog.USDConfigurationReader.getPrimWithVariants(atPathString:)(uint64_t a1, uint64_t a2)
{
  id v5 = (id)RIOImportSessionGetStage();
  if (v5)
  {
    char v6 = v5;
    String.utf8CString.getter();
    unint64_t v7 = (void *)RIOPxrSdfPathCreateFromCString();
    swift_release();
    if (RIOPxrUsdStageHasPrimAtPrimPath())
    {
      id v8 = (id)RIOPxrTfTokenEmpty();
      PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();

      if (RIOPxrUsdPrimHasVariantSets())
      {
      }
      else
      {
        type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
        _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
        swift_allocError();
        *uint64_t v10 = a1;
        v10[1] = a2;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();
      }
    }
    else
    {
      PrimIfNeeded = (void *)type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
      swift_allocError();
      *uint64_t v9 = a1;
      v9[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return PrimIfNeeded;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __n128 v7 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_33_1;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  RIOImportSessionSetSceneUpdatePassCompletion();
  _Block_release(v10);
  return RIOImportSessionUpdate();
}

uint64_t closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  void v3[5] = type metadata accessor for MainActor();
  v3[6] = static MainActor.shared.getter();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:), v2, 0);
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:)()
{
  v0[7] = *(void *)(v0[4] + 128);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[8] = v2;
  v0[9] = v1;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:), v2, v1);
}

{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (id)RIOImportSessionGetStage();
  v0[10] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    String.utf8CString.getter();
    uint64_t v3 = (void *)RIOPxrSdfPathCreateFromCString();
    v0[11] = v3;
    swift_release();
    if (RIOPxrUsdStageHasPrimAtPrimPath())
    {
      uint64_t v4 = v0[8];
      uint64_t v5 = v0[9];
      return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.stagedEntity(atPathString:), v4, v5);
    }
    __n128 v7 = v0[2];
    uint64_t v6 = v0[3];
    swift_release();
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *unint64_t v8 = v7;
    v8[1] = v6;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t EntityAtPrimPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t result;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  swift_release();
  EntityAtPrimPath = RIOImportSessionGetEntityAtPrimPath();
  if (EntityAtPrimPath)
  {
    uint64_t v2 = EntityAtPrimPath;
    if ((id)REEntityGetSwiftObject())
    {
      uint64_t v3 = *(void **)(v0 + 80);

      type metadata accessor for Entity();
      uint64_t v4 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = specialized static Entity.entityInfoType(_:)();
      int v13 = *(void **)(v0 + 80);
      uint64_t v14 = *(void **)(v0 + 88);
      if (v12)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(v12 + 232))();
        BOOL v15 = *(void *)(v4 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v15, 0);
        *(void *)(v4 + 16) = v2;
        MEMORY[0x22A68E750](v2, v4);
        swift_release();
      }
      else
      {
        uint64_t v4 = makeEntity(for:)(v2);
      }
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v16(v4);
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 80);
    uint64_t v6 = *(void **)(v0 + 88);
    unint64_t v8 = *(void *)(v0 + 16);
    __n128 v7 = *(void *)(v0 + 24);
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError, 255, (void (*)(uint64_t))type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError);
    swift_allocError();
    *uint64_t v9 = v8;
    v9[1] = v7;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();

    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

void closure #1 in static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(void *a1@<X8>)
{
  String.utf8CString.getter();
  uint64_t v2 = (void *)RIOPxrUsdVariantSetsCopyVariantSet();
  swift_release();
  if (RIOPxrUsdVariantSetHasAuthoredVariantSelection())
  {
    uint64_t v3 = (void *)RIOPxrUsdVariantSetCopyVariantSelection();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (RIOPxrUsdVariantSetCopyVariantNames())
    {
      uint64_t v6 = v5;
      static Array._forceBridgeFromObjectiveC(_:result:)();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {

    *a1 = 0;
  }
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __n128 v6 = MEMORY[0x270FA5388](v3);
  __n128 v7 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:);
  *(void *)(v10 + 24) = v9;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_34;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a2, v4, v6);
    uint64_t v9 = (unint64_t *)(a1 + 16);
    swift_beginAccess();
    unint64_t v10 = *(void *)(a1 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 16) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v10);
      *uint64_t v9 = v10;
    }
    *(void *)(v10 + 16) = v13 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v8, v4);
    return swift_endAccess();
  }
  else
  {
    uint64_t result = CheckedContinuation.resume(returning:)();
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    swift_beginAccess();
    specialized Array.remove(at:)(0, (uint64_t)v5);
    swift_endAccess();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.init()()
{
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v15);
  void v14[2] = (char *)v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  __n128 v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  v14[1] = type metadata accessor for OS_dispatch_queue();
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v11._object = (void *)0x800000022835BBC0;
  v11._uint64_t countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v11);
  UUID.init()();
  _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F138], v3);
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = MEMORY[0x263F8EE78];
  _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v0 + 32) = 0;
  return v0;
}

uint64_t Entity.ConfigurationCatalog.USDConfigurationReader.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 144, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader()
{
  return self;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer()
{
  return self;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.getDefaultSourcePath() in conformance Entity.ConfigurationCatalog.USDConfigurationReader()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.USDConfigurationReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.USDConfigurationReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v8[45] = a3;
  v8[46] = v3;
  v8[43] = a1;
  v8[44] = a2;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v3, 0);
}

uint64_t sub_2281AB1E0()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)()
{
  return partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(&demangling cache variable for type metadata for CheckedContinuation<(), Never>, closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:));
}

uint64_t sub_2281AB20C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  return Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(a1);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(uint64_t a1)
{
  return closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)(a1, v1);
}

uint64_t sub_2281AB3F8()
{
  return objectdestroyTm_6(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroyTm_6(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:)()
{
  return partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(&demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.loadStagedEntity(atPathString:));
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.enqueueStart(continuation:)(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t partial apply for closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()()
{
  return closure #1 in Entity.ConfigurationCatalog.USDConfigurationReader.CriticalSequencer.end()(v0);
}

uint64_t sub_2281AB568()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s10Foundation3URLVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t static AudioFileResource.load(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  unsigned __int8 v6 = *a4;
  v9[0] = *a5;
  v9[1] = a6;
  void v9[2] = 0;
  uint64_t v10 = 0;
  char v11 = -1;
  uint64_t v12 = 0;
  char v13 = -1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  char v17 = 1;
  unsigned __int8 v8 = v6;
  return static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(a1, a2, a3, v9, &v8);
}

uint64_t static AudioFileResource.load(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(unsigned __int8 *a1, uint64_t a2, void (*a3)(void, void), unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  unsigned __int8 v6 = *a4;
  v9[0] = *a5;
  v9[1] = a6;
  void v9[2] = 0;
  uint64_t v10 = 0;
  char v11 = -1;
  uint64_t v12 = 0;
  char v13 = -1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  char v17 = 1;
  unsigned __int8 v8 = v6;
  return specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(a1, a2, a3, v9, &v8);
}

uint64_t static AudioFileResource.loadAsync(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 a6)
{
  v7[0] = *a5;
  v7[1] = a6;
  _OWORD v7[2] = 0;
  uint64_t v8 = 0;
  char v9 = -1;
  uint64_t v10 = 0;
  char v11 = -1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  char v15 = 1;
  return static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(a1, a2, a3, v7);
}

uint64_t static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v5 = v4;
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v13) = *a4;
  unsigned int v15 = a4[1];
  int v16 = a4[2];
  uint64_t v17 = *((void *)a4 + 1);
  int v18 = a4[16];
  uint64_t v19 = *((void *)a4 + 3);
  int v20 = a4[32];
  uint64_t v21 = *((void *)a4 + 6);
  int v22 = *((_DWORD *)a4 + 14);
  int v23 = a4[60];
  uint64_t v78 = *((void *)a4 + 5);
  uint64_t v79 = v5;
  unsigned int v73 = v15;
  int v74 = v13;
  int v72 = v16;
  uint64_t v71 = v17;
  int v70 = v18;
  uint64_t v69 = v19;
  int v90 = v20;
  uint64_t v77 = v21;
  int v75 = v23;
  int v76 = v22;
  if (a3) {
    id v24 = a3;
  }
  else {
    id v24 = objc_msgSend(self, sel_mainBundle);
  }
  uint64_t v25 = v80;
  id v68 = a3;
  uint64_t v26 = v81;
  static AudioFileResource.url(forAssetNamed:in:)(v81, v25, v24, (uint64_t)v10);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of URL?((uint64_t)v10);
    unint64_t v27 = (void *)swift_allocObject();
    v27[2] = v26;
    v27[3] = v25;
    v27[4] = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
    uint64_t v28 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
    uint64_t v29 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v30 = swift_allocObject();
    *(_DWORD *)(v30 + 16) = 0;
    *(void *)(v29 + 16) = v30;
    *(void *)(v29 + 24) = 0;
    *(unsigned char *)(v29 + 32) = -1;
    *(void *)(v28 + 16) = v29;
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = partial apply for closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:);
    v31[3] = v27;
    v31[4] = v29;
    v31[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
    swift_allocObject();
    id v32 = v68;
    swift_bridgeObjectRetain();
    swift_retain();
    *(void *)(v28 + 24) = Future.init(_:)();
    return v28;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v33 = URL.pathExtension.getter();
  uint64_t v35 = v34;
  unint64_t v36 = (void *)MEMORY[0x22A688A50](v26, v25);
  id v37 = objc_msgSend(v36, sel_pathExtension);

  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  BOOL v41 = v33 == v38 && v35 == v40;
  uint64_t v67 = v12;
  uint64_t v66 = v11;
  float32x4_t v65 = v14;
  if (v41)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v43 = v81;
  }
  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v81;
    if ((v42 & 1) == 0)
    {
      uint64_t v44 = a3;
      *(void *)&long long v82 = v81;
      *((void *)&v82 + 1) = v80;
      swift_bridgeObjectRetain();
      v45._uint64_t countAndFlagsBits = 46;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      long long v46 = v82;
      uint64_t v47 = URL.pathExtension.getter();
      int64_t v49 = v48;
      long long v82 = v46;
      swift_bridgeObjectRetain();
      v50._uint64_t countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = (void *)*((void *)&v82 + 1);
      uint64_t v51 = v82;
      goto LABEL_14;
    }
  }
  uint64_t v44 = a3;
  uint64_t v53 = swift_bridgeObjectRetain();
  uint64_t v51 = v43;
  uint64_t v52 = (void *)v53;
LABEL_14:
  uint64_t v28 = v73;
  char v54 = v74;
  LOBYTE(v82) = v74;
  BYTE1(v82) = v73;
  char v55 = v72;
  BYTE2(v82) = v72;
  uint64_t v56 = v71;
  *((void *)&v82 + 1) = v71;
  char v57 = v70;
  char v83 = v70;
  uint64_t v58 = v69;
  uint64_t v84 = v69;
  char v85 = v90;
  uint64_t v59 = v79;
  uint64_t v86 = v78;
  uint64_t v87 = v77;
  int v88 = v76;
  char v89 = v75;
  unsigned __int8 v91 = 1;
  uint64_t v60 = static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v44, v51, v52, (unsigned __int8 *)&v82, &v91);
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = v60;
    swift_bridgeObjectRelease();
    LOBYTE(v82) = v54;
    BYTE1(v82) = v28;
    BYTE2(v82) = v55;
    *((void *)&v82 + 1) = v56;
    char v83 = v57;
    uint64_t v84 = v58;
    char v85 = v90;
    uint64_t v86 = v78;
    uint64_t v87 = v77;
    int v88 = v76;
    char v89 = v75;
    unsigned __int8 v91 = 1;
    uint64_t v62 = (uint64_t)v65;
    uint64_t v28 = specialized static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(v61, (uint64_t)v65, v81, v80, &v82, &v91);
    RERelease();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v62, v66);
  }
  return v28;
}

uint64_t static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5, int a6)
{
  uint64_t v32 = a2;
  int v34 = a6;
  uint64_t v33 = a3;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v30) = *a4;
  char v13 = *a5;
  uint64_t v14 = specialized static __ServiceLocator.shared.getter();
  uint64_t v15 = *(void *)(v14 + 168);
  uint64_t v35 = v14;
  int v16 = *(void **)(v15 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v31;
  *(void *)(v19 + 16) = v14;
  *(void *)(v19 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v19 + v17, v12, v9);
  unint64_t v21 = v19 + v18;
  uint64_t v22 = v33;
  *(void *)unint64_t v21 = v32;
  *(void *)(v21 + 8) = v22;
  *(unsigned char *)(v21 + 16) = v13;
  *(unsigned char *)(v21 + 17) = v34;
  *(unsigned char *)(v21 + 18) = BYTE4(v30);
  int v23 = v16;
  *(void *)(v19 + ((v18 + 26) & 0xFFFFFFFFFFFFFFF8)) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
  uint64_t v24 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
  uint64_t v25 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  *(void *)(v25 + 16) = v26;
  *(void *)(v25 + 24) = 0;
  *(unsigned char *)(v25 + 32) = -1;
  *(void *)(v24 + 16) = v25;
  unint64_t v27 = (void *)swift_allocObject();
  v27[2] = partial apply for closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
  v27[3] = v19;
  v27[4] = v25;
  v27[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v28 = v23;
  *(void *)(v24 + 24) = Future.init(_:)();
  return v24;
}

uint64_t closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, unsigned __int8 a10, void *a11)
{
  uint64_t v62 = a7;
  uint64_t v59 = a5;
  int v61 = a8 & 1;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v53 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DispatchQoS();
  uint64_t v52 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v51 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for URL();
  uint64_t v49 = *(void *)(v57 - 8);
  uint64_t v17 = *(void *)(v49 + 64);
  MEMORY[0x270FA5388](v57);
  uint64_t v56 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  uint64_t v58 = v18;
  a3 += 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3, (uint64_t)&aBlock);
  outlined init with copy of __REAssetService(a3, (uint64_t)v63);
  uint64_t v19 = v64;
  uint64_t v20 = v65;
  __swift_project_boxed_opaque_existential_1(v63, (uint64_t)v64);
  unint64_t v21 = (uint64_t (*)(void *, uint64_t (*)(char)))*((void *)v20 + 7);
  swift_retain();
  LOBYTE(v19) = v21(v19, v20);
  uint64_t v22 = v70;
  int v23 = v71;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v70);
  (*((void (**)(void *, void (*)(char)))v23 + 4))(v22, v23);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = AssetRequest;
  if (v19) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  uint64_t v60 = a11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  LOBYTE(aBlock) = v61;
  *(_WORD *)((char *)&aBlock + 1) = a9 & 1;
  uint64_t v68 = 0;
  LOBYTE(v69) = -1;
  int v70 = 0;
  LOBYTE(v71) = -1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  int v74 = 0;
  char v75 = 1;
  LOBYTE(v63[0]) = a10;
  swift_retain();
  uint64_t v26 = v59;
  uint64_t v27 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(v59, a6, v62, (char *)&aBlock);
  uint64_t v55 = v25;
  uint64_t v28 = v49;
  uint64_t v29 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v56, v26, v57);
  unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v30 + v17;
  unint64_t v32 = (v30 + v17 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v59 = a6;
  LODWORD(v54) = a10;
  unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v35 + v30, v56, v57);
  unint64_t v36 = (unsigned char *)(v35 + v31);
  *unint64_t v36 = v54;
  v36[1] = v61;
  _OWORD v36[2] = a9 & 1;
  id v37 = v60;
  *(void *)(v35 + v32) = v60;
  uint64_t v38 = (void *)(v35 + v33);
  uint64_t v39 = v58;
  void *v38 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v38[1] = v39;
  uint64_t v40 = (void *)(v35 + v34);
  uint64_t v41 = v62;
  *uint64_t v40 = v59;
  v40[1] = v41;
  *(void *)(v35 + ((v34 + 23) & 0xFFFFFFFFFFFFFFF8)) = v55;
  uint64_t v71 = partial apply for specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
  uint64_t v72 = v35;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v68 = 1107296256;
  uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  int v70 = &block_descriptor_22_0;
  char v42 = _Block_copy(&aBlock);
  uint64_t v43 = _Block_copy(v42);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  float32x4_t v65 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  uint64_t v66 = v44;
  v63[0] = MEMORY[0x263EF8330];
  v63[1] = 1107296256;
  v63[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v64 = &block_descriptor_28_1;
  Swift::String v45 = _Block_copy(v63);
  swift_bridgeObjectRetain();
  swift_retain();
  id v46 = v37;
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v45);
  _Block_release(v42);
  swift_release();
  REAssetLoadRequestAddAsset();
  return swift_release_n();
}

void specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v54 = a8;
  uint64_t v56 = a7;
  uint64_t v63 = a12;
  uint64_t v55 = a9;
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v61 = *(void *)(v18 - 8);
  uint64_t v62 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v58 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v57 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v27 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v54 - v26;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))((char *)&v54 - v26, a3, v21, v27);
    LOBYTE(aBlock) = a5 & 1;
    *(_WORD *)((char *)&aBlock + 1) = a6 & 1;
    uint64_t v65 = 0;
    LOBYTE(v66) = -1;
    uint64_t v67 = 0;
    LOBYTE(v68) = -1;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    int v71 = 0;
    char v72 = 1;
    LOBYTE(v73[0]) = a4;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    uint64_t v31 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(a2, (uint64_t)v28, 0, 0, (unsigned __int8 *)&aBlock, (unsigned __int8 *)v73);
    unint64_t v32 = (void *)swift_allocObject();
    uint64_t v33 = v55;
    _OWORD v32[2] = v54;
    void v32[3] = v33;
    v32[4] = v31;
    uint64_t v68 = partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    uint64_t v69 = v32;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v65 = 1107296256;
    uint64_t v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v67 = &block_descriptor_56_0;
    unint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v35 = v57;
    static DispatchQoS.unspecified.getter();
    v73[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    unint64_t v36 = v58;
    uint64_t v37 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v35, v36, v34);
    _Block_release(v34);
    swift_release();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v60);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v24, a3, v21, v27);
    if (a11)
    {
      uint64_t v30 = a11;
    }
    else
    {
      a10 = URL.lastPathComponent.getter();
      uint64_t v30 = v38;
    }
    uint64_t v39 = *(void (**)(char *, uint64_t))(v22 + 8);
    swift_bridgeObjectRetain();
    v39(v24, v21);
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;

    uint64_t v44 = (void *)swift_allocObject();
    uint64_t v45 = v55;
    v44[2] = v54;
    v44[3] = v45;
    v44[4] = a10;
    v44[5] = v30;
    v44[6] = v41;
    v44[7] = v43;
    uint64_t v68 = partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    uint64_t v69 = v44;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v65 = 1107296256;
    uint64_t v66 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v67 = &block_descriptor_34_0;
    id v46 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v47 = v57;
    static DispatchQoS.unspecified.getter();
    v73[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v48 = v58;
    uint64_t v49 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v47, v48, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v60);
  }
  swift_release();
  RERelease();
  uint64_t v68 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  uint64_t v69 = 0;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v65 = 1107296256;
  uint64_t v66 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v67 = &block_descriptor_37;
  uint64_t v50 = _Block_copy(&aBlock);
  uint64_t v51 = _Block_copy(v50);
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v51;
  v73[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v73[5] = v52;
  v73[0] = MEMORY[0x263EF8330];
  v73[1] = 1107296256;
  v73[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v73[3] = &block_descriptor_44;
  uint64_t v53 = _Block_copy(v73);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v53);
  _Block_release(v50);
}

void closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = a5;
  v10._object = a6;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  uint64_t v11 = (void *)swift_allocError();
  *uint64_t v12 = a3;
  v12[1] = a4;
  a1(v11, 1);
}

uint64_t closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(void (*a1)(unint64_t *), uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v7 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a3, a4, a5);
  char v8 = 0;
  swift_retain();
  a1(&v7);
  return swift_release_n();
}

uint64_t closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10)
{
  int v44 = a8;
  uint64_t v42 = a7;
  uint64_t v41 = a6;
  uint64_t v40 = a5;
  uint64_t v47 = a3;
  uint64_t v45 = a2;
  uint64_t v43 = a9;
  uint64_t v38 = a10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v37 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v46 = a10 + 16;
  swift_beginAccess();
  uint64_t v39 = *(void *)(a10 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v20 + 69) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v47;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v23 + v18, v16, v37);
  uint64_t v24 = (void *)(v23 + v19);
  uint64_t v25 = v41;
  *uint64_t v24 = v40;
  v24[1] = v25;
  unint64_t v26 = v23 + v20;
  __n128 v27 = v42;
  *(_OWORD *)(v26 + 45) = *(long long *)((char *)v42 + 45);
  long long v28 = v27[2];
  long long v29 = *v27;
  *(_OWORD *)(v26 + 16) = v27[1];
  *(_OWORD *)(v26 + 32) = v28;
  *(_OWORD *)unint64_t v26 = v29;
  *(unsigned char *)(v26 + 61) = v44;
  *(void *)(v23 + v21) = v43;
  uint64_t v30 = (void *)(v23 + v22);
  *uint64_t v30 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v30[1] = v17;
  *(void *)(v23 + ((v22 + 23) & 0xFFFFFFFFFFFFFFF8)) = v38;
  aBlock[4] = partial apply for finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void aBlock[3] = &block_descriptor_83;
  uint64_t v31 = _Block_copy(aBlock);
  unint64_t v32 = _Block_copy(v31);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  v48[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v48[5] = v33;
  v48[0] = MEMORY[0x263EF8330];
  v48[1] = 1107296256;
  v48[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v48[3] = &block_descriptor_90_1;
  unint64_t v34 = _Block_copy(v48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of AudioMixGroup((uint64_t)v27);
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v34);
  swift_release();
  _Block_release(v31);
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void), long long *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v55 = a7;
  uint64_t v57 = a5;
  uint64_t v56 = a4;
  uint64_t v58 = a2;
  uint64_t v66 = a11;
  uint64_t v60 = a10;
  uint64_t v59 = a9;
  uint64_t v62 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v61 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v24 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v54 - v23;
  if (a1)
  {
    uint64_t v26 = v59;
    uint64_t v27 = v60;
    uint64_t v54 = v17;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)&v54 - v23, a3, v18, v24);
    long long v28 = a6[1];
    long long aBlock = *a6;
    long long v29 = a6[2];
    long long v68 = v28;
    v69[0] = v29;
    *(_OWORD *)((char *)v69 + 13) = *(long long *)((char *)a6 + 45);
    LOBYTE(v70[0]) = v55;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    outlined retain of AudioMixGroup((uint64_t)a6);
    uint64_t v30 = v57;
    swift_bridgeObjectRetain();
    uint64_t v43 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v58, (uint64_t)v25, v56, v30, (unsigned __int8 *)&aBlock, (unsigned __int8 *)v70);
    swift_beginAccess();
    uint64_t v44 = *(void *)(a8 + 24);
    swift_unownedRetainStrong();
    id v45 = *(id *)(v44 + 32);
    swift_release();
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = v26;
    void v46[3] = v27;
    v46[4] = v43;
    *(void *)&v69[0] = partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:);
    *((void *)&v69[0] + 1) = v46;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v68 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v68 + 1) = &block_descriptor_118;
    uint64_t v47 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v17 = v54;
    static DispatchQoS.unspecified.getter();
    v70[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v48 = v61;
    uint64_t v49 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v17, v48, v47);
    _Block_release(v47);
    swift_release();

    (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v49);
  }
  else
  {
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v32;

    swift_beginAccess();
    uint64_t v33 = *(void *)(a8 + 24);
    swift_unownedRetainStrong();
    id v34 = *(id *)(v33 + 32);
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a3, v18);
    unint64_t v35 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v36 = swift_allocObject();
    uint64_t v37 = v60;
    *(void *)(v36 + 16) = v59;
    *(void *)(v36 + 24) = v37;
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v36 + v35, v21, v18);
    uint64_t v38 = (void *)(v36 + ((v20 + v35 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v39 = v57;
    void *v38 = v58;
    v38[1] = v39;
    *(void *)&v69[0] = partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
    *((void *)&v69[0] + 1) = v36;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v68 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v68 + 1) = &block_descriptor_96_1;
    uint64_t v40 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v70[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v41 = v61;
    uint64_t v42 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v17, v41, v40);
    _Block_release(v40);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v42);
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v65);
  swift_release();
  swift_beginAccess();
  *(void *)&v69[0] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  *((void *)&v69[0] + 1) = 0;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v68 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  *((void *)&v68 + 1) = &block_descriptor_99_0;
  uint64_t v50 = _Block_copy(&aBlock);
  uint64_t v51 = _Block_copy(v50);
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v51;
  v70[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v70[5] = v52;
  v70[0] = MEMORY[0x263EF8330];
  v70[1] = 1107296256;
  v70[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v70[3] = &block_descriptor_106_0;
  uint64_t v53 = _Block_copy(v70);
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v53);
  swift_release();
  _Block_release(v50);
}

void closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v13 = URL.path.getter();
  uint64_t v14 = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = a4;
  v10._object = a5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  uint64_t v11 = (void *)swift_allocError();
  *uint64_t v12 = v13;
  v12[1] = v14;
  a1(v11, 1);
}

uint64_t sub_2281ADFC0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(named:in:inputMode:loadingStrategy:shouldLoop:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = 1;
  return a1(&v3);
}

uint64_t sub_2281AE050()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(unsigned char *)(v2 + v7 + 16), *(unsigned char *)(v2 + v7 + 17), *(unsigned char *)(v2 + v7 + 18), *(void **)(v2 + ((v7 + 26) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2281AE224()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2281AE25C()
{
  return objectdestroy_15Tm(MEMORY[0x263F8EEB0]);
}

uint64_t partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  return partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(1);
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t sub_2281AE294()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 10) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, ((((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void partial apply for specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = (v5 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  specialized finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(a1, *(void *)(v1 + 16), v1 + v4, *(unsigned char *)(v1 + v5), *(unsigned char *)(v1 + v5 + 1), *(unsigned char *)(v1 + v5 + 2), *(void *)(v1 + v6), *(void *)(v1 + v7), *(void *)(v1 + v7 + 8), *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2281AE460()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_2281AE4B8()
{
  return objectdestroy_15Tm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_2281AE4D0()
{
  return objectdestroy_15Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for closure #1 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)()
{
  return partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(0);
}

uint64_t sub_2281AE4F0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(void (*a1)(unint64_t *), uint64_t a2)
{
  return closure #1 in static AudioFileResource.loadFromBundleAsync(named:in:configuration:legacyInputMode:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t specialized static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, unsigned __int8 *a6)
{
  uint64_t v43 = a4;
  uint64_t v42 = a3;
  uint64_t v38 = a2;
  uint64_t v41 = a1;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = a5[1];
  long long v50 = *a5;
  long long v51 = v12;
  v52[0] = a5[2];
  *(_OWORD *)((char *)v52 + 13) = *(long long *)((char *)a5 + 45);
  int v40 = *a6;
  uint64_t v13 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)v47);
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)v44);
  uint64_t v15 = v45;
  uint64_t v14 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 56);
  uint64_t v39 = v13;
  swift_retain();
  LOBYTE(v14) = v16(v15, v14);
  uint64_t v18 = v48;
  uint64_t v17 = v49;
  __swift_project_boxed_opaque_existential_1(v47, v48);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = AssetRequest;
  if (v14) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  uint64_t v21 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  *(void *)(v21 + 16) = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v8);
  unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 69) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v26 + v22, v11, v8);
  uint64_t v27 = (void *)(v26 + v23);
  uint64_t v28 = v43;
  *uint64_t v27 = v42;
  v27[1] = v28;
  unint64_t v29 = v26 + v24;
  *(_OWORD *)(v29 + 45) = *(_OWORD *)((char *)v52 + 13);
  long long v30 = v52[0];
  long long v31 = v50;
  *(_OWORD *)(v29 + 16) = v51;
  *(_OWORD *)(v29 + 32) = v30;
  *(_OWORD *)unint64_t v29 = v31;
  *(unsigned char *)(v29 + 61) = v40;
  *(void *)(v26 + v25) = v39;
  *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AudioFileResource>);
  uint64_t v32 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AudioFileResource, Error>?>);
  uint64_t v33 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v34 = swift_allocObject();
  *(_DWORD *)(v34 + 16) = 0;
  *(void *)(v33 + 16) = v34;
  *(void *)(v33 + 24) = 0;
  *(unsigned char *)(v33 + 32) = -1;
  *(void *)(v32 + 16) = v33;
  unint64_t v35 = (void *)swift_allocObject();
  v35[2] = partial apply for closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:);
  v35[3] = v26;
  v35[4] = v33;
  v35[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AudioFileResource, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  outlined retain of AudioMixGroup((uint64_t)&v50);
  swift_retain();
  *(void *)(v32 + 24) = Future.init(_:)();
  return v32;
}

uint64_t sub_2281AE938()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2281AE970()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 69) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(a1, a2, *(void *)(v2 + 16), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), (long long *)(v2 + v8), *(unsigned __int8 *)(v2 + v8 + 61), *(void *)(v2 + ((v8 + 69) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 69) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2281AEB3C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 69) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

void partial apply for finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 69) & 0xFFFFFFFFFFFFFFF8;
  finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(a1, *(void *)(v1 + 16), v1 + v4, *(void *)(v1 + v5), *(void (**)(void, void))(v1 + v5 + 8), (long long *)(v1 + v6), *(unsigned __int8 *)(v1 + v6 + 61), *(void *)(v1 + v7), *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2281AED1C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void (**)(void *, uint64_t))(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  unint64_t v8 = (void *)v6[1];

  closure #3 in finishAudioFileLoad #1 (_:) in closure #1 in static AudioFileResource.loadAsync(assetRef:url:resourceName:configuration:legacyInputMode:)(v3, v4, v5, v7, v8);
}

uint64_t sub_2281AEE9C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2281AEED4()
{
  return objectdestroy_15Tm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_2281AEEEC()
{
  return objectdestroy_15Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_15Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static AudioFileResource.loadAsync(contentsOf:withName:inputMode:loadingStrategy:shouldLoop:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(*(void *)(v1 + 32), a1);
}

__n128 ClippingPrimitiveComponent.bounds.getter()
{
  return *(__n128 *)v0;
}

void ClippingPrimitiveComponent.bounds.setter(__n128 a1, __n128 a2)
{
  *unint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*ClippingPrimitiveComponent.bounds.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ClippingPrimitiveComponent.Feather.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

__n128 ClippingPrimitiveComponent.feather.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 48);
  long long v3 = *(_OWORD *)(v1 + 64);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

__n128 ClippingPrimitiveComponent.feather.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(v1 + 32) = *(unsigned char *)a1;
  *(__n128 *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v3;
  return result;
}

uint64_t (*ClippingPrimitiveComponent.feather.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ClippingPrimitiveComponent.shouldClipChildren.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ClippingPrimitiveComponent.shouldClipChildren.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*ClippingPrimitiveComponent.shouldClipChildren.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ClippingPrimitiveComponent.shouldClipSelf.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t ClippingPrimitiveComponent.shouldClipSelf.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

uint64_t (*ClippingPrimitiveComponent.shouldClipSelf.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ClippingPrimitiveComponent.init()@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_22831FD10;
  *(_OWORD *)(a1 + 16) = xmmword_22831FD20;
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 80) = 256;
  return result;
}

__n128 protocol witness for static Component.__fromCore(_:) in conformance ClippingPrimitiveComponent@<Q0>(uint64_t a1@<X8>)
{
  REClippingPrimitiveComponentGetLocalBounds();
  long long v12 = v3;
  long long v13 = v2;
  char FeatherUseCubicFalloff = REClippingPrimitiveComponentGetFeatherUseCubicFalloff();
  REClippingPrimitiveComponentGetFeatherIntervalFractionPerPositiveEdge();
  long long v11 = v5;
  REClippingPrimitiveComponentGetFeatherIntervalFractionPerNegativeEdge();
  __n128 v10 = v6;
  char ShouldClipChildren = REClippingPrimitiveComponentGetShouldClipChildren();
  char ShouldClipSelf = REClippingPrimitiveComponentGetShouldClipSelf();
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = FeatherUseCubicFalloff;
  __n128 result = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(__n128 *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 80) = ShouldClipChildren;
  *(unsigned char *)(a1 + 81) = ShouldClipSelf;
  return result;
}

__n128 static ClippingPrimitiveComponent.__fromCore(_:)@<Q0>(uint64_t a1@<X8>)
{
  REClippingPrimitiveComponentGetLocalBounds();
  long long v12 = v3;
  long long v13 = v2;
  char FeatherUseCubicFalloff = REClippingPrimitiveComponentGetFeatherUseCubicFalloff();
  REClippingPrimitiveComponentGetFeatherIntervalFractionPerPositiveEdge();
  long long v11 = v5;
  REClippingPrimitiveComponentGetFeatherIntervalFractionPerNegativeEdge();
  __n128 v10 = v6;
  char ShouldClipChildren = REClippingPrimitiveComponentGetShouldClipChildren();
  char ShouldClipSelf = REClippingPrimitiveComponentGetShouldClipSelf();
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = FeatherUseCubicFalloff;
  __n128 result = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(__n128 *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 80) = ShouldClipChildren;
  *(unsigned char *)(a1 + 81) = ShouldClipSelf;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ClippingPrimitiveComponent()
{
  REClippingPrimitiveComponentClipToBox();
  REClippingPrimitiveComponentSetFeatherUseCubicFalloff();
  REClippingPrimitiveComponentSetFeatherIntervalFractionPerEdge();
  REClippingPrimitiveComponentSetShouldClipChildren();
  REClippingPrimitiveComponentSetShouldClipSelf();

  return RENetworkMarkComponentDirty();
}

uint64_t ClippingPrimitiveComponent.__toCore(_:)()
{
  REClippingPrimitiveComponentClipToBox();
  REClippingPrimitiveComponentSetFeatherUseCubicFalloff();
  REClippingPrimitiveComponentSetFeatherIntervalFractionPerEdge();
  REClippingPrimitiveComponentSetShouldClipChildren();
  REClippingPrimitiveComponentSetShouldClipSelf();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ClippingPrimitiveComponent(_DWORD *a1@<X8>)
{
  *a1 = 2017;
}

void static ClippingPrimitiveComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2017;
}

BOOL specialized static ClippingPrimitiveComponent.Feather.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = 0;
  long long v5 = *((_OWORD *)a1 + 1);
  long long v4 = *((_OWORD *)a1 + 2);
  long long v7 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  while (1)
  {
    long long v17 = v5;
    float v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v18 = v7;
    float v10 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v8 = v9 == v10;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v8) {
        break;
      }
      BOOL v8 = 0;
      BOOL result = 0;
      if (v3 == 2) {
        return result;
      }
    }
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = 0;
  while (1)
  {
    long long v15 = v4;
    float v13 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    long long v16 = v6;
    float v14 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    BOOL v12 = v13 == v14;
    if (v11 == 2) {
      break;
    }
    while (1)
    {
      ++v11;
      if (v12) {
        break;
      }
      if (v11 == 2) {
        return 0;
      }
      BOOL v12 = 0;
    }
  }
  return v13 == v14;
}

uint64_t specialized static ClippingPrimitiveComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 80);
  int v4 = *(unsigned __int8 *)(a1 + 81);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  long long v18 = *(_OWORD *)(a2 + 48);
  long long v19 = *(_OWORD *)(a1 + 48);
  long long v20 = *(_OWORD *)(a2 + 64);
  long long v21 = *(_OWORD *)(a1 + 64);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 80);
  int v7 = *(unsigned __int8 *)(a2 + 81);
  BOOL v8 = specialized static BoundingBox.== infix(_:_:)(*(__n128 *)a1, *(__n128 *)(a1 + 16), *(__n128 *)a2, *(__n128 *)(a2 + 16));
  uint64_t result = 0;
  if (v8 && ((v2 ^ v5) & 1) == 0)
  {
    uint64_t v10 = 0;
    while (1)
    {
      long long v24 = v19;
      float v12 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      long long v25 = v18;
      float v13 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      BOOL v11 = v12 == v13;
      if (v10 == 2) {
        break;
      }
      while (1)
      {
        ++v10;
        if (v11) {
          break;
        }
        BOOL v11 = 0;
        uint64_t result = 0;
        if (v10 == 2) {
          return result;
        }
      }
    }
    if (v12 != v13) {
      return 0;
    }
    uint64_t v14 = 0;
    while (1)
    {
      long long v22 = v21;
      float v16 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      long long v23 = v20;
      float v17 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      BOOL v15 = v16 == v17;
      if (v14 == 2) {
        break;
      }
      while (1)
      {
        ++v14;
        if (v15) {
          break;
        }
        BOOL v15 = 0;
        uint64_t result = 0;
        if (v14 == 2) {
          return result;
        }
      }
    }
    if (v16 == v17)
    {
      if ((v3 ^ v6)) {
        return 0;
      }
      else {
        return v4 ^ v7 ^ 1u;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 __swift_memcpy82_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ClippingPrimitiveComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ClippingPrimitiveComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClippingPrimitiveComponent()
{
  return &type metadata for ClippingPrimitiveComponent;
}

uint64_t getEnumTagSinglePayload for ClippingPrimitiveComponent.Feather(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[48]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ClippingPrimitiveComponent.Feather(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClippingPrimitiveComponent.Feather()
{
  return &type metadata for ClippingPrimitiveComponent.Feather;
}

unsigned char *storeEnumTagSinglePayload for ClippingPrimitiveComponent.Feather.Falloff(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281AF878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClippingPrimitiveComponent.Feather.Falloff()
{
  return &type metadata for ClippingPrimitiveComponent.Feather.Falloff;
}

unint64_t lazy protocol witness table accessor for type ClippingPrimitiveComponent.Feather.Falloff and conformance ClippingPrimitiveComponent.Feather.Falloff()
{
  unint64_t result = lazy protocol witness table cache variable for type ClippingPrimitiveComponent.Feather.Falloff and conformance ClippingPrimitiveComponent.Feather.Falloff;
  if (!lazy protocol witness table cache variable for type ClippingPrimitiveComponent.Feather.Falloff and conformance ClippingPrimitiveComponent.Feather.Falloff)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClippingPrimitiveComponent.Feather.Falloff and conformance ClippingPrimitiveComponent.Feather.Falloff);
  }
  return result;
}

CGColorRef HasSpotLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v15);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v9);
  swift_release();
  CGColorRef result = v9;
  if (v9)
  {
    float v4 = v14;
    int v6 = v12;
    int v5 = v13;
    int v8 = v10;
    int v7 = v11;
  }
  else
  {
    CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    float v4 = 2.0;
    int v5 = 1092616192;
    int v6 = 1114636288;
    int v7 = 1110704128;
    int v8 = 1171433349;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v5;
  *(float *)(a1 + 24) = v4;
  return result;
}

float key path getter for HasSpotLight.light : <A>A@<S0>(uint64_t a1@<X8>)
{
  HasSpotLight.light.getter((uint64_t)&v3);
  float result = v5;
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t key path setter for HasSpotLight.light : <A>A(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  long long v4 = *(void **)a1;
  long long v5 = *(_OWORD *)(a1 + 8);
  int v6 = v1;
  id v2 = v4;
  return HasSpotLight.light.setter(&v4);
}

uint64_t HasSpotLight.light.setter(void **a1)
{
  id v2 = *a1;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasSpotLight.light.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  int v7 = malloc(0x38uLL);
  *a1 = v7;
  void v7[5] = a3;
  void v7[6] = v3;
  v7[4] = a2;
  HasSpotLight.light.getter((uint64_t)v7);
  return HasSpotLight.light.modify;
}

void HasSpotLight.light.modify(void ***a1, char a2)
{
  id v2 = *a1;
  uint64_t v3 = **a1;
  int v5 = *((_DWORD *)*a1 + 2);
  int v4 = *((_DWORD *)*a1 + 3);
  int v7 = *((_DWORD *)*a1 + 4);
  int v6 = *((_DWORD *)*a1 + 5);
  int v8 = *((_DWORD *)*a1 + 6);
  int v10 = v3;
  int v11 = v5;
  int v12 = v4;
  int v13 = v7;
  int v14 = v6;
  int v15 = v8;
  if (a2)
  {
    id v9 = v3;
    HasSpotLight.light.setter(&v10);
  }
  else
  {
    HasSpotLight.light.setter(&v10);
  }

  free(v2);
}

uint64_t HasSpotLight.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v17);
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    uint64_t v16 = Component;
    static SpotLightComponent.Shadow.__fromCore(_:)((uint64_t)&v10);
    uint64_t result = swift_release();
    int v5 = v14;
    unint64_t v6 = v10 | ((unint64_t)v11 << 32);
    uint64_t v7 = 0x100000000;
    if (v13) {
      uint64_t v8 = 0x100000000;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 | v12;
    if (!v15) {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t result = swift_release();
    int v5 = 0;
    uint64_t v7 = 0x100000000;
    unint64_t v6 = 0x33F800000;
    uint64_t v9 = 0x100000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 20) = BYTE4(v7);
  *(_DWORD *)(a1 + 16) = v7 | v5;
  return result;
}

uint64_t HasSpotLight.shadow.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  return v3(v5, 0);
}

void (*HasSpotLight.shadow.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  void v7[5] = v3;
  void v7[3] = a2;
  HasSpotLight.shadow.getter((uint64_t)v7);
  return HasSpotLight.shadow.modify;
}

void HasSpotLight.shadow.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  unint64_t v3 = *((unsigned int *)*a1 + 4) | ((unint64_t)*((unsigned __int8 *)*a1 + 20) << 32);
  v4[0] = **a1;
  v4[1] = v2;
  int v5 = v3;
  char v6 = BYTE4(v3);
  HasSpotLight.shadow.setter(v4);

  free(v1);
}

uint64_t sub_2281AFE9C()
{
  return 16;
}

__n128 sub_2281AFEA8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_2281AFEB4@<D0>(uint64_t a1@<X8>)
{
  HasSpotLight.shadow.getter((uint64_t)&v5);
  int v2 = v6;
  char v3 = v7;
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(unsigned char *)(a1 + 20) = v3;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_2281AFF00(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  char v2 = *((unsigned char *)a1 + 20);
  long long v4 = *a1;
  char v6 = v2;
  int v5 = v1;
  return HasSpotLight.shadow.setter((uint64_t *)&v4);
}

uint64_t sub_2281AFF48()
{
  return 16;
}

__n128 sub_2281AFF54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void __swiftcall USDImportedScene.init(name:assetName:active:)(RealityFoundation::USDImportedScene *__return_ptr retstr, Swift::String name, Swift::String assetName, Swift::Bool active)
{
  retstr->name = name;
  retstr->assetName = assetName;
  retstr->active = active;
}

uint64_t initializeWithCopy for USDImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for USDImportedScene(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for USDImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for USDImportedScene(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for USDImportedScene(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for USDImportedScene()
{
  return &type metadata for USDImportedScene;
}

uint64_t dispatch thunk of USDImportService.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of USDImportService.canLoad(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of USDImportService.canLoad(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of USDImportService.load(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of USDImportService.loadAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

float static VideoPlayerDefaults.defaultMaxGlowIntensity.getter()
{
  return 0.45;
}

uint64_t static VideoPlayerDefaults.== infix(_:_:)()
{
  return 1;
}

Swift::Int VideoPlayerDefaults.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoPlayerDefaults()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoPlayerDefaults()
{
  return Hasher._finalize()();
}

void VideoPlayerComponent.desiredViewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *VideoPlayerComponent.desiredViewingMode.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*VideoPlayerComponent.desiredViewingMode.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return VideoPlayerComponent.desiredViewingMode.modify;
}

uint64_t VideoPlayerComponent.desiredViewingMode.modify(uint64_t result)
{
  **(unsigned char **)__n128 result = *(unsigned char *)(result + 8);
  return result;
}

void VideoPlayerComponent.viewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = 2 * (*(unsigned char *)(v1 + 132) != 1);
}

BOOL static VideoPlayerComponent.ImmersiveViewingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void VideoPlayerComponent.ImmersiveViewingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int VideoPlayerComponent.ImmersiveViewingMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void VideoPlayerComponent.desiredImmersiveViewingMode.getter()
{
}

void VideoPlayerComponent.desiredImmersiveViewingMode.modify()
{
}

void VideoPlayerComponent.immersiveViewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double VideoPlayerComponent.playerScreenSize.getter()
{
  return *(double *)(v0 + 8);
}

double VideoPlayerComponent.screenVideoDimension.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t VideoPlayerComponent.isPassthroughTintingEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t VideoPlayerComponent.isPassthroughTintingEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

unsigned char *(*VideoPlayerComponent.isPassthroughTintingEnabled.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 24);
  return VideoPlayerComponent.isPassthroughTintingEnabled.modify;
}

unsigned char *VideoPlayerComponent.isPassthroughTintingEnabled.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 24) = result[8];
  return result;
}

float VideoPlayerComponent.maxGlowIntensity.getter()
{
  return *(float *)(v0 + 28);
}

void VideoPlayerComponent.maxGlowIntensity.setter(float a1)
{
  if (a1 <= 0.0) {
    a1 = 0.0;
  }
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  *(float *)(v1 + 28) = a1;
}

float *(*VideoPlayerComponent.maxGlowIntensity.modify(uint64_t a1))(float *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 28);
  return VideoPlayerComponent.maxGlowIntensity.modify;
}

float *VideoPlayerComponent.maxGlowIntensity.modify(float *result)
{
  float v1 = result[2];
  if (v1 <= 0.0) {
    float v1 = 0.0;
  }
  if (v1 > 1.0) {
    float v1 = 1.0;
  }
  *(float *)(*(void *)result + 28) = v1;
  return result;
}

Swift::Void __swiftcall VideoPlayerComponent.startVideoBlurFadeIn(targetAspectRatio:fadeTime:)(Swift::Float targetAspectRatio, Swift::Float fadeTime)
{
  *(_WORD *)(v2 + 32) = 1;
  *(Swift::Float *)(v2 + 36) = targetAspectRatio;
  *(Swift::Float *)(v2 + 40) = fadeTime;
}

Swift::Void __swiftcall VideoPlayerComponent.startVideoBlurFadeOut()()
{
  *(_WORD *)(v0 + 32) = 256;
}

id VideoPlayerComponent.avPlayer.getter()
{
  AVPlayer = (void *)REVideoAssetGetAVPlayer();

  return AVPlayer;
}

void VideoPlayerComponent.init(avPlayer:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void VideoPlayerComponent.init(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v55 = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(with:));
  uint64_t v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(with:));
  uint64_t v7 = v6;
  char v54 = 0;
  char v53 = 0;
  char v52 = 0;
  LODWORD(v48) = getpid();
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v10 = v9;
  if (one-time initialization token for uniqueTokenGenerator != -1) {
    swift_once();
  }
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
  char v13 = v12;
  uint64_t v48 = v8;
  unint64_t v49 = v10;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v10) & 0xF;
  uint64_t v16 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0) {
    unint64_t v17 = HIBYTE(v49) & 0xF;
  }
  else {
    unint64_t v17 = v48 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17) {
    goto LABEL_65;
  }
  if ((v49 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = specialized _parseInteger<A, B>(ascii:radix:)(v8, v49, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    char v21 = v46;
    goto LABEL_40;
  }
  if ((v49 & 0x2000000000000000) != 0)
  {
    unint64_t v49 = v10 & 0xFFFFFFFFFFFFFFLL;
    if (v48 == 43)
    {
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v8) - 48) <= 9u)
        {
          unint64_t v19 = (BYTE1(v8) - 48);
          if (v15 == 2) {
            goto LABEL_39;
          }
          if ((BYTE2(v8) - 48) <= 9u)
          {
            unint64_t v19 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
            uint64_t v25 = v15 - 3;
            if (v25)
            {
              uint64_t v26 = (unsigned __int8 *)&v48 + 3;
              while (1)
              {
                unsigned int v27 = *v26 - 48;
                if (v27 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v19, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v23 = __CFADD__(10 * v19, v27);
                unint64_t v19 = 10 * v19 + v27;
                if (v23) {
                  goto LABEL_36;
                }
                char v21 = 0;
                ++v26;
                if (!--v25) {
                  goto LABEL_40;
                }
              }
            }
            goto LABEL_39;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v48 != 45)
      {
        if (v15 && (v8 - 48) <= 9u)
        {
          unint64_t v19 = (v8 - 48);
          if (v15 == 1) {
            goto LABEL_39;
          }
          if ((BYTE1(v8) - 48) <= 9u)
          {
            unint64_t v19 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
            uint64_t v38 = v15 - 2;
            if (v38)
            {
              uint64_t v39 = (unsigned __int8 *)&v48 + 2;
              while (1)
              {
                unsigned int v40 = *v39 - 48;
                if (v40 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v19, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v23 = __CFADD__(10 * v19, v40);
                unint64_t v19 = 10 * v19 + v40;
                if (v23) {
                  goto LABEL_36;
                }
                char v21 = 0;
                ++v39;
                if (!--v38) {
                  goto LABEL_40;
                }
              }
            }
            goto LABEL_39;
          }
        }
LABEL_36:
        unint64_t v19 = 0;
LABEL_37:
        char v21 = 1;
        goto LABEL_40;
      }
      if (v15)
      {
        if (v15 != 1)
        {
          unsigned __int8 v22 = BYTE1(v8) - 48;
          if ((BYTE1(v8) - 48) <= 9u)
          {
            unint64_t v19 = 0;
            BOOL v23 = v22 == 0;
            unint64_t v24 = -(uint64_t)v22;
            if (!v23) {
              goto LABEL_37;
            }
            if (v15 == 2)
            {
              char v21 = 0;
              unint64_t v19 = v24;
              goto LABEL_40;
            }
            unsigned __int8 v41 = BYTE2(v8) - 48;
            if ((BYTE2(v8) - 48) <= 9u && is_mul_ok(v24, 0xAuLL))
            {
              unint64_t v42 = 10 * v24;
              unint64_t v19 = v42 - v41;
              if (v42 >= v41)
              {
                uint64_t v43 = v15 - 3;
                if (v43)
                {
                  uint64_t v44 = (unsigned __int8 *)&v48 + 3;
                  while (1)
                  {
                    unsigned int v45 = *v44 - 48;
                    if (v45 > 9) {
                      goto LABEL_36;
                    }
                    if (!is_mul_ok(v19, 0xAuLL)) {
                      goto LABEL_36;
                    }
                    BOOL v23 = 10 * v19 >= v45;
                    unint64_t v19 = 10 * v19 - v45;
                    if (!v23) {
                      goto LABEL_36;
                    }
                    char v21 = 0;
                    ++v44;
                    if (!--v43) {
                      goto LABEL_40;
                    }
                  }
                }
LABEL_39:
                char v21 = 0;
                goto LABEL_40;
              }
            }
          }
        }
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if ((v48 & 0x1000000000000000) != 0) {
    long long v18 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    long long v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v19 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v18, v16, 10);
  char v21 = v20 & 1;
LABEL_40:
  swift_bridgeObjectRelease();
  if (v21) {
LABEL_41:
  }
    unint64_t v19 = arc4random();
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(with:));
  long long v47 = v28;
  type metadata accessor for __VideoResource();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 24) = MEMORY[0x263F8EE78];
  uint64_t v30 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v30, (uint64_t)&v48);
  uint64_t v31 = v50;
  uint64_t v32 = v51;
  __swift_project_boxed_opaque_existential_1(&v48, v50);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v32 + 32);
  swift_retain();
  v33(v31, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  *(void *)(v29 + 16) = REAssetManagerVideoMemoryAssetCreateWithoutTarget();
  REAssetSetSwiftObject();
  swift_release();
  type metadata accessor for VideoPlayerController();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v19;
  if (one-time initialization token for sVPCNetworkSystemObserver != -1) {
    swift_once();
  }
  swift_retain();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  swift_release();

  char v35 = v54;
  char v36 = v53;
  char v37 = v52;
  *(unsigned char *)a2 = v55;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v35;
  *(_DWORD *)(a2 + 28) = 1055286886;
  *(unsigned char *)(a2 + 32) = v36;
  *(unsigned char *)(a2 + 33) = v37;
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v29;
  *(void *)(a2 + 80) = v34;
  *(void *)(a2 + 88) = v19;
  *(_DWORD *)(a2 + 96) = 65793;
  *(unsigned char *)(a2 + 100) = 0;
  *(_OWORD *)(a2 + 112) = v47;
  *(_DWORD *)(a2 + 128) = -1082130432;
  *(unsigned char *)(a2 + 132) = 0;
}

uint64_t static VideoPlayerComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t VideoAsset = REVideoPlayerComponentGetVideoAsset();
  type metadata accessor for __VideoResource();
  if (VideoAsset)
  {
    *(void *)&long long v50 = VideoAsset;
    static __VideoResource.__fromCore(_:)((uint64_t *)&v50);
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 24) = MEMORY[0x263F8EE78];
    type metadata accessor for __ServiceLocator();
    uint64_t v4 = static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)&v50);
    uint64_t v5 = *((void *)&v51 + 1);
    uint64_t v6 = v52;
    __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    *(void *)(v3 + 16) = REAssetManagerVideoMemoryAssetCreate();
    REAssetSetSwiftObject();
    swift_release();
  }
  uint64_t v7 = swift_retain();
  VideoPlayerComponent.init(videoResource:)(v7, (uint64_t)&v50);
  unint64_t Guid = REVideoPlayerComponentGetGuid();
  *((void *)&v55 + 1) = Guid;
  if (!Guid)
  {
    LODWORD(v48) = getpid();
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v11 = v10;
    if (one-time initialization token for uniqueTokenGenerator != -1) {
      swift_once();
    }
    swift_beginAccess();
    OS_dispatch_semaphore.wait()();
    if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
    {
      __break(1u);
    }
    else
    {
      ++static VideoPlayerComponent.uniqueTokenGenerator;
      OS_dispatch_semaphore.signal()();
      swift_endAccess();
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      Swift::String v14 = v13;
      uint64_t v48 = v9;
      unint64_t v49 = v11;
      swift_bridgeObjectRetain();
      v15._uint64_t countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v9;
      uint64_t v17 = HIBYTE(v11) & 0xF;
      uint64_t v18 = v9 & 0xFFFFFFFFFFFFLL;
      if ((v11 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v49) & 0xF;
      }
      else {
        unint64_t v19 = v48 & 0xFFFFFFFFFFFFLL;
      }
      if (v19)
      {
        if ((v49 & 0x1000000000000000) != 0)
        {
          unint64_t Guid = specialized _parseInteger<A, B>(ascii:radix:)(v48, v49, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
          char v22 = v46;
          goto LABEL_44;
        }
        if ((v49 & 0x2000000000000000) == 0)
        {
          if ((v48 & 0x1000000000000000) != 0) {
            char v20 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            char v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          unint64_t Guid = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v20, v18, 10);
          char v22 = v21 & 1;
LABEL_44:
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
LABEL_46:
            *((void *)&v55 + 1) = Guid;
            goto LABEL_47;
          }
LABEL_45:
          unint64_t Guid = arc4random();
          goto LABEL_46;
        }
        unint64_t v49 = v11 & 0xFFFFFFFFFFFFFFLL;
        if (v48 == 43)
        {
          if (v17)
          {
            if (v17 != 1 && (BYTE1(v48) - 48) <= 9u)
            {
              unint64_t Guid = (BYTE1(v48) - 48);
              if (v17 == 2) {
                goto LABEL_43;
              }
              if ((BYTE2(v48) - 48) <= 9u)
              {
                unint64_t Guid = 10 * (BYTE1(v48) - 48) + (BYTE2(v48) - 48);
                uint64_t v26 = v17 - 3;
                if (v26)
                {
                  unsigned int v27 = (unsigned __int8 *)&v48 + 3;
                  while (1)
                  {
                    unsigned int v28 = *v27 - 48;
                    if (v28 > 9) {
                      goto LABEL_40;
                    }
                    if (!is_mul_ok(Guid, 0xAuLL)) {
                      goto LABEL_40;
                    }
                    BOOL v24 = __CFADD__(10 * Guid, v28);
                    unint64_t Guid = 10 * Guid + v28;
                    if (v24) {
                      goto LABEL_40;
                    }
                    char v22 = 0;
                    ++v27;
                    if (!--v26) {
                      goto LABEL_44;
                    }
                  }
                }
                goto LABEL_43;
              }
            }
            goto LABEL_40;
          }
        }
        else
        {
          if (v48 != 45)
          {
            if (v17 && (v48 - 48) <= 9u)
            {
              unint64_t Guid = (v48 - 48);
              if (v17 == 1) {
                goto LABEL_43;
              }
              if ((BYTE1(v48) - 48) <= 9u)
              {
                unint64_t Guid = 10 * (v48 - 48) + (BYTE1(v48) - 48);
                uint64_t v38 = v17 - 2;
                if (v38)
                {
                  uint64_t v39 = (unsigned __int8 *)&v48 + 2;
                  while (1)
                  {
                    unsigned int v40 = *v39 - 48;
                    if (v40 > 9) {
                      goto LABEL_40;
                    }
                    if (!is_mul_ok(Guid, 0xAuLL)) {
                      goto LABEL_40;
                    }
                    BOOL v24 = __CFADD__(10 * Guid, v40);
                    unint64_t Guid = 10 * Guid + v40;
                    if (v24) {
                      goto LABEL_40;
                    }
                    char v22 = 0;
                    ++v39;
                    if (!--v38) {
                      goto LABEL_44;
                    }
                  }
                }
                goto LABEL_43;
              }
            }
LABEL_40:
            unint64_t Guid = 0;
LABEL_41:
            char v22 = 1;
            goto LABEL_44;
          }
          if (v17)
          {
            if (v17 != 1)
            {
              unsigned __int8 v23 = BYTE1(v48) - 48;
              if ((BYTE1(v48) - 48) <= 9u)
              {
                unint64_t Guid = 0;
                BOOL v24 = v23 == 0;
                unint64_t v25 = -(uint64_t)v23;
                if (!v24) {
                  goto LABEL_41;
                }
                if (v17 == 2)
                {
                  char v22 = 0;
                  unint64_t Guid = v25;
                  goto LABEL_44;
                }
                unsigned __int8 v41 = BYTE2(v48) - 48;
                if ((BYTE2(v48) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
                {
                  unint64_t v42 = 10 * v25;
                  unint64_t Guid = v42 - v41;
                  if (v42 >= v41)
                  {
                    uint64_t v43 = v17 - 3;
                    if (v43)
                    {
                      uint64_t v44 = (unsigned __int8 *)&v48 + 3;
                      while (1)
                      {
                        unsigned int v45 = *v44 - 48;
                        if (v45 > 9) {
                          goto LABEL_40;
                        }
                        if (!is_mul_ok(Guid, 0xAuLL)) {
                          goto LABEL_40;
                        }
                        BOOL v24 = 10 * Guid >= v45;
                        unint64_t Guid = 10 * Guid - v45;
                        if (!v24) {
                          goto LABEL_40;
                        }
                        char v22 = 0;
                        ++v44;
                        if (!--v43) {
                          goto LABEL_44;
                        }
                      }
                    }
LABEL_43:
                    char v22 = 0;
                    goto LABEL_44;
                  }
                }
              }
            }
            goto LABEL_40;
          }
          __break(1u);
        }
        __break(1u);
        return result;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_47:
  type metadata accessor for VideoPlayerController();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = Guid;
  swift_release();
  *(void *)&long long v55 = v29;
  LOBYTE(v56) = REVideoPlayerComponentGetEnableReflections();
  BYTE1(v56) = REVideoPlayerComponentGetScreenRoundedCornerEnabled();
  BYTE2(v56) = REVideoPlayerComponentGetScreenAspectRatioAnimationEnabled();
  BYTE3(v56) = REVideoPlayerComponentGetScreenDeferAspectRatioTransitionToApp();
  REVideoPlayerComponentGetDesiredViewingMode();
  LOBYTE(v50) = 0;
  BYTE4(v56) = REVideoPlayerComponentGetLowLatencyEnabled();
  REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REVideoPlayerStatusComponentGetCurrentPlayerScreenSize();
    *((void *)&v50 + 1) = v30;
    REVideoPlayerStatusComponentGetCurrentPlayerScreenVideoDimension();
    *(void *)&long long v51 = v31;
    REVideoPlayerStatusComponentGetSafeZoneRadius();
    *(_DWORD *)&v57[16] = v32;
    REVideoPlayerStatusComponentGetCurrentSceneSize();
    long long v47 = v33;
    uint64_t result = swift_release();
    *(_OWORD *)uint64_t v57 = v47;
  }
  else
  {
    uint64_t result = swift_release();
  }
  long long v34 = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 96) = v56;
  *(_OWORD *)(a1 + 112) = v34;
  *(void *)(a1 + 125) = *(void *)&v57[13];
  long long v35 = v53;
  *(_OWORD *)(a1 + 32) = v52;
  *(_OWORD *)(a1 + 48) = v35;
  long long v36 = v55;
  *(_OWORD *)(a1 + 64) = v54;
  *(_OWORD *)(a1 + 80) = v36;
  long long v37 = v51;
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v37;
  return result;
}

uint64_t VideoPlayerComponent.init(videoResource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v47 = 0;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of VideoPlayerComponent.init(videoResource:));
  uint64_t v5 = v4;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of VideoPlayerComponent.init(videoResource:));
  uint64_t v7 = v6;
  char v46 = 0;
  char v45 = 0;
  char v44 = 0;
  LODWORD(v42) = getpid();
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v10 = v9;
  if (one-time initialization token for uniqueTokenGenerator != -1) {
    swift_once();
  }
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_63:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
  char v13 = v12;
  uint64_t v42 = v8;
  unint64_t v43 = v10;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = v8;
  uint64_t v16 = HIBYTE(v10) & 0xF;
  uint64_t v17 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0) {
    unint64_t v18 = HIBYTE(v43) & 0xF;
  }
  else {
    unint64_t v18 = v42 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18) {
    goto LABEL_63;
  }
  if ((v43 & 0x1000000000000000) != 0)
  {
    unint64_t v20 = specialized _parseInteger<A, B>(ascii:radix:)(v42, v43, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    char v22 = v41;
    goto LABEL_40;
  }
  if ((v43 & 0x2000000000000000) == 0)
  {
    if ((v42 & 0x1000000000000000) != 0) {
      unint64_t v19 = (unsigned __int8 *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v20 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v19, v17, 10);
    char v22 = v21 & 1;
LABEL_40:
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
LABEL_42:
      uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of VideoPlayerComponent.init(videoResource:));
      char v29 = v46;
      char v30 = v45;
      char v31 = v44;
      *(unsigned char *)a2 = v47;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v7;
      *(unsigned char *)(a2 + 24) = v29;
      *(_DWORD *)(a2 + 28) = 1055286886;
      *(unsigned char *)(a2 + 32) = v30;
      *(unsigned char *)(a2 + 33) = v31;
      *(_DWORD *)(a2 + 36) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = a1;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = v20;
      *(_DWORD *)(a2 + 96) = 65793;
      *(unsigned char *)(a2 + 100) = 0;
      *(_OWORD *)(a2 + 112) = v32;
      *(_DWORD *)(a2 + 128) = -1082130432;
      *(unsigned char *)(a2 + 132) = 0;
      return result;
    }
LABEL_41:
    unint64_t v20 = arc4random();
    goto LABEL_42;
  }
  unint64_t v43 = v10 & 0xFFFFFFFFFFFFFFLL;
  if (v42 == 43)
  {
    if (v16)
    {
      if (v16 != 1 && (BYTE1(v42) - 48) <= 9u)
      {
        unint64_t v20 = (BYTE1(v42) - 48);
        if (v16 == 2) {
          goto LABEL_39;
        }
        if ((BYTE2(v42) - 48) <= 9u)
        {
          unint64_t v20 = 10 * (BYTE1(v42) - 48) + (BYTE2(v42) - 48);
          uint64_t v26 = v16 - 3;
          if (v26)
          {
            unsigned int v27 = (unsigned __int8 *)&v42 + 3;
            while (1)
            {
              unsigned int v28 = *v27 - 48;
              if (v28 > 9) {
                goto LABEL_36;
              }
              if (!is_mul_ok(v20, 0xAuLL)) {
                goto LABEL_36;
              }
              BOOL v24 = __CFADD__(10 * v20, v28);
              unint64_t v20 = 10 * v20 + v28;
              if (v24) {
                goto LABEL_36;
              }
              char v22 = 0;
              ++v27;
              if (!--v26) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
  }
  else
  {
    if (v42 != 45)
    {
      if (v16 && (v42 - 48) <= 9u)
      {
        unint64_t v20 = (v42 - 48);
        if (v16 == 1) {
          goto LABEL_39;
        }
        if ((BYTE1(v42) - 48) <= 9u)
        {
          unint64_t v20 = 10 * (v42 - 48) + (BYTE1(v42) - 48);
          uint64_t v33 = v16 - 2;
          if (v33)
          {
            long long v34 = (unsigned __int8 *)&v42 + 2;
            while (1)
            {
              unsigned int v35 = *v34 - 48;
              if (v35 > 9) {
                goto LABEL_36;
              }
              if (!is_mul_ok(v20, 0xAuLL)) {
                goto LABEL_36;
              }
              BOOL v24 = __CFADD__(10 * v20, v35);
              unint64_t v20 = 10 * v20 + v35;
              if (v24) {
                goto LABEL_36;
              }
              char v22 = 0;
              ++v34;
              if (!--v33) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_39;
        }
      }
LABEL_36:
      unint64_t v20 = 0;
LABEL_37:
      char v22 = 1;
      goto LABEL_40;
    }
    if (v16)
    {
      if (v16 != 1)
      {
        unsigned __int8 v23 = BYTE1(v42) - 48;
        if ((BYTE1(v42) - 48) <= 9u)
        {
          unint64_t v20 = 0;
          BOOL v24 = v23 == 0;
          unint64_t v25 = -(uint64_t)v23;
          if (!v24) {
            goto LABEL_37;
          }
          if (v16 == 2)
          {
            char v22 = 0;
            unint64_t v20 = v25;
            goto LABEL_40;
          }
          unsigned __int8 v36 = BYTE2(v42) - 48;
          if ((BYTE2(v42) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
          {
            unint64_t v37 = 10 * v25;
            unint64_t v20 = v37 - v36;
            if (v37 >= v36)
            {
              uint64_t v38 = v16 - 3;
              if (v38)
              {
                uint64_t v39 = (unsigned __int8 *)&v42 + 3;
                while (1)
                {
                  unsigned int v40 = *v39 - 48;
                  if (v40 > 9) {
                    goto LABEL_36;
                  }
                  if (!is_mul_ok(v20, 0xAuLL)) {
                    goto LABEL_36;
                  }
                  BOOL v24 = 10 * v20 >= v40;
                  unint64_t v20 = 10 * v20 - v40;
                  if (!v24) {
                    goto LABEL_36;
                  }
                  char v22 = 0;
                  ++v39;
                  if (!--v38) {
                    goto LABEL_40;
                  }
                }
              }
LABEL_39:
              char v22 = 0;
              goto LABEL_40;
            }
          }
        }
      }
      goto LABEL_36;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t VideoPlayerComponent.__toCore(_:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  int v6 = *(unsigned __int8 *)(v0 + 33);
  REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REVideoPlayerComponentSetVideoAsset();
  REVideoPlayerComponentSetScreenRoundedCornerEnabled();
  REVideoPlayerComponentSetScreenAspectRatioAnimationEnabled();
  REVideoPlayerComponentSetScreenDeferAspectRatioTransitionToApp();
  REVideoPlayerComponentSetGuid();
  REVideoPlayerComponentSetEnableReflections();
  REVideoPlayerComponentSetLowLatencyEnabled();
  RENetworkMarkComponentDirty();
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  REVideoPlayerComponentPreloadVideoAsset();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (v1 == 1) {
    return REVideoPlayerComponentStartBlurVideoFadeIn();
  }
  if (v6) {
    return REVideoPlayerComponentStartBlurVideoFadeOut();
  }
  return result;
}

void static VideoPlayerComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3020;
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpoint.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpointHash.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t VideoPlayerComponent.VideoReceiverEndpointInfo.videoReceiverEndpointType.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t VideoPlayerComponent.videoReceiverEndpointInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(void *)(a1 + 16) = v2;
  return swift_unknownObjectRetain();
}

__n128 VideoPlayerComponent.videoReceiverEndpointInfo.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_unknownObjectRelease();
  __n128 result = v4;
  v1[3] = v4;
  v1[4].n128_u64[0] = v2;
  return result;
}

uint64_t (*VideoPlayerComponent.videoReceiverEndpointInfo.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = *(void *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v1;
  swift_unknownObjectRetain();
  return VideoPlayerComponent.videoReceiverEndpointInfo.modify;
}

uint64_t VideoPlayerComponent.videoReceiverEndpointInfo.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  __n128 v4 = (void *)a1[3];
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    void v4[6] = v2;
    v4[7] = v3;
    v4[8] = v5;
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    void v4[6] = v2;
    v4[7] = v3;
    v4[8] = v5;
  }
  return result;
}

void one-time initialization function for sVPCNetworkSystemObserver()
{
  type metadata accessor for VPCNetworkSystemObserver();
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<(UInt64, OpaquePointer?), Never>);
  swift_allocObject();
  v0[4] = CurrentValueSubject.init(_:)();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  static VideoPlayerComponent.sVPCNetworkSystemObserver = (uint64_t)v0;
}

uint64_t VideoPlayerComponent.enableReflections.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t VideoPlayerComponent.enableReflections.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.enableReflections.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenRoundedCornerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t VideoPlayerComponent.playerScreenRoundedCornerEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 97) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenRoundedCornerEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 98);
}

uint64_t VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 98) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenAspectRatioAnimationEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.getter()
{
  return *(unsigned __int8 *)(v0 + 99);
}

uint64_t VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 99) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.playerScreenDeferAspectRatioTransitionToApp.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoPlayerComponent.isLowLatencyEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 100);
}

uint64_t VideoPlayerComponent.isLowLatencyEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 100) = result;
  return result;
}

uint64_t (*VideoPlayerComponent.isLowLatencyEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void protocol witness for static Component.__coreComponentType.getter in conformance VideoPlayerComponent(_DWORD *a1@<X8>)
{
  *a1 = 3020;
}

uint64_t VPCNetworkSystemObserver.__deallocating_deinit()
{
  if (*(void *)(v0 + 16) && *(void *)(v0 + 24))
  {
    RENetworkSystemRemoveObserver();
    *(void *)(v0 + 16) = 0;
  }
  if (*(void *)(v0 + 24))
  {
    RERelease();
    *(void *)(v0 + 24) = 0;
  }
  swift_release();

  return swift_deallocClassInstance();
}

void VPCNetworkSystemObserver.setupRENetworkCallbacks()()
{
  if (!*(void *)(v0 + 24))
  {
    uint64_t v1 = v0;
    uint64_t v2 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    uint64_t v3 = *(void *)(v2 + 24);
    swift_unownedRetainStrong();
    swift_beginAccess();
    uint64_t v4 = *(void *)(v3 + 40);
    swift_retain();
    swift_release();
    if (!v4)
    {
      __break(1u);
      return;
    }
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4 + 80, (uint64_t)v26);
    swift_release();
    uint64_t v5 = v27;
    uint64_t v6 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 32))(&v20, v5, v6);
    if (REECSManagerSceneCount() < 1)
    {
      if (one-time initialization token for VideoLogger != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)VideoLogger);
      Swift::String v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_16;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      unint64_t v18 = "App VideoPlayer+Component Caption: setupRENetworkCallbacks failed - scene count is zero";
    }
    else
    {
      uint64_t ServiceLocator = REECSManagerGetServiceLocator();
      *(void *)(v1 + 16) = MEMORY[0x22A6922A0](ServiceLocator);
      uint64_t v8 = RENetworkSystemObserverCreateEx();
      *(void *)(v1 + 24) = v8;
      if (*(void *)(v1 + 16) && v8)
      {
        BOOL v24 = (uint64_t (*)(uint64_t))partial apply for implicit closure #2 in implicit closure #1 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        uint64_t v25 = v1;
        uint64_t v20 = MEMORY[0x263EF8330];
        uint64_t v21 = 1107296256;
        char v22 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
        unsigned __int8 v23 = &block_descriptor_36;
        uint64_t v9 = _Block_copy(&v20);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalComponentWillRemove();
        _Block_release(v9);
        BOOL v24 = partial apply for implicit closure #4 in implicit closure #3 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        uint64_t v25 = v1;
        uint64_t v20 = MEMORY[0x263EF8330];
        uint64_t v21 = 1107296256;
        char v22 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
        unsigned __int8 v23 = &block_descriptor_58_2;
        unint64_t v10 = _Block_copy(&v20);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalEntityDidCreate();
        _Block_release(v10);
        BOOL v24 = partial apply for implicit closure #6 in implicit closure #5 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        uint64_t v25 = v1;
        uint64_t v20 = MEMORY[0x263EF8330];
        uint64_t v21 = 1107296256;
        char v22 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
        unsigned __int8 v23 = &block_descriptor_61;
        uint64_t v11 = _Block_copy(&v20);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalEntityWillDestroy();
        _Block_release(v11);
        BOOL v24 = (uint64_t (*)(uint64_t))partial apply for implicit closure #8 in implicit closure #7 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        uint64_t v25 = v1;
        uint64_t v20 = MEMORY[0x263EF8330];
        uint64_t v21 = 1107296256;
        char v22 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
        unsigned __int8 v23 = &block_descriptor_64_0;
        uint64_t v12 = _Block_copy(&v20);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnComponentDidUpdate();
        _Block_release(v12);
        BOOL v24 = (uint64_t (*)(uint64_t))partial apply for implicit closure #10 in implicit closure #9 in VPCNetworkSystemObserver.setupRENetworkCallbacks();
        uint64_t v25 = v1;
        uint64_t v20 = MEMORY[0x263EF8330];
        uint64_t v21 = 1107296256;
        char v22 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
        unsigned __int8 v23 = &block_descriptor_67;
        char v13 = _Block_copy(&v20);
        swift_retain();
        swift_release();
        RENetworkSystemObserverOnLocalComponentDidUpdate();
        _Block_release(v13);
        RENetworkSystemAddObserver();
LABEL_17:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        return;
      }
      if (one-time initialization token for VideoLogger != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)VideoLogger);
      Swift::String v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16))
      {
LABEL_16:

        goto LABEL_17;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      unint64_t v18 = "App VideoPlayer+Component Caption: setupRENetworkCallbacks failed - no network system or observer";
    }
    _os_log_impl(&dword_227DD2000, v15, v16, v18, v17, 2u);
    MEMORY[0x22A696500](v17, -1, -1);
    goto LABEL_16;
  }
}

void VPCNetworkSystemObserver.onComponentDidUpdate(componentRef:)(uint64_t a1)
{
  uint64_t Entity = REComponentGetEntity();
  REVideoPlayerStatusComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass && ComponentByClass == a1
    || (REVideoPlayerComponentGetComponentType(), (uint64_t v4 = REEntityGetComponentByClass()) != 0) && v4 == a1)
  {
    REVideoPlayerStatusComponentGetComponentType();
    uint64_t v5 = REEntityGetComponentByClass();
    if (v5)
    {
      uint64_t v6 = v5;
      REVideoPlayerComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REVideoPlayerStatusComponentDidUpdateInApp();
        swift_retain();
        v20[0] = REVideoPlayerComponentGetGuid();
        v20[1] = v6;
        CurrentValueSubject.send(_:)();
        swift_release();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed())
          {
            __break(1u);
            return;
          }
          uint64_t v10 = specialized static Entity.entityInfoType(_:)();
          if (v10)
          {
            uint64_t v11 = (*(uint64_t (**)(void))(v10 + 232))();
            uint64_t v12 = *(void *)(v11 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v12, 0);
            *(void *)(v11 + 16) = Entity;
            MEMORY[0x22A68E750](Entity, v11);
            swift_release();
          }
          else
          {
            makeEntity(for:)(Entity);
          }
        }
        swift_retain();
        specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v18);
        outlined init with take of VideoPlayerComponent?((uint64_t)v18, (uint64_t)v19);
        outlined init with take of VideoPlayerComponent?((uint64_t)v19, (uint64_t)v20);
        if (_s17RealityFoundation20VideoPlayerComponentVSgWOg((uint64_t)v20) == 1)
        {
          if (one-time initialization token for VideoLogger != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          __swift_project_value_buffer(v13, (uint64_t)VideoLogger);
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v14, v15))
          {
            os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v16 = 0;
            _os_log_impl(&dword_227DD2000, v14, v15, "App VideoPlayer+Component VPCNetworkSystemObserver onComponentDidUpdate failed - there is no videoplayercomponent object", v16, 2u);
            MEMORY[0x22A696500](v16, -1, -1);
          }

          swift_release_n();
        }
        else
        {
          swift_release();
          outlined release of VideoPlayerComponent?(v19);
          swift_release();
        }
      }
    }
    else
    {
      if (one-time initialization token for VideoLogger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)VideoLogger);
      oslog = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_227DD2000, oslog, v8, "App VideoPlayer+Component VPCNetworkSystemObserver onComponentDidUpdate failed - there is no Video Player Status Component", v9, 2u);
        MEMORY[0x22A696500](v9, -1, -1);
      }
    }
  }
}

uint64_t VideoPlayerComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = v0[5];
  long long v9 = v0[7];
  long long v33 = v0[6];
  v34[0] = v9;
  long long v10 = v0[1];
  long long v11 = v0[3];
  long long v29 = v0[2];
  long long v30 = v11;
  long long v12 = v0[3];
  long long v13 = v0[5];
  long long v31 = v0[4];
  long long v32 = v13;
  long long v14 = v0[1];
  long long v27 = *v0;
  long long v28 = v14;
  long long v15 = v0[7];
  v25[6] = v33;
  v26[0] = v15;
  _OWORD v25[2] = v29;
  v25[3] = v12;
  v25[4] = v31;
  v25[5] = v8;
  *(void *)((char *)v34 + 13) = *(void *)((char *)v0 + 125);
  *(void *)((char *)v26 + 13) = *(void *)((char *)v0 + 125);
  v25[0] = v27;
  v25[1] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_22831E320;
  *(void *)(v16 + 32) = 0x726579616C507661;
  *(void *)(v16 + 40) = 0xE800000000000000;
  outlined retain of VideoPlayerComponent((uint64_t)&v27);
  id v17 = (id)REVideoAssetGetAVPlayer();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AVPlayer?);
  *(void *)(v16 + 48) = v17;
  *(void *)(v16 + 72) = v18;
  *(void *)(v16 + 80) = 0xD000000000000012;
  *(void *)(v16 + 88) = 0x800000022835BC30;
  *(unsigned char *)(v16 + 96) = v27;
  *(void *)(v16 + 120) = &type metadata for VideoPlaybackController.ViewingMode;
  *(void *)(v16 + 128) = 0x4D676E6977656976;
  *(void *)(v16 + 136) = 0xEB0000000065646FLL;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for VideoPlaybackController.ViewingMode?);
  *(unsigned char *)(v16 + 144) = 2 * (BYTE4(v34[1]) != 1);
  *(void *)(v16 + 168) = v19;
  *(void *)(v16 + 176) = 0xD000000000000010;
  *(void *)(v16 + 184) = 0x800000022835BC50;
  uint64_t v20 = *((void *)&v27 + 1);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  *(void *)(v16 + 192) = v20;
  *(void *)(v16 + 216) = v21;
  *(void *)(v16 + 224) = 0xD000000000000014;
  *(void *)(v16 + 232) = 0x800000022835BC70;
  uint64_t v22 = v28;
  *(void *)(v16 + 264) = v21;
  *(void *)(v16 + 240) = v22;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v7, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

id VideoPlayerComponent.videoRenderer.getter()
{
  AVSampleBufferVideoRenderer = (void *)REVideoAssetGetAVSampleBufferVideoRenderer();

  return AVSampleBufferVideoRenderer;
}

void VideoPlayerComponent.init(videoRenderer:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void VideoPlayerComponent.init(avPlayer:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, id)@<X4>, uint64_t a6@<X8>)
{
  char v65 = 0;
  specialized SIMD.init<A>(_:)(a2);
  uint64_t v12 = v11;
  specialized SIMD.init<A>(_:)(a3);
  uint64_t v14 = v13;
  char v64 = 0;
  char v63 = 0;
  char v62 = 0;
  LODWORD(v58) = getpid();
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v17 = v16;
  if (one-time initialization token for uniqueTokenGenerator != -1) {
    swift_once();
  }
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  if (static VideoPlayerComponent.uniqueTokenGenerator == -1)
  {
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  ++static VideoPlayerComponent.uniqueTokenGenerator;
  OS_dispatch_semaphore.signal()();
  swift_endAccess();
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v20 = v19;
  uint64_t v58 = v15;
  unint64_t v59 = v17;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(v17) & 0xF;
  uint64_t v23 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0) {
    unint64_t v24 = HIBYTE(v59) & 0xF;
  }
  else {
    unint64_t v24 = v58 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v57 = a5;
  if (!v24) {
    goto LABEL_65;
  }
  if ((v59 & 0x1000000000000000) != 0)
  {
    unint64_t v26 = specialized _parseInteger<A, B>(ascii:radix:)(v15, v59, 10, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
    char v28 = v55;
    goto LABEL_40;
  }
  if ((v59 & 0x2000000000000000) != 0)
  {
    unint64_t v59 = v17 & 0xFFFFFFFFFFFFFFLL;
    if (v58 == 43)
    {
      if (v22)
      {
        if (v22 != 1 && (BYTE1(v15) - 48) <= 9u)
        {
          unint64_t v26 = (BYTE1(v15) - 48);
          if (v22 == 2) {
            goto LABEL_39;
          }
          if ((BYTE2(v15) - 48) <= 9u)
          {
            unint64_t v26 = 10 * (BYTE1(v15) - 48) + (BYTE2(v15) - 48);
            uint64_t v32 = v22 - 3;
            if (v32)
            {
              long long v33 = (unsigned __int8 *)&v58 + 3;
              while (1)
              {
                unsigned int v34 = *v33 - 48;
                if (v34 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v26, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v30 = __CFADD__(10 * v26, v34);
                unint64_t v26 = 10 * v26 + v34;
                if (v30) {
                  goto LABEL_36;
                }
                char v28 = 0;
                ++v33;
                if (!--v32) {
                  goto LABEL_40;
                }
              }
            }
            goto LABEL_39;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (v58 != 45)
      {
        if (v22 && (v15 - 48) <= 9u)
        {
          unint64_t v26 = (v15 - 48);
          if (v22 == 1) {
            goto LABEL_39;
          }
          if ((BYTE1(v15) - 48) <= 9u)
          {
            unint64_t v26 = 10 * (v15 - 48) + (BYTE1(v15) - 48);
            uint64_t v47 = v22 - 2;
            if (v47)
            {
              uint64_t v48 = (unsigned __int8 *)&v58 + 2;
              while (1)
              {
                unsigned int v49 = *v48 - 48;
                if (v49 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v26, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v30 = __CFADD__(10 * v26, v49);
                unint64_t v26 = 10 * v26 + v49;
                if (v30) {
                  goto LABEL_36;
                }
                char v28 = 0;
                ++v48;
                if (!--v47) {
                  goto LABEL_40;
                }
              }
            }
            goto LABEL_39;
          }
        }
LABEL_36:
        unint64_t v26 = 0;
LABEL_37:
        char v28 = 1;
        goto LABEL_40;
      }
      if (v22)
      {
        if (v22 != 1)
        {
          unsigned __int8 v29 = BYTE1(v15) - 48;
          if ((BYTE1(v15) - 48) <= 9u)
          {
            unint64_t v26 = 0;
            BOOL v30 = v29 == 0;
            unint64_t v31 = -(uint64_t)v29;
            if (!v30) {
              goto LABEL_37;
            }
            if (v22 == 2)
            {
              char v28 = 0;
              unint64_t v26 = v31;
              goto LABEL_40;
            }
            unsigned __int8 v50 = BYTE2(v15) - 48;
            if ((BYTE2(v15) - 48) <= 9u && is_mul_ok(v31, 0xAuLL))
            {
              unint64_t v51 = 10 * v31;
              unint64_t v26 = v51 - v50;
              if (v51 >= v50)
              {
                uint64_t v52 = v22 - 3;
                if (v52)
                {
                  long long v53 = (unsigned __int8 *)&v58 + 3;
                  while (1)
                  {
                    unsigned int v54 = *v53 - 48;
                    if (v54 > 9) {
                      goto LABEL_36;
                    }
                    if (!is_mul_ok(v26, 0xAuLL)) {
                      goto LABEL_36;
                    }
                    BOOL v30 = 10 * v26 >= v54;
                    unint64_t v26 = 10 * v26 - v54;
                    if (!v30) {
                      goto LABEL_36;
                    }
                    char v28 = 0;
                    ++v53;
                    if (!--v52) {
                      goto LABEL_40;
                    }
                  }
                }
LABEL_39:
                char v28 = 0;
                goto LABEL_40;
              }
            }
          }
        }
        goto LABEL_36;
      }
      __break(1u);
    }
    __break(1u);
    return;
  }
  if ((v58 & 0x1000000000000000) != 0) {
    uint64_t v25 = (unsigned __int8 *)((v59 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v26 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v25, v23, 10);
  char v28 = v27 & 1;
LABEL_40:
  swift_bridgeObjectRelease();
  if (v28) {
LABEL_41:
  }
    unint64_t v26 = arc4random();
  specialized SIMD.init<A>(_:)(a4);
  long long v56 = v35;
  type metadata accessor for __VideoResource();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 24) = MEMORY[0x263F8EE78];
  id v37 = a1;
  uint64_t v38 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v38, (uint64_t)&v58);
  uint64_t v39 = v60;
  uint64_t v40 = v61;
  __swift_project_boxed_opaque_existential_1(&v58, v60);
  char v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 32);
  swift_retain();
  uint64_t v42 = v41(v39, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  *(void *)(v36 + 16) = v57(v42, v37);
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  type metadata accessor for VideoPlayerController();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v26;
  if (one-time initialization token for sVPCNetworkSystemObserver != -1) {
    swift_once();
  }
  swift_retain();
  VPCNetworkSystemObserver.setupRENetworkCallbacks()();
  swift_release();

  char v44 = v64;
  char v45 = v63;
  char v46 = v62;
  *(unsigned char *)a6 = v65;
  *(void *)(a6 + 8) = v12;
  *(void *)(a6 + 16) = v14;
  *(unsigned char *)(a6 + 24) = v44;
  *(_DWORD *)(a6 + 28) = 1055286886;
  *(unsigned char *)(a6 + 32) = v45;
  *(unsigned char *)(a6 + 33) = v46;
  *(_DWORD *)(a6 + 36) = 0;
  *(_DWORD *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 56) = 0;
  *(void *)(a6 + 64) = 0;
  *(void *)(a6 + 72) = v36;
  *(void *)(a6 + 80) = v43;
  *(void *)(a6 + 88) = v26;
  *(_DWORD *)(a6 + 96) = 65793;
  *(unsigned char *)(a6 + 100) = 0;
  *(_OWORD *)(a6 + 112) = v56;
  *(_DWORD *)(a6 + 128) = -1082130432;
  *(unsigned char *)(a6 + 132) = 0;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x22A688C30](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    long long v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    long long v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    long long v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  char v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x22A688B60);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x22A688B60](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x22A688B60]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VideoPlayerController()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerDefaults and conformance VideoPlayerDefaults()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults;
  if (!lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerDefaults and conformance VideoPlayerDefaults);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode;
  if (!lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerComponent.ImmersiveViewingMode and conformance VideoPlayerComponent.ImmersiveViewingMode);
  }
  return result;
}

unsigned char *sub_2281B39D0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_2281B39DC(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

void sub_2281B39E8()
{
}

uint64_t sub_2281B3A38@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 24);
  return result;
}

unsigned char *sub_2281B3A44(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = *result;
  return result;
}

float sub_2281B3A50@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 28);
  *a2 = result;
  return result;
}

float *sub_2281B3A5C(float *result, uint64_t a2)
{
  float v2 = *result;
  if (*result <= 0.0) {
    float v2 = 0.0;
  }
  if (v2 > 1.0) {
    float v2 = 1.0;
  }
  *(float *)(a2 + 28) = v2;
  return result;
}

uint64_t sub_2281B3A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 16) = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_2281B3A98(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  a2[6] = v3;
  a2[7] = v4;
  a2[8] = v5;
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerDefaults()
{
  return &type metadata for VideoPlayerDefaults;
}

uint64_t destroy for VideoPlayerComponent()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  return a1;
}

__n128 __swift_memcpy133_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoPlayerComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 133)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 132) = 0;
    *(_DWORD *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 133) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 133) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent()
{
  return &type metadata for VideoPlayerComponent;
}

unsigned char *storeEnumTagSinglePayload for VideoPlayerComponent.ImmersiveViewingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281B3FA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent.ImmersiveViewingMode()
{
  return &type metadata for VideoPlayerComponent.ImmersiveViewingMode;
}

uint64_t initializeBufferWithCopyOfBuffer for VideoPlayerComponent.VideoReceiverEndpointInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for VideoPlayerComponent.VideoReceiverEndpointInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for VideoPlayerComponent.VideoReceiverEndpointInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for VideoPlayerComponent.VideoReceiverEndpointInfo()
{
  return &type metadata for VideoPlayerComponent.VideoReceiverEndpointInfo;
}

uint64_t type metadata accessor for VPCNetworkSystemObserver()
{
  return self;
}

uint64_t outlined init with take of VideoPlayerComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoPlayerComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s17RealityFoundation20VideoPlayerComponentVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t *outlined release of VideoPlayerComponent?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of VideoPlayerComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = a10;
  if (a10)
  {
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in VPCNetworkSystemObserver.setupRENetworkCallbacks()(uint64_t a1)
{
  return specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(a1, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoEntityDidCreate failed - there is no videoplayercomponent object");
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in VPCNetworkSystemObserver.setupRENetworkCallbacks()(uint64_t a1)
{
  return specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(a1, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoEntityWillDestroy failed - there is no videoplayercomponent object");
}

uint64_t specialized VPCNetworkSystemObserver.onLocalVideoComponentRemove(componentRef:)(uint64_t a1)
{
  uint64_t Entity = REComponentGetEntity();
  REVideoPlayerComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result && result == a1)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v4 = specialized static Entity.entityInfoType(_:)();
      if (v4)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(v4 + 232))();
        uint64_t v6 = *(void *)(v5 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v6, 0);
        *(void *)(v5 + 16) = Entity;
        MEMORY[0x22A68E750](Entity, v5);
        swift_release();
      }
      else
      {
        makeEntity(for:)(Entity);
      }
    }
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v11);
    outlined init with take of VideoPlayerComponent?((uint64_t)v11, (uint64_t)v12);
    outlined init with take of VideoPlayerComponent?((uint64_t)v12, (uint64_t)v13);
    if (_s17RealityFoundation20VideoPlayerComponentVSgWOg((uint64_t)v13) == 1)
    {
      if (one-time initialization token for VideoLogger != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)VideoLogger);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        unint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v10 = 0;
        _os_log_impl(&dword_227DD2000, v8, v9, "App VideoPlayer+Component VPCNetworkSystemObserver onLocalVideoComponentRemove failed - there is no videoplayercomponent object", v10, 2u);
        MEMORY[0x22A696500](v10, -1, -1);
      }

      return swift_release_n();
    }
    else
    {
      swift_release();
      outlined release of VideoPlayerComponent?(v12);
      return swift_release();
    }
  }
  return result;
}

uint64_t specialized VPCNetworkSystemObserver.onLocalVideoEntityDidCreate(entityRef:)(uint64_t a1, const char *a2)
{
  REVideoPlayerComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = specialized static Entity.entityInfoType(_:)();
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(v5 + 232))();
        uint64_t v7 = *(void *)(v6 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v7, 0);
        *(void *)(v6 + 16) = a1;
        MEMORY[0x22A68E750](a1, v6);
        swift_release();
      }
      else
      {
        makeEntity(for:)(a1);
      }
    }
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v12);
    outlined init with take of VideoPlayerComponent?((uint64_t)v12, (uint64_t)v13);
    outlined init with take of VideoPlayerComponent?((uint64_t)v13, (uint64_t)v14);
    if (_s17RealityFoundation20VideoPlayerComponentVSgWOg((uint64_t)v14) == 1)
    {
      if (one-time initialization token for VideoLogger != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)VideoLogger);
      os_log_type_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_227DD2000, v9, v10, a2, v11, 2u);
        MEMORY[0x22A696500](v11, -1, -1);
      }

      return swift_release_n();
    }
    else
    {
      swift_release();
      outlined release of VideoPlayerComponent?(v13);
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEmphasisBounceAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisBounceAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBounceAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisBounceAnimation.createBounceAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 140, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulBounceAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 271, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildBounceAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicBounceAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    char v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  unint64_t v23 = &rawValue[6 * v21];
  v23[2] = v30;
  _OWORD v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  unsigned __int8 v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

uint64_t __RKEmphasisJiggleAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisJiggleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisJiggleAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisJiggleAnimation.createJiggleAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 203, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulJiggleAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildJiggleAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicJiggleAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    char v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  unint64_t v23 = &rawValue[6 * v21];
  v23[2] = v30;
  _OWORD v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  unsigned __int8 v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

uint64_t Entity.isAccessibilityElement.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    uint64_t v0 = v11[0];
    uint64_t v1 = v11[1];
    uint64_t v2 = v12;
    uint64_t v3 = v13;
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v1;
}

uint64_t key path getter for Entity.isAccessibilityElement : Entity@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v12);
  uint64_t v2 = v18;
  if (v18)
  {
    uint64_t v4 = v16;
    uint64_t v3 = v17;
    uint64_t v6 = v14;
    uint64_t v5 = v15;
    uint64_t v8 = *((void *)&v12 + 1);
    uint64_t v7 = v13;
    unint64_t v9 = v12;
    swift_release();
    uint64_t v10 = (v9 >> 8) & 1;
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    LOBYTE(v10) = 0;
  }
  *a1 = v10;
  return result;
}

uint64_t Entity.isAccessibilityElement.setter(char a1)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    uint64_t v3 = v18;
    uint64_t v2 = v19;
    uint64_t v4 = *((void *)&v15 + 1);
    long long v5 = v16;
    long long v6 = v17;
    uint64_t v7 = v15;
  }
  else
  {
    swift_release();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    uint64_t v2 = MEMORY[0x263F8EE78];
    uint64_t v18 = 0;
    uint64_t v19 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v5 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    long long v6 = 0uLL;
  }
  uint64_t v8 = 256;
  if ((a1 & 1) == 0) {
    uint64_t v8 = 0;
  }
  v10[0] = v7 | v8;
  v10[1] = v4;
  long long v11 = v5;
  long long v12 = v6;
  uint64_t v13 = v3;
  uint64_t v14 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t Entity.__isAccessibilityEnabled.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    uint64_t v0 = v11[0];
    uint64_t v1 = v11[1];
    uint64_t v2 = v12;
    uint64_t v3 = v13;
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v1;
}

uint64_t Entity.__isAccessibilityEnabled.setter(char a1)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    uint64_t v3 = v18;
    uint64_t v2 = v19;
    uint64_t v4 = *((void *)&v15 + 1);
    long long v5 = v16;
    long long v6 = v17;
    uint64_t v7 = v15;
  }
  else
  {
    swift_release();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    uint64_t v2 = MEMORY[0x263F8EE78];
    uint64_t v18 = 0;
    uint64_t v19 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v5 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    long long v6 = 0uLL;
  }
  uint64_t v8 = 256;
  if ((a1 & 1) == 0) {
    uint64_t v8 = 0;
  }
  v10[0] = v7 | v8;
  v10[1] = v4;
  long long v11 = v5;
  long long v12 = v6;
  uint64_t v13 = v3;
  uint64_t v14 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void (*Entity.isAccessibilityElement.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)malloc(0x1D0uLL);
  *a1 = v4;
  long long v5 = v4 + 456;
  *((void *)v4 + 56) = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 384));
    uint64_t v16 = v4[384];
    int v6 = v4[385];
    uint64_t v7 = *((void *)v4 + 50);
    uint64_t v15 = *((void *)v4 + 49);
    uint64_t v8 = *((void *)v4 + 51);
    uint64_t v9 = *((void *)v4 + 52);
    uint64_t v10 = *((void *)v4 + 53);
    uint64_t v11 = *((void *)v4 + 54);
    uint64_t v12 = *((void *)v4 + 55);
    swift_release();
    uint64_t v13 = 256;
    if (!v6) {
      uint64_t v13 = 0;
    }
    outlined consume of __AccessibilityComponent?(v13 | v16, v15, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    LOBYTE(v6) = 0;
  }
  *long long v5 = v6;
  return Entity.isAccessibilityElement.modify;
}

void Entity.isAccessibilityElement.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = (unsigned __int8 *)(*(void *)a1 + 256);
  int v5 = *(unsigned __int8 *)(*(void *)a1 + 456);
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  if (a2)
  {
    uint64_t v7 = (uint64_t)(v3 + 8);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v4);
      swift_release();
      uint64_t v9 = v3[38];
      uint64_t v8 = v3[39];
      uint64_t v10 = v3[33];
      long long v11 = *((_OWORD *)v3 + 17);
      long long v12 = *((_OWORD *)v3 + 18);
      uint64_t v13 = *v4;
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      uint64_t v8 = MEMORY[0x263F8EE78];
      v3[6] = 0;
      v3[7] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v11 = 0uLL;
      uint64_t v13 = 0;
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      long long v12 = 0uLL;
    }
    uint64_t v20 = 256;
    if (!v5) {
      uint64_t v20 = 0;
    }
    v3[8] = v13 | v20;
    v3[9] = v10;
    *((_OWORD *)v3 + 5) = v11;
    *((_OWORD *)v3 + 6) = v12;
    v3[14] = v9;
    v3[15] = v8;
  }
  else
  {
    uint64_t v7 = (uint64_t)(v3 + 24);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 40));
      swift_release();
      uint64_t v15 = v3[46];
      uint64_t v14 = v3[47];
      uint64_t v16 = v3[41];
      long long v17 = *((_OWORD *)v3 + 21);
      long long v18 = *((_OWORD *)v3 + 22);
      uint64_t v19 = *((unsigned __int8 *)v3 + 320);
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      uint64_t v14 = MEMORY[0x263F8EE78];
      v3[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v17 = 0uLL;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      uint64_t v15 = 0;
      long long v18 = 0uLL;
    }
    uint64_t v21 = 256;
    if (!v5) {
      uint64_t v21 = 0;
    }
    unsigned char v3[24] = v19 | v21;
    v3[25] = v16;
    *((_OWORD *)v3 + 13) = v17;
    *((_OWORD *)v3 + 14) = v18;
    v3[30] = v15;
    v3[31] = v14;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v3);
}

uint64_t Entity.accessibilityLabel.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t key path getter for Entity.accessibilityLabel : Entity@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  uint64_t v2 = v17;
  if (v17)
  {
    uint64_t v4 = v15;
    uint64_t v3 = v16;
    uint64_t v6 = v13;
    uint64_t v5 = v14;
    uint64_t v8 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    uint64_t v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

uint64_t Entity.accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    uint64_t v4 = *((void *)&v16 + 1);
    uint64_t v6 = v17;
    uint64_t v5 = v18;
    outlined init with take of String?((uint64_t)&v15 + 8, (uint64_t)v12);
    outlined release of IKRig.Joint?((uint64_t)v12);
    uint64_t v7 = *((void *)&v14 + 1);
    uint64_t v8 = v15;
    uint64_t v9 = 256;
    if (!BYTE1(v14)) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v14;
  }
  else
  {
    swift_release();
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v17 = 0;
    uint64_t v18 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
  v13[0] = v10;
  v13[1] = v7;
  _OWORD v13[2] = v8;
  void v13[3] = a1;
  _OWORD v13[4] = a2;
  v13[5] = v4;
  v13[6] = v6;
  v13[7] = v5;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v13);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.__accessibilityLabel.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t Entity.__accessibilityLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    uint64_t v4 = *((void *)&v16 + 1);
    uint64_t v6 = v17;
    uint64_t v5 = v18;
    outlined init with take of String?((uint64_t)&v15 + 8, (uint64_t)v12);
    outlined release of IKRig.Joint?((uint64_t)v12);
    uint64_t v7 = *((void *)&v14 + 1);
    uint64_t v8 = v15;
    uint64_t v9 = 256;
    if (!BYTE1(v14)) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v14;
  }
  else
  {
    swift_release();
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v17 = 0;
    uint64_t v18 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
  v13[0] = v10;
  v13[1] = v7;
  _OWORD v13[2] = v8;
  void v13[3] = a1;
  _OWORD v13[4] = a2;
  v13[5] = v4;
  v13[6] = v6;
  v13[7] = v5;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v13);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.accessibilityLabel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x1F8uLL);
  *a1 = v3;
  v3[62] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    uint64_t v4 = *((unsigned __int8 *)v3 + 256);
    int v5 = *((unsigned __int8 *)v3 + 257);
    uint64_t v6 = v3[35];
    uint64_t v14 = v3[34];
    uint64_t v15 = v3[33];
    uint64_t v7 = v3[36];
    uint64_t v8 = v3[37];
    uint64_t v10 = v3[38];
    uint64_t v9 = v3[39];
    swift_release();
    uint64_t v11 = 256;
    if (!v5) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 | v4;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v12, v15, v14, v6, v7, v8, v10, v9);
  }
  else
  {
    swift_release();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v3[60] = v6;
  v3[61] = v7;
  return Entity.accessibilityLabel.modify;
}

void Entity.accessibilityLabel.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (unsigned __int8 *)(*(void *)a1 + 320);
  uint64_t v4 = *(void *)(*(void *)a1 + 488);
  uint64_t v5 = *(void *)(*(void *)a1 + 480);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      uint64_t v7 = v2[54];
      uint64_t v6 = v2[55];
      uint64_t v8 = v2[53];
      outlined init with take of String?((uint64_t)(v2 + 51), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      uint64_t v9 = v2[49];
      uint64_t v10 = v2[50];
      uint64_t v11 = 256;
      if (!v3[65]) {
        uint64_t v11 = 0;
      }
      uint64_t v12 = v11 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      uint64_t v6 = MEMORY[0x263F8EE78];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v12 = 0;
    }
    v2[8] = v12;
    v2[9] = v9;
    v2[10] = v10;
    v2[11] = v5;
    v2[12] = v4;
    v2[13] = v8;
    v2[14] = v7;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      uint64_t v14 = v2[46];
      uint64_t v13 = v2[47];
      uint64_t v15 = v2[45];
      outlined init with take of String?((uint64_t)(v2 + 43), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      uint64_t v16 = v2[41];
      uint64_t v17 = v2[42];
      uint64_t v18 = 256;
      if (!v3[1]) {
        uint64_t v18 = 0;
      }
      uint64_t v19 = v18 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      uint64_t v13 = MEMORY[0x263F8EE78];
      v2[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      uint64_t v19 = 0;
    }
    v2[24] = v19;
    v2[25] = v16;
    v2[26] = v17;
    v2[27] = v5;
    v2[28] = v4;
    v2[29] = v15;
    v2[30] = v14;
    v2[31] = v13;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t Entity.accessibilityDescription.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

uint64_t key path getter for Entity.accessibilityDescription : Entity@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  uint64_t v2 = v17;
  if (v17)
  {
    uint64_t v4 = v15;
    uint64_t v3 = v16;
    uint64_t v6 = v13;
    uint64_t v5 = v14;
    uint64_t v8 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    uint64_t v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t Entity.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v18);
    swift_release();
    uint64_t v4 = v22;
    outlined init with take of String?((uint64_t)&v20 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    uint64_t v5 = v20;
    uint64_t v6 = *((void *)&v18 + 1);
    long long v7 = v19;
    uint64_t v8 = 256;
    if (!BYTE1(v18)) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 | v18;
  }
  else
  {
    swift_release();
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v21 = 0;
    uint64_t v22 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v7 = 0uLL;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
  v12[0] = v9;
  v12[1] = v6;
  long long v13 = v7;
  uint64_t v14 = v5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.__accessibilityDescription.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

uint64_t Entity.__accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v18);
    swift_release();
    uint64_t v4 = v22;
    outlined init with take of String?((uint64_t)&v20 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    uint64_t v5 = v20;
    uint64_t v6 = *((void *)&v18 + 1);
    long long v7 = v19;
    uint64_t v8 = 256;
    if (!BYTE1(v18)) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 | v18;
  }
  else
  {
    swift_release();
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v21 = 0;
    uint64_t v22 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v7 = 0uLL;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
  }
  v12[0] = v9;
  v12[1] = v6;
  long long v13 = v7;
  uint64_t v14 = v5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.accessibilityDescription.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x1F8uLL);
  *a1 = v3;
  v3[62] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    uint64_t v4 = *((unsigned __int8 *)v3 + 256);
    int v5 = *((unsigned __int8 *)v3 + 257);
    uint64_t v6 = v3[35];
    uint64_t v14 = v3[34];
    uint64_t v15 = v3[33];
    uint64_t v8 = v3[36];
    uint64_t v7 = v3[37];
    uint64_t v10 = v3[38];
    uint64_t v9 = v3[39];
    swift_release();
    uint64_t v11 = 256;
    if (!v5) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 | v4;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v12, v15, v14, v6, v8, v7, v10, v9);
  }
  else
  {
    swift_release();
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  v3[60] = v7;
  v3[61] = v10;
  return Entity.accessibilityDescription.modify;
}

void Entity.accessibilityDescription.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (unsigned __int8 *)(*(void *)a1 + 320);
  uint64_t v4 = *(void *)(*(void *)a1 + 488);
  uint64_t v5 = *(void *)(*(void *)a1 + 480);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      uint64_t v6 = v2[55];
      outlined init with take of String?((uint64_t)(v2 + 53), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      uint64_t v7 = v2[52];
      uint64_t v8 = v2[49];
      long long v9 = *((_OWORD *)v2 + 25);
      uint64_t v10 = 256;
      if (!v3[65]) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      uint64_t v6 = MEMORY[0x263F8EE78];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v9 = 0uLL;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v11 = 0;
    }
    v2[8] = v11;
    v2[9] = v8;
    *((_OWORD *)v2 + 5) = v9;
    v2[12] = v7;
    v2[13] = v5;
    v2[14] = v4;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      uint64_t v12 = v2[47];
      outlined init with take of String?((uint64_t)(v2 + 45), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      uint64_t v13 = v2[44];
      uint64_t v14 = v2[41];
      long long v15 = *((_OWORD *)v2 + 21);
      uint64_t v16 = 256;
      if (!v3[1]) {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v16 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      uint64_t v12 = MEMORY[0x263F8EE78];
      v2[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v15 = 0uLL;
      uint64_t v14 = 0;
      uint64_t v13 = 0;
      uint64_t v17 = 0;
    }
    v2[24] = v17;
    v2[25] = v14;
    *((_OWORD *)v2 + 13) = v15;
    v2[28] = v13;
    v2[29] = v5;
    v2[30] = v4;
    v2[31] = v12;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t Entity.__isAccessibilityRoot.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v11);
    uint64_t v0 = v11[0];
    int v1 = v11[1];
    uint64_t v2 = v12;
    uint64_t v3 = v13;
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    outlined consume of __AccessibilityComponent?(v9 | v0, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v0;
}

uint64_t key path getter for Entity.__isAccessibilityRoot : Entity@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v12);
  uint64_t v2 = v18;
  if (v18)
  {
    uint64_t v4 = v16;
    uint64_t v3 = v17;
    uint64_t v6 = v14;
    uint64_t v5 = v15;
    uint64_t v8 = *((void *)&v12 + 1);
    uint64_t v7 = v13;
    uint64_t v9 = v12;
    swift_release();
    char v10 = v9 & 1;
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    char v10 = 0;
  }
  *a1 = v10;
  return result;
}

uint64_t Entity.__isAccessibilityRoot.setter(char a1)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v14);
    swift_release();
    uint64_t v3 = v17;
    uint64_t v2 = v18;
    uint64_t v4 = *((void *)&v14 + 1);
    long long v5 = v15;
    long long v6 = v16;
    uint64_t v7 = 256;
    if (!BYTE1(v14)) {
      uint64_t v7 = 0;
    }
  }
  else
  {
    swift_release();
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    uint64_t v2 = MEMORY[0x263F8EE78];
    uint64_t v17 = 0;
    uint64_t v18 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v5 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    long long v6 = 0uLL;
  }
  v9[0] = v7 | a1 & 1;
  v9[1] = v4;
  long long v10 = v5;
  long long v11 = v6;
  uint64_t v12 = v3;
  uint64_t v13 = v2;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v9);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void (*Entity.__isAccessibilityRoot.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)malloc(0x1D0uLL);
  *a1 = v4;
  long long v5 = v4 + 456;
  *((void *)v4 + 56) = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 384));
    uint64_t v6 = v4[384];
    int v7 = v4[385];
    uint64_t v8 = *((void *)v4 + 51);
    uint64_t v15 = *((void *)v4 + 50);
    uint64_t v16 = *((void *)v4 + 49);
    uint64_t v9 = *((void *)v4 + 52);
    uint64_t v10 = *((void *)v4 + 53);
    uint64_t v12 = *((void *)v4 + 54);
    uint64_t v11 = *((void *)v4 + 55);
    swift_release();
    uint64_t v13 = 256;
    if (!v7) {
      uint64_t v13 = 0;
    }
    outlined consume of __AccessibilityComponent?(v13 | v6, v16, v15, v8, v9, v10, v12, v11);
  }
  else
  {
    swift_release();
    LOBYTE(v6) = 0;
  }
  *long long v5 = v6;
  return Entity.__isAccessibilityRoot.modify;
}

void Entity.__isAccessibilityRoot.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = (unsigned char *)(*(void *)a1 + 257);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)a1 + 456);
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  if (a2)
  {
    uint64_t v7 = (uint64_t)(v3 + 8);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
      swift_release();
      uint64_t v9 = v3[38];
      uint64_t v8 = v3[39];
      uint64_t v10 = v3[33];
      long long v11 = *((_OWORD *)v3 + 17);
      long long v12 = *((_OWORD *)v3 + 18);
      uint64_t v13 = 256;
      if (!*v4) {
        uint64_t v13 = 0;
      }
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      uint64_t v8 = MEMORY[0x263F8EE78];
      v3[6] = 0;
      v3[7] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v11 = 0uLL;
      uint64_t v13 = 0;
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      long long v12 = 0uLL;
    }
    v3[8] = v13 | v5;
    v3[9] = v10;
    *((_OWORD *)v3 + 5) = v11;
    *((_OWORD *)v3 + 6) = v12;
    v3[14] = v9;
    v3[15] = v8;
  }
  else
  {
    uint64_t v7 = (uint64_t)(v3 + 24);
    if (Component)
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 40));
      swift_release();
      uint64_t v15 = v3[46];
      uint64_t v14 = v3[47];
      uint64_t v16 = v3[41];
      long long v17 = *((_OWORD *)v3 + 21);
      long long v18 = *((_OWORD *)v3 + 22);
      uint64_t v19 = 256;
      if (!v4[64]) {
        uint64_t v19 = 0;
      }
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      uint64_t v14 = MEMORY[0x263F8EE78];
      v3[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v17 = 0uLL;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      uint64_t v15 = 0;
      long long v18 = 0uLL;
    }
    unsigned char v3[24] = v19 | v5;
    v3[25] = v16;
    *((_OWORD *)v3 + 13) = v17;
    *((_OWORD *)v3 + 14) = v18;
    v3[30] = v15;
    v3[31] = v14;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v7);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v3);
}

void (*Entity.__isAccessibilityEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)malloc(0x1D0uLL);
  *a1 = v4;
  uint64_t v5 = v4 + 456;
  *((void *)v4 + 56) = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 384));
    uint64_t v16 = v4[384];
    int v6 = v4[385];
    uint64_t v7 = *((void *)v4 + 50);
    uint64_t v15 = *((void *)v4 + 49);
    uint64_t v8 = *((void *)v4 + 51);
    uint64_t v9 = *((void *)v4 + 52);
    uint64_t v10 = *((void *)v4 + 53);
    uint64_t v11 = *((void *)v4 + 54);
    uint64_t v12 = *((void *)v4 + 55);
    swift_release();
    uint64_t v13 = 256;
    if (!v6) {
      uint64_t v13 = 0;
    }
    outlined consume of __AccessibilityComponent?(v13 | v16, v15, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    swift_release();
    LOBYTE(v6) = 0;
  }
  *uint64_t v5 = v6;
  return Entity.isAccessibilityElement.modify;
}

uint64_t Entity.__accessibilityIdentifier.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t key path getter for Entity.__accessibilityIdentifier : Entity@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  uint64_t v2 = v17;
  if (v17)
  {
    uint64_t v4 = v15;
    uint64_t v3 = v16;
    uint64_t v6 = v13;
    uint64_t v5 = v14;
    uint64_t v8 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    uint64_t v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

uint64_t Entity.__accessibilityIdentifier.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v16);
    swift_release();
    uint64_t v5 = v19;
    uint64_t v4 = v20;
    uint64_t v6 = *((void *)&v17 + 1);
    long long v10 = v18;
    outlined init with take of String?((uint64_t)&v16 + 8, (uint64_t)v11);
    outlined release of IKRig.Joint?((uint64_t)v11);
    uint64_t v7 = 256;
    if (!BYTE1(v16)) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 | v16;
  }
  else
  {
    swift_release();
    long long v17 = 0u;
    long long v18 = 0u;
    long long v10 = 0u;
    long long v16 = 0u;
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v19 = 0;
    uint64_t v20 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v16);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v8 = 0;
  }
  v12[0] = v8;
  v12[1] = a1;
  void v12[2] = a2;
  v12[3] = v6;
  long long v13 = v10;
  uint64_t v14 = v5;
  uint64_t v15 = v4;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v12);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.__accessibilityIdentifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x1F8uLL);
  *a1 = v3;
  v3[62] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    uint64_t v4 = *((unsigned __int8 *)v3 + 256);
    int v5 = *((unsigned __int8 *)v3 + 257);
    uint64_t v6 = v3[33];
    uint64_t v7 = v3[34];
    uint64_t v8 = v3[37];
    uint64_t v14 = v3[36];
    uint64_t v15 = v3[35];
    uint64_t v9 = v3[38];
    uint64_t v13 = v3[39];
    swift_release();
    uint64_t v10 = 256;
    if (!v5) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 | v4;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v11, v6, v7, v15, v14, v8, v9, v13);
  }
  else
  {
    swift_release();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v3[60] = v6;
  v3[61] = v7;
  return Entity.__accessibilityIdentifier.modify;
}

void Entity.__accessibilityIdentifier.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (unsigned __int8 *)(*(void *)a1 + 320);
  uint64_t v4 = *(void *)(*(void *)a1 + 488);
  uint64_t v5 = *(void *)(*(void *)a1 + 480);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v2 + 48));
      swift_release();
      uint64_t v7 = v2[54];
      uint64_t v6 = v2[55];
      uint64_t v8 = v2[51];
      long long v16 = *((_OWORD *)v2 + 26);
      outlined init with take of String?((uint64_t)(v2 + 49), (uint64_t)(v2 + 58));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 58));
      uint64_t v9 = 256;
      if (!v3[65]) {
        uint64_t v9 = 0;
      }
      uint64_t v10 = v9 | v3[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      long long v16 = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      uint64_t v6 = MEMORY[0x263F8EE78];
      v2[6] = 0;
      v2[7] = v6;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v10 = 0;
    }
    v2[8] = v10;
    v2[9] = v5;
    v2[10] = v4;
    v2[11] = v8;
    *((_OWORD *)v2 + 6) = v16;
    v2[14] = v7;
    v2[15] = v6;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v3);
      swift_release();
      uint64_t v12 = v2[46];
      uint64_t v11 = v2[47];
      uint64_t v13 = v2[43];
      long long v17 = *((_OWORD *)v2 + 22);
      outlined init with take of String?((uint64_t)(v2 + 41), (uint64_t)(v2 + 56));
      outlined release of IKRig.Joint?((uint64_t)(v2 + 56));
      uint64_t v14 = 256;
      if (!v3[1]) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 | *v3;
    }
    else
    {
      swift_release();
      v2[22] = 0;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      long long v17 = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      uint64_t v11 = MEMORY[0x263F8EE78];
      v2[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      uint64_t v15 = 0;
    }
    v2[24] = v15;
    v2[25] = v5;
    v2[26] = v4;
    v2[27] = v13;
    *((_OWORD *)v2 + 14) = v17;
    v2[30] = v12;
    v2[31] = v11;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v2 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  free(v2);
}

void (*Entity.__accessibilityLabel.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x1F8uLL);
  *a1 = v3;
  v3[62] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    uint64_t v4 = *((unsigned __int8 *)v3 + 256);
    int v5 = *((unsigned __int8 *)v3 + 257);
    uint64_t v6 = v3[35];
    uint64_t v14 = v3[34];
    uint64_t v15 = v3[33];
    uint64_t v7 = v3[36];
    uint64_t v8 = v3[37];
    uint64_t v10 = v3[38];
    uint64_t v9 = v3[39];
    swift_release();
    uint64_t v11 = 256;
    if (!v5) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 | v4;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v12, v15, v14, v6, v7, v8, v10, v9);
  }
  else
  {
    swift_release();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v3[60] = v6;
  v3[61] = v7;
  return Entity.accessibilityLabel.modify;
}

void (*Entity.__accessibilityDescription.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x1F8uLL);
  *a1 = v3;
  v3[62] = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 32));
    uint64_t v4 = *((unsigned __int8 *)v3 + 256);
    int v5 = *((unsigned __int8 *)v3 + 257);
    uint64_t v6 = v3[35];
    uint64_t v14 = v3[34];
    uint64_t v15 = v3[33];
    uint64_t v8 = v3[36];
    uint64_t v7 = v3[37];
    uint64_t v10 = v3[38];
    uint64_t v9 = v3[39];
    swift_release();
    uint64_t v11 = 256;
    if (!v5) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 | v4;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v12, v15, v14, v6, v8, v7, v10, v9);
  }
  else
  {
    swift_release();
    uint64_t v7 = 0;
    uint64_t v10 = 0;
  }
  v3[60] = v7;
  v3[61] = v10;
  return Entity.accessibilityDescription.modify;
}

uint64_t Entity.__accessibilityCustomContent.getter()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v12);
    uint64_t v0 = v12[0];
    int v1 = v12[1];
    uint64_t v2 = v13;
    uint64_t v3 = v14;
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    swift_release();
    uint64_t v9 = 256;
    if (!v1) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v9 | v0;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v10, v2, v3, v4, v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v8;
}

uint64_t key path getter for Entity.__accessibilityCustomContent : Entity@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(&v11);
  uint64_t v2 = v17;
  if (v17)
  {
    uint64_t v4 = v15;
    uint64_t v3 = v16;
    uint64_t v6 = v13;
    uint64_t v5 = v14;
    uint64_t v8 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    uint64_t v9 = v11;
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of __AccessibilityComponent?(v9, v8, v7, v6, v5, v4, v3, v2);
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  *a1 = v2;
  return result;
}

uint64_t Entity.__accessibilityCustomContent.setter(uint64_t a1)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)&v15);
    swift_release();
    uint64_t v9 = v19;
    outlined release of [String : String]((uint64_t)&v9);
    uint64_t v2 = v18;
    uint64_t v3 = *((void *)&v15 + 1);
    long long v4 = v16;
    long long v5 = v17;
    uint64_t v6 = 256;
    if (!BYTE1(v15)) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6 | v15;
  }
  else
  {
    swift_release();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    uint64_t v18 = 0;
    uint64_t v19 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v4 = 0uLL;
    uint64_t v3 = 0;
    uint64_t v2 = 0;
    uint64_t v7 = 0;
    long long v5 = 0uLL;
  }
  v10[0] = v7;
  v10[1] = v3;
  long long v11 = v4;
  long long v12 = v5;
  uint64_t v13 = v2;
  uint64_t v14 = a1;
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v10);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*Entity.__accessibilityCustomContent.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  long long v4 = malloc(0x1E0uLL);
  *a1 = v4;
  long long v5 = v4 + 58;
  v4[59] = v2;
  swift_retain();
  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)(v4 + 32));
    uint64_t v6 = *((unsigned __int8 *)v4 + 256);
    int v7 = *((unsigned __int8 *)v4 + 257);
    uint64_t v8 = v4[35];
    uint64_t v16 = v4[34];
    uint64_t v17 = v4[33];
    uint64_t v9 = v4[36];
    uint64_t v10 = v4[37];
    uint64_t v12 = v4[38];
    uint64_t v11 = v4[39];
    swift_release();
    uint64_t v13 = 256;
    if (!v7) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13 | v6;
    swift_bridgeObjectRetain();
    outlined consume of __AccessibilityComponent?(v14, v17, v16, v8, v9, v10, v12, v11);
  }
  else
  {
    swift_release();
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  *long long v5 = v11;
  return Entity.__accessibilityCustomContent.modify;
}

void Entity.__accessibilityCustomContent.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  long long v4 = (unsigned __int8 *)(*(void *)a1 + 320);
  uint64_t v5 = *(void *)(*(void *)a1 + 464);
  swift_retain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)(v3 + 48));
      swift_release();
      v3[57] = v3[55];
      outlined release of [String : String]((uint64_t)(v3 + 57));
      uint64_t v6 = v3[54];
      uint64_t v7 = v3[49];
      long long v8 = *((_OWORD *)v3 + 25);
      long long v9 = *((_OWORD *)v3 + 26);
      uint64_t v10 = 256;
      if (!v4[65]) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 | v4[64];
    }
    else
    {
      swift_release();
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      uint64_t v18 = MEMORY[0x263F8EE78];
      v3[6] = 0;
      v3[7] = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v8 = 0uLL;
      uint64_t v7 = 0;
      uint64_t v6 = 0;
      uint64_t v11 = 0;
      long long v9 = 0uLL;
    }
    v3[8] = v11;
    v3[9] = v7;
    *((_OWORD *)v3 + 5) = v8;
    *((_OWORD *)v3 + 6) = v9;
    v3[14] = v6;
    v3[15] = v5;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 8));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (REEntityGetComponent())
    {
      specialized __AccessibilityComponent.init(from:)((uint64_t)v4);
      swift_release();
      v3[56] = v3[47];
      outlined release of [String : String]((uint64_t)(v3 + 56));
      uint64_t v12 = v3[46];
      uint64_t v13 = v3[41];
      long long v14 = *((_OWORD *)v3 + 21);
      long long v15 = *((_OWORD *)v3 + 22);
      uint64_t v16 = 256;
      if (!v4[1]) {
        uint64_t v16 = 0;
      }
      uint64_t v17 = v16 | *v4;
    }
    else
    {
      swift_release();
      v3[22] = 0;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      v3[23] = MEMORY[0x263F8EE78];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 16));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_release();
      long long v14 = 0uLL;
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      uint64_t v17 = 0;
      long long v15 = 0uLL;
    }
    unsigned char v3[24] = v17;
    v3[25] = v13;
    *((_OWORD *)v3 + 13) = v14;
    *((_OWORD *)v3 + 14) = v15;
    v3[30] = v12;
    v3[31] = v5;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)(v3 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  free(v3);
}

uint64_t Entity._sendEvent<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = REEntityGetSceneNullable();
  if (result)
  {
    uint64_t v5 = result;
    id v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v5);
    }
    Scene.eventService.getter((uint64_t)v11);
    swift_release();
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    EventService.publish<A>(_:on:componentType:)(a1, (uint64_t)v9, 0, 0, v7, a2, v8);
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for EventSource?);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

uint64_t Entity.sendEvent(_:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(a1, v1);

  return Entity._sendEvent<A>(_:)((uint64_t)v2, v1);
}

uint64_t __AccessibilityComponent.__toCore(_:)()
{
  REAccessibilityComponentSetIsRoot();
  REAccessibilityComponentSetEnabled();
  outlined init with take of String?(v0 + 8, (uint64_t)v14);
  outlined init with take of String?((uint64_t)v14, (uint64_t)v15);
  if (v15[1]) {
    String.utf8CString.getter();
  }
  REAccessibilityComponentSetIdentifier();
  swift_unknownObjectRelease();
  outlined init with take of String?(v0 + 24, (uint64_t)v13);
  outlined init with take of String?((uint64_t)v13, (uint64_t)v16);
  if (v16[1]) {
    String.utf8CString.getter();
  }
  REAccessibilityComponentSetLabel();
  swift_unknownObjectRelease();
  outlined init with take of String?(v0 + 40, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)v17);
  if (v17[1]) {
    String.utf8CString.getter();
  }
  REAccessibilityComponentSetDescription();
  swift_unknownObjectRelease();
  REAccessibilityComponentClearCustomContent();
  uint64_t result = *(void *)(v0 + 56);
  uint64_t v11 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(swift_bridgeObjectRetain() + 64);
    while (1)
    {
      uint64_t v4 = *(v3 - 4);
      uint64_t v5 = *(v3 - 3);
      uint64_t v6 = *(v3 - 2);
      uint64_t v7 = *(v3 - 1);
      unint64_t v8 = *v3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v9 = (void *)MEMORY[0x22A688A50](v4, v5);
      swift_bridgeObjectRelease();
      uint64_t v10 = (void *)MEMORY[0x22A688A50](v6, v7);
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 >> 31) {
        break;
      }
      v3 += 5;
      REAccessibilityComponentAddCustomContent();

      if (!--v2) {
        return outlined release of [String : String]((uint64_t)&v11);
      }
    }
    __break(1u);
  }
  return result;
}

double protocol witness for static Component.__fromCore(_:) in conformance __AccessibilityComponent@<D0>(_OWORD *a1@<X8>)
{
  specialized __AccessibilityComponent.init(from:)((uint64_t)v5);
  long long v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  double result = *(double *)&v6;
  long long v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __AccessibilityComponent()
{
  return __AccessibilityComponent.__toCore(_:)();
}

void protocol witness for static Component.__coreComponentType.getter in conformance __AccessibilityComponent(_DWORD *a1@<X8>)
{
  *a1 = 69;
}

uint64_t LocalizedStringResource.init(stringRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.data(using:allowLossyConversion:)();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 >> 60 == 15)
  {
    uint64_t v13 = type metadata accessor for LocalizedStringResource();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v12 = type metadata accessor for LocalizedStringResource();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    outlined consume of Data?(v9, v11);
    uint64_t v14 = *(void *)(v12 - 8);
    long long v15 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);
    v15((uint64_t)v4, 0, 1, v12);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(a1, v4, v12);
    return v15(a1, 0, 1, v12);
  }
}

uint64_t AccessibilityComponent.CustomContent.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AccessibilityComponent.CustomContent.label.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AccessibilityComponent.CustomContent.label.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 20);
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AccessibilityComponent.CustomContent.value.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 20);
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AccessibilityComponent.CustomContent.value.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.importance.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AccessibilityComponent.CustomContent(0) + 24));
}

uint64_t AccessibilityComponent.CustomContent.importance.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccessibilityComponent.CustomContent(0);
  *(void *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.CustomContent.importance.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.CustomContent.init(label:value:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);
  v9(a4, a1, v8);
  uint64_t v10 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a4 + *(int *)(v10 + 20), a2, v8);
  *(void *)(a4 + *(int *)(v10 + 24)) = a3;
  return result;
}

BOOL static AccessibilityComponent.CustomContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x22A687C00]() & 1) != 0
    && (uint64_t v4 = type metadata accessor for AccessibilityComponent.CustomContent(0),
        (MEMORY[0x22A687C00](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0))
  {
    return *(void *)(a1 + *(int *)(v4 + 24)) == *(void *)(a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (MEMORY[0x22A687C00]() & 1) != 0
      && (MEMORY[0x22A687C00](a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
      && *(void *)(a1 + *(int *)(a3 + 24)) == *(void *)(a2 + *(int *)(a3 + 24));
}

uint64_t AccessibilityComponent.SupportedActions.rawValue.getter()
{
  return *(void *)v0;
}

RealityFoundation::AccessibilityComponent::SupportedActions __swiftcall AccessibilityComponent.SupportedActions.init(rawValue:)(RealityFoundation::AccessibilityComponent::SupportedActions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AccessibilityComponent.SupportedActions.activate.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityComponent.SupportedActions.increment.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityComponent.SupportedActions.decrement.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static AccessibilityComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return AccessibilityComponent.init(from:)(*a1, a2);
}

uint64_t AccessibilityComponent.init(from:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v202 = a1;
  uint64_t v3 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  uint64_t v200 = *(void *)(v3 - 8);
  unint64_t v201 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v192 = (uint64_t)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v185 = (char *)&v163 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v184 = (uint64_t)&v163 - v8;
  MEMORY[0x270FA5388](v9);
  __int16 v197 = (char *)&v163 - v10;
  MEMORY[0x270FA5388](v11);
  char v198 = (uint64_t *)((char *)&v163 - v12);
  uint64_t v207 = type metadata accessor for String.Encoding();
  uint64_t v176 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  v206 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  uint64_t v168 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v174 = (uint64_t)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  int v167 = (char *)&v163 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v166 = (uint64_t)&v163 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v19 - 8);
  __int16 v195 = (char *)&v163 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  char v196 = (char *)&v163 - v22;
  MEMORY[0x270FA5388](v23);
  char v175 = (char *)&v163 - v24;
  MEMORY[0x270FA5388](v25);
  int v189 = (char *)&v163 - v26;
  MEMORY[0x270FA5388](v27);
  char v199 = (uint64_t *)((char *)&v163 - v28);
  MEMORY[0x270FA5388](v29);
  int v194 = (char *)&v163 - v30;
  MEMORY[0x270FA5388](v31);
  char v33 = (char *)&v163 - v32;
  uint64_t v34 = type metadata accessor for LocalizedStringResource();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  __int16 v191 = (char *)&v163 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  int v181 = (char *)&v163 - v38;
  MEMORY[0x270FA5388](v39);
  char v180 = (char *)&v163 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v183 = (char *)&v163 - v42;
  MEMORY[0x270FA5388](v43);
  __int16 v182 = (char *)&v163 - v44;
  MEMORY[0x270FA5388](v45);
  float v165 = (char *)&v163 - v46;
  MEMORY[0x270FA5388](v47);
  float v164 = (char *)&v163 - v48;
  MEMORY[0x270FA5388](v49);
  unint64_t v186 = (char *)&v163 - v50;
  MEMORY[0x270FA5388](v51);
  uint64_t v193 = (char *)&v163 - v52;
  MEMORY[0x270FA5388](v53);
  char v188 = (char *)&v163 - v54;
  MEMORY[0x270FA5388](v55);
  uint64_t v57 = (char *)&v163 - v56;
  uint64_t v58 = (int *)type metadata accessor for AccessibilityComponent(0);
  uint64_t v59 = (uint64_t)&a2[v58[5]];
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
  v60(v59, 1, 1, v34);
  uint64_t v61 = (uint64_t)&a2[v58[6]];
  __int16 v203 = v60;
  uint64_t v204 = v35 + 56;
  v60(v61, 1, 1, v34);
  uint64_t v62 = v58[7];
  *(void *)&a2[v62] = 0;
  uint64_t v63 = MEMORY[0x263F8EE78];
  uint64_t v173 = v58[8];
  *(void *)&a2[v173] = MEMORY[0x263F8EE78];
  uint64_t v172 = v58[9];
  *(void *)&a2[v172] = v63;
  uint64_t v171 = v58[10];
  *(void *)&a2[v171] = 0;
  uint64_t v170 = v58[11];
  *(void *)&a2[v170] = v63;
  char IsEnabled = REAccessibilityComponentIsEnabled();
  uint64_t v187 = a2;
  *a2 = IsEnabled;
  uint64_t Label = REAccessibilityComponentGetLabel();
  uint64_t v190 = v35;
  if (Label)
  {
    String.init(cString:)();
    LocalizedStringResource.init(stringRepresentation:)((uint64_t)v33);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v33, &demangling cache variable for type metadata for LocalizedStringResource?);
      String.init(cString:)();
      uint64_t v66 = (uint64_t)v194;
      LocalizedStringResource.init(stringLiteral:)();
      v203(v66, 0, 1, v34);
      outlined assign with take of LocalizedStringResource?(v66, v59);
    }
    else
    {
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v67(v57, v33, v34);
      outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for LocalizedStringResource?);
      v67((char *)v59, v57, v34);
      uint64_t v35 = v190;
      v203(v59, 0, 1, v34);
    }
  }
  uint64_t v205 = v34;
  uint64_t Value = REAccessibilityComponentGetValue();
  uint64_t v69 = v187;
  uint64_t v70 = v189;
  if (Value)
  {
    String.init(cString:)();
    uint64_t v71 = v35;
    char v72 = v199;
    LocalizedStringResource.init(stringRepresentation:)((uint64_t)v199);
    uint64_t v73 = v205;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v71 + 48))(v72, 1, v205) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v199, &demangling cache variable for type metadata for LocalizedStringResource?);
      String.init(cString:)();
      uint64_t v74 = (uint64_t)v194;
      LocalizedStringResource.init(stringLiteral:)();
      v203(v74, 0, 1, v73);
      outlined assign with take of LocalizedStringResource?(v74, v61);
    }
    else
    {
      char v75 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      int v76 = v188;
      v75(v188, (char *)v199, v73);
      outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for LocalizedStringResource?);
      v75((char *)v61, v76, v73);
      v203(v61, 0, 1, v73);
    }
  }
  *(void *)&v69[v62] = REAccessibilityComponentGetTraits();
  uint64_t CustomContentCount = REAccessibilityComponentGetCustomContentCount();
  if (CustomContentCount < 0) {
    goto LABEL_62;
  }
  uint64_t v78 = (char *)CustomContentCount;
  if (CustomContentCount)
  {
    uint64_t v79 = 0;
    char v199 = (void *)(v176 + 8);
    char v188 = (char *)(v190 + 32);
    char v177 = (void (**)(char *, uint64_t))(v190 + 8);
    unint64_t v178 = MEMORY[0x263F8EE78];
    uint64_t v80 = (uint64_t)v197;
    int v194 = (char *)CustomContentCount;
    while (v78 != v79)
    {
      id v81 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      long long v82 = v206;
      static String.Encoding.utf8.getter();
      uint64_t v83 = String.data(using:allowLossyConversion:)();
      unint64_t v85 = v84;
      swift_bridgeObjectRelease();
      uint64_t v86 = (void (*)(char *, uint64_t))*v199;
      ((void (*)(char *, uint64_t))*v199)(v82, v207);
      if (v85 >> 60 != 15)
      {
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
        uint64_t v87 = v205;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        swift_release();
        outlined consume of Data?(v83, v85);
        v203((uint64_t)v70, 0, 1, v87);
        int v88 = *(void (**)(char *, char *, uint64_t))v188;
        char v89 = v186;
        (*(void (**)(char *, char *, uint64_t))v188)(v186, v70, v87);
        char v179 = v88;
        v88(v193, v89, v87);
        id v90 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        unsigned __int8 v91 = v206;
        static String.Encoding.utf8.getter();
        uint64_t v92 = String.data(using:allowLossyConversion:)();
        unint64_t v94 = v93;
        swift_bridgeObjectRelease();
        v86(v91, v207);
        if (v94 >> 60 == 15)
        {
          uint64_t v70 = v189;
          uint64_t v78 = v194;
          (*v177)(v193, v87);
          uint64_t v80 = (uint64_t)v197;
        }
        else
        {
          swift_allocObject();
          PropertyListDecoder.init()();
          uint64_t v95 = v175;
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          swift_release();
          outlined consume of Data?(v92, v94);
          v203((uint64_t)v95, 0, 1, v87);
          uint64_t v96 = v165;
          long long v97 = v179;
          v179(v165, v95, v87);
          long long v98 = v164;
          v97(v164, v96, v87);
          unsigned int CustomContentImportanceAtIndex = REAccessibilityComponentGetCustomContentImportanceAtIndex();
          uint64_t v78 = v194;
          if ((CustomContentImportanceAtIndex & 0x80000000) != 0) {
            goto LABEL_67;
          }
          uint64_t v100 = CustomContentImportanceAtIndex;
          uint64_t v101 = (uint64_t)v167;
          v97(v167, v193, v87);
          long long v102 = (void (*)(uint64_t, char *, uint64_t))v97;
          uint64_t v103 = v169;
          v102(v101 + *(int *)(v169 + 20), v98, v87);
          *(void *)(v101 + *(int *)(v103 + 24)) = v100;
          uint64_t v104 = v166;
          outlined init with take of AccessibilityComponent.RotorTypeInternal(v101, v166, type metadata accessor for AccessibilityComponent.CustomContent);
          outlined init with take of AccessibilityComponent.RotorTypeInternal(v104, v174, type metadata accessor for AccessibilityComponent.CustomContent);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v178 + 16) + 1, 1, v178);
          }
          uint64_t v80 = (uint64_t)v197;
          uint64_t v70 = v189;
          unint64_t v106 = *(void *)(v178 + 16);
          unint64_t v105 = *(void *)(v178 + 24);
          if (v106 >= v105 >> 1) {
            unint64_t v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, v178);
          }
          unint64_t v107 = v178;
          *(void *)(v178 + 16) = v106 + 1;
          outlined init with take of AccessibilityComponent.RotorTypeInternal(v174, v107+ ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80))+ *(void *)(v168 + 72) * v106, type metadata accessor for AccessibilityComponent.CustomContent);
        }
      }
      if (v78 == ++v79) {
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  unint64_t v178 = MEMORY[0x263F8EE78];
  uint64_t v80 = (uint64_t)v197;
LABEL_25:
  uint64_t v108 = v187;
  uint64_t v109 = v173;
  swift_bridgeObjectRelease();
  *(void *)&v108[v109] = v178;
  uint64_t SystemRotorsCount = REAccessibilityComponentGetSystemRotorsCount();
  if (SystemRotorsCount < 0) {
    goto LABEL_63;
  }
  uint64_t v111 = SystemRotorsCount;
  if (SystemRotorsCount)
  {
    uint64_t v112 = 0;
    unint64_t v113 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t SystemRotorAtIndex = REAccessibilityComponentGetSystemRotorAtIndex();
      if (SystemRotorAtIndex < 0) {
        break;
      }
      uint64_t v115 = (uint64_t)v198;
      *char v198 = SystemRotorAtIndex;
      swift_storeEnumTagMultiPayload();
      outlined init with take of AccessibilityComponent.RotorTypeInternal(v115, v80, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v113 + 16) + 1, 1, v113);
      }
      unint64_t v117 = *(void *)(v113 + 16);
      unint64_t v116 = *(void *)(v113 + 24);
      if (v117 >= v116 >> 1) {
        unint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1, v113);
      }
      ++v112;
      *(void *)(v113 + 16) = v117 + 1;
      outlined init with take of AccessibilityComponent.RotorTypeInternal(v80, v113+ ((*(unsigned __int8 *)(v200 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80))+ *(void *)(v200 + 72) * v117, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if (v111 == v112) {
        goto LABEL_36;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  unint64_t v113 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t CustomRotorsCount = REAccessibilityComponentGetCustomRotorsCount();
  if (CustomRotorsCount < 0) {
    goto LABEL_64;
  }
  long long v119 = (void *)CustomRotorsCount;
  if (CustomRotorsCount)
  {
    long long v120 = 0;
    long long v121 = (void (**)(char *, uint64_t))(v176 + 8);
    __int16 v197 = (char *)(v190 + 32);
    char v198 = (void *)CustomRotorsCount;
    char v199 = (void *)MEMORY[0x263F8EE78];
    do
    {
      CustomRotorAtIndex = (void *)REAccessibilityComponentGetCustomRotorAtIndex();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      long long v123 = v206;
      static String.Encoding.utf8.getter();
      uint64_t v124 = String.data(using:allowLossyConversion:)();
      unint64_t v126 = v125;
      swift_bridgeObjectRelease();
      (*v121)(v123, v207);
      if (v126 >> 60 != 15)
      {
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
        __int16 v127 = v196;
        uint64_t v128 = v205;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        swift_release();
        outlined consume of Data?(v124, v126);
        v203((uint64_t)v127, 0, 1, v128);
        char v129 = *(void (**)(char *, char *, uint64_t))v197;
        long long v130 = v183;
        (*(void (**)(char *, char *, uint64_t))v197)(v183, v127, v128);
        __int16 v131 = v182;
        v129(v182, v130, v128);
        char v132 = v185;
        v129(v185, v131, v128);
        swift_storeEnumTagMultiPayload();
        uint64_t v133 = (uint64_t)v132;
        uint64_t v134 = v184;
        outlined init with take of AccessibilityComponent.RotorTypeInternal(v133, v184, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
        outlined init with take of AccessibilityComponent.RotorTypeInternal(v134, v192, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v199 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v199[2] + 1, 1, (unint64_t)v199);
        }
        long long v119 = v198;
        unint64_t v136 = v199[2];
        unint64_t v135 = v199[3];
        if (v136 >= v135 >> 1) {
          char v199 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1, (unint64_t)v199);
        }
        uint64_t v138 = v199;
        uint64_t v137 = v200;
        v199[2] = v136 + 1;
        outlined init with take of AccessibilityComponent.RotorTypeInternal(v192, (uint64_t)v138+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(void *)(v137 + 72) * v136, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      }
      long long v120 = (void *)((char *)v120 + 1);
    }
    while (v119 != v120);
  }
  else
  {
    char v199 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v208 = v113;
  specialized Array.append<A>(contentsOf:)((uint64_t)v199);
  unint64_t v139 = v208;
  uint64_t v140 = v187;
  uint64_t v141 = v172;
  swift_bridgeObjectRelease();
  *(void *)&v140[v141] = v139;
  uint64_t SystemActions = REAccessibilityComponentGetSystemActions();
  if (SystemActions < 0) {
    goto LABEL_65;
  }
  *(void *)&v140[v171] = SystemActions;
  uint64_t CustomActionsCount = REAccessibilityComponentGetCustomActionsCount();
  if ((CustomActionsCount & 0x8000000000000000) == 0)
  {
    char v144 = (void *)CustomActionsCount;
    if (CustomActionsCount)
    {
      __n128 v145 = 0;
      unsigned __int32 v146 = (void (**)(char *, uint64_t))(v176 + 8);
      uint64_t v200 = v190 + 32;
      unint64_t v201 = MEMORY[0x263F8EE78];
      char v199 = (void *)CustomActionsCount;
      uint64_t v147 = v205;
      do
      {
        CustomActionAtIndex = (void *)REAccessibilityComponentGetCustomActionAtIndex();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        char v149 = v206;
        static String.Encoding.utf8.getter();
        uint64_t v150 = String.data(using:allowLossyConversion:)();
        unint64_t v152 = v151;
        swift_bridgeObjectRelease();
        (*v146)(v149, v207);
        if (v152 >> 60 != 15)
        {
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          PropertyListDecoder.init()();
          lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
          uint64_t v153 = v195;
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          swift_release();
          outlined consume of Data?(v150, v152);
          v203((uint64_t)v153, 0, 1, v147);
          int v154 = *(void (**)(char *, char *, uint64_t))v200;
          int v155 = v181;
          (*(void (**)(char *, char *, uint64_t))v200)(v181, v153, v147);
          int v156 = v180;
          v154(v180, v155, v147);
          v154(v191, v156, v147);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v201 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v201 + 16) + 1, 1, v201);
          }
          unint64_t v158 = *(void *)(v201 + 16);
          unint64_t v157 = *(void *)(v201 + 24);
          char v144 = v199;
          if (v158 >= v157 >> 1) {
            unint64_t v201 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v158 + 1, 1, v201);
          }
          unint64_t v159 = v201;
          *(void *)(v201 + 16) = v158 + 1;
          v154((char *)(v159+ ((*(unsigned __int8 *)(v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80))+ *(void *)(v190 + 72) * v158), v191, v205);
        }
        __n128 v145 = (void *)((char *)v145 + 1);
      }
      while (v144 != v145);
    }
    else
    {
      unint64_t v201 = MEMORY[0x263F8EE78];
    }
    char v160 = v187;
    uint64_t v161 = v170;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)&v160[v161] = v201;
    return result;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v98 = (char *)v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v94 = (char *)v83 - v7;
  uint64_t v93 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  uint64_t v84 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  id v90 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for AccessibilityComponent.CustomContent(0);
  uint64_t v92 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v10 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v95 = (char *)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v83 - v17;
  uint64_t v96 = *a1;
  REAccessibilityComponentSetEnabled();
  uint64_t v87 = type metadata accessor for AccessibilityComponent(0);
  uint64_t v88 = v1;
  outlined init with copy of LocalizedStringResource?(v1 + *(int *)(v87 + 20), (uint64_t)v18);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  int v20 = v19(v18, 1, v3);
  uint64_t v97 = v3;
  uint64_t v85 = v4;
  unsigned __int8 v91 = v10;
  if (v20 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for LocalizedStringResource?);
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
    uint64_t v21 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v23 = v22;
    static String.Encoding.utf8.getter();
    uint64_t v86 = String.init(data:encoding:)();
    uint64_t v25 = v24;
    outlined consume of Data._Representation(v21, v23);
    swift_release();
    uint64_t v4 = v85;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v18, v3);
    if (v25)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = v91;
  }
  REAccessibilityComponentSetLabel();
  swift_unknownObjectRelease();
  outlined init with copy of LocalizedStringResource?(v88 + *(int *)(v87 + 24), (uint64_t)v15);
  uint64_t v26 = v97;
  if (v19(v15, 1, v97) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for LocalizedStringResource?);
    uint64_t v27 = v26;
    uint64_t v29 = v87;
    uint64_t v28 = v88;
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
    uint64_t v27 = v26;
    uint64_t v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v32 = v31;
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    uint64_t v34 = v33;
    outlined consume of Data._Representation(v30, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v26);
    uint64_t v29 = v87;
    uint64_t v28 = v88;
    if (v34)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = v91;
  }
  REAccessibilityComponentSetValue();
  swift_unknownObjectRelease();
  REAccessibilityComponentClearCustomContent();
  uint64_t v35 = *(void *)(v28 + *(int *)(v29 + 32));
  uint64_t v36 = *(void *)(v35 + 16);
  if (v36)
  {
    uint64_t v37 = v35 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
    uint64_t v92 = *(void *)(v92 + 72);
    v83[1] = v35;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AccessibilityComponent.CustomContent(v37, (uint64_t)v10, type metadata accessor for AccessibilityComponent.CustomContent);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      dispatch thunk of PropertyListEncoder.outputFormat.setter();
      lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
      uint64_t v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v40 = v39;
      static String.Encoding.utf8.getter();
      uint64_t v41 = String.init(data:encoding:)();
      uint64_t v43 = v42;
      outlined consume of Data._Representation(v38, v40);
      swift_release();
      if (v43)
      {
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        uint64_t v27 = v97;
        uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v47 = v46;
        static String.Encoding.utf8.getter();
        uint64_t v86 = String.init(data:encoding:)();
        uint64_t v49 = v48;
        outlined consume of Data._Representation(v45, v47);
        swift_release();
        if (!v49)
        {
          uint64_t v44 = (uint64_t)v91;
          outlined destroy of AccessibilityComponent.CustomContent((uint64_t)v91, type metadata accessor for AccessibilityComponent.CustomContent);
          uint64_t v10 = (char *)v44;
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        unint64_t v50 = *(void *)&v91[*(int *)(v89 + 24)];
        uint64_t v51 = (void *)MEMORY[0x22A688A50](v41, v43);
        swift_bridgeObjectRelease();
        uint64_t v52 = (void *)MEMORY[0x22A688A50](v86, v49);
        swift_bridgeObjectRelease();
        if (v50 >> 31)
        {
          __break(1u);
          goto LABEL_44;
        }
        REAccessibilityComponentAddCustomContent();

        uint64_t v10 = v91;
      }
      else
      {
        uint64_t v27 = v97;
        uint64_t v10 = v91;
      }
      outlined destroy of AccessibilityComponent.CustomContent((uint64_t)v10, type metadata accessor for AccessibilityComponent.CustomContent);
LABEL_14:
      v37 += v92;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v85;
        break;
      }
    }
  }
  uint64_t v54 = (int *)v87;
  uint64_t v53 = v88;
  REAccessibilityComponentSetTraits();
  REAccessibilityComponentClearSystemRotors();
  REAccessibilityComponentClearCustomRotors();
  uint64_t v55 = *(void *)(v53 + v54[9]);
  uint64_t v56 = *(void *)(v55 + 16);
  if (v56)
  {
    uint64_t v57 = v55 + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
    uint64_t v58 = (void (**)(char *, void *, uint64_t))(v4 + 32);
    uint64_t v59 = *(void *)(v84 + 72);
    unsigned __int8 v91 = *(char **)(v53 + v54[9]);
    swift_bridgeObjectRetain();
    uint64_t v60 = v90;
    uint64_t v92 = v4 + 8;
    do
    {
      outlined init with copy of AccessibilityComponent.CustomContent(v57, (uint64_t)v60, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*v58)(v94, v60, v27);
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
        uint64_t v61 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v63 = v62;
        char v64 = v58;
        static String.Encoding.utf8.getter();
        uint64_t v65 = String.init(data:encoding:)();
        uint64_t v67 = v66;
        outlined consume of Data._Representation(v61, v63);
        swift_release();
        if (v67)
        {
          long long v68 = (void *)MEMORY[0x22A688A50](v65, v67);
          swift_bridgeObjectRelease();
          REAccessibilityComponentAddCustomRotor();
        }
        uint64_t v27 = v97;
        uint64_t v60 = v90;
        uint64_t v58 = v64;
        (*(void (**)(char *, uint64_t))v92)(v94, v97);
      }
      else
      {
        if ((*v60 & 0x8000000000000000) != 0) {
          goto LABEL_44;
        }
        REAccessibilityComponentAddSystemRotor();
      }
      v57 += v59;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease();
    uint64_t v4 = v85;
    uint64_t v54 = (int *)v87;
    uint64_t v53 = v88;
  }
  if ((*(void *)(v53 + v54[10]) & 0x8000000000000000) != 0)
  {
LABEL_44:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    REAccessibilityComponentSetSystemActions();
    REAccessibilityComponentClearCustomActions();
    uint64_t result = *(void *)(v53 + v54[11]);
    uint64_t v70 = *(void *)(result + 16);
    if (v70)
    {
      char v72 = *(char **)(v4 + 16);
      uint64_t v71 = v4 + 16;
      unint64_t v73 = result + ((*(unsigned __int8 *)(v71 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 64));
      uint64_t v93 = *(void *)(v71 + 56);
      unint64_t v94 = v72;
      uint64_t v74 = (void (**)(char *, uint64_t))(v71 - 8);
      uint64_t v92 = result;
      swift_bridgeObjectRetain();
      do
      {
        ((void (*)(char *, unint64_t, uint64_t))v94)(v98, v73, v27);
        type metadata accessor for PropertyListEncoder();
        swift_allocObject();
        PropertyListEncoder.init()();
        dispatch thunk of PropertyListEncoder.outputFormat.setter();
        lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(&lazy protocol witness table cache variable for type LocalizedStringResource and conformance LocalizedStringResource);
        uint64_t v75 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
        unint64_t v77 = v76;
        uint64_t v78 = v71;
        static String.Encoding.utf8.getter();
        uint64_t v79 = String.init(data:encoding:)();
        uint64_t v81 = v80;
        outlined consume of Data._Representation(v75, v77);
        swift_release();
        if (v81)
        {
          long long v82 = (void *)MEMORY[0x22A688A50](v79, v81);
          swift_bridgeObjectRelease();
          REAccessibilityComponentAddCustomAction();
        }
        uint64_t v27 = v97;
        uint64_t v71 = v78;
        (*v74)(v98, v97);
        v73 += v93;
        --v70;
      }
      while (v70);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void static AccessibilityComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 69;
}

uint64_t AccessibilityComponent.isAccessibilityElement.getter()
{
  return *v0;
}

uint64_t AccessibilityComponent.isAccessibilityElement.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*AccessibilityComponent.isAccessibilityElement.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 20);

  return outlined init with copy of LocalizedStringResource?(v3, a1);
}

uint64_t AccessibilityComponent.label.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 20);

  return outlined assign with take of LocalizedStringResource?(a1, v3);
}

uint64_t (*AccessibilityComponent.label.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 24);

  return outlined init with copy of LocalizedStringResource?(v3, a1);
}

uint64_t AccessibilityComponent.value.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 24);

  return outlined assign with take of LocalizedStringResource?(a1, v3);
}

uint64_t (*AccessibilityComponent.value.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.traitsRawValue.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AccessibilityComponent(0) + 28));
}

uint64_t AccessibilityComponent.traitsRawValue.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AccessibilityComponent(0);
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.traitsRawValue.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customContent.getter()
{
  type metadata accessor for AccessibilityComponent(0);

  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customContent.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customContent.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customRotorsRawValue.getter()
{
  type metadata accessor for AccessibilityComponent(0);

  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customRotorsRawValue.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customRotorsRawValue.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.systemActions.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for AccessibilityComponent(0);
  *a1 = *(void *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t AccessibilityComponent.systemActions.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for AccessibilityComponent(0);
  *(void *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*AccessibilityComponent.systemActions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.customActions.getter()
{
  type metadata accessor for AccessibilityComponent(0);

  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityComponent.customActions.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AccessibilityComponent(0) + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityComponent.customActions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AccessibilityComponent.init()@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = (int *)type metadata accessor for AccessibilityComponent(0);
  uint64_t v3 = &a1[v2[5]];
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v5)(&a1[v2[6]], 1, 1, v4);
  *(void *)&a1[v2[7]] = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)&a1[v2[8]] = MEMORY[0x263F8EE78];
  *(void *)&a1[v2[9]] = v7;
  *(void *)&a1[v2[10]] = 0;
  *(void *)&a1[v2[11]] = v7;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AccessibilityComponent@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return AccessibilityComponent.init(from:)(*a1, a2);
}

uint64_t specialized __AccessibilityComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t IsRoot = REAccessibilityComponentIsRoot();
  uint64_t IsEnabled = REAccessibilityComponentIsEnabled();
  if (REAccessibilityComponentGetIdentifier())
  {
    uint64_t v39 = String.init(cString:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v7 = 0;
  }
  swift_bridgeObjectRetain();
  if (REAccessibilityComponentGetLabel())
  {
    uint64_t v37 = String.init(cString:)();
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v36 = v8;
  swift_bridgeObjectRetain();
  uint64_t v38 = v7;
  if (REAccessibilityComponentGetDescription())
  {
    uint64_t v10 = String.init(cString:)();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v34 = v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = (NSString *)MEMORY[0x22A688A50](0x6D6F747375435841, 0xEF746E65746E6F43);
  Class v12 = NSClassFromString(v11);

  uint64_t v35 = v10;
  if (!v12)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(unsigned char *)a1 = IsRoot;
    *(unsigned char *)(a1 + 1) = IsEnabled;
    *(void *)(a1 + 8) = v39;
    *(void *)(a1 + 16) = v38;
    *(void *)(a1 + 24) = v37;
    *(void *)(a1 + 32) = v36;
    *(void *)(a1 + 40) = v35;
    *(void *)(a1 + 48) = v34;
    *(void *)(a1 + 56) = v15;
    return result;
  }
  int64_t CustomContentCount = REAccessibilityComponentGetCustomContentCount();
  if (CustomContentCount < 0) {
    goto LABEL_27;
  }
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (!CustomContentCount) {
    goto LABEL_18;
  }
  char v31 = IsEnabled;
  char v32 = IsRoot;
  uint64_t v33 = a1;
  uint64_t v41 = MEMORY[0x263F8EE78];
  unint64_t v40 = CustomContentCount;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, CustomContentCount, 0);
  uint64_t v15 = v41;
  id v16 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v1 = v17;

  id v18 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t IsEnabled = v19;

  int CustomContentImportanceAtIndex = REAccessibilityComponentGetCustomContentImportanceAtIndex();
  if ((CustomContentImportanceAtIndex & 0x80000000) == 0)
  {
    LODWORD(a1) = CustomContentImportanceAtIndex;
    unint64_t IsRoot = *(void *)(v41 + 16);
    unint64_t v14 = *(void *)(v41 + 24);
    uint64_t v11 = (NSString *)(IsRoot + 1);
    if (IsRoot >= v14 >> 1) {
      goto LABEL_28;
    }
    while (1)
    {
      *(void *)(v15 + 16) = v11;
      uint64_t v21 = (void *)(v15 + 40 * IsRoot);
      void v21[4] = v10;
      v21[5] = v1;
      v21[6] = v2;
      v21[7] = IsEnabled;
      void v21[8] = a1;
      unint64_t v14 = v40;
      if (v40 == 1) {
        break;
      }
      uint64_t IsEnabled = 1;
      while (v14 != IsEnabled)
      {
        id v23 = (id)REAccessibilityComponentGetCustomContentLabelAtIndex();
        uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v2 = v24;

        id v25 = (id)REAccessibilityComponentGetCustomContentValueAtIndex();
        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v26;

        unsigned int v27 = REAccessibilityComponentGetCustomContentImportanceAtIndex();
        if ((v27 & 0x80000000) != 0) {
          goto LABEL_29;
        }
        unsigned int v28 = v27;
        uint64_t v41 = v15;
        unint64_t IsRoot = *(void *)(v15 + 16);
        unint64_t v29 = *(void *)(v15 + 24);
        uint64_t v11 = (NSString *)(IsRoot + 1);
        if (IsRoot >= v29 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, IsRoot + 1, 1);
        }
        ++IsEnabled;
        *(void *)(v15 + 16) = v11;
        uint64_t v30 = (void *)(v15 + 40 * IsRoot);
        v30[4] = v1;
        v30[5] = v2;
        v30[6] = a1;
        v30[7] = v10;
        v30[8] = v28;
        unint64_t v14 = v40;
        if (v40 == IsEnabled) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, (int64_t)v11, 1);
      uint64_t v15 = v41;
    }
LABEL_16:
    a1 = v33;
    LOBYTE(IsEnabled) = v31;
    LOBYTE(IsRoot) = v32;
    goto LABEL_18;
  }
LABEL_29:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityComponent.RotorTypeInternal.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessibilityComponent.RotorTypeInternal(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Class v12 = (uint64_t *)((char *)&v22 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AccessibilityComponent.RotorTypeInternal, AccessibilityComponent.RotorTypeInternal));
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = &v15[*(int *)(v16 + 56)];
  outlined init with copy of AccessibilityComponent.CustomContent(a1, (uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  outlined init with copy of AccessibilityComponent.CustomContent(a2, (uint64_t)v17, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AccessibilityComponent.CustomContent((uint64_t)v15, (uint64_t)v12, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v19 = *v12 == *(void *)v17;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for (AccessibilityComponent.RotorTypeInternal, AccessibilityComponent.RotorTypeInternal));
    char v19 = 0;
    return v19 & 1;
  }
  outlined init with copy of AccessibilityComponent.CustomContent((uint64_t)v15, (uint64_t)v9, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v23);
    goto LABEL_8;
  }
  uint64_t v18 = v23;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v23);
  char v19 = MEMORY[0x22A687C00](v9, v6);
  int v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v20(v6, v18);
  v20(v9, v18);
LABEL_6:
  outlined destroy of AccessibilityComponent.CustomContent((uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
  return v19 & 1;
}

uint64_t type metadata accessor for AccessibilityComponent.CustomContent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.CustomContent);
}

uint64_t type metadata accessor for AccessibilityComponent.RotorTypeInternal(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.RotorTypeInternal);
}

uint64_t type metadata accessor for AccessibilityComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent);
}

uint64_t outlined init with copy of LocalizedStringResource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of LocalizedStringResource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

uint64_t sub_2281BBF04(char *a1)
{
  return Entity.isAccessibilityElement.setter(*a1);
}

uint64_t sub_2281BBF30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, Entity.accessibilityLabel.setter);
}

uint64_t sub_2281BBF4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, Entity.accessibilityDescription.setter);
}

uint64_t sub_2281BBF68(char *a1)
{
  return Entity.__isAccessibilityRoot.setter(*a1);
}

uint64_t sub_2281BBF94(char *a1)
{
  return Entity.__isAccessibilityEnabled.setter(*a1);
}

uint64_t sub_2281BBFC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, Entity.__accessibilityIdentifier.setter);
}

uint64_t sub_2281BBFDC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, Entity.__accessibilityLabel.setter);
}

uint64_t sub_2281BBFF8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, Entity.__accessibilityDescription.setter);
}

uint64_t keypath_set_10Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t sub_2281BC05C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return Entity.__accessibilityCustomContent.setter(v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for LocalizedStringResource();
    uint64_t v11 = *(void *)(v10 - 8);
    Class v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    uint64_t v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v20 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for AccessibilityComponent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for AccessibilityComponent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for AccessibilityComponent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  return a1;
}

unsigned char *assignWithTake for AccessibilityComponent(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2281BCE04);
}

uint64_t sub_2281BCE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2281BCEE0);
}

uint64_t sub_2281BCEE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for AccessibilityComponent()
{
  type metadata accessor for LocalizedStringResource?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for LocalizedStringResource?()
{
  if (!lazy cache variable for type metadata for LocalizedStringResource?)
  {
    type metadata accessor for LocalizedStringResource();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocalizedStringResource?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.CustomContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t initializeWithCopy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2281BD4F0);
}

uint64_t sub_2281BD4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent.CustomContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2281BD570);
}

uint64_t sub_2281BD570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AccessibilityComponent.CustomContent()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.RotorTypeInternal(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.RotorTypeInternal(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for LocalizedStringResource();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.CustomContent((uint64_t)a1, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of AccessibilityComponent.CustomContent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityComponent.RotorTypeInternal(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.CustomContent((uint64_t)a1, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AccessibilityComponent.RotorTypeInternal()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityComponent.SupportedActions()
{
  return &type metadata for AccessibilityComponent.SupportedActions;
}

uint64_t destroy for __AccessibilityComponent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __AccessibilityComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __AccessibilityComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __AccessibilityComponent()
{
  return &type metadata for __AccessibilityComponent;
}

uint64_t lazy protocol witness table accessor for type LocalizedStringResource and conformance LocalizedStringResource(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LocalizedStringResource();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of AccessibilityComponent.RotorTypeInternal(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void static AudioResource.Calibration.relative(dBSPL:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

void static AudioResource.Calibration.absolute(dBSPL:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
}

void AudioResource.Calibration.Kind.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = a2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(v3);
}

Swift::Int AudioResource.Calibration.Kind.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Hasher.init(_seed:)();
  if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = a1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Calibration.Kind(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) != 0 && v2 == v3) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 8) & 1) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioResource.Calibration.Kind()
{
  return AudioResource.Calibration.Kind.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Calibration.Kind(uint64_t a1)
{
  AudioResource.Calibration.Kind.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Calibration.Kind()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static AudioResource.Calibration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) != 0 && v2 == v3) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 8) & 1) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

void AudioResource.Calibration.hash(into:)()
{
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  Hasher._combine(_:)(v1);
}

Swift::Int AudioResource.Calibration.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Calibration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 8))
  {
    return 0;
  }
  return *(double *)a1 == *(double *)a2;
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Calibration()
{
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  Hasher._combine(_:)(v1);
}

unint64_t lazy protocol witness table accessor for type AudioResource.Calibration and conformance AudioResource.Calibration()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration;
  if (!lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Calibration and conformance AudioResource.Calibration);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Calibration()
{
  return &type metadata for AudioResource.Calibration;
}

void *type metadata accessor for AudioResource.Calibration.Kind()
{
  return &unk_26DCB2F78;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind;
  if (!lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Calibration.Kind and conformance AudioResource.Calibration.Kind);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

BOOL static ShaderGraphMaterial.LoadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ShaderGraphMaterial.LoadError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ShaderGraphMaterial.LoadError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ShaderGraphMaterial.LoadError()
{
  return MEMORY[0x270EEE940]();
}

uint64_t ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:), 0, 0);
}

uint64_t ShaderGraphMaterial.init(named:from:)()
{
  Swift::UInt v1 = v0;
  uint64_t v22 = v0 + 2;
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  unint64_t v4 = v0[16];
  uint64_t v21 = v0[17];
  uint64_t v7 = v0 + 14;
  uint64_t v5 = v0[14];
  uint64_t v6 = v7[1];
  uint64_t v8 = v1[13];
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v8;
  void v9[3] = v5;
  v9[4] = v6;
  void v9[5] = v4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in ShaderGraphMaterial.init(named:from:);
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  uint64_t v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)(v13 + 16) = v14;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_WORD *)(v13 + 88) = -256;
  *(void *)(v12 + 16) = v13;
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = _ss6ResultOy17RealityFoundation19ShaderGraphMaterialVs5Error_pGIeghn_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA;
  void v15[3] = v10;
  void v15[4] = v13;
  v15[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  outlined copy of Data._Representation(v6, v4);
  swift_retain();
  *(void *)(v12 + 24) = Future.init(_:)();
  uint64_t v16 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  v1[23] = v16;
  swift_release();
  v1[11] = v16;
  uint64_t v17 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  swift_retain();
  MEMORY[0x22A6886D0](v1 + 11, v11, v17);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v21);
  int v18 = (void *)swift_task_alloc();
  v1[24] = v18;
  *int v18 = v1;
  v18[1] = ShaderGraphMaterial.init(named:from:);
  uint64_t v19 = v1[20];
  return MEMORY[0x270EE3CD0](v22, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:);
  }
  else {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 176) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  Swift::UInt v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  swift_release();
  v0[23] = static ShaderGraphMaterial.loadAsync(named:from:)(v3, v1, v2);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[17];
  Swift::UInt v1 = v0[18];
  uint64_t v3 = v0[16];
  v0[11] = v0[23];
  swift_retain();
  unint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  MEMORY[0x22A6886D0](v0 + 11, v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = ShaderGraphMaterial.init(named:from:);
  uint64_t v7 = v0[19];
  return MEMORY[0x270EE3CD0](v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:);
  }
  else {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  Swift::UInt v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  unint64_t v4 = *(void *)(v0 + 120);
  if (v1)
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v17 = *(unsigned char *)(v0 + 80);
    uint64_t v6 = *(_DWORD *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v14 = *(_OWORD *)(v0 + 40);
    uint64_t v7 = *(unsigned char *)(v0 + 32);
    uint64_t v8 = *(void *)(v0 + 24);
    (*(void (**)(uint64_t, void))(v3 + 8))(v2, *(void *)(v0 + 152));
    swift_release();
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v4, v9);
    *(void *)uint64_t v5 = v1;
    *(void *)(v5 + 8) = v8;
    *(unsigned char *)(v5 + 16) = v7 & 1;
    *(_OWORD *)(v5 + 24) = v14;
    *(void *)(v5 + 40) = v15;
    *(unsigned char *)(v5 + 48) = v6 & 1;
    *(unsigned char *)(v5 + 49) = BYTE1(v6) & 1;
    *(void *)(v5 + 56) = v16;
    *(unsigned char *)(v5 + 64) = v17 & 1;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 152);
    type metadata accessor for CancellationError();
    _sS2cEs5ErrorsWlTm_0(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v11);
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v4, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[20];
  Swift::UInt v1 = v0[21];
  uint64_t v3 = v0[19];
  unint64_t v4 = v0[15];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void closure #1 in ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  void aBlock[3] = &block_descriptor_169_0;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  String.utf8CString.getter();
  RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync();
  swift_release();
  _Block_release(v6);
  swift_release();
}

uint64_t sub_2281BEAC8()
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2)
{
}

void ShaderGraphMaterial.AsyncDestination.completion(_:_:)(void *a1, void *a2, void (*a3)(void **))
{
  if (a1)
  {
    *(void *)&long long v19 = MEMORY[0x263F8DD08];
    uint64_t v17 = a1;
    outlined init with copy of Any((uint64_t)&v17, (uint64_t)v16);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed())
      {
        __break(1u);
        return;
      }
      uint64_t v7 = specialized static Entity.entityInfoType(_:)();
      if (v7)
      {
        uint64_t v8 = (*(uint64_t (**)(void))(v7 + 232))();
        uint64_t v9 = *(void *)(v8 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v9, 0);
        *(void *)(v8 + 16) = v15;
        MEMORY[0x22A68E750](v15, v8);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v15);
      }
    }
    static ShaderGraphMaterial.unpackModelEntity(_:)((uint64_t)&v17);
    uint64_t v10 = (void *)*((void *)&v19 + 1);
    uint64_t v11 = 256;
    if (!v20[9]) {
      uint64_t v11 = 0;
    }
    *((void *)&v18 + 1) = BYTE8(v18);
    *(void *)&v20[8] = v11 | v20[8];
    char v21 = 0;
    swift_bridgeObjectRetain();
    id v12 = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    a3(&v17);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  else
  {
    if (a2)
    {
      type metadata accessor for CFErrorRef(0);
      _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v5 = (void *)swift_allocError();
      *uint64_t v6 = a2;
    }
    else
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
      uint64_t v5 = (void *)swift_allocError();
      *uint64_t v13 = 4;
    }
    uint64_t v17 = v5;
    long long v18 = 0u;
    long long v19 = 0u;
    memset(v20, 0, sizeof(v20));
    char v21 = 1;
    id v14 = a2;
    a3(&v17);
  }
}

uint64_t _ss6ResultOy17RealityFoundation19ShaderGraphMaterialVs5Error_pGIeghn_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ShaderGraphMaterial.init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a3;
  v6[15] = a4;
  v6[12] = a1;
  v6[13] = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v6[21] = v8;
  v6[22] = *(void *)(v8 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:in:), 0, 0);
}

uint64_t ShaderGraphMaterial.init(named:from:in:)()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:in:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[13];
  swift_release();
  v0[25] = static ShaderGraphMaterial.loadAsync(named:from:in:)(v5, v4, v3, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:in:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  v0[11] = v0[25];
  swift_retain();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  MEMORY[0x22A6886D0](v0 + 11, v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[26] = v6;
  *uint64_t v6 = v0;
  v6[1] = ShaderGraphMaterial.init(named:from:in:);
  uint64_t v7 = v0[21];
  return MEMORY[0x270EE3CD0](v0 + 2, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:in:);
  }
  else {
    uint64_t v2 = ShaderGraphMaterial.init(named:from:in:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  void *v13;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  if (v1)
  {
    uint64_t v5 = *(void **)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 96);
    long long v18 = *(unsigned char *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 184);
    uint64_t v9 = *(_DWORD *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v15 = *(_OWORD *)(v0 + 40);
    uint64_t v10 = *(unsigned char *)(v0 + 32);
    uint64_t v11 = *(void *)(v0 + 24);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v7);
    *(void *)uint64_t v6 = v1;
    *(void *)(v6 + 8) = v11;
    *(unsigned char *)(v6 + 16) = v10 & 1;
    *(_OWORD *)(v6 + 24) = v15;
    *(void *)(v6 + 40) = v16;
    *(unsigned char *)(v6 + 48) = v9 & 1;
    *(unsigned char *)(v6 + 49) = BYTE1(v9) & 1;
    *(void *)(v6 + 56) = v17;
    *(unsigned char *)(v6 + 64) = v18 & 1;
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 136);
    type metadata accessor for CancellationError();
    _sS2cEs5ErrorsWlTm_0(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = (void *)v0[17];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5) {
    id v10 = a5;
  }
  else {
    id v10 = objc_msgSend(self, sel_mainBundle);
  }
  id v11 = a5;
  uint64_t v12 = specialized static __ServiceLocator.shared.getter();
  uint64_t v13 = *(void **)(*(void *)(v12 + 168) + 16);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v12 + 24);
  swift_unownedRetainStrong();
  uint64_t v15 = *(void **)(v14 + 32);
  swift_retain();
  id v16 = v13;
  id v17 = v15;
  swift_release();
  long long v18 = (void *)swift_allocObject();
  v18[2] = v16;
  void v18[3] = a3;
  v18[4] = a4;
  float32x4_t v18[5] = v10;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  uint64_t v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(void *)(v20 + 16) = v21;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_WORD *)(v20 + 88) = -256;
  *(void *)(v19 + 16) = v20;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:);
  void v22[3] = v18;
  v22[4] = v20;
  v22[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  id v23 = v16;
  id v24 = v17;
  swift_bridgeObjectRetain();
  id v25 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)(v19 + 24) = Future.init(_:)();
  uint64_t v26 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

  swift_release();
  swift_release();
  return v26;
}

uint64_t ShaderGraphMaterial.init(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(named:from:), 0, 0);
}

uint64_t static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = specialized static __ServiceLocator.shared.getter();
  uint64_t v9 = *(void **)(*(void *)(v8 + 168) + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 24);
  swift_unownedRetainStrong();
  id v11 = *(void **)(v10 + 32);
  swift_retain();
  id v12 = v9;
  id v13 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v16 + v14, v7, v4);
  id v17 = (void *)(v16 + v15);
  uint64_t v18 = v29;
  *id v17 = v28;
  v17[1] = v18;
  *(void *)(v16 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  uint64_t v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(void *)(v20 + 16) = v21;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_WORD *)(v20 + 88) = -256;
  *(void *)(v19 + 16) = v20;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
  void v22[3] = v16;
  v22[4] = v20;
  v22[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  id v23 = v12;
  id v24 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)(v19 + 24) = Future.init(_:)();
  uint64_t v25 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();

  swift_release();
  return v25;
}

uint64_t ShaderGraphMaterial.init(materialXLabel:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>);
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ShaderGraphMaterial>>.Iterator);
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](ShaderGraphMaterial.init(materialXLabel:data:), 0, 0);
}

uint64_t ShaderGraphMaterial.init(materialXLabel:data:)()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = specialized static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(v0[13], v0[14], v0[15], v0[16]);
  v0[23] = v4;
  swift_bridgeObjectRelease();
  v0[11] = v4;
  swift_retain();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  MEMORY[0x22A6886D0](v0 + 11, v5, v6);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[24] = v7;
  *uint64_t v7 = v0;
  v7[1] = ShaderGraphMaterial.init(materialXLabel:data:);
  uint64_t v8 = v0[20];
  return MEMORY[0x270EE3CD0](v0 + 2, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ShaderGraphMaterial.init(materialXLabel:data:);
  }
  else {
    uint64_t v2 = ShaderGraphMaterial.init(materialXLabel:data:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  char v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 128);
  if (v1)
  {
    uint64_t v7 = *(void *)(v0 + 96);
    id v17 = *(unsigned char *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v9 = *(_DWORD *)(v0 + 64);
    unint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = *(void *)(v0 + 72);
    unint64_t v14 = *(_OWORD *)(v0 + 40);
    id v13 = *(unsigned char *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 24);
    swift_release();
    outlined consume of Data._Representation(v6, v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
    *(void *)uint64_t v7 = v1;
    *(void *)(v7 + 8) = v10;
    *(unsigned char *)(v7 + 16) = v13 & 1;
    *(_OWORD *)(v7 + 24) = v14;
    *(void *)(v7 + 40) = v15;
    *(unsigned char *)(v7 + 48) = v9 & 1;
    *(unsigned char *)(v7 + 49) = BYTE1(v9) & 1;
    *(void *)(v7 + 56) = v16;
    *(unsigned char *)(v7 + 64) = v17 & 1;
  }
  else
  {
    type metadata accessor for CancellationError();
    _sS2cEs5ErrorsWlTm_0(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    outlined consume of Data._Representation(v6, v5);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  outlined consume of Data._Representation(v0[15], v0[16]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v27 = a7;
  uint64_t v31 = a3;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v18 - 8);
  uint64_t v29 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a4;
  void v21[3] = a5;
  uint64_t v22 = v27;
  void v21[4] = a6;
  v21[5] = v22;
  v21[6] = a8;
  v21[7] = a1;
  void v21[8] = a2;
  v21[9] = a9;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_120;
  id v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v24 = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  id v25 = a9;
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x263F8EE78];
  _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v20, v17, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = a8;
  uint64_t v77 = a6;
  uint64_t v78 = a7;
  uint64_t v75 = a4;
  unint64_t v76 = a5;
  uint64_t v66 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  unint64_t v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchQoS();
  uint64_t v62 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v61 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String)?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v71 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  uint64_t v69 = *(void *)(v15 - 8);
  uint64_t v70 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v60 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v72 = (uint64_t)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v59 - v20;
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v59 - v23;
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  long long v68 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  unint64_t v73 = (char *)&v59 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v59 - v31;
  type metadata accessor for LoadUtilities();
  if (one-time initialization token for usdExtensions != -1) {
    swift_once();
  }
  static LoadUtilities.getURL(name:in:allowingExtensions:)(a1, a2, a3, (void *)static LoadUtilities.usdExtensions, v24);
  uint64_t v74 = a2;
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v33((uint64_t)v24, 1, v25) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for URL?);
    static LoadUtilities.getURL(name:in:typeExtension:)(a1, v74, a3, 2020373613, 0xE400000000000000, (uint64_t)v21);
    uint64_t v34 = v25;
    if (v33((uint64_t)v21, 1, v25) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for URL?);
      uint64_t v35 = v72;
      static LoadUtilities.getURL(name:in:typeExtension:)(a1, v74, a3, 0x7974696C616572, 0xE700000000000000, v72);
      if (v33(v35, 1, v34) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for URL?);
        uint64_t v36 = v71;
        static LoadUtilities.getURLForRealityFile(withScene:in:)(a1, v74, a3, v71);
        uint64_t v37 = v70;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v36, 1, v70) == 1)
        {
          outlined destroy of BodyTrackingComponent?(v36, &demangling cache variable for type metadata for (URL, String)?);
          uint64_t v38 = swift_allocObject();
          uint64_t v39 = v78;
          *(void *)(v38 + 16) = v77;
          *(void *)(v38 + 24) = v39;
          uint64_t v84 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
          uint64_t v85 = v38;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v81 = 1107296256;
          long long v82 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          uint64_t v83 = &block_descriptor_126_0;
          unint64_t v40 = _Block_copy(&aBlock);
          swift_retain();
          uint64_t v41 = v61;
          static DispatchQoS.unspecified.getter();
          uint64_t v79 = MEMORY[0x263F8EE78];
          _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          uint64_t v42 = v63;
          uint64_t v43 = v66;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          MEMORY[0x22A689420](0, v41, v42, v40);
          _Block_release(v40);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v43);
          (*(void (**)(char *, uint64_t))(v62 + 8))(v41, v64);
          return swift_release();
        }
        else
        {
          uint64_t v53 = *(int *)(v37 + 48);
          uint64_t v54 = (uint64_t)v60;
          uint64_t v55 = (uint64_t *)&v60[v53];
          uint64_t v56 = (uint64_t *)(v36 + v53);
          (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v60, v36, v34);
          uint64_t v57 = *v56;
          uint64_t v58 = v56[1];
          uint64_t *v55 = v57;
          v55[1] = v58;
          swift_bridgeObjectRetain();
          static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:)(v57, v58, v75, v76, v54, v77, v78);
          swift_bridgeObjectRelease();
          return outlined destroy of BodyTrackingComponent?(v54, &demangling cache variable for type metadata for (URL, String));
        }
      }
      else
      {
        uint64_t v52 = (uint64_t)v68;
        (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v68, v35, v34);
        static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(v75, (uint64_t)v76, v52, v77, v78);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v52, v34);
      }
    }
    else
    {
      uint64_t v45 = v73;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v73, v21, v25);
      uint64_t v46 = v78;
      swift_retain();
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      swift_unownedRetainStrong();
      swift_release();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = v77;
      *(void *)(v50 + 24) = v46;
      uint64_t v84 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
      uint64_t v85 = v50;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v81 = 1107296256;
      long long v82 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
      uint64_t v83 = &block_descriptor_133;
      uint64_t v51 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      String.utf8CString.getter();
      RIOEntityUsingMaterialCreateFromMtlxURLAsync();
      swift_release();
      _Block_release(v51);
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v45, v25);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v32, v24, v25);
    static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v75, (uint64_t)v76, (uint64_t)v32, v77, v78);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v32, v25);
  }
}

void static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 24);
  swift_unownedRetainStrong();
  uint64_t v12 = *(void **)(v11 + 32);
  swift_retain();
  id v13 = v12;
  swift_release();
  uint64_t v14 = (void *)specialized static ShaderGraphMaterial.createInMemoryMaterialLoadingImportSession(primPath:url:)(a1, a2);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  void v15[3] = v13;
  void v15[4] = a4;
  v15[5] = a5;
  aBlock[4] = partial apply for closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_95;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v13;
  id v18 = v14;
  swift_retain();
  swift_release();
  RIOImportSessionSetSceneUpdatePassCompletion();
  _Block_release(v16);
  RIOImportSessionUpdate();

  swift_release();
}

void static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a5;
  uint64_t v57 = a4;
  uint64_t v55 = a2;
  uint64_t v54 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v58 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (void *)((char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)&aBlock);
  uint64_t v15 = v68;
  uint64_t v14 = v69;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v68);
  uint64_t v16 = (uint64_t (*)(void *, void (*)()))*((void *)v14 + 4);
  swift_retain();
  uint64_t v17 = v16(v15, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v13 + 24);
  swift_unownedRetainStrong();
  id v19 = *(id *)(v18 + 32);
  swift_release();
  uint64_t v20 = *(void **)(*(void *)(v13 + 168) + 16);
  *uint64_t v12 = v20;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8F0E0], v9);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v56;
    *(void *)(v29 + 16) = v57;
    *(void *)(v29 + 24) = v30;
    uint64_t v69 = (void (*)())partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    uint64_t v70 = (void *)v29;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v66 = 1107296256;
    uint64_t v31 = &block_descriptor_65_0;
LABEL_9:
    uint64_t v67 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    long long v68 = v31;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v35 = v21;
    uint64_t v36 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v64 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v37 = v58;
    uint64_t v38 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v36, v37, v34);
    swift_release();
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v63);
    swift_release();
    return;
  }
  URL._bridgeToObjectiveC()(v22);
  id v24 = v23;
  uint64_t v25 = RERealityFileMountFileAtURL();

  if (!v25)
  {
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = v56;
    *(void *)(v32 + 16) = v57;
    *(void *)(v32 + 24) = v33;
    uint64_t v69 = partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    uint64_t v70 = (void *)v32;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v66 = 1107296256;
    uint64_t v31 = &block_descriptor_71_0;
    goto LABEL_9;
  }
  String.utf8CString.getter();
  AssetDescriptorFromuint64_t Label = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  id v53 = v21;
  if (AssetDescriptorFromLabel)
  {
    uint64_t v27 = REAssetHandleCreateWithAssetDescriptor();
    type metadata accessor for NSObject();
    char v28 = static NSObject.== infix(_:_:)();
    v52[2] = v17;
    v52[1] = v25;
    if (v28) {
      REAssetHandleLoadNow();
    }
    else {
      REAssetHandleLoadNowFromOtherQueue();
    }
    uint64_t v45 = v56;
    uint64_t v46 = (void *)swift_allocObject();
    uint64_t v47 = v57;
    v46[2] = v27;
    void v46[3] = v47;
    v46[4] = v45;
    uint64_t v69 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    uint64_t v70 = v46;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v66 = 1107296256;
    uint64_t v67 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    long long v68 = &block_descriptor_83_0;
    uint64_t v48 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v49 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v64 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v50 = v58;
    uint64_t v51 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v49, v50, v48);
    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    swift_release();
    RERelease();
    RERealityFileUnmount();
    swift_release();
  }
  else
  {
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v56;
    *(void *)(v39 + 16) = v57;
    *(void *)(v39 + 24) = v40;
    uint64_t v69 = partial apply for closure #3 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:);
    uint64_t v70 = (void *)v39;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v66 = 1107296256;
    uint64_t v67 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    long long v68 = &block_descriptor_77_0;
    uint64_t v41 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v42 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v64 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v43 = v58;
    uint64_t v44 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v42, v43, v41);
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v42, v63);
    swift_release();
    RERealityFileUnmount();
    swift_release();
  }
}

void static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v68 = a7;
  uint64_t v69 = a6;
  v67._object = a4;
  v67._uint64_t countAndFlagsBits = a3;
  uint64_t v66 = a2;
  uint64_t v65 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v72 = v7;
  uint64_t v73 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v70 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v74 = v10;
  uint64_t v75 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v71 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v17 + 120, (uint64_t)&aBlock);
  uint64_t v18 = v80;
  id v19 = v81;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v80);
  uint64_t v20 = (uint64_t (*)(void *, uint64_t (*)()))*((void *)v19 + 4);
  swift_retain();
  uint64_t v21 = v20(v18, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v17 + 24);
  swift_unownedRetainStrong();
  id v23 = *(id *)(v22 + 32);
  swift_release();
  id v24 = *(void **)(*(void *)(v17 + 168) + 16);
  *uint64_t v16 = v24;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F0E0], v13);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    uint64_t v34 = swift_allocObject();
    uint64_t v35 = v68;
    *(void *)(v34 + 16) = v69;
    *(void *)(v34 + 24) = v35;
    uint64_t v81 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    long long v82 = (void *)v34;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v78 = 1107296256;
    uint64_t v36 = &block_descriptor_139;
LABEL_9:
    uint64_t v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v80 = v36;
    uint64_t v39 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v40 = v71;
    static DispatchQoS.unspecified.getter();
    uint64_t v76 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v41 = v70;
    uint64_t v42 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v40, v41, v39);
    swift_release();
    _Block_release(v39);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v40, v74);
    swift_release();
    return;
  }
  URL._bridgeToObjectiveC()(v26);
  char v28 = v27;
  uint64_t v29 = RERealityFileMountFileAtURL();

  if (!v29)
  {
    uint64_t v37 = swift_allocObject();
    uint64_t v38 = v68;
    *(void *)(v37 + 16) = v69;
    *(void *)(v37 + 24) = v38;
    uint64_t v81 = partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
    long long v82 = (void *)v37;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v78 = 1107296256;
    uint64_t v36 = &block_descriptor_145_0;
    goto LABEL_9;
  }
  uint64_t aBlock = v65;
  uint64_t v78 = v66;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 58;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRetain();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  AssetDescriptorFromuint64_t Label = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  if (AssetDescriptorFromLabel)
  {
    uint64_t v32 = REAssetHandleCreateWithAssetDescriptor();
    RERelease();
    type metadata accessor for NSObject();
    char v33 = static NSObject.== infix(_:_:)();
    uint64_t v64 = v21;
    if (v33) {
      REAssetHandleLoadNow();
    }
    else {
      REAssetHandleLoadNowFromOtherQueue();
    }
    uint64_t v47 = v68;
    uint64_t v48 = v69;
    uint64_t v49 = (void *)swift_allocObject();
    v49[2] = v32;
    v49[3] = v48;
    v49[4] = v47;
    uint64_t v81 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
    long long v82 = v49;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v78 = 1107296256;
    uint64_t v50 = &block_descriptor_163;
LABEL_18:
    uint64_t v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v80 = v50;
    uint64_t v59 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v60 = v71;
    static DispatchQoS.unspecified.getter();
    uint64_t v76 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v61 = v70;
    uint64_t v62 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v60, v61, v59);
    _Block_release(v59);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v61, v62);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v60, v74);
    swift_release();
    goto LABEL_19;
  }
  String.utf8CString.getter();
  uint64_t v43 = RERealityFileCreateAssetDescriptorFromLabel();
  swift_release();
  if (v43)
  {
    uint64_t v44 = REAssetHandleCreateWithAssetDescriptor();
    RERelease();
    type metadata accessor for NSObject();
    char v45 = static NSObject.== infix(_:_:)();
    uint64_t v46 = v69;
    uint64_t v64 = v21;
    if (v45) {
      REAssetHandleLoadNow();
    }
    else {
      REAssetHandleLoadNowFromOtherQueue();
    }
    uint64_t v57 = v68;
    uint64_t v58 = (void *)swift_allocObject();
    v58[2] = v44;
    long long v58[3] = v46;
    v58[4] = v57;
    uint64_t v81 = partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
    long long v82 = v58;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v78 = 1107296256;
    uint64_t v50 = &block_descriptor_157_0;
    goto LABEL_18;
  }
  uint64_t v51 = swift_allocObject();
  uint64_t v52 = v68;
  *(void *)(v51 + 16) = v69;
  *(void *)(v51 + 24) = v52;
  uint64_t v81 = partial apply for closure #5 in static ShaderGraphMaterial.loadAsyncFromRealityFile(fileName:materialLabel:url:fulfill:);
  long long v82 = (void *)v51;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v78 = 1107296256;
  uint64_t v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v80 = &block_descriptor_151;
  id v53 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v69 = v29;
  uint64_t v54 = v71;
  static DispatchQoS.unspecified.getter();
  uint64_t v76 = MEMORY[0x263F8EE78];
  _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v55 = v70;
  uint64_t v56 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v54, v55, v53);
  _Block_release(v53);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v56);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v54, v74);
  swift_release();
LABEL_19:
  RERealityFileUnmount();
  swift_release();
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v33 = a5;
  uint64_t v34 = a2;
  uint64_t v41 = a3;
  uint64_t v32 = a1;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __n128 v16 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a4, v13, v16);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v21 + v18, v17, v13);
  uint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v34;
  uint64_t v25 = v35;
  id v24 = v36;
  *uint64_t v22 = v33;
  v22[1] = v25;
  uint64_t v26 = (void *)(v21 + v20);
  *uint64_t v26 = v32;
  v26[1] = v23;
  *(void *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_47;
  uint64_t v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v28 = v24;
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = MEMORY[0x263F8EE78];
  _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v29 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v12, v9, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  return swift_release();
}

void closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = URL.pathExtension.getter();
  uint64_t v17 = v15;
  if (v16 == 0x7974696C616572 && v15 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = v33;
    uint64_t v19 = v34;
    static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(v18, v19, a1, a4, a5);
  }
  else
  {
    if ((specialized static LoadUtilities.isUSDPathExtension(pathExtension:)(v16, v17) & 1) == 0)
    {
      if (v16 == 2020373613 && v17 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          uint64_t v28 = swift_allocObject();
          *(void *)(v28 + 16) = a4;
          *(void *)(v28 + 24) = a5;
          uint64_t v40 = (void (*)(void *, void *))partial apply for closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:);
          uint64_t v41 = v28;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v37 = 1107296256;
          uint64_t v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          uint64_t v39 = &block_descriptor_53;
          uint64_t v29 = _Block_copy(&aBlock);
          swift_retain();
          static DispatchQoS.unspecified.getter();
          uint64_t v35 = MEMORY[0x263F8EE78];
          _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          MEMORY[0x22A689420](0, v14, v11, v29);
          _Block_release(v29);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
          swift_release();
          return;
        }
      }
      swift_retain();
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      swift_unownedRetainStrong();
      swift_release();
      URL._bridgeToObjectiveC()(v23);
      uint64_t v25 = v24;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = a4;
      *(void *)(v26 + 24) = a5;
      uint64_t v40 = partial apply for implicit closure #2 in implicit closure #1 in static ShaderGraphMaterial.loadAsyncFromMaterialX(materialLabel:url:fulfill:);
      uint64_t v41 = v26;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v37 = 1107296256;
      uint64_t v38 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
      uint64_t v39 = &block_descriptor_59_1;
      uint64_t v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      String.utf8CString.getter();
      RIOEntityUsingMaterialCreateFromMtlxURLAsync();
      swift_release();
      _Block_release(v27);
      swift_release();

      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = v33;
    uint64_t v21 = v34;
    static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v20, v21, a1, a4, a5);
  }
}

void closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(uint64_t a1, void (*a2)(uint64_t *))
{
  if (REAssetHandleAssetType() == 2 && REMaterialAssetGetType() == 7)
  {
    uint64_t v4 = (void *)REMaterialParameterBlockValueCreate();
    uint64_t v5 = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (v5)
    {
      uint64_t v9 = v5;
      long long v10 = MEMORY[0x263F8EE78];
      *(void *)&long long v11 = 0;
      *((void *)&v11 + 1) = v4;
      *(_OWORD *)uint64_t v12 = xmmword_228343E60;
      *(void *)&unsigned char v12[16] = 0;
      *(_WORD *)&v12[24] = 1;
      swift_retain();
      swift_bridgeObjectRetain();
      id v6 = v4;
      a2(&v9);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    uint64_t v7 = (void *)swift_allocError();
    *uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)v7;
    long long v10 = 0u;
    long long v11 = 0u;
    memset(v12, 0, 25);
    v12[25] = 1;
    a2(&v9);
  }
}

void closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(void (*a1)(void **), uint64_t a2, char a3)
{
  lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
  uint64_t v5 = (void *)swift_allocError();
  *id v6 = a3;
  uint64_t v7 = v5;
  long long v8 = 0u;
  long long v9 = 0u;
  memset(v10, 0, 25);
  v10[25] = 1;
  a1(&v7);
}

uint64_t static ShaderGraphMaterial.unpackModelEntity(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModelEntity();
  if (swift_dynamicCastClass())
  {
    swift_retain();
    uint64_t Component = REEntityGetComponent();
    if (Component)
    {
      uint64_t v27 = Component;
      uint64_t result = static ModelComponent.__fromCore(_:borrowStrongReference:)(&v27, 0, &v24);
      if (*(void *)(v25 + 16))
      {
        uint64_t v4 = v24;
        outlined init with copy of __REAssetService(v25 + 32, (uint64_t)&v16);
        outlined consume of ModelComponent?(v4);
        outlined init with take of BindableDataInternal(&v16, (uint64_t)v26);
        outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)&v24);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
        if (swift_dynamicCast())
        {
          swift_release();
          char v5 = v17;
          uint64_t v6 = v19;
          char v7 = v20;
          char v8 = v21;
          uint64_t v9 = v22;
          char v10 = v23;
          long long v14 = v16;
          long long v15 = v18;
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
          *(_OWORD *)a1 = v14;
          *(unsigned char *)(a1 + 16) = v5;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v6;
          *(unsigned char *)(a1 + 48) = v7;
          *(unsigned char *)(a1 + 49) = v8;
          *(void *)(a1 + 56) = v9;
          *(unsigned char *)(a1 + 64) = v10;
        }
        else
        {
          lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
          swift_allocError();
          *uint64_t v13 = 0;
          swift_willThrow();
          swift_release();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
      swift_allocError();
      *uint64_t v12 = 1;
      swift_willThrow();
      return swift_release();
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    swift_allocError();
    *long long v11 = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rootuint64_t Entity = RIOImportSessionGetRootEntity();
  uint64_t v33 = a1;
  uint64_t v32 = v11;
  if (!RootEntity)
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    long long v18 = (void *)swift_allocError();
    *uint64_t v19 = 4;
    swift_willThrow();
LABEL_6:
    char v21 = (void *)swift_allocObject();
    v21[2] = a3;
    void v21[3] = a4;
    void v21[4] = v18;
    *(void *)&long long v42 = partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
    *((void *)&v42 + 1) = v21;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v41 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v41 + 1) = &block_descriptor_101;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    id v23 = v18;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long v35 = MEMORY[0x263F8EE78];
    _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v14, v10, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v32);
    goto LABEL_7;
  }
  uint64_t v16 = RootEntity;
  uint64_t v30 = a3;
  type metadata accessor for Entity();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  MEMORY[0x22A68E750](v16, v17);
  *(void *)&long long aBlock = v17;
  if (!REEntityGetChildCount())
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    long long v18 = (void *)swift_allocError();
    *char v20 = 4;
    swift_willThrow();
    swift_release();
    a3 = v30;
    goto LABEL_6;
  }
  Entity.ChildCollection.subscript.getter(0);
  static ShaderGraphMaterial.unpackModelEntity(_:)((uint64_t)&v35);
  swift_release();
  long long v43 = v38;
  char v44 = v39;
  long long v41 = v36;
  long long v42 = v37;
  long long aBlock = v35;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v30;
  *(void *)(v25 + 24) = a4;
  long long v26 = v43;
  *(_OWORD *)(v25 + 64) = v42;
  *(_OWORD *)(v25 + 80) = v26;
  *(unsigned char *)(v25 + 96) = v44;
  long long v27 = v41;
  *(_OWORD *)(v25 + 32) = aBlock;
  *(_OWORD *)(v25 + 48) = v27;
  *(void *)&long long v37 = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:);
  *((void *)&v37 + 1) = v25;
  *(void *)&long long v35 = MEMORY[0x263EF8330];
  *((void *)&v35 + 1) = 1107296256;
  *(void *)&long long v36 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *((void *)&v36 + 1) = &block_descriptor_107;
  uint64_t v28 = _Block_copy(&v35);
  swift_retain();
  outlined retain of ShaderGraphMaterial((uint64_t)&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v14, v10, v28);
  _Block_release(v28);
  swift_release();
  outlined release of ShaderGraphMaterial((uint64_t)&aBlock);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v32);
LABEL_7:
  swift_release();
  return RIOImportSessionSetSceneUpdatePassCompletion();
}

uint64_t closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(void (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 24);
  uint64_t v6 = *(void *)(a3 + 40);
  uint64_t v7 = *(void *)(a3 + 56);
  uint64_t v8 = *(unsigned char *)(a3 + 16) & 1;
  char v9 = *(unsigned char *)(a3 + 64) & 1;
  unint64_t v10 = *(unsigned char *)(a3 + 48) & 1 | ((unint64_t)(*(unsigned char *)(a3 + 49) & 1) << 8);
  long long v12 = *(_OWORD *)a3;
  uint64_t v13 = v8;
  long long v14 = v5;
  uint64_t v15 = v6;
  unint64_t v16 = v10;
  uint64_t v17 = v7;
  char v18 = v9;
  char v19 = 0;
  outlined retain of ShaderGraphMaterial(a3);
  a1(&v12);

  return outlined release of ShaderGraphMaterial(a3);
}

uint64_t closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a3;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  char v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = (void *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  uint64_t v19[4] = a4;
  v19[5] = a5;
  v19[6] = a6;
  v19[7] = a7;
  aBlock[4] = partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_37;
  char v20 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a4, a5);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x263F8EE78];
  _sS2cEs5ErrorsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);
  return swift_release();
}

void closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  void aBlock[3] = &block_descriptor_34_1;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  String.utf8CString.getter();
  RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsync();
  swift_release();
  _Block_release(v6);
  swift_release();
}

void ShaderGraphMaterial.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t ShaderGraphMaterial.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t _s10RealityKit11LoadRequestC_12dependenciesACyxGyys6ResultOyxs5Error_pGcc_0A10Foundation0cD12DependenciesCSgtcfcyyAIccfU_AJ19ShaderGraphMaterialV_Tg5TA_0(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t specialized static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void **)(*(void *)(specialized static __ServiceLocator.shared.getter() + 168) + 16);
  char v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v8;
  void v9[3] = a3;
  v9[4] = a4;
  void v9[5] = a1;
  v9[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  uint64_t v10 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  uint64_t v11 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)(v11 + 16) = v12;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_WORD *)(v11 + 88) = -256;
  *(void *)(v10 + 16) = v11;
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = partial apply for closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:);
  void v13[3] = v9;
  _OWORD v13[4] = v11;
  v13[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  id v14 = v8;
  outlined copy of Data._Representation(a3, a4);
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)(v10 + 24) = Future.init(_:)();
  uint64_t v15 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

  swift_release();
  return v15;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShaderGraphMaterial.LoadError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281C4908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial.LoadError()
{
  return &type metadata for ShaderGraphMaterial.LoadError;
}

uint64_t sub_2281C4940()
{
  outlined consume of Data._Representation(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_2281C499C()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)()
{
  closure #1 in closure #1 in static ShaderGraphMaterial.loadMaterialXAsync(_:data:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t _sS2cEs5ErrorsWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2281C4A54()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + v7 + 8);
  uint64_t v11 = *(void **)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(a1, a2, v8, v2 + v6, v9, v10, v11);
}

uint64_t sub_2281C4C14()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

void partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v3 + 8);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:)(v0 + v2, v5, v6, v7, v8, v9);
}

void partial apply for implicit closure #2 in implicit closure #1 in static ShaderGraphMaterial.loadAsyncFromMaterialX(materialLabel:url:fulfill:)(void *a1, void *a2)
{
  ShaderGraphMaterial.AsyncDestination.completion(_:_:)(a1, a2, *(void (**)(void **))(v2 + 16));
}

void partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(void (**)(void **))(v0 + 16), *(void *)(v0 + 24), 2);
}

void partial apply for closure #3 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  closure #1 in closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(void (**)(void **))(v0 + 16), *(void *)(v0 + 24), 1);
}

void partial apply for closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)()
{
  closure #4 in static ShaderGraphMaterial.loadAsyncFromRealityFile(materialLabel:url:fulfill:)(*(void *)(v0 + 16), *(void (**)(uint64_t *))(v0 + 24));
}

uint64_t specialized static ShaderGraphMaterial.createInMemoryMaterialLoadingImportSession(primPath:url:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)RIOPxrUsdStageCreateInMemory();
  uint64_t v25 = (void *)RIOPxrSdfPathCreateFromCString();
  uint64_t v24 = (void *)RIOPxrTfTokenCreateWithCString();
  PrimIfNeeded = (void *)RIOPxrUsdStageCreatePrimIfNeeded();
  uint64_t v6 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v7 = objc_msgSend(v6, sel_lastPathComponent);

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  uint64_t v23 = (void *)RIOPxrTfTokenCreateWithCString();
  uint64_t v13 = (void *)RIOPxrUsdStageCreatePrimIfNeeded();
  String.utf8CString.getter();
  id v14 = (void *)RIOPxrSdfPathCreateFromCString();
  swift_release();
  URL.path.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  RIOPxrUsdPrimAddReference();
  swift_release();
  uint64_t v15 = (void *)RIOPxrTfTokenCreateWithCString();
  Relationship = (void *)RIOPxrUsdPrimCreateCreateRelationship();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_22831E4E0;
  *(void *)(v17 + 32) = v12;
  specialized Array._endMutation()();
  type metadata accessor for RIOPxrSdfPathRef(0);
  id v18 = v12;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  RIOPxrUsdRelationshipSetTargets();

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t v20 = RIOImportSessionCreateWithStage();
  if (!v20)
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.LoadError and conformance ShaderGraphMaterial.LoadError();
    swift_allocError();
    *char v21 = 4;
    swift_willThrow();
  }

  return v20;
}

uint64_t sub_2281C514C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  return closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(v0[2], v0[3], v0[4], v0[5]);
}

void partial apply for closure #2 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  uint64_t v1 = *(void (**)(void **))(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 32);
  unint64_t v4 = v2;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v7, 0, 25);
  v7[25] = 1;
  id v3 = v2;
  v1(&v4);
}

uint64_t sub_2281C5220()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 97, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)()
{
  return closure #1 in closure #1 in static ShaderGraphMaterial.loadAsyncFromUSD(primPath:url:fulfill:)(*(void (**)(long long *))(v0 + 16), *(void *)(v0 + 24), v0 + 32);
}

uint64_t sub_2281C5284()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void **)(v2 + 64));
}

uint64_t sub_2281C5314()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)()
{
  return closure #1 in closure #1 in static ShaderGraphMaterial.loadAsync(named:from:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_2281C5380()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2281C53B8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

unint64_t static StateMachineGraphCreator.createGraph(from:)()
{
  transitions._rawuint64_t Value = (void *)MEMORY[0x263F8EE78];
  uint64_t StateCount = REStateMachineAssetGetStateCount();
  if (StateCount < 0) {
    goto LABEL_30;
  }
  uint64_t v7 = StateCount;
  if (StateCount)
  {
    uint64_t v8 = 0;
    uint64_t v0 = (void *)MEMORY[0x263F8EE78];
    do
    {
      REStateMachineAssetGetStateAtIndex();
      uint64_t v9 = static StateMachineGraphCreator.createStateAndItsTransitions(from:)((uint64_t)&v30);
      uint64_t v10 = v30;
      uint64_t v11 = v31;
      uint64_t v12 = v32;
      uint64_t v13 = v33;
      RERelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
      }
      unint64_t v15 = v0[2];
      unint64_t v14 = v0[3];
      if (v15 >= v14 >> 1) {
        uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v0);
      }
      ++v8;
      v0[2] = v15 + 1;
      uint64_t v16 = &v0[4 * v15];
      _OWORD v16[4] = v10;
      v16[5] = v11;
      v16[6] = v12;
      v16[7] = v13;
      specialized Array.append<A>(contentsOf:)(v9);
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v0 = (void *)MEMORY[0x263F8EE78];
  }
  if (REStateMachineAssetGetAnyState())
  {
    uint64_t v1 = (void *)static StateMachineGraphCreator.createStateAndItsTransitions(from:)((uint64_t)&v30);
    RERelease();
    uint64_t v2 = v30;
    uint64_t v3 = v31;
    uint64_t v5 = v32;
    uint64_t v4 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_31;
    }
    while (1)
    {
      unint64_t v18 = v0[2];
      unint64_t v17 = v0[3];
      if (v18 >= v17 >> 1) {
        uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v0);
      }
      v0[2] = v18 + 1;
      char v19 = &v0[4 * v18];
      uint64_t v19[4] = v2;
      v19[5] = v3;
      v19[6] = v5;
      v19[7] = v4;
      uint64_t v3 = v1[2];
      if (!v3) {
        break;
      }
      uint64_t v4 = 0;
      unint64_t v20 = 0;
      while (v20 < v1[2])
      {
        uint64_t v22 = *(void *)((char *)v1 + v4 + 48);
        uint64_t v21 = *(void *)((char *)v1 + v4 + 56);
        uint64_t v23 = *(void *)((char *)v1 + v4 + 64);
        uint64_t v2 = *(void *)((char *)v1 + v4 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
        }
        if (v20 >= v1[2]) {
          goto LABEL_28;
        }
        uint64_t v24 = (void *)((char *)v1 + v4);
        v24[6] = v23;
        v24[7] = v2;
        swift_bridgeObjectRelease();
        if (v20 >= v1[2]) {
          goto LABEL_29;
        }
        ++v20;
        v24[8] = v22;
        v24[9] = v21;
        swift_bridgeObjectRelease();
        uint64_t v25 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v25);
        v4 += 72;
        if (v3 == v20) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0[2] + 1, 1, v0);
    }
LABEL_23:
    specialized Array.append<A>(contentsOf:)((uint64_t)v1);
  }
  REStateMachineAssetGetInitialStateName();
  uint64_t v26 = String.init(cString:)();
  rawuint64_t Value = transitions._rawValue;

  return (unint64_t)StateMachineGraph.init(initialState:states:transitions:)(*(Swift::String *)&v26, (Swift::OpaquePointer)v0, (Swift::OpaquePointer)rawValue);
}

uint64_t static StateMachineGraphCreator.createStateAndItsTransitions(from:)(uint64_t a1)
{
  REStateMachineAssetStateGetName();
  uint64_t v2 = String.init(cString:)();
  uint64_t v29 = v3;
  uint64_t v30 = v2;
  REStateMachineAssetStateGetExitTime();
  float v5 = v4;
  uint64_t result = REStateMachineAssetStateGetTransitionCount();
  if (result < 0)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v27 = a1;
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    uint64_t v28 = result;
    do
    {
      REStateMachineAssetStateGetTransitionAtIndex();
      static StateMachineGraphCreator.createTransition(from:fromStateName:)(v30, v29, (uint64_t)&v32);
      uint64_t v9 = *((void *)&v32 + 1);
      uint64_t v31 = v32;
      uint64_t v11 = v33;
      uint64_t v10 = v34;
      uint64_t v12 = v35;
      uint64_t v13 = v36;
      uint64_t v14 = v37;
      char v15 = v38;
      uint64_t v16 = v39;
      RERelease();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v17 = v8;
      }
      else {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
      }
      ++v7;
      void v17[2] = v19 + 1;
      unint64_t v20 = &v17[9 * v19];
      v20[4] = v31;
      uint64_t v20[5] = v9;
      v20[6] = v11;
      v20[7] = v10;
      v20[8] = v12;
      v20[9] = v13;
      void v20[10] = v14;
      *((unsigned char *)v20 + 88) = v15;
      v20[12] = v16;
      uint64_t v8 = v17;
    }
    while (v28 != v7);
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t result = REStateMachineAssetStateGetCommandCount();
  if (result < 0) {
    goto LABEL_24;
  }
  uint64_t v21 = result;
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = v27;
    do
    {
      REStateMachineAssetStateGetCommandAtIndex();
      static StateMachineGraphCreator.createCommand(from:)((uint64_t)&v32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      }
      unint64_t v26 = v23[2];
      unint64_t v25 = v23[3];
      if (v26 >= v25 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v23);
      }
      ++v22;
      v23[2] = v26 + 1;
      outlined init with take of BindableDataInternal(&v32, (uint64_t)&v23[5 * v26 + 4]);
      RERelease();
    }
    while (v21 != v22);
  }
  else
  {
    uint64_t v23 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = v27;
  }
  *(void *)uint64_t v24 = v30;
  *(void *)(v24 + 8) = v29;
  *(double *)(v24 + 16) = v5;
  *(void *)(v24 + 24) = v23;
  return (uint64_t)v8;
}

uint64_t static StateMachineGraphCreator.createTransition(from:fromStateName:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  REStateMachineAssetTransitionGetName();
  uint64_t v6 = String.init(cString:)();
  uint64_t v8 = v7;
  REStateMachineAssetTransitionGetToStateName();
  uint64_t v9 = String.init(cString:)();
  uint64_t v11 = v10;
  REStateMachineAssetTransitionGetTransitionTime();
  float v13 = v12;
  unsigned int InterruptionType = REStateMachineAssetTransitionGetInterruptionType();
  uint64_t ConditionCount = REStateMachineAssetTransitionGetConditionCount();
  if (ConditionCount < 0) {
    goto LABEL_23;
  }
  uint64_t v16 = ConditionCount;
  unsigned int v38 = InterruptionType;
  uint64_t v39 = v11;
  uint64_t v40 = v9;
  uint64_t v41 = v8;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  if (ConditionCount)
  {
    uint64_t v17 = 0;
    unint64_t v18 = (void *)MEMORY[0x263F8EE78];
    while (v16 != v17)
    {
      REStateMachineAssetTransitionGetConditionAtIndex();
      int Type = REStateMachineAssetTransitionConditionGetType();
      if (Type != 1)
      {
        if (!Type)
        {
          REStateMachineAssetTransitionConditionGetParameterName();
          uint64_t v22 = String.init(cString:)();
          uint64_t v24 = v23;
          Parameterint Type = REStateMachineAssetTransitionConditionGetParameterType();
          unsigned int ConditionOperator = REStateMachineAssetTransitionConditionGetConditionOperator();
          char v27 = ConditionOperator;
          if (ConditionOperator < 6)
          {
            switch(ParameterType)
            {
              case 1:
                uint64_t ConstantInt = REStateMachineAssetTransitionConditionGetConstantInt();
                uint64_t v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Int>);
                uint64_t v49 = &protocol witness table for StateMachineCondition<A>;
                uint64_t v29 = swift_allocObject();
                *(void *)&long long v44 = v29;
                *(void *)(v29 + 40) = ConstantInt;
                *(void *)(v29 + 16) = v22;
                *(void *)(v29 + 24) = v24;
                *(unsigned char *)(v29 + 32) = v27;
                goto LABEL_14;
              case 2:
                REStateMachineAssetTransitionConditionGetConstantFloat();
                int v31 = v30;
                uint64_t v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Float>);
                uint64_t v49 = &protocol witness table for StateMachineCondition<A>;
                int v47 = v31;
                goto LABEL_13;
              case 3:
                char ConstantBool = REStateMachineAssetTransitionConditionGetConstantBool();
                uint64_t v48 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Bool>);
                uint64_t v49 = &protocol witness table for StateMachineCondition<A>;
                char v46 = ConstantBool;
LABEL_13:
                *(void *)&long long v44 = v22;
                *((void *)&v44 + 1) = v24;
                char v45 = v27;
                goto LABEL_14;
              default:
                goto LABEL_26;
            }
          }
          *(void *)&long long v44 = 0;
          *((void *)&v44 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          v37._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
          v37._object = (void *)0x800000022835C0D0;
          String.append(_:)(v37);
          type metadata accessor for REStateTransitionConditionOperator(0);
          _print_unlocked<A, B>(_:_:)();
        }
LABEL_26:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x2281C5EA8);
      }
      REStateMachineAssetTransitionConditionGetParameterName();
      uint64_t v20 = String.init(cString:)();
      uint64_t v48 = &type metadata for StateMachineConditionTrigger;
      uint64_t v49 = &protocol witness table for StateMachineConditionTrigger;
      *(void *)&long long v44 = v20;
      *((void *)&v44 + 1) = v21;
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v34 = v18[2];
      unint64_t v33 = v18[3];
      if (v34 >= v33 >> 1) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v18);
      }
      ++v17;
      v18[2] = v34 + 1;
      outlined init with take of BindableDataInternal(&v44, (uint64_t)&v18[5 * v34 + 4]);
      RERelease();
      if (v16 == v17) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v18 = (void *)MEMORY[0x263F8EE78];
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t result = static StateMachineUtils.convert(_:)(v38, &v44);
  char v36 = v44;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v41;
  *(void *)(a3 + 16) = v42;
  *(void *)(a3 + 24) = v43;
  *(void *)(a3 + 32) = v40;
  *(void *)(a3 + 40) = v39;
  *(double *)(a3 + 48) = v13;
  *(unsigned char *)(a3 + 56) = v36;
  *(void *)(a3 + 64) = v18;
  return result;
}

uint64_t static StateMachineGraphCreator.createCommand(from:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int Type = REStateMachineAssetCommandGetType();
  REStateMachineAssetCommandGetEntityBindTarget();
  unint64_t v3 = String.init(cString:)();
  uint64_t v5 = v4;
  uint64_t v6 = specialized static StateMachineGraphCreator.getCommandParameters(from:)();
  if (!v3 && v5 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unsigned __int8 v9 = -1;
  }
  else
  {
    static InternalBindPath.targetFromPath(_:)(v3, v5, (uint64_t)v19);
    swift_bridgeObjectRelease();
    uint64_t v7 = v19[0];
    uint64_t v8 = v19[1];
    unsigned __int8 v9 = v20;
    if (Type > 5) {
      goto LABEL_14;
    }
  }
  switch(Type)
  {
    case 1u:
      uint64_t v10 = specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0x6F6974616D696E41, (void *)0xED0000656D614E6ELL);
      uint64_t v12 = v11;
      char v13 = specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0xD000000000000018, (void *)0x8000000228356E80);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = &type metadata for StateMachineAnimationPlayCommand;
      *(void *)(a1 + 32) = &protocol witness table for StateMachineAnimationPlayCommand;
      uint64_t result = swift_allocObject();
      *(void *)a1 = result;
      *(void *)(result + 16) = v7;
      *(void *)(result + 24) = v8;
      *(unsigned char *)(result + 32) = v9;
      *(void *)(result + 40) = v10;
      *(void *)(result + 48) = v12;
      *(unsigned char *)(result + 56) = v13 & 1;
      return result;
    case 2u:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = &type metadata for StateMachineAnimationStopCommand;
      unint64_t v18 = &protocol witness table for StateMachineAnimationStopCommand;
      goto LABEL_12;
    case 3u:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = &type metadata for StateMachineAnimationStopAllCommand;
      unint64_t v18 = &protocol witness table for StateMachineAnimationStopAllCommand;
LABEL_12:
      *(void *)(a1 + 24) = v17;
      *(void *)(a1 + 32) = v18;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
      return result;
    case 4u:
      specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)((uint64_t)v6, 0x6B63616279616C50, (void *)0xEC000000656D6954);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = &type metadata for StateMachineAnimationSetPlaybackTimeCommand;
      *(void *)(a1 + 32) = &protocol witness table for StateMachineAnimationSetPlaybackTimeCommand;
      uint64_t result = swift_allocObject();
      *(void *)a1 = result;
      *(void *)(result + 16) = v7;
      *(void *)(result + 24) = v8;
      *(unsigned char *)(result + 32) = v9;
      *(void *)(result + 40) = v16;
      return result;
    default:
      break;
  }
LABEL_14:
  outlined consume of BindTarget?(v7, v8, v9);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x2281C61A0);
}

uint64_t specialized static StateMachineGraphCreator.parameterValue<A>(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v24);
    uint64_t v7 = v25;
    uint64_t v8 = v26;
    __swift_project_boxed_opaque_existential_1(&v24, v25);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v24, (uint64_t)v27);
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v24, (uint64_t)v27);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v27, (uint64_t)&v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v24, (uint64_t)v27);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v27, (uint64_t)&v24);
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
    if ((swift_dynamicCast() & 1) != 0 && v22)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v27);
      uint64_t v12 = v21;
      uint64_t v13 = v22;
      uint64_t v14 = v23;
      swift_bridgeObjectRetain();
      outlined consume of IKRig.Constraint?(v12, v13);
      return v14;
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v24);
  }
  *(void *)&long long v24 = 0;
  *((void *)&v24 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v16._object = (void *)0x800000022835BFF0;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = a2;
  v17._object = a3;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x6570797420666F20;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x676E69727453;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x756F6620746F6E20;
  v20._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v20);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  char v12;
  uint64_t result;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unsigned char v19[8];
  uint64_t v20;
  char v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  long long v25[2];
  uint64_t v26;

  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v22);
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    __swift_project_boxed_opaque_existential_1(&v22, v23);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v22, (uint64_t)v25);
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v22, (uint64_t)v25);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v25, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v22, (uint64_t)v25);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v25, (uint64_t)&v22);
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
    if ((swift_dynamicCast() & 1) != 0 && v20)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v25);
      uint64_t v12 = v21;
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v22);
  }
  *(void *)&uint64_t v22 = 0;
  *((void *)&v22 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v14._object = (void *)0x800000022835BFF0;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x6570797420666F20;
  v16._object = (void *)0xE900000000000020;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 1819242306;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x756F6620746F6E20;
  v18._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v18);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unsigned char v18[8];
  uint64_t v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  long long v23[2];
  uint64_t v24;

  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of __REAssetService(v6, (uint64_t)&v20);
    uint64_t v7 = v21;
    uint64_t v8 = v22;
    __swift_project_boxed_opaque_existential_1(&v20, v21);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v20, (uint64_t)v23);
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v20, (uint64_t)v23);
      if ((v11 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        goto LABEL_4;
      }
    }
    outlined init with take of BindableDataInternal(v23, (uint64_t)v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(&v20, (uint64_t)v23);
      goto LABEL_16;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    v6 += 40;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
LABEL_15:
  long long v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_16:
  outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)v23, (uint64_t)&v20);
  if (v21)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
    if ((swift_dynamicCast() & 1) != 0 && v19)
    {
      outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v23);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v20);
  }
  *(void *)&Swift::String v20 = 0;
  *((void *)&v20 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v13._object = (void *)0x800000022835BFF0;
  v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0x6570797420666F20;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = 0x656C62756F44;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0x756F6620746F6E20;
  v17._object = (void *)0xEA0000000000646ELL;
  String.append(_:)(v17);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static StateMachineGraphCreator.commandTargetEntity(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v7, (uint64_t)&v17);
      uint64_t v8 = v19;
      uint64_t v9 = v20;
      __swift_project_boxed_opaque_existential_1(&v17, v19);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9) == 0x6E45746567726154
        && v10 == 0xEC00000079746974)
      {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_12;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    outlined init with take of BindableDataInternal(&v17, (uint64_t)&v21);
  }
  else
  {
LABEL_10:
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v22 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v14 = v18;
      uint64_t v15 = v19;
      unsigned __int8 v16 = v20;
      outlined copy of BindTarget(v18, v19, v20);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of BindTarget(v14, v15, v16);
      *(void *)a2 = v14;
      *(void *)(a2 + 8) = v15;
      *(unsigned char *)(a2 + 16) = v16;
      return result;
    }
  }
  else
  {
    uint64_t result = outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v21);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = -1;
  return result;
}

uint64_t static StateMachineGraphCreator.createCoreState(from:outgoingTransitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v62 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v58 = (char *)&v51 - v7;
  uint64_t v8 = *(void *)(a1 + 24);
  String.utf8CString.getter();
  uint64_t v9 = REStateMachineAssetStateCreate();
  swift_release();
  uint64_t v66 = v9;
  REStateMachineAssetStateSetExitTime();
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v65 = v8;
  uint64_t v64 = v10;
  if (v10)
  {
    uint64_t v61 = v4;
    uint64_t v63 = a2 + 32;
    uint64_t v59 = (void (**)(char *, uint64_t))a2;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v63 + 72 * v11 + 64);
      String.utf8CString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      REStateMachineAssetTransitionCreate();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = v12 + 32;
        do
        {
          outlined init with copy of __REAssetService(v14, (uint64_t)&v76);
          if (specialized static StateMachineGraphCreator.createCoreCondition(from:)(&v76)) {
            REStateMachineAssetTransitionAddCondition();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
          v14 += 40;
          --v13;
        }
        while (v13);
      }
      swift_bridgeObjectRelease();
      ++v11;
      REStateMachineAssetStateAddTransition();
    }
    while (v11 != v64);
    swift_bridgeObjectRelease();
    uint64_t v8 = v65;
    uint64_t v4 = v61;
  }
  uint64_t v64 = *(void *)(v8 + 16);
  if (!v64) {
    return v66;
  }
  uint64_t v63 = v8 + 32;
  uint64_t v59 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v57 = 0x800000022835BE60;
  uint64_t v54 = "Scope";
  unint64_t v56 = 0x800000022834E3B0;
  *(void *)&long long v17 = 136315138;
  long long v55 = v17;
  uint64_t v53 = MEMORY[0x263F8EE58] + 8;
  unint64_t v52 = 0x800000022835BE90;
  while (v16 < *(void *)(v8 + 16))
  {
    outlined init with copy of __REAssetService(v63 + 40 * v16, (uint64_t)&v76);
    specialized static StateMachineGraphCreator.commandTypeName(of:)((uint64_t)&v76);
    if (v18)
    {
      static StateMachineGraphCreator.commandTargetEntity(of:)(&v76, (uint64_t)&v71);
      unsigned __int8 v19 = v73;
      if (v73 != 255)
      {
        uint64_t v20 = v71;
        uint64_t v21 = v72;
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v71, 1);
        outlined consume of BindTarget?(v20, v21, v19);
      }
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineAssetCommandCreate();
      swift_release();
      swift_release();
      uint64_t v29 = v77;
      uint64_t v30 = v78;
      __swift_project_boxed_opaque_existential_1(&v76, v77);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
      uint64_t v32 = *(void *)(v31 + 16);
      if (v32)
      {
        uint64_t v61 = v31;
        uint64_t v33 = v31 + 32;
        do
        {
          outlined init with copy of __REAssetService(v33, (uint64_t)&v71);
          outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Int>);
          if (swift_dynamicCast())
          {
            uint64_t v34 = v74;
            uint64_t v35 = v75;
            __swift_project_boxed_opaque_existential_1(&v71, v74);
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
            swift_bridgeObjectRelease();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REStateMachineAssetCommandAddParameterInt();
          }
          else
          {
            outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Float>);
            if (swift_dynamicCast())
            {
              uint64_t v36 = v74;
              uint64_t v37 = v75;
              __swift_project_boxed_opaque_existential_1(&v71, v74);
              (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterFloat();
LABEL_28:
              swift_bridgeObjectRelease();
              goto LABEL_29;
            }
            outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
            if (swift_dynamicCast())
            {
              uint64_t v38 = v74;
              uint64_t v39 = v75;
              __swift_project_boxed_opaque_existential_1(&v71, v74);
              (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterDouble();
              goto LABEL_28;
            }
            outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
            if (swift_dynamicCast())
            {
              uint64_t v40 = v74;
              uint64_t v41 = v75;
              __swift_project_boxed_opaque_existential_1(&v71, v74);
              (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REStateMachineAssetCommandAddParameterBool();
              swift_bridgeObjectRelease();
            }
            else
            {
              outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
              if (!swift_dynamicCast())
              {
                outlined init with copy of __REAssetService((uint64_t)&v71, (uint64_t)v70);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
                if (swift_dynamicCast())
                {
                  uint64_t v44 = v67;
                  uint64_t v45 = v68;
                  unsigned __int8 v46 = v69;
                  swift_bridgeObjectRelease();
                  outlined consume of BindTarget(v44, v45, v46);
                }
                else
                {
                  Logger.init(subsystem:category:)();
                  int v47 = Logger.logObject.getter();
                  os_log_type_t v48 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v47, v48))
                  {
                    uint64_t v49 = swift_slowAlloc();
                    uint64_t v50 = swift_slowAlloc();
                    v70[0] = v50;
                    *(_DWORD *)uint64_t v49 = v55;
                    *(void *)(v49 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, v52, v70);
                    _os_log_impl(&dword_227DD2000, v47, v48, "%s", (uint8_t *)v49, 0xCu);
                    swift_arrayDestroy();
                    MEMORY[0x22A696500](v50, -1, -1);
                    MEMORY[0x22A696500](v49, -1, -1);
                  }

                  (*v59)(v58, v60);
                }
                goto LABEL_30;
              }
              uint64_t v43 = v74;
              uint64_t v42 = v75;
              __swift_project_boxed_opaque_existential_1(&v71, v74);
              (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v42);
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              String.utf8CString.getter();
              REStateMachineAssetCommandAddParameterString();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_29:
          swift_release();
LABEL_30:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
          v33 += 40;
          --v32;
        }
        while (v32);
      }
      swift_bridgeObjectRelease();
      REStateMachineAssetStateAddCommand();
    }
    else
    {
      uint64_t v71 = 0;
      unint64_t v72 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      uint64_t v71 = 0xD000000000000021;
      unint64_t v72 = v57;
      __swift_project_boxed_opaque_existential_1(&v76, v77);
      swift_getDynamicType();
      v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      uint64_t v24 = v71;
      unint64_t v23 = v72;
      Logger.init(subsystem:category:)();
      swift_bridgeObjectRetain_n();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v71 = v28;
        *(_DWORD *)uint64_t v27 = v55;
        swift_bridgeObjectRetain();
        *(void *)(v27 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v71);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v25, v26, "%s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v28, -1, -1);
        MEMORY[0x22A696500](v27, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*v59)(v62, v60);
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = v65;
    ++v16;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    if (v16 == v64)
    {
      swift_bridgeObjectRelease();
      return v66;
    }
  }
  __break(1u);
  return result;
}

uint64_t static StateMachineGraphCreator.createCoreAsset(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4)
  {
LABEL_27:
    REStateMachineAssetStateGraphCreate();
    uint64_t v31 = *(void *)(v1 + 16);
    if (v31)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = (uint64_t *)(v1 + 56);
      uint64_t v33 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v35 = *(v32 - 3);
        uint64_t v34 = *(v32 - 2);
        uint64_t v36 = *(v32 - 1);
        uint64_t v37 = *v32;
        v52[0] = v35;
        v52[1] = v34;
        v52[2] = v36;
        uint64_t v53 = v37;
        uint64_t v38 = v3[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38)
        {
          swift_bridgeObjectRetain();
          unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
          uint64_t v40 = v33;
          if (v41)
          {
            uint64_t v40 = *(void *)(v3[7] + 8 * v39);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v40 = v33;
        }
        static StateMachineGraphCreator.createCoreState(from:outgoingTransitions:)((uint64_t)v52, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        REStateMachineAssetStateGraphAddState();
        v32 += 4;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
    }
    uint64_t v42 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v42, (uint64_t)v52);
    uint64_t v43 = v53;
    uint64_t v44 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    String.utf8CString.getter();
    uint64_t v45 = REStateMachineAssetSingleGraphCreate();
    swift_bridgeObjectRelease();
    swift_release();
    return v45;
  }
  uint64_t v47 = v1;
  swift_bridgeObjectRetain();
  uint64_t v5 = v2 + 48;
  while (1)
  {
    uint64_t v48 = v4;
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v9 = *(void *)(v5 + 24);
    uint64_t v50 = *(void *)(v5 + 16);
    uint64_t v51 = *(void *)(v5 - 16);
    uint64_t v10 = *(void *)(v5 + 32);
    char v49 = *(unsigned char *)(v5 + 40);
    uint64_t v11 = *(void *)(v5 + 48);
    if (v3[2])
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if (v13)
      {
        uint64_t v14 = *(void **)(v3[7] + 8 * v12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
LABEL_11:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    void v14[2] = v16 + 1;
    long long v17 = &v14[9 * v16];
    v17[4] = v51;
    _OWORD v17[5] = v6;
    v17[6] = v7;
    v17[7] = v8;
    unsigned char v17[8] = v50;
    v17[9] = v9;
    v17[10] = v10;
    *((unsigned char *)v17 + 88) = v49;
    v17[12] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = v3;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    uint64_t v21 = v3[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (v3[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v3 = (void *)v52[0];
        if (v19) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v3 = (void *)v52[0];
        if (v24) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_39;
      }
      unint64_t v20 = v25;
      uint64_t v3 = (void *)v52[0];
      if (v24)
      {
LABEL_3:
        *(void *)(v3[7] + 8 * v20) = v14;
        goto LABEL_4;
      }
    }
    v3[(v20 >> 6) + 8] |= 1 << v20;
    uint64_t v27 = (uint64_t *)(v3[6] + 16 * v20);
    *uint64_t v27 = v7;
    v27[1] = v8;
    *(void *)(v3[7] + 8 * v20) = v14;
    uint64_t v28 = v3[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_38;
    }
    v3[2] = v30;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 += 72;
    uint64_t v4 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v47;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized static StateMachineGraphCreator.getCommandParameters(from:)()
{
  unint64_t v0 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v30 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if (v0 >= qword_26DC86370) {
      goto LABEL_28;
    }
    int v1 = *((unsigned __int8 *)&outlined read-only object #0 of static StateMachineGraphCreator.getCommandParameters(from:)
         + v0
         + 32);
    uint64_t ParameterCount = REStateMachineAssetCommandGetParameterCount();
    if (ParameterCount < 0) {
      goto LABEL_29;
    }
    uint64_t v3 = ParameterCount;
    unint64_t v29 = v0;
    if (ParameterCount)
    {
      uint64_t v4 = 0;
      while (2)
      {
        if (v3 != v4)
        {
          REStateMachineAssetCommandGetParameterNameAtIndex();
          uint64_t v6 = String.init(cString:)();
          uint64_t v37 = 0;
          long long v35 = 0u;
          long long v36 = 0u;
          uint64_t v7 = v6;
          uint64_t v9 = v8;
          switch(v1)
          {
            case 0:
              String.utf8CString.getter();
              uint64_t ParameterStringAsChars = REStateMachineAssetCommandGetParameterStringAsChars();
              swift_release();
              if (ParameterStringAsChars)
              {
                uint64_t ParameterStringAsChars = String.init(cString:)();
                unint64_t v12 = v11;
              }
              else
              {
                unint64_t v12 = 0xE000000000000000;
              }
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
              uint64_t v37 = &protocol witness table for StateMachineCommandParameter<A>;
              long long v17 = (void *)swift_allocObject();
              *(void *)&long long v35 = v17;
              v17[4] = ParameterStringAsChars;
              _OWORD v17[5] = v12;
              void v17[2] = v7;
              void v17[3] = v9;
              goto LABEL_20;
            case 1:
              *(void *)&long long v31 = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterInt();
              swift_release();
              uint64_t v15 = v31;
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              v34[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Int>);
              v34[4] = &protocol witness table for StateMachineCommandParameter<A>;
              v34[1] = v9;
              _OWORD v34[2] = v15;
              v34[0] = v7;
              outlined init with take of StateMachineCommandParameterProtocol?((uint64_t)v34, (uint64_t)&v35);
              goto LABEL_20;
            case 2:
              LODWORD(v34[0]) = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterFloat();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              int v14 = v34[0];
              *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Float>);
              uint64_t v37 = &protocol witness table for StateMachineCommandParameter<A>;
              LODWORD(v36) = v14;
              goto LABEL_17;
            case 3:
              v34[0] = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterDouble();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              uint64_t v16 = v34[0];
              *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
              uint64_t v37 = &protocol witness table for StateMachineCommandParameter<A>;
              *(void *)&long long v36 = v16;
              goto LABEL_17;
            case 4:
              LOBYTE(v34[0]) = 0;
              String.utf8CString.getter();
              REStateMachineAssetCommandGetParameterBool();
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
              swift_release();
              char v13 = v34[0];
              *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
              uint64_t v37 = &protocol witness table for StateMachineCommandParameter<A>;
              LOBYTE(v36) = v13;
LABEL_17:
              *(void *)&long long v35 = v7;
              *((void *)&v35 + 1) = v9;
LABEL_20:
              outlined init with copy of StateMachineCommandParameterProtocol?((uint64_t)&v35, (uint64_t)&v31);
              if (v32)
              {
                outlined init with take of BindableDataInternal(&v31, (uint64_t)v34);
                outlined init with copy of __REAssetService((uint64_t)v34, (uint64_t)&v31);
                uint64_t v18 = v30;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
                  uint64_t v30 = v18;
                }
                unint64_t v20 = v18[2];
                unint64_t v19 = v18[3];
                if (v20 >= v19 >> 1) {
                  uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
                }
                uint64_t v21 = v32;
                uint64_t v22 = v33;
                uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v31, v32);
                __n128 v24 = MEMORY[0x270FA5388](v23);
                char v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v27 + 16))(v26, v24);
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v26, (uint64_t *)&v30, v21, v22);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
                uint64_t v5 = &v35;
              }
              else
              {
                outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)&v35);
                uint64_t v5 = &v31;
              }
              outlined destroy of StateMachineCommandParameterProtocol?((uint64_t)v5);
              if (v3 != ++v4) {
                continue;
              }
              goto LABEL_2;
            default:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x2281C8274);
          }
        }
        break;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
LABEL_2:
    unint64_t v0 = v29 + 1;
  }
  while (v29 != 4);
  return v30;
}

unint64_t specialized static StateMachineGraphCreator.commandTypeName(of:)(uint64_t a1)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)&v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommand);
  if (swift_dynamicCast())
  {
    unint64_t v2 = 0x6F6974616D696E41;
    outlined consume of BindTarget?(v4[0], v4[1], v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v4);
    if (swift_dynamicCast())
    {
      unint64_t v2 = 0x6F6974616D696E41;
      outlined consume of BindTarget?(v6, v7, v8);
    }
    else
    {
      outlined init with copy of __REAssetService(a1, (uint64_t)v4);
      if (swift_dynamicCast())
      {
        unint64_t v2 = 0xD000000000000010;
        outlined consume of BindTarget?(v6, v7, v8);
      }
      else
      {
        outlined init with copy of __REAssetService(a1, (uint64_t)v4);
        if (swift_dynamicCast())
        {
          outlined consume of BindTarget?(v6, v7, v8);
          return 0xD000000000000018;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t specialized static StateMachineGraphCreator.createCoreCondition(from:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (*(void *)(v4 + 16))
  {
    outlined init with copy of __REAssetService(v4 + 32, (uint64_t)v13);
    swift_bridgeObjectRelease();
    uint64_t v5 = v14;
    uint64_t v6 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineConditionProtocol);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Int>);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v7 = REStateMachineAssetIntConditionCreate();
LABEL_4:
      uint64_t v8 = v7;
LABEL_12:
      swift_release();
      return v8;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Float>);
    if (swift_dynamicCast())
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = REStateMachineAssetFloatConditionCreate();
LABEL_11:
      uint64_t v8 = v11;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCondition<Bool>);
    if (swift_dynamicCast())
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = REStateMachineAssetBoolConditionCreate();
      goto LABEL_11;
    }
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v13);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v7 = REStateMachineAssetTriggerConditionCreate();
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = 0x800000022835BF20;
    uint64_t v9 = 0xD00000000000001DLL;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = 0xD000000000000027;
    unint64_t v10 = 0x800000022835BF40;
  }
  specialized static StateMachineUtils.logError(_:)(v9, v10);
  return 0;
}

uint64_t outlined destroy of StateMachineCommandParameterProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2281C877C()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 16), *(void *)(v0 + 24), v1);
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2281C87C0()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 16), *(void *)(v0 + 24), v1);
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t outlined init with copy of StateMachineCommandParameterProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2281C8874()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined init with take of StateMachineCommandParameterProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameterProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2281C891C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v61 = a1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3) {
    id v60 = a3;
  }
  else {
    id v60 = objc_msgSend(self, sel_mainBundle);
  }
  id v10 = a3;
  uint64_t v11 = specialized static __ServiceLocator.shared.getter();
  unint64_t v12 = *(void **)(*(void *)(v11 + 168) + 16);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 24);
  swift_unownedRetainStrong();
  uint64_t v14 = *(void **)(v13 + 32);
  swift_retain();
  id v15 = v12;
  id v16 = v14;
  swift_release();
  uint64_t v17 = *(void *)(*(void *)(v11 + 168) + 32);
  *uint64_t v9 = v16;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v18 = v16;
  swift_retain();
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  unint64_t v20 = *(void (**)(void *, uint64_t))(v7 + 8);
  __int16 v19 = v7 + 8;
  v20(v9, v6);
  if (v13)
  {
    id v58 = v18;
    uint64_t v59 = v17;
    type metadata accessor for LoadRequestDependencies();
    uint64_t v9 = (void *)swift_allocObject();
    uint64_t v21 = MEMORY[0x263F8EE78];
    _OWORD v9[2] = MEMORY[0x263F8EE78];
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v22 = swift_allocObject();
    *(_DWORD *)(v22 + 16) = 0;
    void v9[3] = v22;
    __int16 v19 = 1;
    swift_beginAccess();
    _OWORD v9[2] = v21;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  uint64_t v57 = v3;
  LODWORD(v23) = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  char v24 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v61;
  *(void *)(v25 + 16) = v61;
  *(void *)(v25 + 24) = a2;
  *(unsigned char *)(v25 + 32) = v23;
  *(unsigned char *)(v25 + 33) = v24;
  *(_WORD *)(v25 + 34) = v19;
  *(_DWORD *)(v25 + 36) = 4;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v11 + 176, (uint64_t)&v62, &demangling cache variable for type metadata for USDImportService?);
  if (v63)
  {
    HIDWORD(v53) = v23;
    uint64_t v54 = v9;
    id v55 = v15;
    outlined init with take of BindableDataInternal(&v62, (uint64_t)v64);
    uint64_t v23 = v26;
    uint64_t v27 = v65;
    uint64_t v28 = v66;
    __swift_project_boxed_opaque_existential_1(v64, v65);
    unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v28 + 16);
    swift_bridgeObjectRetain();
    id v30 = v60;
    if (v29(v23, a2, v60, v27, v28))
    {
      outlined init with copy of __REAssetService((uint64_t)v64, (uint64_t)&v62);
      long long v31 = (void *)swift_allocObject();
      v31[2] = v23;
      v31[3] = a2;
      uint64_t v32 = v57;
      v31[4] = v30;
      v31[5] = v32;
      v31[6] = v25;
      outlined init with take of BindableDataInternal(&v62, (uint64_t)(v31 + 7));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
      uint64_t v33 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
      uint64_t v34 = swift_allocObject();
      uint64_t v35 = swift_allocObject();
      *(_DWORD *)(v35 + 16) = 0;
      *(void *)(v34 + 16) = v35;
      *(void *)(v34 + 24) = 0;
      *(unsigned char *)(v34 + 32) = -1;
      *(void *)(v33 + 16) = v34;
      long long v36 = (void *)swift_allocObject();
      _OWORD v36[2] = partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:);
      v36[3] = v31;
      uint64_t v37 = v54;
      v36[4] = v34;
      v36[5] = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      id v38 = v30;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v39 = Future.init(_:)();
      swift_release();

      swift_release();
      swift_release();

      swift_release();
      *(void *)(v33 + 24) = v39;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      return v33;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    id v15 = v55;
    uint64_t v26 = v23;
    uint64_t v9 = v54;
    LOBYTE(v23) = BYTE4(v53);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v62, &demangling cache variable for type metadata for USDImportService?);
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  id v40 = v60;
  char v41 = (void *)MEMORY[0x22A688A50](v26, a2);
  swift_bridgeObjectRelease();
  uint64_t v42 = RESceneImportOperationCreateWithBundleResource();

  if (v42)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    uint64_t v43 = __SceneImportOperation.init(core:)(v42);

    swift_release();
    swift_retain();
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    swift_release();
  }
  else
  {

    swift_release();
    uint64_t v43 = 0;
  }
  uint64_t v44 = swift_allocObject();
  *(unsigned char *)(v44 + 16) = v23;
  id v45 = v58;
  *(void *)(v44 + 24) = v43;
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = v59;
  *(void *)(v44 + 48) = v25;
  *(void *)(v44 + 56) = v61;
  *(void *)(v44 + 64) = a2;
  uint64_t v46 = v57;
  *(void *)(v44 + 72) = v40;
  *(void *)(v44 + 80) = v46;
  *(void *)(v44 + 88) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
  uint64_t v33 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = swift_allocObject();
  *(_DWORD *)(v48 + 16) = 0;
  *(void *)(v47 + 16) = v48;
  *(void *)(v47 + 24) = 0;
  *(unsigned char *)(v47 + 32) = -1;
  *(void *)(v33 + 16) = v47;
  char v49 = (void *)swift_allocObject();
  v49[2] = partial apply for closure #2 in static Entity.loadAnchorAsync(named:in:);
  v49[3] = v44;
  v49[4] = v47;
  v49[5] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v50 = v40;
  swift_retain();
  uint64_t v51 = Future.init(_:)();

  swift_release();
  *(void *)(v33 + 24) = v51;
  return v33;
}

uint64_t specialized static Entity.load<A>(_:)(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v5, v4);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v5, v4);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v5, v4);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v5, v4);
}

uint64_t specialized static Entity.load<A>(_:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<AnchorEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<AnchorEntity>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static Entity.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static Entity.load<A>(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static Entity.load<A>(_:);
  }
  return MEMORY[0x270FA2498](v7, v4, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  v0[19] = v0[3];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[4] = v0[18];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<BodyTrackedEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<BodyTrackedEntity>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static Entity.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static TextureResource.load<A>(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static Entity.load<A>(_:);
  }
  return MEMORY[0x270FA2498](v7, v4, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  v0[19] = v0[3];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static Entity.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t v9;

  uint64_t v1 = v0[19];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1)
  {
    uint64_t v5 = v0[19];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
  else
  {
    type metadata accessor for CancellationError();
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<Entity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<Entity>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<Entity>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static Entity.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<ModelEntity>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static Entity.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

uint64_t static Entity.loadAnchorAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v3 = static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, (uint64_t)v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v3;
}

uint64_t static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v56 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (uint64_t *)((char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3) {
    id v9 = a3;
  }
  else {
    id v9 = objc_msgSend(self, sel_mainBundle);
  }
  id v10 = a3;
  uint64_t v11 = specialized static __ServiceLocator.shared.getter();
  unint64_t v12 = *(void **)(*(void *)(v11 + 168) + 16);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 24);
  swift_unownedRetainStrong();
  uint64_t v14 = *(void **)(v13 + 32);
  swift_retain();
  id v55 = v12;
  id v15 = v14;
  swift_release();
  *uint64_t v8 = v15;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F0E0], v5);
  id v16 = v15;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  id v18 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v17 = v6 + 8;
  v18(v8, v5);
  if (v13)
  {
    type metadata accessor for LoadRequestDependencies();
    uint64_t v17 = swift_allocObject();
    uint64_t v19 = MEMORY[0x263F8EE78];
    *(void *)(v17 + 16) = MEMORY[0x263F8EE78];
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v20 = swift_allocObject();
    *(_DWORD *)(v20 + 16) = 0;
    *(void *)(v17 + 24) = v20;
    swift_beginAccess();
    *(void *)(v17 + 16) = v19;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  char v21 = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  char v22 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = v56;
  *(void *)(v23 + 16) = v56;
  *(void *)(v23 + 24) = a2;
  uint64_t v25 = a2;
  *(unsigned char *)(v23 + 32) = v21;
  *(unsigned char *)(v23 + 33) = v22;
  *(_WORD *)(v23 + 34) = 256;
  *(_DWORD *)(v23 + 36) = 3;
  uint64_t v53 = v17;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v11 + 176, (uint64_t)&v57, &demangling cache variable for type metadata for USDImportService?);
  if (!v58)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v57, &demangling cache variable for type metadata for USDImportService?);
    id v39 = v16;
LABEL_11:
    id v40 = (void *)swift_allocObject();
    _OWORD v40[2] = v9;
    v40[3] = v24;
    v40[4] = v25;
    v40[5] = v11;
    uint64_t v40[6] = v54;
    v40[7] = v23;
    id v41 = v55;
    v40[8] = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
    uint64_t v32 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = swift_allocObject();
    *(_DWORD *)(v43 + 16) = 0;
    *(void *)(v42 + 16) = v43;
    *(void *)(v42 + 24) = 0;
    *(unsigned char *)(v42 + 32) = -1;
    *(void *)(v32 + 16) = v42;
    uint64_t v44 = (void *)swift_allocObject();
    v44[2] = partial apply for closure #2 in static Entity.loadBodyTrackedAsync(named:in:);
    void v44[3] = v40;
    uint64_t v45 = v53;
    v44[4] = v42;
    v44[5] = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
    swift_allocObject();
    swift_retain();
    id v46 = v41;
    swift_bridgeObjectRetain();
    id v47 = v9;
    swift_retain();
    uint64_t v48 = Future.init(_:)();

    swift_release();
    *(void *)(v32 + 24) = v48;
    return v32;
  }
  id v51 = v16;
  outlined init with take of BindableDataInternal(&v57, (uint64_t)v59);
  uint64_t v27 = v60;
  uint64_t v26 = v61;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  uint64_t v28 = v9;
  unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  if ((v29(v24, v25, v28, v27, v26) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    id v39 = v51;
    id v9 = v28;
    goto LABEL_11;
  }
  outlined init with copy of __REAssetService((uint64_t)v59, (uint64_t)&v57);
  id v30 = (void *)swift_allocObject();
  v30[2] = v24;
  void v30[3] = v25;
  uint64_t v31 = v54;
  v30[4] = v28;
  v30[5] = v31;
  v30[6] = v23;
  outlined init with take of BindableDataInternal(&v57, (uint64_t)(v30 + 7));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  uint64_t v32 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = swift_allocObject();
  *(_DWORD *)(v34 + 16) = 0;
  *(void *)(v33 + 16) = v34;
  *(void *)(v33 + 24) = 0;
  *(unsigned char *)(v33 + 32) = -1;
  *(void *)(v32 + 16) = v33;
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = partial apply for closure #1 in static Entity.loadBodyTrackedAsync(named:in:);
  v35[3] = v30;
  uint64_t v36 = v53;
  v35[4] = v33;
  v35[5] = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v37 = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v38 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();

  *(void *)(v32 + 24) = v38;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  return v32;
}

uint64_t static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = a3;
  uint64_t v66 = a2;
  uint64_t v65 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v65 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v65);
  uint64_t v70 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (uint64_t *)((char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = specialized static __ServiceLocator.shared.getter();
  uint64_t v11 = *(void **)(*(void *)(v10 + 168) + 16);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 24);
  swift_unownedRetainStrong();
  uint64_t v13 = *(void **)(v12 + 32);
  uint64_t v71 = v10;
  swift_retain();
  id v68 = v11;
  id v14 = v13;
  swift_release();
  *id v9 = v14;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v15 = v14;
  uint64_t v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v16)
  {
    id v64 = v15;
    type metadata accessor for LoadRequestDependencies();
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = MEMORY[0x263F8EE78];
    *(void *)(v16 + 16) = MEMORY[0x263F8EE78];
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    *(void *)(v16 + 24) = v18;
    swift_beginAccess();
    *(void *)(v16 + 16) = v17;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v19 = static Entity.asynchronousLoadOptions;
  uint64_t v20 = URL.absoluteString.getter();
  uint64_t v22 = v21;
  swift_beginAccess();
  char v23 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  *(void *)(v24 + 16) = v20;
  *(void *)(v24 + 24) = v22;
  *(unsigned char *)(v24 + 32) = v19;
  *(unsigned char *)(v24 + 33) = v23;
  *(_WORD *)(v24 + 34) = 256;
  *(_DWORD *)(v24 + 36) = 3;
  swift_weakAssign();
  uint64_t v25 = v71 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v25, (uint64_t)&v72, &demangling cache variable for type metadata for USDImportService?);
  uint64_t v63 = v10;
  if (!v73)
  {
    uint64_t v61 = v24;
    uint64_t v62 = v16;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v72, &demangling cache variable for type metadata for USDImportService?);
LABEL_8:
    uint64_t v41 = v4;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v43 = v70;
    uint64_t v44 = v65;
    v42(v70, a1, v65);
    unint64_t v45 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    unint64_t v46 = (v5 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v50 + v45, v43, v44);
    *(void *)(v50 + v46) = v71;
    id v51 = (void *)(v50 + v47);
    uint64_t v52 = v69;
    void *v51 = v66;
    v51[1] = v52;
    *(void *)(v50 + v48) = v67;
    *(void *)(v50 + v49) = v61;
    id v53 = v68;
    *(void *)(v50 + ((v49 + 15) & 0xFFFFFFFFFFFFFFF8)) = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
    uint64_t v36 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
    uint64_t v54 = swift_allocObject();
    uint64_t v55 = swift_allocObject();
    *(_DWORD *)(v55 + 16) = 0;
    *(void *)(v54 + 16) = v55;
    *(void *)(v54 + 24) = 0;
    *(unsigned char *)(v54 + 32) = -1;
    *(void *)(v36 + 16) = v54;
    uint64_t v56 = (void *)swift_allocObject();
    v56[2] = partial apply for closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
    v56[3] = v50;
    uint64_t v57 = v62;
    v56[4] = v54;
    v56[5] = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v58 = v53;
    uint64_t v59 = Future.init(_:)();
    swift_release();

    *(void *)(v36 + 24) = v59;
    return v36;
  }
  outlined init with take of BindableDataInternal(&v72, (uint64_t)v74);
  uint64_t v26 = v75;
  uint64_t v27 = v76;
  __swift_project_boxed_opaque_existential_1(v74, v75);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 24))(a1, v26, v27) & 1) == 0)
  {
    uint64_t v61 = v24;
    uint64_t v62 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    goto LABEL_8;
  }
  uint64_t v28 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v70, a1, v65);
  outlined init with copy of __REAssetService((uint64_t)v74, (uint64_t)&v72);
  unint64_t v29 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v30 = (v5 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v33 + v29, v70, v28);
  uint64_t v34 = (void *)(v33 + v30);
  uint64_t v35 = v69;
  *uint64_t v34 = v66;
  v34[1] = v35;
  *(void *)(v33 + v31) = v67;
  *(void *)(v33 + v32) = v24;
  outlined init with take of BindableDataInternal(&v72, v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<BodyTrackedEntity>);
  uint64_t v36 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<BodyTrackedEntity, Error>?>);
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = swift_allocObject();
  *(_DWORD *)(v38 + 16) = 0;
  *(void *)(v37 + 16) = v38;
  *(void *)(v37 + 24) = 0;
  *(unsigned char *)(v37 + 32) = -1;
  *(void *)(v36 + 16) = v37;
  id v39 = (void *)swift_allocObject();
  uint64_t v39[2] = partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  v39[3] = v33;
  v39[4] = v37;
  v39[5] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<BodyTrackedEntity, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v40 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();

  *(void *)(v36 + 24) = v40;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  return v36;
}

uint64_t specialized LoadTracer.subscribe<A>(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v24 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  uint64_t v22 = *(void *)(Trace - 8);
  uint64_t v9 = v22;
  uint64_t v23 = Trace;
  uint64_t v10 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](Trace);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_allocBox();
  uint64_t v13 = v12;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, v12, type metadata accessor for LoadTrace);
  uint64_t v25 = a1;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, (uint64_t)v11, type metadata accessor for LoadTrace);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  outlined init with take of RealityFileLoadInformation((uint64_t)v11, v16 + v14, type metadata accessor for LoadTrace);
  *(void *)(v16 + v15) = v3;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, (uint64_t)v11, type metadata accessor for LoadTrace);
  uint64_t v17 = swift_allocObject();
  outlined init with take of RealityFileLoadInformation((uint64_t)v11, v17 + v14, type metadata accessor for LoadTrace);
  *(void *)(v17 + v15) = v3;
  *(void *)(v17 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  swift_retain_n();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<Entity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<Entity>);
  uint64_t v18 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(void *)(v13 + 8) = v18;
  swift_release();
  LODWORD(v18) = *(_DWORD *)v13;
  uint64_t v19 = v24;
  _s17RealityFoundation9LoadTraceVWOcTm_0(v13, v24, type metadata accessor for LoadTrace);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v23);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v19, v18);
  swift_endAccess();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t Trace;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v24 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  uint64_t v22 = *(void *)(Trace - 8);
  uint64_t v9 = v22;
  uint64_t v23 = Trace;
  uint64_t v10 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](Trace);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_allocBox();
  uint64_t v13 = v12;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, v12, type metadata accessor for LoadTrace);
  uint64_t v25 = a1;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, (uint64_t)v11, type metadata accessor for LoadTrace);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  outlined init with take of RealityFileLoadInformation((uint64_t)v11, v16 + v14, type metadata accessor for LoadTrace);
  *(void *)(v16 + v15) = v3;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a2, (uint64_t)v11, type metadata accessor for LoadTrace);
  uint64_t v17 = swift_allocObject();
  outlined init with take of RealityFileLoadInformation((uint64_t)v11, v17 + v14, type metadata accessor for LoadTrace);
  *(void *)(v17 + v15) = v3;
  *(void *)(v17 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  swift_retain_n();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<ModelEntity> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  uint64_t v18 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(void *)(v13 + 8) = v18;
  swift_release();
  LODWORD(v18) = *(_DWORD *)v13;
  uint64_t v19 = v24;
  _s17RealityFoundation9LoadTraceVWOcTm_0(v13, v24, type metadata accessor for LoadTrace);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v23);
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v19, v18);
  swift_endAccess();
  return swift_release();
}

uint64_t specialized closure #2 in LoadTracer.subscribe<A>(to:with:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  type metadata accessor for LoadTrace(0);
  uint64_t v3 = (unsigned int *)swift_projectBox();
  RECreateLoadTraceTypeBitFieldSignpostArg();
  REEntityGetLocalId();
  RESignpostEmitREAssetEntityLoadEndedImpulse();
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService);
  type metadata accessor for __REAssetManager();
  if (swift_dynamicCast())
  {
    if (_REAssetManagerIsFullLoadTracingEnabled()) {
      REEntityAddLoadTraceComponent();
    }
    swift_release();
  }
  swift_beginAccess();
  unsigned int v5 = *v3;
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(v5, (uint64_t)v2);
  swift_endAccess();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for LoadTrace?);
}

uint64_t Entity.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[34] = a4;
  v5[35] = v4;
  unsigned char v5[32] = a2;
  v5[33] = a3;
  v5[31] = a1;
  v5[36] = type metadata accessor for MainActor();
  v5[37] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[38] = v7;
  v5[39] = v6;
  return MEMORY[0x270FA2498](Entity.init(contentsOf:withName:options:), v7, v6);
}

uint64_t Entity.init(contentsOf:withName:options:)()
{
  uint64_t v1 = (_OWORD *)(v0 + 16);
  outlined init with copy of (Int, URL)(*(void *)(v0 + 272), v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (*(void *)(v0 + 104) == 1)
  {
    *(_OWORD *)(v0 + 208) = 0u;
    *(void *)(v0 + 240) = 0;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_WORD *)(v0 + 192) = 512;
    *(_OWORD *)(v0 + 144) = 0u;
    *(void *)(v0 + 200) = 0;
    outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 144);
    *(void *)(v0 + 184) = 0;
    long long v2 = *(_OWORD *)(v0 + 160);
    long long v3 = *(_OWORD *)(v0 + 176);
    _OWORD *v1 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 32) = v2;
    long long v4 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 48) = v3;
    *(_OWORD *)(v0 + 64) = v4;
    outlined destroy of BodyTrackingComponent?(v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    long long v5 = *(_OWORD *)(v0 + 96);
    _OWORD *v1 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    long long v6 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 64) = v6;
  }
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 280);
  *(unsigned char *)(v0 + 408) = static Entity.asynchronousLoadOptions;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)(v7 + 272)
                                                                             + **(int **)(v7 + 272));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v8;
  *uint64_t v8 = v0;
  v8[1] = Entity.init(contentsOf:withName:options:);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 248);
  return v13(v11, v9, v10, v1, v0 + 408);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0[43] = (*(uint64_t (**)(void))(v0[35] + 232))();
  uint64_t v1 = swift_retain();
  Entity.copy(to:recursive:)(v1, 1);
  v0[44] = static MainActor.shared.getter();
  long long v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[45] = v3;
  v0[46] = v2;
  return MEMORY[0x270FA2498](Entity.init(contentsOf:withName:options:), v3, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v1 = static Entity.enumerateReferences(root:)(v0[43]);
  v0[47] = v1;
  v0[48] = static MainActor.shared.getter();
  long long v2 = swift_task_alloc();
  v0[49] = v2;
  *(void *)(v2 + 16) = v1;
  long long v3 = (void *)swift_task_alloc();
  v0[50] = (uint64_t)v3;
  *long long v3 = v0;
  v3[1] = Entity.init(contentsOf:withName:options:);
  return MEMORY[0x270FA22B8]();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  long long v2 = *(void *)(v1 + 368);
  long long v3 = *(void *)(v1 + 360);
  return MEMORY[0x270FA2498](Entity.init(contentsOf:withName:options:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 304);
  long long v2 = *(void *)(v0 + 312);
  return MEMORY[0x270FA2498](Entity.init(contentsOf:withName:options:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  swift_release();
  if (v0[9])
  {
    swift_retain();
    Entity.LoadStatistics.log()();
    swift_release();
  }
  uint64_t v1 = v0[34];
  long long v2 = v0[31];
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  long long v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  long long v4 = (uint64_t (*)(uint64_t))v0[1];
  long long v5 = v0[43];
  return v4(v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[34];
  long long v2 = v0[31];
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  long long v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  long long v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Entity.init(contentsOf:withName:options:)(uint64_t a1)
{
  long long v3 = (void *)*v2;
  v3[41] = a1;
  v3[42] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[38];
  uint64_t v5 = v3[39];
  if (v1) {
    long long v6 = Entity.init(contentsOf:withName:options:);
  }
  else {
    long long v6 = Entity.init(contentsOf:withName:options:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

uint64_t Entity.init(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  uint64_t v5 = type metadata accessor for URL();
  v4[38] = v5;
  v4[39] = *(void *)(v5 - 8);
  v4[40] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[41] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[42] = v7;
  v4[43] = v6;
  return MEMORY[0x270FA2498](Entity.init(contentsOf:withName:), v7, v6);
}

uint64_t Entity.init(contentsOf:withName:)()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 272);
  *(_OWORD *)(v0 + 224) = 0u;
  *(void *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_WORD *)(v0 + 128) = 512;
  *(_OWORD *)(v0 + 80) = 0u;
  *(void *)(v0 + 136) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 80);
  *(void *)(v0 + 120) = 0;
  long long v5 = *(_OWORD *)(v0 + 96);
  long long v6 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v5;
  long long v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 64) = v7;
  swift_beginAccess();
  *(unsigned char *)(v0 + 64) = static RKARSystemCore.generateDecimatedMeshes;
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v8 = swift_allocObject();
  Date.init()();
  uint64_t v9 = v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 2;
  *(void *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 1;
  uint64_t v10 = (void *)(v8 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *uint64_t v10 = 0xD000000000000027;
  v10[1] = 0x800000022835C130;
  swift_release();
  *(void *)(v0 + 72) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  outlined init with copy of Entity.__LoadOptions(v0 + 16, v0 + 144);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v11;
  *uint64_t v11 = v0;
  v11[1] = Entity.init(contentsOf:withName:);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 280);
  return Entity.init(contentsOf:withName:options:)(v12, v14, v13, v0 + 144);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[34];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  long long v5 = v0[46];
  return v4(v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[34];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Entity.init(contentsOf:withName:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 360) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[42];
    uint64_t v6 = v4[43];
    long long v7 = Entity.init(contentsOf:withName:);
  }
  else
  {
    v4[46] = a1;
    uint64_t v5 = v4[42];
    uint64_t v6 = v4[43];
    long long v7 = Entity.init(contentsOf:withName:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static Entity.updateInteractions(root:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v2 = static Entity.__disableUpdateInteractionEntities;
  if (static Entity.__disableUpdateInteractionEntities)
  {
    swift_bridgeObjectRetain();
    char v3 = specialized Sequence<>.contains(_:)(a1, v2);
    uint64_t result = swift_bridgeObjectRelease();
    if (v3) {
      return result;
    }
  }
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    uint64_t v6 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v33);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = __RKEntityInteractionsComponent.decodedJSON()();
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v33);
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetCustomComponent()
      && (uint64_t v9 = RECustomComponentGetObject()) != 0)
    {
      uint64_t v10 = *(void *)(v9 + 16);
      outlined init with copy of __RKEntityInteractionsComponent(v9, (uint64_t)v33);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = __RKEntityInteractionsComponent.decodedJSON()();
      }
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v33);
    }
    else
    {
      uint64_t v11 = MEMORY[0x263F8EE78];
    }
    Entity.__interactions.setter(MEMORY[0x263F8EE78]);
    Entity.__interactions.setter(v11);
  }
  swift_retain();
  if (REEntityGetChildCount() < 1) {
    return swift_release();
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v12 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_62;
    }
    uint64_t v13 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v14 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_61;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t v15 = RECustomComponentGetObject();
        if (v15)
        {
          uint64_t v16 = *(unsigned __int8 **)v15;
          if (*(void *)(v15 + 8)) {
            BOOL v17 = 1;
          }
          else {
            BOOL v17 = v16 == 0;
          }
          if (v17)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v18 = *v16;
            uint64_t v19 = String.init(utf8String:)();
            if (v20) {
              Swift::Int v21 = v19;
            }
            else {
              Swift::Int v21 = 0;
            }
            if (v20) {
              unint64_t v22 = v20;
            }
            else {
              unint64_t v22 = 0xE000000000000000;
            }
            uint64_t v16 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v18 == 42, v21, v22);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v16;
          }
          if (!v16) {
            goto LABEL_63;
          }
          swift_retain();
          uint64_t v23 = String.init(utf8String:)();
          unint64_t v25 = v24;
          swift_release();
          uint64_t v26 = v25 ? v23 : 0;
          unint64_t v27 = v25 ? v25 : 0xE000000000000000;
          uint64_t v28 = (NSString *)MEMORY[0x22A688A50](v26, v27);
          swift_bridgeObjectRelease();
          Class v29 = NSClassFromString(v28);

          swift_release();
          if (v29)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v30 = swift_dynamicCastMetatype();
            if (v30)
            {
              uint64_t v31 = (*(uint64_t (**)(void))(v30 + 232))();
              uint64_t v32 = *(void *)(v31 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v32, 0);
              *(void *)(v31 + 16) = v13;
              MEMORY[0x22A68E750](v13, v31);
              swift_release();
              goto LABEL_55;
            }
          }
        }
      }
      uint64_t v14 = makeEntity(for:)(v13);
    }
    uint64_t v31 = v14;
LABEL_55:
    uint64_t result = REEntityGetChildCount();
    if (v12 >= result) {
      goto LABEL_60;
    }
    ++v12;
    static Entity.updateInteractions(root:)(v31);
    swift_release();
    if (v12 >= REEntityGetChildCount()) {
      return swift_release();
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Entity.updateSceneGravityIfNeeded()()
{
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    uint64_t v1 = SceneNullable;
    id v2 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v2)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v1);
    }
    swift_beginAccess();
    if (static __RKScenePhysics.registration)
    {
      RESceneGetComponentsOfCustomType();
      if (v3)
      {
        uint64_t Object = (long long *)RECustomComponentGetObject();
        if (Object)
        {
          long long v11 = *Object;
          if (RESceneGetECSManagerNullable())
          {
            uint64_t ServiceLocator = REECSManagerGetServiceLocator();
            if (MEMORY[0x22A6922C0](ServiceLocator))
            {
              REPhysicsSimulationServiceGetDefaultGravity();
              uint64_t v7 = 0;
              while (1)
              {
                long long v12 = v6;
                float v9 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
                long long v13 = v11;
                float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
                BOOL v8 = v9 == v10;
                if (v7 == 2) {
                  break;
                }
                while (1)
                {
                  ++v7;
                  if (v8) {
                    break;
                  }
                  if (v7 == 2) {
                    goto LABEL_16;
                  }
                  BOOL v8 = 0;
                }
              }
              if (v9 != v10) {
LABEL_16:
              }
                REPhysicsSimulationServiceSetDefaultGravity();
            }
          }
        }
      }
    }
    swift_release();
  }
}

uint64_t static RealityFileLoadInformationResolver.resolve(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v77 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v80 = &v71[-v8];
  MEMORY[0x270FA5388](v9);
  long long v11 = &v71[-v10];
  if ((specialized static RealityFileLoadInformationResolver.urlContainsPathExtension(_:_:)(a1, 0x7974696C616572, (void *)0xE700000000000000) & 1) == 0)
  {
    uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Information - 8) + 56);
    return v19(a2, 1, 1, Information);
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v11, a1, v4);
  uint64_t v12 = URL.absoluteString.getter();
  uint64_t v14 = specialized BidirectionalCollection.last.getter(v12, v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v73 = a2;
  if (v16)
  {
    if (v14 == 47 && v16 == 0xE100000000000000) {
      int v72 = 1;
    }
    else {
      int v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    int v72 = 0;
  }
  uint64_t v78 = 0;
  unint64_t v21 = 0;
  uint64_t v74 = (void (**)(void, void, void))(v5 + 32);
  uint64_t v75 = (void (**)(unsigned char *, uint64_t))(v5 + 8);
  uint64_t v76 = v4;
  while (1)
  {
    uint64_t v22 = URL.pathComponents.getter();
    uint64_t v23 = *(void *)(v22 + 16);
    unint64_t v79 = v21;
    if (!v23)
    {
LABEL_19:
      BOOL v26 = 0;
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
    v24._object = (void *)0xE800000000000000;
    Swift::Bool v25 = String.hasSuffix(_:)(v24);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v25)
    {
      if (v23 == 1) {
        goto LABEL_19;
      }
      if (*(void *)(v22 + 16) < 2uLL)
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v47._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
      v47._object = (void *)0xE800000000000000;
      Swift::Bool v48 = String.hasSuffix(_:)(v47);
      uint64_t result = swift_bridgeObjectRelease();
      if (!v48)
      {
        uint64_t v49 = v22 + 72;
        unint64_t v50 = 2;
        while (1)
        {
          BOOL v26 = v23 != v50;
          if (v23 == v50) {
            goto LABEL_20;
          }
          if (v50 >= *(void *)(v22 + 16))
          {
            __break(1u);
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
          ++v50;
          uint64_t v51 = v49 + 16;
          swift_bridgeObjectRetain();
          v52._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
          v52._object = (void *)0xE800000000000000;
          Swift::Bool v53 = String.hasSuffix(_:)(v52);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v49 = v51;
          if (v53) {
            goto LABEL_20;
          }
        }
      }
    }
    BOOL v26 = 1;
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v83 = URL.pathExtension.getter();
    unint64_t v84 = v27;
    uint64_t v81 = 0x7974696C616572;
    unint64_t v82 = 0xE700000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v28 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    URL.deletingLastPathComponent()();
    uint64_t v29 = URL.pathComponents.getter();
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v30) {
      goto LABEL_25;
    }
    swift_bridgeObjectRetain();
    v31._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
    v31._object = (void *)0xE800000000000000;
    Swift::Bool v32 = String.hasSuffix(_:)(v31);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v32)
    {
      if (v30 == 1) {
        goto LABEL_25;
      }
      if (*(void *)(v29 + 16) < 2uLL) {
        goto LABEL_61;
      }
      swift_bridgeObjectRetain();
      v54._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
      v54._object = (void *)0xE800000000000000;
      Swift::Bool v55 = String.hasSuffix(_:)(v54);
      uint64_t result = swift_bridgeObjectRelease();
      if (!v55) {
        break;
      }
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v33 = v76;
    uint64_t v34 = *v75;
    (*v75)(v80, v76);
    if (!v26) {
      goto LABEL_51;
    }
LABEL_29:
    uint64_t v83 = URL.lastPathComponent.getter();
    unint64_t v84 = v36;
    uint64_t v37 = StringProtocol.removingPercentEncoding.getter();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    if (!v39) {
      goto LABEL_53;
    }
    uint64_t v40 = (void *)MEMORY[0x22A688A50](v37, v39);
    swift_bridgeObjectRelease();
    if (v79) {
      uint64_t v41 = v78;
    }
    else {
      uint64_t v41 = 0;
    }
    if (v79) {
      unint64_t v42 = v79;
    }
    else {
      unint64_t v42 = 0xE000000000000000;
    }
    uint64_t v43 = (void *)MEMORY[0x22A688A50](v41, v42);
    swift_bridgeObjectRelease();
    id v44 = objc_msgSend(v40, sel_stringByAppendingPathComponent_, v43);

    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v45;

    unint64_t v46 = v77;
    URL.deletingLastPathComponent()();
    v34(v11, v33);
    (*v74)(v11, v46, v33);
  }
  uint64_t v56 = v29 + 72;
  unint64_t v57 = 2;
  while (v30 != v57)
  {
    if (v57 >= *(void *)(v29 + 16)) {
      goto LABEL_59;
    }
    ++v57;
    uint64_t v58 = v56 + 16;
    swift_bridgeObjectRetain();
    v59._uint64_t countAndFlagsBits = 0x7974696C6165722ELL;
    v59._object = (void *)0xE800000000000000;
    Swift::Bool v60 = String.hasSuffix(_:)(v59);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v56 = v58;
    if (v60) {
      goto LABEL_22;
    }
  }
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v33 = v76;
  uint64_t v34 = *v75;
  (*v75)(v80, v76);
  if (v28) {
    BOOL v35 = v26;
  }
  else {
    BOOL v35 = 0;
  }
  if (v35) {
    goto LABEL_29;
  }
LABEL_51:
  URL.path.getter();
  uint64_t v61 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v61 < 2
    || (uint64_t v83 = URL.pathExtension.getter(),
        unint64_t v84 = v62,
        uint64_t v81 = 0x7974696C616572,
        unint64_t v82 = 0xE700000000000000,
        uint64_t v63 = StringProtocol.caseInsensitiveCompare<A>(_:)(),
        swift_bridgeObjectRelease(),
        v63))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    v34(v11, v33);
    uint64_t v64 = type metadata accessor for RealityFileLoadInformation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v73, 1, 1, v64);
  }
  unint64_t v65 = v79;
  uint64_t v66 = v73;
  if ((v72 & (v79 != 0)) == 1)
  {
    uint64_t v83 = v78;
    unint64_t v84 = v79;
    swift_bridgeObjectRetain();
    v67._uint64_t countAndFlagsBits = 47;
    v67._object = (void *)0xE100000000000000;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    uint64_t v68 = v83;
    unint64_t v65 = v84;
  }
  else
  {
    uint64_t v68 = v78;
  }
  (*v74)(v66, v11, v33);
  uint64_t v69 = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v70 = (uint64_t *)(v66 + *(int *)(v69 + 20));
  *uint64_t v70 = v68;
  v70[1] = v65;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v66, 0, 1, v69);
}

uint64_t static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v94 = a1;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace);
  uint64_t v88 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v91) = *a5;
  uint64_t v85 = a4;
  LODWORD(v89) = *(unsigned __int8 *)(a4 + 48);
  if (a3) {
    id v15 = a3;
  }
  else {
    id v15 = objc_msgSend(self, sel_mainBundle);
  }
  id v16 = a3;
  uint64_t v17 = specialized static __ServiceLocator.shared.getter();
  int v18 = *(void **)(*(void *)(v17 + 168) + 16);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24);
  swift_unownedRetainStrong();
  unint64_t v20 = *(void **)(v19 + 32);
  swift_retain();
  id v87 = v18;
  id v21 = v20;
  swift_release();
  uint64_t v22 = *(void *)(*(void *)(v17 + 168) + 32);
  *uint64_t v14 = v21;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F0E0], v11);
  id v23 = v21;
  uint64_t v92 = v22;
  swift_retain();
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v19)
  {
    uint64_t v25 = *(void *)(*(void *)(v17 + 168) + 24);
    *(void *)&long long v96 = 0;
    *((void *)&v96 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v96 = v94;
    *((void *)&v96 + 1) = a2;
    v26._uint64_t countAndFlagsBits = 0x7562206D6F726620;
    v26._object = (void *)0xED000020656C646ELL;
    String.append(_:)(v26);
    id v27 = objc_msgSend(v15, sel_bundleIdentifier);
    id v83 = v23;
    if (v27)
    {
      uint64_t v28 = v27;
      unint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v31 = v30;
    }
    else
    {
      Swift::String v31 = (void *)0x800000022835C160;
      unint64_t v29 = 0xD000000000000010;
    }
    uint64_t v90 = swift_allocBox();
    uint64_t v33 = v32;
    v34._uint64_t countAndFlagsBits = v29;
    v34._object = v31;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t v82 = v33;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v96, *((uint64_t *)&v96 + 1), v33);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    id v35 = v15;
    uint64_t v36 = v94;
    uint64_t v37 = (void *)MEMORY[0x22A688A50](v94, a2);
    swift_bridgeObjectRelease();
    uint64_t v38 = RESceneImportOperationCreateWithBundleResource();

    uint64_t v84 = v25;
    id v93 = v35;
    if (v38)
    {
      type metadata accessor for __SceneImportOperation();
      swift_allocObject();
      uint64_t v39 = __SceneImportOperation.init(core:)(v38);

      swift_release();
      swift_retain();
      RESceneImportOperationSetMergeIntoSingleEntity();
      char v40 = v89;
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      RESceneImportOperationSetIsolateFromEngine();
      swift_release();
    }
    else
    {

      swift_release();
      uint64_t v39 = 0;
      char v40 = v89;
    }
    type metadata accessor for LoadRequestDependencies();
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = MEMORY[0x263F8EE78];
    *(void *)(v41 + 16) = MEMORY[0x263F8EE78];
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v43 = swift_allocObject();
    *(_DWORD *)(v43 + 16) = 0;
    *(void *)(v41 + 24) = v43;
    swift_beginAccess();
    *(void *)(v41 + 16) = v42;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
    uint64_t v44 = swift_allocObject();
    swift_weakInit();
    *(void *)(v44 + 16) = v36;
    *(void *)(v44 + 24) = a2;
    *(unsigned char *)(v44 + 32) = (_BYTE)v91;
    *(unsigned char *)(v44 + 33) = v40;
    *(_WORD *)(v44 + 34) = 1;
    *(_DWORD *)(v44 + 36) = 1;
    uint64_t v81 = v41;
    swift_weakAssign();
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v17 + 176, (uint64_t)&v96, &demangling cache variable for type metadata for USDImportService?);
    if (*((void *)&v97 + 1))
    {
      uint64_t v79 = v39;
      uint64_t v45 = v90;
      outlined init with take of BindableDataInternal(&v96, (uint64_t)&v100);
      uint64_t v46 = v101;
      uint64_t v47 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, v101);
      Swift::Bool v48 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v47 + 16);
      swift_bridgeObjectRetain();
      if (v48(v36, a2, v93, v46, v47))
      {
        uint64_t v49 = v85;
        uint64_t v50 = *(void *)(v85 + 56);
        if (v50)
        {
          uint64_t v51 = v50 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
          *(void *)uint64_t v51 = 1;
          *(unsigned char *)(v51 + 8) = 0;
        }
        outlined init with copy of Entity.__LoadOptions(v49, (uint64_t)&v96);
        outlined init with copy of __REAssetService((uint64_t)&v100, (uint64_t)v95);
        uint64_t v52 = swift_allocObject();
        *(void *)(v52 + 16) = v36;
        *(void *)(v52 + 24) = a2;
        id v53 = v93;
        *(void *)(v52 + 32) = v93;
        *(unsigned char *)(v52 + 40) = v89;
        *(void *)(v52 + 48) = v86;
        *(void *)(v52 + 56) = v44;
        long long v54 = v97;
        *(_OWORD *)(v52 + 64) = v96;
        *(_OWORD *)(v52 + 80) = v54;
        long long v55 = v99;
        *(_OWORD *)(v52 + 96) = v98;
        *(_OWORD *)(v52 + 112) = v55;
        outlined init with take of BindableDataInternal(v95, v52 + 128);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
        uint64_t v56 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
        uint64_t v57 = swift_allocObject();
        uint64_t v58 = swift_allocObject();
        *(_DWORD *)(v58 + 16) = 0;
        *(void *)(v57 + 16) = v58;
        *(void *)(v57 + 24) = 0;
        *(unsigned char *)(v57 + 32) = -1;
        *(void *)(v56 + 16) = v57;
        Swift::String v59 = (void *)swift_allocObject();
        v59[2] = partial apply for closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:);
        void v59[3] = v52;
        uint64_t v60 = v81;
        v59[4] = v57;
        v59[5] = v60;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
        swift_allocObject();
        swift_bridgeObjectRetain();
        id v61 = v53;
        swift_retain();
        swift_retain();
        swift_retain();
        *(void *)(v56 + 24) = Future.init(_:)();
        uint64_t v62 = v88;
        _s17RealityFoundation9LoadTraceVWOcTm_0(v82, v88, type metadata accessor for LoadTrace);
        specialized LoadTracer.subscribe<A>(to:with:)(v56, v62);

        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of LoadTrace(v62, type metadata accessor for LoadTrace);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        goto LABEL_19;
      }
      uint64_t v89 = v17;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      uint64_t v64 = v45;
      uint64_t v39 = v79;
      uint64_t v63 = v85;
    }
    else
    {
      uint64_t v89 = v17;
      swift_bridgeObjectRetain();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v96, &demangling cache variable for type metadata for USDImportService?);
      uint64_t v63 = v85;
      uint64_t v64 = v90;
    }
    outlined init with copy of Entity.__LoadOptions(v63, (uint64_t)&v96);
    uint64_t v65 = swift_allocObject();
    id v66 = v87;
    *(void *)(v65 + 16) = v87;
    *(unsigned char *)(v65 + 24) = (_BYTE)v91;
    long long v67 = v97;
    *(_OWORD *)(v65 + 32) = v96;
    *(_OWORD *)(v65 + 48) = v67;
    long long v68 = v99;
    *(_OWORD *)(v65 + 64) = v98;
    *(_OWORD *)(v65 + 80) = v68;
    id v69 = v83;
    *(void *)(v65 + 96) = v39;
    *(void *)(v65 + 104) = v69;
    *(void *)(v65 + 112) = v92;
    *(void *)(v65 + 120) = v44;
    *(void *)(v65 + 128) = v94;
    *(void *)(v65 + 136) = a2;
    uint64_t v94 = a2;
    *(void *)(v65 + 144) = v93;
    *(void *)(v65 + 152) = v64;
    *(void *)(v65 + 160) = v86;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
    uint64_t v56 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
    uint64_t v70 = swift_allocObject();
    uint64_t v71 = swift_allocObject();
    *(_DWORD *)(v71 + 16) = 0;
    *(void *)(v70 + 16) = v71;
    *(void *)(v70 + 24) = 0;
    *(unsigned char *)(v70 + 32) = -1;
    *(void *)(v56 + 16) = v70;
    int v72 = (void *)swift_allocObject();
    v72[2] = partial apply for closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:);
    v72[3] = v65;
    uint64_t v73 = v81;
    v72[4] = v70;
    v72[5] = v73;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_retain();
    id v91 = v66;
    id v74 = v69;
    swift_retain();
    swift_bridgeObjectRetain();
    id v75 = v93;
    swift_retain();
    swift_retain();
    *(void *)(v56 + 24) = Future.init(_:)();
    uint64_t v76 = v82;
    swift_beginAccess();
    uint64_t v77 = v88;
    _s17RealityFoundation9LoadTraceVWOcTm_0(v76, v88, type metadata accessor for LoadTrace);
    specialized LoadTracer.subscribe<A>(to:with:)(v56, v77);

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    outlined destroy of LoadTrace(v77, type metadata accessor for LoadTrace);
LABEL_19:
    swift_release();
    return v56;
  }
  __break(1u);
  return result;
}

uint64_t static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v150 = a3;
  uint64_t v134 = a2;
  uint64_t v132 = type metadata accessor for URL();
  uint64_t v131 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  uint64_t v128 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = v8;
  MEMORY[0x270FA5388](v9);
  unsigned __int32 v146 = (char *)&v126 - v10;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace);
  uint64_t v143 = (uint64_t)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x270FA5388](v13 - 8);
  id v15 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v141 = *(void *)(Information - 8);
  MEMORY[0x270FA5388](Information);
  uint64_t v130 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v142 = (void (*)(char *, uint64_t, uint64_t))((char *)&v126 - v18);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (uint64_t *)((char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v148) = *a5;
  uint64_t v147 = a4;
  int v149 = *(unsigned __int8 *)(a4 + 48);
  uint64_t v23 = specialized static __ServiceLocator.shared.getter();
  Swift::String v24 = *(void **)(*(void *)(v23 + 168) + 16);
  swift_beginAccess();
  uint64_t v25 = *(void *)(v23 + 24);
  swift_unownedRetainStrong();
  Swift::String v26 = *(void **)(v25 + 32);
  swift_retain();
  id v145 = v24;
  id v27 = v26;
  swift_release();
  uint64_t v28 = *(void *)(*(void *)(v23 + 168) + 32);
  *uint64_t v22 = v27;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x263F8F0E0], v19);
  id v29 = v27;
  swift_retain();
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if (v27)
  {
    uint64_t v151 = v28;
    id v136 = v29;
    uint64_t v31 = *(void *)(*(void *)(v23 + 168) + 24);
    uint64_t v139 = swift_allocBox();
    uint64_t v33 = v32;
    swift_retain();
    uint64_t v34 = URL.lastPathComponent.getter();
    uint64_t v137 = v33;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v34, v35, v33);
    swift_bridgeObjectRelease();
    type metadata accessor for LoadRequestDependencies();
    uint64_t v36 = swift_allocObject();
    uint64_t v37 = MEMORY[0x263F8EE78];
    *(void *)(v36 + 16) = MEMORY[0x263F8EE78];
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v39 = swift_allocObject();
    *(_DWORD *)(v39 + 16) = 0;
    *(void *)(v36 + 24) = v39;
    swift_beginAccess();
    *(void *)(v36 + 16) = v37;
    swift_bridgeObjectRelease();
    uint64_t v40 = URL.absoluteString.getter();
    uint64_t v42 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
    uint64_t v43 = swift_allocObject();
    swift_weakInit();
    *(void *)(v43 + 16) = v40;
    *(void *)(v43 + 24) = v42;
    *(unsigned char *)(v43 + 32) = v148;
    *(unsigned char *)(v43 + 33) = v149;
    *(_WORD *)(v43 + 34) = 1;
    *(_DWORD *)(v43 + 36) = 1;
    swift_weakAssign();
    type metadata accessor for RealityFileLoadInformationResolver();
    uint64_t v44 = a1;
    static RealityFileLoadInformationResolver.resolve(url:)(a1, (uint64_t)v15);
    uint64_t v45 = v141;
    int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48))(v15, 1, Information);
    uint64_t v138 = v31;
    uint64_t v144 = v23;
    uint64_t v135 = v38;
    if (v46 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v23 + 176, (uint64_t)&v153, &demangling cache variable for type metadata for USDImportService?);
      uint64_t v127 = v43;
      if (*((void *)&v154 + 1))
      {
        outlined init with take of BindableDataInternal(&v153, (uint64_t)&v157);
        uint64_t v47 = v158;
        uint64_t v48 = v159;
        __swift_project_boxed_opaque_existential_1(&v157, v158);
        if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 24))(v44, v47, v48))
        {
          uint64_t v141 = v36;
          uint64_t v49 = *(void *)(v147 + 56);
          uint64_t v50 = v146;
          if (v49)
          {
            uint64_t v51 = v49 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
            *(void *)uint64_t v51 = 1;
            *(unsigned char *)(v51 + 8) = 0;
          }
          uint64_t v52 = v131;
          uint64_t v53 = v132;
          (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v50, v44, v132);
          outlined init with copy of Entity.__LoadOptions(v147, (uint64_t)&v153);
          outlined init with copy of __REAssetService((uint64_t)&v157, (uint64_t)v152);
          unint64_t v54 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
          unint64_t v55 = (v126 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v148 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v57 = (v56 + 39) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v59 = swift_allocObject();
          uint64_t v60 = v151;
          *(void *)(v59 + 16) = v144;
          *(void *)(v59 + 24) = v60;
          (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v59 + v54, v50, v53);
          *(void *)(v59 + v55) = v133;
          *(void *)(v59 + v56) = v145;
          unint64_t v61 = v59 + v148;
          uint64_t v62 = v150;
          *(void *)unint64_t v61 = v134;
          *(void *)(v61 + 8) = v62;
          *(unsigned char *)(v61 + 16) = v149;
          *(void *)(v59 + v57) = v127;
          uint64_t v63 = (_OWORD *)(v59 + v58);
          long long v64 = v154;
          _OWORD *v63 = v153;
          v63[1] = v64;
          long long v65 = v156;
          v63[2] = v155;
          void v63[3] = v65;
          outlined init with take of BindableDataInternal(v152, v59 + ((v58 + 71) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v66 = swift_allocObject();
          *(void *)(v66 + 16) = partial apply for closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
          *(void *)(v66 + 24) = v59;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
          uint64_t v67 = swift_allocObject();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
          uint64_t v68 = swift_allocObject();
          uint64_t v69 = swift_allocObject();
          *(_DWORD *)(v69 + 16) = 0;
          *(void *)(v68 + 16) = v69;
          *(void *)(v68 + 24) = 0;
          *(unsigned char *)(v68 + 32) = -1;
          *(void *)(v67 + 16) = v68;
          uint64_t v70 = (void *)swift_allocObject();
          v70[2] = _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA;
          v70[3] = v66;
          uint64_t v71 = v141;
          v70[4] = v68;
          uint64_t v70[5] = v71;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
          swift_allocObject();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          id v72 = v145;
          swift_retain();
          *(void *)(v67 + 24) = Future.init(_:)();
          uint64_t v73 = v143;
          _s17RealityFoundation9LoadTraceVWOcTm_0(v137, v143, type metadata accessor for LoadTrace);
          specialized LoadTracer.subscribe<A>(to:with:)(v67, v73);

          swift_release();
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          swift_release();
          outlined destroy of LoadTrace(v73, type metadata accessor for LoadTrace);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v157);
          goto LABEL_17;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v157);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v153, &demangling cache variable for type metadata for USDImportService?);
      }
      uint64_t v95 = v146;
      uint64_t v96 = *(void *)(v147 + 56);
      long long v97 = v128;
      if (v96)
      {
        uint64_t v98 = v96 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(void *)uint64_t v98 = 0;
        *(unsigned char *)(v98 + 8) = 0;
      }
      uint64_t v99 = v131;
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 16);
      uint64_t v100 = v132;
      v142(v95, v44, v132);
      swift_retain();
      URL._bridgeToObjectiveC()(&v160);
      uint64_t v102 = v101;
      swift_beginAccess();
      uint64_t v103 = RESceneImportOperationCreateWithURL();

      type metadata accessor for __SceneImportOperation();
      swift_allocObject();
      uint64_t v104 = __SceneImportOperation.init(core:)(v103);
      unint64_t v105 = v146;
      unint64_t v148 = v104;
      swift_release();
      unint64_t v106 = *(void (**)(char *, uint64_t))(v99 + 8);
      v106(v105, v100);
      v142(v97, v44, v100);
      unint64_t v107 = v150;
      if (v150)
      {
        swift_bridgeObjectRetain();
        uint64_t v108 = v134;
      }
      else
      {
        uint64_t v109 = v105;
        URL.deletingPathExtension()();
        uint64_t v108 = URL.lastPathComponent.getter();
        unint64_t v107 = v110;
        v106(v109, v100);
      }
      uint64_t v111 = v147;
      v106(v97, v100);
      v112.value._uint64_t countAndFlagsBits = v108;
      v112.value._object = v107;
      unint64_t v113 = v148;
      __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v112, 0, v149, (Swift::Bool_optional)2);
      swift_bridgeObjectRelease();
      RESceneImportOperationSetIsolateFromEngine();
      outlined init with copy of Entity.__LoadOptions(v111, (uint64_t)&v153);
      uint64_t v114 = swift_allocObject();
      id v115 = v136;
      *(void *)(v114 + 16) = v113;
      *(void *)(v114 + 24) = v115;
      uint64_t v116 = v127;
      *(void *)(v114 + 32) = v151;
      *(void *)(v114 + 40) = v116;
      long long v117 = v154;
      *(_OWORD *)(v114 + 48) = v153;
      *(_OWORD *)(v114 + 64) = v117;
      long long v118 = v156;
      *(_OWORD *)(v114 + 80) = v155;
      *(_OWORD *)(v114 + 96) = v118;
      id v119 = v145;
      *(void *)(v114 + 112) = v145;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
      uint64_t v67 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
      uint64_t v120 = swift_allocObject();
      uint64_t v121 = swift_allocObject();
      *(_DWORD *)(v121 + 16) = 0;
      *(void *)(v120 + 16) = v121;
      *(void *)(v120 + 24) = 0;
      *(unsigned char *)(v120 + 32) = -1;
      *(void *)(v67 + 16) = v120;
      long long v122 = (void *)swift_allocObject();
      v122[2] = partial apply for closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
      v122[3] = v114;
      v122[4] = v120;
      v122[5] = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
      swift_allocObject();
      id v123 = v119;
      id v124 = v115;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      *(void *)(v67 + 24) = Future.init(_:)();
      uint64_t v125 = v143;
      _s17RealityFoundation9LoadTraceVWOcTm_0(v137, v143, type metadata accessor for LoadTrace);
      specialized LoadTracer.subscribe<A>(to:with:)(v67, v125);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      outlined destroy of LoadTrace(v125, type metadata accessor for LoadTrace);
      goto LABEL_17;
    }
    id v74 = v142;
    outlined init with take of RealityFileLoadInformation((uint64_t)v15, (uint64_t)v142, type metadata accessor for RealityFileLoadInformation);
    outlined init with copy of Entity.__LoadOptions(v147, (uint64_t)&v153);
    uint64_t v75 = v130;
    _s17RealityFoundation9LoadTraceVWOcTm_0((uint64_t)v74, v130, type metadata accessor for RealityFileLoadInformation);
    unint64_t v76 = (*(unsigned __int8 *)(v45 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v77 = (v129 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v141 = v36;
    unint64_t v79 = (v78 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v81 = swift_allocObject();
    uint64_t v82 = v150;
    *(void *)(v81 + 16) = v134;
    *(void *)(v81 + 24) = v82;
    *(unsigned char *)(v81 + 32) = v148;
    long long v83 = v154;
    *(_OWORD *)(v81 + 40) = v153;
    *(_OWORD *)(v81 + 56) = v83;
    long long v84 = v156;
    *(_OWORD *)(v81 + 72) = v155;
    *(_OWORD *)(v81 + 88) = v84;
    *(void *)(v81 + 104) = v151;
    outlined init with take of RealityFileLoadInformation(v75, v81 + v76, type metadata accessor for RealityFileLoadInformation);
    *(void *)(v81 + v77) = v139;
    id v85 = v136;
    *(void *)(v81 + v78) = v136;
    *(void *)(v81 + v79) = v133;
    *(void *)(v81 + v80) = v43;
    id v86 = v145;
    *(void *)(v81 + ((v80 + 15) & 0xFFFFFFFFFFFFFFF8)) = v145;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
    uint64_t v67 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
    uint64_t v87 = swift_allocObject();
    uint64_t v88 = swift_allocObject();
    *(_DWORD *)(v88 + 16) = 0;
    *(void *)(v87 + 16) = v88;
    *(void *)(v87 + 24) = 0;
    *(unsigned char *)(v87 + 32) = -1;
    *(void *)(v67 + 16) = v87;
    uint64_t v89 = (void *)swift_allocObject();
    v89[2] = partial apply for closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    v89[3] = v81;
    uint64_t v90 = v141;
    v89[4] = v87;
    v89[5] = v90;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v91 = v86;
    id v92 = v85;
    swift_retain();
    *(void *)(v67 + 24) = Future.init(_:)();
    uint64_t v93 = v137;
    swift_beginAccess();
    uint64_t v94 = v143;
    _s17RealityFoundation9LoadTraceVWOcTm_0(v93, v143, type metadata accessor for LoadTrace);
    specialized LoadTracer.subscribe<A>(to:with:)(v67, v94);

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    outlined destroy of LoadTrace(v94, type metadata accessor for LoadTrace);
    outlined destroy of LoadTrace((uint64_t)v142, type metadata accessor for RealityFileLoadInformation);
LABEL_17:
    swift_release();
    return v67;
  }
  __break(1u);
  return result;
}

unint64_t Entity.LoadError.errorDescription.getter()
{
  unint64_t v1 = 0xD000000000000030;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Error = type metadata accessor for Entity.LoadError(0);
  MEMORY[0x270FA5388](Error);
  uint64_t v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s17RealityFoundation9LoadTraceVWOcTm_0(v0, (uint64_t)v8, type metadata accessor for Entity.LoadError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD00000000000001ELL;
      unint64_t v37 = 0x800000022835C7F0;
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      unint64_t v15 = 34;
      unint64_t v16 = 0xE100000000000000;
      goto LABEL_6;
    case 2u:
      uint64_t v17 = *v8;
      uint64_t v18 = (void *)v8[1];
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(98);
      v19._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v19._object = (void *)0x800000022835C700;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = v17;
      v20._object = v18;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD000000000000043;
      uint64_t v21 = "\" by name; use the name of a scene in that file to load that entity";
      goto LABEL_9;
    case 3u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(104);
      v22._uint64_t countAndFlagsBits = 0xD000000000000022;
      v22._object = (void *)0x800000022835C680;
      String.append(_:)(v22);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD000000000000044;
      unint64_t v16 = 0x800000022835C6B0;
LABEL_6:
      String.append(_:)(*(Swift::String *)&v15);
      unint64_t v1 = v36;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return v1;
    case 4u:
      uint64_t v24 = *v8;
      uint64_t v25 = (void *)v8[1];
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD000000000000020;
      unint64_t v37 = 0x800000022835C5E0;
      v26._uint64_t countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      return v36;
    case 5u:
      uint64_t v27 = *v8;
      uint64_t v28 = (void *)v8[1];
      uint64_t v30 = v8[2];
      id v29 = (void *)v8[3];
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(84);
      v31._uint64_t countAndFlagsBits = 0xD000000000000019;
      v31._object = (void *)0x800000022835C4F0;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = v27;
      v32._object = v28;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 0xD000000000000017;
      v33._object = (void *)0x800000022835C510;
      String.append(_:)(v33);
      v34._uint64_t countAndFlagsBits = v30;
      v34._object = v29;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD000000000000020;
      uint64_t v21 = "' was also explicitly requested.";
LABEL_9:
      unint64_t v13 = (unint64_t)(v21 - 32) | 0x8000000000000000;
      goto LABEL_10;
    case 6u:
      return 0xD000000000000031;
    case 7u:
    case 8u:
    case 0xBu:
      return v1;
    case 9u:
      return 0xD000000000000022;
    case 0xAu:
      return 0xD000000000000037;
    default:
      uint64_t v9 = *v8;
      uint64_t v10 = (void *)v8[1];
      unint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD000000000000023;
      unint64_t v37 = 0x800000022834FB10;
      v11._uint64_t countAndFlagsBits = v9;
      v11._object = v10;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0x6E7562206E692022;
      unint64_t v13 = 0xEB00000000656C64;
LABEL_10:
      String.append(_:)(*(Swift::String *)&v12);
      return v36;
  }
}

uint64_t one-time initialization function for synchronousLoadOptions()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2))
  {
    if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1) {
      swift_once();
    }
    uint64_t v3 = static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits;
    if (*(void *)(static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits + 16)
      && (Hasher.init(_seed:)(),
          String.hash(into:)(),
          Swift::Int v4 = Hasher._finalize()(),
          uint64_t v5 = -1 << *(unsigned char *)(v3 + 32),
          unint64_t v6 = v4 & ~v5,
          ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
    {
      uint64_t v7 = ~v5;
      while (2)
      {
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v6))
        {
          case 8:
            swift_bridgeObjectRelease();
            char v8 = 1;
            break;
          default:
            char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v8 & 1) == 0)
            {
              unint64_t v6 = (v6 + 1) & v7;
              if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
                continue;
              }
            }
            break;
        }
        break;
      }
    }
    else
    {
      char v8 = 0;
    }
    char v9 = v8 & 1;
  }
  else
  {
    char v9 = 2;
  }
  static Entity.synchronousLoadOptions = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

unsigned char *Entity.__AsyncLoadOptions.init(resourceSharingScheduling:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t one-time initialization function for asynchronousLoadOptions()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v5);
  uint64_t v1 = v6;
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2)) {
    char v3 = 0;
  }
  else {
    char v3 = 2;
  }
  static Entity.asynchronousLoadOptions = v3;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

id static Entity.load(named:in:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v97 = a1;
  id v98 = a2;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace - 8);
  uint64_t v89 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v87 = (uint64_t)&v86 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v96 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v90 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (uint64_t *)((char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v17 = swift_allocObject();
  Date.init()();
  uint64_t v18 = v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v18 = 0;
  uint64_t v88 = (void *)v18;
  *(unsigned char *)(v18 + 8) = 2;
  *(void *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  uint64_t v91 = v17;
  Swift::String v19 = (void *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *Swift::String v19 = 0xD000000000000016;
  v19[1] = 0x800000022835C180;
  Swift::String v20 = (void *)v11;
  if (a3) {
    id v95 = a3;
  }
  else {
    id v95 = objc_msgSend(self, sel_mainBundle);
  }
  id v21 = a3;
  Swift::String v22 = (void *)specialized static __ServiceLocator.shared.getter();
  uint64_t v23 = *(void *)(v22[21] + 32);
  swift_beginAccess();
  uint64_t v24 = v22[3];
  swift_unownedRetainStrong();
  uint64_t v25 = *(void **)(v24 + 32);
  uint64_t v116 = v22;
  swift_retain();
  uint64_t v92 = v23;
  swift_retain();
  id v26 = v25;
  swift_release();
  *unint64_t v16 = v26;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F0E0], v13);
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v24)
  {
    Swift::String v22 = v20;
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  int v27 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  char v28 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  uint64_t v30 = v97;
  id v31 = v98;
  *(void *)(inited + 16) = v97;
  *(void *)(inited + 24) = v31;
  *(unsigned char *)(inited + 32) = v27;
  *(unsigned char *)(inited + 33) = v28;
  *(_WORD *)(inited + 34) = 1;
  uint64_t v94 = inited;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  type metadata accessor for LoadUtilities();
  uint64_t v32 = one-time initialization token for usdExtensions;
  swift_bridgeObjectRetain();
  id v33 = v95;
  if (v32 != -1) {
    swift_once();
  }
  static LoadUtilities.getURL(name:in:allowingExtensions:)(v30, (uint64_t)v31, v33, (void *)static LoadUtilities.usdExtensions, v10);
  uint64_t v34 = v96;
  if ((*(unsigned int (**)(char *, uint64_t, void *))(v96 + 48))(v10, 1, v22) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
    uint64_t v35 = *(void *)(v116[21] + 24);
    uint64_t v107 = 0;
    *(void *)&long long v108 = 0xE000000000000000;
    uint64_t v96 = v35;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v107 = v30;
    *(void *)&long long v108 = v31;
    v36._uint64_t countAndFlagsBits = 0x7562206D6F726620;
    v36._object = (void *)0xED000020656C646ELL;
    String.append(_:)(v36);
    id v37 = objc_msgSend(v33, sel_bundleIdentifier);
    if (v37)
    {
      uint64_t v38 = v37;
      unint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;
    }
    else
    {
      uint64_t v41 = (void *)0x800000022835C160;
      unint64_t v39 = 0xD000000000000010;
    }
    v62._uint64_t countAndFlagsBits = v39;
    v62._object = v41;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = v89;
    LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v107, v108, v89);
    swift_bridgeObjectRelease();
    memset(v112, 0, 25);
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    v112[25] = 1;
    uint64_t v114 = 0;
    uint64_t v113 = 0;
    LOBYTE(v107) = 2;
    v112[27] = v27 != 2;
    v112[26] = (v27 & 0xFE) != 2;
    uint64_t v115 = v91;
    swift_retain();
    uint64_t v64 = v93;
    __SceneResourceCache.findSceneResource(named:bundle:options:)(v97, (uint64_t)v98, v33, (uint64_t)&v107, (uint64_t)&v102);
    if (v64)
    {
      outlined destroy of LoadTrace(v63, type metadata accessor for LoadTrace);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      if (v103)
      {
        outlined init with take of BindableDataInternal(&v102, (uint64_t)&v104);
        outlined init with copy of __REAssetService((uint64_t)&v104, (uint64_t)&v102);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
        swift_dynamicCast();
        uint64_t v66 = v100;
        uint64_t v67 = v101;
        __swift_project_boxed_opaque_existential_1(v99, v100);
        id v33 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v66, v67);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        uint64_t v80 = v105;
        uint64_t v81 = v106;
        __swift_project_boxed_opaque_existential_1(&v104, v105);
        char v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 16))(v80, v81);
        uint64_t v83 = v89;
        *(unsigned char *)(v89 + 16) = v82 & 1;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
        uint64_t v84 = swift_retain();
        specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)(v84);
        static Entity.loadReferences(root:)((uint64_t)v33);
        LoadTracer.endLoad(of:with:)((uint64_t)v33, v83);
        Entity.LoadStatistics.log()();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of LoadTrace(v83, type metadata accessor for LoadTrace);
        outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v107);
        return v33;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)&v102, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      swift_allocError();
      id v71 = v98;
      void *v72 = v97;
      v72[1] = v71;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of LoadTrace(v89, type metadata accessor for LoadTrace);
    }
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v107);
  }
  else
  {
    uint64_t v42 = (uint64_t)v90;
    (*(void (**)(char *, char *, void *))(v34 + 32))(v90, v10, v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v43 = v34;
    uint64_t v44 = swift_initStackObject();
    *(_OWORD *)(v44 + 16) = xmmword_22831E320;
    uint64_t v45 = MEMORY[0x263F8D310];
    *(void *)(v44 + 32) = 1701869940;
    *(void *)(v44 + 40) = 0xE400000000000000;
    strcpy((char *)(v44 + 48), "LoadFromBundle");
    *(unsigned char *)(v44 + 63) = -18;
    *(void *)(v44 + 72) = v45;
    *(void *)(v44 + 80) = 0x73746E65746E6F63;
    *(void *)(v44 + 88) = 0xEA0000000000664FLL;
    *(void *)(v44 + 120) = v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v44 + 96));
    (*(void (**)(uint64_t *, uint64_t, void *))(v43 + 16))(boxed_opaque_existential_1, v42, v22);
    *(void *)(v44 + 128) = 0x64656D616ELL;
    *(void *)(v44 + 136) = 0xE500000000000000;
    *(void *)(v44 + 144) = v30;
    *(void *)(v44 + 152) = v31;
    *(void *)(v44 + 168) = v45;
    *(void *)(v44 + 176) = 0x656C646E7562;
    *(void *)(v44 + 184) = 0xE600000000000000;
    uint64_t v47 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
    *(void *)(v44 + 192) = v33;
    *(void *)(v44 + 216) = v47;
    *(void *)(v44 + 224) = 0xD000000000000015;
    *(void *)(v44 + 232) = 0x800000022835C1A0;
    char v48 = static RKARSystemCore.generateDecimatedMeshes;
    *(void *)(v44 + 264) = MEMORY[0x263F8D4F8];
    *(unsigned char *)(v44 + 240) = v48;
    swift_bridgeObjectRetain();
    id v49 = v33;
    unint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(v44);
    uint64_t v51 = (uint64_t)(v116 + 22);
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v51, (uint64_t)&v104, &demangling cache variable for type metadata for USDImportService?);
    if (v105)
    {
      outlined init with take of BindableDataInternal(&v104, (uint64_t)&v107);
      uint64_t v52 = v109;
      id v33 = v31;
      uint64_t v53 = *((void *)&v109 + 1);
      __swift_project_boxed_opaque_existential_1(&v107, v109);
      if ((*(uint64_t (**)(uint64_t, id, id, uint64_t, uint64_t))(v53 + 16))(v30, v33, v49, v52, v53))
      {
        id v95 = v22;
        unint64_t v54 = v88;
        *uint64_t v88 = 1;
        *((unsigned char *)v54 + 8) = 0;
        *(void *)&long long v104 = 0;
        *((void *)&v104 + 1) = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)&long long v104 = v30;
        *((void *)&v104 + 1) = v33;
        v55._uint64_t countAndFlagsBits = 0x7562206D6F726620;
        v55._object = (void *)0xED000020656C646ELL;
        String.append(_:)(v55);
        id v98 = v49;
        id v56 = objc_msgSend(v49, sel_bundleIdentifier);
        if (v56)
        {
          unint64_t v57 = v56;
          unint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v59;

          uint64_t v61 = v87;
        }
        else
        {
          uint64_t v60 = (void *)0x800000022835C160;
          uint64_t v61 = v87;
          unint64_t v58 = 0xD000000000000010;
        }
        v73._uint64_t countAndFlagsBits = v58;
        v73._object = v60;
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v104, *((uint64_t *)&v104 + 1), v61);
        swift_bridgeObjectRelease();
        uint64_t v74 = *((void *)&v109 + 1);
        id v33 = (id)v109;
        __swift_project_boxed_opaque_existential_1(&v107, v109);
        uint64_t v75 = v93;
        uint64_t v76 = (*(uint64_t (**)(unint64_t, id, uint64_t))(v74 + 32))(v50, v33, v74);
        if (v75)
        {
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          outlined destroy of LoadTrace(v61, type metadata accessor for LoadTrace);
          (*(void (**)(char *, id))(v96 + 8))(v90, v95);
        }
        else
        {
          id v33 = (id)v76;
          swift_bridgeObjectRelease();
          specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)((uint64_t)v33);
          specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v33, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
          unint64_t v77 = (void (**)(char *, id))(v96 + 8);
          unint64_t v78 = v90;
          uint64_t v97 = 0;
          uint64_t v85 = v87;
          LoadTracer.endLoad(of:with:)((uint64_t)v33, v87);
          Entity.LoadStatistics.log()();
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of LoadTrace(v85, type metadata accessor for LoadTrace);
          (*v77)(v78, v95);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
        return v33;
      }
      long long v65 = v49;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
      uint64_t v42 = (uint64_t)v90;
    }
    else
    {
      long long v65 = v49;
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v104, &demangling cache variable for type metadata for USDImportService?);
    }
    uint64_t v68 = v88;
    *uint64_t v88 = 0;
    *((unsigned char *)v68 + 8) = 0;
    Entity.LoadStatistics.log()();
    uint64_t v69 = v93;
    uint64_t v70 = static Entity.load(contentsOf:withName:)(v42, 0, 0);
    if (!v69) {
      id v33 = (id)v70;
    }
    (*(void (**)(uint64_t, void *))(v96 + 8))(v42, v22);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return v33;
}