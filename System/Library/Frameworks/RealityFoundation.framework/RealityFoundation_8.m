BOOL Entity.__AsyncLoadOptions.loadOnResourceSharingClients.getter()
{
  unsigned __int8 *v0;

  return *v0 != 2;
}

BOOL Entity.__AsyncLoadOptions.waitForResourceSharingClients.getter()
{
  return (*v0 & 0xFE) != 2;
}

uint64_t static Entity.loadReferences(root:)(uint64_t a1)
{
  unint64_t v2 = static Entity.enumerateReferences(root:)(a1);
  unint64_t v3 = v2;
  if (v2 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      unint64_t v12 = v3 & 0xC000000000000001;
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if (v12)
        {
          uint64_t v7 = MEMORY[0x22A689930](v5 - 4, v3);
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v3 + 8 * v5);
          swift_retain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        swift_retain();
        if (REEntityGetComponent())
        {
          ReferenceComponent.init(from:)((uint64_t)v11);
          swift_release();
          char v9 = v11[33];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v9 & 1) == 0)
          {
            static ReferenceComponent.loadReference(at:)(v7);
            if (v1)
            {
              swift_release();
              return swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          swift_release();
        }
        swift_release();
        ++v5;
      }
      while (v8 != v4);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t static Entity.load(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v7 = swift_allocObject();
  Date.init()();
  uint64_t v8 = v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 2;
  *(void *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  char v9 = (void *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *char v9 = 0xD000000000000021;
  v9[1] = 0x800000022835C1C0;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  LOWORD(v16) = 512;
  *((void *)&v16 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v17, (uint64_t)&v13);
  *((void *)&v15 + 1) = 0;
  v19[0] = v13;
  v19[1] = v14;
  v19[2] = (unint64_t)v15;
  long long v20 = v16;
  swift_retain();
  swift_release();
  *((void *)&v20 + 1) = v7;
  uint64_t v10 = specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v19);
  uint64_t v11 = v10;
  if (!v3)
  {
    static Entity.loadReferences(root:)(v10);
    Entity.LoadStatistics.log()();
  }
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)v19);
  return v11;
}

uint64_t static Entity.loadAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  char v6 = static RKARSystemCore.generateDecimatedMeshes;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  LOWORD(v12) = 512;
  *((void *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((void *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  long long v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  uint64_t v7 = static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15, (unsigned __int8 *)&v9);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadAsync(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  long long v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  uint64_t v8 = static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16, (unsigned __int8 *)&v10);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t Entity.__LoadOptions.init(downsamplingStrategy:realityPerformanceReport:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_WORD *)(a3 + 48) = 512;
  *(void *)(a3 + 56) = 0;
  uint64_t result = outlined assign with take of __DownsamplingStrategy?(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

Swift::Void __swiftcall __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(Swift::String_optional resourceName, Swift::Bool mergeEntities, Swift::Bool generateDecimatedMesh, Swift::Bool_optional reorderVertexCaching)
{
  int value = reorderVertexCaching.value;
  if (resourceName.value._object)
  {
    object = resourceName.value._object;
    uint64_t countAndFlagsBits = resourceName.value._countAndFlagsBits;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = countAndFlagsBits;
    v7._object = object;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0xD000000000000013;
    v8._object = (void *)0x800000022835CA70;
    String.append(_:)(v8);
    String.utf8CString.getter();
    RESceneImportOperationSetRootSceneAssetPath();
    swift_bridgeObjectRelease();
    swift_release();
  }
  RESceneImportOperationSetMergeIntoSingleEntity();
  RESceneImportOperationSetGenerateDecimatedMesh();
  if (value != 2) {
    RESceneImportOperationSetVertexCacheOptimize();
  }

  RESceneImportOperationSetUnitType();
}

uint64_t doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v43 = a3;
  uint64_t v35 = a1;
  uint64_t v37 = a14;
  uint64_t v36 = a13;
  uint64_t v34 = a10;
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  v38 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v21 - 8);
  uint64_t v41 = v21;
  MEMORY[0x270FA5388](v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)v46);
  uint64_t v24 = swift_allocObject();
  long long v25 = v46[1];
  *(_OWORD *)(v24 + 24) = v46[0];
  *(_OWORD *)(v24 + 40) = v25;
  long long v26 = v46[3];
  *(_OWORD *)(v24 + 56) = v46[2];
  *(unsigned char *)(v24 + 16) = a4;
  *(_OWORD *)(v24 + 72) = v26;
  *(void *)(v24 + 88) = a6;
  *(void *)(v24 + 96) = a7;
  *(void *)(v24 + 104) = a8;
  *(void *)(v24 + 112) = a9;
  *(void *)(v24 + 120) = v35;
  *(void *)(v24 + 128) = a2;
  *(void *)(v24 + 136) = v34;
  *(void *)(v24 + 144) = a11;
  uint64_t v27 = v36;
  *(void *)(v24 + 152) = a12;
  *(void *)(v24 + 160) = v27;
  *(void *)(v24 + 168) = v37;
  aBlock[4] = partial apply for closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_533;
  v28 = _Block_copy(aBlock);
  swift_retain();
  id v29 = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v30 = a12;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v32 = v38;
  uint64_t v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v23, v32, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v41);
  return swift_release();
}

uint64_t closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v57 = a7;
  uint64_t v58 = a8;
  uint64_t v56 = a6;
  uint64_t v59 = a4;
  int v17 = a1;
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void *)(v18 - 8);
  uint64_t v64 = v18;
  MEMORY[0x270FA5388](v18);
  v60 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v20 - 8);
  uint64_t v62 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LoadTrace(0);
  uint64_t v23 = swift_projectBox();
  memset(v85, 0, 25);
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  v85[25] = 1;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  LOBYTE(aBlock) = 1;
  v85[26] = (a1 & 0xFE) != 2;
  v85[27] = v17 != 2;
  uint64_t v88 = *(void *)(a2 + 56);
  swift_retain();
  outlined assign with copy of __DownsamplingStrategy?(a2, (uint64_t)&v82 + 8);
  if (a3)
  {
    uint64_t v24 = *(void *)(a2 + 56);
    if (v24)
    {
      uint64_t v25 = v24 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(void *)uint64_t v25 = 0;
      *(unsigned char *)(v25 + 8) = 0;
    }
    swift_retain();
    __SceneImportOperation.run()();
    if (v26)
    {
      uint64_t v27 = v26;
      swift_release();
LABEL_7:
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
      v28 = (void *)swift_allocObject();
      uint64_t v29 = v58;
      v28[2] = v57;
      v28[3] = v29;
      v28[4] = v27;
      *((void *)&v82 + 1) = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
      *(void *)&long long v83 = v28;
      uint64_t aBlock = MEMORY[0x263EF8330];
      *(void *)&long long v81 = 1107296256;
      *((void *)&v81 + 1) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(void *)&long long v82 = &block_descriptor_539_0;
      id v30 = _Block_copy(&aBlock);
      swift_retain();
      id v31 = v27;
      static DispatchQoS.unspecified.getter();
      *(void *)&long long v72 = MEMORY[0x263F8EE78];
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v32 = v60;
      uint64_t v33 = v64;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x22A689420](0, v22, v32, v30);
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v32, v33);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v62);
      return swift_release();
    }
    outlined init with copy of Entity.__LoadOptions(a2, (uint64_t)&v72);
    uint64_t v35 = swift_allocObject();
    long long v36 = v73;
    *(_OWORD *)(v35 + 40) = v72;
    *(_OWORD *)(v35 + 56) = v36;
    long long v37 = v75;
    *(_OWORD *)(v35 + 72) = v74;
    *(void *)(v35 + 16) = a3;
    *(void *)(v35 + 24) = a5;
    uint64_t v38 = v57;
    *(void *)(v35 + 32) = v56;
    *(_OWORD *)(v35 + 88) = v37;
    uint64_t v39 = v58;
    *(void *)(v35 + 104) = v38;
    *(void *)(v35 + 112) = v39;
    v70 = partial apply for closure #1 in doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    uint64_t v71 = v35;
    uint64_t v66 = MEMORY[0x263EF8330];
    uint64_t v67 = 1107296256;
    v68 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v69 = &block_descriptor_551;
    uint64_t v40 = _Block_copy(&v66);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v77[0] = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v41 = v60;
    uint64_t v42 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v22, v41, v40);
    _Block_release(v40);
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v62);
    swift_release();
  }
  else
  {
    __SceneResourceCache.findSceneResource(named:bundle:options:)(a9, a10, a11, (uint64_t)&aBlock, (uint64_t)&v72);
    if (!*((void *)&v73 + 1))
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v72, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      uint64_t v27 = (void *)swift_allocError();
      uint64_t *v54 = a9;
      v54[1] = a10;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      goto LABEL_7;
    }
    outlined init with take of BindableDataInternal(&v72, (uint64_t)v77);
    uint64_t v43 = v78;
    uint64_t v44 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    char v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
    swift_beginAccess();
    *(unsigned char *)(v23 + 16) = v45 & 1;
    outlined init with copy of __REAssetService((uint64_t)v77, (uint64_t)v76);
    outlined init with copy of Entity.__LoadOptions(a2, (uint64_t)&v72);
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = a13;
    outlined init with take of BindableDataInternal(v76, v46 + 24);
    long long v47 = v73;
    *(_OWORD *)(v46 + 72) = v72;
    *(_OWORD *)(v46 + 88) = v47;
    long long v48 = v75;
    *(_OWORD *)(v46 + 104) = v74;
    uint64_t v49 = v57;
    *(void *)(v46 + 64) = v56;
    *(_OWORD *)(v46 + 120) = v48;
    uint64_t v50 = v58;
    *(void *)(v46 + 136) = v49;
    *(void *)(v46 + 144) = v50;
    v70 = partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    uint64_t v71 = v46;
    uint64_t v66 = MEMORY[0x263EF8330];
    uint64_t v67 = 1107296256;
    v68 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v69 = &block_descriptor_545;
    v51 = _Block_copy(&v66);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v65 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v52 = v60;
    uint64_t v53 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v22, v52, v51);
    _Block_release(v51);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v62);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  }
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

BOOL *SceneResourceLoadResult.makeEntity()()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v4 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v7, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v7[0] = v2;
    v7[1] = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
  }
  return v4;
}

uint64_t closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E320;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v18 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000013;
  *(void *)(inited + 56) = 0x800000022835C9D0;
  *(void *)(inited + 72) = v18;
  *(void *)(inited + 80) = 0x64656D616ELL;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  *(void *)(inited + 120) = v18;
  *(void *)(inited + 128) = 0x656C646E7562;
  *(void *)(inited + 136) = 0xE600000000000000;
  uint64_t v19 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(inited + 144) = a5;
  *(void *)(inited + 168) = v19;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  uint64_t v20 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = a6;
  *(void *)(inited + 216) = v20;
  *(void *)(inited + 224) = 0x6C6C69666C7566;
  *(void *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a9, (uint64_t)v32);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a7;
  *(void *)(v21 + 24) = a8;
  long long v22 = v32[1];
  *(_OWORD *)(v21 + 32) = v32[0];
  *(_OWORD *)(v21 + 48) = v22;
  long long v23 = v32[3];
  *(_OWORD *)(v21 + 64) = v32[2];
  *(_OWORD *)(v21 + 80) = v23;
  *(void *)(v21 + 96) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v21 + 104) = v16;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:);
  *(void *)(v24 + 24) = v21;
  *(void *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 248) = v24;
  swift_retain();
  swift_bridgeObjectRetain();
  id v25 = a5;
  swift_retain();
  unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v27 = a10[3];
  uint64_t v28 = a10[4];
  __swift_project_boxed_opaque_existential_1(a10, v27);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 40))(v26, v27, v28);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7)
{
  if (a2) {
    return a6(a1, 1);
  }
  outlined copy of Result<ModelEntity, Error>(a1, 0);
  specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)((uint64_t)a1);
  outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)v12);
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)a1, (uint64_t)v12, (void (*)(uint64_t, void))a6, a7, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  swift_retain();
  doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v21, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);

  return swift_release();
}

uint64_t static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, a4);
}

uint64_t Entity.__LoadOptions.downsamplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (Int, URL)(v1, a1, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t Entity.__LoadOptions.downsamplingStrategy.setter(uint64_t a1)
{
  return outlined assign with take of __DownsamplingStrategy?(a1, v1);
}

uint64_t (*Entity.__LoadOptions.downsamplingStrategy.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__LoadOptions.realityPerformanceReport.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t Entity.__LoadOptions.realityPerformanceReport.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*Entity.__LoadOptions.realityPerformanceReport.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__LoadOptions.generateDecimatedMesh.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Entity.__LoadOptions.generateDecimatedMesh.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t (*Entity.__LoadOptions.generateDecimatedMesh.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__AsyncLoadOptions.loadOnResourceSharingClients.setter(uint64_t result)
{
  int v2 = *v1;
  if (result)
  {
    if (v2 != 2) {
      return result;
    }
    char v3 = 3;
  }
  else
  {
    if (v2 == 2) {
      return result;
    }
    char v3 = 2;
  }
  *uint64_t v1 = v3;
  return result;
}

unsigned __int8 **(*Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify(uint64_t a1))(unsigned __int8 **result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1 != 2;
  return Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify;
}

unsigned __int8 **Entity.__AsyncLoadOptions.loadOnResourceSharingClients.modify(unsigned __int8 **result)
{
  uint64_t v1 = *result;
  int v2 = **result;
  if (*((unsigned char *)result + 8))
  {
    if (v2 == 2) {
      *uint64_t v1 = 3;
    }
  }
  else if (v2 != 2)
  {
    *uint64_t v1 = 2;
  }
  return result;
}

uint64_t Entity.__AsyncLoadOptions.waitForResourceSharingClients.setter(uint64_t result)
{
  int v2 = *v1 & 0xFE;
  if (result)
  {
    if (v2 != 2) {
      return result;
    }
    char v3 = 0;
  }
  else
  {
    if (v2 == 2) {
      return result;
    }
    char v3 = 3;
  }
  *uint64_t v1 = v3;
  return result;
}

uint64_t (*Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*v1 & 0xFE) != 2;
  return Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify;
}

uint64_t Entity.__AsyncLoadOptions.waitForResourceSharingClients.modify(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)result;
  int v2 = **(unsigned char **)result & 0xFE;
  if (*(unsigned char *)(result + 8))
  {
    if (v2 == 2) {
      *uint64_t v1 = 0;
    }
  }
  else if (v2 != 2)
  {
    *uint64_t v1 = 3;
  }
  return result;
}

void Entity.__AsyncLoadOptions.resourceSharingScheduling.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Entity.__AsyncLoadOptions.resourceSharingScheduling.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Entity.__AsyncLoadOptions.resourceSharingScheduling.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.__AsyncLoadOptions.init(loadOnResourceSharingClients:waitForResourceSharingClients:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      *a3 = 0;
    }
    else
    {
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      swift_allocError();
      *uint64_t v4 = 0xD0000000000000ABLL;
      v4[1] = 0x800000022835C1F0;
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  else
  {
    if (result) {
      char v3 = 3;
    }
    else {
      char v3 = 2;
    }
    *a3 = v3;
  }
  return result;
}

uint64_t Entity.__AsyncLoadOptions.init(preloadAndWaitForResourceSharingClients:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result) {
    char v2 = 0;
  }
  else {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

uint64_t static Entity.__load(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  _OWORD v16[3] = v13;
  outlined assign with copy of __DownsamplingStrategy?(a4, (uint64_t)v16);
  uint64_t v8 = specialized static Entity.__load(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t static Entity.forceRetrieveGenerateDecimatedMeshes.getter()
{
  return static Entity.forceRetrieveGenerateDecimatedMeshes;
}

uint64_t static Entity.forceRetrieveGenerateDecimatedMeshes.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static Entity.forceRetrieveGenerateDecimatedMeshes = a1;
  return result;
}

uint64_t (*static Entity.forceRetrieveGenerateDecimatedMeshes.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t static Entity.loadAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  char v6 = static RKARSystemCore.generateDecimatedMeshes;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  LOWORD(v12) = 512;
  *((void *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((void *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  long long v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  uint64_t v7 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15, (unsigned __int8 *)&v9);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadAsync(contentsOf:withName:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  long long v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  uint64_t v8 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16, (unsigned __int8 *)&v10);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a7;
  int v44 = a5;
  v42[0] = a4;
  uint64_t v43 = a3;
  v42[1] = a2;
  uint64_t v56 = a13;
  uint64_t v49 = a12;
  uint64_t v48 = a11;
  uint64_t v46 = a10;
  uint64_t v45 = a9;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  v51 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v19 - 8);
  uint64_t v54 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v50 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v22 = *(void *)(Information - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](Information - 8);
  uint64_t v24 = (char *)v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a1;
  *(void *)(v25 + 24) = a2;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)v59);
  _s17RealityFoundation9LoadTraceVWOcTm_0(a8, (uint64_t)v24, type metadata accessor for RealityFileLoadInformation);
  unint64_t v26 = (*(unsigned __int8 *)(v22 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v27 = (v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v43;
  *(void *)(v31 + 24) = a4;
  *(unsigned char *)(v31 + 32) = v44;
  long long v32 = v59[1];
  *(_OWORD *)(v31 + 40) = v59[0];
  *(_OWORD *)(v31 + 56) = v32;
  long long v33 = v59[3];
  *(_OWORD *)(v31 + 72) = v59[2];
  *(_OWORD *)(v31 + 88) = v33;
  *(void *)(v31 + 104) = v47;
  outlined init with take of RealityFileLoadInformation((uint64_t)v24, v31 + v26, type metadata accessor for RealityFileLoadInformation);
  *(void *)(v31 + v27) = v45;
  uint64_t v34 = v46;
  *(void *)(v31 + v28) = v46;
  *(void *)(v31 + v29) = v48;
  *(void *)(v31 + v30) = v49;
  uint64_t v35 = (void *)(v31 + ((v30 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v35 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v35[1] = v25;
  aBlock[4] = partial apply for doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_449_0;
  long long v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v37 = v34;
  swift_retain();
  swift_retain();
  uint64_t v38 = v50;
  static DispatchQoS.unspecified.getter();
  uint64_t v57 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v40 = v51;
  uint64_t v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v38, v40, v36);
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
  return swift_release();
}

uint64_t doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v42 = a8;
  uint64_t v35 = a5;
  uint64_t v37 = a12;
  uint64_t v36 = a11;
  int v17 = a3;
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v18 - 8);
  uint64_t v44 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v39 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v20 - 8);
  uint64_t v41 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v38 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LoadTrace(0);
  uint64_t v22 = swift_projectBox();
  __int16 v55 = 256;
  long long v53 = 0u;
  memset(v54, 0, 56);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  LOBYTE(aBlock) = 1;
  v54[7] = a1;
  v54[8] = a2;
  BOOL v57 = v17 != 2;
  BOOL v56 = (a3 & 0xFE) != 2;
  uint64_t v60 = *(void *)(a4 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined assign with copy of __DownsamplingStrategy?(a4, (uint64_t)&v54[1]);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(a6, *(void *)(a6 + *(int *)(Information + 20)), *(void *)(a6 + *(int *)(Information + 20) + 8), (uint64_t)&aBlock, v49);
  uint64_t v24 = v50;
  uint64_t v25 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  swift_beginAccess();
  *(unsigned char *)(v22 + 16) = v17 & 1;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v48);
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v47);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a9;
  outlined init with take of BindableDataInternal(v48, v26 + 24);
  long long v27 = v47[1];
  *(_OWORD *)(v26 + 72) = v47[0];
  *(_OWORD *)(v26 + 88) = v27;
  long long v28 = v47[3];
  *(_OWORD *)(v26 + 104) = v47[2];
  *(void *)(v26 + 64) = a10;
  *(_OWORD *)(v26 + 120) = v28;
  uint64_t v29 = v37;
  *(void *)(v26 + 136) = v36;
  *(void *)(v26 + 144) = v29;
  _OWORD v46[4] = partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  v46[5] = v26;
  v46[0] = MEMORY[0x263EF8330];
  v46[1] = 1107296256;
  v46[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v46[3] = &block_descriptor_461;
  unint64_t v30 = _Block_copy(v46);
  swift_retain();
  swift_retain();
  uint64_t v31 = v38;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  long long v32 = v39;
  uint64_t v33 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v31, v32, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

uint64_t closure #2 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void), uint64_t a6)
{
  outlined init with copy of __REAssetService(a2, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
  swift_dynamicCast();
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v13);
  specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(v11, (uint64_t)v13, a5, a6, (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  swift_release();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v49 = a8;
  uint64_t v59 = a7;
  uint64_t v50 = a6;
  uint64_t v48 = a4;
  uint64_t v47 = a3;
  uint64_t v53 = a2;
  uint64_t v51 = a1;
  int v45 = a10;
  uint64_t v44 = a9;
  uint64_t v46 = a11;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57);
  uint64_t v52 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v43 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __n128 v18 = MEMORY[0x270FA5388](v43);
  uint64_t v19 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v16 + 16))(v19, a5, v18);
  outlined init with copy of Entity.__LoadOptions(a12, (uint64_t)v63);
  outlined init with copy of __REAssetService(a13, (uint64_t)v62);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v41 = (v20 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v20 + v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v25 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v27 + v20, v19, v43);
  unint64_t v28 = v27 + v41;
  uint64_t v29 = v44;
  *(void *)unint64_t v28 = v49;
  *(void *)(v28 + 8) = v29;
  *(unsigned char *)(v28 + 16) = v45;
  *(void *)(v27 + v21) = v47;
  *(void *)(v27 + v22) = v48;
  *(void *)(v27 + v23) = v50;
  *(void *)(v27 + v24) = v46;
  unint64_t v30 = (_OWORD *)(v27 + v25);
  long long v31 = v63[1];
  *unint64_t v30 = v63[0];
  v30[1] = v31;
  long long v32 = v63[3];
  v30[2] = v63[2];
  v30[3] = v32;
  uint64_t v33 = (void *)(v27 + v26);
  uint64_t v34 = v27 + v42;
  uint64_t v35 = v53;
  *uint64_t v33 = v51;
  v33[1] = v35;
  outlined init with take of BindableDataInternal(v62, v34);
  aBlock[4] = partial apply for closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_471_0;
  uint64_t v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v37 = v52;
  static DispatchQoS.unspecified.getter();
  uint64_t v60 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v38 = v54;
  uint64_t v39 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v37, v38, v36);
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v57);
  return swift_release();
}

uint64_t postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - v16;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v19 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)v52);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v47 = v4;
  uint64_t v48 = a3;
  if (v50 == 0x64616F4C74736F50 && v51 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
LABEL_25:
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      return swift_willThrow();
    }
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x797469746E65, 0xE600000000000000);
  if ((v22 & 1) == 0) {
    goto LABEL_25;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v21, (uint64_t)v52);
  type metadata accessor for Entity();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v23 = v50;
  if (!*(void *)(a1 + 16)
    || (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x646574726F706D69, 0xEE0073656E656353), (v25 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v24, (uint64_t)v52),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v41 = v23;
  uint64_t v26 = v50;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v52);
  uint64_t v27 = v53;
  uint64_t v28 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  __REAssetService.asManager.getter(v27, v28);
  uint64_t v29 = v26;
  uint64_t v45 = *(void *)(v30 + 88);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  uint64_t v44 = *(void *)(v26 + 16);
  if (v44)
  {
    uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    uint64_t v46 = MEMORY[0x263F8EE78];
    uint64_t v32 = v47;
    uint64_t v42 = v26;
    do
    {
      uint64_t v55 = *(void *)(v29 + 8 * v31 + 32);
      closure #1 in postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(&v55, (uint64_t)v10);
      if ((*v43)(v10, 1, v11) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      }
      else
      {
        outlined init with take of RealityFileLoadInformation((uint64_t)v10, (uint64_t)v17, type metadata accessor for __SceneImportOperation.ImportedScene);
        outlined init with take of RealityFileLoadInformation((uint64_t)v17, (uint64_t)v14, type metadata accessor for __SceneImportOperation.ImportedScene);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1, v46);
        }
        uint64_t v33 = v46;
        unint64_t v35 = *(void *)(v46 + 16);
        unint64_t v34 = *(void *)(v46 + 24);
        if (v35 >= v34 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v46);
        }
        *(void *)(v33 + 16) = v35 + 1;
        unint64_t v36 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        uint64_t v46 = v33;
        outlined init with take of RealityFileLoadInformation((uint64_t)v14, v33 + v36 + *(void *)(v12 + 72) * v35, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v29 = v42;
      }
      ++v31;
    }
    while (v44 != v31);
    swift_bridgeObjectRelease();
    uint64_t v38 = v46;
  }
  else
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    uint64_t v32 = v47;
  }
  swift_bridgeObjectRelease();
  __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v38, v52);
  swift_bridgeObjectRelease();
  if (v32) {
    return swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)(v41);
  uint64_t v39 = swift_retain();
  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(v39);
  return swift_release_n();
}

uint64_t closure #1 in postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!*(void *)(*a1 + 16)) {
    goto LABEL_20;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_20;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v4, (uint64_t)v21);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_20;
  }
  if (v19 == 0xD000000000000010 && v20 == 0x800000022835C9B0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_20;
    }
  }
  if (*(void *)(v3 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x737341656E656373, 0xEE00656D614E7465);
    if (v8)
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v7, (uint64_t)v21);
      if (swift_dynamicCast())
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
        swift_release();
        if (AssetHandle)
        {
          if (*(void *)(v3 + 16))
          {
            unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D614E656E656373, 0xE900000000000065);
            if (v11)
            {
              outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v21);
              if (swift_dynamicCast())
              {
                if (*(void *)(v3 + 16))
                {
                  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x657669746361, 0xE600000000000000);
                  if (v13)
                  {
                    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v12, (uint64_t)v21);
                    if (swift_dynamicCast())
                    {
                      type metadata accessor for __REAsset();
                      uint64_t v14 = swift_allocObject();
                      *(void *)(v14 + 16) = AssetHandle;
                      UUID.init()();
                      uint64_t v15 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
                      uint64_t v16 = (void *)(a2 + v15[5]);
                      *uint64_t v16 = v19;
                      v16[1] = v20;
                      *(void *)(a2 + v15[6]) = v14;
                      *(unsigned char *)(a2 + v15[7]) = v19;
                      return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v15 - 1) + 56))(a2, 0, 1, v15);
                    }
                  }
                }
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
    }
  }
LABEL_20:
  uint64_t v18 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
}

uint64_t closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v47 = a8;
  uint64_t v45 = a7;
  uint64_t v49 = a3;
  uint64_t v50 = a6;
  uint64_t v43 = a5;
  int v41 = a4;
  uint64_t v40 = a2;
  uint64_t v42 = a11;
  uint64_t v48 = a12;
  uint64_t v44 = a10;
  uint64_t v46 = a9;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228343FC0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v17 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000010;
  *(void *)(inited + 56) = 0x800000022835C990;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 80) = 0x73746E65746E6F63;
  *(void *)(inited + 88) = 0xEA0000000000664FLL;
  *(void *)(inited + 120) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
  v19(boxed_opaque_existential_1, a1, v13);
  *(void *)(inited + 128) = 0x656D614E68746977;
  *(void *)(inited + 136) = 0xE800000000000000;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v21 = v49;
  *(void *)(inited + 144) = v40;
  *(void *)(inited + 152) = v21;
  *(void *)(inited + 168) = v20;
  *(void *)(inited + 176) = 0xD000000000000015;
  uint64_t v22 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 184) = 0x800000022835C1A0;
  *(unsigned char *)(inited + 192) = v41;
  *(void *)(inited + 216) = v22;
  *(void *)(inited + 224) = 0x64616F4C74736F70;
  *(void *)(inited + 232) = 0xE800000000000000;
  v19((uint64_t *)((char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0)), a1, v13);
  uint64_t v23 = v42;
  unint64_t v24 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v50;
  *(void *)(v25 + 16) = v43;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = v13;
  uint64_t v28 = v44;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v25 + v24, (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v27);
  *(void *)(v25 + ((v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v45;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  *(void *)(v29 + 24) = v25;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(void *)(inited + 248) = v29;
  *(void *)(inited + 264) = v30;
  *(void *)(inited + 272) = 0x6C6C69666C7566;
  *(void *)(inited + 280) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(v46, (uint64_t)v51);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v47;
  long long v32 = v51[1];
  *(_OWORD *)(v31 + 24) = v51[0];
  *(_OWORD *)(v31 + 40) = v32;
  long long v33 = v51[3];
  *(_OWORD *)(v31 + 56) = v51[2];
  *(_OWORD *)(v31 + 72) = v33;
  *(void *)(v31 + 88) = v28;
  *(void *)(v31 + 96) = v23;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  *(void *)(v34 + 24) = v31;
  *(void *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 296) = v34;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v36 = v48[3];
  uint64_t v37 = v48[4];
  __swift_project_boxed_opaque_existential_1(v48, v36);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 40))(v35, v36, v37);
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a8;
  uint64_t v29 = a6;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v17 - 8);
  uint64_t v31 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  outlined init with copy of Entity.__LoadOptions(a7, (uint64_t)v36);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  *(void *)(v21 + 24) = a4;
  uint64_t v22 = v29;
  *(void *)(v21 + 32) = a5;
  *(void *)(v21 + 40) = v22;
  long long v23 = v36[1];
  *(_OWORD *)(v21 + 48) = v36[0];
  *(_OWORD *)(v21 + 64) = v23;
  long long v24 = v36[3];
  *(_OWORD *)(v21 + 80) = v36[2];
  *(_OWORD *)(v21 + 96) = v24;
  *(void *)(v21 + 112) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v21 + 120) = v20;
  aBlock[4] = partial apply for doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_493;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v26 = a4;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v19, v16, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
  return swift_release();
}

uint64_t doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  if (v18)
  {
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = a6;
    _OWORD v19[3] = a7;
    v19[4] = v18;
    *(void *)&long long v38 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    *((void *)&v38 + 1) = v19;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v37 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v37 + 1) = &block_descriptor_499;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_retain();
    id v21 = v18;
    static DispatchQoS.unspecified.getter();
    v35[0] = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v17, v14, v20);
    _Block_release(v20);
  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a5, (uint64_t)&aBlock);
    uint64_t v22 = swift_allocObject();
    long long v23 = v37;
    *(_OWORD *)(v22 + 40) = aBlock;
    *(_OWORD *)(v22 + 56) = v23;
    long long v24 = v39;
    *(_OWORD *)(v22 + 72) = v38;
    uint64_t v25 = v30;
    uint64_t v26 = v31;
    *(void *)(v22 + 16) = a1;
    *(void *)(v22 + 24) = v25;
    *(void *)(v22 + 32) = v26;
    *(_OWORD *)(v22 + 88) = v24;
    *(void *)(v22 + 104) = a6;
    *(void *)(v22 + 112) = a7;
    v35[4] = partial apply for closure #1 in doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:);
    v35[5] = v22;
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 1107296256;
    v35[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v35[3] = &block_descriptor_505;
    uint64_t v29 = _Block_copy(v35);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v34 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v27 = v29;
    MEMORY[0x22A689420](0, v17, v14, v29);
    _Block_release(v27);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v33);
  return swift_release();
}

void closure #1 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  __SceneImportOperation.publishToEngine()();
  if (v16)
  {
    id v24 = v16;
    a5((uint64_t)v16, 1);
  }
  else
  {
    uint64_t v27 = a3;
    uint64_t v17 = RESceneImportOperationCopySourceURL();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 0, 1, v19);
    }
    else
    {
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    }
    outlined init with take of Transform?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for URL?);
    type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v21 = __SceneImportOperation.importedScenes.getter();
      __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v21, &v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
      uint64_t v22 = v29;
      uint64_t v23 = v30;
      swift_bridgeObjectRetain();
      uint64_t v25 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v28, 0);
      uint64_t v28 = v22;
      uint64_t v29 = v23;
      swift_bridgeObjectRetain_n();
      uint64_t v26 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v25, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v26, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v25);
      outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)&v28);
      specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)v25, (uint64_t)&v28, a5, a6, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    }
  }
}

uint64_t static Entity.loadAnchor(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v69 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = v8;
  uint64_t v63 = v11;
  uint64_t v67 = v3;
  if (a3) {
    id v16 = a3;
  }
  else {
    id v16 = objc_msgSend(self, sel_mainBundle);
  }
  id v17 = a3;
  uint64_t v18 = specialized static __ServiceLocator.shared.getter();
  uint64_t v19 = *(void *)(*(void *)(v18 + 168) + 32);
  swift_beginAccess();
  uint64_t v20 = *(void *)(v18 + 24);
  swift_unownedRetainStrong();
  uint64_t v21 = *(void **)(v20 + 32);
  uint64_t v85 = v18;
  swift_retain();
  swift_retain();
  id v22 = v21;
  swift_release();
  *uint64_t v15 = v22;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v12);
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  id v24 = *(void (**)(void *, uint64_t))(v13 + 8);
  uint64_t v23 = (void *)(v13 + 8);
  v24(v15, v12);
  if (v22)
  {
    uint64_t v23 = v16;
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  int v25 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  char v26 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  uint64_t inited = swift_initStackObject();
  uint64_t v28 = swift_weakInit();
  uint64_t v29 = v69;
  *(void *)(inited + 16) = v69;
  *(void *)(inited + 24) = a2;
  int v65 = v25;
  *(unsigned char *)(inited + 32) = v25;
  *(unsigned char *)(inited + 33) = v26;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 4;
  uint64_t v66 = v28;
  swift_weakAssign();
  uint64_t v30 = v85;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v30 + 176, (uint64_t)&v83, &demangling cache variable for type metadata for USDImportService?);
  uint64_t v68 = v19;
  if (v84)
  {
    id v64 = (id)inited;
    outlined init with take of BindableDataInternal(&v83, (uint64_t)v75);
    long long v31 = v76;
    __swift_project_boxed_opaque_existential_1(v75, v76);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, void *, void, void))(*((void *)&v31 + 1) + 16);
    swift_bridgeObjectRetain();
    if (v32(v29, a2, v23, v31, *((void *)&v31 + 1)))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v33 = swift_initStackObject();
      *(_OWORD *)(v33 + 16) = xmmword_228324960;
      *(void *)(v33 + 32) = 1701869940;
      *(void *)(v33 + 40) = 0xE400000000000000;
      uint64_t v34 = MEMORY[0x263F8D310];
      *(void *)(v33 + 48) = 0xD000000000000013;
      *(void *)(v33 + 56) = 0x800000022835C2A0;
      *(void *)(v33 + 72) = v34;
      *(void *)(v33 + 80) = 0x64656D616ELL;
      *(void *)(v33 + 88) = 0xE500000000000000;
      *(void *)(v33 + 96) = v29;
      *(void *)(v33 + 104) = a2;
      *(void *)(v33 + 120) = v34;
      *(void *)(v33 + 128) = 0x656C646E7562;
      *(void *)(v33 + 136) = 0xE600000000000000;
      uint64_t v35 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
      *(void *)(v33 + 144) = v23;
      *(void *)(v33 + 168) = v35;
      *(void *)(v33 + 176) = 0xD000000000000015;
      *(void *)(v33 + 184) = 0x800000022835C1A0;
      char v36 = static RKARSystemCore.generateDecimatedMeshes;
      *(void *)(v33 + 216) = MEMORY[0x263F8D4F8];
      *(unsigned char *)(v33 + 192) = v36;
      swift_bridgeObjectRetain();
      id v37 = v23;
      uint64_t v23 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v33);
      long long v38 = v76;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      uint64_t v39 = v67;
      (*(void (**)(void *, void, void))(*((void *)&v38 + 1) + 32))(v23, v38, *((void *)&v38 + 1));
      swift_bridgeObjectRelease();
      if (!v39)
      {
        type metadata accessor for AnchorEntity();
        uint64_t v23 = (void *)swift_dynamicCastClassUnconditional();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v23, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      }
      swift_release();
      swift_release();
      swift_release();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
      return (uint64_t)v23;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v83, &demangling cache variable for type metadata for USDImportService?);
  }
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  id v40 = v23;
  uint64_t v41 = v69;
  uint64_t v42 = (void *)MEMORY[0x22A688A50](v69, a2);
  swift_bridgeObjectRelease();
  uint64_t v43 = RESceneImportOperationCreateWithBundleResource();

  if (!v43)
  {

    swift_release();
    memset(v79, 0, 25);
    long long v78 = 0u;
    long long v77 = 0u;
    long long v76 = 0u;
    *(_OWORD *)&v75[8] = 0u;
    v79[25] = 1;
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    v75[0] = 2;
    v79[27] = v65 != 2;
    v79[26] = (v65 & 0xFE) != 2;
    uint64_t v46 = v67;
    __SceneResourceCache.findSceneResource(named:bundle:options:)(v41, a2, v40, (uint64_t)v75, (uint64_t)&v73);
    if (v46)
    {
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v75);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      if (v74)
      {
        outlined init with take of BindableDataInternal(&v73, (uint64_t)&v83);
        outlined init with copy of __REAssetService((uint64_t)&v83, (uint64_t)&v73);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
        swift_dynamicCast();
        uint64_t v51 = v71;
        uint64_t v52 = v72;
        __swift_project_boxed_opaque_existential_1(v70, v71);
        uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
        specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v23);

        swift_release();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v73, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
        type metadata accessor for Entity.LoadError(0);
        _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
        swift_allocError();
        *uint64_t v58 = v41;
        v58[1] = a2;
        swift_storeEnumTagMultiPayload();
        swift_bridgeObjectRetain();
        swift_willThrow();

        swift_release();
        swift_release();
        swift_release();
      }
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v75);
    }
    return (uint64_t)v23;
  }
  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  uint64_t v44 = __SceneImportOperation.init(core:)(v43);

  swift_release();
  uint64_t v23 = *(void **)(v44 + 16);
  RESceneImportOperationSetMergeIntoSingleEntity();
  RESceneImportOperationSetGenerateDecimatedMesh();
  RESceneImportOperationSetUnitType();
  __SceneImportOperation.run()();
  if (v45)
  {
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    swift_release();
    return (uint64_t)v23;
  }
  uint64_t v47 = RESceneImportOperationCopySourceURL();
  id v64 = v40;
  if (v47)
  {
    uint64_t v48 = (void *)v47;
    uint64_t v49 = (uint64_t)v62;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v50 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 0, 1, v50);
  }
  else
  {
    uint64_t v50 = type metadata accessor for URL();
    uint64_t v49 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v62, 1, 1, v50);
  }
  uint64_t v53 = (uint64_t)v63;
  outlined init with take of Transform?(v49, (uint64_t)v63, &demangling cache variable for type metadata for URL?);
  type metadata accessor for URL();
  uint64_t v54 = *(void *)(v50 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1, v50);
  if (result != 1)
  {
    uint64_t v56 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v56, (uint64_t *)v75);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v50);
    long long v57 = *(_OWORD *)&v75[8];
    uint64_t v69 = v76;
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v57, *((void **)&v57 + 1));
    *(_OWORD *)long long v75 = v57;
    swift_bridgeObjectRetain_n();
    uint64_t v59 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v23, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v59, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v23);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v23, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    uint64_t v60 = v64;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    swift_release();
    return (uint64_t)v23;
  }
  __break(1u);
  return result;
}

void *SceneResourceLoadResult.makeAnchorEntity()()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  unint64_t v4 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v2, v3);
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    char v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
  }
  return v4;
}

uint64_t closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228343FC0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v17 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000018;
  *(void *)(inited + 56) = 0x800000022835CA30;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 80) = 0x64656D616ELL;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  *(void *)(inited + 120) = v17;
  *(void *)(inited + 128) = 0x656C646E7562;
  *(void *)(inited + 136) = 0xE600000000000000;
  uint64_t v18 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(inited + 144) = a5;
  *(void *)(inited + 168) = v18;
  *(void *)(inited + 176) = 0x64616F4C74736F70;
  *(void *)(inited + 184) = 0xE800000000000000;
  *(void *)(inited + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 224) = 0xD000000000000015;
  *(void *)(inited + 192) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(void *)(inited + 200) = 0;
  *(void *)(inited + 232) = 0x800000022835C1A0;
  swift_beginAccess();
  uint64_t v19 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 240) = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(inited + 264) = v19;
  *(void *)(inited + 272) = 0x6C6C69666C7566;
  *(void *)(inited + 280) = 0xE700000000000000;
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a7;
  v20[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v20[4] = v15;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:);
  *(void *)(v21 + 24) = v20;
  *(void *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 296) = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  id v22 = a5;
  swift_retain();
  unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v24 = a8[3];
  uint64_t v25 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v24);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 40))(v23, v24, v25);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v41 = a12;
  uint64_t v36 = a11;
  uint64_t v37 = a8;
  uint64_t v34 = a10;
  uint64_t v35 = a7;
  uint64_t v32 = a2;
  uint64_t v33 = a9;
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v21 - 8);
  uint64_t v39 = v21;
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  *(void *)(v25 + 32) = a5;
  *(void *)(v25 + 40) = a6;
  *(void *)(v25 + 48) = v35;
  *(void *)(v25 + 56) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  uint64_t v26 = v37;
  *(void *)(v25 + 64) = v24;
  *(void *)(v25 + 72) = v26;
  uint64_t v27 = v34;
  *(void *)(v25 + 80) = v33;
  *(void *)(v25 + 88) = v27;
  *(void *)(v25 + 96) = v36;
  aBlock[4] = partial apply for doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_654;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  id v29 = a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v30 = v27;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v23, v20, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v18);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v39);
  return swift_release();
}

uint64_t doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v38 = a5;
  uint64_t v41 = a3;
  int v15 = a1;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v58, 0, 25);
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  v58[25] = 1;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  LOBYTE(v53) = 1;
  v58[27] = v15 != 2;
  v58[26] = (a1 & 0xFE) != 2;
  uint64_t v42 = v23;
  uint64_t v43 = v22;
  if (!a2)
  {
    __SceneResourceCache.findSceneResource(named:bundle:options:)(a8, a9, a10, (uint64_t)&v53, (uint64_t)&v46);
    if (!v48)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v46, &demangling cache variable for type metadata for SceneResourceLoadResultBase?);
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      uint64_t v25 = (void *)swift_allocError();
      *uint64_t v37 = a8;
      v37[1] = a9;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
      goto LABEL_5;
    }
    outlined init with take of BindableDataInternal(&v46, (uint64_t)v52);
    outlined init with copy of __REAssetService((uint64_t)v52, (uint64_t)v51);
    uint64_t v33 = (void *)swift_allocObject();
    v33[2] = a11;
    outlined init with take of BindableDataInternal(v51, (uint64_t)(v33 + 3));
    uint64_t v34 = v39;
    v33[8] = v38;
    v33[9] = v34;
    v33[10] = v40;
    uint64_t v49 = partial apply for closure #1 in doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    uint64_t v50 = v33;
    *(void *)&long long v46 = MEMORY[0x263EF8330];
    *((void *)&v46 + 1) = 1107296256;
    uint64_t v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v48 = &block_descriptor_666;
    uint64_t v35 = _Block_copy(&v46);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v45 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v21, v18, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
LABEL_9:
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
    return swift_release();
  }
  swift_retain();
  __SceneImportOperation.run()();
  if (!v24)
  {
    id v30 = (void *)swift_allocObject();
    v30[2] = a2;
    v30[3] = a4;
    uint64_t v31 = v39;
    v30[4] = v38;
    v30[5] = v31;
    v30[6] = v40;
    uint64_t v49 = partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    uint64_t v50 = v30;
    *(void *)&long long v46 = MEMORY[0x263EF8330];
    *((void *)&v46 + 1) = 1107296256;
    uint64_t v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v48 = &block_descriptor_672;
    uint64_t v32 = _Block_copy(&v46);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v52[0] = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v21, v18, v32);
    _Block_release(v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v16);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
    goto LABEL_9;
  }
  uint64_t v25 = v24;
  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v53);
  swift_release();
LABEL_5:
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v40;
  v26[2] = v39;
  v26[3] = v27;
  v26[4] = v25;
  *((void *)&v55 + 1) = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  *(void *)&long long v56 = v26;
  uint64_t v53 = MEMORY[0x263EF8330];
  *(void *)&long long v54 = 1107296256;
  *((void *)&v54 + 1) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *(void *)&long long v55 = &block_descriptor_660;
  uint64_t v28 = _Block_copy(&v53);
  swift_retain();
  id v29 = v25;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v46 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v21, v18, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
  return swift_release();
}

uint64_t static Entity.loadAnchor(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v3 = specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, (void (*)(char *, uint64_t, uint64_t))v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v3;
}

uint64_t static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, uint64_t, uint64_t))
{
  return specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(a1, a2, a3, a4);
}

uint64_t static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v95 = a4;
  v111 = a3;
  uint64_t v105 = a2;
  uint64_t v112 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v104 = *(void *)(Information - 8);
  uint64_t v7 = *(void *)(v104 + 64);
  MEMORY[0x270FA5388](Information);
  uint64_t v96 = (uint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v102 = (uint64_t)&v95 - v9;
  uint64_t v100 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v100 - 8);
  uint64_t v10 = *(void *)(v99 + 64);
  MEMORY[0x270FA5388](v100);
  v97 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v98 = (char *)&v95 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = specialized static __ServiceLocator.shared.getter();
  uint64_t v18 = *(void **)(*(void *)(v17 + 168) + 16);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24);
  swift_unownedRetainStrong();
  uint64_t v20 = *(void **)(v19 + 32);
  swift_retain();
  id v110 = v18;
  id v21 = v20;
  swift_release();
  uint64_t v113 = v17;
  uint64_t v22 = *(void *)(*(void *)(v17 + 168) + 32);
  *uint64_t v16 = v21;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F0E0], v13);
  id v23 = v21;
  swift_retain();
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v21)
  {
    uint64_t v107 = v22;
    id v108 = v23;
    type metadata accessor for LoadRequestDependencies();
    uint64_t v16 = (void *)swift_allocObject();
    uint64_t v24 = MEMORY[0x263F8EE78];
    v16[2] = MEMORY[0x263F8EE78];
    uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v25 = swift_allocObject();
    *(_DWORD *)(v25 + 16) = 0;
    _OWORD v16[3] = v25;
    swift_beginAccess();
    v16[2] = v24;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v26 = static Entity.asynchronousLoadOptions;
  uint64_t v27 = v112;
  uint64_t v28 = URL.absoluteString.getter();
  uint64_t v30 = v29;
  swift_beginAccess();
  char v31 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  *(void *)(v32 + 16) = v28;
  *(void *)(v32 + 24) = v30;
  *(unsigned char *)(v32 + 32) = v26;
  *(unsigned char *)(v32 + 33) = v31;
  *(_WORD *)(v32 + 34) = 1;
  *(_DWORD *)(v32 + 36) = 4;
  swift_weakAssign();
  uint64_t v33 = v113 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v33, (uint64_t)&v114, &demangling cache variable for type metadata for USDImportService?);
  v109 = v16;
  if (v115)
  {
    outlined init with take of BindableDataInternal(&v114, (uint64_t)v116);
    uint64_t v35 = v117;
    uint64_t v34 = v118;
    __swift_project_boxed_opaque_existential_1(v116, v117);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 24))(v27, v35, v34))
    {
      uint64_t v36 = v27;
      uint64_t v37 = v99;
      uint64_t v38 = v98;
      uint64_t v39 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v36, v100);
      outlined init with copy of __REAssetService((uint64_t)v116, (uint64_t)&v114);
      unint64_t v40 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      unint64_t v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v44 + v40, v38, v39);
      uint64_t v45 = (uint64_t *)(v44 + v41);
      uint64_t v46 = (uint64_t)v111;
      *uint64_t v45 = v105;
      v45[1] = v46;
      *(void *)(v44 + v42) = v101;
      *(void *)(v44 + v43) = v32;
      outlined init with take of BindableDataInternal(&v114, v44 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
      uint64_t v47 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
      uint64_t v48 = swift_allocObject();
      uint64_t v49 = swift_allocObject();
      *(_DWORD *)(v49 + 16) = 0;
      *(void *)(v48 + 16) = v49;
      *(void *)(v48 + 24) = 0;
      *(unsigned char *)(v48 + 32) = -1;
      *(void *)(v47 + 16) = v48;
      uint64_t v50 = (void *)swift_allocObject();
      v50[2] = partial apply for closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
      v50[3] = v44;
      uint64_t v51 = v109;
      v50[4] = v48;
      v50[5] = v51;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v52 = Future.init(_:)();
      swift_release();

      swift_release();
      swift_release();
      swift_release();

      *(void *)(v47 + 24) = v52;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
      return v47;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v114, &demangling cache variable for type metadata for USDImportService?);
  }
  type metadata accessor for RealityFileLoadInformationResolver();
  static RealityFileLoadInformationResolver.resolve(url:)(v27, (uint64_t)v6);
  uint64_t v53 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v6, 1, Information) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    uint64_t v54 = v99;
    long long v55 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
    long long v56 = v98;
    uint64_t v57 = v100;
    v55(v98, v27, v100);
    swift_retain();
    URL._bridgeToObjectiveC()(v58);
    uint64_t v60 = v59;
    swift_beginAccess();
    uint64_t v61 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    uint64_t v62 = __SceneImportOperation.init(core:)(v61);
    uint64_t v63 = v56;
    swift_release();
    id v64 = *(void (**)(char *, uint64_t))(v54 + 8);
    v64(v56, v57);
    int v65 = v97;
    v55(v97, v112, v57);
    uint64_t v66 = v111;
    if (v111)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = v65;
      uint64_t v68 = v105;
    }
    else
    {
      uint64_t v67 = v65;
      URL.deletingPathExtension()();
      uint64_t v68 = URL.lastPathComponent.getter();
      uint64_t v66 = v85;
      v64(v63, v57);
    }
    v64(v67, v57);
    v86.value._uint64_t countAndFlagsBits = v68;
    v86.value._object = v66;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v86, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    RESceneImportOperationSetIsolateFromEngine();
    uint64_t v87 = (void *)swift_allocObject();
    id v88 = v108;
    v87[2] = v62;
    v87[3] = v88;
    v87[4] = v107;
    v87[5] = v32;
    v87[6] = v110;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
    uint64_t v47 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
    uint64_t v89 = swift_allocObject();
    uint64_t v90 = swift_allocObject();
    *(_DWORD *)(v90 + 16) = 0;
    *(void *)(v89 + 16) = v90;
    *(void *)(v89 + 24) = 0;
    *(unsigned char *)(v89 + 32) = -1;
    *(void *)(v47 + 16) = v89;
    v91 = (void *)swift_allocObject();
    v91[2] = partial apply for closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v91[3] = v87;
    v92 = v109;
    v91[4] = v89;
    v91[5] = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
    swift_allocObject();
    swift_retain();
    uint64_t v93 = Future.init(_:)();
    swift_release();
    *(void *)(v47 + 24) = v93;
  }
  else
  {
    uint64_t v69 = v102;
    outlined init with take of RealityFileLoadInformation((uint64_t)v6, v102, type metadata accessor for RealityFileLoadInformation);
    outlined init with copy of (Int, URL)(v95, (uint64_t)v116, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    uint64_t v70 = v69;
    uint64_t v71 = v96;
    _s17RealityFoundation9LoadTraceVWOcTm_0(v70, v96, type metadata accessor for RealityFileLoadInformation);
    unint64_t v72 = (*(unsigned __int8 *)(v53 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    unint64_t v73 = (v7 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v75 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v76 = swift_allocObject();
    outlined init with take of Transform?((uint64_t)v116, v76 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    long long v77 = v111;
    *(void *)(v76 + 56) = v105;
    *(void *)(v76 + 64) = v77;
    *(unsigned char *)(v76 + 72) = v26;
    *(void *)(v76 + 80) = v107;
    outlined init with take of RealityFileLoadInformation(v71, v76 + v72, type metadata accessor for RealityFileLoadInformation);
    id v78 = v108;
    *(void *)(v76 + v73) = v108;
    *(void *)(v76 + v74) = v101;
    *(void *)(v76 + v75) = v32;
    *(void *)(v76 + ((v75 + 15) & 0xFFFFFFFFFFFFFFF8)) = v110;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AnchorEntity>);
    uint64_t v47 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AnchorEntity, Error>?>);
    uint64_t v79 = swift_allocObject();
    uint64_t v80 = swift_allocObject();
    *(_DWORD *)(v80 + 16) = 0;
    *(void *)(v79 + 16) = v80;
    *(void *)(v79 + 24) = 0;
    *(unsigned char *)(v79 + 32) = -1;
    *(void *)(v47 + 16) = v79;
    uint64_t v81 = (void *)swift_allocObject();
    v81[2] = partial apply for closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    v81[3] = v76;
    uint64_t v82 = v109;
    v81[4] = v79;
    v81[5] = v82;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AnchorEntity, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v83 = v78;
    uint64_t v84 = Future.init(_:)();

    swift_release();
    swift_release();
    *(void *)(v47 + 24) = v84;
    outlined destroy of LoadTrace(v102, type metadata accessor for RealityFileLoadInformation);
  }
  return v47;
}

uint64_t closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228343FC0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v16 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000016;
  *(void *)(inited + 56) = 0x800000022835C910;
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 80) = 0x73746E65746E6F63;
  *(void *)(inited + 88) = 0xEA0000000000664FLL;
  uint64_t v17 = type metadata accessor for URL();
  *(void *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(void *)(inited + 128) = 0x656D614E68746977;
  *(void *)(inited + 136) = 0xE800000000000000;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(inited + 144) = a4;
  *(void *)(inited + 152) = a5;
  *(void *)(inited + 168) = v19;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(inited + 216) = v20;
  *(void *)(inited + 224) = 0x64616F4C74736F70;
  *(void *)(inited + 232) = 0xE800000000000000;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(void *)(inited + 248) = 0;
  *(void *)(inited + 264) = v21;
  *(void *)(inited + 272) = 0x6C6C69666C7566;
  *(void *)(inited + 280) = 0xE700000000000000;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a7;
  v22[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[4] = v14;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for closure #1 in closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  *(void *)(v23 + 24) = v22;
  *(void *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 296) = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v25 = a8[3];
  uint64_t v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  if (a2) {
    return a4(a1, 1);
  }
  memset(v10, 0, 24);
  v10[3] = 1;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v8 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v8, (uint64_t)v10, (void (*)(uint64_t, void))a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v43 = a7;
  int v41 = a6;
  v39[0] = a5;
  uint64_t v40 = a4;
  v39[1] = a2;
  uint64_t v52 = a12;
  uint64_t v44 = a10;
  uint64_t v45 = a11;
  unint64_t v42 = a9;
  uint64_t v48 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v47 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v18 - 8);
  uint64_t v50 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v46 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v21 = *(void *)(Information - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x270FA5388](Information - 8);
  uint64_t v23 = (char *)v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  outlined init with copy of (Int, URL)(a3, (uint64_t)v55, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  _s17RealityFoundation9LoadTraceVWOcTm_0(a8, (uint64_t)v23, type metadata accessor for RealityFileLoadInformation);
  unint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v26 = (v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = swift_allocObject();
  outlined init with take of Transform?((uint64_t)v55, v29 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  *(void *)(v29 + 56) = v40;
  *(void *)(v29 + 64) = a5;
  *(unsigned char *)(v29 + 72) = v41;
  *(void *)(v29 + 80) = v43;
  outlined init with take of RealityFileLoadInformation((uint64_t)v23, v29 + v25, type metadata accessor for RealityFileLoadInformation);
  uint64_t v30 = v42;
  *(void *)(v29 + v26) = v42;
  uint64_t v31 = v45;
  *(void *)(v29 + v27) = v44;
  *(void *)(v29 + v28) = v31;
  uint64_t v32 = (void *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8));
  void *v32 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v32[1] = v24;
  aBlock[4] = partial apply for doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_405;
  uint64_t v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v34 = v30;
  swift_retain();
  swift_retain();
  uint64_t v35 = v46;
  static DispatchQoS.unspecified.getter();
  uint64_t v53 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v37 = v47;
  uint64_t v36 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v35, v37, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v50);
  return swift_release();
}

uint64_t doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v30[0] = a8;
  v30[1] = a5;
  uint64_t v35 = a7;
  uint64_t v32 = a11;
  uint64_t v31 = a10;
  int v16 = a4;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v20 - 8);
  uint64_t v34 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v44, 0, sizeof(v44));
  long long v43 = 0u;
  __int16 v45 = 1;
  BOOL v46 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  v42[0] = 1;
  outlined assign with copy of __DownsamplingStrategy?(a1, (uint64_t)&v44[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v44[56] = a2;
  *(void *)&v44[64] = a3;
  BOOL v46 = v16 != 2;
  HIBYTE(v45) = (a4 & 0xFE) != 2;
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(a6, *(void *)(a6 + *(int *)(Information + 20)), *(void *)(a6 + *(int *)(Information + 20) + 8), (uint64_t)v42, v41);
  outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v40);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v30[0];
  outlined init with take of BindableDataInternal(v40, (uint64_t)(v24 + 3));
  uint64_t v25 = v31;
  uint64_t v26 = v32;
  v24[8] = a9;
  v24[9] = v25;
  v24[10] = v26;
  v39[4] = partial apply for closure #1 in doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  v39[5] = v24;
  v39[0] = MEMORY[0x263EF8330];
  v39[1] = 1107296256;
  void v39[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v39[3] = &block_descriptor_417;
  unint64_t v27 = _Block_copy(v39);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v28 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v22, v19, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v28);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  swift_release();
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v42);
}

uint64_t closure #2 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void), uint64_t a5)
{
  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
  swift_dynamicCast();
  uint64_t v7 = v15;
  uint64_t v8 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  memset(v11, 0, 24);
  v11[3] = 1;
  long long v12 = 0u;
  long long v13 = 0u;
  specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(v9, (uint64_t)v11, a4, a5, (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  swift_release();
  return outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a7;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v16 - 8);
  uint64_t v26 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = a5;
  v20[5] = a6;
  v20[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v20[7] = v19;
  aBlock[4] = partial apply for doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_427_0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v22 = a4;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v18, v15, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v26);
  return swift_release();
}

uint64_t doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[1] = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  uint64_t v18 = (void *)swift_allocObject();
  if (v17)
  {
    v18[2] = a5;
    v18[3] = a6;
    v18[4] = v17;
    uint64_t v31 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    uint64_t v32 = v18;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v28 = 1107296256;
    uint64_t v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v30 = &block_descriptor_433;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = v17;
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v16, v13, v19);
    _Block_release(v19);
  }
  else
  {
    v18[2] = a1;
    v18[3] = a3;
    v18[4] = a4;
    v18[5] = a5;
    v18[6] = a6;
    uint64_t v31 = partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:);
    uint64_t v32 = v18;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v28 = 1107296256;
    uint64_t v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v30 = &block_descriptor_439;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v16, v13, v21);
    _Block_release(v21);
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v24);
  return swift_release();
}

void closure #1 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - v11;
  __SceneImportOperation.publishToEngine()();
  if (v13)
  {
    id v21 = v13;
    a4((uint64_t)v13, 1);
  }
  else
  {
    uint64_t v14 = RESceneImportOperationCopySourceURL();
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
    }
    else
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
    }
    outlined init with take of Transform?((uint64_t)v9, (uint64_t)v12, &demangling cache variable for type metadata for URL?);
    type metadata accessor for URL();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = __SceneImportOperation.importedScenes.getter();
      __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v18, &v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
      uint64_t v19 = v26;
      id v20 = v27;
      swift_bridgeObjectRetain();
      id v22 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v19, v20);
      uint64_t v25 = v19;
      uint64_t v26 = (uint64_t)v20;
      swift_bridgeObjectRetain_n();
      uint64_t v23 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v22, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v23, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v22);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 1;
      long long v29 = 0u;
      long long v30 = 0u;
      specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)((uint64_t)v22, (uint64_t)&v25, a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v25, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    }
  }
}

uint64_t _s10RealityKit6EntityC20withUnsafeJointNames33_F26D63620DB78A19432B1EBEC9E8266ALLyxSaySSG_xSPySPys4Int8VGSgGSgKXEtKlFZyt_Tgm504_s10a4Kit6c26C20withCharacterOptions33_hijklmn39ALLyxxSo08REEntityeF0azKXEKlFZxSPySPys4O19VGSgGSgKXEfU_yt_Tg5SiSo08REEntityS7Optionsaxs5Error_pRi_zRi0_zlyytIsglrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v27 = a3;
    uint64_t v7 = v3;
    v26[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v8 = v26[0];
    uint64_t v9 = a1 + 40;
    do
    {
      uint64_t v10 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      uint64_t v11 = strdup(v10);
      swift_bridgeObjectRelease();
      swift_release();
      v26[0] = v8;
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      unint64_t v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v26[0];
      }
      v9 += 16;
      *(void *)(v8 + 16) = v14;
      *(void *)(v8 + 8 * v13 + 32) = v11;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    unint64_t v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v14)
    {
      char v20 = 1;
      uint64_t v16 = (void *)MEMORY[0x263F8EE78];
      goto LABEL_16;
    }
    uint64_t v27 = a3;
    uint64_t v7 = v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  uint64_t v16 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v17 = *(void *)(v8 + 8 * v15 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
    }
    ++v15;
    v16[2] = v19 + 1;
    v16[v19 + 4] = v17;
  }
  while (v14 != v15);
  swift_bridgeObjectRelease();
  char v20 = 0;
  uint64_t v3 = v7;
  a3 = v27;
LABEL_16:
  LOBYTE(v26[0]) = 0;
  v26[1] = a2;
  v26[2] = v16 + 4;
  a3(v26);
  if (v3)
  {
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = 0;
      do
      {
        id v22 = *(void **)(v8 + 8 * v21++ + 32);
        free(v22);
      }
      while (v14 != v21);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v20) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  do
  {
    uint64_t v25 = *(void **)(v8 + 8 * v24++ + 32);
    free(v25);
  }
  while (v14 != v24);
  return swift_bridgeObjectRelease_n();
}

uint64_t static Entity.loadBodyTracked(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v58 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v54 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BodyTrackingComponent(0);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v53 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3) {
    id v64 = a3;
  }
  else {
    id v64 = objc_msgSend(self, sel_mainBundle);
  }
  id v15 = a3;
  uint64_t v16 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 24);
  swift_unownedRetainStrong();
  unint64_t v18 = *(void **)(v17 + 32);
  swift_retain();
  id v19 = v18;
  swift_release();
  *unint64_t v14 = v19;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F0E0], v11);
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  uint64_t v57 = v4;
  char v20 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  char v21 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  uint64_t v23 = v58;
  *(void *)(inited + 16) = v58;
  *(void *)(inited + 24) = a2;
  *(unsigned char *)(inited + 32) = v20;
  *(unsigned char *)(inited + 33) = v21;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 3;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v16 + 176, (uint64_t)&v59, &demangling cache variable for type metadata for USDImportService?);
  if (!v60)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v59, &demangling cache variable for type metadata for USDImportService?);
    goto LABEL_13;
  }
  uint64_t v55 = inited;
  uint64_t v56 = v16;
  outlined init with take of BindableDataInternal(&v59, (uint64_t)v61);
  uint64_t v24 = v23;
  uint64_t v25 = v62;
  uint64_t v26 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  uint64_t v28 = a2;
  uint64_t v29 = a2;
  id v30 = v64;
  if ((v27(v24, v28, v64, v25, v26) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    uint64_t v23 = v24;
    a2 = v29;
LABEL_13:
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    id v39 = v64;
    uint64_t v40 = (void *)MEMORY[0x22A688A50](v23, a2);
    swift_bridgeObjectRelease();
    uint64_t v41 = RESceneImportOperationCreateWithBundleResource();

    if (v41)
    {
      type metadata accessor for __SceneImportOperation();
      swift_initStackObject();
      __SceneImportOperation.init(core:)(v41);

      swift_release();
      RESceneImportOperationSetMergeIntoSingleEntity();
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      __SceneImportOperation.run()();
      if (!v42)
      {
        uint64_t v23 = __SceneImportOperation.makeBodyTrackedEntity()();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v23);
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_weakDestroy();

        swift_release();
        return v23;
      }
      swift_release();
    }
    else
    {

      swift_release();
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      swift_allocError();
      *long long v43 = v23;
      v43[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();

    swift_release();
    return v23;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_228324960;
  *(void *)(v31 + 32) = 1701869940;
  *(void *)(v31 + 40) = 0xE400000000000000;
  uint64_t v32 = MEMORY[0x263F8D310];
  *(void *)(v31 + 48) = 0xD000000000000019;
  *(void *)(v31 + 56) = 0x800000022835C2C0;
  *(void *)(v31 + 72) = v32;
  *(void *)(v31 + 80) = 1701667182;
  *(void *)(v31 + 88) = 0xE400000000000000;
  *(void *)(v31 + 96) = v24;
  *(void *)(v31 + 104) = v29;
  *(void *)(v31 + 120) = v32;
  *(void *)(v31 + 128) = 0x656C646E7562;
  *(void *)(v31 + 136) = 0xE600000000000000;
  uint64_t v33 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(v31 + 144) = v30;
  *(void *)(v31 + 168) = v33;
  *(void *)(v31 + 176) = 0xD000000000000015;
  *(void *)(v31 + 184) = 0x800000022835C1A0;
  char v34 = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(v31 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v31 + 192) = v34;
  swift_bridgeObjectRetain();
  id v35 = v30;
  uint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  uint64_t v36 = v62;
  uint64_t v37 = v63;
  __swift_project_boxed_opaque_existential_1(v61, v62);
  uint64_t v38 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v23, v36, v37);
  if (v38)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for BodyTrackedEntity();
    uint64_t v45 = swift_dynamicCastClass();
    if (v45)
    {
      uint64_t v23 = v45;
      id v64 = v35;
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
      uint64_t v47 = (uint64_t)v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v53, 1, 1, v46);
      uint64_t v48 = v52;
      *(unsigned char *)(v47 + *(int *)(v52 + 20)) = 0;
      uint64_t v49 = v54;
      _s17RealityFoundation9LoadTraceVWOcTm_0(v47, v54, type metadata accessor for BodyTrackingComponent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v48);
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v49);
      outlined destroy of BodyTrackingComponent?(v49, &demangling cache variable for type metadata for BodyTrackingComponent?);
      swift_release();
      outlined destroy of LoadTrace(v47, type metadata accessor for BodyTrackingComponent);
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v23);
      swift_release();
      swift_release();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
      return v23;
    }
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  return v23;
}

uint64_t __SceneImportOperation.makeBodyTrackedEntity()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v32 = (uint64_t)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v29 - v7;
  uint64_t result = __SceneImportOperation.importedScenes.getter();
  uint64_t v10 = result;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v31 = *(void *)(result + 16);
  if (!v31)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void *)(v11 + 16);
    if (v17 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v19;
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 2, 2, v21);
    }
    else
    {
      if (v17)
      {
        _s17RealityFoundation9LoadTraceVWOcTm_0(v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v18, 1, v3);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
      {
        uint64_t v24 = *(void *)&v2[*(int *)(v3 + 24)];
        swift_retain();
        outlined destroy of LoadTrace((uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v25 = *(void *)(v24 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        uint64_t inited = swift_initStackObject();
        *(void *)(inited + 16) = v25;
        uint64_t v20 = inited;
        uint64_t v27 = v29[1];
        uint64_t v28 = __SceneResource.makeSingleBodyTrackedEntity()();
        if (!v27) {
          uint64_t v20 = v28;
        }
        swift_setDeallocating();
        RERelease();
        swift_release();
        return v20;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v22;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 1, 2, v23);
    }
    swift_willThrow();
    return v20;
  }
  v29[0] = v2;
  unint64_t v12 = 0;
  uint64_t v30 = v4;
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v14 = *(void *)(v4 + 72);
    _s17RealityFoundation9LoadTraceVWOcTm_0(v10 + v13 + v14 * v12, (uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    if (v8[*(int *)(v3 + 28)] == 1)
    {
      outlined init with take of RealityFileLoadInformation((uint64_t)v8, v32, type metadata accessor for __SceneImportOperation.ImportedScene);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      }
      uint64_t v11 = v33;
      unint64_t v16 = *(void *)(v33 + 16);
      unint64_t v15 = *(void *)(v33 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v33;
      }
      *(void *)(v11 + 16) = v16 + 1;
      uint64_t result = outlined init with take of RealityFileLoadInformation(v32, v11 + v13 + v16 * v14, type metadata accessor for __SceneImportOperation.ImportedScene);
      uint64_t v4 = v30;
    }
    else
    {
      uint64_t result = outlined destroy of LoadTrace((uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    }
    if (v31 == ++v12)
    {
      uint64_t v11 = v33;
      uint64_t v2 = (char *)v29[0];
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228343FC0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v17 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD00000000000001ELL;
  *(void *)(inited + 56) = 0x800000022835CA10;
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 80) = 1701667182;
  *(void *)(inited + 88) = 0xE400000000000000;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  *(void *)(inited + 120) = v17;
  *(void *)(inited + 128) = 0x656C646E7562;
  *(void *)(inited + 136) = 0xE600000000000000;
  uint64_t v18 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(inited + 144) = a5;
  *(void *)(inited + 168) = v18;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  swift_beginAccess();
  uint64_t v19 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(inited + 216) = v19;
  *(void *)(inited + 224) = 0x64616F4C74736F70;
  *(void *)(inited + 232) = 0xE800000000000000;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(void *)(inited + 248) = 0;
  *(void *)(inited + 264) = v20;
  *(void *)(inited + 272) = 0x6C6C69666C7566;
  *(void *)(inited + 280) = 0xE700000000000000;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a7;
  v21[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v21[4] = v15;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(named:in:);
  *(void *)(v22 + 24) = v21;
  *(void *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 296) = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  id v23 = a5;
  swift_retain();
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v25 = a8[3];
  uint64_t v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  if (a2) {
    return a4(a1, 1);
  }
  memset(v10, 0, 24);
  v10[3] = 1;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v8 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v8, (uint64_t)v10, (void (*)(uint64_t, void))a4, a5);
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

void closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(void (*a1)(void **), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a8;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v17 - 8);
  uint64_t v33 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  uint64_t v30 = a1;
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  id v21 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v22 = (void *)MEMORY[0x22A688A50](a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v23 = RESceneImportOperationCreateWithBundleResource();

  if (v23)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    uint64_t v24 = __SceneImportOperation.init(core:)(v23);

    swift_release();
    swift_beginAccess();
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v24;
    v25[3] = a6;
    v25[4] = v31;
    v25[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v25[6] = v20;
    uint64_t v41 = partial apply for doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:);
    uint64_t v42 = v25;
    uint64_t aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v38 = 1107296256;
    id v39 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v40 = &block_descriptor_627;
    uint64_t v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v27 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v19, v16, v26);
    _Block_release(v26);
    swift_release();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
    swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v28 = (void *)swift_allocError();
    *uint64_t v29 = a4;
    v29[1] = a5;
    swift_storeEnumTagMultiPayload();
    uint64_t aBlock = v28;
    LOBYTE(v38) = 1;
    swift_bridgeObjectRetain();
    v30(&aBlock);
  }
}

uint64_t static Entity.loadBodyTracked(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v68 = a3;
  uint64_t v69 = a1;
  uint64_t v65 = a2;
  uint64_t v67 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v64 = (char *)&v59 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v63 = (char *)&v59 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char **)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 24);
  swift_unownedRetainStrong();
  uint64_t v18 = *(void **)(v17 + 32);
  uint64_t v75 = v16;
  swift_retain();
  id v19 = v18;
  swift_release();
  *uint64_t v15 = v19;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v12);
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v19)
  {
    long long v59 = v7;
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v20 = static Entity.synchronousLoadOptions;
  uint64_t v21 = v69;
  uint64_t v22 = URL.absoluteString.getter();
  uint64_t v24 = v23;
  swift_beginAccess();
  char v25 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<BodyTrackedEntity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  *(void *)(inited + 16) = v22;
  *(void *)(inited + 24) = v24;
  *(unsigned char *)(inited + 32) = v20;
  *(unsigned char *)(inited + 33) = v25;
  *(_WORD *)(inited + 34) = 256;
  uint64_t v66 = inited;
  *(_DWORD *)(inited + 36) = 3;
  swift_weakAssign();
  uint64_t v27 = v75 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v27, (uint64_t)&v70, &demangling cache variable for type metadata for USDImportService?);
  if (!v71)
  {
    uint64_t v60 = v4;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v70, &demangling cache variable for type metadata for USDImportService?);
LABEL_9:
    uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v41 = v63;
    uint64_t v42 = v69;
    uint64_t v43 = v67;
    v61(v63, v69, v67);
    swift_retain();
    URL._bridgeToObjectiveC()(v44);
    uint64_t v46 = v45;
    swift_beginAccess();
    uint64_t v47 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_initStackObject();
    uint64_t v62 = __SceneImportOperation.init(core:)(v47);
    swift_release();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v5 + 8);
    v48(v41, v43);
    uint64_t v49 = v64;
    v61(v64, v42, v43);
    uint64_t v50 = v68;
    if (v68)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = v60;
      uint64_t v51 = v49;
      uint64_t v52 = v65;
    }
    else
    {
      uint64_t v53 = v59;
      uint64_t v51 = v49;
      URL.deletingPathExtension()();
      uint64_t v52 = URL.lastPathComponent.getter();
      uint64_t v50 = v54;
      v48(v53, v43);
      uint64_t v38 = v60;
    }
    v48(v51, v43);
    v55.value._uint64_t countAndFlagsBits = v52;
    v55.value._object = v50;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v55, 1, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
    swift_bridgeObjectRelease();
    __SceneImportOperation.run()();
    if (!v56)
    {
      uint64_t v38 = __SceneImportOperation.makeBodyTrackedEntity()();
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v38);
    }
    swift_release();
    swift_release();
    swift_release();
    return v38;
  }
  outlined init with take of BindableDataInternal(&v70, (uint64_t)v72);
  uint64_t v28 = v73;
  uint64_t v29 = v74;
  __swift_project_boxed_opaque_existential_1(v72, v73);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 24))(v21, v28, v29) & 1) == 0)
  {
    uint64_t v60 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    goto LABEL_9;
  }
  uint64_t v30 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_228324960;
  *(void *)(v31 + 32) = 1701869940;
  *(void *)(v31 + 40) = 0xE400000000000000;
  uint64_t v32 = MEMORY[0x263F8D310];
  *(void *)(v31 + 48) = 0xD000000000000016;
  *(void *)(v31 + 56) = 0x800000022835C2E0;
  *(void *)(v31 + 72) = v32;
  *(void *)(v31 + 80) = 0x73746E65746E6F63;
  *(void *)(v31 + 88) = 0xEA0000000000664FLL;
  uint64_t v33 = v67;
  *(void *)(v31 + 120) = v67;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(boxed_opaque_existential_1, v30, v33);
  *(void *)(v31 + 128) = 0x656D614E68746977;
  *(void *)(v31 + 136) = 0xE800000000000000;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v36 = v68;
  *(void *)(v31 + 144) = v65;
  *(void *)(v31 + 152) = v36;
  *(void *)(v31 + 168) = v35;
  *(void *)(v31 + 176) = 0xD000000000000015;
  *(void *)(v31 + 184) = 0x800000022835C1A0;
  char v37 = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(v31 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v31 + 192) = v37;
  swift_bridgeObjectRetain();
  uint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(v31);
  uint64_t v39 = v73;
  uint64_t v40 = v74;
  __swift_project_boxed_opaque_existential_1(v72, v73);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v38, v39, v40);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_19:
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    return v38;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for BodyTrackedEntity();
  uint64_t v57 = swift_dynamicCastClass();
  if (!v57)
  {
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    goto LABEL_19;
  }
  uint64_t v38 = v57;
  specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v57);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
  return v38;
}

uint64_t closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228343FC0;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v16 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD00000000000001BLL;
  *(void *)(inited + 56) = 0x800000022835C9F0;
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 80) = 0x73746E65746E6F63;
  *(void *)(inited + 88) = 0xEA0000000000664FLL;
  uint64_t v17 = type metadata accessor for URL();
  *(void *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(void *)(inited + 128) = 0x656D614E68746977;
  *(void *)(inited + 136) = 0xE800000000000000;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(inited + 144) = a4;
  *(void *)(inited + 152) = a5;
  *(void *)(inited + 168) = v19;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(inited + 216) = v20;
  *(void *)(inited + 224) = 0x64616F4C74736F70;
  *(void *)(inited + 232) = 0xE800000000000000;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = specialized thunk for @escaping @callee_guaranteed (@guaranteed [String : Any]) -> (@error @owned Error);
  *(void *)(inited + 248) = 0;
  *(void *)(inited + 264) = v21;
  *(void *)(inited + 272) = 0x6C6C69666C7566;
  *(void *)(inited + 280) = 0xE700000000000000;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a7;
  v22[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[4] = v14;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  *(void *)(v23 + 24) = v22;
  *(void *)(inited + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 288) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 296) = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v25 = a8[3];
  uint64_t v26 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 40))(v24, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t postLoad #1 (data:) in closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, void (*a2)(void))
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_12;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v5 & 1) == 0) {
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v12);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  if (v10 == 0x64616F4C74736F50 && v11 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (*(void *)(a1 + 16))
  {
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x797469746E65, 0xE600000000000000);
    if (v8)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v12);
      a2(0);
      if (swift_dynamicCast()) {
        return swift_release();
      }
    }
  }
LABEL_12:
  type metadata accessor for Entity.LoadError(0);
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v46 = a8;
  uint64_t v45 = a6;
  uint64_t v42 = a5;
  uint64_t v43 = a3;
  uint64_t v51 = a9;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v50 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v47 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  uint64_t v44 = v24;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v25(v23, a3, v17);
  swift_retain();
  swift_retain();
  URL._bridgeToObjectiveC()(v26);
  uint64_t v28 = v27;
  swift_beginAccess();
  uint64_t v29 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_allocObject();
  uint64_t v30 = __SceneImportOperation.init(core:)(v29);
  swift_release();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  v31(v23, v17);
  v25(v20, v43, v17);
  uint64_t v32 = v45;
  if (v45)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = v42;
  }
  else
  {
    URL.deletingPathExtension()();
    uint64_t v33 = URL.lastPathComponent.getter();
    uint64_t v32 = v34;
    v31(v23, v17);
  }
  v31(v20, v17);
  swift_beginAccess();
  v35.value._uint64_t countAndFlagsBits = v33;
  v35.value._object = v32;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v35, 1, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  RESceneImportOperationSetIsolateFromEngine();
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v30;
  v36[3] = a4;
  _OWORD v36[4] = v46;
  v36[5] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v36[6] = v44;
  aBlock[4] = partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:);
  aBlock[5] = v36;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_600;
  char v37 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v38 = v47;
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v39 = v50;
  uint64_t v40 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v38, v39, v37);
  _Block_release(v37);
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v49);
  return swift_release();
}

void doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __SceneImportOperation.run()();
  swift_beginAccess();
  swift_unownedRetainStrong();
  if (v14)
  {
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a4;
    _OWORD v15[3] = a5;
    v15[4] = v14;
    swift_retain();
    id v16 = v14;
    __Engine.asyncOnEngineQueue(_:)(a9, (uint64_t)v15);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v17 = (void *)swift_allocObject();
    _OWORD v17[2] = a1;
    v17[3] = a3;
    v17[4] = a4;
    v17[5] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    __Engine.asyncOnEngineQueue(_:)(a7, (uint64_t)v17);
    swift_release();
    swift_release();
  }
}

void closure #1 in doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  __SceneImportOperation.publishToEngine()();
  if (v6)
  {
    id v8 = v6;
    a3((uint64_t)v6, 1);
  }
  else
  {
    memset(v9, 0, 24);
    v9[3] = 1;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v7 = __SceneImportOperation.makeBodyTrackedEntity()();
    specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v7, (uint64_t)v9, a3, a4);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v50 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v9 = swift_allocObject();
  Date.init()();
  uint64_t v10 = v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v10 = 0;
  uint64_t v45 = (void *)v10;
  *(unsigned char *)(v10 + 8) = 2;
  *(void *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  long long v11 = (void *)(v9 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *long long v11 = 0xD00000000000001BLL;
  v11[1] = 0x800000022835C300;
  if (a3) {
    id v56 = a3;
  }
  else {
    id v56 = objc_msgSend(self, sel_mainBundle);
  }
  id v12 = a3;
  uint64_t v13 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 24);
  swift_unownedRetainStrong();
  uint64_t v15 = *(void **)(v14 + 32);
  swift_retain();
  id v16 = v15;
  swift_release();
  *id v8 = v16;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F0E0], v5);
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v14)
  {
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_6:
  uint64_t v49 = v9;
  char v17 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  char v18 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  uint64_t v20 = v50;
  *(void *)(inited + 16) = v50;
  *(void *)(inited + 24) = a2;
  *(unsigned char *)(inited + 32) = v17;
  *(unsigned char *)(inited + 33) = v18;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 2;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v13 + 176, (uint64_t)&v51, &demangling cache variable for type metadata for USDImportService?);
  if (!v52)
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v51, &demangling cache variable for type metadata for USDImportService?);
    goto LABEL_12;
  }
  uint64_t v46 = v13;
  outlined init with take of BindableDataInternal(&v51, (uint64_t)v53);
  uint64_t v21 = v20;
  uint64_t v22 = v54;
  uint64_t v23 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v23 + 16);
  swift_bridgeObjectRetain();
  uint64_t v25 = a2;
  uint64_t v47 = a2;
  id v26 = v56;
  if ((v24(v21, v25, v56, v22, v23) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    uint64_t v20 = v21;
    a2 = v47;
LABEL_12:
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    id v35 = v56;
    uint64_t v36 = (void *)MEMORY[0x22A688A50](v20, a2);
    swift_bridgeObjectRelease();
    uint64_t v37 = RESceneImportOperationCreateWithBundleResource();

    if (v37)
    {
      type metadata accessor for __SceneImportOperation();
      swift_initStackObject();
      __SceneImportOperation.init(core:)(v37);

      swift_release();
      RESceneImportOperationSetMergeIntoSingleEntity();
      RESceneImportOperationSetGenerateDecimatedMesh();
      RESceneImportOperationSetUnitType();
      __SceneImportOperation.run()();
      if (!v38)
      {
        a2 = __SceneImportOperation.makeModelEntity()();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(a2, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
        uint64_t v43 = v45;
        *uint64_t v45 = 0;
        *((unsigned char *)v43 + 8) = 0;
        Entity.LoadStatistics.log()();
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_weakDestroy();
        swift_release();

        swift_release();
        return a2;
      }
      swift_release();
    }
    else
    {

      swift_release();
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      swift_allocError();
      *uint64_t v39 = v20;
      v39[1] = a2;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_weakDestroy();
    swift_release();

    swift_release();
    return a2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_228324960;
  *(void *)(v27 + 32) = 1701869940;
  *(void *)(v27 + 40) = 0xE400000000000000;
  uint64_t v28 = MEMORY[0x263F8D310];
  *(void *)(v27 + 48) = 0xD000000000000013;
  *(void *)(v27 + 56) = 0x800000022835C320;
  *(void *)(v27 + 72) = v28;
  *(void *)(v27 + 80) = 0x64656D616ELL;
  *(void *)(v27 + 88) = 0xE500000000000000;
  *(void *)(v27 + 96) = v21;
  *(void *)(v27 + 104) = v47;
  *(void *)(v27 + 120) = v28;
  *(void *)(v27 + 128) = 0x656C646E7562;
  *(void *)(v27 + 136) = 0xE600000000000000;
  uint64_t v29 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(v27 + 144) = v26;
  *(void *)(v27 + 168) = v29;
  *(void *)(v27 + 176) = 0xD000000000000015;
  *(void *)(v27 + 184) = 0x800000022835C1A0;
  char v30 = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(v27 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v27 + 192) = v30;
  swift_bridgeObjectRetain();
  id v31 = v26;
  a2 = specialized Dictionary.init(dictionaryLiteral:)(v27);
  uint64_t v32 = v54;
  uint64_t v33 = v55;
  __swift_project_boxed_opaque_existential_1(v53, v54);
  uint64_t v34 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(a2, v32, v33);
  if (v34)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_release();
    swift_release();
    swift_release();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    return a2;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for ModelEntity();
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_21;
  }
  a2 = v40;
  specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v40, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
  uint64_t v42 = v45;
  *uint64_t v45 = 1;
  *((unsigned char *)v42 + 8) = 0;
  Entity.LoadStatistics.log()();
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  return a2;
}

uint64_t __SceneImportOperation.makeModelEntity()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v32 = (uint64_t)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)v29 - v7;
  uint64_t result = __SceneImportOperation.importedScenes.getter();
  uint64_t v10 = result;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v31 = *(void *)(result + 16);
  if (!v31)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void *)(v11 + 16);
    if (v17 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v19;
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 2, 2, v21);
    }
    else
    {
      if (v17)
      {
        _s17RealityFoundation9LoadTraceVWOcTm_0(v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v18, 1, v3);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
      {
        uint64_t v24 = *(void *)&v2[*(int *)(v3 + 24)];
        swift_retain();
        outlined destroy of LoadTrace((uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v25 = *(void *)(v24 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        uint64_t inited = swift_initStackObject();
        *(void *)(inited + 16) = v25;
        uint64_t v20 = inited;
        uint64_t v27 = v29[1];
        uint64_t v28 = __SceneResource.makeSingleModelEntity()();
        if (!v27) {
          uint64_t v20 = v28;
        }
        swift_setDeallocating();
        RERelease();
        swift_release();
        return v20;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v22;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 1, 2, v23);
    }
    swift_willThrow();
    return v20;
  }
  v29[0] = v2;
  unint64_t v12 = 0;
  uint64_t v30 = v4;
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v14 = *(void *)(v4 + 72);
    _s17RealityFoundation9LoadTraceVWOcTm_0(v10 + v13 + v14 * v12, (uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    if (v8[*(int *)(v3 + 28)] == 1)
    {
      outlined init with take of RealityFileLoadInformation((uint64_t)v8, v32, type metadata accessor for __SceneImportOperation.ImportedScene);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      }
      uint64_t v11 = v33;
      unint64_t v16 = *(void *)(v33 + 16);
      unint64_t v15 = *(void *)(v33 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v33;
      }
      *(void *)(v11 + 16) = v16 + 1;
      uint64_t result = outlined init with take of RealityFileLoadInformation(v32, v11 + v13 + v16 * v14, type metadata accessor for __SceneImportOperation.ImportedScene);
      uint64_t v4 = v30;
    }
    else
    {
      uint64_t result = outlined destroy of LoadTrace((uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    }
    if (v31 == ++v12)
    {
      uint64_t v11 = v33;
      uint64_t v2 = (char *)v29[0];
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Entity.__loadModelAsync(named:in:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = (unint64_t)v12;
  long long v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  uint64_t v8 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, a3, v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = a8;
  v38[1] = a2;
  uint64_t v39 = a7;
  uint64_t v47 = a10;
  uint64_t v42 = a9;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v40 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E320;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v22 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000018;
  *(void *)(inited + 56) = 0x800000022835C8F0;
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 80) = 0x64656D616ELL;
  *(void *)(inited + 88) = 0xE500000000000000;
  *(void *)(inited + 96) = a3;
  *(void *)(inited + 104) = a4;
  *(void *)(inited + 120) = v22;
  *(void *)(inited + 128) = 0x656C646E7562;
  *(void *)(inited + 136) = 0xE600000000000000;
  uint64_t v23 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSBundle);
  *(void *)(inited + 144) = a5;
  *(void *)(inited + 168) = v23;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  uint64_t v24 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = *(unsigned char *)(a6 + 48);
  *(void *)(inited + 216) = v24;
  *(void *)(inited + 224) = 0x6C6C69666C7566;
  *(void *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)&v50);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v39;
  long long v26 = v51;
  *(_OWORD *)(v25 + 24) = v50;
  *(_OWORD *)(v25 + 40) = v26;
  long long v27 = v53;
  *(_OWORD *)(v25 + 56) = v52;
  *(_OWORD *)(v25 + 72) = v27;
  *(void *)(v25 + 88) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v25 + 96) = v20;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for closure #1 in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  *(void *)(v28 + 24) = v25;
  *(void *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 248) = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  id v29 = a5;
  swift_retain();
  swift_retain();
  unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of __REAssetService(v42, (uint64_t)v49);
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = v43;
  v31[2] = v43;
  outlined init with take of BindableDataInternal(v49, (uint64_t)(v31 + 3));
  v31[8] = v30;
  v31[9] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v31[10] = v20;
  *(void *)&long long v52 = partial apply for doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  *((void *)&v52 + 1) = v31;
  *(void *)&long long v50 = MEMORY[0x263EF8330];
  *((void *)&v50 + 1) = 1107296256;
  *(void *)&long long v51 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  *((void *)&v51 + 1) = &block_descriptor_324_0;
  uint64_t v33 = _Block_copy(&v50);
  id v34 = v32;
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v36 = v40;
  uint64_t v35 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v19, v36, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v45);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t), uint64_t a6, void (*a7)(void), uint64_t (*a8)(uint64_t, void (*)(uint64_t, void), uint64_t))
{
  if (a2) {
    return a5(a1, 1);
  }
  outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v15);
  uint64_t v13 = swift_retain();
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v13, (uint64_t)v15, (void (*)(uint64_t, void))a5, a6, a7, a8);
  outlined consume of Result<MeshResource, Error>(a1, 0);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[1] = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAssetService(a2, (uint64_t)v22);
  uint64_t v17 = (void *)swift_allocObject();
  outlined init with take of BindableDataInternal(v22, (uint64_t)(v17 + 2));
  v17[7] = a3;
  v17[8] = a4;
  v17[9] = a5;
  aBlock[4] = partial apply for closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_330;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[2] = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a2, v3, v4);
}

void closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(void (*a1)(_OWORD *), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a8;
  uint64_t v33 = a7;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v38 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  uint64_t v32 = a1;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  id v20 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v21 = (void *)MEMORY[0x22A688A50](a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v22 = RESceneImportOperationCreateWithBundleResource();

  if (v22)
  {
    type metadata accessor for __SceneImportOperation();
    swift_allocObject();
    uint64_t v23 = __SceneImportOperation.init(core:)(v22);

    swift_release();
    uint64_t v24 = v33;
    RESceneImportOperationSetMergeIntoSingleEntity();
    RESceneImportOperationSetGenerateDecimatedMesh();
    RESceneImportOperationSetUnitType();
    RESceneImportOperationSetIsolateFromEngine();
    outlined init with copy of Entity.__LoadOptions(v24, (uint64_t)v41);
    uint64_t v25 = swift_allocObject();
    long long v26 = v41[1];
    *(_OWORD *)(v25 + 40) = v41[0];
    *(_OWORD *)(v25 + 56) = v26;
    long long v27 = v41[3];
    *(_OWORD *)(v25 + 72) = v41[2];
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = a6;
    *(void *)(v25 + 32) = v34;
    *(_OWORD *)(v25 + 88) = v27;
    *(void *)(v25 + 104) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *(void *)(v25 + 112) = v19;
    aBlock[4] = partial apply for doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_346;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v39 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v29 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v18, v16, v28);
    _Block_release(v28);
    swift_release();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v29);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
    swift_release();
  }
  else
  {
    swift_release();

    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    unint64_t v30 = (void *)swift_allocError();
    *uint64_t v31 = a4;
    v31[1] = a5;
    swift_storeEnumTagMultiPayload();
    *(void *)&v41[0] = v30;
    BYTE8(v41[0]) = 1;
    swift_bridgeObjectRetain();
    v32(v41);
  }
}

void doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __SceneImportOperation.run()();
  swift_beginAccess();
  swift_unownedRetainStrong();
  if (v11)
  {
    long long v12 = (void *)swift_allocObject();
    v12[2] = a5;
    v12[3] = a6;
    v12[4] = v11;
    swift_retain();
    id v13 = v11;
    __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:), (uint64_t)v12);
    swift_release();
    swift_release();
  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)v17);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(void *)(v14 + 24) = a3;
    long long v15 = v17[1];
    *(_OWORD *)(v14 + 32) = v17[0];
    *(_OWORD *)(v14 + 48) = v15;
    long long v16 = v17[3];
    *(_OWORD *)(v14 + 64) = v17[2];
    *(_OWORD *)(v14 + 80) = v16;
    *(void *)(v14 + 96) = a5;
    *(void *)(v14 + 104) = a6;
    swift_retain();
    swift_retain();
    swift_retain();
    __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:), v14);
    swift_release();
    swift_release();
  }
}

uint64_t static Entity.loadModel(contentsOf:withName:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v7 = swift_allocObject();
  Date.init()();
  uint64_t v8 = v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 2;
  *(void *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 0;
  uint64_t v9 = (void *)(v7 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *uint64_t v9 = 0xD000000000000026;
  v9[1] = 0x800000022835C340;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  LOWORD(v15) = 512;
  *((void *)&v15 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v16, (uint64_t)&v12);
  *((void *)&v14 + 1) = 0;
  v18[0] = v12;
  v18[1] = v13;
  v18[2] = (unint64_t)v14;
  long long v19 = v15;
  swift_retain();
  swift_release();
  *((void *)&v19 + 1) = v7;
  uint64_t v10 = specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v18);
  if (!v3) {
    Entity.LoadStatistics.log()();
  }
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)v18);
  return v10;
}

uint64_t static Entity.loadModel(contentsOf:withName:reorderVertexCaching:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  _OWORD v16[2] = (unint64_t)v12;
  long long v17 = v13;
  BYTE1(v17) = a4;
  uint64_t v8 = specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t static Entity.loadModelAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  char v6 = static RKARSystemCore.generateDecimatedMeshes;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  LOWORD(v12) = 512;
  *((void *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((void *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  long long v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  uint64_t v7 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v15);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t static Entity.__loadModelAsync(contentsOf:withName:generateDecimatedMesh:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  LOWORD(v13) = 512;
  *((void *)&v13 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v14, (uint64_t)&v10);
  *((void *)&v12 + 1) = 0;
  v16[0] = v10;
  v16[1] = v11;
  _OWORD v16[2] = (unint64_t)v12;
  long long v17 = v13;
  LOBYTE(v17) = a4;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v10) = static Entity.asynchronousLoadOptions;
  uint64_t v8 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, a3, (uint64_t)v16);
  outlined destroy of Entity.__LoadOptions((uint64_t)v16);
  return v8;
}

uint64_t closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  long long v51 = a8;
  uint64_t v48 = a7;
  uint64_t v46 = a5;
  uint64_t v47 = a3;
  uint64_t v52 = a2;
  uint64_t v49 = a1;
  uint64_t v57 = a10;
  uint64_t v50 = a9;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  MEMORY[0x270FA5388](v12);
  id v56 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchQoS();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  long long v53 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v23((char *)&v45 - v21, a3, v15, v20);
  swift_retain();
  URL._bridgeToObjectiveC()(v24);
  long long v26 = v25;
  swift_beginAccess();
  uint64_t v27 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_allocObject();
  uint64_t v28 = __SceneImportOperation.init(core:)(v27);
  swift_release();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v22, v15);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, v47, v15);
  if (a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = v46;
  }
  else
  {
    URL.deletingPathExtension()();
    uint64_t v30 = URL.lastPathComponent.getter();
    a6 = v31;
    v29(v22, v15);
  }
  v29(v18, v15);
  uint64_t v32 = v48;
  v33.value._uint64_t countAndFlagsBits = v30;
  v33.value._object = a6;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v33, 1, *(unsigned char *)(v48 + 48), (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  RESceneImportOperationSetIsolateFromEngine();
  outlined init with copy of Entity.__LoadOptions(v32, (uint64_t)v62);
  uint64_t v34 = swift_allocObject();
  long long v35 = v62[1];
  *(_OWORD *)(v34 + 40) = v62[0];
  *(_OWORD *)(v34 + 56) = v35;
  long long v36 = v62[3];
  *(_OWORD *)(v34 + 72) = v62[2];
  uint64_t v37 = v51;
  *(void *)(v34 + 16) = v28;
  *(void *)(v34 + 24) = v37;
  *(void *)(v34 + 32) = v50;
  *(_OWORD *)(v34 + 88) = v36;
  uint64_t v38 = v52;
  *(void *)(v34 + 104) = v49;
  *(void *)(v34 + 112) = v38;
  aBlock[4] = partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  aBlock[5] = v34;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_281;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  id v40 = v37;
  swift_retain();
  swift_retain();
  uint64_t v41 = v53;
  static DispatchQoS.unspecified.getter();
  uint64_t v60 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v42 = v56;
  uint64_t v43 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v41, v42, v39);
  _Block_release(v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v41, v55);
  return swift_release();
}

uint64_t doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __SceneImportOperation.run()();
  if (v17)
  {
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a5;
    _OWORD v18[3] = a6;
    v18[4] = v17;
    *(void *)&long long v33 = partial apply for closure #2 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    *((void *)&v33 + 1) = v18;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v32 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v32 + 1) = &block_descriptor_287;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = v17;
    static DispatchQoS.unspecified.getter();
    v30[0] = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v16, v13, v19);
    _Block_release(v19);
  }
  else
  {
    outlined init with copy of Entity.__LoadOptions(a4, (uint64_t)&aBlock);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a1;
    *(void *)(v21 + 24) = a3;
    long long v22 = v32;
    *(_OWORD *)(v21 + 32) = aBlock;
    *(_OWORD *)(v21 + 48) = v22;
    long long v23 = v34;
    *(_OWORD *)(v21 + 64) = v33;
    *(_OWORD *)(v21 + 80) = v23;
    *(void *)(v21 + 96) = a5;
    *(void *)(v21 + 104) = a6;
    v30[4] = partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
    v30[5] = v21;
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 1107296256;
    void v30[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v30[3] = &block_descriptor_293_0;
    uint64_t v24 = _Block_copy(v30);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v29 = MEMORY[0x263F8EE78];
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v16, v13, v24);
    _Block_release(v24);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v27);
  return swift_release();
}

void closure #1 in doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  __SceneImportOperation.publishToEngine()();
  if (v8)
  {
    id v9 = v8;
    a4((uint64_t)v8, 1);
  }
  else
  {
    uint64_t v10 = __SceneImportOperation.makeModelEntity()();
    outlined init with copy of Entity.__LoadOptions(a3, (uint64_t)v11);
    specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(v10, (uint64_t)v11, a4, a5, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
}

uint64_t closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E320;
  *(void *)(inited + 32) = 1701869940;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v16 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = 0xD000000000000015;
  *(void *)(inited + 56) = 0x800000022835C8B0;
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 80) = 0x73746E65746E6F63;
  *(void *)(inited + 88) = 0xEA0000000000664FLL;
  uint64_t v17 = type metadata accessor for URL();
  *(void *)(inited + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(boxed_opaque_existential_1, a3, v17);
  *(void *)(inited + 128) = 0x656D614E68746977;
  *(void *)(inited + 136) = 0xE800000000000000;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(inited + 144) = a4;
  *(void *)(inited + 152) = a5;
  *(void *)(inited + 168) = v19;
  *(void *)(inited + 176) = 0xD000000000000015;
  *(void *)(inited + 184) = 0x800000022835C1A0;
  uint64_t v20 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = *(unsigned char *)(a6 + 48);
  *(void *)(inited + 216) = v20;
  *(void *)(inited + 224) = 0x6C6C69666C7566;
  *(void *)(inited + 232) = 0xE700000000000000;
  outlined init with copy of Entity.__LoadOptions(a6, (uint64_t)v31);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a7;
  long long v22 = v31[1];
  *(_OWORD *)(v21 + 24) = v31[0];
  *(_OWORD *)(v21 + 40) = v22;
  long long v23 = v31[3];
  *(_OWORD *)(v21 + 56) = v31[2];
  *(_OWORD *)(v21 + 72) = v23;
  *(void *)(v21 + 88) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v21 + 96) = v14;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  *(void *)(v24 + 24) = v21;
  *(void *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(inited + 240) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ();
  *(void *)(inited + 248) = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v26 = a8[3];
  uint64_t v27 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v26);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 40))(v25, v26, v27);
  return swift_bridgeObjectRelease();
}

uint64_t _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  a3(a6, v10);

  return swift_release();
}

uint64_t static Entity.__loadAllAsync(contentsOf:)(uint64_t a1)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = specialized static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(a1, (uint64_t)v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  return v1;
}

uint64_t closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v38 = a7;
  uint64_t v31 = a4;
  long long v32 = a6;
  uint64_t v30 = a2;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  long long v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  outlined init with copy of (Int, URL)(a3, (uint64_t)v41, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  outlined init with take of Transform?((uint64_t)v41, v22 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  *(void *)(v22 + 56) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22 + v20, v18, v15);
  long long v23 = v32;
  *(void *)(v22 + v21) = v32;
  uint64_t v24 = (void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v24 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v24[1] = v19;
  aBlock[4] = partial apply for doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_205;
  unint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v26 = v23;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v28 = v33;
  uint64_t v27 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v14, v28, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  return swift_release();
}

uint64_t doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v23 = a5;
  uint64_t v26 = a4;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  __int16 v35 = 1;
  char v36 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  LOBYTE(aBlock) = 1;
  outlined assign with copy of __DownsamplingStrategy?(a1, (uint64_t)&v34[8]);
  uint64_t v15 = __SceneResourceCache.loadSceneResources(url:options:)(a3, (uint64_t)&aBlock);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v18 = (void *)(v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = v24;
  *uint64_t v18 = v23;
  v18[1] = v19;
  _OWORD v31[4] = partial apply for closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
  v31[5] = v17;
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 1107296256;
  v31[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v31[3] = &block_descriptor_217;
  unint64_t v20 = _Block_copy(v31);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = MEMORY[0x263F8EE78];
  _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v11, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v27);
  swift_release();
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&aBlock);
}

uint64_t closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void))
{
  uint64_t v3 = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v7 = a1 + 56;
    do
    {
      uint64_t v8 = *(void *)(v7 - 16);
      uint64_t v9 = *(void *)(v7 - 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      uint64_t v10 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v15, 0);
      v15[0] = v8;
      v15[1] = v9;
      swift_bridgeObjectRetain_n();
      uint64_t v11 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      swift_beginAccess();
      objc_setAssociatedObject(v10, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v11, (void *)0x301);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      __SceneResourceCache.Entry.attach(toEntity:)(v10);
      uint64_t v12 = type metadata accessor for Entity();
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      specialized static Entity.enumerateCore(entity:recursive:block:)((uint64_t)v10, 1, v12);
      static UuidRemapHelper.remapIdentifiersAndInteractions(root:)((uint64_t)v10);
      if (REShadowsGetEnableDefaultShadows()) {
        MEMORY[0x22A691220](*((void *)v10 + 2), 1);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 40;
      --v4;
    }
    while (v4);
    uint64_t v5 = v16;
    uint64_t v3 = a3;
  }
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REMetricLoadFile();
  swift_release();
  v3(v5, 0);
  return swift_bridgeObjectRelease();
}

uint64_t static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t v5 = result;
    swift_retain();
    REStatic3DTextComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REMeshComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (!REMeshComponentGetMesh())
      {
        if (REStatic3DTextComponentGetText())
        {
          if (REStatic3DTextComponentGetFont())
          {
            uint64_t v30 = specialized static __ServiceLocator.shared.getter() + 120;
            swift_beginAccess();
            outlined init with copy of __REAssetService(v30, (uint64_t)v36);
            uint64_t v31 = v37;
            uint64_t v32 = v38;
            __swift_project_boxed_opaque_existential_1(v36, v37);
            (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
            REStatic3DTextComponentGetFontSize();
            REStatic3DTextComponentGetExtrusionDepth();
            REStatic3DTextComponentGetSegmentDensity();
            REStatic3DTextComponentGetTextFrameOrigin();
            REStatic3DTextComponentGetTextFrameSize();
            REStatic3DTextComponentGetLineBreakMode();
            REStatic3DTextComponentGetTextAlignment();
            REStatic3DTextComponentGetVerticalTextAlignment();
            uint64_t ObjCClassMetadata = REAssetManagerMeshMemoryAssetCreate3dText();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
            if (ObjCClassMetadata)
            {
              REAssetSetNetworkSharingMode();
              REMeshComponentSetMesh();
              RERelease();
              if (a2)
              {
                uint64_t v7 = (ValueMetadata **)(a2 + 16);
                swift_beginAccess();
                uint64_t v8 = *(ValueMetadata **)(a2 + 16);
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(a2 + 16) = v8;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
LABEL_53:
                  uint64_t v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[1].Kind + 1, 1, v8);
                  *uint64_t v7 = v8;
                }
                unint64_t Kind = v8[1].Kind;
                unint64_t Description = (unint64_t)v8[1].Description;
                if (Kind >= Description >> 1)
                {
                  uint64_t v8 = (ValueMetadata *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(Description > 1), Kind + 1, 1, v8);
                  *uint64_t v7 = v8;
                }
                v8[1].unint64_t Kind = Kind + 1;
                *(&v8[2].Kind + Kind) = ObjCClassMetadata;
                swift_endAccess();
                swift_release();
              }
            }
          }
        }
      }
    }
    uint64_t ObjCClassMetadata = *(void *)(v5 + 16);
    swift_retain();
    if (REEntityGetChildCount() >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = &type metadata for __EntityInfoComponent;
      do
      {
        if ((uint64_t)v7 >= REEntityGetChildCount())
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t Child = REEntityGetChild();
        if (!Child) {
          goto LABEL_52;
        }
        uint64_t v10 = Child;
        id v11 = (id)REEntityGetSwiftObject();
        if (v11)
        {
          uint64_t ObjCClassMetadata = (uint64_t)v11;
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed()) {
            goto LABEL_51;
          }
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent()) {
            goto LABEL_36;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object) {
            goto LABEL_36;
          }
          uint64_t v13 = *(unsigned __int8 **)Object;
          uint64_t ObjCClassMetadata = *(void *)(Object + 8);
          if (ObjCClassMetadata) {
            BOOL v14 = 1;
          }
          else {
            BOOL v14 = v13 == 0;
          }
          if (v14)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v15 = *v13;
            uint64_t v16 = String.init(utf8String:)();
            if (v17) {
              Swift::Int v18 = v16;
            }
            else {
              Swift::Int v18 = 0;
            }
            if (v17) {
              unint64_t v19 = v17;
            }
            else {
              unint64_t v19 = 0xE000000000000000;
            }
            uint64_t v13 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            uint64_t ObjCClassMetadata = result;
            *(void *)(result + 16) = v13;
          }
          if (!v13)
          {
            __break(1u);
            return result;
          }
          swift_retain();
          uint64_t v20 = String.init(utf8String:)();
          unint64_t v22 = v21;
          swift_release();
          uint64_t v23 = v22 ? v20 : 0;
          unint64_t v24 = v22 ? v22 : 0xE000000000000000;
          uint64_t v25 = (NSString *)MEMORY[0x22A688A50](v23, v24);
          swift_bridgeObjectRelease();
          Class v26 = NSClassFromString(v25);

          swift_release();
          if (!v26) {
            goto LABEL_36;
          }
          uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          uint64_t v27 = swift_dynamicCastMetatype();
          if (v27)
          {
            uint64_t v28 = (*(uint64_t (**)(void))(v27 + 232))();
            uint64_t ObjCClassMetadata = *(void *)(v28 + 16);
            swift_retain();
            MEMORY[0x22A68E750](ObjCClassMetadata, 0);
            *(void *)(v28 + 16) = v10;
            MEMORY[0x22A68E750](v10, v28);
            swift_release();
          }
          else
          {
LABEL_36:
            makeEntity(for:)(v10);
          }
        }
        if ((uint64_t)v7 >= REEntityGetChildCount()) {
          goto LABEL_50;
        }
        uint64_t v7 = (ValueMetadata **)((char *)v7 + 1);
        uint64_t v29 = swift_retain();
        uint64_t ObjCClassMetadata = v3;
        static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(v29, a2);
        swift_release_n();
      }
      while ((uint64_t)v7 < REEntityGetChildCount());
    }
    return swift_release_n();
  }
  return result;
}

uint64_t static Entity.enumerateReferences(root:)(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x263F8EE78];
  REReferenceComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t v3 = swift_retain();
    MEMORY[0x22A688E10](v3);
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v1, &v5);
  return v5;
}

void specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 == 7)
  {
    uint64_t v6 = ChildCount;
    uint64_t v7 = swift_slowAlloc();
    REEntityGetChildren();
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
      {
        uint64_t v8 = (uint64_t *)v7;
        do
        {
          uint64_t v9 = *v8;
          if (!*v8) {
            goto LABEL_22;
          }
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            uint64_t v10 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            if (REEntityIsBeingDestroyed())
            {
              __break(1u);
              goto LABEL_20;
            }
            uint64_t v12 = specialized static Entity.entityInfoType(_:)();
            if (v12)
            {
              uint64_t v11 = (*(uint64_t (**)(void))(v12 + 232))();
              uint64_t v13 = *(void *)(v11 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v13, 0);
              *(void *)(v11 + 16) = v9;
              MEMORY[0x22A68E750](v9, v11);
              swift_release();
              goto LABEL_13;
            }
            uint64_t v10 = makeEntity(for:)(v9);
          }
          uint64_t v11 = v10;
LABEL_13:
          RENetworkComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          if (a2) {
            specialized static Entity.enumerateCore(entity:recursive:block:)(v11, 1, a3);
          }
          swift_release();
          ++v8;
          --v6;
        }
        while (v6);
      }
LABEL_23:
      JUMPOUT(0x22A696500);
    }
  }
  else
  {
LABEL_20:
    __break(1u);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  goto LABEL_23;
}

void specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 == 7)
  {
    uint64_t v8 = ChildCount;
    uint64_t v9 = swift_slowAlloc();
    REEntityGetChildren();
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (v8)
      {
        uint64_t v10 = (uint64_t *)v9;
        do
        {
          uint64_t v11 = *v10;
          if (!*v10) {
            goto LABEL_26;
          }
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            uint64_t v12 = swift_dynamicCastClassUnconditional();
          }
          else
          {
            if (REEntityIsBeingDestroyed())
            {
              __break(1u);
              goto LABEL_24;
            }
            uint64_t v14 = specialized static Entity.entityInfoType(_:)();
            if (v14)
            {
              uint64_t v13 = (*(uint64_t (**)(void))(v14 + 232))();
              uint64_t v15 = *(void *)(v13 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v15, 0);
              *(void *)(v13 + 16) = v11;
              MEMORY[0x22A68E750](v11, v13);
              swift_release();
              goto LABEL_13;
            }
            uint64_t v12 = makeEntity(for:)(v11);
          }
          uint64_t v13 = v12;
LABEL_13:
          REReferenceComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            uint64_t v16 = swift_retain();
            MEMORY[0x22A688E10](v16);
            if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          if (a2) {
            specialized static Entity.enumerateCore(entity:recursive:block:)(v13, 1, a3, a4);
          }
          swift_release();
          ++v10;
          --v8;
        }
        while (v8);
      }
LABEL_27:
      JUMPOUT(0x22A696500);
    }
  }
  else
  {
LABEL_24:
    __break(1u);
  }
  __break(1u);
LABEL_26:
  __break(1u);
  goto LABEL_27;
}

uint64_t closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](closure #1 in static Entity.loadReferences(root:), v5, v4);
}

uint64_t closure #1 in static Entity.loadReferences(root:)()
{
  uint64_t v30 = v0;
  unint64_t v1 = v0[10];
  swift_release();
  if (v1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = v0[10];
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v3 = v0[10];
    if (v2)
    {
LABEL_3:
      uint64_t v4 = 0;
      uint64_t v23 = v0 + 2;
      unint64_t v5 = v1 & 0xC000000000000001;
      uint64_t v27 = v3 + 32;
      uint64_t v25 = v2;
      unint64_t v24 = v1 & 0xC000000000000001;
      Class v26 = v0;
      do
      {
        if (v5)
        {
          uint64_t v6 = MEMORY[0x22A689930](v4, v0[10]);
          uint64_t v7 = v4 + 1;
          if (__OFADD__(v4, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v27 + 8 * v4);
          swift_retain();
          uint64_t v7 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        swift_retain();
        if (REEntityGetComponent())
        {
          ReferenceComponent.init(from:)((uint64_t)v29);
          swift_release();
          unint64_t v1 = v29[33];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if (v1)
          {
            swift_release();
          }
          else
          {
            uint64_t v9 = v0[11];
            uint64_t v8 = v0[12];
            uint64_t v10 = type metadata accessor for TaskPriority();
            uint64_t v11 = *(void *)(v10 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);
            uint64_t v12 = (void *)swift_allocObject();
            v12[2] = 0;
            uint64_t v13 = v12 + 2;
            v12[3] = 0;
            v12[4] = v6;
            uint64_t v28 = v12;
            outlined init with copy of (Int, URL)(v8, v9, &demangling cache variable for type metadata for TaskPriority?);
            LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
            swift_retain();
            uint64_t v14 = v0[11];
            if (v9 == 1)
            {
              outlined destroy of BodyTrackingComponent?(v0[11], &demangling cache variable for type metadata for TaskPriority?);
            }
            else
            {
              TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
            }
            unint64_t v1 = (unint64_t)v28;
            if (*v13)
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v17 = v16;
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v15 = 0;
              uint64_t v17 = 0;
            }
            unint64_t v5 = v24;
            uint64_t v18 = *(void *)v26[9];
            unint64_t v19 = (void *)(v17 | v15);
            if (v17 | v15)
            {
              unint64_t v19 = v23;
              void *v23 = 0;
              v23[1] = 0;
              v26[4] = v15;
              v26[5] = v17;
            }
            uint64_t v2 = v25;
            uint64_t v20 = v26[12];
            v26[6] = 1;
            v26[7] = v19;
            v26[8] = v18;
            swift_task_create();
            swift_release();
            swift_release();
            outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for TaskPriority?);
            uint64_t v0 = v26;
          }
        }
        else
        {
          swift_release_n();
        }
        ++v4;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t closure #1 in closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return static ReferenceComponent.loadReference(at:)(a4);
}

uint64_t fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v26 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v26 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v26 - v18;
  _s17RealityFoundation9LoadTraceVWOcTm_0(a1, (uint64_t)&v26 - v18, type metadata accessor for __RKEntityTriggerSpecification);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v19, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t)v10, v7);
    swift_endAccess();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v10, v4);
    return ((uint64_t (*)(char *, uint64_t))v25)(v13, v4);
  }
  else if (EnumCaseMultiPayload == 5)
  {
    uint64_t v21 = *(void *)(*(void *)v19 + 16);
    if (v21)
    {
      uint64_t v22 = *(void *)v19
          + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      uint64_t v23 = *(void *)(v26 + 72);
      do
      {
        _s17RealityFoundation9LoadTraceVWOcTm_0(v22, (uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
        fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(v16, a2);
        outlined destroy of LoadTrace((uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
        v22 += v23;
        --v21;
      }
      while (v21);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined destroy of LoadTrace((uint64_t)v19, type metadata accessor for __RKEntityTriggerSpecification);
  }
}

BOOL *static Entity.load(assetDescriptor:)()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (one-time initialization token for synchronousLoadOptions != -1) {
    swift_once();
  }
  char v1 = static Entity.synchronousLoadOptions;
  swift_beginAccess();
  char v2 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  *(void *)(inited + 16) = 0xD000000000000014;
  *(void *)(inited + 24) = 0x800000022835C370;
  *(unsigned char *)(inited + 32) = v1;
  *(unsigned char *)(inited + 33) = v2;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v17);
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*((void (**)(uint64_t, BOOL *))v6 + 4))(v5, v6);
  uint64_t v7 = REAssetHandleCreateWithAssetDescriptor();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*((void (**)(uint64_t, BOOL *))v10 + 4))(v9, v10);
  REAssetManagerCreateAssetRequest();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t v16 = 0;
  if (!REAssetLoadRequestSetLoadAndWaitForResourceSharingClients())
  {
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    *uint64_t v12 = 0xD000000000000046;
    v12[1] = 0x800000022835C390;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_8;
  }
  REAssetLoadRequestAddAsset();
  REAssetLoadRequestWaitForCompletion();
  uint64_t v18 = MEMORY[0x263F8DD08];
  *(void *)uint64_t v17 = v7;
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v15);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  RERetain();
  type metadata accessor for __SceneResource();
  *(void *)(swift_initStackObject() + 16) = v14;
  uint64_t v11 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, v17, 0);
  if (v0)
  {
    swift_setDeallocating();
    RERelease();
LABEL_8:
    RERelease();
    RERelease();
    swift_release();
    return v10;
  }
  uint64_t v10 = v11;
  specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v11);
  swift_setDeallocating();
  RERelease();
  RERelease();
  RERelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v10;
}

uint64_t static Entity.loadAsync(assetDescriptor:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *a1;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  swift_unownedRetainStrong();
  uint64_t v9 = *(void **)(v8 + 32);
  swift_retain();
  id v10 = v9;
  swift_release();
  *uint64_t v5 = v10;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v3 + 8);
  int v12 = v3 + 8;
  v13(v5, v2);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for LoadRequestDependencies();
  uint64_t v2 = swift_allocObject();
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(v2 + 24) = v15;
  int v12 = 1;
  swift_beginAccess();
  *(void *)(v2 + 16) = v14;
  swift_bridgeObjectRelease();
  if (one-time initialization token for asynchronousLoadOptions != -1) {
LABEL_5:
  }
    swift_once();
  char v16 = static Entity.asynchronousLoadOptions;
  swift_beginAccess();
  char v17 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  *(void *)(v18 + 16) = 0xD000000000000014;
  *(void *)(v18 + 24) = 0x800000022835C370;
  *(unsigned char *)(v18 + 32) = v16;
  *(unsigned char *)(v18 + 33) = v17;
  *(_WORD *)(v18 + 34) = v12;
  *(_DWORD *)(v18 + 36) = v12;
  swift_weakAssign();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v6;
  *(void *)(v19 + 24) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Entity>);
  uint64_t v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Entity, Error>?>);
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  *(void *)(v21 + 16) = v22;
  *(void *)(v21 + 24) = 0;
  *(unsigned char *)(v21 + 32) = -1;
  *(void *)(v20 + 16) = v21;
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = partial apply for closure #1 in static Entity.loadAsync(assetDescriptor:);
  v23[3] = v19;
  v23[4] = v21;
  v23[5] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Entity, Error>);
  swift_allocObject();
  swift_retain();
  uint64_t v24 = Future.init(_:)();
  swift_release();

  *(void *)(v20 + 24) = v24;
  return v20;
}

void closure #1 in static Entity.loadAsync(assetDescriptor:)(void (*a1)(void **), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&aBlock);
  uint64_t v8 = v32;
  uint64_t v9 = v33;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v9 + 4))(v8, v9);
  uint64_t v10 = REAssetHandleCreateWithAssetDescriptor();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  uint64_t v11 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11, (uint64_t)&aBlock);
  int v12 = v32;
  uint64_t v13 = v33;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v13 + 4))(v12, v13);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  uint64_t v38 = 0;
  uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15, (uint64_t)&aBlock);
  char v16 = v32;
  char v17 = v33;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v32);
  (*((void (**)(void *, uint64_t (*)(char)))v17 + 7))(v16, v17);
  uint64_t v18 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v18, (uint64_t)v35);
  uint64_t v19 = v36;
  uint64_t v20 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
  LODWORD(v18) = REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (v18)
  {
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = v10;
    v21[3] = AssetRequest;
    v21[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v21[5] = v6;
    v21[6] = a4;
    long long v33 = partial apply for closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:);
    uint64_t v34 = v21;
    uint64_t aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v30 = 1107296256;
    uint64_t v31 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v32 = &block_descriptor_190;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v22);
    REAssetLoadRequestAddAsset();
  }
  else
  {
    swift_release();
    uint64_t v23 = v38;
    if (v38)
    {
      type metadata accessor for CFErrorRef(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v24 = (void *)swift_allocError();
      *uint64_t v25 = v23;
      uint64_t aBlock = v24;
      LOBYTE(v30) = 1;
      id v26 = v23;
      a1(&aBlock);
    }
    else
    {
      type metadata accessor for Entity.LoadError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
      uint64_t v24 = (void *)swift_allocError();
      *uint64_t v27 = 0xD000000000000046;
      v27[1] = 0x800000022835C390;
      swift_storeEnumTagMultiPayload();
      uint64_t aBlock = v24;
      LOBYTE(v30) = 1;
      a1(&aBlock);
    }
  }
}

uint64_t closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(char a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  if (a1)
  {
    uint64_t v12 = MEMORY[0x263F8DD08];
    v11[0] = a2;
    outlined init with copy of Any((uint64_t)v11, (uint64_t)v16);
    swift_dynamicCast();
    uint64_t v7 = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    RERetain();
    type metadata accessor for __SceneResource();
    *(void *)(swift_initStackObject() + 16) = v7;
    uint64_t v8 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v11, 0);
    memset(v11, 0, sizeof(v11));
    uint64_t v12 = 1;
    long long v13 = 0u;
    long long v14 = 0u;
    specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)((uint64_t)v8, (uint64_t)v11, a4, a5, (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    RERelease();
    return RERelease();
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v9 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    a4((uint64_t)v9, 1);

    RERelease();
    return RERelease();
  }
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Entity();
  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  if (v3[34] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v6);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
  }
  static Entity.generateMeshForStatic3DText(root:generatedTextAssets:)(a1, a2);
  if (v3[35] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  if (v3[33] == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    return REEntityGetOrAddComponentByClass();
  }
  else
  {
    uint64_t result = REShadowsGetEnableDefaultShadows();
    if (result)
    {
      JUMPOUT(0x22A691220);
    }
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)(uint64_t a1)
{
  type metadata accessor for Entity.AssetArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = MEMORY[0x263F8EE78];
  uint64_t v3 = inited + 16;
  specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(a1, inited);
  swift_beginAccess();
  uint64_t v4 = *(void *)v3;
  if (!*(void *)(*(void *)v3 + 16))
  {
    String.utf8CString.getter();
    REMetricLoadFile();
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  specialized Entity.LoadFinisher.makeLoadRequest()();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  REAssetLoadRequestWaitForCompletion();
  if (REAssetLoadRequestGetState() == 1) {
    goto LABEL_10;
  }
  uint64_t RequestCopyError = REAssetLoadRequestCopyError();
  if (RequestCopyError)
  {
    uint64_t v8 = RequestCopyError;
    type metadata accessor for CFErrorRef(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    swift_allocError();
    *uint64_t v9 = v8;
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
  }
  swift_willThrow();
  swift_release();
  swift_setDeallocating();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Entity.LoadFinisher.setupAfterRealityLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4, uint64_t (*a5)(uint64_t, void (*)(uint64_t, void), uint64_t))
{
  type metadata accessor for Entity.AssetArray();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = MEMORY[0x263F8EE78];
  specialized Entity.LoadFinisher.setupAfterRealityLoad(_:generatedTextAssets:)(a1, inited);
  swift_beginAccess();
  if (!*(void *)(*(void *)(inited + 16) + 16))
  {
    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  uint64_t v11 = a5(a1, a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v29, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    uint64_t v12 = v31;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v29);
    if (v12)
    {
      uint64_t Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      uint64_t v14 = swift_allocObject();
      RERetain();
      *(void *)(v14 + 16) = Stats;
      uint64_t v15 = (void *)(v12 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      uint64_t v16 = swift_retain();
      MEMORY[0x22A688E10](v16);
      if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  uint64_t v17 = *(void *)(*(void *)(inited + 16) + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v17; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  uint64_t v20 = Strong;
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  v29[0] = v11;
  uint64_t v21 = (os_unfair_lock_s *)(*(void *)(v20 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v21);
  outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
  uint64_t v22 = (void *)(v20 + 16);
  swift_beginAccess();
  uint64_t v23 = *(void **)(v20 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v20 + 16) = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    *uint64_t v22 = v23;
  }
  unint64_t v26 = v23[2];
  unint64_t v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v23);
    *uint64_t v22 = v23;
  }
  void v23[2] = v26 + 1;
  outlined init with take of Any(v28, &v23[4 * v26 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  id v4 = objc_msgSend(self, sel_defaultBody3DSkeletonDefinition);
  id v5 = objc_msgSend(v4, sel_jointNames);

  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  _s10RealityKit6EntityC20withUnsafeJointNames33_F26D63620DB78A19432B1EBEC9E8266ALLyxSaySSG_xSPySPys4Int8VGSgGSgKXEtKlFZyt_Tgm504_s10a4Kit6c26C20withCharacterOptions33_hijklmn39ALLyxxSo08REEntityeF0azKXEKlFZxSPySPys4O19VGSgGSgKXEfU_yt_Tg5SiSo08REEntityS7Optionsaxs5Error_pRi_zRi0_zlyytIsglrzo_Tf1nnc_n(v6, *(void *)(v6 + 16), (void (*)(void))partial apply for specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:));
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v1[34])
    {
      uint64_t v8 = type metadata accessor for Entity();
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v8);
      static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
    }
    if (v1[35] == 1)
    {
      RENetworkComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
    }
    if (v1[33] == 1)
    {
      RERayTracedShadowReceiverComponentGetComponentType();
      return REEntityGetOrAddComponentByClass();
    }
    else
    {
      uint64_t result = REShadowsGetEnableDefaultShadows();
      if (result) {
        return MEMORY[0x22A691220](*(void *)(a1 + 16), 1);
      }
    }
  }
  return result;
}

{
  unsigned char *v1;
  uint64_t v3;
  uint64_t result;

  specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(a1);
  if (v1[34] == 1)
  {
    uint64_t v3 = type metadata accessor for Entity();
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v3);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1);
  }
  if (v1[35] == 1)
  {
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  if (v1[33] == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    return REEntityGetOrAddComponentByClass();
  }
  else
  {
    uint64_t result = REShadowsGetEnableDefaultShadows();
    if (result) {
      return MEMORY[0x22A691220](*(void *)(a1 + 16), 1);
    }
  }
  return result;
}

uint64_t specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  REEntityCharacterSetup();
  uint64_t result = REEntityCharacterGetJointCount();
  if (result != *(void *)(a1 + 8))
  {
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(uint64_t a1)
{
  uint64_t result = specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  if (!v2)
  {
    type metadata accessor for Entity.AssetArray();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = MEMORY[0x263F8EE78];
    specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(v4);
    swift_beginAccess();
    if (*(void *)(*(void *)(v4 + 16) + 16))
    {
      specialized Entity.LoadFinisher.makeLoadRequest()();
      uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 16);
      if (v5)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v5; ++i)
          REAssetLoadRequestAddAsset();
        swift_bridgeObjectRelease();
      }
      REAssetLoadRequestWaitForCompletion();
      if (REAssetLoadRequestGetState() != 1)
      {
        uint64_t RequestCopyError = REAssetLoadRequestCopyError();
        if (RequestCopyError)
        {
          uint64_t v14 = RequestCopyError;
          type metadata accessor for CFErrorRef(0);
          _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
          swift_allocError();
          *uint64_t v15 = v14;
        }
        else
        {
          type metadata accessor for Entity.LoadError(0);
          _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
        }
        swift_willThrow();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v1 + 16);
      unint64_t v8 = *(void *)(v1 + 24);
      os_log_type_t v9 = static os_log_type_t.info.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      uint64_t v10 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v10, v9))
      {
        uint64_t v16 = v7;
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        uint64_t v17 = v12;
        *(_DWORD *)uint64_t v11 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v8, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v10, v9, "No assets were found in file %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v12, -1, -1);
        MEMORY[0x22A696500](v11, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      String.utf8CString.getter();
      REMetricLoadFile();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(uint64_t a1, void (*a2)(void))
{
  uint64_t result = specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  if (!v3)
  {
    type metadata accessor for Entity.AssetArray();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = MEMORY[0x263F8EE78];
    a2();
    swift_beginAccess();
    if (*(void *)(*(void *)(v6 + 16) + 16))
    {
      specialized Entity.LoadFinisher.makeLoadRequest()();
      uint64_t v7 = *(void *)(*(void *)(v6 + 16) + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v7; ++i)
          REAssetLoadRequestAddAsset();
        swift_bridgeObjectRelease();
      }
      REAssetLoadRequestWaitForCompletion();
      if (REAssetLoadRequestGetState() != 1)
      {
        uint64_t RequestCopyError = REAssetLoadRequestCopyError();
        if (RequestCopyError)
        {
          uint64_t v16 = RequestCopyError;
          type metadata accessor for CFErrorRef(0);
          _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
          swift_allocError();
          *uint64_t v17 = v16;
        }
        else
        {
          type metadata accessor for Entity.LoadError(0);
          _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
          swift_allocError();
          swift_storeEnumTagMultiPayload();
        }
        swift_willThrow();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      uint64_t v9 = *(void *)(v2 + 16);
      unint64_t v10 = *(void *)(v2 + 24);
      os_log_type_t v11 = static os_log_type_t.info.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v12, v11))
      {
        uint64_t v18 = v9;
        long long v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        uint64_t v19 = v14;
        *(_DWORD *)long long v13 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v10, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v12, v11, "No assets were found in file %s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v14, -1, -1);
        MEMORY[0x22A696500](v13, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      String.utf8CString.getter();
      REMetricLoadFile();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4)
{
  specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  type metadata accessor for Entity.AssetArray();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = MEMORY[0x263F8EE78];
  specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(v9);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v9 + 16) + 16))
  {
    uint64_t v11 = *(void *)(v4 + 16);
    unint64_t v12 = *(void *)(v4 + 24);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = v11;
      uint64_t v16 = swift_slowAlloc();
      v35[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v12, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v14, v13, "No assets were found in file %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v16, -1, -1);
      MEMORY[0x22A696500](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  uint64_t v10 = specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v35, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    uint64_t v17 = v37;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v35);
    if (v17)
    {
      uint64_t Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      uint64_t v19 = swift_allocObject();
      RERetain();
      *(void *)(v19 + 16) = Stats;
      uint64_t v20 = (void *)(v17 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      uint64_t v21 = swift_retain();
      MEMORY[0x22A688E10](v21);
      if (*(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  uint64_t v22 = *(void *)(*(void *)(v9 + 16) + 16);
  if (v22)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v22; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  uint64_t v25 = Strong;
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  v35[0] = v10;
  unint64_t v26 = (os_unfair_lock_s *)(*(void *)(v25 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v26);
  outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
  uint64_t v27 = (void *)(v25 + 16);
  swift_beginAccess();
  uint64_t v28 = *(void **)(v25 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v25 + 16) = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    *uint64_t v27 = v28;
  }
  unint64_t v31 = v28[2];
  unint64_t v30 = v28[3];
  if (v31 >= v30 >> 1)
  {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
    *uint64_t v27 = v28;
  }
  _OWORD v28[2] = v31 + 1;
  outlined init with take of Any(v34, &v28[4 * v31 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4, void (*a5)(void), uint64_t (*a6)(uint64_t, void (*)(uint64_t, void), uint64_t))
{
  specialized Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
  type metadata accessor for Entity.AssetArray();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = MEMORY[0x263F8EE78];
  uint64_t v14 = v13 + 16;
  a5();
  swift_beginAccess();
  if (!*(void *)(*(void *)(v13 + 16) + 16))
  {
    uint64_t v17 = *(void *)(v6 + 16);
    unint64_t v16 = *(void *)(v6 + 24);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    uint64_t v19 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v19, v18))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      v39[0] = v37;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v19, v18, "No assets were found in file %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v37, -1, -1);
      MEMORY[0x22A696500](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a3(a1, 0);
    return swift_release();
  }
  uint64_t v15 = a6(a1, a3, a4);
  outlined init with copy of (Int, URL)(a2, (uint64_t)v39, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (Request == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v39, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    uint64_t v21 = v41;
    swift_retain();
    outlined destroy of Entity.__LoadOptions((uint64_t)v39);
    if (v21)
    {
      uint64_t Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      uint64_t v23 = swift_allocObject();
      RERetain();
      *(void *)(v23 + 16) = Stats;
      uint64_t v24 = (void *)(v21 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      uint64_t v25 = swift_retain();
      MEMORY[0x22A688E10](v25);
      if (*(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  uint64_t v26 = *(void *)(*(void *)v14 + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v26; ++i)
      REAssetLoadRequestAddAsset();
    swift_bridgeObjectRelease();
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    return swift_release();
  }
  uint64_t v29 = Strong;
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  v39[0] = v15;
  unint64_t v30 = (os_unfair_lock_s *)(*(void *)(v29 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v30);
  outlined init with copy of Any((uint64_t)v39, (uint64_t)v38);
  unint64_t v31 = (void *)(v29 + 16);
  swift_beginAccess();
  uint64_t v32 = *(void **)(v29 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v29 + 16) = v32;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    *unint64_t v31 = v32;
  }
  unint64_t v35 = v32[2];
  unint64_t v34 = v32[3];
  if (v35 >= v34 >> 1)
  {
    uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v32);
    *unint64_t v31 = v32;
  }
  v32[2] = v35 + 1;
  outlined init with take of Any(v38, &v32[4 * v35 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v30);
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t specialized Entity.LoadFinisher.makeLoadRequest()()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)&v3);
  return specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(&v3, *(unsigned char *)(v0 + 32) != 2, (*(unsigned char *)(v0 + 32) & 0xFE) != 2);
}

uint64_t specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  int v10 = *(_DWORD *)(v3 + 36);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = a2;
  *(void *)(v12 + 48) = a3;
  *(void *)(v12 + 56) = a1;
  *(void *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_38;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = _Block_copy(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v18[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  _OWORD v18[3] = &block_descriptor_157_1;
  unint64_t v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  _Block_release(v13);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void v18[6];
  void aBlock[6];

  uint64_t v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  int v10 = *(_DWORD *)(v3 + 36);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = a2;
  *(void *)(v12 + 48) = a3;
  *(void *)(v12 + 56) = a1;
  *(void *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_373;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = _Block_copy(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v18[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  _OWORD v18[3] = &block_descriptor_380;
  unint64_t v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  _Block_release(v13);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void v18[6];
  void aBlock[6];

  uint64_t v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  int v10 = *(_DWORD *)(v3 + 36);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = a2;
  *(void *)(v12 + 48) = a3;
  *(void *)(v12 + 56) = a1;
  *(void *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_573;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = _Block_copy(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v18[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  _OWORD v18[3] = &block_descriptor_580;
  unint64_t v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  _Block_release(v13);
  swift_release();
  swift_release();
  return v7;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void v18[6];
  void aBlock[6];

  uint64_t v7 = specialized Entity.LoadFinisher.makeLoadRequest()();
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  int v10 = *(_DWORD *)(v3 + 36);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = a2;
  *(void *)(v12 + 48) = a3;
  *(void *)(v12 + 56) = a1;
  *(void *)(v12 + 64) = v11;
  aBlock[4] = partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_249;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = _Block_copy(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v18[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  _OWORD v18[3] = &block_descriptor_256;
  unint64_t v16 = _Block_copy(v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  _Block_release(v13);
  swift_release();
  swift_release();
  return v7;
}

void specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a1)
  {
    String.utf8CString.getter();
    REMetricLoadFile();
    swift_release();
    a5(a7, 0);
  }
  else
  {
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v14 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    a5(v14, 1);
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = a9;
    uint64_t v15 = _Block_copy(aBlock);
    unint64_t v16 = _Block_copy(v15);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    v19[4] = a11;
    v19[5] = v17;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    _OWORD v19[3] = a12;
    os_log_type_t v18 = _Block_copy(v19);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v18);
    swift_release();
    _Block_release(v15);
  }
}

uint64_t specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(void *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      uint64_t Child = REEntityGetChild();
      if (!Child) {
        goto LABEL_41;
      }
      uint64_t v5 = Child;
      if ((id)REEntityGetSwiftObject()) {
        break;
      }
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_40;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent()) {
        goto LABEL_33;
      }
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_33;
      }
      uint64_t v8 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 0;
      }
      if (v9)
      {
        swift_retain();
      }
      else
      {
        int v10 = *v8;
        uint64_t v11 = String.init(utf8String:)();
        if (v12) {
          Swift::Int v13 = v11;
        }
        else {
          Swift::Int v13 = 0;
        }
        if (v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = 0xE000000000000000;
        }
        uint64_t v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v8;
      }
      if (!v8) {
        goto LABEL_42;
      }
      swift_retain();
      uint64_t v15 = String.init(utf8String:)();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v18 = v17 ? v15 : 0;
      unint64_t v19 = v17 ? v17 : 0xE000000000000000;
      uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
      swift_bridgeObjectRelease();
      Class v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        uint64_t v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = v5;
      MEMORY[0x22A68E750](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount()) {
        goto LABEL_39;
      }
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount()) {
        return swift_release();
      }
    }
    type metadata accessor for Entity();
    uint64_t v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    uint64_t v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(void *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      uint64_t Child = REEntityGetChild();
      if (!Child) {
        goto LABEL_41;
      }
      uint64_t v5 = Child;
      if ((id)REEntityGetSwiftObject()) {
        break;
      }
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_40;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent()) {
        goto LABEL_33;
      }
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_33;
      }
      uint64_t v8 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 0;
      }
      if (v9)
      {
        swift_retain();
      }
      else
      {
        int v10 = *v8;
        uint64_t v11 = String.init(utf8String:)();
        if (v12) {
          Swift::Int v13 = v11;
        }
        else {
          Swift::Int v13 = 0;
        }
        if (v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = 0xE000000000000000;
        }
        uint64_t v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v8;
      }
      if (!v8) {
        goto LABEL_42;
      }
      swift_retain();
      uint64_t v15 = String.init(utf8String:)();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v18 = v17 ? v15 : 0;
      unint64_t v19 = v17 ? v17 : 0xE000000000000000;
      uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
      swift_bridgeObjectRelease();
      Class v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        uint64_t v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = v5;
      MEMORY[0x22A68E750](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount()) {
        goto LABEL_39;
      }
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount()) {
        return swift_release();
      }
    }
    type metadata accessor for Entity();
    uint64_t v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    uint64_t v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(void *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      uint64_t Child = REEntityGetChild();
      if (!Child) {
        goto LABEL_41;
      }
      uint64_t v5 = Child;
      if ((id)REEntityGetSwiftObject()) {
        break;
      }
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_40;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent()) {
        goto LABEL_33;
      }
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_33;
      }
      uint64_t v8 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 0;
      }
      if (v9)
      {
        swift_retain();
      }
      else
      {
        int v10 = *v8;
        uint64_t v11 = String.init(utf8String:)();
        if (v12) {
          Swift::Int v13 = v11;
        }
        else {
          Swift::Int v13 = 0;
        }
        if (v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = 0xE000000000000000;
        }
        uint64_t v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v8;
      }
      if (!v8) {
        goto LABEL_42;
      }
      swift_retain();
      uint64_t v15 = String.init(utf8String:)();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v18 = v17 ? v15 : 0;
      unint64_t v19 = v17 ? v17 : 0xE000000000000000;
      uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
      swift_bridgeObjectRelease();
      Class v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        uint64_t v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = v5;
      MEMORY[0x22A68E750](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount()) {
        goto LABEL_39;
      }
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount()) {
        return swift_release();
      }
    }
    type metadata accessor for Entity();
    uint64_t v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    uint64_t v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t Child;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:);
  *(void *)(v2 + 24) = a1;
  REEntityFindAssetDependencies();
  swift_release();
  swift_retain();
  if (REEntityGetChildCount() >= 1)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (v3 >= REEntityGetChildCount())
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
      }
      uint64_t Child = REEntityGetChild();
      if (!Child) {
        goto LABEL_41;
      }
      uint64_t v5 = Child;
      if ((id)REEntityGetSwiftObject()) {
        break;
      }
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_40;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent()) {
        goto LABEL_33;
      }
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_33;
      }
      uint64_t v8 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v8 == 0;
      }
      if (v9)
      {
        swift_retain();
      }
      else
      {
        int v10 = *v8;
        uint64_t v11 = String.init(utf8String:)();
        if (v12) {
          Swift::Int v13 = v11;
        }
        else {
          Swift::Int v13 = 0;
        }
        if (v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = 0xE000000000000000;
        }
        uint64_t v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v8;
      }
      if (!v8) {
        goto LABEL_42;
      }
      swift_retain();
      uint64_t v15 = String.init(utf8String:)();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v18 = v17 ? v15 : 0;
      unint64_t v19 = v17 ? v17 : 0xE000000000000000;
      uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
      swift_bridgeObjectRelease();
      Class v21 = NSClassFromString(v20);

      swift_release();
      if (!v21
        || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v22 = swift_dynamicCastMetatype()) == 0))
      {
LABEL_33:
        uint64_t v6 = makeEntity(for:)(v5);
        goto LABEL_34;
      }
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = v5;
      MEMORY[0x22A68E750](v5, v23);
      swift_release();
LABEL_35:
      if (v3 >= REEntityGetChildCount()) {
        goto LABEL_39;
      }
      ++v3;
      specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v23);
      swift_release();
      if (v3 >= REEntityGetChildCount()) {
        return swift_release();
      }
    }
    type metadata accessor for Entity();
    uint64_t v6 = swift_dynamicCastClassUnconditional();
LABEL_34:
    uint64_t v23 = v6;
    goto LABEL_35;
  }
  return swift_release();
}

uint64_t closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void **)(a2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *uint64_t v4 = v5;
  }
  _OWORD v5[2] = v8 + 1;
  v5[v8 + 4] = a1;
  return swift_endAccess();
}

uint64_t Entity.LoadFinisher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t __SceneResource.makeAnchorEntity(fileName:)(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v26 = 0;
  unint64_t v12 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(1, &v26, 1);
  if (!v2)
  {
    Swift::Int v13 = v12;
    type metadata accessor for AnchorEntity();
    uint64_t v14 = swift_dynamicCastClass();
    if (v14)
    {
      uint64_t v3 = v14;
      BOOL v15 = v26;
      swift_retain();
      if (!v15
        || (__SceneResource.findREAnchoringComponent(root:)((uint64_t)v11),
            uint64_t v16 = type metadata accessor for __REAnchoringType(),
            int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v11, 1, v16),
            outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for __REAnchoringType?), v17 != 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
        *(void *)(inited + 32) = v13;
        uint64_t v25 = inited;
        specialized Array._endMutation()();
        unint64_t v19 = v25;
        swift_retain();
        __SceneResource.makeAnchorEntity(from:fileName:)(v19, a1, a2);
        swift_bridgeObjectRelease();
        REAnchoringComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        AnchoringComponent.init(from:)((uint64_t)v8);
        REAnchoringComponentGetComponentType();
        uint64_t v25 = REEntityGetOrAddComponentByClass();
        AnchoringComponent.__toCore(_:)();
        REAnchorComponentGetComponentType();
        if (REEntityGetComponentByClass()) {
          REEntityRemoveComponent();
        }
        outlined destroy of LoadTrace((uint64_t)v8, type metadata accessor for AnchoringComponent);
        swift_release();
      }
      swift_release();
    }
    else
    {
      static os_log_type_t.fault.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      Class v21 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v23 = v22;
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 2, v24);
      swift_willThrow();
      swift_release();
    }
  }
  return v3;
}

uint64_t __SceneResource.findREAnchoringComponent(root:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - v6;
  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v7);
    uint64_t v8 = type metadata accessor for __REAnchoringType();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for __REAnchoringType?);
      if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject()) {
        return __REAnchoring.type.getter(a1);
      }
      else {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
      }
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for __REAnchoringType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for __REAnchoringType?);
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_25:
    swift_release();
    uint64_t v20 = type metadata accessor for __REAnchoringType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v12 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_32;
    }
    uint64_t v13 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v14 = swift_dynamicCastClassUnconditional();
LABEL_16:
      uint64_t v15 = v14;
      goto LABEL_20;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      goto LABEL_31;
    }
    uint64_t v16 = specialized static Entity.entityInfoType(_:)();
    if (!v16)
    {
      uint64_t v14 = makeEntity(for:)(v13);
      goto LABEL_16;
    }
    uint64_t v15 = (*(uint64_t (**)(void))(v16 + 232))();
    uint64_t v17 = *(void *)(v15 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v17, 0);
    *(void *)(v15 + 16) = v13;
    MEMORY[0x22A68E750](v13, v15);
    swift_release();
LABEL_20:
    uint64_t result = REEntityGetChildCount();
    if (v12 >= result) {
      goto LABEL_30;
    }
    __SceneResource.findREAnchoringComponent(root:)(v15);
    swift_release();
    uint64_t v18 = type metadata accessor for __REAnchoringType();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v4, 1, v18) != 1)
    {
      swift_release();
      outlined init with take of RealityFileLoadInformation((uint64_t)v4, a1, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
    }
    ++v12;
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for __REAnchoringType?);
    if (v12 >= REEntityGetChildCount()) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t __SceneResource.makeAnchorEntity(from:fileName:)(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for __REAnchoringType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v35 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v35 - v15;
  __n128 v18 = MEMORY[0x270FA5388](v17);
  uint64_t v40 = v6;
  uint64_t v19 = *(void (**)(__n128))(v6 + 56);
  uint64_t v43 = v5;
  uint64_t v44 = (uint64_t)&v35 - v20;
  v19(v18);
  uint64_t v38 = a3;
  uint64_t v36 = v8;
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    if (v21) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v21)
    {
LABEL_3:
      unint64_t v41 = a1;
      unint64_t v42 = a1 & 0xC000000000000001;
      uint64_t v22 = (uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
      uint64_t v23 = 4;
      while (1)
      {
        uint64_t v24 = v23 - 4;
        if (v42)
        {
          a1 = MEMORY[0x22A689930](v23 - 4, a1);
          uint64_t v25 = v23 - 3;
          if (__OFADD__(v24, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          a1 = *(void *)(a1 + 8 * v23);
          swift_retain();
          uint64_t v25 = v23 - 3;
          if (__OFADD__(v24, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        __SceneResource.findREAnchoringComponent(root:)((uint64_t)v16);
        swift_release();
        uint64_t v26 = v44;
        outlined destroy of BodyTrackingComponent?(v44, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with take of Transform?((uint64_t)v16, v26, &demangling cache variable for type metadata for __REAnchoringType?);
        outlined init with copy of (Int, URL)(v26, (uint64_t)v13, &demangling cache variable for type metadata for __REAnchoringType?);
        LODWORD(v26) = (*v22)(v13, 1, v43);
        outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for __REAnchoringType?);
        a1 = v41;
        if (v26 == 1)
        {
          ++v23;
          if (v25 != v21) {
            continue;
          }
        }
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v39;
  outlined init with copy of (Int, URL)(v44, v39, &demangling cache variable for type metadata for __REAnchoringType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v27, 1, v43) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v27, &demangling cache variable for type metadata for __REAnchoringType?);
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of __SceneResource.makeAnchorEntity(from:fileName:));
    uint64_t v29 = specialized AnchorEntity.__allocating_init(world:)(v28);
  }
  else
  {
    uint64_t v30 = (uint64_t)v36;
    outlined init with take of RealityFileLoadInformation(v27, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    v31._uint64_t countAndFlagsBits = 0x7974696C616572;
    v31._object = (void *)0xE700000000000000;
    uint64_t v32 = v37;
    uint64_t v33 = v38;
    if (String.hasSuffix(_:)(v31))
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (void *)0xE000000000000000;
    }
    uint64_t v29 = __REAnchoringType.createAnchorEntity(realityAssetFileName:)(v32, v33);
    swift_bridgeObjectRelease();
    outlined destroy of LoadTrace(v30, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  }
  outlined destroy of BodyTrackingComponent?(v44, &demangling cache variable for type metadata for __REAnchoringType?);
  return v29;
}

BOOL *__SceneResourceLoadResult.__makeEntity()()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  uint64_t v4 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)v7, 0);
  if (v1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7[0] = v2;
    v7[1] = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v4;
}

void *__SceneResourceLoadResult.__makeAnchorEntity()()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  uint64_t v4 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v2, v3);
  if (v1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v5 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v4, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v5, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v4;
}

BOOL *protocol witness for SceneResourceEntityMaker.makeEntity() in conformance SceneResourceLoadResult()
{
  return SceneResourceLoadResult.makeEntity()();
}

void *protocol witness for SceneResourceEntityMaker.makeAnchorEntity() in conformance SceneResourceLoadResult()
{
  return SceneResourceLoadResult.makeAnchorEntity()();
}

BOOL *protocol witness for SceneResourceEntityMaker.makeEntity() in conformance UncachedSceneResourceLoadResult()
{
  return __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, &v1, 0);
}

uint64_t protocol witness for SceneResourceEntityMaker.makeAnchorEntity() in conformance UncachedSceneResourceLoadResult()
{
  return __SceneResource.makeAnchorEntity(fileName:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t __SceneImportOperation.makeEntity()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t result = __SceneImportOperation.importedScenes.getter();
  uint64_t v10 = result;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v30 = MEMORY[0x263F8EE78];
  uint64_t v28 = *(void *)(result + 16);
  if (!v28)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void *)(v11 + 16);
    if (v17 >= 2)
    {
      swift_release();
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v19;
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 2, 2, v21);
    }
    else
    {
      if (v17)
      {
        _s17RealityFoundation9LoadTraceVWOcTm_0(v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v18, 1, v3);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
      {
        uint64_t v24 = *(void *)&v2[*(int *)(v3 + 24)];
        swift_retain();
        outlined destroy of LoadTrace((uint64_t)v2, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v25 = *(void *)(v24 + 16);
        RERetain();
        type metadata accessor for __SceneResource();
        *(void *)(swift_initStackObject() + 16) = v25;
        uint64_t v20 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v30, 0);
        swift_release();
        swift_release();
        return (uint64_t)v20;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v2, &demangling cache variable for type metadata for __SceneImportOperation.ImportedScene?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t v20 = v22;
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 1, 2, v23);
    }
    swift_willThrow();
    return (uint64_t)v20;
  }
  uint64_t v26 = v2;
  unint64_t v12 = 0;
  uint64_t v27 = v4;
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v14 = *(void *)(v4 + 72);
    _s17RealityFoundation9LoadTraceVWOcTm_0(v10 + v13 + v14 * v12, (uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    if (v8[*(int *)(v3 + 28)] == 1)
    {
      outlined init with take of RealityFileLoadInformation((uint64_t)v8, v29, type metadata accessor for __SceneImportOperation.ImportedScene);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      }
      uint64_t v11 = v30;
      unint64_t v16 = *(void *)(v30 + 16);
      unint64_t v15 = *(void *)(v30 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v11 = v30;
      }
      *(void *)(v11 + 16) = v16 + 1;
      uint64_t result = outlined init with take of RealityFileLoadInformation(v29, v11 + v13 + v16 * v14, type metadata accessor for __SceneImportOperation.ImportedScene);
      uint64_t v4 = v27;
    }
    else
    {
      uint64_t result = outlined destroy of LoadTrace((uint64_t)v8, type metadata accessor for __SceneImportOperation.ImportedScene);
    }
    if (v28 == ++v12)
    {
      uint64_t v11 = v30;
      uint64_t v2 = v26;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __n128 v10 = MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v10);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  specialized Entity.LoadFinisher.setupAfterUSDLoadAsync(_:options:_:)(a3, a4, (void (*)(uint64_t, void))partial apply for closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:), v12, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
  return swift_release();
}

uint64_t closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(void *a1, char a2)
{
  if (a2)
  {
    id v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t static Entity.load(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](static Entity.load(named:in:), v6, v5);
}

uint64_t static Entity.load(named:in:)()
{
  uint64_t v1 = static Entity.loadAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
  *(void *)(v0 + 72) = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *uint64_t v2 = v0;
  v2[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v4(v1);
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  _OWORD v3[2] = a1;
  type metadata accessor for MainActor();
  v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[6] = v5;
  v3[7] = v4;
  return MEMORY[0x270FA2498](static Entity.loadModel(named:in:), v5, v4);
}

uint64_t static Entity.loadModel(named:in:)()
{
  uint64_t v1 = specialized static Entity.loadModelAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
  *(void *)(v0 + 64) = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  *uint64_t v2 = v0;
  v2[1] = static Entity.loadModel(named:in:);
  return v4(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Entity.loadModel(named:in:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = static Entity.loadModel(named:in:);
  }
  else
  {
    swift_release();
    v4[11] = a1;
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = static Entity.loadModel(named:in:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t Entity.init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  type metadata accessor for MainActor();
  v4[38] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[39] = v6;
  v4[40] = v5;
  return MEMORY[0x270FA2498](Entity.init(named:in:), v6, v5);
}

uint64_t Entity.init(named:in:)()
{
  uint64_t v1 = *(void **)(v0 + 288);
  *(_OWORD *)(v0 + 224) = 0u;
  *(void *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_WORD *)(v0 + 128) = 512;
  *(_OWORD *)(v0 + 80) = 0u;
  *(void *)(v0 + 136) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 80);
  *(void *)(v0 + 120) = 0;
  long long v2 = *(_OWORD *)(v0 + 96);
  long long v3 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v2;
  long long v4 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v0 + 64) = v4;
  swift_beginAccess();
  *(unsigned char *)(v0 + 64) = static RKARSystemCore.generateDecimatedMeshes;
  type metadata accessor for Entity.LoadStatistics();
  uint64_t v5 = swift_allocObject();
  Date.init()();
  uint64_t v6 = v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 2;
  *(void *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async) = 1;
  uint64_t v7 = (void *)(v5 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  *uint64_t v7 = 0xD00000000000001CLL;
  v7[1] = 0x800000022835C3E0;
  swift_release();
  *(void *)(v0 + 72) = v5;
  outlined init with copy of Entity.__LoadOptions(v0 + 16, v0 + 144);
  id v8 = v1;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v9;
  *uint64_t v9 = v0;
  v9[1] = Entity.init(named:in:);
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 280);
  return Entity.init(named:in:options:)(v12, v11, v10, v0 + 144);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)v0[36];
  swift_release();

  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  long long v2 = (uint64_t (*)(uint64_t))v0[1];
  long long v3 = v0[43];
  return v2(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 288);
  swift_release();

  outlined destroy of Entity.__LoadOptions(v0 + 16);
  long long v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t Entity.init(named:in:)(uint64_t a1)
{
  long long v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[39];
    uint64_t v6 = v4[40];
    uint64_t v7 = Entity.init(named:in:);
  }
  else
  {
    v4[43] = a1;
    uint64_t v5 = v4[39];
    uint64_t v6 = v4[40];
    uint64_t v7 = Entity.init(named:in:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t Entity.init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[34] = a4;
  v5[35] = v4;
  v5[32] = a2;
  v5[33] = a3;
  v5[31] = a1;
  v5[36] = type metadata accessor for MainActor();
  v5[37] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[38] = v7;
  v5[39] = v6;
  return MEMORY[0x270FA2498](Entity.init(named:in:options:), v7, v6);
}

uint64_t Entity.init(named:in:options:)()
{
  uint64_t v1 = (_OWORD *)(v0 + 16);
  outlined init with copy of (Int, URL)(*(void *)(v0 + 272), v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  if (*(void *)(v0 + 104) == 1)
  {
    *(_OWORD *)(v0 + 208) = 0u;
    *(void *)(v0 + 240) = 0;
    *(_OWORD *)(v0 + 224) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 176) = 0u;
    *(_WORD *)(v0 + 192) = 512;
    *(_OWORD *)(v0 + 144) = 0u;
    *(void *)(v0 + 200) = 0;
    outlined assign with take of __DownsamplingStrategy?(v0 + 208, v0 + 144);
    *(void *)(v0 + 184) = 0;
    long long v2 = *(_OWORD *)(v0 + 160);
    long long v3 = *(_OWORD *)(v0 + 176);
    *uint64_t v1 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 32) = v2;
    long long v4 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 48) = v3;
    *(_OWORD *)(v0 + 64) = v4;
    outlined destroy of BodyTrackingComponent?(v0 + 80, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  }
  else
  {
    long long v5 = *(_OWORD *)(v0 + 96);
    *uint64_t v1 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    long long v6 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 64) = v6;
  }
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)(v0 + 280);
  *(unsigned char *)(v0 + 408) = static Entity.asynchronousLoadOptions;
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)(v7 + 264)
                                                                             + **(int **)(v7 + 264));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v8;
  *id v8 = v0;
  v8[1] = Entity.init(named:in:options:);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 248);
  return v13(v11, v9, v10, v1, v0 + 408);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0[43] = (*(uint64_t (**)(void))(v0[35] + 232))();
  uint64_t v1 = swift_retain();
  Entity.copy(to:recursive:)(v1, 1);
  v0[44] = static MainActor.shared.getter();
  long long v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[45] = v3;
  v0[46] = v2;
  return MEMORY[0x270FA2498](Entity.init(named:in:options:), v3, v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v1 = static Entity.enumerateReferences(root:)(v0[43]);
  v0[47] = v1;
  v0[48] = static MainActor.shared.getter();
  long long v2 = swift_task_alloc();
  v0[49] = v2;
  *(void *)(v2 + 16) = v1;
  long long v3 = (void *)swift_task_alloc();
  v0[50] = (uint64_t)v3;
  *long long v3 = v0;
  v3[1] = Entity.init(named:in:options:);
  return MEMORY[0x270FA22B8]();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  long long v2 = *(void *)(v1 + 368);
  long long v3 = *(void *)(v1 + 360);
  return MEMORY[0x270FA2498](Entity.init(named:in:options:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 304);
  long long v2 = *(void *)(v0 + 312);
  return MEMORY[0x270FA2498](Entity.init(named:in:options:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  swift_release();
  if (v0[9])
  {
    swift_retain();
    Entity.LoadStatistics.log()();
    swift_release();
  }
  long long v2 = (void *)v0[33];
  uint64_t v1 = v0[34];
  swift_release();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  swift_release();
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  long long v3 = (uint64_t (*)(uint64_t))v0[1];
  long long v4 = v0[43];
  return v3(v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  long long v2 = (void *)v0[33];
  uint64_t v1 = v0[34];
  swift_release();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 2));
  long long v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t Entity.init(named:in:options:)(uint64_t a1)
{
  long long v3 = (void *)*v2;
  v3[41] = a1;
  v3[42] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[38];
  uint64_t v5 = v3[39];
  if (v1) {
    long long v6 = Entity.init(named:in:options:);
  }
  else {
    long long v6 = Entity.init(named:in:options:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

uint64_t specialized static RealityFileLoadInformation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x22A687D40]())
  {
    uint64_t v4 = *(int *)(type metadata accessor for RealityFileLoadInformation(0) + 20);
    uint64_t v5 = (void *)(a1 + v4);
    uint64_t v6 = *(void *)(a1 + v4 + 8);
    uint64_t v7 = (void *)(a2 + v4);
    uint64_t v8 = v7[1];
    if (v6)
    {
      if (v8)
      {
        BOOL v9 = *v5 == *v7 && v6 == v8;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v8)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2281E84D8()
{
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #2 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static Entity.loadAnchorAsync(named:in:)(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void **)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void *))closure #1 in static Entity.loadAnchorAsync(named:in:));
}

uint64_t sub_2281E85B0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(void (*a1)(void **), uint64_t a2)
{
  closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t objectdestroy_5Tm_0()
{
  swift_bridgeObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void *))closure #1 in static Entity.loadBodyTrackedAsync(named:in:));
}

uint64_t partial apply for closure #1 in static Entity.loadAnchorAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void *))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3 + 7);
}

uint64_t sub_2281E86D8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void *)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:));
}

uint64_t partial apply for closure #1 in static Entity.loadReferences(root:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in static Entity.loadReferences(root:)(a1, a2, v6);
}

uint64_t sub_2281E897C()
{
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x270FA0238](v0, 168, 7);
}

uint64_t partial apply for closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), v2 + 32, *(void *)(v2 + 96), *(void **)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(void *)(v2 + 128), *(void *)(v2 + 136), *(void **)(v2 + 144), *(void *)(v2 + 152), *(void *)(v2 + 160));
}

uint64_t sub_2281E8A5C()
{
  swift_bridgeObjectRelease();

  swift_release();
  if (*(void *)(v0 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);

  return MEMORY[0x270FA0238](v0, 168, 7);
}

uint64_t partial apply for closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), v2 + 64, (void *)(v2 + 128));
}

uint64_t type metadata accessor for RealityFileLoadInformation(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for RealityFileLoadInformation);
}

uint64_t type metadata accessor for RealityFileLoadInformationResolver()
{
  return self;
}

uint64_t sub_2281E8B48()
{
  swift_release();

  swift_release();
  swift_release();
  if (*(void *)(v0 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 120, 7);
}

uint64_t partial apply for closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), v2 + 48, *(void *)(v2 + 112));
}

uint64_t sub_2281E8BD0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + v6 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v6);
  }
  unint64_t v7 = (v6 + 71) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v7);

  return MEMORY[0x270FA0238](v0, v7 + 40, v3 | 7);
}

uint64_t partial apply for closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(v2 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8)), v2 + ((((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v2 + ((((((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA(uint64_t a1, uint64_t a2)
{
  return _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), (uint64_t)&unk_26DCB4F20, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ());
}

uint64_t _s17RealityFoundation9LoadTraceVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2281E8ECC()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  uint64_t v4 = (v2 + 112) & ~v2;
  unint64_t v5 = (((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v4, v7);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), v2 + 40, *(void *)(v2 + 104), v2 + v6, *(void *)(v2 + v7), *(void **)(v2 + v8), *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined destroy of LoadTrace(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Entity.LoadError(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for Entity.LoadError);
}

uint64_t specialized static Entity.enumerateCore(entity:recursive:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  swift_retain();
  uint64_t ChildCount = REEntityGetChildCount();
  if ((unint64_t)(ChildCount - 0x1000000000000000) >> 61 != 7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v10 = ChildCount;
  uint64_t v11 = swift_slowAlloc();
  REEntityGetChildren();
  if (v10 < 0) {
    goto LABEL_21;
  }
  if (v10)
  {
    uint64_t v12 = (uint64_t *)v11;
    do
    {
      uint64_t v13 = *v12;
      if (!*v12) {
        goto LABEL_22;
      }
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v14 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if (REEntityIsBeingDestroyed())
        {
          __break(1u);
          goto LABEL_20;
        }
        uint64_t v16 = specialized static Entity.entityInfoType(_:)();
        if (v16)
        {
          uint64_t v15 = (*(uint64_t (**)(void))(v16 + 232))();
          uint64_t v17 = *(void *)(v15 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v17, 0);
          *(void *)(v15 + 16) = v13;
          MEMORY[0x22A68E750](v13, v15);
          swift_release();
          goto LABEL_13;
        }
        uint64_t v14 = makeEntity(for:)(v13);
      }
      uint64_t v15 = v14;
LABEL_13:
      gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v15, a4, a5);
      if (a2)
      {
        swift_retain();
        swift_retain();
        specialized static Entity.enumerateCore(entity:recursive:block:)(v15, 1, a3, a4, a5);
        swift_release();
        swift_release();
      }
      swift_release();
      ++v12;
      --v10;
    }
    while (v10);
  }
  MEMORY[0x22A696500](v11, -1, -1);
  swift_release();

  return swift_release();
}

uint64_t specialized static RealityFileLoadInformationResolver.urlContainsPathExtension(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = URL.pathComponents.getter();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = a2;
    v7._object = a3;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    Swift::Bool v9 = String.hasSuffix(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9)
    {
      BOOL v11 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = v5 + 56;
      uint64_t v14 = v6 - 1;
      do
      {
        BOOL v11 = v14 != v12;
        if (v14 == v12) {
          break;
        }
        if ((unint64_t)++v12 >= *(void *)(v5 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v15 = v13 + 16;
        swift_bridgeObjectRetain();
        v16._uint64_t countAndFlagsBits = a2;
        v16._object = a3;
        String.append(_:)(v16);
        v17._uint64_t countAndFlagsBits = 46;
        v17._object = (void *)0xE100000000000000;
        Swift::Bool v18 = String.hasSuffix(_:)(v17);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v13 = v15;
      }
      while (!v18);
    }
  }
  else
  {
    BOOL v11 = 0;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v78 = a4;
  uint64_t v77 = a1;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace - 8);
  Swift::String v8 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (void *)((char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3) {
    id v13 = a3;
  }
  else {
    id v13 = objc_msgSend(self, sel_mainBundle);
  }
  id v14 = a3;
  uint64_t v15 = specialized static __ServiceLocator.shared.getter();
  Swift::String v16 = *(void **)(*(void *)(v15 + 168) + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v15 + 24);
  swift_unownedRetainStrong();
  Swift::Bool v18 = *(void **)(v17 + 32);
  swift_retain();
  id v76 = v16;
  uint64_t v19 = v18;
  swift_release();
  *uint64_t v12 = v19;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8F0E0], v9);
  uint64_t v20 = v19;
  int v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v22 = *(void *)(*(void *)(v15 + 168) + 24);
  *(void *)&long long v80 = 0;
  *((void *)&v80 + 1) = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&long long v80 = v77;
  *((void *)&v80 + 1) = a2;
  v23._uint64_t countAndFlagsBits = 0x7562206D6F726620;
  v23._object = (void *)0xED000020656C646ELL;
  String.append(_:)(v23);
  id v24 = objc_msgSend(v13, sel_bundleIdentifier);
  id v73 = v20;
  if (v24)
  {
    uint64_t v25 = v24;
    unint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v28 = (void *)0x800000022835C160;
    unint64_t v26 = 0xD000000000000010;
  }
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  int v21 = 2;
  uint64_t v74 = v22;
  LoadTracer.beginLoad(loadType:logMsgTarget:)(2, v80, *((uint64_t *)&v80 + 1), (uint64_t)v8);
  swift_bridgeObjectRelease();
  type metadata accessor for LoadRequestDependencies();
  Swift::Bool v18 = (void *)swift_allocObject();
  uint64_t v30 = MEMORY[0x263F8EE78];
  v18[2] = MEMORY[0x263F8EE78];
  v72[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v31 = swift_allocObject();
  *(_DWORD *)(v31 + 16) = 0;
  _OWORD v18[3] = v31;
  swift_beginAccess();
  v18[2] = v30;
  swift_bridgeObjectRelease();
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    goto LABEL_21;
  }
LABEL_9:
  char v32 = static Entity.asynchronousLoadOptions;
  char v33 = v78[48];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = v77;
  *(void *)(v34 + 16) = v77;
  *(void *)(v34 + 24) = a2;
  *(unsigned char *)(v34 + 32) = v32;
  *(unsigned char *)(v34 + 33) = v33;
  *(_WORD *)(v34 + 34) = 256;
  *(_DWORD *)(v34 + 36) = v21;
  swift_weakAssign();
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v15 + 176, (uint64_t)&v80, &demangling cache variable for type metadata for USDImportService?);
  uint64_t v75 = v8;
  if (*((void *)&v81 + 1))
  {
    v72[0] = v15;
    outlined init with take of BindableDataInternal(&v80, (uint64_t)v84);
    uint64_t v36 = v35;
    uint64_t v38 = v85;
    uint64_t v37 = v86;
    __swift_project_boxed_opaque_existential_1(v84, v85);
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, uint64_t))(v37 + 16);
    swift_bridgeObjectRetain();
    uint64_t v40 = v36;
    uint64_t v41 = a2;
    uint64_t v42 = a2;
    uint64_t v43 = v13;
    if (v39(v40, v42, v13, v38, v37))
    {
      uint64_t v44 = *((void *)v78 + 7);
      if (v44)
      {
        uint64_t v45 = v44 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(void *)uint64_t v45 = 1;
        *(unsigned char *)(v45 + 8) = 0;
      }
      outlined init with copy of Entity.__LoadOptions((uint64_t)v78, (uint64_t)&v80);
      outlined init with copy of __REAssetService((uint64_t)v84, (uint64_t)v79);
      uint64_t v46 = swift_allocObject();
      long long v47 = v81;
      *(_OWORD *)(v46 + 40) = v80;
      *(_OWORD *)(v46 + 56) = v47;
      long long v48 = v83;
      *(_OWORD *)(v46 + 72) = v82;
      *(void *)(v46 + 16) = v77;
      *(void *)(v46 + 24) = v41;
      *(void *)(v46 + 32) = v13;
      *(_OWORD *)(v46 + 88) = v48;
      id v49 = v73;
      *(void *)(v46 + 104) = v34;
      *(void *)(v46 + 112) = v49;
      outlined init with take of BindableDataInternal(v79, v46 + 120);
      uint64_t v50 = v76;
      *(void *)(v46 + 160) = v76;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
      uint64_t v51 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
      uint64_t v52 = swift_allocObject();
      uint64_t v53 = swift_allocObject();
      *(_DWORD *)(v53 + 16) = 0;
      *(void *)(v52 + 16) = v53;
      *(void *)(v52 + 24) = 0;
      *(unsigned char *)(v52 + 32) = -1;
      *(void *)(v51 + 16) = v52;
      uint64_t v54 = (void *)swift_allocObject();
      v54[2] = partial apply for closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
      v54[3] = v46;
      v54[4] = v52;
      v54[5] = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
      swift_allocObject();
      id v78 = v50;
      id v55 = v49;
      swift_bridgeObjectRetain();
      id v56 = v43;
      swift_retain();
      swift_retain();
      swift_retain();
      *(void *)(v51 + 24) = Future.init(_:)();
      uint64_t v57 = (uint64_t)v75;
      specialized LoadTracer.subscribe<A>(to:with:)(v51, (uint64_t)v75);

      swift_release();
      swift_release();
      swift_release();

      swift_release();
      outlined destroy of LoadTrace(v57, type metadata accessor for LoadTrace);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      return v51;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    a2 = v41;
    uint64_t v15 = v72[0];
    uint64_t v35 = v77;
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v80, &demangling cache variable for type metadata for USDImportService?);
  }
  uint64_t v58 = *((void *)v78 + 7);
  if (v58)
  {
    uint64_t v59 = v58 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(void *)uint64_t v59 = 0;
    *(unsigned char *)(v59 + 8) = 0;
  }
  outlined init with copy of Entity.__LoadOptions((uint64_t)v78, (uint64_t)&v80);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v13;
  *(void *)(v60 + 24) = v35;
  *(void *)(v60 + 32) = a2;
  *(void *)(v60 + 40) = v15;
  long long v61 = v81;
  *(_OWORD *)(v60 + 48) = v80;
  *(_OWORD *)(v60 + 64) = v61;
  long long v62 = v83;
  *(_OWORD *)(v60 + 80) = v82;
  *(_OWORD *)(v60 + 96) = v62;
  uint64_t v63 = v76;
  *(void *)(v60 + 112) = v34;
  *(void *)(v60 + 120) = v63;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  id v64 = v13;
  uint64_t v51 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
  uint64_t v65 = swift_allocObject();
  uint64_t v66 = swift_allocObject();
  *(_DWORD *)(v66 + 16) = 0;
  *(void *)(v65 + 16) = v66;
  *(void *)(v65 + 24) = 0;
  *(unsigned char *)(v65 + 32) = -1;
  *(void *)(v51 + 16) = v65;
  uint64_t v67 = (void *)swift_allocObject();
  v67[2] = partial apply for closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:);
  v67[3] = v60;
  v67[4] = v65;
  v67[5] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
  swift_allocObject();
  swift_retain();
  id v68 = v63;
  swift_bridgeObjectRetain();
  id v69 = v64;
  swift_retain();
  swift_retain();
  swift_retain();
  *(void *)(v51 + 24) = Future.init(_:)();
  uint64_t v70 = (uint64_t)v75;
  specialized LoadTracer.subscribe<A>(to:with:)(v51, (uint64_t)v75);

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined destroy of LoadTrace(v70, type metadata accessor for LoadTrace);
  return v51;
}

uint64_t specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v97 = a4;
  uint64_t v94 = a2;
  uint64_t v100 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v100 - 8);
  uint64_t v6 = *(void *)(v99 + 64);
  MEMORY[0x270FA5388](v100);
  v98 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void (**)(uint64_t, char *, uint64_t))((char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (void *)specialized static __ServiceLocator.shared.getter();
  uint64_t v12 = *(void **)(v11[21] + 16);
  swift_beginAccess();
  uint64_t v13 = v11[3];
  swift_unownedRetainStrong();
  id v14 = *(void **)(v13 + 32);
  swift_retain();
  id v95 = v12;
  id v15 = v14;
  swift_release();
  *uint64_t v10 = v15;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  id v101 = v15;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    uint64_t v93 = a3;
    uint64_t v96 = v11;
    type metadata accessor for LoadRequestDependencies();
    uint64_t v11 = (void *)swift_allocObject();
    uint64_t v16 = MEMORY[0x263F8EE78];
    v11[2] = MEMORY[0x263F8EE78];
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    void v11[3] = v17;
    swift_beginAccess();
    v11[2] = v16;
    swift_bridgeObjectRelease();
    if (one-time initialization token for asynchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v18 = static Entity.asynchronousLoadOptions;
  uint64_t v19 = URL.absoluteString.getter();
  uint64_t v21 = v20;
  uint64_t v22 = v97;
  char v23 = *(unsigned char *)(v97 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  uint64_t v24 = a1;
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  *(void *)(v25 + 16) = v19;
  *(void *)(v25 + 24) = v21;
  *(unsigned char *)(v25 + 32) = v18;
  *(unsigned char *)(v25 + 33) = v23;
  *(_WORD *)(v25 + 34) = 256;
  *(_DWORD *)(v25 + 36) = 2;
  v92 = v11;
  swift_weakAssign();
  uint64_t v26 = v99;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  uint64_t v90 = v24;
  uint64_t v86 = v99 + 16;
  uint64_t v85 = v27;
  v27(v98, v24, v100);
  outlined init with copy of Entity.__LoadOptions(v22, (uint64_t)&v106);
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = (v28 + 16) & ~v28;
  unint64_t v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v87 = v28 | 7;
  uint64_t v35 = swift_allocObject();
  uint64_t v88 = v29;
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  uint64_t v99 = v26 + 32;
  uint64_t v84 = v36;
  v36(v35 + v29, v98, v100);
  uint64_t v37 = v96;
  unint64_t v89 = v30;
  *(void *)(v35 + v30) = v96;
  uint64_t v38 = v35;
  uint64_t v39 = v25;
  uint64_t v40 = (void *)(v38 + v31);
  uint64_t v41 = v93;
  *uint64_t v40 = v94;
  v40[1] = v41;
  uint64_t v42 = (_OWORD *)(v38 + v32);
  long long v43 = v109;
  void v42[2] = v108;
  v42[3] = v43;
  long long v44 = v107;
  *uint64_t v42 = v106;
  v42[1] = v44;
  *(void *)(v38 + v33) = v101;
  *(void *)(v38 + v34) = v25;
  uint64_t v45 = v95;
  *(void *)(v38 + ((v34 + 15) & 0xFFFFFFFFFFFFFFF8)) = v95;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v37 + 22), (uint64_t)&v106, &demangling cache variable for type metadata for USDImportService?);
  if (*((void *)&v107 + 1))
  {
    outlined init with take of BindableDataInternal(&v106, (uint64_t)v103);
    uint64_t v46 = v104;
    uint64_t v47 = v105;
    __swift_project_boxed_opaque_existential_1(v103, v104);
    long long v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 24);
    swift_bridgeObjectRetain();
    uint64_t v49 = v39;
    swift_retain();
    swift_retain();
    id v50 = v45;
    id v51 = v101;
    uint64_t v52 = v90;
    if (v48(v90, v46, v47))
    {
      uint64_t v53 = v52;
      id v101 = v50;
      uint64_t v54 = *(void *)(v97 + 56);
      if (v54)
      {
        uint64_t v55 = v54 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(void *)uint64_t v55 = 1;
        *(unsigned char *)(v55 + 8) = 0;
      }
      id v56 = v98;
      uint64_t v57 = v100;
      v85(v98, v53, v100);
      outlined init with copy of Entity.__LoadOptions(v97, (uint64_t)&v106);
      outlined init with copy of __REAssetService((uint64_t)v103, (uint64_t)v102);
      unint64_t v58 = v89;
      unint64_t v59 = (v89 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v60 = (v59 + 71) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v61 = swift_allocObject();
      v84(v61 + v88, v56, v57);
      long long v62 = (void *)(v61 + v58);
      uint64_t v63 = v93;
      *long long v62 = v94;
      v62[1] = v63;
      id v64 = (_OWORD *)(v61 + v59);
      long long v65 = v109;
      v64[2] = v108;
      v64[3] = v65;
      long long v66 = v107;
      *id v64 = v106;
      v64[1] = v66;
      *(void *)(v61 + v60) = v49;
      outlined init with take of BindableDataInternal(v102, v61 + ((v60 + 15) & 0xFFFFFFFFFFFFFFF8));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
      uint64_t v67 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
      uint64_t v68 = swift_allocObject();
      uint64_t v69 = swift_allocObject();
      *(_DWORD *)(v69 + 16) = 0;
      *(void *)(v68 + 16) = v69;
      *(void *)(v68 + 24) = 0;
      *(unsigned char *)(v68 + 32) = -1;
      *(void *)(v67 + 16) = v68;
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = partial apply for closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
      void v70[3] = v61;
      uint64_t v71 = v92;
      v70[4] = v68;
      v70[5] = v71;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v72 = Future.init(_:)();
      swift_release();
      swift_release();

      swift_release();
      swift_release();

      *(void *)(v67 + 24) = v72;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      return v67;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
    uint64_t v45 = v95;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v73 = v45;
    id v74 = v101;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v106, &demangling cache variable for type metadata for USDImportService?);
  }
  uint64_t v75 = *(void *)(v97 + 56);
  if (v75)
  {
    uint64_t v76 = v75 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(void *)uint64_t v76 = 0;
    *(unsigned char *)(v76 + 8) = 0;
  }
  uint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = partial apply for closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:);
  *(void *)(v77 + 24) = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ModelEntity>);
  uint64_t v67 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ModelEntity, Error>?>);
  uint64_t v78 = swift_allocObject();
  uint64_t v79 = swift_allocObject();
  *(_DWORD *)(v79 + 16) = 0;
  *(void *)(v78 + 16) = v79;
  *(void *)(v78 + 24) = 0;
  *(unsigned char *)(v78 + 32) = -1;
  *(void *)(v67 + 16) = v78;
  long long v80 = (void *)swift_allocObject();
  v80[2] = _ss6ResultOy10RealityKit11ModelEntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA;
  v80[3] = v77;
  long long v81 = v92;
  v80[4] = v78;
  v80[5] = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ModelEntity, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v82 = Future.init(_:)();
  swift_release();

  swift_release();
  swift_release();
  *(void *)(v67 + 24) = v82;
  return v67;
}

uint64_t specialized static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1, uint64_t a2)
{
  v2[14] = a1;
  v2[15] = a2;
  v2[16] = type metadata accessor for MainActor();
  v2[17] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[18] = v4;
  v2[19] = v3;
  return MEMORY[0x270FA2498](specialized static Entity.finishUSDLoad(forEntity:withOptions:), v4, v3);
}

uint64_t specialized static Entity.finishUSDLoad(forEntity:withOptions:)()
{
  type metadata accessor for LoadRequestDependencies();
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 160) = v1;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v1 + 24) = v3;
  swift_beginAccess();
  *(void *)(v1 + 16) = v2;
  swift_bridgeObjectRelease();
  REEntityGetName();
  uint64_t v4 = String.init(cString:)();
  uint64_t v6 = v5;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  char v7 = static Entity.asynchronousLoadOptions;
  long long v16 = *(_OWORD *)(v0 + 112);
  swift_beginAccess();
  char v8 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 168) = inited;
  swift_weakInit();
  *(void *)(inited + 16) = v4;
  *(void *)(inited + 24) = v6;
  *(unsigned char *)(inited + 32) = v7;
  *(unsigned char *)(inited + 33) = v8;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  uint64_t v10 = static MainActor.shared.getter();
  *(void *)(v0 + 176) = v10;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v0 + 184) = v11;
  *(void *)(v11 + 16) = inited;
  *(_OWORD *)(v11 + 24) = v16;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v12;
  *uint64_t v12 = v0;
  uint64_t v13 = MEMORY[0x263F8EE60];
  v12[1] = specialized static Entity.finishUSDLoad(forEntity:withOptions:);
  uint64_t v14 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v12, v10, v14, 0xD000000000000025, 0x800000022835C810, partial apply for closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:), v11, v13 + 8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = specialized static Entity.finishUSDLoad(forEntity:withOptions:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = specialized static Entity.finishUSDLoad(forEntity:withOptions:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char **)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v28 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
  *(void *)(inited + 32) = a1;
  v31[0] = inited;
  specialized Array._endMutation()();
  unint64_t v9 = v31[0];
  unint64_t v33 = v31[0];
  if (v31[0] >> 62) {
    goto LABEL_46;
  }
  uint64_t v10 = *(void *)((v31[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v28 = v4;
  uint64_t v29 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey;
  do
  {
    while (1)
    {
      unint64_t v12 = v9 >> 62;
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (!v15)
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v17) {
          goto LABEL_43;
        }
      }
      else if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v27) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_3;
      }
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = (void *)MEMORY[0x22A689930](0, v9);
        if (!v12) {
          goto LABEL_9;
        }
      }
      else
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_44;
        }
        uint64_t v13 = *(void **)(v9 + 32);
        swift_retain();
        if (!v12)
        {
LABEL_9:
          uint64_t v14 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_15:
      if (!v14) {
        goto LABEL_45;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      swift_beginAccess();
      id v18 = objc_getAssociatedObject(v13, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
      swift_endAccess();
      if (v18)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v30, 0, sizeof(v30));
      }
      outlined init with take of Transform?((uint64_t)v30, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v31[3])
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_25:
        _OWORD v31[4] = 0;
        uint64_t v32 = 0;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_25;
      }
      uint64_t v19 = v32;
      swift_bridgeObjectRelease();
      if (!v19) {
        goto LABEL_26;
      }
      uint64_t v20 = v29;
      swift_release();
      if (v20)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_retain();
      uint64_t v29 = v13;
LABEL_26:
      uint64_t v21 = type metadata accessor for AnchoringComponent(0);
      swift_retain();
      if (REEntityGetComponent())
      {
        AnchoringComponent.init(from:)((uint64_t)v7);
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = 1;
      }
      uint64_t v23 = *(void *)(v21 - 8);
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      v24(v7, v22, 1, v21);
      swift_release();
      LODWORD(v23) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v21);
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for AnchoringComponent?);
      if (v23 != 1)
      {
        if (v11 >= 1)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        uint64_t v11 = 1;
      }
      specialized Array.append<A>(contentsOf:)((uint64_t)v13);
      unint64_t v9 = v33;
      if (v33 >> 62) {
        break;
      }
      if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while (v25);
LABEL_36:
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 != 1) {
    return swift_release();
  }
  if (v29)
  {
    uint64_t v26 = (uint64_t)v28;
    v24((char *)v28, 1, 1, v21);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v26);
    outlined destroy of BodyTrackingComponent?(v26, &demangling cache variable for type metadata for AnchoringComponent?);
    return swift_release_n();
  }
  return result;
}

void specialized static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v85 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Data.Deallocator();
  char v8 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  id v95 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v79 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v18);
  uint64_t v97 = (char *)&v79 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v96 = (char *)&v79 - v22;
  if (!a1) {
    return;
  }
  v92 = v10;
  uint64_t v100 = v21;
  uint64_t v104 = MEMORY[0x263F8EE78];
  uint64_t v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
  *(void *)(inited + 32) = a1;
  v102[0] = (const char *)inited;
  specialized Array._endMutation()();
  unint64_t v25 = (unint64_t)v102[0];
  unint64_t v103 = (unint64_t)v102[0];
  uint64_t v82 = v23;
  if ((unint64_t)v102[0] >> 62) {
    goto LABEL_48;
  }
  uint64_t v26 = *(void *)(((unint64_t)v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n();
  if (v26 > 0)
  {
    do
    {
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v90 = 0;
      v98 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      unint64_t v89 = (void (**)(char *, char *, uint64_t))(v17 + 32);
      uint64_t v88 = (void (**)(char *, char *, uint64_t))(v17 + 16);
      uint64_t v87 = (void (**)(uint64_t, uint64_t))(v17 + 8);
      unsigned int v81 = *MEMORY[0x263F06F00];
      long long v80 = (void (**)(char *, void, uint64_t))(v8 + 13);
      uint64_t v79 = (void (**)(char *, uint64_t))(v8 + 1);
      char v8 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      uint64_t v93 = (const char *)MEMORY[0x263F8EE80];
      uint64_t v99 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      uint64_t v86 = v17;
      while (1)
      {
        unint64_t v27 = v25 >> 62;
        if (!(v25 >> 62)) {
          break;
        }
        unint64_t v30 = v8;
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v31) {
          goto LABEL_88;
        }
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        char v8 = v30;
        if (!v32) {
          goto LABEL_45;
        }
LABEL_7:
        if ((v25 & 0xC000000000000001) != 0)
        {
          uint64_t v28 = MEMORY[0x22A689930](0, v25);
          if (!v27) {
            goto LABEL_10;
          }
        }
        else
        {
          if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_46;
          }
          uint64_t v28 = *(void *)(v25 + 32);
          swift_retain();
          if (!v27)
          {
LABEL_10:
            uint64_t v29 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_16;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_16:
        if (!v29) {
          goto LABEL_47;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        if (!static __RKEntityUUIDComponent.registration
          || !REEntityGetCustomComponent()
          || !RECustomComponentGetObject())
        {
          (*v8)(v15, 1, 1, v16);
LABEL_23:
          outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
          goto LABEL_24;
        }
        UUID.init(uuid:)();
        (*v8)(v15, 0, 1, v16);
        if ((*v98)(v15, 1, v16) == 1) {
          goto LABEL_23;
        }
        unint64_t v33 = v96;
        (*v89)(v96, v15, v16);
        uint64_t v34 = (uint64_t)v97;
        (*v88)(v97, v33, v16);
        swift_retain();
        uint64_t v35 = v93;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102[0] = v35;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v34, isUniquelyReferenced_nonNull_native);
        uint64_t v93 = v102[0];
        swift_bridgeObjectRelease();
        uint64_t v37 = *v87;
        (*v87)(v34, v16);
        v37((uint64_t)v33, v16);
        uint64_t v17 = v86;
LABEL_24:
        if (static __RKEntityInteractionsComponent.registration)
        {
          if (REEntityGetCustomComponent())
          {
            uint64_t Object = RECustomComponentGetObject();
            if (Object)
            {
              uint64_t v39 = *(void *)(Object + 16);
              outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v102);
              if (v39)
              {
                uint64_t v40 = v39;
              }
              else
              {
                uint64_t v41 = v102[0];
                if (v102[0])
                {
                  size_t v42 = strlen(v102[0]);
                  (*v80)(v92, v81, v94);
                  uint64_t v43 = Data.Deallocator._deallocator.getter();
                  uint64_t v83 = v44;
                  uint64_t v91 = v42;
                  if (v42)
                  {
                    unint64_t v84 = v43;
                    type metadata accessor for __DataStorage();
                    swift_allocObject();
                    swift_retain();
                    uint64_t v45 = v91;
                    uint64_t v46 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                    uint64_t v91 = specialized Data._Representation.init(_:count:)(v46, v45);
                    unint64_t v84 = v47;
                    swift_release();
                  }
                  else
                  {
                    long long v48 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
                    v48(v41, 0);
                    swift_release();
                    swift_release();
                    uint64_t v91 = 0;
                    unint64_t v84 = 0xC000000000000000;
                  }
                  (*v79)(v92, v94);
                  type metadata accessor for JSONDecoder();
                  swift_allocObject();
                  JSONDecoder.init()();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
                  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
                  unint64_t v49 = v84;
                  id v50 = v90;
                  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                  if (!v50)
                  {
                    uint64_t v90 = 0;
                    swift_release();
                    outlined consume of Data._Representation(v91, v49);
                    uint64_t v40 = v101;
                    goto LABEL_38;
                  }
                  swift_release();
                  outlined consume of Data._Representation(v91, v49);

                  uint64_t v90 = 0;
                }
                uint64_t v40 = MEMORY[0x263F8EE78];
              }
LABEL_38:
              swift_bridgeObjectRetain();
              outlined destroy of __RKEntityInteractionsComponent((uint64_t)v102);
              char v8 = v99;
              goto LABEL_39;
            }
          }
        }
        uint64_t v40 = MEMORY[0x263F8EE78];
LABEL_39:
        specialized Array.append<A>(contentsOf:)(v40);
        specialized Array.append<A>(contentsOf:)(v28);
        unint64_t v25 = v103;
        if (v103 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v51 <= 0)
          {
LABEL_43:
            swift_bridgeObjectRelease();
            uint64_t v52 = v104;
            goto LABEL_50;
          }
        }
        else if (*(uint64_t *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
        {
          goto LABEL_43;
        }
      }
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    while (v53 > 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v90 = 0;
  uint64_t v93 = (const char *)MEMORY[0x263F8EE80];
  uint64_t v52 = MEMORY[0x263F8EE78];
LABEL_50:
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = MEMORY[0x263F8EE88];
  uint64_t v55 = v54 + 16;
  uint64_t v56 = *(void *)(v52 + 16);
  v92 = (char *)v54;
  if (v56)
  {
    uint64_t v57 = v54;
    uint64_t v58 = v52 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
    uint64_t v59 = *(void *)(v85 + 72);
    do
    {
      _s17RealityFoundation9LoadTraceVWOcTm_0(v58, (uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      _s17RealityFoundation9LoadTraceVWOcTm_0((uint64_t)v7, (uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
      outlined destroy of LoadTrace((uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      fetchTapTriggerTargetIdentifiers #1 (triggerSpecification:) in static Entity.addInputTargetComponentsAndCollisionShapesToTapTriggerTargets(for:)((uint64_t)v4, v57);
      outlined destroy of LoadTrace((uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
      v58 += v59;
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v60 = *(void *)v55;
  uint64_t v61 = *(void *)(*(void *)v55 + 56);
  uint64_t v94 = *(void *)v55 + 56;
  uint64_t v62 = 1 << *(unsigned char *)(v60 + 32);
  uint64_t v63 = -1;
  if (v62 < 64) {
    uint64_t v63 = ~(-1 << v62);
  }
  unint64_t v64 = v63 & v61;
  uint64_t v96 = (char *)((unint64_t)(v62 + 63) >> 6);
  v98 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v99 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v97 = (char *)(v17 + 48);
  long long v65 = (void (**)(uint64_t, uint64_t))(v17 + 8);
  swift_bridgeObjectRetain();
  uint64_t v66 = 0;
LABEL_56:
  uint64_t v67 = v95;
  uint64_t v68 = v93;
  if (v64)
  {
LABEL_57:
    unint64_t v69 = __clz(__rbit64(v64));
    v64 &= v64 - 1;
    unint64_t v70 = v69 | (v66 << 6);
    uint64_t v71 = v100;
    goto LABEL_69;
  }
  while (1)
  {
    BOOL v72 = __OFADD__(v66++, 1);
    uint64_t v71 = v100;
    if (v72)
    {
      __break(1u);
      goto LABEL_87;
    }
    if (v66 >= (uint64_t)v96) {
      goto LABEL_83;
    }
    unint64_t v73 = *(void *)(v94 + 8 * v66);
    if (!v73) {
      break;
    }
LABEL_68:
    unint64_t v64 = (v73 - 1) & v73;
    unint64_t v70 = __clz(__rbit64(v73)) + (v66 << 6);
LABEL_69:
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v67, *(void *)(v60 + 48) + *(void *)(v17 + 72) * v70, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v67, 0, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v67, 1, v16) == 1) {
      goto LABEL_84;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v71, v67, v16);
    if (*((void *)v68 + 2))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v71);
      uint64_t v75 = v71;
      uint64_t v76 = *v65;
      if (v77)
      {
        swift_retain();
        v76(v75, v16);
        if (one-time initialization token for all != -1) {
          swift_once();
        }
        unint64_t v78 = ((unint64_t)static InputTargetComponent.InputType.all << 32) | 1;
        swift_retain();
        specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v78);
        swift_release();
        Entity.generateCollisionShapes(recursive:)(1);
        swift_release();
        goto LABEL_56;
      }
      uint64_t v67 = v95;
    }
    else
    {
      uint64_t v76 = *v65;
    }
    v76(v100, v16);
    if (v64) {
      goto LABEL_57;
    }
  }
  uint64_t v74 = v66 + 1;
  if (v66 + 1 >= (uint64_t)v96) {
    goto LABEL_83;
  }
  unint64_t v73 = *(void *)(v94 + 8 * v74);
  if (v73) {
    goto LABEL_67;
  }
  uint64_t v74 = v66 + 2;
  if (v66 + 2 >= (uint64_t)v96) {
    goto LABEL_83;
  }
  unint64_t v73 = *(void *)(v94 + 8 * v74);
  if (v73) {
    goto LABEL_67;
  }
  uint64_t v74 = v66 + 3;
  if (v66 + 3 >= (uint64_t)v96)
  {
LABEL_83:
    (*v99)(v67, 1, 1, v16);
LABEL_84:
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v73 = *(void *)(v94 + 8 * v74);
  if (v73)
  {
LABEL_67:
    uint64_t v66 = v74;
    goto LABEL_68;
  }
  while (1)
  {
    uint64_t v66 = v74 + 1;
    if (__OFADD__(v74, 1)) {
      break;
    }
    if (v66 >= (uint64_t)v96) {
      goto LABEL_83;
    }
    unint64_t v73 = *(void *)(v94 + 8 * v66);
    ++v74;
    if (v73) {
      goto LABEL_68;
    }
  }
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
}

uint64_t specialized closure #1 in static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = a8;
  uint64_t v49 = a7;
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  uint64_t v56 = a1;
  uint64_t v57 = a4;
  uint64_t v55 = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v58 = (BOOL *)&v47 - v12;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v52 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v47 - v17;
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v23((char *)&v47 - v21, a1, v13, v20);
  swift_retain();
  URL._bridgeToObjectiveC()(v24);
  uint64_t v26 = v25;
  swift_beginAccess();
  uint64_t v27 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  uint64_t v62 = __SceneImportOperation.init(core:)(v27);
  swift_release();
  uint64_t v53 = v14;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v29 = v22;
  unint64_t v30 = v57;
  v28(v29, v13);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, v56, v13);
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = v55;
  }
  else
  {
    uint64_t v32 = v52;
    URL.deletingPathExtension()();
    uint64_t v31 = URL.lastPathComponent.getter();
    unint64_t v30 = v33;
    v28(v32, v13);
  }
  v28(v18, v13);
  swift_beginAccess();
  v34.value._uint64_t countAndFlagsBits = v31;
  v34.value._object = v30;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v34, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  __SceneImportOperation.run()();
  uint64_t v35 = v58;
  if (v36)
  {
    swift_release();
    return (uint64_t)v35;
  }
  uint64_t v37 = RESceneImportOperationCopySourceURL();
  if (v37)
  {
    uint64_t v38 = (void *)v37;
    uint64_t v39 = (uint64_t)v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
    uint64_t v39 = (uint64_t)v54;
  }
  uint64_t v41 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v39, v40, 1, v13);
  outlined init with take of Transform?(v39, (uint64_t)v35, &demangling cache variable for type metadata for URL?);
  uint64_t result = (*(uint64_t (**)(BOOL *, uint64_t, uint64_t))(v41 + 48))(v35, 1, v13);
  if (result != 1)
  {
    uint64_t v43 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v43, &v59);
    swift_bridgeObjectRelease();
    v28((char *)v35, v13);
    uint64_t v44 = v60;
    uint64_t v45 = v61;
    swift_bridgeObjectRetain();
    uint64_t v35 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v59, 0);
    uint64_t v59 = v44;
    uint64_t v60 = v45;
    swift_bridgeObjectRetain_n();
    uint64_t v46 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v35, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v46, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v35);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v35, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    LoadTracer.endLoad(of:with:)((uint64_t)v35, v48);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v35;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Entity.__load(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v92 = a3;
  uint64_t v90 = a4;
  uint64_t v91 = a2;
  uint64_t v94 = type metadata accessor for URL();
  uint64_t v84 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v82 = (uint64_t *)&v79[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v87 = *(void *)(Information - 8);
  uint64_t v88 = Information;
  MEMORY[0x270FA5388](Information);
  unsigned int v81 = &v79[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v86 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v97 = &v79[-v11];
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v79[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace - 8);
  unint64_t v89 = &v79[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  __n128 v20 = &v79[-v19];
  uint64_t v21 = specialized static __ServiceLocator.shared.getter();
  uint64_t v22 = *(void *)(*(void *)(v21 + 168) + 24);
  swift_retain();
  swift_retain();
  uint64_t v112 = a1;
  uint64_t v23 = URL.lastPathComponent.getter();
  uint64_t v96 = v20;
  uint64_t v83 = v22;
  LoadTracer.beginLoad(loadType:logMsgTarget:)(1, v23, v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  if (one-time initialization token for synchronousLoadOptions != -1) {
    swift_once();
  }
  int v25 = static Entity.synchronousLoadOptions;
  uint64_t v26 = URL.absoluteString.getter();
  uint64_t v28 = v27;
  swift_beginAccess();
  char v29 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<Entity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  *(void *)(inited + 16) = v26;
  *(void *)(inited + 24) = v28;
  int v80 = v25;
  *(unsigned char *)(inited + 32) = v25;
  *(unsigned char *)(inited + 33) = v29;
  *(_WORD *)(inited + 34) = 1;
  uint64_t v85 = inited;
  *(_DWORD *)(inited + 36) = 1;
  swift_weakAssign();
  uint64_t v31 = *(void *)(*(void *)(v21 + 168) + 32);
  swift_beginAccess();
  uint64_t v95 = v21;
  uint64_t v32 = *(void *)(v21 + 24);
  swift_unownedRetainStrong();
  unint64_t v33 = *(void **)(v32 + 32);
  swift_retain();
  id v34 = v33;
  swift_release();
  *uint64_t v15 = v34;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v12);
  LOBYTE(v32) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v32)
  {
    type metadata accessor for RealityFileLoadInformationResolver();
    uint64_t v36 = v97;
    uint64_t v37 = v112;
    static RealityFileLoadInformationResolver.resolve(url:)(v112, (uint64_t)v97);
    uint64_t v38 = v86;
    outlined init with copy of (Int, URL)((uint64_t)v36, (uint64_t)v86, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    uint64_t v39 = v88;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v87 + 48))(v38, 1, v88) == 1)
    {
      uint64_t v40 = v31;
      outlined destroy of BodyTrackingComponent?((uint64_t)v38, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      uint64_t v36 = (unsigned char *)(v84 + 16);
      uint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v84 + 16);
      uint64_t v42 = (uint64_t)v82;
      v41(v82, v37, v94);
      uint64_t v43 = (uint64_t)v96;
      _s17RealityFoundation9LoadTraceVWOcTm_0((uint64_t)v96, (uint64_t)v89, type metadata accessor for LoadTrace);
      uint64_t v44 = v95;
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v44 + 176, (uint64_t)&v110, &demangling cache variable for type metadata for USDImportService?);
      if (v111)
      {
        outlined init with take of BindableDataInternal(&v110, (uint64_t)&v102);
        long long v45 = *(_OWORD *)v104;
        __swift_project_boxed_opaque_existential_1(&v102, *(uint64_t *)v104);
        if ((*(uint64_t (**)(uint64_t, void, void))(*((void *)&v45 + 1) + 24))(v37, v45, *((void *)&v45 + 1)))
        {
          outlined destroy of LoadTrace((uint64_t)v89, type metadata accessor for LoadTrace);
          (*(void (**)(uint64_t *, uint64_t))(v84 + 8))(v82, v94);
          uint64_t v46 = *(void *)(v90 + 56);
          if (v46)
          {
            uint64_t v47 = v46 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
            *(void *)uint64_t v47 = 1;
            *(unsigned char *)(v47 + 8) = 0;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v48 = swift_initStackObject();
          *(_OWORD *)(v48 + 16) = xmmword_228324960;
          uint64_t v49 = MEMORY[0x263F8D310];
          *(void *)(v48 + 32) = 1701869940;
          *(void *)(v48 + 40) = 0xE400000000000000;
          *(void *)(v48 + 48) = 0x6D6F724664616F4CLL;
          *(void *)(v48 + 56) = 0xEB000000004C5255;
          *(void *)(v48 + 72) = v49;
          *(void *)(v48 + 80) = 0x73746E65746E6F63;
          *(void *)(v48 + 88) = 0xEA0000000000664FLL;
          uint64_t v50 = v94;
          *(void *)(v48 + 120) = v94;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v48 + 96));
          v41(boxed_opaque_existential_1, v37, v50);
          *(void *)(v48 + 128) = 0x656D614E68746977;
          *(void *)(v48 + 136) = 0xE800000000000000;
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          uint64_t v53 = v92;
          *(void *)(v48 + 144) = v91;
          *(void *)(v48 + 152) = v53;
          *(void *)(v48 + 168) = v52;
          *(void *)(v48 + 176) = 0xD000000000000015;
          *(void *)(v48 + 184) = 0x800000022835C1A0;
          char v54 = static RKARSystemCore.generateDecimatedMeshes;
          *(void *)(v48 + 216) = MEMORY[0x263F8D4F8];
          *(unsigned char *)(v48 + 192) = v54;
          swift_bridgeObjectRetain();
          unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(v48);
          uint64_t v36 = *(unsigned char **)&v104[8];
          uint64_t v56 = *(void *)v104;
          __swift_project_boxed_opaque_existential_1(&v102, *(uint64_t *)v104);
          uint64_t v57 = v93;
          uint64_t v58 = (*((uint64_t (**)(unint64_t, uint64_t, unsigned char *))v36 + 4))(v55, v56, v36);
          if (v57)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v36 = (unsigned char *)v58;
            swift_bridgeObjectRelease();
            specialized static Entity.applyHackForRealityIOUSDImports(rootEntity:)((uint64_t)v36);
            specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v36, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
            LoadTracer.endLoad(of:with:)((uint64_t)v36, v43);
          }
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined destroy of BodyTrackingComponent?((uint64_t)v97, &demangling cache variable for type metadata for RealityFileLoadInformation?);
          outlined destroy of LoadTrace(v43, type metadata accessor for LoadTrace);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
          return (uint64_t)v36;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
        uint64_t v42 = (uint64_t)v82;
        uint64_t v69 = v83;
        uint64_t v44 = v95;
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v110, &demangling cache variable for type metadata for USDImportService?);
        uint64_t v69 = v83;
      }
      unint64_t v73 = v89;
      uint64_t v74 = *(void *)(v90 + 56);
      uint64_t v75 = v85;
      if (v74)
      {
        uint64_t v76 = v74 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
        *(void *)uint64_t v76 = 0;
        *(unsigned char *)(v76 + 8) = 0;
      }
      uint64_t v77 = v93;
      uint64_t v78 = specialized closure #1 in static Entity.__load(contentsOf:withName:loadOptions:)(v42, v44, v91, v92, v40, v75, v69, (uint64_t)v73);
      if (!v77) {
        uint64_t v36 = (unsigned char *)v78;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of LoadTrace((uint64_t)v73, type metadata accessor for LoadTrace);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v42, v94);
      outlined destroy of BodyTrackingComponent?((uint64_t)v97, &demangling cache variable for type metadata for RealityFileLoadInformation?);
      outlined destroy of LoadTrace((uint64_t)v96, type metadata accessor for LoadTrace);
      return (uint64_t)v36;
    }
    uint64_t v59 = v81;
    outlined init with take of RealityFileLoadInformation((uint64_t)v38, (uint64_t)v81, type metadata accessor for RealityFileLoadInformation);
    memset(v104, 0, sizeof(v104));
    long long v103 = 0u;
    __int16 v105 = 1;
    BOOL v106 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    uint64_t v107 = 0;
    LOBYTE(v102) = 2;
    uint64_t v60 = v90;
    outlined assign with copy of __DownsamplingStrategy?(v90, (uint64_t)&v104[8]);
    *(void *)&v104[48] = *(void *)(v60 + 40);
    uint64_t v61 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&v104[56] = v91;
    *(void *)&v104[64] = v61;
    BOOL v106 = v80 != 2;
    HIBYTE(v105) = (v80 & 0xFE) != 2;
    uint64_t v62 = *(void *)(v60 + 56);
    swift_retain();
    swift_release();
    uint64_t v109 = v62;
    uint64_t v63 = (uint64_t *)&v59[*(int *)(v39 + 20)];
    uint64_t v64 = *v63;
    unint64_t v65 = v63[1];
    swift_bridgeObjectRetain();
    uint64_t v66 = v64;
    uint64_t v67 = v93;
    __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)((uint64_t)v59, v66, v65, (uint64_t)&v102, (uint64_t *)&v110);
    uint64_t v68 = (uint64_t)v96;
    if (v67)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of LoadTrace((uint64_t)v59, type metadata accessor for RealityFileLoadInformation);
      outlined destroy of BodyTrackingComponent?((uint64_t)v36, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    }
    else
    {
      uint64_t v70 = (uint64_t)v36;
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v110, (uint64_t)&v101);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
      swift_dynamicCast();
      uint64_t v71 = v99;
      uint64_t v72 = v100;
      __swift_project_boxed_opaque_existential_1(v98, v99);
      uint64_t v36 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v71, v72);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
      specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v36);
      LoadTracer.endLoad(of:with:)((uint64_t)v36, v68);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v110);
      outlined destroy of LoadTrace((uint64_t)v81, type metadata accessor for RealityFileLoadInformation);
      outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    }
    outlined destroy of LoadTrace(v68, type metadata accessor for LoadTrace);
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v102);
    return (uint64_t)v36;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Entity.__loadAnchor(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, uint64_t, uint64_t))
{
  v98 = a3;
  unint64_t v89 = a4;
  uint64_t v95 = a2;
  uint64_t v97 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v86 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v92 = (char *)&v85 - v7;
  uint64_t v96 = type metadata accessor for URL();
  uint64_t v94 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v87 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v90 = (char *)&v85 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v88 = (char *)&v85 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Information = type metadata accessor for RealityFileLoadInformation(0);
  uint64_t v16 = *(void *)(Information - 8);
  MEMORY[0x270FA5388](Information);
  uint64_t v91 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (uint64_t *)((char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = specialized static __ServiceLocator.shared.getter();
  uint64_t v23 = *(void *)(*(void *)(v22 + 168) + 32);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v22 + 24);
  swift_unownedRetainStrong();
  int v25 = *(void **)(v24 + 32);
  uint64_t v113 = v22;
  swift_retain();
  uint64_t v100 = v23;
  swift_retain();
  id v26 = v25;
  swift_release();
  *uint64_t v21 = v26;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x263F8F0E0], v18);
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if (v24)
  {
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  int v27 = static Entity.synchronousLoadOptions;
  uint64_t v28 = v97;
  uint64_t v29 = URL.absoluteString.getter();
  uint64_t v31 = v30;
  swift_beginAccess();
  char v32 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<AnchorEntity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  *(void *)(inited + 16) = v29;
  *(void *)(inited + 24) = v31;
  *(unsigned char *)(inited + 32) = v27;
  *(unsigned char *)(inited + 33) = v32;
  *(_WORD *)(inited + 34) = 1;
  *(_DWORD *)(inited + 36) = 4;
  swift_weakAssign();
  uint64_t v34 = v113 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v34, (uint64_t)&v111, &demangling cache variable for type metadata for USDImportService?);
  if (v112)
  {
    outlined init with take of BindableDataInternal(&v111, (uint64_t)v105);
    long long v35 = *(_OWORD *)&v105[24];
    __swift_project_boxed_opaque_existential_1(v105, *(uint64_t *)&v105[24]);
    if ((*(uint64_t (**)(uint64_t, void, void))(*((void *)&v35 + 1) + 24))(v28, v35, *((void *)&v35 + 1)))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      uint64_t v36 = swift_initStackObject();
      *(_OWORD *)(v36 + 16) = xmmword_228324960;
      *(void *)(v36 + 32) = 1701869940;
      *(void *)(v36 + 40) = 0xE400000000000000;
      uint64_t v37 = MEMORY[0x263F8D310];
      *(void *)(v36 + 48) = 0xD000000000000011;
      *(void *)(v36 + 56) = 0x800000022835C930;
      *(void *)(v36 + 72) = v37;
      *(void *)(v36 + 80) = 0x73746E65746E6F63;
      *(void *)(v36 + 88) = 0xEA0000000000664FLL;
      uint64_t v38 = v96;
      *(void *)(v36 + 120) = v96;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v36 + 96));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v94 + 16))(boxed_opaque_existential_1, v28, v38);
      *(void *)(v36 + 128) = 0x656D614E68746977;
      *(void *)(v36 + 136) = 0xE800000000000000;
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v41 = v98;
      *(void *)(v36 + 144) = v95;
      *(void *)(v36 + 152) = v41;
      *(void *)(v36 + 168) = v40;
      *(void *)(v36 + 176) = 0xD000000000000015;
      *(void *)(v36 + 184) = 0x800000022835C1A0;
      char v42 = static RKARSystemCore.generateDecimatedMeshes;
      *(void *)(v36 + 216) = MEMORY[0x263F8D4F8];
      *(unsigned char *)(v36 + 192) = v42;
      swift_bridgeObjectRetain();
      uint64_t v43 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v36);
      long long v44 = *(_OWORD *)&v105[24];
      __swift_project_boxed_opaque_existential_1(v105, *(uint64_t *)&v105[24]);
      long long v45 = v99;
      (*(void (**)(void *, void, void))(*((void *)&v44 + 1) + 32))(v43, v44, *((void *)&v44 + 1));
      swift_bridgeObjectRelease();
      if (!v45)
      {
        type metadata accessor for AnchorEntity();
        uint64_t v43 = (void *)swift_dynamicCastClassUnconditional();
        specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v43, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      }
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
      return (uint64_t)v43;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v111, &demangling cache variable for type metadata for USDImportService?);
  }
  type metadata accessor for RealityFileLoadInformationResolver();
  static RealityFileLoadInformationResolver.resolve(url:)(v28, (uint64_t)v15);
  uint64_t v46 = Information;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, Information) != 1)
  {
    uint64_t v61 = v91;
    outlined init with take of RealityFileLoadInformation((uint64_t)v15, v91, type metadata accessor for RealityFileLoadInformation);
    memset(&v105[8], 0, 89);
    __int16 v106 = 1;
    BOOL v107 = 0;
    uint64_t v110 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    v105[0] = 2;
    outlined assign with copy of __DownsamplingStrategy?((uint64_t)v89, (uint64_t)&v105[32]);
    uint64_t v62 = v98;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&v105[80] = v95;
    *(void *)&v105[88] = v62;
    BOOL v107 = v27 != 2;
    HIBYTE(v106) = (v27 & 0xFE) != 2;
    uint64_t v63 = (uint64_t *)(v61 + *(int *)(v46 + 20));
    uint64_t v64 = *v63;
    uint64_t v43 = (void *)v63[1];
    swift_bridgeObjectRetain();
    uint64_t v65 = v64;
    uint64_t v66 = v99;
    __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)(v61, v65, (unint64_t)v43, (uint64_t)v105, (uint64_t *)&v111);
    if (v66)
    {
      outlined destroy of LoadTrace(v61, type metadata accessor for RealityFileLoadInformation);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined init with copy of __REAssetService((uint64_t)&v111, (uint64_t)&v104);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceLoadResultBase);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneResourceEntityMaker);
      swift_dynamicCast();
      uint64_t v72 = v102;
      uint64_t v73 = v103;
      __swift_project_boxed_opaque_existential_1(v101, v102);
      uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v73 + 16))(v72, v73);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      specialized Entity.LoadFinisher.setupAfterRealityLoadSync(_:)((uint64_t)v43);
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
      outlined destroy of LoadTrace(v61, type metadata accessor for RealityFileLoadInformation);
    }
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v105);
    return (uint64_t)v43;
  }
  uint64_t v91 = inited;
  outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for RealityFileLoadInformation?);
  uint64_t v47 = v94;
  unint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v48 = v88;
  uint64_t v49 = v96;
  v89(v88, v28, v96);
  swift_retain();
  URL._bridgeToObjectiveC()(v50);
  uint64_t v52 = v51;
  swift_beginAccess();
  uint64_t v53 = v28;
  uint64_t v54 = RESceneImportOperationCreateWithURL();

  type metadata accessor for __SceneImportOperation();
  swift_initStackObject();
  uint64_t Information = __SceneImportOperation.init(core:)(v54);
  swift_release();
  unint64_t v55 = *(void (**)(char *, uint64_t))(v47 + 8);
  v55(v48, v49);
  uint64_t v56 = v90;
  v89(v90, v53, v49);
  uint64_t v57 = v98;
  if (v98)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = v99;
    uint64_t v58 = v49;
    uint64_t v59 = v56;
    uint64_t v60 = v95;
  }
  else
  {
    uint64_t v67 = v87;
    uint64_t v59 = v56;
    URL.deletingPathExtension()();
    uint64_t v60 = URL.lastPathComponent.getter();
    uint64_t v57 = v68;
    v55(v67, v49);
    uint64_t v43 = v99;
    uint64_t v58 = v49;
  }
  v55(v59, v58);
  v69.value._uint64_t countAndFlagsBits = v60;
  v69.value._object = v57;
  __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v69, 0, static RKARSystemCore.generateDecimatedMeshes, (Swift::Bool_optional)2);
  swift_bridgeObjectRelease();
  __SceneImportOperation.run()();
  uint64_t v70 = (uint64_t)v92;
  if (v71)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v43;
  }
  uint64_t v74 = RESceneImportOperationCopySourceURL();
  if (v74)
  {
    uint64_t v75 = (void *)v74;
    uint64_t v76 = (uint64_t)v86;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v77 = 0;
  }
  else
  {
    uint64_t v77 = 1;
    uint64_t v76 = (uint64_t)v86;
  }
  uint64_t v79 = v94;
  uint64_t v80 = v96;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v76, v77, 1, v96);
  outlined init with take of Transform?(v76, v70, &demangling cache variable for type metadata for URL?);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v70, 1, v80);
  if (result != 1)
  {
    uint64_t v81 = __SceneImportOperation.importedScenes.getter();
    __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v81, (uint64_t *)v105);
    swift_bridgeObjectRelease();
    v55((char *)v70, v96);
    uint64_t v82 = *(void **)v105;
    long long v83 = *(_OWORD *)&v105[8];
    swift_bridgeObjectRetain();
    uint64_t v43 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v83, *((void **)&v83 + 1));
    uint64_t v99 = v82;
    *(_OWORD *)__int16 v105 = v83;
    swift_bridgeObjectRetain_n();
    uint64_t v84 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v43, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v84, (void *)0x301);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    __SceneResourceCache.Entry.attach(toEntity:)(v43);
    specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)((uint64_t)v43, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (uint64_t)v43;
  }
  __break(1u);
  return result;
}

uint64_t sub_2281EE198()
{
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_2281EE204()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  uint64_t v4 = (v2 + 88) & ~v2;
  unint64_t v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v4, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v2 | 7);
}

uint64_t partial apply for closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(a1, a2, v2 + 16, *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), *(void *)(v2 + 80), v2 + v6, *(void **)(v2 + v7), *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t objectdestroy_32Tm()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v6);

  return MEMORY[0x270FA0238](v0, v6 + 40, v5);
}

uint64_t partial apply for closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:));
}

uint64_t partial apply for closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v3 + v9);
  uint64_t v12 = *(void *)(v3 + v8);
  uint64_t v13 = *(void *)(v3 + v8 + 8);
  uint64_t v14 = *(void *)(v3 + v10);

  return a3(a1, a2, v3 + v7, v12, v13, v11, v14, v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t outlined init with take of RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static Entity.loadModelAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  char v6 = static RKARSystemCore.generateDecimatedMeshes;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  LOWORD(v12) = 512;
  *((void *)&v12 + 1) = 0;
  outlined assign with take of __DownsamplingStrategy?((uint64_t)v13, (uint64_t)&v9);
  *((void *)&v11 + 1) = 0;
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = (unint64_t)v11;
  long long v16 = v12;
  LOBYTE(v16) = v6;
  if (one-time initialization token for asynchronousLoadOptions != -1) {
    swift_once();
  }
  LOBYTE(v9) = static Entity.asynchronousLoadOptions;
  uint64_t v7 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, a3, v15);
  outlined destroy of Entity.__LoadOptions((uint64_t)v15);
  return v7;
}

uint64_t specialized static Entity.loadModel(contentsOf:withName:loadOptions:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v76 = a3;
  uint64_t v72 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v74 = *(Swift::Bool_optional **)(v8 - 8);
  uint64_t v75 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v71 = (char *)&v66 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v70 = (char *)&v66 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + 24);
  swift_unownedRetainStrong();
  uint64_t v20 = *(void **)(v19 + 32);
  uint64_t v82 = v18;
  swift_retain();
  id v21 = v20;
  swift_release();
  *uint64_t v17 = v21;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F8F0E0], v14);
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v19)
  {
    uint64_t v73 = v5;
    if (one-time initialization token for synchronousLoadOptions == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  char v22 = static Entity.synchronousLoadOptions;
  uint64_t v23 = URL.absoluteString.getter();
  uint64_t v25 = v24;
  swift_beginAccess();
  char v26 = static RKARSystemCore.generateDecimatedMeshes;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.LoadFinisher<ModelEntity>);
  uint64_t inited = swift_initStackObject();
  swift_weakInit();
  *(void *)(inited + 16) = v23;
  *(void *)(inited + 24) = v25;
  *(unsigned char *)(inited + 32) = v22;
  *(unsigned char *)(inited + 33) = v26;
  *(_WORD *)(inited + 34) = 256;
  *(_DWORD *)(inited + 36) = 2;
  swift_weakAssign();
  uint64_t v28 = v82 + 176;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v28, (uint64_t)&v77, &demangling cache variable for type metadata for USDImportService?);
  if (!v78)
  {
    uint64_t v68 = inited;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v77, &demangling cache variable for type metadata for USDImportService?);
LABEL_12:
    uint64_t v46 = v74;
    uint64_t v74 = (Swift::Bool_optional *)a4;
    uint64_t v47 = *(void *)(a4 + 56);
    if (v47)
    {
      uint64_t v48 = v47 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(void *)uint64_t v48 = 0;
      *(unsigned char *)(v48 + 8) = 0;
    }
    Swift::String_optional v69 = *(void (**)(char *, uint64_t, uint64_t))&v46[16].value;
    uint64_t v49 = v70;
    uint64_t v50 = a1;
    uint64_t v51 = v75;
    v69(v70, a1, v75);
    swift_retain();
    URL._bridgeToObjectiveC()(v52);
    uint64_t v54 = v53;
    swift_beginAccess();
    uint64_t v55 = RESceneImportOperationCreateWithURL();

    type metadata accessor for __SceneImportOperation();
    swift_initStackObject();
    __SceneImportOperation.init(core:)(v55);
    swift_release();
    uint64_t v56 = *(void (**)(char *, uint64_t))&v46[8].value;
    v56(v49, v51);
    uint64_t v57 = v71;
    v69(v71, v50, v51);
    uint64_t v58 = v76;
    if (v76)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = (uint64_t)v57;
      uint64_t v59 = v72;
    }
    else
    {
      uint64_t v60 = v67;
      uint64_t v42 = (uint64_t)v57;
      URL.deletingPathExtension()();
      uint64_t v59 = URL.lastPathComponent.getter();
      uint64_t v58 = v61;
      v56(v60, v51);
    }
    v56((char *)v42, v51);
    v62.value._uint64_t countAndFlagsBits = v59;
    v62.value._object = v58;
    __SceneImportOperation.setUpDefaultImport(resourceName:mergeEntities:generateDecimatedMesh:reorderVertexCaching:)(v62, 1, static RKARSystemCore.generateDecimatedMeshes, v74[49]);
    swift_bridgeObjectRelease();
    __SceneImportOperation.run()();
    if (!v63)
    {
      uint64_t v42 = __SceneImportOperation.makeModelEntity()();
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v42, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
    }
    swift_release();
    swift_release();
    swift_release();
    return v42;
  }
  outlined init with take of BindableDataInternal(&v77, (uint64_t)v79);
  uint64_t v29 = v80;
  uint64_t v30 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(a1, v29, v30) & 1) == 0)
  {
    uint64_t v68 = inited;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    goto LABEL_12;
  }
  uint64_t v31 = a1;
  uint64_t v32 = *(void *)(a4 + 56);
  uint64_t v34 = v74;
  uint64_t v33 = v75;
  if (v32)
  {
    uint64_t v35 = v32 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
    *(void *)uint64_t v35 = 1;
    *(unsigned char *)(v35 + 8) = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v36 = swift_initStackObject();
  *(_OWORD *)(v36 + 16) = xmmword_228324960;
  *(void *)(v36 + 32) = 1701869940;
  *(void *)(v36 + 40) = 0xE400000000000000;
  uint64_t v37 = MEMORY[0x263F8D310];
  *(void *)(v36 + 48) = 0xD000000000000010;
  *(void *)(v36 + 56) = 0x800000022835C8D0;
  *(void *)(v36 + 72) = v37;
  *(void *)(v36 + 80) = 0x73746E65746E6F63;
  *(void *)(v36 + 88) = 0xEA0000000000664FLL;
  *(void *)(v36 + 120) = v33;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v36 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))&v34[16].value)(boxed_opaque_existential_1, v31, v33);
  *(void *)(v36 + 128) = 0x656D614E68746977;
  *(void *)(v36 + 136) = 0xE800000000000000;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v40 = v76;
  *(void *)(v36 + 144) = v72;
  *(void *)(v36 + 152) = v40;
  *(void *)(v36 + 168) = v39;
  *(void *)(v36 + 176) = 0xD000000000000015;
  *(void *)(v36 + 184) = 0x800000022835C1A0;
  char v41 = static RKARSystemCore.generateDecimatedMeshes;
  *(void *)(v36 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v36 + 192) = v41;
  swift_bridgeObjectRetain();
  uint64_t v42 = specialized Dictionary.init(dictionaryLiteral:)(v36);
  uint64_t v43 = v80;
  uint64_t v44 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  uint64_t v45 = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v42, v43, v44);
  if (v45)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ModelEntity();
    uint64_t v64 = swift_dynamicCastClass();
    if (v64)
    {
      uint64_t v42 = v64;
      specialized Entity.LoadFinisher.setupAfterUSDLoadSync(_:)(v64, (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:));
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      return v42;
    }
    swift_release();
    type metadata accessor for Entity.LoadError(0);
    _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  return v42;
}

uint64_t specialized static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v29 = a1;
  uint64_t v30 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v30 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](v30);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (id *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = specialized static __ServiceLocator.shared.getter();
  uint64_t v10 = *(void **)(*(void *)(v9 + 168) + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v9 + 24);
  swift_unownedRetainStrong();
  uint64_t v12 = *(void **)(v11 + 32);
  swift_retain();
  id v27 = v10;
  id v13 = v12;
  swift_release();
  uint64_t v14 = *(void *)(*(void *)(v9 + 168) + 32);
  *uint64_t v8 = v13;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F0E0], v5);
  id v15 = v13;
  swift_retain();
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    outlined init with copy of (Int, URL)(v28, (uint64_t)v31, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    id v17 = v15;
    uint64_t v18 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v30);
    unint64_t v19 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    unint64_t v20 = (v3 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    outlined init with take of Transform?((uint64_t)v31, v21 + 16, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    *(void *)(v21 + 56) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v21 + v19, v4, v18);
    *(void *)(v21 + v20) = v17;
    *(void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<[Entity]>);
    uint64_t v22 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<[Entity], Error>?>);
    uint64_t v23 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v24 = swift_allocObject();
    *(_DWORD *)(v24 + 16) = 0;
    *(void *)(v23 + 16) = v24;
    *(void *)(v23 + 24) = 0;
    *(unsigned char *)(v23 + 32) = -1;
    *(void *)(v22 + 16) = v23;
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = partial apply for closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:);
    v25[3] = v21;
    v25[4] = v23;
    v25[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<[Entity], Error>);
    swift_allocObject();
    swift_retain();
    uint64_t v26 = Future.init(_:)();
    swift_release();
    *(void *)(v22 + 24) = v26;
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2281EF3C8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in static Entity.loadAsync(assetDescriptor:)(void (*a1)(void **), uint64_t a2)
{
  closure #1 in static Entity.loadAsync(assetDescriptor:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #1 in static Entity.loadReferences(root:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #1 in static Entity.loadReferences(root:)(a1, a2, v6);
}

unsigned char *sub_2281EF4BC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 2;
  return result;
}

unsigned char *sub_2281EF4D0(unsigned char *result, char *a2)
{
  int v2 = *a2;
  if (*result == 1)
  {
    if (v2 != 2) {
      return result;
    }
    char v3 = 3;
  }
  else
  {
    if (v2 == 2) {
      return result;
    }
    char v3 = 2;
  }
  *a2 = v3;
  return result;
}

unsigned char *sub_2281EF504@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 0xFE) != 2;
  return result;
}

unsigned char *sub_2281EF51C(unsigned char *result, char *a2)
{
  int v2 = *a2 & 0xFE;
  if (*result == 1)
  {
    if (v2 != 2) {
      return result;
    }
    char v3 = 0;
  }
  else
  {
    if (v2 == 2) {
      return result;
    }
    char v3 = 3;
  }
  *a2 = v3;
  return result;
}

uint64_t destroy for Entity.__LoadOptions(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_release();
}

uint64_t initializeWithCopy for Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Entity.__LoadOptions(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.__LoadOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.__LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.__LoadOptions()
{
  return &type metadata for Entity.__LoadOptions;
}

uint64_t getEnumTagSinglePayload for Entity.__AsyncLoadOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 2;
  }
  else {
    int v7 = -3;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for Entity.__AsyncLoadOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281EF9B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.__AsyncLoadOptions()
{
  return &type metadata for Entity.__AsyncLoadOptions;
}

uint64_t type metadata accessor for Entity.AssetArray()
{
  return self;
}

uint64_t type metadata completion function for Entity.LoadFinisher()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Entity.LoadFinisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 3u:
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        a1[2] = v12;
        a1[3] = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Entity.LoadError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 4:
      goto LABEL_6;
    case 1:
    case 3:
      uint64_t v3 = type metadata accessor for URL();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 5:
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for Entity.LoadError(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 4u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 1u:
    case 3u:
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_6;
    case 5u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for Entity.LoadError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of LoadTrace((uint64_t)a1, type metadata accessor for Entity.LoadError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 3u:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for Entity.LoadError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Entity.LoadError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of LoadTrace((uint64_t)a1, type metadata accessor for Entity.LoadError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Entity.LoadError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RealityFileLoadInformation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for RealityFileLoadInformation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2281F07F8);
}

uint64_t sub_2281F07F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RealityFileLoadInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2281F08DC);
}

uint64_t sub_2281F08DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for RealityFileLoadInformation()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in Entity.LoadError()
{
  return _s10RealityKit6EntityC9LoadErrorOAEs0E0AAWlTm_0(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
}

uint64_t partial apply for closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(uint64_t a1)
{
  return closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_2281F0A84()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(void *a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);

  return closure #1 in closure #1 in static Entity.finishUSDLoad(forEntity:withOptions:)(a1, v3);
}

uint64_t sub_2281F0B9C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1)
{
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_259, (uint64_t)&unk_26DCB4598, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_266);
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_383_0, (uint64_t)&unk_26DCB4B60, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_390_0);
}

{
  partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, (uint64_t)&block_descriptor_583, (uint64_t)&unk_26DCB54E8, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply, (uint64_t)&block_descriptor_590);
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t sub_2281F0C20()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(uint64_t a1)
{
  return closure #1 in Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:)(a1, v1);
}

uint64_t sub_2281F0C60()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _ss13OpaquePointerVIgy_ABytIegnr_TRTA_0(void *a1)
{
  return thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_2281F0C78()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2281F0CB0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(char a1)
{
  return closure #1 in closure #1 in static Entity.loadAsync(assetDescriptor:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t, uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_2281F0D00()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  uint64_t v5 = (v3 + 64) & ~v3;
  unint64_t v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  return MEMORY[0x270FA0238](v0, v7 + 8, v3 | 7);
}

uint64_t partial apply for closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 56);
  uint64_t v9 = *(void **)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(a1, a2, v2 + 16, v8, v2 + v6, v9, v10);
}

uint64_t sub_2281F0ED8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  uint64_t v5 = (v3 + 64) & ~v3;
  unint64_t v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  swift_release();

  return MEMORY[0x270FA0238](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t partial apply for doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  unint64_t v7 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(v0 + 16, v4, v5, v6, v8, v9);
}

uint64_t sub_2281F1090()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void (**)(uint64_t, void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in doLoadAllEntitiesFromURLAsync #1 () in closure #1 in static Entity.__loadAllAsync(contentsOf:downsamplingStrategy:)(v3, v0 + v2, v4);
}

uint64_t sub_2281F1210()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v5);
  }
  unint64_t v6 = (v5 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_release();

  return MEMORY[0x270FA0238](v0, v7 + 8, v3 | 7);
}

uint64_t partial apply for closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), v2 + v9, *(void **)(v2 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2+ ((((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t _ss6ResultOy10RealityKit11ModelEntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTA(uint64_t a1, uint64_t a2)
{
  return _ss6ResultOy10RealityKit6EntityCs5Error_pGIegg_Iegg_AByxsAF_pGRi_zRi0_zlyAEIsegn_Iegg_TRTm(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), (uint64_t)&unk_26DCB4610, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ());
}

uint64_t sub_2281F1460()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v5);
  }
  unint64_t v6 = (((v5 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v6);

  return MEMORY[0x270FA0238](v0, v6 + 40, v3 | 7);
}

uint64_t partial apply for closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v2 + v7);
  uint64_t v11 = *(void *)(v2 + v7 + 8);
  uint64_t v12 = *(void *)(v2 + v9);

  return closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(a1, a2, v2 + v6, v10, v11, v2 + v8, v12, (void *)(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in closure #2 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2)
{
  return closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2 & 1, *(void *)(v2 + 16), v2 + 24, *(uint64_t (**)(void *, uint64_t))(v2 + 88), *(void *)(v2 + 96), (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
}

void partial apply for specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized closure #1 in Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:)(a1, *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned int *)(v5 + 32), *(void (**)(void *, uint64_t))(v5 + 40), *(void *)(v5 + 48), *(void **)(v5 + 56), *(void *)(v5 + 64), a2, a3, a4, a5);
}

uint64_t sub_2281F1700()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2281F1710()
{
  swift_release();

  swift_release();
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 120, 7);
}

uint64_t partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)()
{
  return partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)((uint64_t (*)(void, void, void, void *, void, void))doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:));
}

uint64_t sub_2281F179C()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 128, 7);
}

void partial apply for closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(void (*a1)(_OWORD *), uint64_t a2)
{
  closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), v2 + 48, *(void *)(v2 + 112));
}

uint64_t sub_2281F1844()
{
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  return MEMORY[0x270FA0238](v0, 168, 7);
}

uint64_t partial apply for closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), v2 + 40, *(void *)(v2 + 104), *(void **)(v2 + 112), v2 + 120, *(void *)(v2 + 160));
}

uint64_t objectdestroy_238Tm()
{
  swift_release();
  if (*(void *)(v0 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t sub_2281F1958()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  return doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(v0[2], (uint64_t)(v0 + 3), v0[8], v0[9], v0[10]);
}

uint64_t sub_2281F19BC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  return closure #1 in doLoadModelAsync #1 () in closure #1 in static Entity.loadModelAsync(named:in:options:asyncOptions:)((void *)(v0 + 16), *(void *)(v0 + 56));
}

uint64_t partial apply for doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)()
{
  return partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)((uint64_t (*)(void, void, void, void *, void, void))doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:));
}

uint64_t partial apply for doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(uint64_t (*a1)(void, void, void, void *, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1 + 5, v1[13], v1[14]);
}

uint64_t objectdestroy_289Tm()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 112, 7);
}

void partial apply for closure #1 in doLoadModelFromURLAsync #1 () in closure #1 in static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)()
{
  closure #1 in doLoadModelAsync #1 () in closure #2 in static Entity.loadModelAsync(named:in:options:asyncOptions:)(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + 32, *(void (**)(uint64_t, uint64_t))(v0 + 96), *(void *)(v0 + 104));
}

uint64_t sub_2281F1AE8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(uint64_t a1)
{
  return specialized closure #1 in Entity.LoadFinisher.setupAfterUSDLoad(_:)(a1);
}

uint64_t sub_2281F1B14()
{
  return objectdestroy_362Tm(MEMORY[0x263F8EED8]);
}

uint64_t sub_2281F1B60()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2281F1B70()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  uint64_t v4 = (v2 + 88) & ~v2;
  unint64_t v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v0 + 16, *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + v4), *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_2281F1DA0()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  return doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_2281F1E14()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  uint64_t v4 = (v2 + 112) & ~v2;
  unint64_t v5 = (((v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for RealityFileLoadInformation(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  return doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), v0 + 40, *(void *)(v0 + 104), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + v4), *(void *)(v0 + v5), *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_2281F2070()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (((((((((v4 + *(void *)(v2 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v5);
  }
  unint64_t v6 = (((v5 + 71) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v6);

  return MEMORY[0x270FA0238](v0, v6 + 40, v3 | 7);
}

uint64_t partial apply for closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v0 + v2, *(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned __int8 *)(v0 + v4 + 16), *(void *)(v0 + v5), *(void *)(v0 + v6), *(void *)(v0 + v7), *(void *)(v0 + v8), v0 + v9, *(void *)(v0 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 8), (void *)(v0 + ((((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2281F2298()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  return postLoad #1 (data:) in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(void *a1, char a2)
{
  return closure #1 in closure #1 in closure #2 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(a1, a2 & 1, *(void *)(v2 + 16), v2 + 24, *(uint64_t (**)(void *, uint64_t))(v2 + 88), *(void *)(v2 + 96), (void (*)(void))specialized Entity.LoadFinisher.recursivelyAddAssets(to:forEntity:), (uint64_t (*)(uint64_t, void (*)(uint64_t, void), uint64_t))specialized Entity.LoadFinisher.makeLoadRequest(completedWith:passedTo:));
}

uint64_t sub_2281F2494()
{
  swift_release();

  swift_release();
  swift_release();
  if (*(void *)(v0 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t partial apply for doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  return doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v0[2], v0[3], v0[4], v0[5], (uint64_t)(v0 + 6), v0[14], v0[15]);
}

uint64_t objectdestroy_342Tm()
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 120, 7);
}

uint64_t sub_2281F258C()
{
  swift_release();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static Entity.__loadAsync(named:in:options:asyncOptions:)(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + 32, *(uint64_t (**)(void *, uint64_t))(v2 + 96), *(void *)(v2 + 104));
}

uint64_t objectdestroy_332Tm_0()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadTrace(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[11];
  uint64_t v8 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5, v4);
}

void partial apply for closure #1 in LoadTracer.subscribe<A>(to:with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LoadTrace(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in LoadTracer.subscribe<A>(to:with:)(a1, v1 + v4, v5);
}

uint64_t objectdestroy_335Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for LoadTrace(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[11];
  uint64_t v8 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

uint64_t partial apply for specialized closure #2 in LoadTracer.subscribe<A>(to:with:)()
{
  return specialized closure #2 in LoadTracer.subscribe<A>(to:with:)();
}

uint64_t sub_2281F2970()
{
  if (*(void *)(v0 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x270FA0238](v0, 176, 7);
}

uint64_t partial apply for closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)()
{
  return closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(unsigned char *)(v0 + 16), v0 + 24, *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void **)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168));
}

uint64_t objectdestroy_457Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  if (*(void *)(v0 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 152, 7);
}

uint64_t partial apply for closure #1 in doLoadEntityFromURLAsync #1 () in closure #1 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  return closure #2 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 64), v0 + 72, *(void (**)(uint64_t, void))(v0 + 136), *(void *)(v0 + 144));
}

void partial apply for closure #1 in doImportEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)()
{
  closure #1 in closure #1 in doLoadEntityAsync #1 (fulfill:) in static Entity.__loadAsync(named:in:options:asyncOptions:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v0 + 40, *(void (**)(uint64_t, uint64_t))(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_2281F2B00()
{
  return objectdestroy_362Tm(MEMORY[0x263F8EEE8]);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadReferences(root:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  uint64_t v4 = (void *)swift_task_alloc();
  _OWORD v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return static ReferenceComponent.loadReference(at:)(v2);
}

uint64_t sub_2281F2BF4()
{
  return objectdestroy_362Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)(a1, a2 & 1, *(void *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t objectdestroy_150Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)()
{
}

void partial apply for doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(v4[2], v4[3], v4[4], v4[5], v4[6], a1, a2, a3, a4);
}

void partial apply for closure #1 in doLoadBodyTrackedFromURLAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(contentsOf:withName:)()
{
  closure #1 in doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_2281F2D5C()
{
  return objectdestroy_362Tm(MEMORY[0x263F8EED8]);
}

void partial apply for doLoadBodyTrackedAsync #1 () in closure #2 in static Entity.loadBodyTrackedAsync(named:in:)()
{
}

uint64_t sub_2281F2DBC()
{
  return objectdestroy_362Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_362Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(void *a1, char a2)
{
  return closure #1 in closure #1 in static Entity.loadAnchorAsync(named:in:)(a1, a2 & 1, *(void *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Result<ModelEntity, Error>) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_2281F2E74()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t partial apply for doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)()
{
  return doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void **)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t objectdestroy_413Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #1 in doLoadAnchorEntityFromURLAsync #1 () in closure #2 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  return closure #2 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 64), *(void (**)(uint64_t, void))(v0 + 72), *(void *)(v0 + 80));
}

uint64_t objectdestroy_435Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in doImportAnchorEntityFromURLAsync #1 () in closure #3 in static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)()
{
  closure #1 in doLoadAnchorEntityAsync #1 () in closure #2 in static Entity.loadAnchorAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t, uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t BoundingBox.transformed(by:)()
{
  return REAABBTransform();
}

uint64_t BoundingBox.extents.getter()
{
  return REAABBExtents();
}

uint64_t BoundingBox.center.getter()
{
  return REAABBCenter();
}

uint64_t BoundingBox.isEmpty.getter()
{
  return REAABBIsEmpty();
}

double BoundingBox.init()()
{
  return *(double *)&_PromotedConst_3;
}

double one-time initialization function for empty()
{
  double result = 1.40444843e306;
  static BoundingBox.empty = xmmword_22831FD10;
  unk_2681C5FE0 = xmmword_22831FD20;
  return result;
}

double static BoundingBox.empty.getter()
{
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  return *(double *)&static BoundingBox.empty;
}

void BoundingBox.min.setter(__n128 a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*BoundingBox.min.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double BoundingBox.max.getter(double a1, double a2)
{
  return a2;
}

void BoundingBox.max.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*BoundingBox.max.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BoundingBox.hash(into:)(uint64_t a1, double a2, __n128 a3)
{
  ((void (*)(void))specialized SIMD.hash(into:))();

  return specialized SIMD.hash(into:)(a1, a3);
}

Swift::Int BoundingBox.hashValue.getter(__n128 a1, __n128 a2)
{
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, a1);
  specialized SIMD.hash(into:)(v5, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BoundingBox()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v4, v2);
  specialized SIMD.hash(into:)(v4, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BoundingBox(uint64_t a1)
{
  __n128 v4 = v1[1];
  specialized SIMD.hash(into:)(a1, *v1);

  return specialized SIMD.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BoundingBox()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v4, v2);
  specialized SIMD.hash(into:)(v4, v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BoundingBox(__n128 *a1, __n128 *a2)
{
  return specialized static BoundingBox.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t BoundingBox.boundingRadius.getter()
{
  return MEMORY[0x270F1BCA0]();
}

uint64_t BoundingBox.union(_:)()
{
  return REAABBExpandedToIncludePoint();
}

{
  return REAABBExpandedToIncludeBox();
}

uint64_t BoundingBox.formUnion(_:)()
{
  uint64_t result = REAABBExpandedToIncludePoint();
  _OWORD *v0 = v2;
  v0[1] = v3;
  return result;
}

{
  _OWORD *v0;
  uint64_t result;
  long long v2;
  long long v3;

  uint64_t result = REAABBExpandedToIncludeBox();
  _OWORD *v0 = v2;
  v0[1] = v3;
  return result;
}

uint64_t BoundingBox.contains(_:)()
{
  return REAABBContainsPoint();
}

{
  return REAABBContainsBox();
}

uint64_t BoundingBox.intersects(_:)()
{
  return REAABBIntersectsBox();
}

Swift::Void __swiftcall BoundingBox.transform(by:)(simd_float4x4 *by)
{
  REAABBTransform();
  *uint64_t v1 = v2;
  v1[1] = v3;
}

uint64_t BoundingBox.distanceSquared(toPoint:)(__n128 a1, __n128 a2, __n128 a3)
{
  return MEMORY[0x270F1BC50](a2, a3, a1);
}

BOOL specialized static BoundingBox.== infix(_:_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4 = 0;
  while (1)
  {
    __n128 v14 = a1;
    float v7 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    __n128 v15 = a3;
    float v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    BOOL v5 = v7 == v8;
    if (v4 == 2) {
      break;
    }
    while (1)
    {
      ++v4;
      if (v5) {
        break;
      }
      BOOL v5 = 0;
      BOOL result = 0;
      if (v4 == 2) {
        return result;
      }
    }
  }
  if (v7 != v8) {
    return 0;
  }
  uint64_t v9 = 0;
  while (1)
  {
    __n128 v12 = a2;
    float v11 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    __n128 v13 = a4;
    BOOL v10 = v11 == *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    BOOL result = v10;
    if (v9 == 2) {
      break;
    }
    while (1)
    {
      ++v9;
      if (v10) {
        break;
      }
      BOOL v10 = 0;
      BOOL result = 0;
      if (v9 == 2) {
        return result;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BoundingBox and conformance BoundingBox()
{
  unint64_t result = lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox;
  if (!lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundingBox and conformance BoundingBox);
  }
  return result;
}

ValueMetadata *type metadata accessor for BoundingBox()
{
  return &type metadata for BoundingBox;
}

BOOL static AntialiasingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AntialiasingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unint64_t lazy protocol witness table accessor for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1;
  if (!lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_AntialiasingMode_v1 and conformance _Proto_AntialiasingMode_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AntialiasingMode and conformance AntialiasingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode;
  if (!lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AntialiasingMode and conformance AntialiasingMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return &type metadata for _Proto_AntialiasingMode_v1;
}

unsigned char *storeEnumTagSinglePayload for _Proto_AntialiasingMode_v1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281F3A24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AntialiasingMode()
{
  return &type metadata for AntialiasingMode;
}

uint64_t type metadata completion function for AssetServiceScopedRegistry()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AssetServiceScopedRegistry()
{
  return __swift_instantiateGenericMetadata();
}

void *specialized AssetServiceScopedRegistry.instance(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35[3] = a3;
  v35[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
  Swift::UInt v10 = v9(a3, a4);
  float v11 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(a2 + 24);
  if (*(void *)(v12 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v14 & 1) != 0))
  {
    __n128 v15 = *(void **)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v11);
    outlined init with copy of __REAssetService((uint64_t)v35, (uint64_t)aBlock);
    type metadata accessor for __RealityFileURLResolver();
    uint64_t v16 = (void *)swift_allocObject();
    uint64_t v29 = boxed_opaque_existential_1;
    uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)aBlock, (uint64_t)v31);
    Swift::UInt v27 = v10;
    MEMORY[0x270FA5388](v17);
    uint64_t v28 = (void (*)(uint64_t, uint64_t))v9;
    unint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    __n128 v15 = specialized __RealityFileURLResolver.init(_:)((uint64_t)v19, v16, a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    os_unfair_lock_lock(v11);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0x8000000000000000;
    Swift::UInt v22 = v27;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, v27, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 24) = v34;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v28(a3, a4);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v23;
    *(void *)(v24 + 24) = v22;
    uint64_t v32 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v33 = v24;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v31 = &block_descriptor_39;
    uint64_t v25 = _Block_copy(aBlock);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v25);
  }
  os_unfair_lock_unlock(v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v15;
}

uint64_t sub_2281F3E34()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2281F3E6C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t static __SceneResource.fromCoreUnretained(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  RERetain();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

BOOL *__SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(char a1, BOOL *a2, char a3)
{
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  uint64_t v7 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v15);
  uint64_t v9 = v16;
  uint64_t v8 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v9, v8);
  LODWORD(v8) = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (v8)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v7);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(a2, a1 & 1, a3 & 1, &v18, v15);
    if (!v14) {
      a2 = (BOOL *)v15[0];
    }
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    uint64_t v11 = v10;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 2, v12);
    swift_willThrow();
  }
  return a2;
}

uint64_t __SceneResource.makeSingleModelEntity()()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  uint64_t v2 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1 + 120, (uint64_t)v10);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  int v5 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v5)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v2);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeSingleModelEntity()(&v13, v10);
    if (!v0) {
      uint64_t v1 = v10[0];
    }
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    uint64_t v7 = v6;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 2, v8);
    swift_willThrow();
  }
  return v1;
}

uint64_t __SceneResource.makeSingleBodyTrackedEntity()()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  uint64_t v2 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1 + 120, (uint64_t)v10);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  int v5 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v5)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    Scene.init(coreScene:)(v2);
    RERelease();
    swift_release();
    closure #1 in __SceneResource.makeSingleBodyTrackedEntity()(&v13, v10);
    if (v0)
    {
      return swift_release();
    }
    else
    {
      swift_release();
      return v10[0];
    }
  }
  else
  {
    RERelease();
    swift_release();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    swift_allocError();
    uint64_t v8 = v7;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 2, v9);
    return swift_willThrow();
  }
}

void __SceneResource.coreAsset.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t __SceneResource.deinit()
{
  RERelease();
  return v0;
}

uint64_t __SceneResource.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t __SceneResource.coreHandle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  v4[3] = MEMORY[0x263F8DD08];
  v4[0] = v1;
  outlined init with copy of Any((uint64_t)v4, (uint64_t)&v3);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t static __SceneResource.fromCoreRetained(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t __SceneResource.makeScene(named:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter();
  String.utf8CString.getter();
  swift_retain();
  uint64_t v1 = RESceneCreate();
  swift_release();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0 + 120, (uint64_t)v7);
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  int v4 = RESceneLoadFromAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (v4)
  {
    type metadata accessor for Scene();
    swift_allocObject();
    uint64_t v5 = Scene.init(coreScene:)(v1);
    RERelease();
    swift_release();
  }
  else
  {
    RERelease();
    swift_release();
    return 0;
  }
  return v5;
}

uint64_t closure #1 in __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)@<X0>(BOOL *a1@<X1>, char a2@<W2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v9 == 1) {
    goto LABEL_3;
  }
  uint64_t v11 = v9;
  static os_log_type_t.fault.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v12 = swift_allocObject();
  char v13 = a2;
  uint64_t v14 = a4;
  uint64_t v15 = MEMORY[0x263F8D6C8];
  *(_OWORD *)(v12 + 16) = xmmword_22830EC60;
  uint64_t v16 = MEMORY[0x263F8D750];
  *(void *)(v12 + 56) = v15;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 32) = v11;
  type metadata accessor for OS_os_log();
  uint64_t v17 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)();
  uint64_t v18 = v14;
  a2 = v13;
  swift_bridgeObjectRelease();

  if (v11)
  {
LABEL_3:
    uint64_t v19 = *EntitiesArray;
    REAnchoringComponentGetComponentType();
    *a1 = REEntityGetComponentByClass() != 0;
    REAnchoringComponentGetComponentType();
    if (a2)
    {
      REEntityGetOrAddComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REEntityRemoveComponent();
    }
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass()) {
      REEntityRemoveComponent();
    }
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v20 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      if (a3)
      {
        REAnchoringComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          type metadata accessor for AnchorEntity();
          uint64_t v22 = swift_allocObject();
          *(void *)(v22 + 16) = v19;
          MEMORY[0x22A68E750](v19, v22);
LABEL_17:
          uint64_t result = REEntitySetParent();
          *a5 = v22;
          return result;
        }
      }
      uint64_t v20 = makeEntity(for:)(v19);
LABEL_16:
      uint64_t v22 = v20;
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    uint64_t v23 = swift_allocError();
    uint64_t v25 = v24;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 2, v26);
    uint64_t result = swift_willThrow();
    *uint64_t v18 = v23;
  }
  return result;
}

uint64_t closure #1 in __SceneResource.makeSingleModelEntity()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v5 == 1)
  {
    uint64_t v6 = *EntitiesArray;
    type metadata accessor for ModelEntity();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    uint64_t result = MEMORY[0x22A68E750](v6, v7);
    *a2 = v7;
  }
  else
  {
    uint64_t v9 = v5;
    static os_log_type_t.fault.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = MEMORY[0x263F8D6C8];
    *(_OWORD *)(v10 + 16) = xmmword_22830EC60;
    uint64_t v12 = MEMORY[0x263F8D750];
    *(void *)(v10 + 56) = v11;
    *(void *)(v10 + 64) = v12;
    *(void *)(v10 + 32) = v9;
    type metadata accessor for OS_os_log();
    char v13 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    uint64_t v14 = swift_allocError();
    uint64_t v16 = v15;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 2, v17);
    uint64_t result = swift_willThrow();
    *a1 = v14;
  }
  return result;
}

uint64_t closure #1 in __SceneResource.makeSingleBodyTrackedEntity()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BodyTrackingComponent(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  EntitiesArray = (uint64_t *)RESceneGetEntitiesArray();
  if (v12 == 1)
  {
    uint64_t v13 = *EntitiesArray;
    type metadata accessor for BodyTrackedEntity();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    MEMORY[0x22A68E750](v13, v14);
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
    v10[*(int *)(v7 + 20)] = 0;
    outlined init with copy of BodyTrackingComponent((uint64_t)v10, (uint64_t)v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v6);
    outlined destroy of BodyTrackingComponent?((uint64_t)v6);
    swift_release();
    uint64_t result = outlined destroy of BodyTrackingComponent((uint64_t)v10);
    *a2 = v14;
  }
  else
  {
    uint64_t v17 = v12;
    static os_log_type_t.fault.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = MEMORY[0x263F8D6C8];
    *(_OWORD *)(v18 + 16) = xmmword_22830EC60;
    uint64_t v20 = MEMORY[0x263F8D750];
    *(void *)(v18 + 56) = v19;
    *(void *)(v18 + 64) = v20;
    *(void *)(v18 + 32) = v17;
    type metadata accessor for OS_os_log();
    uint64_t v21 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError();
    uint64_t v22 = swift_allocError();
    uint64_t v24 = v23;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 2, v25);
    uint64_t result = swift_willThrow();
    *a1 = v22;
  }
  return result;
}

uint64_t type metadata accessor for __SceneResource()
{
  return self;
}

uint64_t method lookup function for __SceneResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __SceneResource);
}

unint64_t lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError;
  if (!lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError)
  {
    type metadata accessor for SceneResourceLoadResult.InternalError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError);
  }
  return result;
}

uint64_t outlined init with copy of BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BodyTrackingComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of BodyTrackingComponent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PhysicallyBasedMaterial.baseColor.getter()
{
  return PhysicallyBasedMaterial.baseColor.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:));
}

uint64_t sub_2281F5084()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 162, 7);
}

uint64_t PhysicallyBasedMaterial.roughness.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.metallic.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.normal.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  uint64_t v3 = v26;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  swift_bridgeObjectRetain_n();
  id v5 = v4;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v5, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)v17[0];
  uint64_t v7 = v17[1];
  uint64_t v8 = v17[2];
  uint64_t v9 = v17[3];
  uint64_t v10 = v17[4];
  uint64_t v11 = v17[5];
  uint64_t v12 = v17[6];
  uint64_t v13 = v17[7];
  int v14 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v14 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v6 = (void *)v19[0];
    uint64_t v7 = v19[1];
    uint64_t v8 = v19[2];
    uint64_t v9 = v19[3];
    int v14 = v24;
    if (v24 == 255)
    {
LABEL_6:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      LODWORD(v9) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v20 = v10;
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    uint64_t v23 = v13;
  }
  if (v14 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v7, v8, v9, v20, v21, v22, v23, v14);
    goto LABEL_6;
  }
LABEL_7:
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 24) = v9;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

void PhysicallyBasedMaterial.blending.getter(uint64_t a1@<X8>)
{
  if (*(_WORD *)(v1 + 104))
  {
    uint64_t v5 = v1;
    outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v16);
    float v6 = 1.0;
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      unint64_t v7 = specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      if ((v7 & 0x100000000) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = *(float *)&v7;
      }
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v12);
    uint64_t v8 = (uint64_t)v13;
    if (v13)
    {
      int v4 = v15;
      uint64_t v3 = v14;
      uint64_t v9 = v12;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v3 = 0;
      int v4 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v9, (uint64_t)v13);
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    outlined consume of MaterialParameters.Texture?(v9, v8);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      _OWORD v16[3] = &type metadata for PhysicallyBasedMaterial;
      _OWORD v16[4] = &protocol witness table for PhysicallyBasedMaterial;
      v16[0] = swift_allocObject();
      outlined init with copy of PhysicallyBasedMaterial(v5, v16[0] + 16);
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v16, 0, 0, (uint64_t)&v12);
      uint64_t v10 = (CGColor *)v12;
      outlined consume of MaterialParameters.Texture?(v13, v14);
      double Alpha = CGColorGetAlpha(v10);

      float v6 = Alpha;
    }
    *(void *)a1 = LODWORD(v6);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
  }
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = v4;
}

uint64_t PhysicallyBasedMaterial.ambientOcclusion.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  uint64_t v2 = v26;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x80000002283523B0, v4, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)v17[0];
  uint64_t v6 = v17[1];
  uint64_t v7 = v17[2];
  uint64_t v8 = v17[3];
  uint64_t v9 = v17[4];
  uint64_t v10 = v17[5];
  uint64_t v12 = v17[6];
  uint64_t v11 = v17[7];
  int v13 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v5 = (void *)v19[0];
    uint64_t v6 = v19[1];
    uint64_t v7 = v19[2];
    uint64_t v8 = v19[3];
    int v13 = v24;
    if (v24 == 255)
    {
LABEL_6:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v12;
    uint64_t v23 = v11;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v20, v21, v22, v23, v13);
    goto LABEL_6;
  }
LABEL_7:
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

uint64_t PhysicallyBasedMaterial.specular.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:));
}

void PhysicallyBasedMaterial.sheen.getter(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(v1 + 104) & 0x800) != 0)
  {
    void v7[3] = &type metadata for PhysicallyBasedMaterial;
    v7[4] = &protocol witness table for PhysicallyBasedMaterial;
    v7[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v7[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v7, (uint64_t)&v8);
    uint64_t v3 = v8;
    long long v6 = v9;
    uint64_t v4 = v10;
    int v5 = v11;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    int v5 = 0;
    long long v6 = 0uLL;
  }
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = v5;
}

uint64_t PhysicallyBasedMaterial.clearcoat.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.anisotropyLevel.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.anisotropyAngle.getter()
{
  return PhysicallyBasedMaterial.roughness.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.roughness.getter(uint64_t (*a1)(void *, void, void))
{
  v4[3] = &type metadata for PhysicallyBasedMaterial;
  void v4[4] = &protocol witness table for PhysicallyBasedMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

float PhysicallyBasedMaterial.emissiveIntensity.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v4, (uint64_t)v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = (void *)v18[0];
  uint64_t v6 = v18[1];
  uint64_t v7 = v18[2];
  uint64_t v8 = v18[3];
  uint64_t v9 = v18[4];
  uint64_t v10 = v18[5];
  uint64_t v11 = v18[6];
  uint64_t v12 = v18[7];
  int v13 = v19;
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v17);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v20);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
    int v5 = (void *)v20[0];
    uint64_t v6 = v20[1];
    uint64_t v7 = v20[2];
    uint64_t v8 = v20[3];
    uint64_t v9 = v20[4];
    uint64_t v10 = v20[5];
    uint64_t v11 = v20[6];
    uint64_t v12 = v20[7];
    int v13 = v21;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
  }
  float v14 = 0.0;
  if (v13 != 255)
  {
    if (v13 == 2) {
      unsigned __int8 v15 = 2;
    }
    else {
      unsigned __int8 v15 = v13;
    }
    if (v13 == 2) {
      float v14 = *(float *)&v5;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v9, v10, v11, v12, v15);
  }
  return v14;
}

uint64_t PhysicallyBasedMaterial.emissiveColor.getter()
{
  return PhysicallyBasedMaterial.baseColor.getter((uint64_t (*)(void *, void, void))PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:));
}

uint64_t PhysicallyBasedMaterial.baseColor.getter(uint64_t (*a1)(void *, void, void))
{
  v4[3] = &type metadata for PhysicallyBasedMaterial;
  void v4[4] = &protocol witness table for PhysicallyBasedMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

void PhysicallyBasedMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

void PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

void PhysicallyBasedMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 88) & 1) == 0)
  {
    if (*(void *)(v1 + 80) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 80);
    }
  }
  *a1 = v2;
}

void PhysicallyBasedMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 136) == 1;
}

void specialized Material.getTextureParameter(key:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  specialized String.withCString<A>(_:)(a1, a2, v9, (uint64_t)v21);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)v21[0];
  uint64_t v10 = v21[1];
  uint64_t v12 = v21[2];
  uint64_t v13 = v21[3];
  uint64_t v15 = v21[4];
  uint64_t v14 = v21[5];
  uint64_t v16 = v21[6];
  uint64_t v17 = v21[7];
  int v18 = v22;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)v20);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v20);
    uint64_t v11 = (void *)v23[0];
    uint64_t v10 = v23[1];
    uint64_t v12 = v23[2];
    uint64_t v13 = v23[3];
    int v18 = v28;
    if (v28 == 255) {
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v20);
    uint64_t v24 = v15;
    uint64_t v25 = v14;
    uint64_t v26 = v16;
    uint64_t v27 = v17;
  }
  if (v18 == 1)
  {
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 24) = v13;
    return;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v10, v12, v13, v24, v25, v26, v27, v18);
LABEL_7:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned char v20[40];
  void v21[8];
  unsigned __int8 v22;
  void v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  uint64_t v4 = v3;
  uint64_t v7 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  specialized String.withCString<A>(_:)(a1, a2, v9, (uint64_t)v21);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)v21[0];
  uint64_t v10 = v21[1];
  uint64_t v12 = v21[2];
  uint64_t v13 = v21[3];
  uint64_t v15 = v21[4];
  uint64_t v14 = v21[5];
  uint64_t v16 = v21[6];
  uint64_t v17 = v21[7];
  int v18 = v22;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)v20);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v20);
    uint64_t v11 = (void *)v23[0];
    uint64_t v10 = v23[1];
    uint64_t v12 = v23[2];
    uint64_t v13 = v23[3];
    int v18 = v28;
    if (v28 == 255) {
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v20);
    uint64_t v24 = v15;
    uint64_t v25 = v14;
    uint64_t v26 = v16;
    uint64_t v27 = v17;
  }
  if (v18 == 1)
  {
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 24) = v13;
    return;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v10, v12, v13, v24, v25, v26, v27, v18);
LABEL_7:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
}

unint64_t specialized Material.getFloatParameter(key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  specialized String.withCString<A>(_:)(a1, a2, v8, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v9 = (void *)v22[0];
  uint64_t v10 = v22[1];
  uint64_t v11 = v22[2];
  uint64_t v12 = v22[3];
  uint64_t v13 = v22[4];
  uint64_t v14 = v22[5];
  uint64_t v15 = v22[6];
  uint64_t v16 = v22[7];
  int v17 = v23;
  outlined init with copy of PhysicallyBasedMaterial(v3, (uint64_t)v21);
  if (v17 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v24);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    id v9 = v24;
    int v17 = v32;
    if (v32 == 255)
    {
LABEL_7:
      uint64_t v19 = 0;
      unsigned __int8 v18 = 1;
      return v19 | ((unint64_t)v18 << 32);
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    uint64_t v27 = v12;
    uint64_t v28 = v13;
    uint64_t v29 = v14;
    uint64_t v30 = v15;
    uint64_t v31 = v16;
  }
  if (v17 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v9, v25, v26, v27, v28, v29, v30, v31, v17);
    goto LABEL_7;
  }
  unsigned __int8 v18 = 0;
  uint64_t v19 = v9;
  return v19 | ((unint64_t)v18 << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned char v21[40];
  void v22[8];
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v3 + 72);
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  specialized String.withCString<A>(_:)(a1, a2, v8, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v9 = (void *)v22[0];
  uint64_t v10 = v22[1];
  uint64_t v11 = v22[2];
  uint64_t v12 = v22[3];
  uint64_t v13 = v22[4];
  uint64_t v14 = v22[5];
  uint64_t v15 = v22[6];
  uint64_t v16 = v22[7];
  int v17 = v23;
  outlined init with copy of UnlitMaterial(v3, (uint64_t)v21);
  if (v17 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v24);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v21);
    id v9 = v24;
    int v17 = v32;
    if (v32 == 255)
    {
LABEL_7:
      uint64_t v19 = 0;
      unsigned __int8 v18 = 1;
      return v19 | ((unint64_t)v18 << 32);
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v21);
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    uint64_t v27 = v12;
    uint64_t v28 = v13;
    uint64_t v29 = v14;
    uint64_t v30 = v15;
    uint64_t v31 = v16;
  }
  if (v17 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v9, v25, v26, v27, v28, v29, v30, v31, v17);
    goto LABEL_7;
  }
  unsigned __int8 v18 = 0;
  uint64_t v19 = v9;
  return v19 | ((unint64_t)v18 << 32);
}

uint64_t PhysicallyBasedMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
    __int16 v11 = FeatureFlags;
    if ((FeatureFlags & 0x1000) != 0) {
      char v12 = 1;
    }
    else {
      char v12 = 2;
    }
    if ((FeatureFlags & 0x1000) != 0) {
      char v13 = 1;
    }
    else {
      char v13 = ~(2 * FeatureFlags) & 2;
    }
    if ((FeatureFlags & 0x2000) != 0) {
      char v14 = 1;
    }
    else {
      char v14 = 2;
    }
    type metadata accessor for PhysicallyBasedMaterial.Program();
    uint64_t v15 = swift_allocObject();
    *(unsigned char *)(v15 + 16) = v13;
    *(void *)(v15 + 24) = v9;
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v4;
    *(unsigned char *)(a3 + 16) = v5;
    *(void *)(a3 + 24) = v6;
    *(void *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(unsigned char *)(a3 + 88) = 1;
    *(void *)(a3 + 96) = 0;
    *(_WORD *)(a3 + 104) = v11;
    *(void *)(a3 + 112) = 0;
    *(unsigned char *)(a3 + 120) = 1;
    *(unsigned char *)(a3 + 121) = v12;
    *(unsigned char *)(a3 + 122) = v14;
    *(void *)(a3 + 128) = v15;
    *(void *)(a3 + 136) = 0;
    *(_WORD *)(a3 + 144) = 257;
    return swift_retain();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized MaterialWithBlendingInternal.blendingInternal.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v58);
  uint64_t v4 = v59;
  uint64_t v5 = v60;
  outlined init with take of PhysicallyBasedMaterial.Blending(v3, (uint64_t)&v61);
  if (v63 == 1)
  {
    outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
    if (RELinkedOnOrAfterFall2024OSVersions()) {
      specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v66);
    uint64_t v6 = v67;
    if (v67)
    {
      uint64_t v7 = v68;
      uint64_t v8 = v66;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v8, v67);
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
    outlined consume of MaterialParameters.Texture?(v8, v6);
    if (v6 && v7)
    {
      outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
      id v17 = v8;
      swift_retain();
      int v18 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
      if (v18 == 1)
      {
        Swift::UInt16 v19 = *(_WORD *)(v2 + 104);
        Swift::UInt v20 = *(void *)(v2 + 112);
        int v21 = *(unsigned __int8 *)(v2 + 120);
        int v22 = *(unsigned __int8 *)(v2 + 121);
        char v23 = *(unsigned char *)(v2 + 122);
        LOWORD(v54) = v19;
        *(void *)&long long v55 = v20;
        BYTE8(v55) = v21;
        *(_WORD *)((char *)&v55 + 9) = v22;
        LOWORD(v66) = v19;
        uint64_t v67 = v20;
        LOBYTE(v68) = v21;
        BYTE1(v68) = v22;
        BYTE2(v68) = v23;
        if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v66, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v19, v20, v21 | (v22 << 8)); {
      }
        }
      outlined consume of MaterialParameters.Texture?(v8, v6);
    }
    __int16 v24 = *(_WORD *)(v2 + 104);
    Swift::UInt v25 = *(void *)(v2 + 112);
    int v26 = *(unsigned __int8 *)(v2 + 120);
    int v27 = *(unsigned __int8 *)(v2 + 121);
    int v28 = *(unsigned __int8 *)(v2 + 122);
    Swift::UInt16 v29 = v24 & 0xFFFE;
    LOWORD(v54) = v24 & 0xFFFE;
    *(void *)&long long v55 = v25;
    BYTE8(v55) = v26;
    BYTE9(v55) = v27;
    BYTE10(v55) = v28;
    LOWORD(v66) = v24;
    uint64_t v67 = v25;
    LOBYTE(v68) = v26;
    BYTE1(v68) = v27;
    BYTE2(v68) = v28;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v66, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v29, v25, (v27 << 8) | (v28 << 16) | v26); {
    outlined consume of MaterialParameters.Texture?(v8, v6);
    }
  }
  else
  {
    float v9 = v61;
    *(float *)&uint64_t v66 = v61;
    uint64_t v67 = v62;
    uint64_t v68 = v63;
    uint64_t v69 = v64;
    int v70 = v65;
    if (v63 && v64)
    {
      uint64_t v48 = v3;
      uint64_t v10 = *(void *)(v2 + 112);
      char v11 = *(unsigned char *)(v2 + 120);
      char v12 = *(unsigned char *)(v2 + 121);
      char v13 = *(unsigned char *)(v2 + 122);
      LOWORD(v54) = *(_WORD *)(v2 + 104);
      *(void *)&long long v55 = v10;
      BYTE8(v55) = v11;
      BYTE9(v55) = v12;
      BYTE10(v55) = 1;
      LOWORD(v50) = v54;
      *(void *)&long long v51 = v10;
      BYTE8(v51) = v11;
      BYTE9(v51) = v12;
      BYTE10(v51) = v13;
      specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54);
      outlined copy of MaterialParameters.Texture?(v4, v5);
      uint64_t v3 = v48;
    }
    else
    {
      outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
      outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(void, void, void, void, void))outlined copy of PhysicallyBasedMaterial.Blending);
      if (RELinkedOnOrAfterFall2024OSVersions()) {
        specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      }
      specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v50);
      uint64_t v14 = v51;
      if ((void)v51)
      {
        uint64_t v15 = *((void *)&v51 + 1);
        id v16 = v50;
      }
      else
      {
        id v16 = 0;
        uint64_t v15 = 0;
      }
      outlined copy of MaterialParameters.Texture?(v16, v51);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
      outlined consume of MaterialParameters.Texture?(v16, v14);
      if (v14)
      {
        if (v15)
        {
          outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)&v54);
          id v30 = v16;
          swift_retain();
          int v31 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
          outlined destroy of PhysicallyBasedMaterial((uint64_t)&v54);
          if (v31 == 1)
          {
            uint64_t v49 = v3;
            Swift::UInt16 v32 = *(_WORD *)(v2 + 104);
            Swift::UInt v33 = *(void *)(v2 + 112);
            int v34 = *(unsigned __int8 *)(v2 + 120);
            int v35 = *(unsigned __int8 *)(v2 + 121);
            char v36 = *(unsigned char *)(v2 + 122);
            LOWORD(v54) = v32;
            *(void *)&long long v55 = v33;
            BYTE8(v55) = v34;
            *(_WORD *)((char *)&v55 + 9) = v35;
            LOWORD(v50) = v32;
            *(void *)&long long v51 = v33;
            BYTE8(v51) = v34;
            BYTE9(v51) = v35;
            BYTE10(v51) = v36;
            if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v32, v33, v34 | (v35 << 8)); {
            uint64_t v3 = v49;
            }
          }
          outlined consume of MaterialParameters.Texture?(v16, v14);
          uint64_t v37 = v16;
          uint64_t v38 = v14;
        }
        else
        {
          uint64_t v37 = v16;
          uint64_t v38 = v14;
        }
        outlined consume of MaterialParameters.Texture?(v37, v38);
      }
    }
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v66);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      uint64_t v56 = &type metadata for PhysicallyBasedMaterial;
      uint64_t v57 = &protocol witness table for PhysicallyBasedMaterial;
      uint64_t v54 = swift_allocObject();
      outlined init with copy of PhysicallyBasedMaterial(v2, v54 + 16);
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v54, 0, 0, (uint64_t)&v50);
      uint64_t v39 = (CGColor *)v50;
      outlined consume of MaterialParameters.Texture?((void *)v51, *((uint64_t *)&v51 + 1));
      CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(v39, v9);

      if (CopyWithAlpha)
      {
        uint64_t v56 = &type metadata for PhysicallyBasedMaterial;
        uint64_t v57 = &protocol witness table for PhysicallyBasedMaterial;
        uint64_t v54 = swift_allocObject();
        outlined init with copy of PhysicallyBasedMaterial(v2, v54 + 16);
        char v41 = CopyWithAlpha;
        PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v54, 0, 0, (uint64_t)&v50);

        uint64_t v54 = (uint64_t)v41;
        long long v55 = v51;
        uint64_t v56 = v52;
        LODWORD(v57) = v53;
        PhysicallyBasedMaterial.baseColor.setter((uint64_t)&v54);
      }
    }
    __int16 v42 = *(_WORD *)(v2 + 104);
    Swift::UInt v43 = *(void *)(v2 + 112);
    int v44 = *(unsigned __int8 *)(v2 + 120);
    int v45 = *(unsigned __int8 *)(v2 + 121);
    int v46 = *(unsigned __int8 *)(v2 + 122);
    Swift::UInt16 v47 = v42 | 1;
    LOWORD(v54) = v42 | 1;
    *(void *)&long long v55 = v43;
    BYTE8(v55) = v44;
    BYTE9(v55) = v45;
    BYTE10(v55) = v46;
    LOWORD(v50) = v42;
    *(void *)&long long v51 = v43;
    BYTE8(v51) = v44;
    BYTE9(v51) = v45;
    BYTE10(v51) = v46;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v50, (unsigned __int16 *)&v54) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v47, v43, (v45 << 8) | (v46 << 16) | v44); {
    outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(void, void, void, void, void))outlined consume of PhysicallyBasedMaterial.Blending);
    }
    outlined retain of PhysicallyBasedMaterial.Blending(v3, (void (*)(void, void, void, void, void))outlined consume of PhysicallyBasedMaterial.Blending);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  int v17;
  id v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CGColor *v25;
  CGColorRef CopyWithAlpha;
  CGColor *v27;
  id v28;
  long long v29;
  ValueMetadata *v30;
  int v31;
  uint64_t v32;
  long long v33;
  ValueMetadata *v34;
  _UNKNOWN **v35;
  unsigned char v36[8];
  void *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  uint64_t v2 = v1;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v36);
  uint64_t v5 = v37;
  uint64_t v4 = v38;
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)&v39);
  if (v41 == 1)
  {
    outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
    if (RELinkedOnOrAfterFall2024OSVersions()) {
      specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v44);
    uint64_t v6 = v45;
    if (v45)
    {
      uint64_t v7 = v46;
      uint64_t v8 = v44;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v8, v45);
    outlined destroy of UnlitMaterial((uint64_t)&v32);
    outlined consume of MaterialParameters.Texture?(v8, v6);
    if (v6 && v7)
    {
      outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
      uint64_t v15 = v8;
      swift_retain();
      id v16 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
      outlined destroy of UnlitMaterial((uint64_t)&v32);
      if (v16 == 1)
      {
        id v17 = *(unsigned __int8 *)(v2 + 155);
        if (v17 == 2 || (v17 & 1) != 0) {
          specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
        }
      }
      outlined consume of MaterialParameters.Texture?(v8, v6);
    }
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_WORD *)(v2 + 152) & 0xFFFE | (*(unsigned __int8 *)(v2 + 154) << 16) | (*(unsigned __int8 *)(v2 + 155) << 24));
    outlined consume of MaterialParameters.Texture?(v8, v6);
  }
  else
  {
    float v9 = v39;
    *(float *)&int v44 = v39;
    int v45 = v40;
    int v46 = v41;
    Swift::UInt16 v47 = v42;
    uint64_t v48 = v43;
    if (v41 && v42)
    {
      if (*(unsigned char *)(v1 + 155))
      {
        outlined copy of MaterialParameters.Texture?(v5, v4);
      }
      else
      {
        uint64_t v10 = *(unsigned __int8 *)(v1 + 154);
        char v11 = *(unsigned __int16 *)(v1 + 152);
        outlined copy of MaterialParameters.Texture?(v5, v4);
        specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v11 | (v10 << 16) | 0x1000000);
      }
    }
    else
    {
      outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
      outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(void, void, void, void, void))outlined copy of PhysicallyBasedMaterial.Blending);
      if (RELinkedOnOrAfterFall2024OSVersions()) {
        specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      }
      specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v28);
      char v12 = v29;
      if ((void)v29)
      {
        char v13 = *((void *)&v29 + 1);
        uint64_t v14 = v28;
      }
      else
      {
        uint64_t v14 = 0;
        char v13 = 0;
      }
      outlined copy of MaterialParameters.Texture?(v14, v29);
      outlined destroy of UnlitMaterial((uint64_t)&v32);
      outlined consume of MaterialParameters.Texture?(v14, v12);
      if (v12)
      {
        if (v13)
        {
          outlined init with copy of UnlitMaterial(v1, (uint64_t)&v32);
          int v18 = v14;
          swift_retain();
          Swift::UInt16 v19 = REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
          outlined destroy of UnlitMaterial((uint64_t)&v32);
          if (v19 == 1)
          {
            Swift::UInt v20 = *(unsigned __int8 *)(v2 + 155);
            if (v20 == 2 || (v20 & 1) != 0) {
              specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
            }
          }
          outlined consume of MaterialParameters.Texture?(v14, v12);
          int v21 = v14;
          int v22 = v12;
        }
        else
        {
          int v21 = v14;
          int v22 = v12;
        }
        outlined consume of MaterialParameters.Texture?(v21, v22);
      }
    }
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v44);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      int v34 = &type metadata for UnlitMaterial;
      int v35 = &protocol witness table for UnlitMaterial;
      Swift::UInt16 v32 = swift_allocObject();
      outlined init with copy of UnlitMaterial(v2, v32 + 16);
      char v23 = *(void *)(v2 + 80);
      __int16 v24 = *(void **)(v2 + 88);
      swift_bridgeObjectRetain();
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v32, v23, v24, (uint64_t)&v28);
      Swift::UInt v25 = (CGColor *)v28;
      outlined consume of MaterialParameters.Texture?((void *)v29, *((uint64_t *)&v29 + 1));
      CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(v25, v9);

      if (CopyWithAlpha)
      {
        int v34 = &type metadata for UnlitMaterial;
        int v35 = &protocol witness table for UnlitMaterial;
        Swift::UInt16 v32 = swift_allocObject();
        outlined init with copy of UnlitMaterial(v2, v32 + 16);
        swift_bridgeObjectRetain();
        int v27 = CopyWithAlpha;
        PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v32, v23, v24, (uint64_t)&v28);

        Swift::UInt16 v32 = (uint64_t)v27;
        Swift::UInt v33 = v29;
        int v34 = v30;
        LODWORD(v35) = v31;
        UnlitMaterial.color.setter((uint64_t)&v32);
      }
    }
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(v2 + 152) | 1);
    outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(void, void, void, void, void))outlined consume of PhysicallyBasedMaterial.Blending);
    outlined retain of PhysicallyBasedMaterial.Blending(a1, (void (*)(void, void, void, void, void))outlined consume of PhysicallyBasedMaterial.Blending);
  }
}

uint64_t specialized ShaderCache.getResource(_:)(unsigned int a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(v5 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
    swift_retain();
  }
  else
  {
    uint64_t v10 = 0;
  }
  os_unfair_lock_unlock(v6);
  swift_release();
  if (v10) {
    return v10;
  }
  uint64_t v45 = v2;
  BOOL v11 = (a1 & 1) == 0;
  BOOL v12 = BYTE2(a1) == 2;
  BOOL v13 = !v11 || !v12;
  if (v11 && v12) {
    unint64_t v14 = 0xD000000000000021;
  }
  else {
    unint64_t v14 = 0xD00000000000002CLL;
  }
  unint64_t v15 = 0x8000000228351280;
  if (!v13) {
    unint64_t v15 = 0x8000000228351250;
  }
  if ((a1 & 2) != 0) {
    uint64_t v16 = 0xD00000000000002CLL;
  }
  else {
    uint64_t v16 = v14;
  }
  if ((a1 & 2) != 0) {
    uint64_t v17 = 0x800000022834E010;
  }
  else {
    uint64_t v17 = v15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_22830EC60;
  *(void *)(v18 + 32) = 0x6C6E55686374614DLL;
  *(void *)(v18 + 40) = 0xEF726F6C6F437469;
  *(void *)(v18 + 48) = ((unsigned __int16)a1 >> 2) & 1;
  *(void *)(v18 + 56) = 0;
  *(unsigned char *)(v18 + 64) = 0;
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  outlined init with copy of __REAssetService(v3 + 16, (uint64_t)&v35);
  uint64_t v20 = v37;
  uint64_t v21 = v38;
  __swift_project_boxed_opaque_existential_1(&v35, v37);
  uint64_t v22 = __REAssetService.asset(_:)(v16, v17, v20, v21);
  swift_bridgeObjectRelease();
  if (v22)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v23 = MEMORY[0x263F8EE78];
    unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    swift_bridgeObjectRetain();
    unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    uint64_t v27 = type metadata accessor for __MaterialResource();
    *(void *)&long long v35 = v22;
    *((void *)&v35 + 1) = v19;
    uint64_t v36 = 0;
    LOBYTE(v37) = 1;
    *(_WORD *)((char *)&v37 + 1) = 0;
    BYTE3(v37) = HIBYTE(a1);
    BYTE4(v37) = BYTE2(a1);
    unint64_t v38 = v24;
    unint64_t v39 = v25;
    unint64_t v40 = v26;
    uint64_t v41 = v23;
    uint64_t v10 = v27;
    uint64_t v28 = v45;
    static __MaterialResource.createMaterial(_:)(&v35, v42);
    if (v28)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v10;
    }
    uint64_t v45 = 0;
    uint64_t v29 = v43;
    uint64_t v30 = v44;
    __swift_project_boxed_opaque_existential_1(v42, v43);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 32) = v31;
    *(void *)(inited + 56) = v27;
    *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
    swift_retain();
    uint64_t v33 = v45;
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v33)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      swift_retain();
      uint64_t v10 = specialized SharedCacheStorage.addResource(value:forKey:)(v31, a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  unsigned int v8 = a3 >> 8;
  unsigned int v9 = HIWORD(a3);
  Swift::UInt16 v54 = a1;
  Swift::UInt v55 = a2;
  __int16 v56 = a3 & 0xFF01;
  unsigned __int8 v57 = BYTE2(a3);
  uint64_t v10 = *(void *)(v3 + 56);
  BOOL v11 = (os_unfair_lock_s *)(*(void *)(v10 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 16);
  if (*(void *)(v12 + 16)
    && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 0xFFFF01), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
  }
  else
  {
    uint64_t v15 = 0;
  }
  os_unfair_lock_unlock(v11);
  swift_release();
  if (v15) {
    return v15;
  }
  BOOL v16 = (a1 & 1) == 0;
  BOOL v17 = BYTE1(a3) == 2;
  BOOL v18 = !v16 || !v17;
  if (v16 && v17) {
    unint64_t v19 = 0xD00000000000001FLL;
  }
  else {
    unint64_t v19 = 0xD00000000000002ALL;
  }
  unint64_t v20 = 0x80000002283512D0;
  if (!v18) {
    unint64_t v20 = 0x80000002283512B0;
  }
  if ((a1 & 2) != 0) {
    uint64_t v21 = 0xD00000000000002ALL;
  }
  else {
    uint64_t v21 = v19;
  }
  if ((a1 & 2) != 0) {
    uint64_t v22 = 0x800000022834DFE0;
  }
  else {
    uint64_t v22 = v20;
  }
  unint64_t v23 = PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v43 + 16, (uint64_t)&v44);
  uint64_t v24 = v46;
  uint64_t v25 = v47;
  __swift_project_boxed_opaque_existential_1(&v44, v46);
  uint64_t v26 = __REAssetService.asset(_:)(v21, v22, v24, v25);
  swift_bridgeObjectRelease();
  if (v26)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = MEMORY[0x263F8EE78];
    unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    uint64_t v31 = type metadata accessor for __MaterialResource();
    *(void *)&long long v44 = v26;
    *((void *)&v44 + 1) = v23;
    uint64_t v45 = 0;
    LOBYTE(v46) = 1;
    *(_WORD *)((char *)&v46 + 1) = 0;
    BYTE3(v46) = v9;
    BYTE4(v46) = v8;
    unint64_t v47 = v28;
    unint64_t v48 = v29;
    unint64_t v49 = v30;
    uint64_t v50 = v27;
    uint64_t v15 = v31;
    static __MaterialResource.createMaterial(_:)(&v44, v51);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v32 = v52;
      uint64_t v33 = v53;
      __swift_project_boxed_opaque_existential_1(v51, v52);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      *(void *)(inited + 32) = v34;
      *(void *)(inited + 56) = v31;
      *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
      uint64_t v42 = v34;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      Swift::UInt v36 = v55;
      unsigned int v37 = v56;
      int v38 = HIBYTE(v56);
      int v39 = v57;
      __int16 v40 = v54;
      swift_retain();
      uint64_t v15 = specialized SharedCacheStorage.addResource(value:forKey:)(v42, v40, v36, (v38 << 8) | (v39 << 16) | v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
    return v15;
  }
  __break(1u);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(uint64_t a1)
{
  outlined init with copy of CustomMaterial(v1, (uint64_t)v25);
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 184);
  uint64_t v5 = *(void *)(v1 + 192);
  uint64_t v6 = *(void *)(v1 + 200);
  uint64_t v7 = *(void *)(v1 + 208);
  unsigned int v8 = *(void **)(v1 + 216);
  uint64_t v9 = *(void *)(v1 + 224);
  uint64_t v22 = *(void *)(v1 + 240);
  uint64_t v23 = *(void *)(v1 + 232);
  uint64_t v20 = *(void *)(v1 + 256);
  uint64_t v21 = *(void *)(v1 + 248);
  unint64_t v19 = *(void **)(v1 + 264);
  outlined retain of CustomMaterial.CustomShaderParameters(a1);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v3, v4, v5, v6, v7, v8);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v23, v22, v21, v20, v19);
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 216) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 232) = v10;
  *(_OWORD *)(v1 + 248) = *(_OWORD *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 152) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 168) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(a1 + 32);
  *(void *)(v1 + 264) = *(void *)(a1 + 112);
  *(_OWORD *)(v1 + 200) = v12;
  CustomMaterial.shaderCache.getter();
  uint64_t v13 = v25[44];
  uint64_t v14 = specialized ShaderCache.getResource(_:)(a1);
  if (v13)
  {
    outlined destroy of CustomMaterial((uint64_t)v25);
    swift_release();
  }
  else
  {
    uint64_t v15 = v14;
    swift_release();
    swift_release();
    *(void *)uint64_t v1 = v15;
    uint64_t v16 = v25[0];
    swift_beginAccess();
    uint64_t v17 = *(void *)(v16 + 16);
    swift_beginAccess();
    if (v17 == *(void *)(v15 + 16))
    {
      outlined destroy of CustomMaterial((uint64_t)v25);
    }
    else
    {
      id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      uint64_t v24 = 0;
      v18;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(unsigned int a1)
{
  uint64_t v3 = v1;
  unsigned int v5 = HIWORD(a1);
  unsigned int v6 = HIBYTE(a1);
  outlined init with copy of UnlitMaterial(v3, (uint64_t)v13);
  *(_WORD *)(v3 + 152) = a1;
  *(unsigned char *)(v3 + 154) = v5;
  *(unsigned char *)(v3 + 155) = v6;
  UnlitMaterial.shaderCache.getter();
  uint64_t v7 = specialized ShaderCache.getResource(_:)(a1);
  if (v2)
  {
    outlined destroy of UnlitMaterial((uint64_t)v13);
    swift_release();
  }
  else
  {
    uint64_t v8 = v7;
    swift_release();
    swift_release();
    *(void *)(v3 + 40) = v8;
    uint64_t v9 = v14;
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    swift_beginAccess();
    if (v10 == *(void *)(v8 + 16))
    {
      outlined destroy of UnlitMaterial((uint64_t)v13);
    }
    else
    {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      uint64_t v12 = 0;
      v11;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

void specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  uint64_t v5 = v3;
  unsigned int v9 = a3 >> 8;
  unsigned int v10 = HIWORD(a3);
  outlined init with copy of PhysicallyBasedMaterial(v5, (uint64_t)&v17);
  *(_WORD *)(v5 + 104) = a1;
  *(void *)(v5 + 112) = a2;
  *(unsigned char *)(v5 + 120) = a3 & 1;
  *(unsigned char *)(v5 + 121) = v9;
  *(unsigned char *)(v5 + 122) = v10;
  PhysicallyBasedMaterial.shaderCache.getter();
  uint64_t v11 = specialized ShaderCache.getResource(_:)(a1, a2, a3 & 0xFFFF01);
  if (v4)
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v17);
    swift_release();
  }
  else
  {
    uint64_t v12 = v11;
    swift_release();
    swift_release();
    *(void *)uint64_t v5 = v12;
    uint64_t v13 = v17;
    swift_beginAccess();
    uint64_t v14 = *(void *)(v13 + 16);
    swift_beginAccess();
    if (v14 == *(void *)(v12 + 16))
    {
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v17);
    }
    else
    {
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C0]), sel_init);
      REMaterialAssetGetMaterialDefinition();
      REMaterialDefinitionAssetGetParameterKeys();
      uint64_t v16 = 0;
      v15;
      static Set._forceBridgeFromObjectiveC(_:result:)();
      __break(1u);
      __break(1u);
    }
  }
}

unint64_t PhysicallyBasedMaterial.opacityThreshold.getter()
{
  if ((*(_WORD *)(v0 + 104) & 2) == 0) {
    goto LABEL_8;
  }
  uint64_t v1 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  id v2 = v1;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v3, (uint64_t)v25);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v25[1];
  uint64_t v23 = (void *)v25[0];
  uint64_t v5 = v25[2];
  uint64_t v6 = v25[3];
  uint64_t v7 = v25[4];
  uint64_t v8 = v25[5];
  uint64_t v10 = v25[6];
  uint64_t v9 = v25[7];
  int v11 = v26;
  outlined init with copy of PhysicallyBasedMaterial(v0, (uint64_t)v24);
  if (v11 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v27);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v24);
    unint64_t v19 = (void *)v27[0];
    uint64_t v12 = v27[1];
    uint64_t v13 = v27[2];
    uint64_t v14 = v27[3];
    uint64_t v15 = v27[4];
    uint64_t v16 = v27[5];
    uint64_t v17 = v27[6];
    uint64_t v18 = v27[7];
    int v11 = v28;
    if (v28 == 255)
    {
LABEL_8:
      uint64_t v21 = 0;
      unsigned __int8 v20 = 1;
      return v21 | ((unint64_t)v20 << 32);
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v24);
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    uint64_t v16 = v8;
    uint64_t v17 = v10;
    uint64_t v18 = v9;
    unint64_t v19 = v23;
  }
  if (v11 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v19, v12, v13, v14, v15, v16, v17, v18, v11);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v19, v12, v13, v14, v15, v16, v17, v18, 2u);
  unsigned __int8 v20 = 0;
  uint64_t v21 = v19;
  return v21 | ((unint64_t)v20 << 32);
}

uint64_t PhysicallyBasedMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t PhysicallyBasedMaterial.__resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t PhysicallyBasedMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 40;
  outlined init with copy of __REAssetService?(v3, (uint64_t)&v6);
  if (v7) {
    return outlined init with take of BindableDataInternal(&v6, a1);
  }
  outlined destroy of __REAssetService?((uint64_t)&v6);
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, a1);
  outlined destroy of __REAssetService?(v3);
  return outlined init with copy of __REAssetService(a1, v3);
}

uint64_t PhysicallyBasedMaterial.PBRMaterialDefinitionMapping.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t PhysicallyBasedMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 257;
  uint64_t v2 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000015, (void *)0x800000022835CB70);
  *(void *)a1 = v2;
  uint64_t v3 = (void *)REMaterialParameterBlockValueCreate();
  *(void *)(a1 + 8) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v2;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  swift_beginAccess();
  __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 0x2000) != 0) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if ((FeatureFlags & 0x1000) != 0) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  *(_WORD *)(a1 + 104) = FeatureFlags;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  *(unsigned char *)(a1 + 121) = v7;
  *(unsigned char *)(a1 + 122) = v6;
  if ((FeatureFlags & 0x1000) != 0) {
    char v8 = 1;
  }
  else {
    char v8 = ~(2 * FeatureFlags) & 2;
  }
  type metadata accessor for PhysicallyBasedMaterial.Program();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v2;
  *(void *)(a1 + 128) = v9;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    *(void *)(a1 + 32) = REMaterialParameterBlockValueCopy();
  }
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x8000000228352350);
  uint64_t v10 = *(void **)(a1 + 32);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    *(void *)(a1 + 32) = REMaterialParameterBlockValueCopy();
  }
  return REMaterialParameterBlockValueSetFloat();
}

uint64_t PhysicallyBasedMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  PhysicallyBasedMaterial.init()(a2);
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  v3 += 40;
  outlined destroy of __REAssetService?(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t PhysicallyBasedMaterial.baseColor.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v2;
  int v27 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26 + 8, (uint64_t)v28);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v29);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  if (v30) {
    Swift::UInt16 v8 = v3 | 4;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFFFB;
  }
  LOWORD(v15[0]) = v8;
  v15[1] = v4;
  char v16 = v5;
  char v17 = v6;
  char v18 = v7;
  LOWORD(v21) = v3;
  uint64_t v22 = (void *)v4;
  LOBYTE(v23) = v5;
  BYTE1(v23) = v6;
  BYTE2(v23) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v21, (unsigned __int16 *)v15) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  unint64_t v19 = &type metadata for PhysicallyBasedMaterial;
  }
  unsigned __int8 v20 = &protocol witness table for PhysicallyBasedMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v15[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v15, 0, 0, (uint64_t)&v21);
  uint64_t v10 = v21;
  uint64_t v9 = v22;
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  int v13 = v25;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v15);
  uint64_t v21 = v9;
  uint64_t v22 = (void *)v11;
  uint64_t v23 = v12;
  LODWORD(v24) = v13;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v15, (uint64_t)&v21);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v26);

  outlined consume of MaterialParameters.Texture?(v9, v11);
  return outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v26);
}

void PhysicallyBasedMaterial.checkMultiUV(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = *(void **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    long long v35 = &type metadata for PhysicallyBasedMaterial;
    Swift::UInt v36 = &protocol witness table for PhysicallyBasedMaterial;
    uint64_t v30 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v2, v30 + 16);
    PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(&v30, (uint64_t)&v37);
    id v8 = v37;
    uint64_t v9 = v38;
    uint64_t v10 = v39;
    if (v6 && v7)
    {
      id v11 = v5;
      swift_retain();
      if (REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex() == 1)
      {
        unint64_t v29 = v5;
        Swift::UInt16 v12 = *(_WORD *)(v2 + 104);
        Swift::UInt v13 = *(void *)(v2 + 112);
        int v14 = *(unsigned __int8 *)(v2 + 120);
        int v15 = *(unsigned __int8 *)(v2 + 121);
        char v16 = *(unsigned char *)(v2 + 122);
        LOWORD(v30) = v12;
        Swift::UInt v31 = v13;
        char v32 = v14;
        char v33 = v15;
        char v34 = 0;
        LOWORD(v37) = v12;
        Swift::UInt v28 = v13;
        int v38 = (void *)v13;
        LOBYTE(v39) = v14;
        BYTE1(v39) = v15;
        BYTE2(v39) = v16;
        if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v37, (unsigned __int16 *)&v30) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v12, v28, v14 | (v15 << 8)); {

        }
        outlined consume of MaterialParameters.Texture?(v9, v10);
        char v17 = v29;
        uint64_t v18 = v6;
        goto LABEL_14;
      }

      outlined consume of MaterialParameters.Texture?(v9, v10);
      unsigned __int8 v26 = v5;
      uint64_t v27 = v6;
    }
    else
    {

      unsigned __int8 v26 = v9;
      uint64_t v27 = v10;
    }
    outlined consume of MaterialParameters.Texture?(v26, v27);
  }
  else
  {
    unint64_t v19 = *(void **)a1;
    Swift::UInt16 v20 = *(_WORD *)(v2 + 104);
    Swift::UInt v21 = *(void *)(v2 + 112);
    int v22 = *(unsigned __int8 *)(v2 + 120);
    int v23 = *(unsigned __int8 *)(v2 + 121);
    char v24 = *(unsigned char *)(v2 + 122);
    LOWORD(v30) = v20;
    Swift::UInt v31 = v21;
    char v32 = v22;
    char v33 = v23;
    char v34 = 1;
    LOWORD(v37) = v20;
    int v38 = (void *)v21;
    LOBYTE(v39) = v22;
    BYTE1(v39) = v23;
    BYTE2(v39) = v24;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v37, (unsigned __int16 *)&v30) & 1) == 0)
    {
      id v25 = v19;
      swift_retain();
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v20, v21, v22 | (v23 << 8) | 0x10000);
      char v17 = v19;
      uint64_t v18 = v3;
LABEL_14:
      outlined consume of MaterialParameters.Texture?(v17, v18);
    }
  }
}

void (*PhysicallyBasedMaterial.baseColor.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, 0, 0, (uint64_t)v3);
  return PhysicallyBasedMaterial.baseColor.modify;
}

void PhysicallyBasedMaterial.baseColor.modify(void ***a1, char a2)
{
}

uint64_t PhysicallyBasedMaterial.metallic.setter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)v1;
  long long v3 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v3;
  int v25 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v24 + 8, (uint64_t)v26);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)v27);
  __int16 v4 = *(_WORD *)(v1 + 104);
  Swift::UInt v5 = *(void *)(v1 + 112);
  int v6 = v2[120];
  int v7 = v2[121];
  int v8 = v2[122];
  if (v28) {
    Swift::UInt16 v9 = v4 | 0x40;
  }
  else {
    Swift::UInt16 v9 = v4 & 0xFFBF;
  }
  Swift::UInt16 v19 = v9;
  Swift::UInt v20 = v5;
  char v21 = v6;
  char v22 = v7;
  char v23 = v8;
  LOWORD(v15) = v4;
  uint64_t v16 = v5;
  LOBYTE(v17) = v6;
  BYTE1(v17) = v7;
  BYTE2(v17) = v8;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v15, &v19) & 1) == 0) {
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v9, v5, (v7 << 8) | (v8 << 16) | v6);
  }
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v2, (uint64_t)&v19);
  specialized Material.getFloatParameter(key:)(0x63696C6C6174656DLL, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x4D65727574786574, 0xEF63696C6C617465, (uint64_t)&v15);
  uint64_t v10 = v16;
  if (v16)
  {
    int v11 = v18;
    uint64_t v12 = v17;
    Swift::UInt v13 = v15;
  }
  else
  {
    Swift::UInt v13 = 0;
    uint64_t v12 = 0;
    int v11 = 0;
  }
  outlined copy of MaterialParameters.Texture?(v13, v16);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v19);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)&v19);
  int v15 = v13;
  uint64_t v16 = v10;
  uint64_t v17 = v12;
  int v18 = v11;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v19, (uint64_t)&v15);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v24);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v24);
}

void (*PhysicallyBasedMaterial.metallic.modify(float **a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = v1;
  __int16 v4 = (float *)malloc(0xC8uLL);
  *a1 = v4;
  *((void *)v4 + 24) = v2;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  unint64_t v5 = specialized Material.getFloatParameter(key:)(0x63696C6C6174656DLL, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x4D65727574786574, 0xEF63696C6C617465, (uint64_t)&v12);
  uint64_t v6 = v13;
  if (v13)
  {
    int v7 = v15;
    uint64_t v8 = v14;
    Swift::UInt16 v9 = v12;
  }
  else
  {
    Swift::UInt16 v9 = 0;
    uint64_t v8 = 0;
    int v7 = 0;
  }
  float v10 = *(float *)&v5;
  if ((v5 & 0x100000000) != 0) {
    float v10 = 1.0;
  }
  v4[38] = v10;
  *((void *)v4 + 20) = v9;
  *((void *)v4 + 21) = v6;
  *((void *)v4 + 22) = v8;
  *((_DWORD *)v4 + 46) = v7;
  outlined copy of MaterialParameters.Texture?(v9, v6);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
  outlined consume of MaterialParameters.Texture?(v9, v6);
  return PhysicallyBasedMaterial.metallic.modify;
}

void PhysicallyBasedMaterial.metallic.modify(uint64_t *a1, char a2)
{
}

uint64_t key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(int *))
{
  int v7 = (void *)*((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  int v9 = a1[8];
  int v11 = *a1;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  uint64_t v14 = v8;
  int v15 = v9;
  outlined copy of MaterialParameters.Texture?(v7, v6);
  return a5(&v11);
}

uint64_t PhysicallyBasedMaterial.roughness.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  int v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29) {
    Swift::UInt16 v8 = v3 | 0x20;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFFDF;
  }
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  LOWORD(v20) = v3;
  char v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  int v18 = &type metadata for PhysicallyBasedMaterial;
  }
  Swift::UInt16 v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  int v9 = v21;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  int v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  Swift::UInt v20 = v9;
  char v21 = (void *)v10;
  uint64_t v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.roughness.modify(void *a1))(int **a1, char a2)
{
  __int16 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.roughness.modify;
}

void PhysicallyBasedMaterial.roughness.modify(int **a1, char a2)
{
}

double key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *, void, void)@<X3>, uint64_t a3@<X8>)
{
  v9[3] = &type metadata for PhysicallyBasedMaterial;
  void v9[4] = &protocol witness table for PhysicallyBasedMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(a1, v9[0] + 16);
  a2(&v10, v9, 0, 0);
  uint64_t v6 = v12;
  int v7 = v13;
  *(void *)a3 = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a3 + 8) = v11;
  *(void *)(a3 + 24) = v6;
  *(_DWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = *(void **)(a1 + 16);
  Swift::UInt16 v8 = *(void **)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 32);
  v12[0] = *(id *)a1;
  v12[1] = v6;
  v12[2] = v7;
  v12[3] = v8;
  int v13 = v9;
  id v10 = v12[0];
  outlined copy of MaterialParameters.Texture?(v6, (uint64_t)v7);
  return a5(v12);
}

uint64_t PhysicallyBasedMaterial.emissiveColor.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v2;
  int v27 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26 + 8, (uint64_t)v28);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v29);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  if (v30) {
    Swift::UInt16 v8 = v3 | 0x10;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFFEF;
  }
  LOWORD(v15[0]) = v8;
  v15[1] = v4;
  char v16 = v5;
  char v17 = v6;
  char v18 = v7;
  LOWORD(v21) = v3;
  uint64_t v22 = (void *)v4;
  LOBYTE(v23) = v5;
  BYTE1(v23) = v6;
  BYTE2(v23) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v21, (unsigned __int16 *)v15) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  Swift::UInt16 v19 = &type metadata for PhysicallyBasedMaterial;
  }
  Swift::UInt v20 = &protocol witness table for PhysicallyBasedMaterial;
  v15[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v15[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v15, (uint64_t)&v21);
  id v10 = v21;
  int v9 = v22;
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  int v13 = v25;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v28, (uint64_t)v15);
  char v21 = v9;
  uint64_t v22 = (void *)v11;
  uint64_t v23 = v12;
  LODWORD(v24) = v13;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v15, (uint64_t)&v21);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v26);

  outlined consume of MaterialParameters.Texture?(v9, v11);
  return outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v26);
}

void (*PhysicallyBasedMaterial.emissiveColor.modify(void *a1))(void ***a1, char a2)
{
  __int16 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.emissiveColor.modify;
}

void PhysicallyBasedMaterial.emissiveColor.modify(void ***a1, char a2)
{
}

void PhysicallyBasedMaterial.baseColor.modify(void ***a1, char a2, void (*a3)(void *))
{
  Swift::UInt v4 = *a1;
  int v5 = **a1;
  int v6 = (*a1)[1];
  uint64_t v8 = (uint64_t)(*a1)[2];
  int v7 = (*a1)[3];
  int v9 = *((_DWORD *)*a1 + 8);
  v13[0] = v5;
  v13[1] = v6;
  _OWORD v13[2] = v8;
  v13[3] = v7;
  int v14 = v9;
  if (a2)
  {
    id v10 = v5;
    outlined copy of MaterialParameters.Texture?(v6, v8);
    a3(v13);
    uint64_t v11 = v4[1];
    uint64_t v12 = (uint64_t)v4[2];

    outlined consume of MaterialParameters.Texture?(v11, v12);
  }
  else
  {
    a3(v13);
  }

  free(v4);
}

void key path getter for PhysicallyBasedMaterial.emissiveIntensity : PhysicallyBasedMaterial(_DWORD *a1@<X8>)
{
  specialized Material.subscript.getter(0x6576697373696D65, 0xED0000656C616353, (uint64_t)v4);
  unsigned __int8 v2 = v5;
  if (v5 == 255)
  {
    int v3 = 0;
  }
  else
  {
    if (v5 == 2)
    {
      unsigned __int8 v2 = 2;
      int v3 = (int)v4[0];
    }
    else
    {
      int v3 = 0;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v4[0], (uint64_t)v4[1], (uint64_t)v4[2], (uint64_t)v4[3], (uint64_t)v4[4], (uint64_t)v4[5], (uint64_t)v4[6], (uint64_t)v4[7], v2);
  }
  *a1 = v3;
}

uint64_t key path setter for PhysicallyBasedMaterial.emissiveIntensity : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v3 = REMaterialParameterBlockValueCopy();
    Swift::UInt v4 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = v3;
  }

  return REMaterialParameterBlockValueSetFloat();
}

uint64_t PhysicallyBasedMaterial.emissiveIntensity.setter()
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v1 = REMaterialParameterBlockValueCopy();
    unsigned __int8 v2 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = v1;
  }

  return REMaterialParameterBlockValueSetFloat();
}

void (*PhysicallyBasedMaterial.emissiveIntensity.modify(void *a1))(void **a1)
{
  uint64_t v2 = v1;
  Swift::UInt v4 = (char *)malloc(0xA0uLL);
  *a1 = v4;
  *((void *)v4 + 19) = v1;
  unsigned __int8 v5 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v7, (uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v8 = v28[1];
  int v27 = (void *)v28[0];
  uint64_t v9 = v28[2];
  uint64_t v10 = v28[3];
  uint64_t v11 = v28[4];
  uint64_t v12 = v28[5];
  uint64_t v13 = v28[6];
  uint64_t v14 = v28[7];
  int v15 = v29;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  if (v15 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v30);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
    uint64_t v23 = (void *)v30[0];
    uint64_t v16 = v30[1];
    uint64_t v17 = v30[2];
    uint64_t v18 = v30[3];
    uint64_t v19 = v30[4];
    uint64_t v20 = v30[5];
    uint64_t v21 = v30[6];
    uint64_t v22 = v30[7];
    int v15 = v31;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v19 = v11;
    uint64_t v20 = v12;
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    uint64_t v23 = v27;
  }
  uint64_t v24 = v4 + 148;
  if (v15 == 255)
  {
    int v25 = 0;
  }
  else
  {
    if (v15 == 2) {
      int v25 = (int)v23;
    }
    else {
      int v25 = 0;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v23, v16, v17, v18, v19, v20, v21, v22, v15);
  }
  *uint64_t v24 = v25;
  return PhysicallyBasedMaterial.emissiveIntensity.modify;
}

void PhysicallyBasedMaterial.emissiveIntensity.modify(void **a1)
{
  uint64_t v1 = *a1;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v2 = v1[19];
    uint64_t v3 = REMaterialParameterBlockValueCopy();
    Swift::UInt v4 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = v3;
  }
  REMaterialParameterBlockValueSetFloat();

  free(v1);
}

uint64_t PhysicallyBasedMaterial.specular.setter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)v1;
  long long v3 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v3;
  int v25 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v24 + 8, (uint64_t)v26);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)v27);
  __int16 v4 = *(_WORD *)(v1 + 104);
  Swift::UInt v5 = *(void *)(v1 + 112);
  int v6 = v2[120];
  int v7 = v2[121];
  int v8 = v2[122];
  if (v28) {
    Swift::UInt16 v9 = v4 | 0x100;
  }
  else {
    Swift::UInt16 v9 = v4 & 0xFEFF;
  }
  Swift::UInt16 v19 = v9;
  Swift::UInt v20 = v5;
  char v21 = v6;
  char v22 = v7;
  char v23 = v8;
  LOWORD(v15) = v4;
  uint64_t v16 = v5;
  LOBYTE(v17) = v6;
  BYTE1(v17) = v7;
  BYTE2(v17) = v8;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v15, &v19) & 1) == 0) {
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v9, v5, (v7 << 8) | (v8 << 16) | v6);
  }
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v2, (uint64_t)&v19);
  specialized Material.getFloatParameter(key:)(0x72616C7563657073, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x5365727574786574, 0xEF72616C75636570, (uint64_t)&v15);
  uint64_t v10 = v16;
  if (v16)
  {
    int v11 = v18;
    uint64_t v12 = v17;
    uint64_t v13 = v15;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    int v11 = 0;
  }
  outlined copy of MaterialParameters.Texture?(v13, v16);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v19);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v26, (uint64_t)&v19);
  int v15 = v13;
  uint64_t v16 = v10;
  uint64_t v17 = v12;
  int v18 = v11;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v19, (uint64_t)&v15);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v24);
  outlined consume of MaterialParameters.Texture?(v13, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v24);
}

void (*PhysicallyBasedMaterial.specular.modify(float **a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = v1;
  __int16 v4 = (float *)malloc(0xC8uLL);
  *a1 = v4;
  *((void *)v4 + 24) = v2;
  outlined init with copy of PhysicallyBasedMaterial(v2, (uint64_t)v4);
  unint64_t v5 = specialized Material.getFloatParameter(key:)(0x72616C7563657073, 0xED0000656C616353);
  specialized Material.getTextureParameter(key:)(0x5365727574786574, 0xEF72616C75636570, (uint64_t)&v12);
  uint64_t v6 = v13;
  if (v13)
  {
    int v7 = v15;
    uint64_t v8 = v14;
    Swift::UInt16 v9 = v12;
  }
  else
  {
    Swift::UInt16 v9 = 0;
    uint64_t v8 = 0;
    int v7 = 0;
  }
  float v10 = *(float *)&v5;
  if ((v5 & 0x100000000) != 0) {
    float v10 = 1.0;
  }
  v4[38] = v10;
  *((void *)v4 + 20) = v9;
  *((void *)v4 + 21) = v6;
  *((void *)v4 + 22) = v8;
  *((_DWORD *)v4 + 46) = v7;
  outlined copy of MaterialParameters.Texture?(v9, v6);
  outlined destroy of PhysicallyBasedMaterial((uint64_t)v4);
  outlined consume of MaterialParameters.Texture?(v9, v6);
  return PhysicallyBasedMaterial.specular.modify;
}

void PhysicallyBasedMaterial.specular.modify(uint64_t *a1, char a2)
{
}

void PhysicallyBasedMaterial.metallic.modify(uint64_t *a1, char a2, void (*a3)(int *))
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 152);
  int v7 = *(void **)(*a1 + 160);
  uint64_t v8 = *(void *)(v5 + 168);
  uint64_t v9 = *(void *)(v5 + 176);
  int v10 = *(_DWORD *)(v5 + 184);
  int v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  int v15 = v10;
  if (a2)
  {
    outlined copy of MaterialParameters.Texture?(v7, v8);
    a3(&v11);
    outlined consume of MaterialParameters.Texture?(*(void **)(v5 + 160), *(void *)(v5 + 168));
  }
  else
  {
    a3(&v11);
  }

  free((void *)v5);
}

uint64_t PhysicallyBasedMaterial.clearcoat.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  int v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29 || *(float *)v25 != 0.0) {
    Swift::UInt16 v8 = v3 | 0x200;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFDFF;
  }
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  LOWORD(v20) = v3;
  char v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  int v18 = &type metadata for PhysicallyBasedMaterial;
  }
  Swift::UInt16 v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  uint64_t v9 = v21;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  int v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  Swift::UInt v20 = v9;
  char v21 = (void *)v10;
  uint64_t v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.clearcoat.modify(void *a1))(int **a1, char a2)
{
  __int16 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.clearcoat.modify;
}

void PhysicallyBasedMaterial.clearcoat.modify(int **a1, char a2)
{
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterial.clearcoatRoughness.setter(a1, (void (*)(void *__return_ptr, void *, void, void))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), (void (*)(_OWORD *))specialized Material.setParameter<A>(_:alternateTintKey:), (uint64_t (*)(_OWORD *))outlined release of PhysicallyBasedMaterial.ClearcoatRoughness);
}

void (*PhysicallyBasedMaterial.clearcoatRoughness.modify(void *a1))(char **a1, char a2)
{
  __int16 v3 = malloc(0xE0uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 5);
  v3[27] = v1;
  v6[3] = &type metadata for PhysicallyBasedMaterial;
  v6[4] = &protocol witness table for PhysicallyBasedMaterial;
  v6[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v6[0] + 16);
  PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v6, v4);
  return PhysicallyBasedMaterial.clearcoatRoughness.modify;
}

void PhysicallyBasedMaterial.clearcoatRoughness.modify(char **a1, char a2)
{
  PhysicallyBasedMaterial.clearcoatRoughness.modify(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, void, void))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), (void (*)(char *))specialized Material.setParameter<A>(_:alternateTintKey:), (void (*)(char *))outlined release of PhysicallyBasedMaterial.ClearcoatRoughness, (void (*)(char *))outlined retain of PhysicallyBasedMaterial.ClearcoatRoughness);
}

void PhysicallyBasedMaterial.opacityThreshold.setter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
  {
    unsigned __int16 v10 = *(_WORD *)(v1 + 104);
    Swift::UInt v11 = *(void *)(v1 + 112);
    int v12 = *(unsigned __int8 *)(v1 + 120);
    int v13 = *(unsigned __int8 *)(v1 + 121);
    int v14 = *(unsigned __int8 *)(v1 + 122);
    Swift::UInt16 v15 = v10 & 0xFFFD;
    unsigned __int16 v21 = v10 & 0xFFFD;
    Swift::UInt v22 = v11;
    char v23 = v12;
    char v24 = v13;
    char v25 = v14;
    unsigned __int16 v16 = v10;
    Swift::UInt v17 = v11;
    char v18 = v12;
    char v19 = v13;
    char v20 = v14;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(&v16, &v21) & 1) == 0) {
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v15, v11, (v13 << 8) | (v14 << 16) | v12);
    }
  }
  else
  {
    unsigned __int16 v2 = *(_WORD *)(v1 + 104);
    Swift::UInt v3 = *(void *)(v1 + 112);
    int v4 = *(unsigned __int8 *)(v1 + 120);
    int v5 = *(unsigned __int8 *)(v1 + 121);
    int v6 = *(unsigned __int8 *)(v1 + 122);
    Swift::UInt16 v7 = v2 | 2;
    unsigned __int16 v21 = v2 | 2;
    Swift::UInt v22 = v3;
    char v23 = v4;
    char v24 = v5;
    char v25 = v6;
    unsigned __int16 v16 = v2;
    Swift::UInt v17 = v3;
    char v18 = v4;
    char v19 = v5;
    char v20 = v6;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(&v16, &v21) & 1) == 0) {
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4);
    }
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v8 = REMaterialParameterBlockValueCopy();
      uint64_t v9 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v8;
    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void (*PhysicallyBasedMaterial.opacityThreshold.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  unint64_t v3 = PhysicallyBasedMaterial.opacityThreshold.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = BYTE4(v3) & 1;
  return PhysicallyBasedMaterial.opacityThreshold.modify;
}

void PhysicallyBasedMaterial.opacityThreshold.modify(uint64_t a1)
{
}

unsigned __int8 *PhysicallyBasedMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 80) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 88) = v3;
  return result;
}

uint64_t *(*PhysicallyBasedMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 88) & 1) == 0)
  {
    if (*(void *)(v1 + 80) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 80);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return PhysicallyBasedMaterial.faceCulling.modify;
}

uint64_t *PhysicallyBasedMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 80) = v5;
  *(unsigned char *)(v1 + 88) = v4;
  return result;
}

uint64_t PhysicallyBasedMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t PhysicallyBasedMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicallyBasedMaterial.blending.setter(uint64_t a1)
{
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

void (*PhysicallyBasedMaterial.blending.modify(void *a1))(uint64_t *a1, char a2)
{
  BOOL v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  PhysicallyBasedMaterial.blending.getter((uint64_t)(v3 + 10));
  return PhysicallyBasedMaterial.blending.modify;
}

void PhysicallyBasedMaterial.blending.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 80;
  if (a2)
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2);
    outlined retain of PhysicallyBasedMaterial.Blending(v2, (void (*)(void, void, void, void, void))outlined copy of PhysicallyBasedMaterial.Blending);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2);
    outlined consume of PhysicallyBasedMaterial.Blending(*(void *)(v2 + 80), *(void **)(v2 + 88), *(void *)(v2 + 96));
  }
  else
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2 + 40);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2 + 40);
  }

  free((void *)v2);
}

void PhysicallyBasedMaterial.normal.setter(uint64_t a1)
{
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  char v32 = *(void **)a1;
  if (v31) {
    Swift::UInt16 v8 = v3 | 8;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFFF7;
  }
  LOWORD(v45) = v8;
  Swift::UInt v46 = v4;
  LOBYTE(v47) = v5;
  BYTE1(v47) = v6;
  BYTE2(v47) = v7;
  LOWORD(v33) = v3;
  Swift::UInt v34 = v4;
  LOBYTE(v35) = v5;
  BYTE1(v35) = v6;
  BYTE2(v35) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v33, (unsigned __int16 *)&v45) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)&v45);
  }
  uint64_t v9 = (void *)v49;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  swift_bridgeObjectRetain_n();
  id v11 = v10;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v11, (uint64_t)v37);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v12 = (void *)v37[0];
  uint64_t v13 = v37[1];
  uint64_t v14 = v37[2];
  uint64_t v15 = v37[3];
  uint64_t v16 = v37[4];
  uint64_t v17 = v37[5];
  uint64_t v19 = v37[6];
  uint64_t v18 = v37[7];
  int v20 = v38;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v45, (uint64_t)&v33);
  if (v20 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v39);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v33);
    int v12 = (void *)v39[0];
    uint64_t v13 = v39[1];
    uint64_t v14 = v39[2];
    uint64_t v15 = v39[3];
    int v20 = v44;
    if (v44 == 255) {
      goto LABEL_12;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v33);
    uint64_t v40 = v16;
    uint64_t v41 = v17;
    uint64_t v42 = v19;
    uint64_t v43 = v18;
  }
  if (v20 == 1)
  {
    unsigned __int16 v21 = v12;
    uint64_t v22 = v13;
    uint64_t v23 = v14;
    int v24 = v15;
    goto LABEL_13;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v12, v13, v14, v15, v40, v41, v42, v43, v20);
LABEL_12:
  unsigned __int16 v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
LABEL_13:
  uint64_t v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v45);
  uint64_t v45 = v32;
  Swift::UInt v46 = v31;
  uint64_t v47 = v30;
  LODWORD(v48) = v2;
  char v33 = v21;
  Swift::UInt v34 = v22;
  uint64_t v35 = v23;
  int v36 = v24;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v45, (uint64_t)&v33);
  if (v31) {
    char v25 = v32;
  }
  else {
    char v25 = 0;
  }
  if (v31) {
    uint64_t v26 = v30;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v31) {
    uint64_t v27 = v2;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v31) {
    unsigned __int8 v28 = 1;
  }
  else {
    unsigned __int8 v28 = -1;
  }
  uint64_t v45 = v25;
  Swift::UInt v46 = v31;
  uint64_t v47 = v26;
  uint64_t v48 = v27;
  long long v49 = 0u;
  long long v50 = 0u;
  unsigned __int8 v51 = v28;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v25, v31, v26, v27, 0, 0, 0, 0, v28);
  specialized Material.subscript.setter((uint64_t)&v45, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v25, v31, v26, v27, 0, 0, 0, 0, v28);
  outlined consume of MaterialParameters.Texture?(v29, v22);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.normal.modify(void *a1))(void ***a1, char a2)
{
  __int16 v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.normal.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.normal.modify;
}

void PhysicallyBasedMaterial.normal.modify(void ***a1, char a2)
{
}

void PhysicallyBasedMaterial.ambientOcclusion.setter(uint64_t a1)
{
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 8);
  __int16 v2 = *(_WORD *)(v1 + 104);
  Swift::UInt v3 = *(void *)(v1 + 112);
  int v4 = *(unsigned __int8 *)(v1 + 120);
  int v5 = *(unsigned __int8 *)(v1 + 121);
  int v6 = *(unsigned __int8 *)(v1 + 122);
  char v32 = *(void **)a1;
  if (v31) {
    Swift::UInt16 v7 = v2 | 0x80;
  }
  else {
    Swift::UInt16 v7 = v2 & 0xFF7F;
  }
  LOWORD(v47) = v7;
  Swift::UInt v48 = v3;
  LOBYTE(v49) = v4;
  BYTE1(v49) = v5;
  BYTE2(v49) = v6;
  LOWORD(v35) = v2;
  Swift::UInt v36 = v3;
  LOBYTE(v37) = v4;
  BYTE1(v37) = v5;
  BYTE2(v37) = v6;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v47) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4); {
  outlined init with copy of PhysicallyBasedMaterial(v34, (uint64_t)&v47);
  }
  Swift::UInt16 v8 = (void *)v51;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x80000002283523B0, v10, (uint64_t)v39);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v11 = (void *)v39[0];
  uint64_t v12 = v39[1];
  uint64_t v13 = v39[2];
  uint64_t v14 = v39[3];
  uint64_t v15 = v39[4];
  uint64_t v16 = v39[5];
  uint64_t v18 = v39[6];
  uint64_t v17 = v39[7];
  int v19 = v40;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v47, (uint64_t)&v35);
  if (v19 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v41);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    id v11 = (void *)v41[0];
    uint64_t v12 = v41[1];
    uint64_t v13 = v41[2];
    uint64_t v20 = v41[3];
    int v19 = v46;
    if (v46 == 255) {
      goto LABEL_13;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    uint64_t v42 = v15;
    uint64_t v43 = v16;
    uint64_t v44 = v18;
    uint64_t v45 = v17;
    uint64_t v20 = v14;
  }
  if (v19 == 1)
  {
    unsigned __int16 v21 = v11;
    uint64_t v22 = v12;
    uint64_t v23 = v13;
    goto LABEL_14;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v12, v13, v20, v42, v43, v44, v45, v19);
LABEL_13:
  unsigned __int16 v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  LODWORD(v20) = 0;
LABEL_14:
  uint64_t v28 = v22;
  uint64_t v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v47);
  uint64_t v47 = v32;
  Swift::UInt v48 = v31;
  uint64_t v49 = v30;
  LODWORD(v50) = v33;
  uint64_t v35 = v21;
  Swift::UInt v36 = v22;
  uint64_t v37 = v23;
  int v38 = v20;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v47, (uint64_t)&v35);
  if (v31) {
    int v24 = v32;
  }
  else {
    int v24 = 0;
  }
  if (v31) {
    uint64_t v25 = v30;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v31) {
    uint64_t v26 = v33;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v31) {
    unsigned __int8 v27 = 1;
  }
  else {
    unsigned __int8 v27 = -1;
  }
  uint64_t v47 = v24;
  Swift::UInt v48 = v31;
  uint64_t v49 = v25;
  uint64_t v50 = v26;
  long long v51 = 0u;
  long long v52 = 0u;
  unsigned __int8 v53 = v27;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  specialized Material.subscript.setter((uint64_t)&v47, 0xD000000000000017, 0x80000002283523B0);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  outlined consume of MaterialParameters.Texture?(v29, v28);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.ambientOcclusion.modify(void *a1))(void ***a1, char a2)
{
  Swift::UInt v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.ambientOcclusion.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.ambientOcclusion.modify;
}

void PhysicallyBasedMaterial.ambientOcclusion.modify(void ***a1, char a2)
{
}

uint64_t PhysicallyBasedMaterial.anisotropyLevel.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v2;
  int v26 = *(_DWORD *)(a1 + 32);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v25 + 8, (uint64_t)v27);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v28);
  __int16 v3 = *(_WORD *)(v1 + 104);
  Swift::UInt v4 = *(void *)(v1 + 112);
  int v5 = *(unsigned __int8 *)(v1 + 120);
  int v6 = *(unsigned __int8 *)(v1 + 121);
  int v7 = *(unsigned __int8 *)(v1 + 122);
  if (v29 || *(float *)v25 != 0.0) {
    Swift::UInt16 v8 = v3 | 0x400;
  }
  else {
    Swift::UInt16 v8 = v3 & 0xFBFF;
  }
  LOWORD(v14[0]) = v8;
  v14[1] = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  LOWORD(v20) = v3;
  unsigned __int16 v21 = (void *)v4;
  LOBYTE(v22) = v5;
  BYTE1(v22) = v6;
  BYTE2(v22) = v7;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v20, (unsigned __int16 *)v14) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v8, v4, (v6 << 8) | (v7 << 16) | v5); {
  uint64_t v18 = &type metadata for PhysicallyBasedMaterial;
  }
  int v19 = &protocol witness table for PhysicallyBasedMaterial;
  v14[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v14[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v14, (uint64_t)&v20);
  id v9 = v21;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  int v12 = v24;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v27, (uint64_t)v14);
  uint64_t v20 = v9;
  unsigned __int16 v21 = (void *)v10;
  uint64_t v22 = v11;
  LODWORD(v23) = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)&v20);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v25);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return outlined release of PhysicallyBasedMaterial.AnisotropyAngle((uint64_t)v25);
}

void (*PhysicallyBasedMaterial.anisotropyLevel.modify(void *a1))(int **a1, char a2)
{
  __int16 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v5[3] = &type metadata for PhysicallyBasedMaterial;
  v5[4] = &protocol witness table for PhysicallyBasedMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v5[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v5, (uint64_t)v3);
  return PhysicallyBasedMaterial.anisotropyLevel.modify;
}

void PhysicallyBasedMaterial.anisotropyLevel.modify(int **a1, char a2)
{
}

void PhysicallyBasedMaterial.roughness.modify(int **a1, char a2, void (*a3)(int *))
{
  int v5 = *a1;
  int v6 = **a1;
  int v7 = (void *)*((void *)*a1 + 1);
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v9 = *((void *)v5 + 3);
  int v10 = v5[8];
  int v11 = v6;
  int v12 = v7;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  int v15 = v10;
  if (a2)
  {
    outlined copy of MaterialParameters.Texture?(v7, v8);
    a3(&v11);
    outlined consume of MaterialParameters.Texture?(*((void **)v5 + 1), *((void *)v5 + 2));
  }
  else
  {
    a3(&v11);
  }

  free(v5);
}

double key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *, void, void)@<X3>, uint64_t a3@<X8>)
{
  v9[3] = &type metadata for PhysicallyBasedMaterial;
  void v9[4] = &protocol witness table for PhysicallyBasedMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(a1, v9[0] + 16);
  a2(&v10, v9, 0, 0);
  uint64_t v6 = v12;
  int v7 = v13;
  *(_DWORD *)a3 = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a3 + 8) = v11;
  *(void *)(a3 + 24) = v6;
  *(_DWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t PhysicallyBasedMaterial.anisotropyAngle.setter(uint64_t a1)
{
  return PhysicallyBasedMaterial.clearcoatRoughness.setter(a1, (void (*)(void *__return_ptr, void *, void, void))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), (void (*)(_OWORD *))specialized Material.setParameter<A>(_:alternateTintKey:), (uint64_t (*)(_OWORD *))outlined release of PhysicallyBasedMaterial.AnisotropyAngle);
}

uint64_t PhysicallyBasedMaterial.clearcoatRoughness.setter(uint64_t a1, void (*a2)(void *__return_ptr, void *, void, void), void (*a3)(_OWORD *), uint64_t (*a4)(_OWORD *))
{
  long long v8 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v8;
  int v20 = *(_DWORD *)(a1 + 32);
  _OWORD v16[3] = &type metadata for PhysicallyBasedMaterial;
  _OWORD v16[4] = &protocol witness table for PhysicallyBasedMaterial;
  v16[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v4, v16[0] + 16);
  a2(v17, v16, 0, 0);
  uint64_t v9 = (void *)v17[1];
  uint64_t v10 = v17[2];
  uint64_t v11 = v17[3];
  int v12 = v18;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v19 + 8, (uint64_t)v16);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v16, (uint64_t)v17);
  v14[0] = v9;
  v14[1] = v10;
  void v14[2] = v11;
  int v15 = v12;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)v17, (uint64_t)v14);
  a3(v19);
  outlined consume of MaterialParameters.Texture?(v9, v10);
  return a4(v19);
}

void (*PhysicallyBasedMaterial.anisotropyAngle.modify(void *a1))(char **a1, char a2)
{
  __int16 v3 = malloc(0xE0uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 5);
  v3[27] = v1;
  v6[3] = &type metadata for PhysicallyBasedMaterial;
  v6[4] = &protocol witness table for PhysicallyBasedMaterial;
  v6[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v1, v6[0] + 16);
  PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(v6, v4);
  return PhysicallyBasedMaterial.anisotropyAngle.modify;
}

void PhysicallyBasedMaterial.anisotropyAngle.modify(char **a1, char a2)
{
  PhysicallyBasedMaterial.clearcoatRoughness.modify(a1, a2, (void (*)(uint64_t *__return_ptr, uint64_t *, void, void))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), (void (*)(char *))specialized Material.setParameter<A>(_:alternateTintKey:), (void (*)(char *))outlined release of PhysicallyBasedMaterial.AnisotropyAngle, (void (*)(char *))outlined retain of PhysicallyBasedMaterial.AnisotropyAngle);
}

void PhysicallyBasedMaterial.clearcoatRoughness.modify(char **a1, char a2, void (*a3)(uint64_t *__return_ptr, uint64_t *, void, void), void (*a4)(char *), void (*a5)(char *), void (*a6)(char *))
{
  uint64_t v9 = *a1;
  uint64_t v10 = (uint64_t)(*a1 + 40);
  uint64_t v11 = (uint64_t)(*a1 + 184);
  uint64_t v12 = *((void *)*a1 + 27);
  if (a2)
  {
    long long v14 = *(_OWORD *)(*a1 + 56);
    *((_OWORD *)v9 + 5) = *(_OWORD *)v10;
    *((_OWORD *)v9 + 6) = v14;
    *((_DWORD *)v9 + 28) = *(_DWORD *)(v10 + 32);
    uint64_t v33 = &type metadata for PhysicallyBasedMaterial;
    uint64_t v34 = &protocol witness table for PhysicallyBasedMaterial;
    uint64_t v30 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v12, v30 + 16);
    a6(v9 + 80);
    a3(&v25, &v30, 0, 0);
    int v15 = v26;
    uint64_t v16 = v27;
    uint64_t v17 = v28;
    int v24 = a5;
    int v18 = v29;
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 88), (uint64_t)(v9 + 152));
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 152), v11);
    uint64_t v30 = (uint64_t)v15;
    uint64_t v31 = v16;
    uint64_t v32 = v17;
    LODWORD(v33) = v18;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)(v11, (uint64_t)&v30);
    a4(v9 + 80);
    outlined consume of MaterialParameters.Texture?(v15, v16);
    v24(v9 + 80);
    outlined consume of MaterialParameters.Texture?(*((void **)v9 + 6), *((void *)v9 + 7));
  }
  else
  {
    long long v19 = *(_OWORD *)(*a1 + 56);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v19;
    *((_DWORD *)v9 + 8) = *(_DWORD *)(v10 + 32);
    uint64_t v33 = &type metadata for PhysicallyBasedMaterial;
    uint64_t v34 = &protocol witness table for PhysicallyBasedMaterial;
    uint64_t v30 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v12, v30 + 16);
    a3(&v25, &v30, 0, 0);
    int v20 = v26;
    uint64_t v21 = v27;
    uint64_t v22 = v28;
    int v23 = v29;
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 8), (uint64_t)(v9 + 120));
    outlined init with take of MaterialParameters.Texture?((uint64_t)(v9 + 120), v11);
    uint64_t v30 = (uint64_t)v20;
    uint64_t v31 = v21;
    uint64_t v32 = v22;
    LODWORD(v33) = v23;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)(v11, (uint64_t)&v30);
    a4(v9);
    outlined consume of MaterialParameters.Texture?(v20, v21);
    a5(v9);
  }

  free(v9);
}

void key path setter for PhysicallyBasedMaterial.sheen : PhysicallyBasedMaterial(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  long long v2 = *(void **)(a1 + 16);
  __int16 v3 = *(void **)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  v5[0] = *(void **)a1;
  v5[1] = v1;
  long long v5[2] = v2;
  v5[3] = v3;
  int v6 = v4;
  outlined copy of PhysicallyBasedMaterial.SheenColor?(v5[0], v1, (uint64_t)v2);
  PhysicallyBasedMaterial.sheen.setter((uint64_t)v5);
}

void PhysicallyBasedMaterial.sheen.setter(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = *(_DWORD *)(a1 + 32);
    uint64_t v30 = *(void **)a1;
    uint64_t v31 = *(void **)(a1 + 8);
    uint64_t v42 = *(void **)a1;
    uint64_t v43 = v31;
    uint64_t v5 = v2;
    uint64_t v44 = v2;
    uint64_t v45 = v3;
    uint64_t v6 = v3;
    int v7 = v4;
    int v46 = v4;
    __int16 v8 = *(_WORD *)(v1 + 104);
    Swift::UInt v9 = *(void *)(v1 + 112);
    int v10 = *(unsigned __int8 *)(v1 + 120);
    int v11 = *(unsigned __int8 *)(v1 + 121);
    int v12 = *(unsigned __int8 *)(v1 + 122);
    Swift::UInt16 v13 = v8 | 0x800;
    LOWORD(v37) = v8 | 0x800;
    Swift::UInt v38 = v9;
    LOBYTE(v39) = v10;
    BYTE1(v39) = v11;
    BYTE2(v39) = v12;
    LOWORD(v32) = v8;
    uint64_t v33 = (void *)v9;
    LOBYTE(v34) = v10;
    BYTE1(v34) = v11;
    BYTE2(v34) = v12;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v32, (unsigned __int16 *)&v37) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v13, v9, (v11 << 8) | (v12 << 16) | v10); {
    unsigned __int8 v40 = &type metadata for PhysicallyBasedMaterial;
    }
    uint64_t v41 = &protocol witness table for PhysicallyBasedMaterial;
    uint64_t v37 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v37 + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(&v37, (uint64_t)&v32);
    int v15 = v32;
    long long v14 = v33;
    uint64_t v16 = v34;
    uint64_t v37 = (uint64_t)v31;
    Swift::UInt v38 = v5;
    uint64_t v39 = v6;
    LODWORD(v40) = v7;
    uint64_t v32 = v33;
    uint64_t v33 = (void *)v34;
    uint64_t v34 = v35;
    LODWORD(v35) = v36;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v37, (uint64_t)&v32);
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)&v42);

    outlined consume of MaterialParameters.Texture?(v14, v16);
    outlined consume of PhysicallyBasedMaterial.SheenColor?(v30, v31, v5);
  }
  else
  {
    __int16 v17 = *(_WORD *)(v1 + 104);
    Swift::UInt v18 = *(void *)(v1 + 112);
    int v19 = *(unsigned __int8 *)(v1 + 120);
    int v20 = *(unsigned __int8 *)(v1 + 121);
    int v21 = *(unsigned __int8 *)(v1 + 122);
    Swift::UInt16 v22 = v17 & 0xF7FF;
    LOWORD(v37) = v17 & 0xF7FF;
    Swift::UInt v38 = v18;
    LOBYTE(v39) = v19;
    BYTE1(v39) = v20;
    BYTE2(v39) = v21;
    LOWORD(v42) = v17;
    uint64_t v43 = (void *)v18;
    LOBYTE(v44) = v19;
    BYTE1(v44) = v20;
    BYTE2(v44) = v21;
    if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v42, (unsigned __int16 *)&v37) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v22, v18, (v20 << 8) | (v21 << 16) | v19); {
    unsigned __int8 v40 = &type metadata for PhysicallyBasedMaterial;
    }
    uint64_t v41 = &protocol witness table for PhysicallyBasedMaterial;
    uint64_t v37 = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v37 + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(&v37, (uint64_t)&v42);
    int v24 = v42;
    int v23 = v43;
    uint64_t v25 = v44;
    uint64_t v37 = 0;
    Swift::UInt v38 = 0;
    LODWORD(v40) = 0;
    uint64_t v39 = 0;
    uint64_t v42 = v43;
    uint64_t v43 = (void *)v44;
    uint64_t v44 = v45;
    LODWORD(v45) = v46;
    PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v37, (uint64_t)&v42);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v26 = REMaterialParameterBlockValueCopy();
      uint64_t v27 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v26;
    }
    specialized String.withCString<A>(_:)(0xD000000000000011, 0x8000000228352ED0);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v28 = REMaterialParameterBlockValueCopy();
      int v29 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v28;
    }
    specialized String.withCString<A>(_:)(0x6C6F436E65656873, 0xEA0000000000726FLL);

    outlined consume of MaterialParameters.Texture?(v23, v25);
  }
}

void (*PhysicallyBasedMaterial.sheen.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 5) = v1;
  if ((*(unsigned char *)(v1 + 105) & 8) != 0)
  {
    v9[3] = &type metadata for PhysicallyBasedMaterial;
    void v9[4] = &protocol witness table for PhysicallyBasedMaterial;
    v9[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v1, v9[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v9, (uint64_t)&v10);
    uint64_t v4 = v10;
    long long v7 = v11;
    uint64_t v5 = v12;
    int v6 = v13;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    long long v7 = 0uLL;
  }
  *(void *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 8) = v7;
  *((void *)v3 + 3) = v5;
  *((_DWORD *)v3 + 8) = v6;
  return PhysicallyBasedMaterial.sheen.modify;
}

void PhysicallyBasedMaterial.sheen.modify(void ***a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = (uint64_t)v3[2];
  long long v7 = v3[3];
  int v8 = *((_DWORD *)v3 + 8);
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v6;
  v9[3] = v7;
  int v10 = v8;
  if (a2)
  {
    outlined copy of PhysicallyBasedMaterial.SheenColor?(v4, v5, v6);
    PhysicallyBasedMaterial.sheen.setter((uint64_t)v9);
    outlined consume of PhysicallyBasedMaterial.SheenColor?(*v3, v3[1], (uint64_t)v3[2]);
  }
  else
  {
    PhysicallyBasedMaterial.sheen.setter((uint64_t)v9);
  }

  free(v3);
}

uint64_t PhysicallyBasedMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*PhysicallyBasedMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return CustomMaterial.textureCoordinateTransform.modify;
}

uint64_t PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t (*PhysicallyBasedMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return CustomMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t PhysicallyBasedMaterial.shaderCache.getter()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1) {
      swift_once();
    }
    swift_retain();
    PhysicallyBasedMaterial.assetService.getter((uint64_t)v4);
    uint64_t v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(void *)(v2 + 96) = v1;
  }
  swift_retain();
  return v1;
}

void PhysicallyBasedMaterial.PBRShaderParameters.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 17);
  int v4 = *(unsigned __int8 *)(v0 + 18);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2) {
      goto LABEL_4;
    }
LABEL_7:
    Swift::UInt8 v5 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2) {
    goto LABEL_7;
  }
LABEL_4:
  Swift::UInt8 v5 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v5);
}

unint64_t PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter()
{
  unint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_228344520;
  *(void *)(v2 + 32) = 0xD000000000000012;
  *(void *)(v2 + 40) = 0x800000022835CCD0;
  *(void *)(v2 + 48) = (v1 >> 2) & 1;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 0;
  *(void *)(v2 + 80) = 0x6F4E656C62616E45;
  *(void *)(v2 + 88) = 0xEF70614D6C616D72;
  *(void *)(v2 + 96) = (v1 >> 3) & 1;
  *(void *)(v2 + 104) = 0;
  *(unsigned char *)(v2 + 112) = 0;
  *(void *)(v2 + 128) = 0xD000000000000011;
  *(void *)(v2 + 136) = 0x800000022835CCF0;
  *(void *)(v2 + 144) = (v1 >> 4) & 1;
  *(void *)(v2 + 152) = 0;
  *(unsigned char *)(v2 + 160) = 0;
  *(void *)(v2 + 176) = 0xD000000000000012;
  *(void *)(v2 + 184) = 0x800000022835CD10;
  *(void *)(v2 + 192) = (v1 >> 5) & 1;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = 0;
  *(void *)(v2 + 224) = 0xD000000000000011;
  *(void *)(v2 + 232) = 0x800000022835CD30;
  *(void *)(v2 + 240) = (v1 >> 6) & 1;
  *(void *)(v2 + 248) = 0;
  *(unsigned char *)(v2 + 256) = 0;
  *(void *)(v2 + 272) = 0x4F41656C62616E45;
  *(void *)(v2 + 280) = 0xEB0000000070614DLL;
  *(void *)(v2 + 288) = (v1 >> 7) & 1;
  *(void *)(v2 + 296) = 0;
  *(unsigned char *)(v2 + 304) = 0;
  *(void *)(v2 + 320) = 0xD000000000000011;
  *(void *)(v2 + 328) = 0x800000022835CD50;
  *(void *)(v2 + 336) = (v1 >> 8) & 1;
  *(void *)(v2 + 344) = 0;
  *(unsigned char *)(v2 + 352) = 0;
  *(void *)(v2 + 368) = 0x6C43656C62616E45;
  *(void *)(v2 + 376) = 0xEF74616F63726165;
  *(void *)(v2 + 384) = (v1 >> 9) & 1;
  *(void *)(v2 + 392) = 0;
  *(unsigned char *)(v2 + 400) = 0;
  *(void *)(v2 + 416) = 0xD000000000000010;
  *(void *)(v2 + 424) = 0x800000022835CD70;
  *(void *)(v2 + 432) = (v1 >> 10) & 1;
  *(void *)(v2 + 440) = 0;
  *(unsigned char *)(v2 + 448) = 0;
  *(void *)(v2 + 464) = 0x6C43656C62616E45;
  *(void *)(v2 + 472) = 0xEB0000000068746FLL;
  *(void *)(v2 + 480) = (v1 >> 11) & 1;
  *(void *)(v2 + 488) = 0;
  *(unsigned char *)(v2 + 496) = 0;
  *(void *)(v2 + 512) = 0xD000000000000018;
  *(void *)(v2 + 520) = 0x800000022835CD90;
  *(void *)(v2 + 528) = (v1 >> 14) & 1;
  *(void *)(v2 + 536) = 0;
  *(unsigned char *)(v2 + 544) = 0;

  return specialized Dictionary.init(dictionaryLiteral:)(v2);
}

Swift::Int PhysicallyBasedMaterial.PBRShaderParameters.hashValue.getter()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 17);
  int v4 = *(unsigned __int8 *)(v0 + 18);
  Swift::UInt16 v5 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2) {
      goto LABEL_4;
    }
LABEL_7:
    Swift::UInt8 v6 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2) {
    goto LABEL_7;
  }
LABEL_4:
  Swift::UInt8 v6 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.PBRShaderParameters()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 17);
  int v4 = *(unsigned __int8 *)(v0 + 18);
  Swift::UInt16 v5 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4 != 2) {
      goto LABEL_4;
    }
LABEL_7:
    Swift::UInt8 v6 = 0;
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v3 == 2) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3 & 1);
  if (v4 == 2) {
    goto LABEL_7;
  }
LABEL_4:
  Swift::UInt8 v6 = v4 & 1;
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t PhysicallyBasedMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *PhysicallyBasedMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 136) = *result;
  return result;
}

unsigned __int8 *(*PhysicallyBasedMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 136) == 1;
  return PhysicallyBasedMaterial.triangleFillMode.modify;
}

unsigned __int8 *PhysicallyBasedMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 136) = result[8];
  return result;
}

uint64_t (*PhysicallyBasedMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicallyBasedMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance PhysicallyBasedMaterial()
{
  return *(void *)(v0 + 136);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance PhysicallyBasedMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance PhysicallyBasedMaterial()
{
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 144) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance PhysicallyBasedMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance PhysicallyBasedMaterial()
{
  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance PhysicallyBasedMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 145) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance PhysicallyBasedMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicallyBasedMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t PhysicallyBasedMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 144) = result;
  return result;
}

unsigned char *(*PhysicallyBasedMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 144);
  return PhysicallyBasedMaterial.writesDepth.modify;
}

unsigned char *PhysicallyBasedMaterial.writesDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 144) = result[8];
  return result;
}

uint64_t PhysicallyBasedMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 145);
}

uint64_t PhysicallyBasedMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 145) = result;
  return result;
}

unsigned char *(*PhysicallyBasedMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 145);
  return PhysicallyBasedMaterial.readsDepth.modify;
}

unsigned char *PhysicallyBasedMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 145) = result[8];
  return result;
}

uint64_t PhysicallyBasedMaterial.program.getter()
{
  return swift_retain();
}

uint64_t PhysicallyBasedMaterial.program.setter(uint64_t a1)
{
  specialized PhysicallyBasedMaterial.program.setter(a1);

  return swift_release();
}

uint64_t (*PhysicallyBasedMaterial.program.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 128);
  a1[1] = v1;
  swift_retain();
  return PhysicallyBasedMaterial.program.modify;
}

uint64_t PhysicallyBasedMaterial.program.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized PhysicallyBasedMaterial.program.setter(v3);
    swift_release();
  }
  else
  {
    specialized PhysicallyBasedMaterial.program.setter(v2);
  }

  return swift_release();
}

uint64_t PhysicallyBasedMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *(_OWORD *)(a2 + 9) = 0u;
  *(_OWORD *)(a2 + 7) = 0u;
  *(_OWORD *)(a2 + 5) = 0u;
  uint64_t v3 = (uint64_t)(a2 + 5);
  *((unsigned char *)a2 + 88) = 1;
  a2[12] = 0;
  *((_WORD *)a2 + 52) = 0;
  a2[14] = 0;
  *((unsigned char *)a2 + 120) = 1;
  *(_WORD *)((char *)a2 + 121) = 514;
  *((_WORD *)a2 + 72) = 257;
  a2[16] = a1;
  a2[17] = 0;
  *a2 = *(void *)(a1 + 24);
  swift_retain();
  swift_retain();
  uint64_t v4 = REMaterialParameterBlockValueCreate();
  a2[1] = MEMORY[0x263F8EE78];
  *((unsigned char *)a2 + 16) = 0;
  a2[3] = 0;
  a2[4] = v4;
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v12);
  outlined destroy of __REAssetService?(v3);
  outlined init with take of BindableDataInternal(v12, v3);
  uint64_t v6 = *a2;
  swift_beginAccess();
  __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 0x1000) != 0) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  *((_WORD *)a2 + 52) = FeatureFlags;
  a2[14] = 0;
  if ((FeatureFlags & 0x2000) != 0) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  *((unsigned char *)a2 + 120) = 1;
  *((unsigned char *)a2 + 121) = v8;
  *((unsigned char *)a2 + 122) = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  return swift_release();
}

uint64_t PhysicallyBasedMaterial.clearcoatNormal.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v25);
  uint64_t v2 = v26;
  swift_bridgeObjectRetain_n();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x80000002283523D0, v4, (uint64_t)v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)v17[0];
  uint64_t v6 = v17[1];
  uint64_t v7 = v17[2];
  uint64_t v8 = v17[3];
  uint64_t v9 = v17[4];
  uint64_t v10 = v17[5];
  uint64_t v12 = v17[6];
  uint64_t v11 = v17[7];
  int v13 = v18;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)v25, (uint64_t)v16);
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v19);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v5 = (void *)v19[0];
    uint64_t v6 = v19[1];
    uint64_t v7 = v19[2];
    uint64_t v8 = v19[3];
    int v13 = v24;
    if (v24 == 255)
    {
LABEL_6:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v16);
    uint64_t v20 = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v12;
    uint64_t v23 = v11;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v6, v7, v8, v20, v21, v22, v23, v13);
    goto LABEL_6;
  }
LABEL_7:
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return outlined destroy of PhysicallyBasedMaterial((uint64_t)v25);
}

uint64_t key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void **))
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 24);
  v10[0] = *(void **)a1;
  v10[1] = v6;
  v10[2] = v7;
  int v11 = v8;
  outlined copy of MaterialParameters.Texture?(v10[0], (uint64_t)v6);
  return a5(v10);
}

void PhysicallyBasedMaterial.clearcoatNormal.setter(uint64_t a1)
{
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 8);
  __int16 v2 = *(_WORD *)(v1 + 104);
  Swift::UInt v3 = *(void *)(v1 + 112);
  int v4 = *(unsigned __int8 *)(v1 + 120);
  int v5 = *(unsigned __int8 *)(v1 + 121);
  int v6 = *(unsigned __int8 *)(v1 + 122);
  uint64_t v32 = *(void **)a1;
  if (v31) {
    Swift::UInt16 v7 = v2 | 0x4000;
  }
  else {
    Swift::UInt16 v7 = v2 & 0xBFFF;
  }
  LOWORD(v47) = v7;
  Swift::UInt v48 = v3;
  LOBYTE(v49) = v4;
  BYTE1(v49) = v5;
  BYTE2(v49) = v6;
  LOWORD(v35) = v2;
  Swift::UInt v36 = v3;
  LOBYTE(v37) = v4;
  BYTE1(v37) = v5;
  BYTE2(v37) = v6;
  if ((specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)((unsigned __int16 *)&v35, (unsigned __int16 *)&v47) & 1) == 0)specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v7, v3, (v5 << 8) | (v6 << 16) | v4); {
  outlined init with copy of PhysicallyBasedMaterial(v34, (uint64_t)&v47);
  }
  int v8 = (void *)v51;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x80000002283523D0, v10, (uint64_t)v39);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v11 = (void *)v39[0];
  uint64_t v12 = v39[1];
  uint64_t v13 = v39[2];
  uint64_t v14 = v39[3];
  uint64_t v15 = v39[4];
  uint64_t v16 = v39[5];
  uint64_t v18 = v39[6];
  uint64_t v17 = v39[7];
  int v19 = v40;
  outlined init with copy of PhysicallyBasedMaterial((uint64_t)&v47, (uint64_t)&v35);
  if (v19 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v41);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    int v11 = (void *)v41[0];
    uint64_t v12 = v41[1];
    uint64_t v13 = v41[2];
    uint64_t v20 = v41[3];
    int v19 = v46;
    if (v46 == 255) {
      goto LABEL_13;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v35);
    uint64_t v42 = v15;
    uint64_t v43 = v16;
    uint64_t v44 = v18;
    uint64_t v45 = v17;
    uint64_t v20 = v14;
  }
  if (v19 == 1)
  {
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    uint64_t v23 = v13;
    goto LABEL_14;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v11, v12, v13, v20, v42, v43, v44, v45, v19);
LABEL_13:
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  LODWORD(v20) = 0;
LABEL_14:
  uint64_t v28 = v22;
  int v29 = v21;
  outlined destroy of PhysicallyBasedMaterial((uint64_t)&v47);
  uint64_t v47 = v32;
  Swift::UInt v48 = v31;
  uint64_t v49 = v30;
  LODWORD(v50) = v33;
  uint64_t v35 = v21;
  Swift::UInt v36 = v22;
  uint64_t v37 = v23;
  int v38 = v20;
  PhysicallyBasedMaterial.checkMultiUV(_:_:)((uint64_t)&v47, (uint64_t)&v35);
  if (v31) {
    unsigned __int8 v24 = v32;
  }
  else {
    unsigned __int8 v24 = 0;
  }
  if (v31) {
    uint64_t v25 = v30;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v31) {
    uint64_t v26 = v33;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v31) {
    unsigned __int8 v27 = 1;
  }
  else {
    unsigned __int8 v27 = -1;
  }
  uint64_t v47 = v24;
  Swift::UInt v48 = v31;
  uint64_t v49 = v25;
  uint64_t v50 = v26;
  long long v51 = 0u;
  long long v52 = 0u;
  unsigned __int8 v53 = v27;
  outlined copy of MaterialParameters.Texture?(v32, v31);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  specialized Material.subscript.setter((uint64_t)&v47, 0xD000000000000016, 0x80000002283523D0);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v31, v25, v26, 0, 0, 0, 0, v27);
  outlined consume of MaterialParameters.Texture?(v29, v28);
  outlined consume of MaterialParameters.Texture?(v32, v31);
}

void (*PhysicallyBasedMaterial.clearcoatNormal.modify(void *a1))(void ***a1, char a2)
{
  Swift::UInt v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterial.clearcoatNormal.getter((uint64_t)v3);
  return PhysicallyBasedMaterial.clearcoatNormal.modify;
}

void PhysicallyBasedMaterial.clearcoatNormal.modify(void ***a1, char a2)
{
}

void PhysicallyBasedMaterial.normal.modify(void ***a1, char a2, void (*a3)(void *))
{
  int v5 = *a1;
  int v6 = **a1;
  uint64_t v7 = (uint64_t)v5[1];
  int v8 = v5[2];
  int v9 = *((_DWORD *)v5 + 6);
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = v8;
  int v11 = v9;
  if (a2)
  {
    outlined copy of MaterialParameters.Texture?(v6, v7);
    a3(v10);
    outlined consume of MaterialParameters.Texture?(*v5, (uint64_t)v5[1]);
  }
  else
  {
    a3(v10);
  }

  free(v5);
}

uint64_t specialized static PhysicallyBasedMaterial.PBRShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a1 + 17);
  int v3 = *((unsigned __int8 *)a1 + 18);
  char v4 = *((unsigned char *)a2 + 16);
  int v5 = *((unsigned __int8 *)a2 + 17);
  int v6 = *((unsigned __int8 *)a2 + 18);
  if (a1[8])
  {
    if (!*((unsigned char *)a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a1 + 1) != *((void *)a2 + 1)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (v2 == 2)
  {
    if (v5 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v5 == 2 || ((v5 ^ v2) & 1) != 0) {
      return result;
    }
  }
  if (v3 == 2)
  {
    if (v6 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v8 = (v3 & 1) == 0;
    if (v6 == 2 || ((v8 ^ v6) & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t outlined destroy of __REAssetService?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MaterialParameters.Texture?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *outlined copy of PhysicallyBasedMaterial.Blending(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 != 1) {
    return outlined copy of MaterialParameters.Texture?(a2, a3);
  }
  return result;
}

uint64_t outlined release of PhysicallyBasedMaterial.AnisotropyAngle(uint64_t a1)
{
  return a1;
}

void outlined consume of PhysicallyBasedMaterial.SheenColor?(void *a1, void *a2, uint64_t a3)
{
  if (a1)
  {

    outlined consume of MaterialParameters.Texture?(a2, a3);
  }
}

void *outlined copy of PhysicallyBasedMaterial.SheenColor?(void *result, void *a2, uint64_t a3)
{
  if (result)
  {
    id v5 = result;
    return outlined copy of MaterialParameters.Texture?(a2, a3);
  }
  return result;
}

void specialized PhysicallyBasedMaterial.program.setter(uint64_t a1)
{
  swift_retain();
  swift_release();
  *(void *)(v1 + 128) = a1;
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  swift_release();
  *(void *)uint64_t v1 = v3;
  specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(_WORD *)(v1 + 104) & 0xFFFE | (*(unsigned char *)(a1 + 16) != 2), *(void *)(v1 + 112), (*(unsigned __int8 *)(v1 + 122) << 16) | (*(unsigned __int8 *)(a1 + 16) << 8) | *(unsigned __int8 *)(v1 + 120));
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters);
  }
  return result;
}

double sub_2281FEFF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterial.baseColor.setter);
}

double sub_2281FF04C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF078(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.metallic.setter);
}

double sub_2281FF0A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF0D0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.roughness.setter);
}

double sub_2281FF0FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.baseColor : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterial.emissiveColor.setter);
}

double sub_2281FF15C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF188(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.specular.setter);
}

double sub_2281FF1B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF1E0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.clearcoat.setter);
}

double sub_2281FF20C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF238(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.clearcoatRoughness.setter);
}

unint64_t sub_2281FF264@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = PhysicallyBasedMaterial.opacityThreshold.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_2281FF298(unsigned int *a1)
{
}

uint64_t sub_2281FF2D8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 88) & 1) == 0)
  {
    if (*(void *)(result + 80) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 80);
    }
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_2281FF2F8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return PhysicallyBasedMaterial.faceCulling.setter(&v2);
}

double sub_2281FF330@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_65Tm((void (*)(_OWORD *__return_ptr))PhysicallyBasedMaterial.blending.getter, a1);
}

void sub_2281FF348(uint64_t a1)
{
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  outlined retain of PhysicallyBasedMaterial.Blending((uint64_t)v1, (void (*)(void, void, void, void, void))outlined copy of PhysicallyBasedMaterial.Blending);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

double sub_2281FF39C@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_67Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterial.normal.getter, a1);
}

uint64_t sub_2281FF3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.normal.setter);
}

double sub_2281FF3E0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_67Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterial.ambientOcclusion.getter, a1);
}

uint64_t sub_2281FF3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.ambientOcclusion.setter);
}

double sub_2281FF424@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF450(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.anisotropyLevel.setter);
}

double sub_2281FF47C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, (void (*)(uint64_t *__return_ptr, void *, void, void))PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:), a2);
}

uint64_t sub_2281FF4A8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.metallic : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(int *))PhysicallyBasedMaterial.anisotropyAngle.setter);
}

double sub_2281FF4D4@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_65Tm((void (*)(_OWORD *__return_ptr))PhysicallyBasedMaterial.sheen.getter, a1);
}

double keypath_get_65Tm@<D0>(void (*a1)(_OWORD *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(v6);
  int v3 = v7;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v3;
  return result;
}

double sub_2281FF538@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_77Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_2281FF544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_63Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_2281FF550@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_77Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_77Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  double result = *(double *)v7;
  float32x2_t v5 = v7[1];
  __int32 v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_2281FF5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_63Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t sub_2281FF5B4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 136) == 1;
  return result;
}

unsigned __int8 *sub_2281FF5C8(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 136) = *result;
  return result;
}

uint64_t sub_2281FF5D4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 144);
  return result;
}

unsigned char *sub_2281FF5E0(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 144) = *result;
  return result;
}

uint64_t sub_2281FF5EC@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 145);
  return result;
}

unsigned char *sub_2281FF5F8(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 145) = *result;
  return result;
}

uint64_t sub_2281FF604@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 128);
  return swift_retain();
}

uint64_t sub_2281FF610()
{
  uint64_t v0 = swift_retain();
  specialized PhysicallyBasedMaterial.program.setter(v0);

  return swift_release();
}

double sub_2281FF654@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_67Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterial.clearcoatNormal.getter, a1);
}

double keypath_get_67Tm@<D0>(void (*a1)(long long *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v6);
  uint64_t v3 = v7;
  int v4 = v8;
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_2281FF6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterial.normal : PhysicallyBasedMaterial(a1, a2, a3, a4, (uint64_t (*)(void **))PhysicallyBasedMaterial.clearcoatNormal.setter);
}

uint64_t destroy for PhysicallyBasedMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  float32x2_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  long long v6 = (_OWORD *)(a1 + 40);
  uint64_t v7 = a2 + 40;
  uint64_t v8 = *(void *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(v7 + 16);
    *long long v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(v7 + 32);
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 119) = *(_DWORD *)(a2 + 119);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 32);
  float32x2_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v7)
    {
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  uint64_t v10 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 146)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 146) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 146) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial()
{
  return &type metadata for PhysicallyBasedMaterial;
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.PBRMaterialDefinitionMapping()
{
  return self;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 17) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 17);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 17) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 19) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.PBRShaderParameters()
{
  return &type metadata for PhysicallyBasedMaterial.PBRShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for PhysicallyBasedMaterial.PBRShaderParameters(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicallyBasedMaterial.PBRShaderParameters and conformance PhysicallyBasedMaterial.PBRShaderParameters();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2281FFDA4()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 172, 7);
}

uint64_t outlined retain of PhysicallyBasedMaterial.Blending(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with copy of __REAssetService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t EventSubscription.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  type metadata accessor for StoredEventSubscription();
  long long v8 = (void *)swift_allocObject();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v10 = type metadata accessor for AnyCancellable();
  uint64_t v11 = MEMORY[0x263EFDD10];
  v8[5] = v10;
  v8[6] = v11;
  v8[2] = v9;
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 2));
  outlined init with take of BindableDataInternal(v14, (uint64_t)(v8 + 2));
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = v8;
  return result;
}

uint64_t specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>, a1);
}

{
  return specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>, a1);
}

uint64_t specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  unint64_t v18 = *(void *)(a1 + 16);
  if ((uint64_t)v18 < a2)
  {
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v18 < *(void *)(a3 + 16))
    {
      outlined init with copy of (Int, URL)(a3+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v18, (uint64_t)v15, a4);
      outlined init with take of Transform?((uint64_t)&v15[*(int *)(v12 + 48)], a6, a5);
      uint64_t result = swift_beginAccess();
      if (!__OFADD__(*v16, 1))
      {
        ++*v16;
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(a5);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a6, 0, 1, v19);
      }
      goto LABEL_10;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a6, 1, 1, v20);
}

uint64_t specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t specialized REEventDispatcher.receive(_:)(float a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(float *)&v22[15] = a1;
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(v1 + 64) + 16);
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1 + 72);
  swift_retain();
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = 0;
      uint64_t v14 = *(void *)(v12 + 16);
      uint64_t v15 = (void *)swift_allocObject();
      void v15[2] = v13;
      uint64_t v15[3] = v14;
      void v15[4] = v12;
      uint64_t v16 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v16 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v15 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineUpdateEvent, Never>>>);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v15;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineUpdateEvent, Never>>>);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v17 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  while (v19(v9, 1, v3) != 1)
  {
    outlined init with take of Transform?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v20 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v20;
}

uint64_t specialized REEventDispatcher.receive(_:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityCustomActionEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityCustomActionEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(unsigned char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned char v20[24];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityDecrementEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityDecrementEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(unsigned char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned char v20[24];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityIncrementEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityIncrementEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(unsigned char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned char v20[24];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityActivateEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityActivateEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(unsigned char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned char v20[24];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)@<X0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(unsigned char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned char v20[24];

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v0 + 64) + 16);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 72);
  swift_retain();
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0;
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      _OWORD v13[2] = v11;
      v13[3] = v12;
      void v13[4] = v10;
      uint64_t v14 = partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator();
    }
    else
    {
      uint64_t v14 = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
      uint64_t v13 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineRenderEvent, Never>>>);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<AnySubscriber<EngineRenderEvent, Never>>>);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = specialized closure #1 in _OrderedCoatCheckBagRef.makeIterator();
    *(void *)(v15 + 24) = 0;
  }
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  while (v17(v7, 1, v1) != 1)
  {
    outlined init with take of Transform?((uint64_t)v7, (uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
    dispatch thunk of AnySubscriberBase.receive(_:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>);
    dispatch thunk of _AnyIteratorBoxBase.next()();
  }
  swift_release();
  uint64_t v18 = static Subscribers.Demand.unlimited.getter();
  swift_release();
  return v18;
}

uint64_t getEventID<A>(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for registeredEventsToEventBusIds != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  uint64_t v5 = *((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2);
  if (v5)
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v7) {
      goto LABEL_36;
    }
  }
  swift_endAccess();
  if (swift_conformsToProtocol2()) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t v9 = &demangling cache variable for type metadata for AccessibilityActivateEvent;
LABEL_30:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
    goto LABEL_31;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11)
  {
    uint64_t v9 = &demangling cache variable for type metadata for AccessibilityDecrementEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent;
    goto LABEL_30;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = a2;
  if (v13)
  {
    uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent;
    goto LABEL_30;
  }
LABEL_31:
  if (v5)
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
    if (v16) {
      return *(void *)(v4[7] + 8 * v15);
    }
  }
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  uint64_t v18 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x22A68E7E0](v18 + 32);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a2, isUniquelyReferenced_nonNull_native);
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = v23;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v4 = static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds;
  if (*((void *)static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds + 2))
  {
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v21)
    {
LABEL_36:
      uint64_t v17 = *(void *)(v4[7] + 8 * v6);
      swift_endAccess();
      return v17;
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t EventService.publish<A>(_:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v28)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  uint64_t v35;

  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  char v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2()) {
    uint64_t v17 = a6;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v33, v18, a2, a3, a4, v18, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v19 = a6;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19)
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v33, v20, a2, a3, a4, v20, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v21 = a6;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v21)
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v33, v22, a2, a3, a4, v22, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v23 = a6;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23)
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v33, v24, a2, a3, a4, v24, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v25 = a6;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v25)
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(&v33, v26, a2, a3, a4, v26, a5, a7);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
    swift_dynamicCast();
    specialized REEventDispatcher.receive(_:)();
    goto LABEL_26;
  }
  uint64_t v28 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16);
  v28(&v33, a6, a2, a3, a4, a6, a5, a7);
  uint64_t v30 = v33;
  uint64_t v31 = v34;
  uint64_t v32 = v35;
  type metadata accessor for __REEventSubscriber();
  int v29 = a1;
  __REEventSubscriber.receive(_:)(a1);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a2 + 24))
  {
    uint64_t v32 = 0;
    uint64_t v30 = 0u;
    uint64_t v31 = 0u;
    v28(&v33, a6, (uint64_t)&v30, 0, 0, a6, a5, a7);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v30, &demangling cache variable for type metadata for EventSource?);
    uint64_t v30 = v33;
    uint64_t v31 = v34;
    uint64_t v32 = v35;
    __REEventSubscriber.receive(_:)(v29);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EventService.publisher<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(a5 + 8))(a1, a2, 0, 0, a4, a3, a5);
}

void *one-time initialization function for registeredEventsToEventBusIds()
{
  uint64_t result = (void *)specialized static RegisteredEventsToEventBusIds.generateRegisteredEventsToEventBusIds()();
  static RegisteredEventsToEventBusIds.registeredEventsToEventBusIds = result;
  return result;
}

uint64_t BoxedSubscription.__deallocating_deinit()
{
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Cancellable?);

  return swift_deallocClassInstance();
}

uint64_t EventService.subscriber<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, a2, 0, 0, a4, a3, a5);
}

uint64_t EventService.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7)
{
  return EventService.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return EventService.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  long long v11;

  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(&v11, a5, a1, a2, a3, a5, a4);
  type metadata accessor for Scene.CorePublisher();
  swift_getWitnessTable();
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t result = type metadata accessor for AnyCancellable();
  uint64_t v10 = MEMORY[0x263EFDD10];
  a6[3] = result;
  a6[4] = v10;
  *a6 = v8;
  return result;
}

uint64_t EventService.publisher<A>(for:on:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(a7 + 8))(a1, a2, 0, 0, a6, a5);
}

uint64_t REEventBus.__deallocating_deinit()
{
  REEventBusSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v13 = getEventID<A>(_:)(a6, a6);
  if (a2)
  {
    uint64_t v14 = specialized static __ServiceLocator.shared.getter() + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v14, (uint64_t)v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    uint64_t v15 = SceneManager.componentTypeToComponentClass(_:)(a2, a3);
    if (v15) {
      goto LABEL_5;
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 80))(v26, a2, a3);
    if (LODWORD(v26[0]) == 36)
    {
      uint64_t v15 = specialized static SceneManager.customComponentType(_:)(a2, a3);
LABEL_5:
      uint64_t v16 = v15;
      swift_release();
      if (*(void *)(a1 + 24)) {
        goto LABEL_6;
      }
LABEL_15:
      uint64_t result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
      uint64_t v19 = 0;
      goto LABEL_16;
    }
    swift_release();
  }
  uint64_t v16 = 0;
  if (!*(void *)(a1 + 24)) {
    goto LABEL_15;
  }
LABEL_6:
  outlined init with copy of (Int, URL)(a1, (uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
  if (!v22)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RECoreBridging);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    goto LABEL_12;
  }
  if (!*((void *)&v24 + 1))
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, &demangling cache variable for type metadata for RECoreBridging?);
    outlined init with copy of (Int, URL)(a1, (uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
    uint64_t v19 = Optional._bridgeToObjectiveC()();
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    swift_unknownObjectRelease();
    uint64_t result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
LABEL_16:
  *a7 = v13;
  a7[1] = v19;
  a7[2] = v16;
  a7[3] = a4;
  a7[4] = a5;
  return result;
}

Swift::Int REEventBus.DispatcherHandle.hashValue.getter()
{
  Swift::UInt64 v2 = *v0;
  Swift::UInt v1 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Swift::UInt v3 = v0[2];
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v0[4]) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  Swift::UInt v3 = v0[2];
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (!v0[4]) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined release of REEventBus.DispatcherHandle((uint64_t)v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REEventBus.DispatcherHandle()
{
  return REEventBus.DispatcherHandle.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance REEventBus.DispatcherHandle()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Swift::UInt64 v3 = v0[4];
  Hasher._combine(_:)(*v0);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v2) {
      goto LABEL_3;
    }
LABEL_8:
    Hasher._combine(_:)(0);
    if (v3) {
      goto LABEL_4;
    }
LABEL_9:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (!v2) {
    goto LABEL_8;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
  if (!v3) {
    goto LABEL_9;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REEventBus.DispatcherHandle()
{
  Swift::UInt64 v2 = *v0;
  Swift::UInt v1 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt64 v4 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static REEventBus.DispatcherHandle.== infix(_:_:)(v5, v7) & 1;
}

void *REEventBus.getOrCreateDispatcher<A>(handle:of:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 24);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v8)
    {
      outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v13);
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
    }
    outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v14 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  type metadata accessor for REEventDispatcher();
  if (!swift_dynamicCast())
  {
LABEL_11:
    uint64_t v10 = type metadata accessor for REEventDispatcher();
    uint64_t v9 = specialized REEventDispatcher.__allocating_init(eventBus:coreHandle:sourceObject:componentType:matching:)(v2, *(void *)(v2 + 16), a1[1], a1[2], v5, v4);
    *((void *)&v14 + 1) = v10;
    *(void *)&long long v13 = v9;
    swift_beginAccess();
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v13, a1);
    swift_endAccess();
    return v9;
  }
  return (void *)v12;
}

uint64_t REEventBus.publisher<A>(for:on:componentType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  outlined init with copy of (Int, URL)(a1, (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v11, a2, a3, 0, 0, a4, v12);
  uint64_t v9 = REEventBus.getOrCreateDispatcher<A>(handle:of:)(v12);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v12);
  return Scene.CorePublisher.init(dispatcher:sourceObject:componentType:)((uint64_t)v9, v12[1], v12[2], a5);
}

uint64_t REEventBus.subscriber<A>(for:on:componentType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  outlined init with copy of (Int, URL)(a1, (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)((uint64_t)v11, a2, a3, 0, 0, a4, v12);
  uint64_t v9 = REEventBus.getOrCreateDispatcher<A>(handle:of:)(v12);
  outlined release of REEventBus.DispatcherHandle((uint64_t)v12);
  return __REEventSubscriber.init(dispatcher:sourceObject:componentType:)((uint64_t)v9, v12[1], v12[2], a5);
}

uint64_t protocol witness for EventService.publisher<A>(for:on:componentType:) in conformance REEventBus@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return REEventBus.publisher<A>(for:on:componentType:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for EventService.subscriber<A>(for:on:componentType:) in conformance REEventBus@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return REEventBus.subscriber<A>(for:on:componentType:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for EventService.publisher<A>(for:on:matching:) in conformance REEventBus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EventService.publisher<A>(for:on:matching:)(a1, a2, a3, a4, a6, a5, a7);
}

uint64_t protocol witness for EventService.subscriber<A>(for:on:) in conformance REEventBus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventService.subscriber<A>(for:on:)(a1, a2, a4, a3, a5);
}

void *StoredEventSubscription.__allocating_init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (void *)swift_allocObject();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  uint64_t v5 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v6 = type metadata accessor for AnyCancellable();
  uint64_t v7 = MEMORY[0x263EFDD10];
  void v4[5] = v6;
  v4[6] = v7;
  v4[2] = v5;
  return v4;
}

uint64_t EventSubscription.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Void __swiftcall EventSubscription.cancel()()
{
  uint64_t v1 = *v0 + 16;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  dispatch thunk of Cancellable.cancel()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t EventSubscription.subscribe(to:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

void *StoredEventSubscription.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  uint64_t v6 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v7 = type metadata accessor for AnyCancellable();
  uint64_t v8 = MEMORY[0x263EFDD10];
  v1[5] = v7;
  v1[6] = v8;
  v1[2] = v6;
  return v1;
}

uint64_t type metadata accessor for StoredEventSubscription()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>;
  if (!lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Empty<(), Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Empty<(), Never> and conformance Empty<A, B>);
  }
  return result;
}

uint64_t StoredEventSubscription.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t StoredEventSubscription.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t _StoredEventSubscription.init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  uint64_t v14 = specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  return v14;
}

uint64_t _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t _StoredEventSubscription.subscribe(to:)()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v0 + 8), (uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v8 = *(ValueMetadata **)(v2 + 128);
  uint64_t v9 = *(void *)(v2 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v11, v3, v4, v5, v6, (uint64_t *)v12, v7, v8, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for EventSource?);
  v1 += 16;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v1);
  outlined init with take of BindableDataInternal(v12, v1);
  return swift_endAccess();
}

void _StoredEventSubscription.__allocating_init()()
{
}

void _StoredEventSubscription.init()()
{
}

uint64_t _StoredEventSubscription.__ivar_destroyer()
{
  outlined destroy of BodyTrackingComponent?(v0 + 64, &demangling cache variable for type metadata for EventSource?);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t _StoredEventSubscription.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of BodyTrackingComponent?(v0 + 64, &demangling cache variable for type metadata for EventSource?);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _StoredEventSubscription.__deallocating_deinit()
{
  _StoredEventSubscription.deinit();

  return swift_deallocClassInstance();
}

uint64_t _StoredEventSubscription.__allocating_init(to:on:matching:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  outlined init with copy of (Int, URL)(a2, (uint64_t)v14, &demangling cache variable for type metadata for EventSource?);
  swift_allocObject();
  uint64_t v12 = specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, (uint64_t)v14, 0, 0, a5, a6);
  swift_release();
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  *(void *)(v12 + 144) = a3;
  *(void *)(v12 + 152) = a4;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
  {
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : AnimationResource].Iterator._Variant();
    return swift_release();
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  uint64_t v12 = (void *)*a5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_22;
  }
  char v5 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) == 0) {
      goto LABEL_23;
    }
    if ((v13 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    while (1)
    {
      uint64_t v25 = specialized LazyMapSequence.Iterator.next()();
      if (!v25) {
        goto LABEL_21;
      }
      uint64_t v10 = v25;
      uint64_t v11 = v26;
      while (1)
      {
        uint64_t v28 = (void *)*a5;
        unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        uint64_t v31 = v28[2];
        BOOL v32 = (v30 & 1) == 0;
        BOOL v23 = __OFADD__(v31, v32);
        uint64_t v33 = v31 + v32;
        if (v23) {
          break;
        }
        char v5 = v30;
        if (v28[3] < v33)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
          unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
          if ((v5 & 1) != (v34 & 1)) {
            goto LABEL_25;
          }
        }
        if ((v5 & 1) == 0)
        {
          uint64_t v35 = (void *)*a5;
          *(void *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
          uint64_t v36 = 8 * v29;
          *(void *)(v35[6] + v36) = v10;
          *(void *)(v35[7] + v36) = v11;
          uint64_t v37 = v35[2];
          BOOL v23 = __OFADD__(v37, 1);
          uint64_t v38 = v37 + 1;
          if (v23) {
            goto LABEL_20;
          }
          v35[2] = v38;
        }
        uint64_t v10 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v11 = v27;
        if (!v10) {
          goto LABEL_21;
        }
      }
LABEL_22:
      __break(1u);
LABEL_23:
      specialized _NativeDictionary.copy()();
      if ((v5 & 1) == 0)
      {
LABEL_9:
        uint64_t v20 = (void *)*a5;
        *(void *)(*a5 + 8 * (v14 >> 6) + 64) |= 1 << v14;
        uint64_t v21 = 8 * v14;
        *(void *)(v20[6] + v21) = v10;
        *(void *)(v20[7] + v21) = v11;
        uint64_t v22 = v20[2];
        BOOL v23 = __OFADD__(v22, 1);
        uint64_t v24 = v22 + 1;
        if (v23)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        v20[2] = v24;
      }
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v5 & 1) == (v19 & 1))
  {
    unint64_t v14 = v18;
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    uint64_t v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v10(&v18, v19);
    return v18;
  }
  uint64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    char v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      BOOL v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          uint64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            uint64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          BOOL v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            uint64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              uint64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

unint64_t specialized static RegisteredEventsToEventBusIds.generateRegisteredEventsToEventBusIds()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, UInt64)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2283446A0;
  type metadata accessor for REEngineDoUpdateEvent(0);
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = MEMORY[0x22A68E7E0]("REEngineDoUpdateEvent");
  type metadata accessor for REEngineDoRenderEvent(0);
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = MEMORY[0x22A68E7E0]("REEngineDoRenderEvent");
  type metadata accessor for RESceneAnchoredStateChangedEvent(0);
  *(void *)(inited + 64) = v3;
  *(void *)(inited + 72) = MEMORY[0x22A68E7E0]("RESceneAnchoredStateChangedEvent");
  type metadata accessor for RESceneEntityDidAddEvent(0);
  *(void *)(inited + 80) = v4;
  *(void *)(inited + 88) = MEMORY[0x22A68E7E0]("RESceneEntityDidAddEvent");
  type metadata accessor for RESceneEntityDidActivateEvent(0);
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = MEMORY[0x22A68E7E0]("RESceneEntityDidActivateEvent");
  type metadata accessor for RESceneEntityWillDeactivateEvent(0);
  *(void *)(inited + 112) = v6;
  *(void *)(inited + 120) = MEMORY[0x22A68E7E0]("RESceneEntityWillDeactivateEvent");
  type metadata accessor for RESceneEntityWillRemoveEvent(0);
  *(void *)(inited + 128) = v7;
  *(void *)(inited + 136) = MEMORY[0x22A68E7E0]("RESceneEntityWillRemoveEvent");
  type metadata accessor for RESceneEntityDidReparentEvent(0);
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = MEMORY[0x22A68E7E0]("RESceneEntityDidReparentEvent");
  type metadata accessor for REAnimationHasCompletedEvent(0);
  *(void *)(inited + 160) = v9;
  *(void *)(inited + 168) = MEMORY[0x22A68E7E0]("REAnimationHasCompletedEvent");
  type metadata accessor for REAnimationHasLoopedEvent(0);
  *(void *)(inited + 176) = v10;
  *(void *)(inited + 184) = MEMORY[0x22A68E7E0]("REAnimationHasLoopedEvent");
  type metadata accessor for REAnimationHasTerminatedEvent(0);
  *(void *)(inited + 192) = v11;
  *(void *)(inited + 200) = MEMORY[0x22A68E7E0]("REAnimationHasTerminatedEvent");
  type metadata accessor for REAnimationHasStartedEvent(0);
  *(void *)(inited + 208) = v12;
  *(void *)(inited + 216) = MEMORY[0x22A68E7E0]("REAnimationHasStartedEvent");
  type metadata accessor for REAnimationHasTimelineEventStart(0);
  *(void *)(inited + 224) = v13;
  *(void *)(inited + 232) = MEMORY[0x22A68E7E0]("REAnimationHasTimelineEventStart");
  type metadata accessor for REAnimationHasTimelineEventUpdate(0);
  *(void *)(inited + 240) = v14;
  *(void *)(inited + 248) = MEMORY[0x22A68E7E0]("REAnimationHasTimelineEventUpdate");
  type metadata accessor for REAnimationHasTimelineEventEnd(0);
  *(void *)(inited + 256) = v15;
  *(void *)(inited + 264) = MEMORY[0x22A68E7E0]("REAnimationHasTimelineEventEnd");
  type metadata accessor for REAnimationTimelineEventSkipped(0);
  *(void *)(inited + 272) = v16;
  *(void *)(inited + 280) = MEMORY[0x22A68E7E0]("REAnimationTimelineEventSkipped");
  type metadata accessor for REAnimationTimelineEventPause(0);
  *(void *)(inited + 288) = v17;
  *(void *)(inited + 296) = MEMORY[0x22A68E7E0]("REAnimationTimelineEventPause");
  type metadata accessor for REAnimationTimelineEventResume(0);
  *(void *)(inited + 304) = v18;
  *(void *)(inited + 312) = MEMORY[0x22A68E7E0]("REAnimationTimelineEventResume");
  type metadata accessor for REAnimationTimelineEventTerminated(0);
  *(void *)(inited + 320) = v19;
  *(void *)(inited + 328) = MEMORY[0x22A68E7E0]("REAnimationTimelineEventTerminated");
  type metadata accessor for REAnimationTimelineEventCreated(0);
  *(void *)(inited + 336) = v20;
  *(void *)(inited + 344) = MEMORY[0x22A68E7E0]("REAnimationTimelineEventCreated");
  type metadata accessor for RECollisionDidStartEventEx(0);
  *(void *)(inited + 352) = v21;
  *(void *)(inited + 360) = MEMORY[0x22A68E7E0]("RECollisionDidStartEventEx");
  type metadata accessor for RECollisionDidUpdateEventEx(0);
  *(void *)(inited + 368) = v22;
  *(void *)(inited + 376) = MEMORY[0x22A68E7E0]("RECollisionDidUpdateEventEx");
  type metadata accessor for RECollisionDidStopEvent(0);
  *(void *)(inited + 384) = v23;
  *(void *)(inited + 392) = MEMORY[0x22A68E7E0]("RECollisionDidStopEvent");
  type metadata accessor for REComponentDidAddEvent(0);
  *(void *)(inited + 400) = v24;
  *(void *)(inited + 408) = MEMORY[0x22A68E7E0]("REComponentDidAddEvent");
  type metadata accessor for REComponentDidActivateEvent(0);
  *(void *)(inited + 416) = v25;
  *(void *)(inited + 424) = MEMORY[0x22A68E7E0]("REComponentDidActivateEvent");
  type metadata accessor for REComponentWillDeactivateEvent(0);
  *(void *)(inited + 432) = v26;
  *(void *)(inited + 440) = MEMORY[0x22A68E7E0]("REComponentWillDeactivateEvent");
  type metadata accessor for REComponentWillRemoveEvent(0);
  *(void *)(inited + 448) = v27;
  *(void *)(inited + 456) = MEMORY[0x22A68E7E0]("REComponentWillRemoveEvent");
  type metadata accessor for REComponentDidChangeEvent(0);
  *(void *)(inited + 464) = v28;
  *(void *)(inited + 472) = MEMORY[0x22A68E7E0]("REComponentDidChangeEvent");
  type metadata accessor for REMotionStateDidChangeEvent(0);
  *(void *)(inited + 480) = v29;
  *(void *)(inited + 488) = MEMORY[0x22A68E7E0]("REMotionStateDidChangeEvent");
  type metadata accessor for REOwnershipRequestEvent(0);
  *(void *)(inited + 496) = v30;
  *(void *)(inited + 504) = MEMORY[0x22A68E7E0]("REOwnershipRequestEvent");
  type metadata accessor for REOwnershipResponseEvent(0);
  *(void *)(inited + 512) = v31;
  *(void *)(inited + 520) = MEMORY[0x22A68E7E0]("REOwnershipResponseEvent");
  type metadata accessor for REOwnershipChangedEvent(0);
  *(void *)(inited + 528) = v32;
  *(void *)(inited + 536) = MEMORY[0x22A68E7E0]("REOwnershipChangedEvent");
  type metadata accessor for REAudioPlayerDidCompleteEvent(0);
  *(void *)(inited + 544) = v33;
  *(void *)(inited + 552) = MEMORY[0x22A68E7E0]("REAudioPlayerDidCompleteEvent");
  *(void *)(inited + 560) = &type metadata for EngineRenderEvent;
  *(void *)(inited + 568) = MEMORY[0x22A68E7E0]("EngineRenderEvent");
  type metadata accessor for REEntityPhysicsWillSimulateEvent(0);
  *(void *)(inited + 576) = v34;
  *(void *)(inited + 584) = MEMORY[0x22A68E7E0]("REEntityPhysicsWillSimulateEvent");
  type metadata accessor for REEntityPhysicsDidSimulateEvent(0);
  *(void *)(inited + 592) = v35;
  *(void *)(inited + 600) = MEMORY[0x22A68E7E0]("REEntityPhysicsDidSimulateEvent");
  type metadata accessor for REEntityForceEffectComputeForcesEvent(0);
  *(void *)(inited + 608) = v36;
  *(void *)(inited + 616) = MEMORY[0x22A68E7E0]("REEntityForceEffectComputeForcesEvent");
  type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(0);
  *(void *)(inited + 624) = v37;
  *(void *)(inited + 632) = MEMORY[0x22A68E7E0]("REAnimationSkeletalPoseUpdateCompleteEvent");
  type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
  *(void *)(inited + 640) = v38;
  *(void *)(inited + 648) = MEMORY[0x22A68E7E0]("REVideoPlayerContentTypeChangedEvent");
  type metadata accessor for REVideoPlayerVideoSizeChangedEvent(0);
  *(void *)(inited + 656) = v39;
  *(void *)(inited + 664) = MEMORY[0x22A68E7E0]("REVideoPlayerVideoSizeChangedEvent");
  type metadata accessor for REVideoPlayerViewingModeChangedEvent(0);
  *(void *)(inited + 672) = v40;
  *(void *)(inited + 680) = MEMORY[0x22A68E7E0]("REVideoPlayerViewingModeChangedEvent");
  type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(0);
  *(void *)(inited + 688) = v41;
  *(void *)(inited + 696) = MEMORY[0x22A68E7E0]("REVideoPlayerVideoReceiverEndpointChangedEvent");
  unint64_t v42 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  uint64_t v43 = MEMORY[0x22A68E7E0]("EngineUpdateEvent");
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v43, (uint64_t)&type metadata for EngineUpdateEvent, isUniquelyReferenced_nonNull_native);
  unint64_t v45 = v42;
  swift_bridgeObjectRelease();
  uint64_t v46 = swift_initStackObject();
  *(_OWORD *)(v46 + 16) = xmmword_22831E320;
  *(void *)(v46 + 32) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
  *(void *)(v46 + 40) = MEMORY[0x22A68E7E0]("AccessibilityRotorNavigationEvent");
  *(void *)(v46 + 48) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
  *(void *)(v46 + 56) = MEMORY[0x22A68E7E0]("AccessibilityActivateEvent");
  *(void *)(v46 + 64) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
  *(void *)(v46 + 72) = MEMORY[0x22A68E7E0]("AccessibilityIncrementEvent");
  *(void *)(v46 + 80) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
  *(void *)(v46 + 88) = MEMORY[0x22A68E7E0]("AccessibilityDecrementEvent");
  *(void *)(v46 + 96) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
  *(void *)(v46 + 104) = MEMORY[0x22A68E7E0]("AccessibilityCustomActionEvent");
  unint64_t v47 = specialized Dictionary.init(dictionaryLiteral:)(v46);
  swift_setDeallocating();
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v51 = v45;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v47, (uint64_t)protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance __REAssetIdentifier, 0, v48, &v51);
  unint64_t v49 = v51;
  swift_bridgeObjectRelease();
  return v49;
}

uint64_t specialized static REEventBus.DispatcherHandle.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (v2)
  {
    if (v3) {
      BOOL v4 = v2 == v3;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[2];
  if (!v5)
  {
    if (v6) {
      return 0;
    }
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  if (v6 && v5 == v6)
  {
LABEL_14:
    uint64_t v8 = a1[4];
    uint64_t v9 = a2[4];
    if (v8)
    {
      if (v9 && (a1[3] == a2[3] && v8 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  return v7;
}

uint64_t specialized _StoredEventSubscription.init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v21 = a5;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 144) = 0;
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 56) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of EventSource?(a2, v7 + 64);
  swift_endAccess();
  *(void *)(v7 + 104) = a3;
  *(void *)(v7 + 112) = a4;
  *(void *)(v7 + 120) = 0;
  swift_release();
  *(void *)(v7 + 128) = v21;
  *(void *)(v7 + 136) = a6;
  swift_retain();
  swift_release();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  uint64_t v17 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v18 = type metadata accessor for AnyCancellable();
  uint64_t v19 = MEMORY[0x263EFDD10];
  *(void *)(v7 + 40) = v18;
  *(void *)(v7 + 48) = v19;
  *(void *)(v7 + 16) = v17;
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  return v7;
}

uint64_t specialized _StoredEventSubscription.__allocating_init(to:on:componentType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized _StoredEventSubscription.init(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t specialized _StoredEventSubscription.init(to:on:componentType:rootEntity:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v24 = a4;
  uint64_t v25 = a6;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<(), Never>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 56) = a1;
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of EventSource?(a2, v8 + 64);
  swift_endAccess();
  uint64_t v18 = v24;
  *(void *)(v8 + 104) = a3;
  *(void *)(v8 + 112) = v18;
  *(void *)(v8 + 120) = a5;
  swift_retain();
  swift_release();
  *(void *)(v8 + 128) = v25;
  *(void *)(v8 + 136) = a7;
  swift_retain();
  swift_release();
  Empty.init(completeImmediately:)();
  lazy protocol witness table accessor for type Empty<(), Never> and conformance Empty<A, B>();
  uint64_t v19 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v20 = type metadata accessor for AnyCancellable();
  uint64_t v21 = MEMORY[0x263EFDD10];
  *(void *)(v8 + 40) = v20;
  *(void *)(v8 + 48) = v21;
  *(void *)(v8 + 16) = v19;
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for EventSource?);
  return v8;
}

void specialized _StoredEventSubscription.init()()
{
}

uint64_t type metadata accessor for BoxedSubscription()
{
  return self;
}

uint64_t dispatch thunk of EventService.publisher<A>(for:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of EventService.subscriber<A>(for:on:componentType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of EventService.publisher<A>(for:on:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of EventService.subscriber<A>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t type metadata accessor for REEventBus()
{
  return self;
}

ValueMetadata *type metadata accessor for EventSubscription()
{
  return &type metadata for EventSubscription;
}

uint64_t method lookup function for StoredEventSubscription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StoredEventSubscription);
}

uint64_t dispatch thunk of StoredEventSubscription.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for _StoredEventSubscription()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _StoredEventSubscription()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for _StoredEventSubscription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _StoredEventSubscription);
}

uint64_t dispatch thunk of _StoredEventSubscription.__allocating_init(to:on:componentType:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of _StoredEventSubscription.__allocating_init(to:on:componentType:rootEntity:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t destroy for REEventBus.DispatcherHandle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for REEventBus.DispatcherHandle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for REEventBus.DispatcherHandle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for REEventBus.DispatcherHandle()
{
  return &type metadata for REEventBus.DispatcherHandle;
}

unint64_t lazy protocol witness table accessor for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle()
{
  unint64_t result = lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle;
  if (!lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REEventBus.DispatcherHandle and conformance REEventBus.DispatcherHandle);
  }
  return result;
}

uint64_t outlined assign with copy of EventSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_228204664()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityRotorNavigationEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityRotorNavigationEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityRotorNavigationEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityActivateEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityActivateEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityActivateEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityIncrementEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityIncrementEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityIncrementEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityDecrementEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityDecrementEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityDecrementEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<AccessibilityCustomActionEvent, Never>>.Ticket, element: AnySubscriber<AccessibilityCustomActionEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<AccessibilityCustomActionEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<EngineRenderEvent, Never>>.Ticket, element: AnySubscriber<EngineRenderEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<EngineRenderEvent, Never>, a1);
}

{
  uint64_t *v1;

  return specialized closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[2], v1[3], v1[4], &demangling cache variable for type metadata for (key: OrderedCoatCheckBag<AnySubscriber<EngineUpdateEvent, Never>>.Ticket, element: AnySubscriber<EngineUpdateEvent, Never>), &demangling cache variable for type metadata for AnySubscriber<EngineUpdateEvent, Never>, a1);
}

uint64_t specialized MeshBuffer.Iterator.next()()
{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

uint64_t specialized MeshBuffer.Iterator.next()(uint64_t (*a1)(uint64_t))
{
  if (!v1[1]) {
    return 0;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v11 & 1) == 0)
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release();
  if (!v6) {
    return 0;
  }
  *long long v3 = v4;
  v3[1] = v6;
  uint64_t v8 = a1(v7);
  swift_release();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  if (!v1[1]) {
    return 0;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v11 & 1) == 0)
  {
    uint64_t v8 = v10;
    swift_release();
    return v8;
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release();
  if (!v6) {
    return 0;
  }
  *long long v3 = v4;
  v3[1] = v6;
  uint64_t v8 = a1(v7);
  swift_release();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  __int16 v11;
  char v12;

  if (!v1[1]) {
    goto LABEL_5;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LOWORD(v8) = v11;
    swift_release();
    uint64_t v9 = 0;
    return (unsigned __int16)v8 | (v9 << 16);
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release();
  if (v6)
  {
    *long long v3 = v4;
    v3[1] = v6;
    uint64_t v8 = a1(v7);
    swift_release();
    uint64_t v9 = HIWORD(v8) & 1;
  }
  else
  {
LABEL_5:
    LOWORD(v8) = 0;
    uint64_t v9 = 1;
  }
  return (unsigned __int16)v8 | (v9 << 16);
}

{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  char v11;
  char v12;

  if (!v1[1]) {
    goto LABEL_5;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LOBYTE(v8) = v11;
    swift_release();
    uint64_t v9 = 0;
    return v8 | (v9 << 8);
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release();
  if (v6)
  {
    *long long v3 = v4;
    v3[1] = v6;
    uint64_t v8 = a1(v7);
    swift_release();
    uint64_t v9 = (v8 >> 8) & 1;
  }
  else
  {
LABEL_5:
    LOBYTE(v8) = 0;
    uint64_t v9 = 1;
  }
  return v8 | (v9 << 8);
}

unint64_t specialized MeshBuffer.Iterator.next()()
{
  return specialized MeshBuffer.Iterator.next()((uint64_t (*)(uint64_t))specialized MeshBuffer.Iterator.next());
}

unint64_t specialized MeshBuffer.Iterator.next()(uint64_t (*a1)(uint64_t))
{
  if (!v1[1]) {
    goto LABEL_5;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v12 & 1) == 0)
  {
    LODWORD(v8) = v11;
    swift_release();
    LOBYTE(v9) = 0;
    return v8 | ((unint64_t)v9 << 32);
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_release();
  if (v6)
  {
    *long long v3 = v4;
    v3[1] = v6;
    unint64_t v8 = a1(v7);
    swift_release();
    uint64_t v9 = HIDWORD(v8) & 1;
  }
  else
  {
LABEL_5:
    LODWORD(v8) = 0;
    LOBYTE(v9) = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

void specialized MeshBuffer.Iterator.next()(uint64_t a1@<X8>)
{
  if (!v1[1])
  {
LABEL_5:
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return;
  }
  long long v3 = v1;
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v9)
  {
    uint64_t v4 = ((uint64_t (*)(uint64_t))v1[2])(*v1);
    uint64_t v6 = v5;
    uint64_t v7 = swift_release();
    if (v6)
    {
      *long long v3 = v4;
      v3[1] = v6;
      specialized MeshBuffer.Iterator.next()(v7);
      swift_release();
      return;
    }
    goto LABEL_5;
  }
  swift_release();
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t ShapeResource.offsetBy(translation:)(__n128 a1)
{
  __n128 v1 = a1;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    __n128 v1 = a1;
  }
  __n128 v2 = (__n128)static simd_quatf.identity;

  return ShapeResource.offsetBy(rotation:translation:)(v2, v1);
}

{
  unint64_t v1;
  __n128 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[2].n128_u64[0] = v1;
  v2[1] = a1;
  type metadata accessor for MainActor();
  v2[2].n128_u64[1] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[3].n128_u64[0] = v4;
  v2[3].n128_u64[1] = v3;
  return MEMORY[0x270FA2498](ShapeResource.offsetBy(translation:), v4, v3);
}

uint64_t ShapeResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  REPoseIdentity();
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

double ShapeResource.bounds.getter()
{
  if (!RECollisionShapeAssetGetCollisionShape()) {
    return 1.40444843e306;
  }
  RECollisionShapeGetBoundingBox();
  return result;
}

uint64_t ShapeResource.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  REPoseIdentity();
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v3;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t ShapeResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t ShapeResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t ShapeResource.hash(into:)(uint64_t a1)
{
  long long v2 = v1;
  Hasher._combine(_:)(v2[1].n128_u64[0]);
  specialized SIMD.hash(into:)(a1, v2[2]);
  specialized SIMD.hash(into:)(a1, v2[3]);
  if (RECollisionShapeAssetGetCollisionShape())
  {
    RECollisionShapeGetBoundingBox();
    __n128 v7 = v5;
  }
  else
  {
    __n128 v7 = (__n128)xmmword_22831FD20;
    __n128 v4 = (__n128)xmmword_22831FD10;
  }
  specialized SIMD.hash(into:)(a1, v4);

  return specialized SIMD.hash(into:)(a1, v7);
}

Swift::Int ShapeResource.hashValue.getter()
{
  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ShapeResource()
{
  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ShapeResource(uint64_t a1)
{
  return ShapeResource.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShapeResource()
{
  Hasher.init(_seed:)();
  ShapeResource.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShapeResource(uint64_t *a1, uint64_t *a2)
{
  return specialized static ShapeResource.== infix(_:_:)(*a1, *a2);
}

uint64_t ShapeResource.offsetBy(rotation:)(__n128 a1)
{
  return ShapeResource.offsetBy(rotation:translation:)(a1, (__n128)0);
}

{
  void *v1;
  void *v2;
  uint64_t v5;

  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  long long v2 = (void *)swift_task_alloc();
  v1[4] = v2;
  *long long v2 = v1;
  v2[1] = static MeshResource.generate(from:);
  return ShapeResource.offsetBy(rotation:translation:)(a1, (__n128)0);
}

uint64_t ShapeResource.offsetBy(rotation:translation:)(__n128 a1, __n128 a2)
{
  uint64_t v3 = 0;
  while (1)
  {
    __n128 v16 = a1;
    float v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v4 = v5 == 0.0;
    if (v3 == 3) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v4) {
        break;
      }
      if (v3 == 3) {
        goto LABEL_15;
      }
      BOOL v4 = 0;
    }
  }
  if (v5 != 0.0) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  while (1)
  {
    __n128 v15 = a2;
    float v8 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    BOOL v7 = v8 == 0.0;
    if (v6 == 2) {
      break;
    }
    while (1)
    {
      ++v6;
      if (v7) {
        break;
      }
      if (v6 == 2) {
        goto LABEL_15;
      }
      BOOL v7 = 0;
    }
  }
  if (v8 == 0.0)
  {
    swift_retain();
  }
  else
  {
LABEL_15:
    uint64_t v9 = type metadata accessor for ShapeResource();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = *(void *)(v2 + 16);
    swift_retain();
    REPoseMultiply();
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 48) = v12;
    RERetain();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = v9;
    *(void *)(inited + 64) = &protocol witness table for ShapeResource;
    *(void *)(inited + 32) = v10;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    return v10;
  }
  return v2;
}

{
  unint64_t v2;
  __n128 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3[3].n128_u64[0] = v2;
  v3[1] = a1;
  _OWORD v3[2] = a2;
  type metadata accessor for MainActor();
  v3[3].n128_u64[1] = static MainActor.shared.getter();
  float v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[4].n128_u64[0] = v5;
  v3[4].n128_u64[1] = v4;
  return MEMORY[0x270FA2498](ShapeResource.offsetBy(rotation:translation:), v5, v4);
}

uint64_t ShapeResource.offsetBy(rotation:translation:)()
{
  uint64_t v17 = v0;
  uint64_t v1 = 0;
  while (1)
  {
    long long v16 = *(_OWORD *)(v0 + 16);
    float v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    BOOL v2 = v5 == 0.0;
    if (v1 == 3) {
      break;
    }
    while (1)
    {
      ++v1;
      if (v2) {
        break;
      }
      if (v1 == 3) {
        goto LABEL_19;
      }
      BOOL v2 = 0;
    }
  }
  if (v5 != 0.0) {
    goto LABEL_19;
  }
  uint64_t v3 = 0;
  while (1)
  {
    float v6 = *(float *)(v0 + 4 * (v3 & 3) + 32);
    BOOL v4 = v6 == 0.0;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v4) {
        break;
      }
      if (v3 == 2) {
        goto LABEL_19;
      }
      BOOL v4 = 0;
    }
  }
  if (v6 == 0.0)
  {
    swift_release();
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    swift_retain();
    return v14(v7);
  }
  else
  {
LABEL_19:
    uint64_t v9 = *(void *)(v0 + 48);
    type metadata accessor for ShapeResource();
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 80) = v10;
    *(void *)(v10 + 16) = *(void *)(v9 + 16);
    swift_retain();
    REPoseMultiply();
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 48) = v12;
    RERetain();
    swift_release();
    __n128 v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v13;
    *uint64_t v13 = v0;
    v13[1] = ShapeResource.offsetBy(rotation:translation:);
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  BOOL v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  BOOL v4 = *(void *)(v2 + 64);
  if (v0) {
    float v5 = ShapeResource.offsetBy(rotation:translation:);
  }
  else {
    float v5 = ShapeResource.offsetBy(rotation:translation:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 80);
  BOOL v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ShapeResource.offsetBy(translation:)()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  __n128 v4 = (__n128)static simd_quatf.identity;
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4].n128_u64[0] = (unint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = ShapeResource.offsetBy(translation:);
  __n128 v2 = v0[1];
  return ShapeResource.offsetBy(rotation:translation:)(v4, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  __n128 v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ShapeResource.offsetBy(translation:)(uint64_t a1)
{
  __n128 v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = ShapeResource.offsetBy(translation:);
  }
  else
  {
    v4[10] = a1;
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = ShapeResource.offsetBy(translation:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static ShapeResource.generateBox(size:)(__n128 a1)
{
  __n128 v4 = (uint64_t (*)(__n128))((char *)&async function pointer to specialized static ShapeResource.generateBox(size:)
                                      + async function pointer to specialized static ShapeResource.generateBox(size:));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = static ShapeResource.generateBox(width:height:depth:);
  return v4(a1);
}

uint64_t static ShapeResource.generateBox(width:height:depth:)()
{
  return specialized static ShapeResource.generateBox(size:)();
}

uint64_t static ShapeResource.generateBox(width:height:depth:)(float a1, float a2, float a3)
{
  v4.n128_u64[0] = __PAIR64__(LODWORD(a2), LODWORD(a1));
  v4.n128_u64[1] = LODWORD(a3);
  __n128 v8 = v4;
  uint64_t v7 = (uint64_t (*)(__n128))((char *)&async function pointer to specialized static ShapeResource.generateBox(size:)
                                      + async function pointer to specialized static ShapeResource.generateBox(size:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = static ShapeResource.generateBox(width:height:depth:);
  return v7(v8);
}

uint64_t static ShapeResource.generateCapsule(height:radius:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  uint64_t v1 = v11;
  uint64_t v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  uint64_t Capsule = REAssetManagerCollisionShapeAssetCreateCapsule();
  uint64_t v4 = type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = Capsule;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = &protocol witness table for ShapeResource;
  *(void *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 80) = RECapsuleShapeCreate();
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static ShapeResource.generateCapsule(height:radius:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  void *v9;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  double result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for ShapeResource();
    long long v6 = swift_allocObject();
    v0[12] = v6;
    *(void *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    uint64_t v9 = (void *)swift_task_alloc();
    v0[13] = v9;
    *uint64_t v9 = v0;
    v9[1] = static ShapeResource.generateCapsule(height:radius:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static ShapeResource.generateCapsule(height:radius:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[12];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static ShapeResource.generateCapsule(height:radius:)(float a1, float a2)
{
  *(float *)(v2 + 120) = a1;
  *(float *)(v2 + 124) = a2;
  return MEMORY[0x270FA2498](static ShapeResource.generateCapsule(height:radius:), 0, 0);
}

uint64_t static ShapeResource.generateConvex(from:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  uint64_t ConvexPolyhedron = REAssetManagerCollisionShapeAssetCreateConvexPolyhedron();
  if (ConvexPolyhedron)
  {
    uint64_t v4 = ConvexPolyhedron;
    uint64_t v5 = type metadata accessor for ShapeResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = v5;
    *(void *)(inited + 64) = &protocol witness table for ShapeResource;
    *(void *)(inited + 32) = v6;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    RERelease();
    return v6;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static ShapeResource.generateConvex(from:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t ConvexPolyhedronFromMesh;
  uint64_t v7;
  long long v8;
  long long v9;
  void *v10;
  uint64_t (__cdecl *v11)();
  uint64_t v12;

  uint64_t v1 = v0[10];
  swift_release();
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)(v0 + 2));
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (*(void *)(v1 + 16))
  {
    ConvexPolyhedronFromMesh = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh();
    type metadata accessor for ShapeResource();
    long long v7 = swift_allocObject();
    v0[12] = v7;
    *(void *)(v7 + 16) = ConvexPolyhedronFromMesh;
    REPoseIdentity();
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    uint64_t v11 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    uint64_t v10 = (void *)swift_task_alloc();
    v0[13] = v10;
    *uint64_t v10 = v0;
    v10[1] = static ShapeResource.generateCapsule(height:radius:);
    return v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  void *v0;
  uint64_t Nullable;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  Nullable = REConvexPolyhedronShapeCreateNullable();
  v0[11] = Nullable;
  if (Nullable)
  {
    type metadata accessor for MainActor();
    v0[12] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](static ShapeResource.generateConvex(from:), v3, v2);
  }
  else
  {
    lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError();
    swift_allocError();
    *uint64_t v4 = 1;
    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  void *v9;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for ShapeResource();
    uint64_t v6 = swift_allocObject();
    v0[13] = v6;
    *(void *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    uint64_t v9 = (void *)swift_task_alloc();
    v0[14] = v9;
    *uint64_t v9 = v0;
    v9[1] = static ShapeResource.generateConvex(from:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static ShapeResource.generateConvex(from:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[13];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static ShapeResource.generateConvex2(from:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v9);
  uint64_t v1 = v10;
  uint64_t v2 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  uint64_t ConvexPolyhedronNullable = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronNullable();
  if (!ConvexPolyhedronNullable) {
    return 0;
  }
  uint64_t v4 = ConvexPolyhedronNullable;
  type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  return v5;
}

uint64_t static ShapeResource.generateConvex(from:)(uint64_t a1)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v12);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if (*(void *)(a1 + 16))
  {
    uint64_t ConvexPolyhedronFromMesh = REAssetManagerCollisionShapeAssetCreateConvexPolyhedronFromMesh();
    uint64_t v6 = type metadata accessor for ShapeResource();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = ConvexPolyhedronFromMesh;
    REPoseIdentity();
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    RERetain();
    REAssetSetSwiftObject();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = v6;
    *(void *)(inited + 64) = &protocol witness table for ShapeResource;
    *(void *)(inited + 32) = v7;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    RERelease();
    return v7;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;

  *(void *)(v1 + 80) = a1;
  return MEMORY[0x270FA2498](static ShapeResource.generateConvex(from:), 0, 0);
}

{
  uint64_t v1;

  *(void *)(v1 + 80) = a1;
  return MEMORY[0x270FA2498](static ShapeResource.generateConvex(from:), 0, 0);
}

uint64_t static ShapeResource.generateSphere(radius:)(float a1)
{
  *(float *)(v1 + 120) = a1;
  return MEMORY[0x270FA2498](static ShapeResource.generateSphere(radius:), 0, 0);
}

uint64_t static ShapeResource.generateSphere(radius:)()
{
  *(void *)(v0 + 80) = RESphereShapeCreate();
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static ShapeResource.generateSphere(radius:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  void *v9;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for ShapeResource();
    uint64_t v6 = swift_allocObject();
    v0[12] = v6;
    *(void *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    long long v9 = (void *)swift_task_alloc();
    v0[13] = v9;
    *long long v9 = v0;
    v9[1] = static ShapeResource.generateSphere(radius:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static ShapeResource.generateSphere(radius:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[12];
    return v3(v4);
  }
}

unint64_t ShapeResourceError.errorDescription.getter()
{
  if (*v0) {
    return 0xD0000000000000A3;
  }
  else {
    return 0xD000000000000068;
  }
}

BOOL static ShapeResourceError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ShapeResourceError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ShapeResourceError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ShapeResourceError()
{
  if (*v0) {
    return 0xD0000000000000A3;
  }
  else {
    return 0xD000000000000068;
  }
}

uint64_t static ShapeResource.generateStaticMesh(positions:faceIndices:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)
                                                + async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v7(a1, a2);
}

uint64_t static ShapeResource.generateStaticMesh(from:)(uint64_t a1)
{
  v1[60] = a1;
  type metadata accessor for MainActor();
  v1[61] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[62] = v3;
  v1[63] = v2;
  return MEMORY[0x270FA2498](static ShapeResource.generateStaticMesh(from:), v3, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 536) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = static ShapeResource.generateStaticMesh(from:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[68] = a1;
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = static ShapeResource.generateStaticMesh(from:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  uint64_t v1;

  *(void *)(v1 + 120) = a1;
  return MEMORY[0x270FA2498](static ShapeResource.generateStaticMesh(from:), 0, 0);
}

uint64_t static ShapeResource.generateStaticMesh(from:)()
{
  void (*v30)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  long long v50;
  long long v51;
  long long v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  long long *v81;
  void *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  long long *v86;
  void *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  long long v95;
  long long v96;
  long long v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t (*v102)(uint64_t);
  long long v103;
  long long v104;
  long long v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;

  uint64_t v110 = v0;
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 456) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 464) = v2;
  uint64_t v79 = *(void *)(v1 + 16);
  MeshResource.Contents.init(_:)(v79, (uint64_t *)&v102);
  uint64_t v3 = *((void *)&v103 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v73 = MEMORY[0x263F8EE78];
    uint64_t v74 = MEMORY[0x263F8EE78];
    goto LABEL_44;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v90 = v0 + 16;
  uint64_t v82 = (void *)(v0 + 296);
  long long v83 = v0 + 208;
  uint64_t v81 = (long long *)(v0 + 336);
  uint64_t v86 = (long long *)(v0 + 416);
  uint64_t v87 = (void *)(v0 + 376);
  uint64_t v84 = (uint64_t *)(v0 + 456);
  uint64_t v85 = v0;
  uint64_t v88 = v0 + 120;
  unint64_t v89 = (uint64_t *)(v0 + 464);
  long long v77 = v3;
  uint64_t v78 = v3 + 32;
  while (1)
  {
    if (v6 >= v4)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_57:
      __break(1u);
LABEL_60:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    uint64_t v80 = v6;
    uint64_t v7 = (long long *)(v78 + 112 * v6);
    long long v8 = *v7;
    long long v9 = v7[2];
    *(_OWORD *)(v90 + 16) = v7[1];
    *(_OWORD *)(v90 + 32) = v9;
    long long v10 = v7[3];
    long long v11 = v7[4];
    long long v12 = v7[5];
    *(unsigned char *)(v90 + 96) = *((unsigned char *)v7 + 96);
    *(_OWORD *)(v90 + 64) = v11;
    *(_OWORD *)(v90 + 80) = v12;
    *(_OWORD *)(v90 + 48) = v10;
    *(_OWORD *)uint64_t v90 = v8;
    uint64_t v13 = *(void *)(v0 + 32);
    uint64_t v14 = *(void *)(v0 + 40);
    outlined retain of IKRig.Constraint(v90);
    MeshResource.Contents.init(_:)(v79, (uint64_t *)&v102);
    uint64_t v16 = (uint64_t)v102;
    uint64_t v15 = v103;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(void *)(v15 + 16)) {
      goto LABEL_60;
    }
    swift_bridgeObjectRetain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    if ((v18 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_60;
    }
    unint64_t v19 = *(void *)(*(void *)(v15 + 56) + 8 * v17);
    if ((v19 & 0x8000000000000000) != 0) {
      goto LABEL_54;
    }
    if (v19 >= *(void *)(v16 + 16)) {
      goto LABEL_55;
    }
    uint64_t v20 = *(void *)(v16 + 48 * v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v21 = *(void *)(v20 + 16);
    if (v21) {
      break;
    }
LABEL_3:
    unint64_t v6 = v80 + 1;
    swift_bridgeObjectRelease();
    outlined release of IKRig.Constraint(v90);
    unint64_t v4 = *(void *)(v77 + 16);
    if (v80 + 1 == v4) {
      goto LABEL_49;
    }
  }
  unint64_t v22 = 0;
  while (1)
  {
    if (v22 >= v21)
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v91 = v22;
    uint64_t v23 = v20 + 32 + (v22 << 6);
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(*(void *)v23 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v25) {
      goto LABEL_16;
    }
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if ((v27 & 1) == 0) {
      goto LABEL_16;
    }
    outlined init with copy of __REAssetService(*(void *)(v24 + 56) + 40 * v26, (uint64_t)v81);
    outlined init with take of BindableDataInternal(v81, (uint64_t)v82);
    uint64_t v28 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 328);
    __swift_project_boxed_opaque_existential_1(v82, v28);
    uint64_t v30 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v29 + 56);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v30(&v94, v31, v28, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    uint64_t v32 = v94;
    if (v94)
    {
      uint64_t v33 = v101;
      uint64_t v34 = v99;
      uint64_t v35 = v100;
      uint64_t v36 = v98;
      uint64_t v37 = v97;
      uint64_t v38 = v96;
      uint64_t v39 = v95;
      uint64_t v40 = (v99 >> 8) & 1;
    }
    else
    {
LABEL_16:
      specialized MeshBuffer.init<A>(_:)(MEMORY[0x263F8EE78], (uint64_t)&v102);
      uint64_t v32 = (uint64_t)v102;
      uint64_t v39 = v103;
      uint64_t v38 = v104;
      uint64_t v37 = v105;
      uint64_t v36 = v106;
      uint64_t v34 = v107;
      LOBYTE(v40) = HIBYTE(v107);
      uint64_t v35 = v108;
      uint64_t v33 = v109;
    }
    *(void *)(v0 + 120) = v32;
    *(_OWORD *)(v0 + 128) = v39;
    *(_OWORD *)(v0 + 144) = v38;
    *(_OWORD *)(v0 + 160) = v37;
    *(void *)(v0 + 176) = v36;
    *(unsigned char *)(v0 + 184) = v34;
    *(unsigned char *)(v0 + 185) = v40;
    *(void *)(v0 + 192) = v35;
    *(unsigned char *)(v0 + 200) = v33;
    outlined retain of IKRig.Constraint(v90);
    uint64_t v41 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation10MeshBufferVys5SIMD3VySfGG_AKs5NeverOTB504_s10d23Kit13ShapeResourceC0A10e43E18generateStaticMesh4fromAcA0hD0C_tYaKFZs5H12VySfGAKXEfU_0D3Kit0fM0CAFE8InstanceVTf1cn_nTf4ng_n(v88, (float32x4_t *)v90);
    outlined release of IKRig.Constraint(v90);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v42 = swift_bridgeObjectRetain();
    v92 = v41;
    specialized Array.append<A>(contentsOf:)(v42);
    if (!*(void *)(v24 + 16)) {
      goto LABEL_56;
    }
    uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0);
    if ((v44 & 1) == 0) {
      goto LABEL_56;
    }
    outlined init with copy of __REAssetService(*(void *)(v24 + 56) + 40 * v43, (uint64_t)v86);
    outlined init with take of BindableDataInternal(v86, (uint64_t)v87);
    unint64_t v45 = *(void *)(v0 + 400);
    uint64_t v46 = *(void *)(v0 + 408);
    __swift_project_boxed_opaque_existential_1(v87, v45);
    (*(void (**)(uint64_t (**__return_ptr)(uint64_t), void, uint64_t, uint64_t))(v46 + 56))(&v102, MEMORY[0x263F8E8F8], v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v47 = swift_bridgeObjectRelease();
    char v48 = v102;
    if (!v102) {
      goto LABEL_57;
    }
    unint64_t v49 = v0;
    uint64_t v50 = v103;
    unint64_t v51 = v104;
    long long v52 = v105;
    Swift::UInt16 v54 = v106;
    unsigned __int8 v53 = v107;
    Swift::UInt v55 = v108;
    __int16 v56 = v109;
    *(void *)(v49 + 208) = v102;
    *(_OWORD *)(v49 + 216) = v50;
    *(_OWORD *)(v49 + 232) = v51;
    *(_OWORD *)(v49 + 248) = v52;
    *(void *)(v49 + 264) = v54;
    *(unsigned char *)(v49 + 272) = v53;
    *(unsigned char *)(v49 + 273) = HIBYTE(v53) & 1;
    *(void *)(v49 + 280) = v55;
    *(unsigned char *)(v49 + 288) = v56;
    unsigned __int8 v57 = v48(v47);
    if (v57)
    {
      uint64_t v58 = v57;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v58 = specialized _copySequenceToContiguousArray<A>(_:)(v83, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v48);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v48);
    uint64_t v59 = *(void *)(v58 + 16);
    if (v59) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = MEMORY[0x263F8EE78];
    uint64_t v0 = v85;
LABEL_32:
    specialized Array.append<A>(contentsOf:)(v62);
    uint64_t v66 = *(void *)(v92 + 16);
    swift_bridgeObjectRelease();
    uint64_t v67 = __OFADD__(v5, v66);
    v5 += v66;
    if (v67) {
      goto LABEL_51;
    }
    unint64_t v22 = v91 + 1;
    unint64_t v21 = *(void *)(v20 + 16);
    if (v91 + 1 == v21) {
      goto LABEL_3;
    }
  }
  uint64_t v94 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
  uint64_t v60 = *(unsigned int *)(v58 + 32);
  float v61 = v60 + v5;
  uint64_t v0 = v85;
  if (__OFADD__(v60, v5)) {
    goto LABEL_52;
  }
  if ((v61 & 0x8000000000000000) != 0 || v61 >> 16) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v62 = v94;
  uint64_t v64 = *(void *)(v94 + 16);
  uint64_t v63 = *(void *)(v94 + 24);
  if (v64 >= v63 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
    uint64_t v62 = v94;
  }
  *(void *)(v62 + 16) = v64 + 1;
  *(_WORD *)(v62 + 2 * v64 + 32) = v61;
  int v65 = v59 - 1;
  if (v59 == 1)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v68 = v64 + 17;
  uint64_t v69 = (unsigned int *)(v58 + 36);
  while (1)
  {
    int v70 = *v69++;
    uint64_t v71 = v70 + v5;
    if (__OFADD__(v70, v5)) {
      break;
    }
    if ((v71 & 0x8000000000000000) != 0 || v71 >> 16) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v94 = v62;
    uint64_t v72 = *(void *)(v62 + 24);
    if (v68 - 16 >= v72 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v68 - 15, 1);
      uint64_t v62 = v94;
    }
    *(void *)(v62 + 16) = v68 - 15;
    *(_WORD *)(v62 + 2 * v68++) = v71;
    if (!--v65) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_49:
  swift_bridgeObjectRelease();
  uint64_t v74 = *v89;
  uint64_t v73 = *v84;
LABEL_44:
  *(void *)(v0 + 520) = v74;
  *(void *)(v0 + 512) = v73;
  uint64_t v93 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)
                                                 + async function pointer to specialized static ShapeResource.generateStaticMesh(positions:faceIndices:));
  uint64_t v75 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v75;
  *uint64_t v75 = v0;
  v75[1] = static ShapeResource.generateStaticMesh(from:);
  return v93(v74, v73);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 544);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  outlined init with copy of Any(v0[15], (uint64_t)(v0 + 7));
  type metadata accessor for ARMeshAnchor();
  swift_dynamicCast();
  uint64_t v1 = (void *)v0[14];
  v0[16] = v1;
  uint64_t v2 = objc_msgSend(v1, sel_geometry);
  uint64_t v3 = objc_msgSend(v2, sel_faces);

  unint64_t v4 = objc_msgSend(v3, sel_primitiveType);
  if (v4 != (id)1)
  {
    __break(1u);
    goto LABEL_8;
  }
  long long v8 = objc_msgSend(v1, sel_geometry);
  v0[17] = v8;
  long long v9 = objc_msgSend(v8, sel_vertices);
  v0[18] = v9;
  long long v10 = objc_msgSend(v8, sel_faces);
  v0[19] = v10;
  long long v11 = (uint64_t)objc_msgSend(v9, sel_count);
  uint64_t v5 = (uint64_t (*)())objc_msgSend(v9, sel_stride);
  if ((unsigned __int128)(v11 * (__int128)((uint64_t)v5 / 4)) >> 64 != (v11 * ((uint64_t)v5 / 4)) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  long long v12 = objc_msgSend(v9, sel_buffer);
  objc_msgSend(v12, sel_contents);
  uint64_t v13 = v12;
  objc_msgSend(v9, sel_offset);
  uint64_t v14 = objc_msgSend(v10, sel_buffer);
  objc_msgSend(v14, sel_contents);
  uint64_t v15 = v14;
  objc_msgSend(v9, sel_count);
  objc_msgSend(v9, sel_stride);
  uint64_t v5 = (uint64_t (*)())objc_msgSend(v10, sel_count);
  if ((unsigned __int128)((uint64_t)v5 * (__int128)3) >> 64 != (3 * (uint64_t)v5) >> 63)
  {
LABEL_9:
    __break(1u);
    return MEMORY[0x270FA2498](v5, v6, v7);
  }
  v0[20] = RECollisionMeshCreateWithFormatV2();
  type metadata accessor for MainActor();
  v0[21] = static MainActor.shared.getter();
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
  char v18 = v17;
  uint64_t v5 = static ShapeResource.generateStaticMesh(from:);
  unint64_t v6 = v16;
  uint64_t v7 = v18;
  return MEMORY[0x270FA2498](v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CollisionMesh;
  uint64_t v5;
  long long v6;
  long long v7;
  void *v8;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  REAssetManagerCollisionMeshAssetCreateFromMesh();
  CollisionMesh = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
  type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  v0[22] = v5;
  *(void *)(v5 + 16) = CollisionMesh;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  long long v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                              + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  long long v8 = (void *)swift_task_alloc();
  v0[23] = v8;
  *long long v8 = v0;
  v8[1] = static ShapeResource.generateStaticMesh(from:);
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = static ShapeResource.generateStaticMesh(from:);
  }
  else {
    uint64_t v2 = static ShapeResource.generateStaticMesh(from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void **)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 136);

  unint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v5 = *(void *)(v0 + 176);
  return v4(v5);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void **)(v0 + 144);
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v3 = *(void **)(v0 + 136);

  swift_release();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void ShapeResource.__coreAsset.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void ShapeResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t ShapeResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t ShapeResource.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22830EC60;
  *(void *)(v9 + 32) = 0x73646E756F62;
  *(void *)(v9 + 40) = 0xE600000000000000;
  swift_retain();
  if (RECollisionShapeAssetGetCollisionShape())
  {
    RECollisionShapeGetBoundingBox();
    long long v16 = v10;
    long long v17 = v11;
  }
  else
  {
    long long v17 = xmmword_22831FD20;
    long long v16 = xmmword_22831FD10;
  }
  *(void *)(v9 + 72) = &type metadata for BoundingBox;
  uint64_t v12 = swift_allocObject();
  *(void *)(v9 + 48) = v12;
  long long v13 = v17;
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  type metadata accessor for ShapeResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ShapeResource()
{
  return ShapeResource.customMirror.getter();
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v40[0] = *(_OWORD *)a1;
  v40[1] = v2;
  uint64_t v41 = *(void *)(a1 + 32);
  outlined init with take of Transform?((uint64_t)v40 + 8, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  unint64_t v3 = v44;
  if (v44)
  {
    outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v40, (uint64_t)v42, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v42, (uint64_t)&v45, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v45)
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
      unint64_t v4 = AnimationLibraryResource.keyedResources.getter();
    }
    else
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
      unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 64);
  unint64_t v38 = v3 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v3 + 32);
  outlined retain of [String : String]((uint64_t)v43);
  uint64_t result = outlined release of AnimationLibraryComponent(a1);
  uint64_t v8 = 0;
  int64_t v9 = 0;
  if (-v6 < 64) {
    uint64_t v10 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v5;
  int64_t v39 = (unint64_t)(63 - v6) >> 6;
  uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  long long v13 = (void *)(MEMORY[0x263F8EE78] + 32);
  unint64_t v37 = v3;
  if ((v10 & v5) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v15 = v14 | (v9 << 6);
  while (1)
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v3 + 56) + 8 * v15);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t result = swift_retain();
      uint64_t v24 = v12;
      BOOL v25 = __OFSUB__(v8--, 1);
      if (v25) {
        break;
      }
      goto LABEL_46;
    }
    unint64_t v26 = v12[3];
    if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0) {
      goto LABEL_54;
    }
    int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v28 = v27 <= 1 ? 1 : v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AnimationResource)>);
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v29 = (uint64_t)(_swift_stdlib_malloc_size(v24) - 32) / 24;
    _OWORD v24[2] = v28;
    v24[3] = 2 * v29;
    uint64_t v30 = v24 + 4;
    uint64_t v31 = v12[3] >> 1;
    long long v13 = &v24[3 * v31 + 4];
    uint64_t v32 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
    if (v12[2])
    {
      if (v24 != v12 || v30 >= &v12[3 * v31 + 4]) {
        memmove(v30, v12 + 4, 24 * v31);
      }
      swift_bridgeObjectRetain();
      swift_retain();
      long long v12[2] = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    uint64_t result = swift_release();
    unint64_t v3 = v37;
    BOOL v25 = __OFSUB__(v32, 1);
    uint64_t v8 = v32 - 1;
    if (v25) {
      break;
    }
LABEL_46:
    *long long v13 = v21;
    v13[1] = v22;
    _OWORD v13[2] = v23;
    v13 += 3;
    uint64_t v12 = v24;
    if (v11) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_53;
    }
    if (v16 >= v39) {
      goto LABEL_48;
    }
    unint64_t v17 = *(void *)(v38 + 8 * v16);
    int64_t v18 = v9 + 1;
    if (!v17)
    {
      int64_t v18 = v9 + 2;
      if (v9 + 2 >= v39) {
        goto LABEL_48;
      }
      unint64_t v17 = *(void *)(v38 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v9 + 3;
        if (v9 + 3 >= v39) {
          goto LABEL_48;
        }
        unint64_t v17 = *(void *)(v38 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v9 + 4;
          if (v9 + 4 >= v39) {
            goto LABEL_48;
          }
          unint64_t v17 = *(void *)(v38 + 8 * v18);
          if (!v17)
          {
            int64_t v19 = v9 + 5;
            if (v9 + 5 >= v39)
            {
LABEL_48:
              uint64_t result = outlined consume of [String : AnimationResource].Iterator._Variant();
              unint64_t v34 = v12[3];
              if (v34 >= 2)
              {
                unint64_t v35 = v34 >> 1;
                BOOL v25 = __OFSUB__(v35, v8);
                uint64_t v36 = v35 - v8;
                if (v25) {
                  goto LABEL_56;
                }
                long long v12[2] = v36;
              }
              return (uint64_t)v12;
            }
            unint64_t v17 = *(void *)(v38 + 8 * v19);
            if (!v17)
            {
              while (1)
              {
                int64_t v18 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_55;
                }
                if (v18 >= v39) {
                  goto LABEL_48;
                }
                unint64_t v17 = *(void *)(v38 + 8 * v18);
                ++v19;
                if (v17) {
                  goto LABEL_27;
                }
              }
            }
            int64_t v18 = v9 + 5;
          }
        }
      }
    }
LABEL_27:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v9 = v18;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  void (*v2)(void);
  uint64_t result;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  long long v2 = *(void (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  uint64_t result = specialized MeshBuffer.Iterator.next()();
  unint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v7)
      {
        int64_t v9 = v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          unint64_t v11 = 1;
        }
        else {
          unint64_t v11 = v10;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
        uint64_t v12 = (void *)swift_allocObject();
        long long v13 = _swift_stdlib_malloc_size(v12);
        unint64_t v14 = v13 - 32;
        if (v13 < 32) {
          unint64_t v14 = v13 - 25;
        }
        unint64_t v15 = v14 >> 3;
        long long v12[2] = v11;
        void v12[3] = 2 * (v14 >> 3);
        int64_t v16 = (unint64_t)(v12 + 4);
        unint64_t v17 = v4[3] >> 1;
        if (v4[2])
        {
          if (v12 != v4 || v16 >= (unint64_t)&v4[v17 + 4]) {
            memmove(v12 + 4, v4 + 4, 8 * v17);
          }
          v4[2] = 0;
        }
        uint64_t v8 = (uint64_t *)(v16 + 8 * v17);
        uint64_t v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        uint64_t result = swift_release();
        unint64_t v4 = v12;
      }
      int64_t v19 = __OFSUB__(v7--, 1);
      if (v19) {
        break;
      }
      *v8++ = v6;
      uint64_t result = specialized MeshBuffer.Iterator.next()();
      uint64_t v6 = result;
      if (v20) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = 0;
LABEL_23:
  swift_release();
  uint64_t result = swift_release();
  uint64_t v21 = v4[3];
  if (v21 < 2) {
    return (uint64_t)v4;
  }
  uint64_t v22 = v21 >> 1;
  int64_t v19 = __OFSUB__(v22, v7);
  uint64_t v23 = v22 - v7;
  if (!v19)
  {
    v4[2] = v23;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  void (*v2)(void);
  uint64_t result;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  long long v2 = *(void (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  uint64_t result = specialized MeshBuffer.Iterator.next()();
  unint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v7)
      {
        int64_t v9 = v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1) {
          unint64_t v11 = 1;
        }
        else {
          unint64_t v11 = v10;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
        uint64_t v12 = (void *)swift_allocObject();
        long long v13 = _swift_stdlib_malloc_size(v12);
        unint64_t v14 = v13 - 32;
        if (v13 < 32) {
          unint64_t v14 = v13 - 25;
        }
        unint64_t v15 = v14 >> 3;
        long long v12[2] = v11;
        void v12[3] = 2 * (v14 >> 3);
        int64_t v16 = (unint64_t)(v12 + 4);
        unint64_t v17 = v4[3] >> 1;
        if (v4[2])
        {
          if (v12 != v4 || v16 >= (unint64_t)&v4[v17 + 4]) {
            memmove(v12 + 4, v4 + 4, 8 * v17);
          }
          v4[2] = 0;
        }
        uint64_t v8 = (uint64_t *)(v16 + 8 * v17);
        uint64_t v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        uint64_t result = swift_release();
        unint64_t v4 = v12;
      }
      int64_t v19 = __OFSUB__(v7--, 1);
      if (v19) {
        break;
      }
      *v8++ = v6;
      uint64_t result = specialized MeshBuffer.Iterator.next()();
      uint64_t v6 = result;
      if (v20) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = 0;
LABEL_23:
  swift_release();
  uint64_t result = swift_release();
  uint64_t v21 = v4[3];
  if (v21 < 2) {
    return (uint64_t)v4;
  }
  uint64_t v22 = v21 >> 1;
  int64_t v19 = __OFSUB__(v22, v7);
  uint64_t v23 = v22 - v7;
  if (!v19)
  {
    v4[2] = v23;
    return (uint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, (uint64_t (*)(void))specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
}

{
  return specialized _copySequenceToContiguousArray<A>(_:)(a1, specialized MeshBuffer.Iterator.next(), &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    uint64_t PinCount = REPinComponentGetPinCount();
  }
  else {
    uint64_t PinCount = 0;
  }
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  if (PinCount >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = MEMORY[0x263F8EE78] + 32;
    uint64_t v26 = PinCount;
    while (1)
    {
      REPinComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (!result) {
        goto LABEL_34;
      }
      REPinComponentGetPinNameAtIndex();
      uint64_t v6 = String.init(cString:)();
      uint64_t v8 = v7;
      REPinComponentGetPinOffsetPoseAtIndex();
      long long v10 = v9;
      HIDWORD(v10) = HIDWORD(v28);
      long long v27 = v11;
      long long v28 = v10;
      if (REPinComponentIsSkeletalJointPinAtIndex())
      {
        REPinComponentGetSkeletalJointNameAtIndex();
        uint64_t v12 = String.init(cString:)();
        uint64_t v14 = v13;
        swift_weakInit();
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        long long v34 = v28;
        long long v35 = v27;
        swift_weakAssign();
        uint64_t v30 = v6;
        uint64_t v31 = v8;
        swift_bridgeObjectRelease();
        uint64_t v32 = v12;
        uint64_t v33 = v14;
        uint64_t PinCount = v26;
      }
      else
      {
        swift_weakInit();
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        long long v34 = v28;
        long long v35 = v27;
        swift_weakAssign();
        uint64_t v30 = v6;
        uint64_t v31 = v8;
        swift_bridgeObjectRelease();
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      outlined init with take of GeometricPin((uint64_t)v29, (uint64_t)v36);
      uint64_t result = outlined init with take of GeometricPin((uint64_t)v36, (uint64_t)v37);
      if (!v2)
      {
        unint64_t v15 = v1[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_32;
        }
        int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v16;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeometricPin>);
        int64_t v18 = (void *)swift_allocObject();
        uint64_t v19 = (uint64_t)(_swift_stdlib_malloc_size(v18) - 32) / 80;
        v18[2] = v17;
        _OWORD v18[3] = 2 * v19;
        uint64_t PinCount = v26;
        unint64_t v20 = (unint64_t)(v18 + 4);
        uint64_t v21 = v1[3] >> 1;
        if (v1[2])
        {
          if (v18 < v1 || v20 >= (unint64_t)&v1[10 * v21 + 4])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v18 != v1)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v1[2] = 0;
        }
        uint64_t v4 = v20 + 80 * v21;
        uint64_t v2 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        uint64_t result = swift_release();
        uint64_t v1 = v18;
      }
      BOOL v22 = __OFSUB__(v2--, 1);
      if (v22)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined init with take of GeometricPin((uint64_t)v37, v4);
      v4 += 80;
      if (++v3 >= PinCount) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v2 = 0;
LABEL_27:
  memset(v36, 0, sizeof(v36));
  swift_release();
  uint64_t result = outlined destroy of GeometricPin?((uint64_t)v36);
  unint64_t v23 = v1[3];
  if (v23 < 2) {
    return (uint64_t)v1;
  }
  unint64_t v24 = v23 >> 1;
  BOOL v22 = __OFSUB__(v24, v2);
  uint64_t v25 = v24 - v2;
  if (!v22)
  {
    v1[2] = v25;
    return (uint64_t)v1;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = *(uint64_t (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v6(0);
  uint64_t result = ((uint64_t (*)(uint64_t))a2)(v7);
  long long v10 = (void *)MEMORY[0x263F8EE78];
  if ((v11 & 1) == 0)
  {
    uint64_t v12 = result;
    uint64_t v13 = v9;
    uint64_t v14 = 0;
    unint64_t v15 = (uint64_t *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v14)
      {
        unint64_t v16 = v10[3];
        if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        __swift_instantiateConcreteTypeFromMangledName(a3);
        uint64_t v19 = (void *)swift_allocObject();
        int64_t v20 = _swift_stdlib_malloc_size(v19);
        uint64_t v21 = v20 - 32;
        if (v20 < 32) {
          uint64_t v21 = v20 - 17;
        }
        uint64_t v22 = v21 >> 4;
        _OWORD v19[2] = v18;
        _OWORD v19[3] = 2 * (v21 >> 4);
        unint64_t v23 = (unint64_t)(v19 + 4);
        uint64_t v24 = v10[3] >> 1;
        if (v10[2])
        {
          if (v19 != v10 || v23 >= (unint64_t)&v10[2 * v24 + 4]) {
            memmove(v19 + 4, v10 + 4, 16 * v24);
          }
          v10[2] = 0;
        }
        unint64_t v15 = (uint64_t *)(v23 + 16 * v24);
        uint64_t v14 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
        uint64_t result = swift_release();
        long long v10 = v19;
      }
      BOOL v26 = __OFSUB__(v14--, 1);
      if (v26) {
        break;
      }
      *unint64_t v15 = v12;
      v15[1] = v13;
      v15 += 2;
      uint64_t result = a2();
      uint64_t v12 = result;
      uint64_t v13 = v27;
      if (v28) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v14 = 0;
LABEL_23:
  swift_release();
  uint64_t result = swift_release();
  unint64_t v29 = v10[3];
  if (v29 < 2) {
    return (uint64_t)v10;
  }
  unint64_t v30 = v29 >> 1;
  BOOL v26 = __OFSUB__(v30, v14);
  uint64_t v31 = v30 - v14;
  if (!v26)
  {
    v10[2] = v31;
    return (uint64_t)v10;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t result;
  void *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  uint64_t v6 = *(uint64_t (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v6(0);
  uint64_t result = ((uint64_t (*)(uint64_t))a2)(v7);
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  if ((result & 0x100000000) == 0)
  {
    long long v10 = result;
    char v11 = 0;
    uint64_t v12 = (_DWORD *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v11)
      {
        uint64_t v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          unint64_t v15 = 1;
        }
        else {
          unint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(a3);
        unint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        uint64_t v18 = v17 - 32;
        if (v17 < 32) {
          uint64_t v18 = v17 - 29;
        }
        uint64_t v19 = v18 >> 2;
        _OWORD v16[2] = v15;
        _OWORD v16[3] = 2 * (v18 >> 2);
        int64_t v20 = (unint64_t)(v16 + 4);
        uint64_t v21 = v9[3] >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v20 >= (unint64_t)v9 + 4 * v21 + 32) {
            memmove(v16 + 4, v9 + 4, 4 * v21);
          }
          v9[2] = 0;
        }
        uint64_t v12 = (_DWORD *)(v20 + 4 * v21);
        char v11 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        uint64_t result = swift_release();
        uint64_t v9 = v16;
      }
      unint64_t v23 = __OFSUB__(v11--, 1);
      if (v23) {
        break;
      }
      *v12++ = v10;
      uint64_t result = a2();
      long long v10 = result;
      if ((result & 0x100000000) != 0) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v11 = 0;
LABEL_23:
  swift_release();
  uint64_t result = swift_release();
  uint64_t v24 = v9[3];
  if (v24 < 2) {
    return (uint64_t)v9;
  }
  uint64_t v25 = v24 >> 1;
  unint64_t v23 = __OFSUB__(v25, v11);
  BOOL v26 = v25 - v11;
  if (!v23)
  {
    v9[2] = v26;
    return (uint64_t)v9;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t result;
  void *v9;
  __int16 v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  uint64_t v6 = *(uint64_t (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v6(0);
  uint64_t result = ((uint64_t (*)(uint64_t))a2)(v7);
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  if ((result & 0x10000) == 0)
  {
    long long v10 = result;
    char v11 = 0;
    uint64_t v12 = (_WORD *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v11)
      {
        uint64_t v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_29;
        }
        uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          unint64_t v15 = 1;
        }
        else {
          unint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(a3);
        unint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = _swift_stdlib_malloc_size(v16);
        if (v17 >= 32) {
          uint64_t v18 = v17 - 32;
        }
        else {
          uint64_t v18 = v17 - 31;
        }
        _OWORD v16[2] = v15;
        _OWORD v16[3] = v18 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v19 = (unint64_t)(v16 + 4);
        int64_t v20 = v9[3];
        uint64_t v21 = v20 >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v19 >= (unint64_t)v9 + 2 * v21 + 32) {
            memmove(v16 + 4, v9 + 4, v20 & 0xFFFFFFFFFFFFFFFELL);
          }
          v9[2] = 0;
        }
        unint64_t v23 = v18 >> 1;
        uint64_t v12 = (_WORD *)(v19 + 2 * v21);
        char v11 = v23 - v21;
        uint64_t result = swift_release();
        uint64_t v9 = v16;
      }
      uint64_t v24 = __OFSUB__(v11--, 1);
      if (v24) {
        break;
      }
      *v12++ = v10;
      uint64_t result = a2();
      long long v10 = result;
      if ((result & 0x10000) != 0) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  char v11 = 0;
LABEL_24:
  swift_release();
  uint64_t result = swift_release();
  uint64_t v25 = v9[3];
  if (v25 < 2) {
    return (uint64_t)v9;
  }
  BOOL v26 = v25 >> 1;
  uint64_t v24 = __OFSUB__(v26, v11);
  uint64_t v27 = v26 - v11;
  if (!v24)
  {
    v9[2] = v27;
    return (uint64_t)v9;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t result;
  void *v9;
  char v10;
  size_t v11;
  unsigned char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  unint64_t v18;
  size_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  uint64_t v6 = *(uint64_t (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v6(0);
  uint64_t result = ((uint64_t (*)(uint64_t))a2)(v7);
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  if ((result & 0x100) == 0)
  {
    long long v10 = result;
    char v11 = 0;
    uint64_t v12 = (unsigned char *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v11)
      {
        uint64_t v13 = v9[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        uint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1) {
          unint64_t v15 = 1;
        }
        else {
          unint64_t v15 = v14;
        }
        __swift_instantiateConcreteTypeFromMangledName(a3);
        unint64_t v16 = (void *)swift_allocObject();
        int64_t v17 = 2 * _swift_stdlib_malloc_size(v16) - 64;
        _OWORD v16[2] = v15;
        _OWORD v16[3] = v17;
        uint64_t v18 = (unint64_t)(v16 + 4);
        uint64_t v19 = v9[3] >> 1;
        if (v9[2])
        {
          if (v16 != v9 || v18 >= (unint64_t)v9 + v19 + 32) {
            memmove(v16 + 4, v9 + 4, v19);
          }
          v9[2] = 0;
        }
        uint64_t v12 = (unsigned char *)(v18 + v19);
        char v11 = (v17 >> 1) - v19;
        uint64_t result = swift_release();
        uint64_t v9 = v16;
      }
      uint64_t v21 = __OFSUB__(v11--, 1);
      if (v21) {
        break;
      }
      *v12++ = v10;
      uint64_t result = a2();
      long long v10 = result;
      if ((result & 0x100) != 0) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v11 = 0;
LABEL_21:
  swift_release();
  uint64_t result = swift_release();
  uint64_t v22 = v9[3];
  if (v22 < 2) {
    return (uint64_t)v9;
  }
  unint64_t v23 = v22 >> 1;
  uint64_t v21 = __OFSUB__(v23, v11);
  uint64_t v24 = v23 - v11;
  if (!v21)
  {
    v9[2] = v24;
    return (uint64_t)v9;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2(0);
  unint64_t result = specialized MeshBuffer.Iterator.next()();
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if ((result & 0x100000000) == 0)
  {
    int v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = (_DWORD *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if (!v6)
      {
        unint64_t v8 = v4[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_28;
        }
        int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v9;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
        char v11 = (void *)swift_allocObject();
        int64_t v12 = _swift_stdlib_malloc_size(v11);
        uint64_t v13 = v12 - 32;
        if (v12 < 32) {
          uint64_t v13 = v12 - 29;
        }
        uint64_t v14 = v13 >> 2;
        v11[2] = v10;
        void v11[3] = 2 * (v13 >> 2);
        unint64_t v15 = (unint64_t)(v11 + 4);
        uint64_t v16 = v4[3] >> 1;
        if (v4[2])
        {
          if (v11 != v4 || v15 >= (unint64_t)v4 + 4 * v16 + 32) {
            memmove(v11 + 4, v4 + 4, 4 * v16);
          }
          v4[2] = 0;
        }
        uint64_t v7 = (_DWORD *)(v15 + 4 * v16);
        uint64_t v6 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        unint64_t result = swift_release();
        uint64_t v4 = v11;
      }
      BOOL v18 = __OFSUB__(v6--, 1);
      if (v18) {
        break;
      }
      *v7++ = v5;
      unint64_t result = specialized MeshBuffer.Iterator.next()();
      int v5 = result;
      if ((result & 0x100000000) != 0) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v6 = 0;
LABEL_23:
  swift_release();
  unint64_t result = swift_release();
  unint64_t v19 = v4[3];
  if (v19 < 2) {
    return (unint64_t)v4;
  }
  unint64_t v20 = v19 >> 1;
  BOOL v18 = __OFSUB__(v20, v6);
  uint64_t v21 = v20 - v6;
  if (!v18)
  {
    v4[2] = v21;
    return (unint64_t)v4;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = v2;
  uint64_t v29 = v3;
  uint64_t v4 = v2(0);
  if (v5)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
  }
  specialized MeshBuffer.Iterator.next()((uint64_t)&v24);
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  if ((v25 & 1) == 0)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (void *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      uint64_t v9 = v24;
      if (!v7)
      {
        unint64_t v10 = v6[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_29;
        }
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshJointInfluence>);
        uint64_t v13 = (void *)swift_allocObject();
        int64_t v14 = _swift_stdlib_malloc_size(v13);
        uint64_t v15 = v14 - 32;
        if (v14 < 32) {
          uint64_t v15 = v14 - 25;
        }
        uint64_t v16 = v15 >> 3;
        _OWORD v13[2] = v12;
        v13[3] = 2 * (v15 >> 3);
        unint64_t v17 = (unint64_t)(v13 + 4);
        uint64_t v18 = v6[3] >> 1;
        if (v6[2])
        {
          if (v13 != v6 || v17 >= (unint64_t)&v6[v18 + 4]) {
            memmove(v13 + 4, v6 + 4, 8 * v18);
          }
          _OWORD v6[2] = 0;
        }
        unint64_t v8 = (void *)(v17 + 8 * v18);
        uint64_t v7 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release();
        uint64_t v6 = v13;
      }
      BOOL v20 = __OFSUB__(v7--, 1);
      if (v20) {
        break;
      }
      *v8++ = v9;
      specialized MeshBuffer.Iterator.next()((uint64_t)&v24);
      if (v25) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = 0;
LABEL_24:
  swift_release();
  swift_release();
  unint64_t v21 = v6[3];
  if (v21 >= 2)
  {
    unint64_t v22 = v21 >> 1;
    BOOL v20 = __OFSUB__(v22, v7);
    uint64_t v23 = v22 - v7;
    if (!v20)
    {
      _OWORD v6[2] = v23;
      return;
    }
LABEL_30:
    __break(1u);
  }
}

BOOL specialized static ShapeResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 32);
  while (1)
  {
    long long v16 = v4;
    float v8 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v17 = v5;
    float v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v6 = v8 == v9;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v6) {
        break;
      }
      BOOL v6 = 0;
      BOOL v2 = 0;
      if (v3 == 2) {
        return v2;
      }
    }
  }
  if (v8 != v9) {
    return 0;
  }
  uint64_t v10 = 0;
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    long long v14 = v11;
    float v13 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
    long long v15 = v12;
    BOOL v2 = v13 == *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
    if (v10 == 3) {
      break;
    }
    while (1)
    {
      ++v10;
      if (v2) {
        break;
      }
      BOOL v2 = 0;
      if (v10 == 3) {
        return v2;
      }
    }
  }
  return v2;
}

uint64_t specialized static ShapeResource.generateSphere(radius:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  uint64_t v1 = v11;
  uint64_t v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  uint64_t Sphere = REAssetManagerCollisionShapeAssetCreateSphere();
  uint64_t v4 = type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = Sphere;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = &protocol witness table for ShapeResource;
  *(void *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

uint64_t specialized static ShapeResource.generateBox(size:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v10);
  uint64_t v1 = v11;
  uint64_t v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  uint64_t Box = REAssetManagerCollisionShapeAssetCreateBox();
  uint64_t v4 = type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = Box;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = &protocol witness table for ShapeResource;
  *(void *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  RERelease();
  return v5;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 96) = REBoxShapeCreate();
  type metadata accessor for MainActor();
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized static ShapeResource.generateBox(size:), v2, v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  void *v9;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 4));
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 4));
  unint64_t result = REAssetManagerCollisionShapeAssetCreateFromCollisionShape();
  if (result)
  {
    uint64_t v5 = result;
    type metadata accessor for ShapeResource();
    long long v6 = swift_allocObject();
    v0[14] = v6;
    *(void *)(v6 + 16) = v5;
    REPoseIdentity();
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = v8;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
    float v9 = (void *)swift_task_alloc();
    v0[15] = v9;
    *float v9 = v0;
    v9[1] = specialized static ShapeResource.generateBox(size:);
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[16] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized static ShapeResource.generateBox(size:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[14];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL specialized static ShapeResource.isSingleUntransformedShape(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 != 1) {
      return 0;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
  {
    return 0;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    long long v11 = *(_OWORD *)(MEMORY[0x22A689930](0, a1) + 32);
    swift_unknownObjectRelease();
    long long v2 = v11;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return 0;
  }
  long long v2 = *(_OWORD *)(*(void *)(a1 + 32) + 32);
LABEL_6:
  uint64_t v3 = 0;
  while (1)
  {
    long long v15 = v2;
    float v10 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v4 = v10 == 0.0;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v4) {
        break;
      }
      BOOL v4 = 0;
      BOOL result = 0;
      if (v3 == 2) {
        return result;
      }
    }
  }
  if (v10 != 0.0) {
    return 0;
  }
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v7 = MEMORY[0x22A689930](0, a1);
  }
  else {
    uint64_t v7 = swift_retain();
  }
  long long v12 = *(_OWORD *)(v7 + 48);
  swift_release();
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v8 = 0;
  while (1)
  {
    long long v13 = v12;
    float v9 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
    long long v14 = static simd_quatf.identity;
    BOOL result = v9 == *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3)));
    if (v8 == 3) {
      break;
    }
    while (1)
    {
      ++v8;
      if (result) {
        break;
      }
      BOOL result = 0;
      if (v8 == 3) {
        return result;
      }
    }
  }
  return result;
}

uint64_t specialized static ShapeResource.findShapeResource(_:)(unint64_t a1)
{
  uint64_t result = specialized static ShapeResource.isSingleUntransformedShape(_:)(a1);
  if (result)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      return MEMORY[0x22A689930](0, a1);
    }
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      swift_retain();
      return v3;
    }
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v36);
  uint64_t v5 = v37;
  uint64_t v6 = v38;
  __swift_project_boxed_opaque_existential_1(v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  REAssetManagerFindAssetsOfType_REKit_Only();
  uint64_t result = REAssetDynamicArrayGetSize();
  if (result < 0)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  if (!result)
  {
LABEL_56:
    RERelease();
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v10 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v8 == v7) {
      goto LABEL_65;
    }
    uint64_t Asset = REAssetDynamicArrayGetAsset();
    if (Asset) {
      break;
    }
LABEL_9:
    if (++v8 == v7) {
      goto LABEL_56;
    }
  }
  uint64_t v12 = Asset;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13 != 1) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v9 + 16);
    if (v13 != 1) {
      goto LABEL_36;
    }
  }
  if (v10)
  {
    long long v32 = *(_OWORD *)(MEMORY[0x22A689930](0, a1) + 32);
    swift_unknownObjectRelease();
    long long v14 = v32;
  }
  else
  {
    if (!*(void *)(v9 + 16)) {
      goto LABEL_66;
    }
    long long v14 = *(_OWORD *)(*(void *)(a1 + 32) + 32);
  }
  uint64_t v15 = 0;
  BOOL v16 = 1;
  while (1)
  {
    while (!v16)
    {
      if (v15 == 2) {
        goto LABEL_36;
      }
      BOOL v16 = 0;
      ++v15;
    }
    long long v35 = v14;
    float v17 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    BOOL v16 = v17 == 0.0;
    if (v15 == 2) {
      break;
    }
    ++v15;
  }
  if (v17 == 0.0)
  {
    if (v10) {
      uint64_t v18 = MEMORY[0x22A689930](0, a1);
    }
    else {
      uint64_t v18 = swift_retain();
    }
    long long v31 = *(_OWORD *)(v18 + 48);
    uint64_t result = swift_release();
    if (one-time initialization token for identity != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v19 = 0;
    BOOL v20 = 1;
    while (1)
    {
      while (!v20)
      {
        if (v19 == 3) {
          goto LABEL_36;
        }
        BOOL v20 = 0;
        ++v19;
      }
      long long v33 = v31;
      float v21 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      long long v34 = static simd_quatf.identity;
      float v22 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      BOOL v20 = v21 == v22;
      if (v19 == 3) {
        break;
      }
      ++v19;
    }
    if (v21 == v22) {
      goto LABEL_71;
    }
  }
LABEL_36:
  if (RECollisionShapeAssetGetType() != 7 || RECompoundShapeAssetGetChildCount() != v13) {
    goto LABEL_9;
  }
  if (v13 < 0) {
    goto LABEL_67;
  }
  if (v13)
  {
    uint64_t v23 = v9;
    uint64_t v24 = 0;
    while (v13 != v24)
    {
      if (v10) {
        uint64_t v25 = MEMORY[0x22A689930](v24, a1);
      }
      else {
        uint64_t v25 = swift_retain();
      }
      uint64_t v26 = *(void *)(v25 + 16);
      swift_release();
      uint64_t ChildShape = RECompoundShapeAssetGetChildShape();
      if (!ChildShape || v26 != ChildShape) {
        goto LABEL_8;
      }
      if (v10) {
        MEMORY[0x22A689930](v24, a1);
      }
      else {
        swift_retain();
      }
      swift_release();
      RECompoundShapeAssetGetChildPose();
      if (!REPoseAreAlmostEqualWithDefaultTolerance())
      {
LABEL_8:
        uint64_t v9 = v23;
        goto LABEL_9;
      }
      if (v13 == ++v24) {
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    return MEMORY[0x22A689930](0, a1);
  }
LABEL_57:
  id v28 = (id)REAssetGetSwiftObject();
  type metadata accessor for ShapeResource();
  if (v28)
  {
    uint64_t v3 = swift_dynamicCastClass();
    if (!v3) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v12;
    REPoseIdentity();
    *(_OWORD *)(v3 + 32) = v29;
    *(_OWORD *)(v3 + 48) = v30;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v3;
}

uint64_t specialized static ShapeResource.__makeShapeResource(_:)(unint64_t a1)
{
  uint64_t result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (result) {
    return result;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v4 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = swift_slowAlloc();
  if ((unint64_t)(v4 - 0x400000000000000) >> 59 != 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = (void *)result;
  uint64_t result = swift_slowAlloc();
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    if (v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (_OWORD *)(result + 16);
        do
        {
          uint64_t v9 = *(void *)(MEMORY[0x22A689930](v7, a1) + 16);
          swift_unknownObjectRelease();
          v5[v7] = v9;
          uint64_t v10 = MEMORY[0x22A689930](v7, a1);
          long long v23 = *(_OWORD *)(v10 + 48);
          long long v24 = *(_OWORD *)(v10 + 32);
          swift_unknownObjectRelease();
          *(v8 - 1) = v24;
          *uint64_t v8 = v23;
          v8 += 2;
          ++v7;
        }
        while (v4 != v7);
      }
      else
      {
        long long v11 = (uint64_t *)(a1 + 32);
        uint64_t v12 = (_OWORD *)(result + 16);
        uint64_t v13 = v5;
        uint64_t v14 = v4;
        do
        {
          uint64_t v15 = *v11++;
          *v13++ = *(void *)(v15 + 16);
          long long v16 = *(_OWORD *)(v15 + 48);
          *(v12 - 1) = *(_OWORD *)(v15 + 32);
          *uint64_t v12 = v16;
          v12 += 2;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t v17 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v17, (uint64_t)v25);
    uint64_t v18 = v26;
    uint64_t v19 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    uint64_t Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v3 + 32) = v21;
    *(_OWORD *)(v3 + 48) = v22;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x22A696500](v6, -1, -1);
    MEMORY[0x22A696500](v5, -1, -1);
    return v3;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ShapeResource()
{
  return self;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation10MeshBufferVys5SIMD3VySfGG_AKs5NeverOTB504_s10d23Kit13ShapeResourceC0A10e43E18generateStaticMesh4fromAcA0hD0C_tYaKFZs5H12VySfGAKXEfU_0D3Kit0fM0CAFE8InstanceVTf1cn_nTf4ng_n(uint64_t a1, float32x4_t *a2)
{
  uint64_t v21 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v4 = *(void (**)(void))(a1 + 48);
  swift_retain();
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4(0);
  uint64_t v5 = specialized MeshBuffer.Iterator.next()();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    float32x4_t v19 = a2[3];
    float32x4_t v20 = a2[2];
    float32x4_t v17 = a2[5];
    float32x4_t v18 = a2[4];
    do
    {
      unint64_t v11 = *(void *)(v21 + 16);
      unint64_t v10 = *(void *)(v21 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      v12.i64[0] = v8;
      v12.i64[1] = v9;
      float32x4_t v13 = vaddq_f32(v17, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_f32((float32x4_t)vdupq_n_s32(v8), v20), v19, (float32x2_t)v8, 1), v18, v12, 2));
      v13.i32[3] = 0;
      *(void *)(v21 + 16) = v11 + 1;
      *(float32x4_t *)(v21 + 16 * v11 + 32) = v13;
      uint64_t v8 = specialized MeshBuffer.Iterator.next()();
      uint64_t v9 = v14;
    }
    while ((v15 & 1) == 0);
  }
  swift_release();
  swift_release();
  return v21;
}

uint64_t specialized static ShapeResource.generateBox(size:)(__n128 a1)
{
  v1[1] = a1;
  return MEMORY[0x270FA2498](specialized static ShapeResource.generateBox(size:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError;
  if (!lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError;
  if (!lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResourceError and conformance ShapeResourceError);
  }
  return result;
}

uint64_t specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return MEMORY[0x270FA2498](specialized static ShapeResource.generateStaticMesh(positions:faceIndices:), 0, 0);
}

uint64_t specialized static ShapeResource.generateStaticMesh(positions:faceIndices:)()
{
  uint64_t v1 = RECollisionMeshCreateFromSIMDPositions();
  v0[12] = v1;
  if (v1)
  {
    type metadata accessor for MainActor();
    v0[13] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](specialized static ShapeResource.generateStaticMesh(positions:faceIndices:), v3, v2);
  }
  else
  {
    lazy protocol witness table accessor for type ShapeResourceError and conformance ShapeResourceError();
    swift_allocError();
    *uint64_t v4 = 0;
    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t CollisionMesh;
  uint64_t v5;
  long long v6;
  long long v7;
  void *v8;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  REAssetManagerCollisionMeshAssetCreateFromMesh();
  CollisionMesh = REAssetManagerCollisionShapeAssetCreateCollisionMesh();
  type metadata accessor for ShapeResource();
  uint64_t v5 = swift_allocObject();
  v0[14] = v5;
  *(void *)(v5 + 16) = CollisionMesh;
  REPoseIdentity();
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v7;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  unint64_t v10 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                              + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = specialized static ShapeResource.generateStaticMesh(positions:faceIndices:);
  return v10();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[16] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](specialized static ShapeResource.generateStaticMesh(positions:faceIndices:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[14];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t type metadata accessor for ARMeshAnchor()
{
  unint64_t result = lazy cache variable for type metadata for ARMeshAnchor;
  if (!lazy cache variable for type metadata for ARMeshAnchor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARMeshAnchor);
  }
  return result;
}

uint64_t sub_22820B560()
{
  return MEMORY[0x270FA0238](v0, 48, 15);
}

unint64_t lazy protocol witness table accessor for type ShapeResource and conformance ShapeResource()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource;
  if (!lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource)
  {
    type metadata accessor for ShapeResource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeResource and conformance ShapeResource);
  }
  return result;
}

uint64_t method lookup function for ShapeResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ShapeResource);
}

uint64_t dispatch thunk of ShapeResource.coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ShapeResource.bounds.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ShapeResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ShapeResource.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ShapeResource.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

unsigned char *storeEnumTagSinglePayload for ShapeResourceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22820B7ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeResourceError()
{
  return &type metadata for ShapeResourceError;
}

uint64_t static __RKEntityInteraction.interaction(for:entityLookupTable:)(uint64_t a1, unint64_t a2)
{
  type metadata accessor for __RKEntityTrigger();
  unint64_t v4 = static __RKEntityTrigger.trigger(for:entityLookupTable:)(a1, a2);
  type metadata accessor for __RKEntityAction();
  uint64_t v5 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v6 = static __RKEntityAction.action(for:entityLookupTable:)(a1 + *(int *)(v5 + 20), a2);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(v5 + 24));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  type metadata accessor for __RKEntityInteraction();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v10 = __RKEntityInteraction.init(trigger:action:)(v4, v6);
  swift_beginAccess();
  *(void *)(v10 + 48) = v9;
  *(void *)(v10 + 56) = v8;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t __RKEntityInteractionManager.areInteractionsEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t (*__RKEntityInteractionManager.areInteractionsEnabled.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityInteractionManager.interactionsDisabledForTests.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t __RKEntityInteractionManager.interactionsDisabledForTests.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 25) = a1;
  return result;
}

uint64_t (*__RKEntityInteractionManager.interactionsDisabledForTests.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityInteractionManager.customTriggerIdentifiers.getter()
{
  uint64_t v11 = MEMORY[0x263F8EE88];
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 64);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_15:
    uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_14;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](i, v1);
      }
      else {
        swift_retain();
      }
      swift_beginAccess();
      type metadata accessor for __RKCustomTrigger();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        Swift::Int v6 = *(void *)(v5 + 24);
        Swift::Int v7 = *(void *)(v5 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v10, v6, v7);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.customActionIdentifiers.getter()
{
  uint64_t v11 = MEMORY[0x263F8EE88];
  swift_beginAccess();
  unint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = specialized __RKEntityInteractionManager.actions(for:)(v0);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_15:
    uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](i, v1);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityCustomAction();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        Swift::Int v6 = *(void *)(v5 + 128);
        Swift::Int v7 = *(void *)(v5 + 136);
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v10, v6, v7);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v11;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 64);
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t v16 = v1;
  if (v1 >> 62) {
    goto LABEL_29;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2)
  {
LABEL_30:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x263F8EE78];
  }
LABEL_3:
  uint64_t v3 = 0;
  uint64_t v17 = v2;
  while (1)
  {
    if ((v16 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22A689930](v3, v16);
      BOOL v5 = __OFADD__(v3, 1);
      uint64_t v6 = v3 + 1;
      if (v5) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_retain();
      BOOL v5 = __OFADD__(v3, 1);
      uint64_t v6 = v3 + 1;
      if (v5)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        swift_bridgeObjectRetain_n();
        uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        if (!v2) {
          goto LABEL_30;
        }
        goto LABEL_3;
      }
    }
    swift_beginAccess();
    swift_retain();
    unint64_t v7 = getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter();
    swift_release();
    if (v7 >> 62) {
      break;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v18 = v6;
    if (v8) {
      goto LABEL_13;
    }
LABEL_4:
    unint64_t v4 = MEMORY[0x263F8EE78];
LABEL_5:
    swift_bridgeObjectRelease_n();
    specialized Array.append<A>(contentsOf:)(v4);
    swift_release();
    uint64_t v3 = v18;
    if (v18 == v17)
    {
      swift_bridgeObjectRelease_n();
      return v20;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v6;
  if (!v8) {
    goto LABEL_4;
  }
LABEL_13:
  uint64_t v9 = 4;
  unint64_t v4 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x22A689930](v9 - 4, v7);
      uint64_t v13 = v9 - 3;
      if (__OFADD__(v11, 1)) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v7 + 8 * v9);
      swift_retain();
      uint64_t v13 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    uint64_t v14 = (void *)(v12 + 24);
    swift_beginAccess();
    if (*(void *)(v12 + 24)) {
      break;
    }
    unint64_t v10 = MEMORY[0x263F8EE78];
LABEL_15:
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v10);
    swift_bridgeObjectRelease();
    swift_release();
    ++v9;
    if (v13 == v8) {
      goto LABEL_5;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_22831E4E0;
  if (*v14)
  {
    *(void *)(result + 32) = *v14;
    unint64_t v19 = result;
    specialized Array._endMutation()();
    unint64_t v10 = v19;
    swift_retain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  type metadata accessor for __RKEntityTapTrigger();
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    uint64_t v1 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_22831E4E0;
    *(void *)(v2 + 32) = v1;
    uint64_t v12 = v2;
    specialized Array._endMutation()();
    uint64_t v3 = v12;
    swift_retain();
    return v3;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v5 = swift_dynamicCastClass();
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v5;
  uint64_t v13 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v7 = *(void *)(v6 + 24);
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_7;
    }
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_7:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = MEMORY[0x22A689930](v9, v7);
      }
      else
      {
        uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
        swift_retain();
      }
      ++v9;
      unint64_t v11 = getTapTriggers #1 (from:) in __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter(v10);
      specialized Array.append<A>(contentsOf:)(v11);
      swift_release();
    }
    while (v8 != v9);
    swift_release();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)(Swift::String matchingCustomTriggerWithIdentifier, Swift::OpaquePointer_optional customArguments, Swift::OpaquePointer_optional overrides)
{
  void (*v40)(void *__return_ptr, void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(void *);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void v62[4];

  unsigned __int8 v53 = *(void *)&customArguments.is_nil;
  rawValue = customArguments.value._rawValue;
  object = matchingCustomTriggerWithIdentifier._object;
  uint64_t countAndFlagsBits = matchingCustomTriggerWithIdentifier._countAndFlagsBits;
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    swift_beginAccess();
    unint64_t v7 = *(void *)(v3 + 64);
    uint64_t v58 = countAndFlagsBits;
    uint64_t v60 = rawValue;
    if (v7 >> 62) {
      goto LABEL_30;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (uint64_t i = v3; v8; uint64_t i = v3)
    {
      uint64_t v9 = 4;
      while (1)
      {
        uint64_t v3 = v9 - 4;
        if ((v7 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v10 = MEMORY[0x22A689930](v9 - 4, v7);
        uint64_t v11 = v9 - 3;
        if (__OFADD__(v3, 1)) {
          goto LABEL_29;
        }
LABEL_10:
        swift_beginAccess();
        uint64_t v12 = *(uint64_t (**)(uint64_t))(**(void **)(v10 + 24) + 328);
        uint64_t v13 = swift_retain();
        char v14 = v12(v13);
        swift_release();
        swift_release();
        if (v14)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v17) = 0;
          return v17;
        }
        ++v9;
        if (v11 == v8) {
          goto LABEL_12;
        }
      }
      uint64_t v10 = *(void *)(v7 + 8 * v9);
      swift_retain();
      uint64_t v11 = v9 - 3;
      if (!__OFADD__(v3, 1)) {
        goto LABEL_10;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    type metadata accessor for __RKCustomTrigger();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 24) = v58;
    *(void *)(v15 + 32) = object;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v60) {
      unint64_t v16 = (unint64_t)v60;
    }
    else {
      unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    *(void *)(v15 + 40) = v16;
    swift_bridgeObjectRetain();
    swift_release();
    *(_WORD *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 18) = 0;
    long long v52 = v15;
    unint64_t v18 = __RKEntityInteractionManager.interactions(matching:entities:)(v15, 0);
    unint64_t v19 = specialized __RKEntityInteractionManager.actions(for:)(v18);
    unint64_t v20 = v19;
    v62[0] = MEMORY[0x263F8EE78];
    if (v19 >> 62)
    {
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      if (v21) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v21)
      {
LABEL_19:
        if (v21 < 1)
        {
          __break(1u);
          goto LABEL_82;
        }
        for (uint64_t j = 0; j != v21; ++j)
        {
          if ((v20 & 0xC000000000000001) != 0)
          {
            uint64_t v23 = MEMORY[0x22A689930](j, v20);
          }
          else
          {
            uint64_t v23 = *(void *)(v20 + 8 * j + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (*(unsigned char *)(v23 + 89) == 1)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v21 = v62[0];
LABEL_34:
        uint64_t v50 = v18 >> 62;
        if (v18 >> 62) {
          goto LABEL_80;
        }
        uint64_t v8 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
LABEL_36:
        unsigned __int8 v57 = v18;
        uint64_t v60 = (void *)v8;
        if (v8)
        {
          if ((v21 & 0x8000000000000000) == 0 && (v21 & 0x4000000000000000) == 0)
          {
            uint64_t v24 = *(void *)(v21 + 16);
LABEL_40:
            unint64_t v25 = 0;
            Swift::UInt v55 = v18 & 0xC000000000000001;
            unint64_t v51 = v18 & 0xFFFFFFFFFFFFFF8;
            while (1)
            {
              if (v55)
              {
                MEMORY[0x22A689930](v25, v18);
                BOOL v26 = __OFADD__(v25++, 1);
                if (v26) {
                  goto LABEL_77;
                }
              }
              else
              {
                if (v25 >= *(void *)(v51 + 16)) {
                  goto LABEL_79;
                }
                swift_retain();
                BOOL v26 = __OFADD__(v25++, 1);
                if (v26)
                {
LABEL_77:
                  __break(1u);
LABEL_78:
                  __break(1u);
LABEL_79:
                  __break(1u);
LABEL_80:
                  swift_bridgeObjectRetain();
                  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
                  goto LABEL_36;
                }
              }
              if (v24)
              {
                if (v24 < 1) {
                  goto LABEL_78;
                }
                swift_retain();
                swift_beginAccess();
                for (uint64_t k = 0; k != v24; ++k)
                {
                  if ((v21 & 0xC000000000000001) != 0)
                  {
                    uint64_t v28 = MEMORY[0x22A689930](k, v21);
                  }
                  else
                  {
                    uint64_t v28 = *(void *)(v21 + 8 * k + 32);
                    swift_retain();
                  }
                  long long v29 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 456);
                  uint64_t v30 = swift_retain();
                  LOBYTE(v29) = v29(v30);
                  uint64_t v31 = swift_release();
                  if (v29) {
                    (*(void (**)(uint64_t))(*(void *)v28 + 448))(v31);
                  }
                  swift_release();
                }
                swift_release();
                unint64_t v18 = v57;
                uint64_t v8 = (uint64_t)v60;
              }
              swift_release();
              if (v25 == v8) {
                goto LABEL_58;
              }
            }
          }
LABEL_82:
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          goto LABEL_40;
        }
LABEL_58:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v32 = i;
        uint64_t v33 = *(void *)(i + 32);
        id v34 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v34)
        {
          uint64_t v17 = swift_dynamicCastClassUnconditional();
          uint64_t v59 = v17;
          if (!v8) {
            goto LABEL_60;
          }
        }
        else
        {
          swift_allocObject();
          uint64_t v17 = Scene.init(coreScene:)(v33);
          uint64_t v59 = v17;
          if (!v8)
          {
LABEL_60:
            if (!v50)
            {
LABEL_61:
              uint64_t v35 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRelease();
              swift_release();
LABEL_76:
              swift_release();
              LOBYTE(v17) = v35 > 0;
              return v17;
            }
LABEL_75:
            swift_bridgeObjectRetain();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_76;
          }
        }
        if (v8 < 1)
        {
          __break(1u);
          return v17;
        }
        uint64_t v36 = i + 16;
        unint64_t v37 = v18 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        uint64_t v38 = 0;
        __int16 v56 = v18 & 0xC000000000000001;
        do
        {
          if (v37)
          {
            uint64_t v39 = MEMORY[0x22A689930](v38, v18);
          }
          else
          {
            uint64_t v39 = *(void *)(v18 + 8 * (void)v38 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v40 = *(void (**)(void *__return_ptr, void))(**(void **)(v39 + 24) + 464);
          swift_retain();
          v40(v62, 0);
          swift_release();
          type metadata accessor for __RKEntityAction();
          if (swift_dynamicCast())
          {
            __RKEntityInteractionManager.applyOverrides(_:on:)(v53, (uint64_t)v61);
            swift_beginAccess();
            uint64_t v41 = swift_retain();
            MEMORY[0x22A688E10](v41);
            if (*(void *)((*(void *)(v32 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v32 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                                + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            unint64_t v42 = swift_allocObject();
            swift_weakInit();
            uint64_t v43 = swift_allocObject();
            swift_weakInit();
            unint64_t v44 = v36;
            uint64_t v45 = v32;
            uint64_t v46 = swift_allocObject();
            *(void *)(v46 + 16) = v42;
            *(void *)(v46 + 24) = v43;
            swift_beginAccess();
            unint64_t v47 = v61[9];
            v61[9] = partial apply for closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:);
            v61[10] = v46;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v47);
            v62[0] = v52;
            v62[1] = v59;
            char v48 = *(void (**)(void *))(*v61 + 408);
            swift_retain();
            swift_retain();
            v48(v62);
            uint64_t v32 = v45;
            uint64_t v36 = v44;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            unint64_t v37 = v56;
            unint64_t v18 = v57;
          }
          else
          {
            swift_release();
          }
          uint64_t v38 = (char *)v38 + 1;
        }
        while (v60 != v38);
        swift_bridgeObjectRelease();
        if (!v50) {
          goto LABEL_61;
        }
        goto LABEL_75;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
    goto LABEL_34;
  }
  LOBYTE(v17) = 0;
  return v17;
}

uint64_t closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong) {
      return swift_release();
    }
    uint64_t v3 = Strong;
    swift_beginAccess();
    swift_retain();
    uint64_t v4 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t *)(v1 + 16), v3);
    uint64_t result = swift_release();
    unint64_t v5 = *(void *)(v1 + 16);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v6 >= v4) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6 >= v4)
      {
LABEL_5:
        specialized Array.replaceSubrange<A>(_:with:)(v4, v6);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t __RKEntityInteractionManager.setCustomActionHandler(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RKEntityInteractionManager.actions(for:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v9) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](i, v7);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityCustomAction();
      uint64_t v12 = swift_dynamicCastClass();
      if (v12)
      {
        uint64_t v13 = v12;
        BOOL v14 = *(void *)(v12 + 128) == a1 && *(void *)(v12 + 136) == a2;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_beginAccess();
          uint64_t v11 = *(void *)(v13 + 112);
          *(void *)(v13 + 112) = a3;
          *(void *)(v13 + 120) = a4;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a3);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
        }
      }
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.applyOverrides(_:on:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 16))
    {
      type metadata accessor for __RKEntityActionGroup();
      uint64_t v4 = swift_dynamicCastClass();
      if (!v4)
      {
        uint64_t result = swift_beginAccess();
        if (!*(void *)(a2 + 16)) {
          return result;
        }
        swift_retain();
        REEntityGetName();
        uint64_t v10 = String.init(cString:)();
        if (*(void *)(v2 + 16))
        {
          unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
          if (v13)
          {
            uint64_t v14 = *(void *)(*(void *)(v2 + 56) + 8 * v12);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)(a2 + 16) = v14;
            swift_release();
            return swift_release();
          }
        }
        goto LABEL_18;
      }
      uint64_t v5 = v4;
      swift_beginAccess();
      unint64_t v6 = *(void *)(v5 + 112);
      if (v6 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t result = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v7 = result;
        if (result) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        uint64_t result = swift_bridgeObjectRetain();
        if (v7)
        {
LABEL_6:
          if (v7 < 1)
          {
            __break(1u);
            return result;
          }
          for (uint64_t i = 0; i != v7; ++i)
          {
            if ((v6 & 0xC000000000000001) != 0)
            {
              uint64_t v9 = MEMORY[0x22A689930](i, v6);
            }
            else
            {
              uint64_t v9 = *(void *)(v6 + 8 * i + 32);
              swift_retain();
            }
            __RKEntityInteractionManager.applyOverrides(_:on:)(v2, v9);
            swift_release();
          }
        }
      }
LABEL_18:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

Swift::Bool __swiftcall __RKEntityInteractionManager.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)(Swift::String matchingCustomTriggerWithIdentifier, Swift::OpaquePointer with, Swift::OpaquePointer_optional on)
{
  rawValue = on.value._rawValue;
  object = matchingCustomTriggerWithIdentifier._object;
  uint64_t countAndFlagsBits = matchingCustomTriggerWithIdentifier._countAndFlagsBits;
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    type metadata accessor for __RKCustomTrigger();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 24) = countAndFlagsBits;
    *(void *)(v8 + 32) = object;
    *(Swift::OpaquePointer *)(v8 + 40) = with;
    *(_WORD *)(v8 + 16) = 0;
    *(unsigned char *)(v8 + 18) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v9 = __RKEntityInteractionManager.__performInteractions(matching:on:)(v8, (uint64_t)rawValue);
    swift_release();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t __RKEntityInteractionManager.__setCustomPackageActionHandler(withIdentifier:actionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RKEntityInteractionManager.actions(for:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v9) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](i, v7);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityCustomAction();
      uint64_t v12 = swift_dynamicCastClass();
      if (v12)
      {
        uint64_t v13 = v12;
        BOOL v14 = *(void *)(v12 + 128) == a1 && *(void *)(v12 + 136) == a2;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_beginAccess();
          uint64_t v11 = *(void *)(v13 + 152);
          *(void *)(v13 + 152) = a3;
          *(void *)(v13 + 160) = a4;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a3);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
        }
      }
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(char a1)
{
  uint64_t v13 = 91;
  unint64_t v14 = 0xE100000000000000;
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  v9[16] = a1;
  uint64_t v10 = v1;
  uint64_t v7 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v7, &v13, implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didsetpartial apply, v9);
  uint64_t v13 = 91;
  unint64_t v14 = 0xE100000000000000;
  InteractionsLogger.dumpStack()();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(char a1, uint64_t a2)
{
  _StringGuts.grow(_:)(27);
  v4._object = (void *)0x800000022835DB30;
  v4._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  if (a1) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 544175136;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  swift_beginAccess();
  if (*(unsigned char *)(a2 + 26)) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (*(unsigned char *)(a2 + 26)) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter(char a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v2 + 26);
  *(unsigned char *)(v2 + 26) = a1;
  uint64_t v16 = 91;
  unint64_t v17 = 0xE100000000000000;
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  uint64_t v13 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v11[16] = v4;
  uint64_t v12 = v2;
  uint64_t v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, &v16, partial apply for implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset, v11);
  uint64_t v16 = 91;
  unint64_t v17 = 0xE100000000000000;
  InteractionsLogger.dumpStack()();
  return swift_bridgeObjectRelease();
}

void (*__RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(void *a1))(uint64_t *a1)
{
  Swift::String v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 56) = *(unsigned char *)(v1 + 26);
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify;
}

void __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 48);
  char v3 = *(unsigned char *)(v2 + 26);
  *(unsigned char *)(v2 + 26) = *(unsigned char *)(*a1 + 56);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v14 = 91;
  unint64_t v15 = 0xE100000000000000;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0xE000000000000000;
  *(void *)(v1 + 40) = v4;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(*(Swift::String *)(v1 + 24));
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8285;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  uint64_t v8 = swift_release();
  uint64_t v10 = v14;
  unint64_t v9 = v15;
  MEMORY[0x270FA5388](v8);
  v12[16] = v3;
  uint64_t v13 = v4;
  uint64_t v11 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v11, &v14, implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didsetpartial apply, v12);
  uint64_t v14 = v10;
  unint64_t v15 = v9;
  InteractionsLogger.dumpStack()();
  swift_bridgeObjectRelease();
  free((void *)v1);
}

uint64_t __RKEntityInteractionManager.proximityEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t __RKEntityInteractionManager.proximityEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 27) = result;
  return result;
}

unsigned char *(*__RKEntityInteractionManager.proximityEnabled.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 27);
  return __RKEntityInteractionManager.proximityEnabled.modify;
}

unsigned char *__RKEntityInteractionManager.proximityEnabled.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 27) = result[8];
  return result;
}

uint64_t __RKEntityInteractionManager.init(sceneRef:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for __RKEntityLookupTable();
  *(_DWORD *)(v2 + 24) = 16843009;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(void *)(v2 + 40) = v5;
  type metadata accessor for __RKSimulationSceneCoordinator();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v6 + 32) = 0;
  *(void *)(v2 + 48) = v6;
  type metadata accessor for __RKRuntimeSceneCoordinator();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v4;
  *(void *)(v2 + 56) = v7;
  *(void *)(v2 + 64) = v4;
  *(void *)(v2 + 32) = a1;
  v14[0] = 91;
  v14[1] = 0xE100000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8285;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  swift_release();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v12, v14);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t __RKEntityInteractionManager.deinit()
{
  v7[0] = 91;
  v7[1] = 0xE100000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityInteractionManager.__deallocating_deinit()
{
  __RKEntityInteractionManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t __RKEntityInteractionManager.__entityLookupTable.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*__RKEntityInteractionManager.__entityLookupTable.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t (*__RKEntityInteractionManager.__simulationSceneCoordinator.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __RKEntityInteractionManager.__runtimeSceneCoordinator : __RKEntityInteractionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 56) = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKEntityInteractionManager.__runtimeSceneCoordinator.getter()
{
  return swift_retain();
}

uint64_t __RKEntityInteractionManager.__runtimeSceneCoordinator.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t key path setter for __RKEntityInteractionManager.__interactions : __RKEntityInteractionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteractionManager.__interactions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityInteractionManager.__hasInteractionsForTrigger<A>(of:)()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 64);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_33;
  }
LABEL_3:
  unint64_t v4 = 0;
  unint64_t v5 = v1 & 0xC000000000000001;
  uint64_t v13 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v15 = v2;
  unint64_t v16 = v1;
  unint64_t v14 = v1 & 0xC000000000000001;
  while (1)
  {
    if (v5)
    {
      MEMORY[0x22A689930](v4, v1);
      BOOL v6 = __OFADD__(v4++, 1);
      if (v6)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      if (v4 >= *(void *)(v13 + 16))
      {
        __break(1u);
        return result;
      }
      swift_retain();
      BOOL v6 = __OFADD__(v4++, 1);
      if (v6) {
        goto LABEL_31;
      }
    }
    swift_beginAccess();
    type metadata accessor for __RKEntityTriggerGroup();
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      uint64_t v8 = v7;
      swift_beginAccess();
      unint64_t v9 = *(void *)(v8 + 24);
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v10)
        {
LABEL_13:
          unint64_t v1 = 4;
          do
          {
            unint64_t v11 = v1 - 4;
            if ((v9 & 0xC000000000000001) != 0)
            {
              MEMORY[0x22A689930](v1 - 4, v9);
              BOOL v6 = __OFADD__(v11, 1);
              unint64_t v12 = v1 - 3;
              if (v6) {
                goto LABEL_30;
              }
            }
            else
            {
              swift_retain();
              BOOL v6 = __OFADD__(v11, 1);
              unint64_t v12 = v1 - 3;
              if (v6)
              {
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
            }
            if (swift_dynamicCastClass())
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              goto LABEL_28;
            }
            swift_release();
            ++v1;
          }
          while (v12 != v10);
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_retain();
        if (v10) {
          goto LABEL_13;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v2 = v15;
      unint64_t v1 = v16;
      unint64_t v5 = v14;
    }
    swift_retain();
    swift_release();
    if (swift_dynamicCastClass()) {
      break;
    }
    uint64_t result = swift_release();
    if (v4 == v2) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  swift_release();
  return 1;
}

uint64_t __RKEntityInteractionManager.__actions.getter()
{
  swift_beginAccess();
  unint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized __RKEntityInteractionManager.actions(for:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t __RKEntityInteractionManager.__addInteraction(_:)()
{
  swift_beginAccess();
  uint64_t v1 = swift_retain();
  MEMORY[0x22A688E10](v1);
  if (*(void *)((*(void *)(v0 + 64) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 64) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t __RKEntityInteractionManager.__removeInteraction(_:)(uint64_t a1)
{
  swift_beginAccess();
  swift_retain();
  unint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Collection.firstIndex(where:)(v2, a1);
  char v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v7 = *(void (**)(uint64_t))(**(void **)(a1 + 24) + 448);
    uint64_t v8 = swift_retain();
    v7(v8);
    swift_release();
    swift_beginAccess();
    specialized Array.remove(at:)(v3);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall __RKEntityInteractionManager.__removeAllInteractions()()
{
  swift_beginAccess();
  *(void *)(v0 + 64) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
}

uint64_t __RKEntityInteractionManager.__cloneInteractions(fromEntity:toEntity:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2 + 64;
  swift_beginAccess();
  unint64_t v6 = *(void *)(v2 + 64);
  if (v6 >> 62) {
    goto LABEL_112;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  unint64_t v8 = 0;
  unint64_t v65 = v6 & 0xC000000000000001;
  unint64_t v58 = v6 + 32;
  uint64_t v59 = v6 & 0xFFFFFFFFFFFFFF8;
  unint64_t v61 = a1;
  unint64_t v62 = a2;
  uint64_t v60 = v5;
  uint64_t v63 = v7;
  unint64_t v64 = v6;
  while (1)
  {
    while (1)
    {
      if (v65)
      {
        uint64_t v9 = MEMORY[0x22A689930](v8, v6);
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10) {
          goto LABEL_103;
        }
      }
      else
      {
        if (v8 >= *(void *)(v59 + 16)) {
          goto LABEL_107;
        }
        uint64_t v9 = *(void *)(v58 + 8 * v8);
        swift_retain();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          if (!v7) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_3;
        }
      }
      unint64_t v68 = v8;
      unint64_t v11 = (void **)(v9 + 16);
      swift_beginAccess();
      unint64_t v12 = *(uint64_t (**)(unint64_t, unint64_t))(**(void **)(v9 + 16) + 200);
      swift_retain();
      uint64_t v13 = v12(a1, a2);
      swift_release();
      swift_beginAccess();
      uint64_t v5 = *(void *)(v9 + 24);
      unint64_t v14 = *(uint64_t (**)(unint64_t, unint64_t))(*(void *)v5 + 472);
      swift_retain();
      uint64_t v15 = v14(a1, a2);
      char v17 = v16;
      swift_release();
      if (!v13) {
        break;
      }
      if (!v15) {
        goto LABEL_4;
      }
      type metadata accessor for __RKEntityInteraction();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 32) = 0;
      *(unsigned char *)(v18 + 40) = 1;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(void *)(v18 + 16) = v13;
      *(void *)(v18 + 24) = v15;
      uint64_t v66 = (uint64_t *)(v18 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
      *(void *)(inited + 32) = v13;
      uint64_t v70 = inited;
      specialized Array._endMutation()();
      uint64_t v20 = v70;
      type metadata accessor for __RKEntityTriggerGroup();
      unint64_t v6 = swift_dynamicCastClass();
      swift_retain_n();
      swift_retain();
      if (v6)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v20 = *(void *)(v6 + 24);
        swift_bridgeObjectRetain();
        swift_release();
      }
      if ((unint64_t)v20 >> 62)
      {
        if (v20 < 0) {
          unint64_t v6 = v20;
        }
        else {
          unint64_t v6 = v20 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5)
        {
LABEL_24:
          if (v5 < 1) {
            goto LABEL_108;
          }
          a1 = v20 & 0xC000000000000001;
          swift_beginAccess();
          uint64_t v27 = 0;
          while (2)
          {
            if (a1) {
              MEMORY[0x22A689930](v27, v20);
            }
            else {
              swift_retain();
            }
            type metadata accessor for __RKEntityProximityTrigger();
            uint64_t v28 = swift_dynamicCastClass();
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v30 = swift_beginAccess();
              int v31 = *(unsigned __int8 *)(v29 + 36);
              if (v31 != 1)
              {
                if (v31 != 2) {
                  break;
                }
                uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 432))(v30);
                swift_release();
                if (v32)
                {
                  swift_beginAccess();
                  *(unsigned char *)(v32 + 88) = 1;
                  *(void *)(v18 + 32) = v32;
                  break;
                }
LABEL_50:
                if (v5 == ++v27) {
                  goto LABEL_96;
                }
                continue;
              }
              type metadata accessor for __RKEntityActionGroup();
              uint64_t v33 = swift_dynamicCastClass();
              if (v33)
              {
                uint64_t v34 = v33;
                uint64_t v35 = v18;
                unint64_t v6 = v33 + 112;
                swift_beginAccess();
                unint64_t v36 = *(void *)(v34 + 112);
                if (v36 >> 62)
                {
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (v41 != 2) {
                    goto LABEL_48;
                  }
LABEL_37:
                  a2 = *(void *)v6;
                  if ((*(void *)v6 & 0xC000000000000001) != 0)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v38 = MEMORY[0x22A689930](0, a2);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_104;
                    }
                    uint64_t v38 = *(void *)(a2 + 32);
                    swift_retain();
                  }
                  *uint64_t v66 = v38;
                  swift_release();
                  a2 = *(void *)v6;
                  if ((*(void *)v6 & 0xC000000000000001) != 0)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v39 = MEMORY[0x22A689930](1, a2);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                      goto LABEL_105;
                    }
                    uint64_t v39 = *(void *)(a2 + 40);
                    swift_retain();
                  }
                  swift_beginAccess();
                  *(unsigned char *)(v39 + 88) = 1;
                  swift_release();
                  unint64_t v6 = *(void *)v6;
                  if ((v6 & 0xC000000000000001) != 0)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v40 = MEMORY[0x22A689930](1, v6);
                  }
                  else
                  {
                    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                      goto LABEL_106;
                    }
                    uint64_t v40 = *(void *)(v6 + 40);
                    swift_bridgeObjectRetain();
                    swift_retain();
                  }
                  swift_release_n();
                  swift_release();
                  swift_bridgeObjectRelease();
                  *(void *)(v35 + 32) = v40;
                  uint64_t v18 = v35;
                }
                else
                {
                  uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  swift_retain();
                  swift_retain();
                  if (v37 == 2) {
                    goto LABEL_37;
                  }
LABEL_48:
                  uint64_t v18 = v35;
                  swift_release();
                  swift_release();
                }
              }
            }
            break;
          }
          swift_release();
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v5 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v5) {
          goto LABEL_24;
        }
      }
LABEL_96:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
LABEL_97:
      uint64_t v5 = v60;
      swift_beginAccess();
      uint64_t v57 = swift_retain();
      MEMORY[0x22A688E10](v57);
      a1 = v61;
      a2 = v62;
      unint64_t v8 = v68;
      if (*(void *)((*(void *)v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v5 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      swift_release();
      unint64_t v6 = v64;
      if (v68 == v63) {
        return swift_bridgeObjectRelease();
      }
    }
    if (!v15) {
      goto LABEL_5;
    }
    if (v17) {
      break;
    }
LABEL_4:
    swift_release();
LABEL_5:
    swift_release();
LABEL_6:
    unint64_t v6 = v64;
    if (v8 == v63) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v21 = *v11;
  swift_retain_n();
  objc_msgSend(v21, sel_copyWithZone_, 0);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for __RKEntityTrigger();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_release_n();
    goto LABEL_6;
  }
  type metadata accessor for __RKEntityInteraction();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 32) = 0;
  *(unsigned char *)(v22 + 40) = 1;
  *(void *)(v22 + 48) = 0;
  *(void *)(v22 + 56) = 0;
  *(void *)(v22 + 16) = v69;
  *(void *)(v22 + 24) = v15;
  uint64_t v67 = (uint64_t *)(v22 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_22831E4E0;
  *(void *)(v23 + 32) = v69;
  uint64_t v71 = v23;
  specialized Array._endMutation()();
  unint64_t v24 = v71;
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v25 = swift_dynamicCastClass();
  swift_retain();
  if (v25)
  {
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t v24 = *(void *)(v25 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
  }
  else
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  if (!(v24 >> 62))
  {
    uint64_t v42 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v42) {
      goto LABEL_61;
    }
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_102:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_97;
  }
LABEL_61:
  if (v42 >= 1)
  {
    a1 = v24 & 0xC000000000000001;
    swift_beginAccess();
    uint64_t v5 = 0;
    while (1)
    {
      if (a1) {
        MEMORY[0x22A689930](v5, v24);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityProximityTrigger();
      uint64_t v43 = swift_dynamicCastClass();
      if (!v43) {
        goto LABEL_86;
      }
      uint64_t v44 = v43;
      uint64_t v45 = swift_beginAccess();
      int v46 = *(unsigned __int8 *)(v44 + 36);
      if (v46 == 1) {
        break;
      }
      if (v46 != 2) {
        goto LABEL_86;
      }
      uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 432))(v45);
      swift_release();
      if (v47)
      {
        swift_beginAccess();
        *(unsigned char *)(v47 + 88) = 1;
        *(void *)(v22 + 32) = v47;
LABEL_86:
        swift_release();
      }
      if (v42 == ++v5) {
        goto LABEL_102;
      }
    }
    type metadata accessor for __RKEntityActionGroup();
    uint64_t v48 = swift_dynamicCastClass();
    if (!v48) {
      goto LABEL_86;
    }
    uint64_t v49 = v48;
    uint64_t v50 = v22;
    unint64_t v6 = v48 + 112;
    swift_beginAccess();
    unint64_t v51 = *(void *)(v49 + 112);
    if (v51 >> 62)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v56 == 2) {
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_retain();
      if (v52 == 2)
      {
LABEL_74:
        a2 = *(void *)v6;
        if ((*(void *)v6 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = MEMORY[0x22A689930](0, a2);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_109;
          }
          uint64_t v53 = *(void *)(a2 + 32);
          swift_retain();
        }
        *uint64_t v67 = v53;
        swift_release();
        a2 = *(void *)v6;
        if ((*(void *)v6 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = MEMORY[0x22A689930](1, a2);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_110;
          }
          uint64_t v54 = *(void *)(a2 + 40);
          swift_retain();
        }
        swift_beginAccess();
        *(unsigned char *)(v54 + 88) = 1;
        swift_release();
        unint64_t v6 = *(void *)v6;
        if ((v6 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v55 = MEMORY[0x22A689930](1, v6);
        }
        else
        {
          if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
            goto LABEL_111;
          }
          uint64_t v55 = *(void *)(v6 + 40);
          swift_bridgeObjectRetain();
          swift_retain();
        }
        swift_release_n();
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)(v50 + 32) = v55;
        uint64_t v22 = v50;
        goto LABEL_86;
      }
    }
    uint64_t v22 = v50;
    swift_release();
    swift_release();
    goto LABEL_86;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionManager.__performInteractions(matching:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  BOOL v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v82 - v11;
  uint64_t v103 = 91;
  unint64_t v104 = 0xE100000000000000;
  v102._uint64_t countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  uint64_t v101 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v102);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_release();
  uint64_t v17 = v103;
  char v16 = (void *)v104;
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 24) != 1)
  {
    v102._uint64_t countAndFlagsBits = v17;
    v102._object = v16;
    os_log_type_t v35 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v35, &v102._countAndFlagsBits);
LABEL_26:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v84 = v7;
  uint64_t v91 = v17;
  uint64_t v88 = v16;
  unint64_t v89 = (uint64_t *)(v3 + 64);
  swift_beginAccess();
  uint64_t v90 = v3;
  unint64_t v18 = *(void *)(v3 + 64);
  uint64_t v87 = a1;
  uint64_t v85 = v6;
  uint64_t v86 = v12;
  long long v83 = v10;
  if (v18 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19)
    {
LABEL_4:
      uint64_t v20 = 4;
      do
      {
        uint64_t v21 = v20 - 4;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v22 = MEMORY[0x22A689930](v20 - 4, v18);
          uint64_t v3 = v20 - 3;
          if (__OFADD__(v21, 1)) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v18 + 8 * v20);
          swift_retain();
          uint64_t v3 = v20 - 3;
          if (__OFADD__(v21, 1))
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        swift_beginAccess();
        uint64_t v23 = *(uint64_t (**)(uint64_t))(**(void **)(v22 + 24) + 328);
        uint64_t v24 = swift_retain();
        char v25 = v23(v24);
        swift_release();
        swift_release();
        if (v25)
        {
          swift_bridgeObjectRelease();
          uint64_t v98 = v91;
          uint64_t v99 = v88;
          os_log_type_t v36 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v36, &v98);
          goto LABEL_26;
        }
        ++v20;
      }
      while (v3 != v19);
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v26 = __RKEntityInteractionManager.interactions(matching:entities:)(v87, a2);
  uint64_t v27 = (uint64_t)(&v82 - 4);
  *(&v82 - 2) = MEMORY[0x270FA5388](v26);
  uint64_t v98 = v91;
  uint64_t v99 = v88;
  uint64_t v28 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v98, partial apply for implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v82 - 4);
  unsigned __int8 v100 = 0;
  unint64_t v92 = v26;
  unint64_t v29 = specialized __RKEntityInteractionManager.actions(for:)(v26);
  uint64_t v30 = v29;
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v97 = MEMORY[0x263F8EE78];
  if (v29 >> 62)
  {
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    if (v32) {
      goto LABEL_14;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    uint64_t v3 = MEMORY[0x263F8EE78];
    goto LABEL_32;
  }
  uint64_t v32 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v32) {
    goto LABEL_31;
  }
LABEL_14:
  if (v32 < 1) {
    goto LABEL_91;
  }
  for (uint64_t i = 0; i != v32; ++i)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v34 = MEMORY[0x22A689930](i, v30);
    }
    else
    {
      uint64_t v34 = *(void *)(v30 + 8 * i + 32);
      swift_retain();
    }
    swift_beginAccess();
    if (*(unsigned char *)(v34 + 89) == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = v97;
LABEL_32:
  uint64_t v27 = *v89;
  unint64_t v38 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized __RKEntityInteractionManager.actions(for:)(v38);
  swift_bridgeObjectRelease();
  uint64_t v95 = v31;
  if (!((unint64_t)v30 >> 62))
  {
    uint64_t v39 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v39) {
      goto LABEL_34;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
    if (v3 < 0) {
      goto LABEL_76;
    }
    goto LABEL_50;
  }
  if (v30 < 0) {
    uint64_t v27 = v30;
  }
  else {
    uint64_t v27 = v30 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_49;
  }
LABEL_34:
  if (v39 < 1) {
    goto LABEL_92;
  }
  for (uint64_t j = 0; j != v39; ++j)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      uint64_t v41 = MEMORY[0x22A689930](j, v30);
    }
    else
    {
      uint64_t v41 = *(void *)(v30 + 8 * j + 32);
      swift_retain();
    }
    swift_beginAccess();
    if (*(unsigned char *)(v41 + 89) == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = v95;
  if ((v3 & 0x8000000000000000) == 0)
  {
LABEL_50:
    if ((v3 & 0x4000000000000000) == 0)
    {
      uint64_t v30 = *(void *)(v3 + 16);
      if (!v30) {
        goto LABEL_77;
      }
      goto LABEL_52;
    }
  }
LABEL_76:
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v30) {
      break;
    }
LABEL_52:
    if (v27 < 0 || (v27 & 0x4000000000000000) != 0) {
      goto LABEL_93;
    }
    uint64_t v42 = *(void *)(v27 + 16);
LABEL_55:
    unint64_t v43 = 0;
    unint64_t v89 = (uint64_t *)(v3 + 32);
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v44 = MEMORY[0x22A689930](v43, v3);
        BOOL v45 = __OFADD__(v43++, 1);
        if (v45) {
          goto LABEL_73;
        }
      }
      else
      {
        if (v43 >= *(void *)(v3 + 16)) {
          goto LABEL_75;
        }
        uint64_t v44 = v89[v43];
        swift_retain();
        BOOL v45 = __OFADD__(v43++, 1);
        if (v45)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
      }
      if (v42) {
        break;
      }
LABEL_57:
      swift_release();
      if (v43 == v30) {
        goto LABEL_77;
      }
    }
    if (v42 >= 1)
    {
      swift_retain();
      uint64_t v46 = 0;
      while ((v27 & 0xC000000000000001) == 0)
      {
        uint64_t v47 = *(void *)(v27 + 8 * v46 + 32);
        swift_retain();
        if (v44 != v47) {
          goto LABEL_72;
        }
LABEL_67:
        swift_release();
        if (v42 == ++v46)
        {
          swift_release();
          goto LABEL_57;
        }
      }
      uint64_t v47 = MEMORY[0x22A689930](v46, v27);
      if (v44 == v47) {
        goto LABEL_67;
      }
LABEL_72:
      (*(void (**)(void))(*(void *)v47 + 448))();
      goto LABEL_67;
    }
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
  }
LABEL_77:
  swift_release();
  swift_release();
  uint64_t v48 = *(void *)(v90 + 32);
  id v49 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v49)
  {
    uint64_t v50 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v50 = Scene.init(coreScene:)(v48);
  }
  uint64_t v3 = v50;
  unint64_t v51 = v88;
  uint64_t v52 = v87;
  uint64_t v53 = v91;
  unint64_t v54 = v92;
  type metadata accessor for __RKStartTrigger();
  uint64_t v55 = swift_dynamicCastClass();
  unint64_t v56 = v54 >> 62;
  if (!v55) {
    goto LABEL_104;
  }
  if (v56)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v57 = v52;
    if (v30)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      if (v62)
      {
        uint64_t v52 = v62;
        if ((v92 & 0xC000000000000001) == 0) {
          goto LABEL_97;
        }
        goto LABEL_84;
      }
LABEL_88:
      uint64_t v52 = v87;
      swift_release();
      unint64_t v54 = v92;
      uint64_t v55 = swift_bridgeObjectRelease();
    }
    else
    {
LABEL_102:
      uint64_t v55 = swift_release();
      uint64_t v52 = v57;
    }
LABEL_103:
    uint64_t v53 = v91;
LABEL_104:
    MEMORY[0x270FA5388](v55);
    *(&v82 - 2) = v54;
    uint64_t v93 = v53;
    uint64_t v94 = (uint64_t)v51;
    uint64_t v65 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v65, &v93, partial apply for implicit closure #4 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v82 - 4);
    if (v56)
    {
LABEL_118:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v66 = result;
      if (result) {
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v66 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v66)
      {
LABEL_106:
        if (v66 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v67 = 0;
        unint64_t v68 = v92 & 0xC000000000000001;
        do
        {
          if (v68) {
            MEMORY[0x22A689930](v67, v92);
          }
          else {
            swift_retain();
          }
          ++v67;
          uint64_t v93 = v91;
          uint64_t v94 = (uint64_t)v51;
          swift_retain();
          swift_retain();
          os_log_type_t v69 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v69, &v93);
          uint64_t v93 = v52;
          uint64_t v94 = v3;
          __RKEntityInteraction.fire(context:)(&v93);
          swift_release();
          swift_release();
          swift_release();
        }
        while (v66 != v67);
        unint64_t v70 = v92;
        uint64_t v71 = swift_bridgeObjectRelease();
        unsigned __int8 v100 = 1;
LABEL_120:
        MEMORY[0x270FA5388](v71);
        *(&v82 - 2) = v70;
        uint64_t v79 = v91;
        uint64_t v93 = v91;
        uint64_t v94 = (uint64_t)v51;
        uint64_t v80 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v80, &v93, partial apply for implicit closure #6 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v82 - 4);
        uint64_t v78 = swift_bridgeObjectRelease();
        goto LABEL_121;
      }
    }
    unint64_t v70 = v92;
    uint64_t v71 = swift_bridgeObjectRelease();
    goto LABEL_120;
  }
  uint64_t v57 = v52;
  uint64_t v52 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  if (!v52) {
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = v52;
  if ((v54 & 0xC000000000000001) != 0)
  {
LABEL_84:
    uint64_t v27 = 0;
    while (1)
    {
      MEMORY[0x22A689930](v27, v92);
      uint64_t v58 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        break;
      }
      swift_beginAccess();
      swift_retain();
      char v59 = __RKEntityInteractionManager.containsChangeSceneAction(action:)();
      swift_unknownObjectRelease();
      swift_release();
      if (v59)
      {
        uint64_t v60 = swift_bridgeObjectRelease();
        uint64_t v61 = (uint64_t)v86;
        goto LABEL_114;
      }
      ++v27;
      if (v58 == v52) {
        goto LABEL_88;
      }
    }
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_55;
  }
LABEL_97:
  uint64_t v63 = 0;
  uint64_t v61 = (uint64_t)v86;
  while (1)
  {
    unint64_t v51 = (void *)(v63 + 1);
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_118;
    }
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char v64 = __RKEntityInteractionManager.containsChangeSceneAction(action:)();
    swift_release();
    swift_release();
    if (v64) {
      break;
    }
    ++v63;
    if (v51 == (void *)v52)
    {
      uint64_t v52 = v87;
      swift_release();
      unint64_t v54 = v92;
      uint64_t v55 = swift_bridgeObjectRelease();
      unint64_t v51 = v88;
      goto LABEL_103;
    }
  }
  uint64_t v60 = swift_bridgeObjectRelease();
  unint64_t v51 = v88;
LABEL_114:
  BOOL v72 = v30 < 1;
  uint64_t v73 = v87;
  uint64_t v74 = v85;
  if (!v72) {
    unsigned __int8 v100 = 1;
  }
  specialized static __ServiceLocator.shared.getter(v60);
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v75 = v83;
  static DispatchTime.now()();
  MEMORY[0x22A688820](v75, 0.1);
  uint64_t v76 = *(void (**)(char *, uint64_t))(v84 + 8);
  v76(v75, v74);
  long long v77 = (void *)swift_allocObject();
  v77[2] = v92;
  void v77[3] = v73;
  v77[4] = v3;
  swift_retain();
  swift_retain();
  __Engine.asyncAfterOnEngineQueue(deadline:_:)(v61, (uint64_t)partial apply for closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:), (uint64_t)v77);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v78 = ((uint64_t (*)(uint64_t, uint64_t))v76)(v61, v74);
  uint64_t v79 = v91;
LABEL_121:
  MEMORY[0x270FA5388](v78);
  *(&v82 - 2) = (uint64_t)&v100;
  v96[0] = v79;
  v96[1] = v51;
  uint64_t v81 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v81, v96, partial apply for implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:), &v82 - 4);
  swift_bridgeObjectRelease();
  swift_release();
  return v100;
}

uint64_t closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](v8, a1);
    }
    else {
      swift_retain();
    }
    ++v8;
    v9[0] = a2;
    v9[1] = a3;
    swift_retain();
    swift_retain();
    __RKEntityInteraction.fire(context:)(v9);
    swift_release();
    swift_release();
    swift_release();
  }
  while (v6 != v8);
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(unint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000022835DB10;
  v9._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  return 0;
}

uint64_t implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)(unsigned char *a1)
{
  _StringGuts.grow(_:)(32);
  v2._object = (void *)0x800000022835DAF0;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  if (*a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (*a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityInteractionManager.performTapInteraction(for:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = 91;
  unint64_t v72 = 0xE100000000000000;
  v70._uint64_t countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  uint64_t v68 = v1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v61[0] = v1;
  swift_release();
  Swift::String v9 = (void *)v72;
  uint64_t v63 = v71;
  swift_retain();
  swift_beginAccess();
  BOOL v10 = &demangling cache variable for type metadata for Slice<Entity.ComponentSet>;
  unint64_t v11 = 0x2681BB000uLL;
  unint64_t v12 = static ForceEffectLogger.logger;
  char v64 = (void *)0x800000022835D890;
  uint64_t v65 = (void *)0x800000022835D870;
  *(void *)&long long v13 = 136315394;
  long long v62 = v13;
  v61[1] = MEMORY[0x263F8EE58] + 8;
  uint64_t v66 = v5;
  uint64_t v67 = v9;
  if (static __RKEntityUUIDComponent.registration) {
    goto LABEL_4;
  }
LABEL_10:
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_retain();
LABEL_11:
  outlined destroy of UUID?((uint64_t)v5);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (*(void *)(v11 + 2736) != -1) {
    swift_once();
  }
  if (*((unsigned char *)v12 + 304) == 1)
  {
    uint64_t v23 = v12;
    unint64_t v24 = v11;
    char v25 = v10;
    v70._uint64_t countAndFlagsBits = 0;
    v70._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(91);
    v26._uint64_t countAndFlagsBits = 0xD000000000000017;
    v26._object = v65;
    String.append(_:)(v26);
    uint64_t v69 = a1;
    _print_unlocked<A, B>(_:_:)();
    v27._uint64_t countAndFlagsBits = 0xD000000000000042;
    v27._object = v64;
    String.append(_:)(v27);
    uint64_t countAndFlagsBits = v70._countAndFlagsBits;
    object = v70._object;
    if (one-time initialization token for interactionsLogger != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)interactionsLogger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = v22;
    if (os_log_type_enabled(v31, v22))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v70._uint64_t countAndFlagsBits = v34;
      *(_DWORD *)uint64_t v33 = v62;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, (unint64_t)v67, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v33 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v31, v32, "%s%s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      uint64_t v35 = v34;
      Swift::String v9 = v67;
      MEMORY[0x22A696500](v35, -1, -1);
      MEMORY[0x22A696500](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    BOOL v10 = v25;
    unint64_t v11 = v24;
    unint64_t v12 = v23;
    unint64_t v5 = v66;
  }
  while (1)
  {
    uint64_t Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_release_n();
      v70._uint64_t countAndFlagsBits = v63;
      v70._object = v9;
      os_log_type_t v59 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v59, &v70._countAndFlagsBits);
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v37 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      type metadata accessor for Entity();
      a1 = swift_dynamicCastClassUnconditional();
      if (!v10[276]) {
        goto LABEL_10;
      }
      goto LABEL_4;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      break;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v39 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v40 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v69 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v69;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent()) {
      goto LABEL_50;
    }
    uint64_t v42 = RECustomComponentGetObject();
    if (!v42) {
      goto LABEL_50;
    }
    unint64_t v43 = *(unsigned __int8 **)v42;
    if (*(void *)(v42 + 8) || !v43)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v44 = *v43;
      uint64_t v45 = String.init(utf8String:)();
      if (v46) {
        Swift::Int v47 = v45;
      }
      else {
        Swift::Int v47 = 0;
      }
      if (v46) {
        unint64_t v48 = v46;
      }
      else {
        unint64_t v48 = 0xE000000000000000;
      }
      unint64_t v43 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v44 == 42, v47, v48);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v43;
    }
    if (!v43) {
      goto LABEL_56;
    }
    swift_retain();
    uint64_t v49 = String.init(utf8String:)();
    unint64_t v51 = v50;
    swift_release();
    uint64_t v52 = v51 ? v49 : 0;
    unint64_t v53 = v51 ? v51 : 0xE000000000000000;
    unint64_t v54 = (NSString *)MEMORY[0x22A688A50](v52, v53);
    swift_bridgeObjectRelease();
    Class v55 = NSClassFromString(v54);

    swift_release();
    if (!v55) {
      goto LABEL_50;
    }
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    uint64_t v56 = swift_dynamicCastMetatype();
    if (v56)
    {
      uint64_t v57 = (*(uint64_t (**)(void))(v56 + 232))();
      uint64_t v58 = *(void *)(v57 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v58, 0);
      *(void *)(v57 + 16) = v37;
      MEMORY[0x22A68E750](v37, v57);
      swift_release_n();
      swift_release();
    }
    else
    {
LABEL_50:
      uint64_t v57 = makeEntity(for:)(v37);
      swift_release_n();
    }
    a1 = v57;
    Swift::String v9 = v67;
    if (!v10[276]) {
      goto LABEL_10;
    }
LABEL_4:
    swift_retain();
    if (!REEntityGetCustomComponent() || !RECustomComponentGetObject())
    {
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
      goto LABEL_11;
    }
    UUID.init(uuid:)();
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v5, 0, 1, v14);
    int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14);
    Swift::String v9 = v67;
    if (v16 == 1) {
      goto LABEL_11;
    }
    outlined destroy of UUID?((uint64_t)v5);
    type metadata accessor for __RKEntityTapTrigger();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 24) = 0;
    swift_beginAccess();
    *(void *)(v17 + 24) = a1;
    swift_retain();
    swift_release();
    *(_WORD *)(v17 + 16) = 0;
    *(unsigned char *)(v17 + 18) = 0;
    swift_beginAccess();
    *(unsigned char *)(v17 + 16) = 0;
    char v18 = __RKEntityInteractionManager.__performInteractions(matching:on:)(v17, 0);
    swift_release();
    if (v18)
    {
      v70._uint64_t countAndFlagsBits = v63;
      v70._object = v9;
      uint64_t v60 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v60, &v70, partial apply for implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:), a1);
      swift_bridgeObjectRelease();
      swift_release_n();
      return 1;
    }
    v70._uint64_t countAndFlagsBits = v63;
    v70._object = v9;
    uint64_t v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v70, partial apply for implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:), a1);
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  _StringGuts.grow(_:)(71);
  v0._uint64_t countAndFlagsBits = 0xD000000000000035;
  v0._object = (void *)0x800000022835DA50;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._object = (void *)0x800000022835DA90;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  _StringGuts.grow(_:)(65);
  v0._object = (void *)0x800000022835DAB0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x676E69797274202CLL;
  v1._object = (void *)0xEF746E6572617020;
  String.append(_:)(v1);
  return 0;
}

uint64_t __RKEntityInteractionManager.containsChangeSceneAction(action:)()
{
  type metadata accessor for __RKChangeSceneAction();
  if (swift_dynamicCastClass()) {
    return 1;
  }
  type metadata accessor for __RKEntityActionGroup();
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v3 = *(void *)(v2 + 112);
  if (!(v3 >> 62))
  {
    uint64_t v0 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_6;
    }
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    return v0;
  }
LABEL_25:
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v0 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_6:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x22A689930](0, v3);
LABEL_9:
    char v6 = __RKEntityInteractionManager.containsChangeSceneAction(action:)(v5);
    swift_release();
    if (v6)
    {
      uint64_t v0 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v0 - 1;
      while (1)
      {
        uint64_t v0 = v8 != v7;
        if (v8 == v7) {
          break;
        }
        unint64_t v9 = v7 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v10 = MEMORY[0x22A689930](v7 + 1, v3);
          if (__OFADD__(v9, 1)) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v9 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_24;
          }
          uint64_t v10 = *(void *)(v3 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v9, 1))
          {
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        char v11 = __RKEntityInteractionManager.containsChangeSceneAction(action:)(v10);
        swift_release();
        ++v7;
        if (v11) {
          goto LABEL_21;
        }
      }
    }
    goto LABEL_21;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

unint64_t __RKEntityInteractionManager.interactions(matching:entities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a2;
  uint64_t v91 = a1;
  v108[0] = 91;
  v108[1] = 0xE100000000000000;
  uint64_t v104 = 0;
  unint64_t v105 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  unint64_t v7 = 0xE100000000000000;
  unint64_t v109 = MEMORY[0x263F8EE78];
  uint64_t v98 = 91;
  uint64_t v8 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v8, v108, partial apply for implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:), v2);
  swift_beginAccess();
  unint64_t v96 = v2;
  unint64_t v9 = *(void *)(v2 + 64);
  unint64_t v97 = 0xE100000000000000;
  if (v9 >> 62) {
    goto LABEL_193;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v11 = v98;
    if (!v10)
    {
LABEL_179:
      uint64_t v82 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v82);
      v84[2] = &v109;
      uint64_t v106 = v11;
      unint64_t v107 = v7;
      uint64_t v83 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v83, &v106, partial apply for implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:), v84);
      swift_bridgeObjectRelease();
      return v109;
    }
    unint64_t v12 = 0;
    unint64_t v99 = v9 & 0xC000000000000001;
    uint64_t v88 = v9 & 0xFFFFFFFFFFFFFF8;
    unint64_t v87 = v9 + 32;
    uint64_t v13 = v101 & 0xFFFFFFFFFFFFFF8;
    uint64_t v102 = v101 & 0xFFFFFFFFFFFFFF8;
    if (v101 < 0) {
      uint64_t v13 = v101;
    }
    v84[5] = v13;
    unint64_t v103 = v101 & 0xC000000000000001;
    unsigned __int8 v100 = (void *)(v101 + 32);
    long long v85 = xmmword_22831E4E0;
    uint64_t v94 = v10;
    unint64_t v90 = v9;
LABEL_9:
    if (!v99) {
      break;
    }
    uint64_t v16 = MEMORY[0x22A689930](v12, v9);
    BOOL v17 = __OFADD__(v12++, 1);
    if (!v17) {
      goto LABEL_15;
    }
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    swift_bridgeObjectRetain();
    unint64_t v7 = v97;
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  if (v12 >= *(void *)(v88 + 16)) {
    goto LABEL_187;
  }
  uint64_t v16 = *(void *)(v87 + 8 * v12);
  swift_retain();
  BOOL v17 = __OFADD__(v12++, 1);
  if (v17) {
    goto LABEL_181;
  }
LABEL_15:
  uint64_t v106 = v11;
  unint64_t v107 = v7;
  uint64_t v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v106, partial apply for implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:), v16);
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 40) & 1) == 0)
  {
    uint64_t v106 = v11;
    unint64_t v107 = v7;
    os_log_type_t v14 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v14, &v106);
    uint64_t v106 = v11;
    unint64_t v107 = v7;
    uint64_t v15 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v106, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
    swift_release();
    goto LABEL_8;
  }
  swift_beginAccess();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(**(void **)(v16 + 16) + 184);
  swift_retain();
  LOBYTE(v19) = v19(v91);
  swift_release();
  if ((v19 & 1) == 0)
  {
    uint64_t v11 = v98;
    unint64_t v7 = v97;
    uint64_t v106 = v98;
    unint64_t v107 = v97;
    os_log_type_t v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v106);
    uint64_t v106 = v98;
    unint64_t v107 = v97;
    uint64_t v28 = static os_log_type_t.info.getter();
    goto LABEL_173;
  }
  unint64_t v20 = v109;
  if (v109 >> 62)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v9 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v9) {
      goto LABEL_22;
    }
  }
  if ((v20 & 0xC000000000000001) != 0)
  {
    uint64_t v41 = MEMORY[0x22A689930](0, v20);
    swift_unknownObjectRelease();
    if (v41 == v16)
    {
LABEL_41:
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v98;
      unint64_t v7 = v97;
      uint64_t v106 = v98;
      unint64_t v107 = v97;
      os_log_type_t v34 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v34, &v106);
      uint64_t v106 = v98;
      unint64_t v107 = v97;
      uint64_t v35 = static os_log_type_t.info.getter();
      goto LABEL_165;
    }
  }
  else if (*(void *)(v20 + 32) == v16)
  {
    goto LABEL_41;
  }
  if (v9 != 1)
  {
    uint64_t v30 = 1;
    do
    {
      if ((v20 & 0xC000000000000001) != 0)
      {
        uint64_t v31 = MEMORY[0x22A689930](v30, v20);
        BOOL v17 = __OFADD__(v30++, 1);
        if (v17) {
          goto LABEL_184;
        }
        uint64_t v32 = v31;
        swift_unknownObjectRelease();
        if (v32 == v16) {
          goto LABEL_41;
        }
      }
      else
      {
        if (__OFADD__(v30, 1)) {
          goto LABEL_188;
        }
        uint64_t v33 = *(void *)(v20 + 32 + 8 * v30++);
        if (v33 == v16) {
          goto LABEL_41;
        }
      }
    }
    while (v30 != v9);
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
  uint64_t v21 = v101;
  unint64_t v22 = (unint64_t)v101 >> 62;
  uint64_t v10 = v94;
  unint64_t v95 = (unint64_t)v101 >> 62;
  if (!v101) {
    goto LABEL_58;
  }
  if (v22)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v42) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v23 = *(void *)(v102 + 16);
    swift_retain();
    if (!v23)
    {
LABEL_57:
      swift_release();
      goto LABEL_58;
    }
  }
  uint64_t v24 = __RKEntityInteractionManager.targetEntity(for:)();
  if (!v24) {
    goto LABEL_57;
  }
  unint64_t v9 = v24;
  if (v22)
  {
    swift_bridgeObjectRetain_n();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v25 = result;
    if (!result) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v25 = *(void *)(v102 + 16);
    unint64_t result = swift_bridgeObjectRetain_n();
    if (!v25) {
      goto LABEL_31;
    }
  }
  if (v103)
  {
    uint64_t v81 = MEMORY[0x22A689930](0, v101);
    unint64_t result = swift_unknownObjectRelease();
    BOOL v39 = v81 == v9;
    uint64_t v21 = v101;
    if (!v39)
    {
LABEL_30:
      if (v25 != 1)
      {
        uint64_t v36 = 1;
        do
        {
          if (v103)
          {
            uint64_t v37 = MEMORY[0x22A689930](v36, v21);
            BOOL v17 = __OFADD__(v36++, 1);
            if (v17) {
              goto LABEL_191;
            }
            uint64_t v38 = v37;
            unint64_t result = swift_unknownObjectRelease();
            BOOL v39 = v38 == v9;
            uint64_t v10 = v94;
            if (v39) {
              goto LABEL_51;
            }
          }
          else
          {
            if (__OFADD__(v36, 1)) {
              goto LABEL_196;
            }
            uint64_t v40 = v100[v36++];
            if (v40 == v9) {
              goto LABEL_51;
            }
          }
        }
        while (v36 != v25);
      }
LABEL_31:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v98;
      unint64_t v7 = v97;
      uint64_t v106 = v98;
      unint64_t v107 = v97;
      os_log_type_t v27 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v27, &v106);
      uint64_t v106 = v98;
      unint64_t v107 = v97;
      uint64_t v28 = static os_log_type_t.info.getter();
LABEL_173:
      specialized InteractionsLogger.log(_:_:)(v28, &v106, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
      swift_release();
      unint64_t v9 = v90;
      goto LABEL_8;
    }
  }
  else if (*v100 != v9)
  {
    goto LABEL_30;
  }
LABEL_51:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v22 = v95;
LABEL_58:
  unint64_t v9 = *(void *)(v16 + 16);
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v43 = swift_dynamicCastClass();
  if (!v43) {
    goto LABEL_100;
  }
  uint64_t v44 = v43;
  swift_beginAccess();
  unint64_t v45 = *(void *)(v44 + 24);
  unint64_t v86 = v9;
  if (!(v45 >> 62))
  {
    uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v46) {
      goto LABEL_61;
    }
    goto LABEL_99;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  if (v46)
  {
LABEL_61:
    unint64_t v47 = 0;
    unint64_t v48 = v45 & 0xC000000000000001;
    uint64_t v93 = v45 & 0xFFFFFFFFFFFFFF8;
    uint64_t v92 = v45 + 32;
    unint64_t v89 = v45;
    while (1)
    {
      if (v48)
      {
        MEMORY[0x22A689930](v47, v45);
        BOOL v17 = __OFADD__(v47++, 1);
        if (v17) {
          goto LABEL_180;
        }
      }
      else
      {
        if (v47 >= *(void *)(v93 + 16)) {
          goto LABEL_183;
        }
        swift_retain();
        BOOL v17 = __OFADD__(v47++, 1);
        if (v17)
        {
LABEL_180:
          __break(1u);
          goto LABEL_181;
        }
      }
      if (!v21) {
        goto LABEL_62;
      }
      if (v22)
      {
        swift_bridgeObjectRetain();
        unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v9) {
          goto LABEL_62;
        }
LABEL_72:
        unint64_t v9 = v96;
        uint64_t v49 = __RKEntityInteractionManager.targetEntity(for:)();
        if (!v49) {
          goto LABEL_62;
        }
        unint64_t v9 = v49;
        if (v22)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
          if (!v50) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v50 = *(void *)(v102 + 16);
          swift_bridgeObjectRetain_n();
          if (!v50) {
            goto LABEL_78;
          }
        }
        if (v103)
        {
          uint64_t v56 = MEMORY[0x22A689930](0, v21);
          swift_unknownObjectRelease();
          BOOL v39 = v56 == v9;
          uint64_t v21 = v101;
          if (v39)
          {
LABEL_88:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_89;
          }
        }
        else if (*v100 == v9)
        {
          goto LABEL_88;
        }
        if (v50 != 1)
        {
          uint64_t v52 = 1;
          do
          {
            if (v103)
            {
              uint64_t v53 = MEMORY[0x22A689930](v52, v21);
              BOOL v17 = __OFADD__(v52++, 1);
              if (v17) {
                goto LABEL_182;
              }
              uint64_t v54 = v53;
              swift_unknownObjectRelease();
              BOOL v39 = v54 == v9;
              uint64_t v21 = v101;
              if (v39) {
                goto LABEL_88;
              }
            }
            else
            {
              if (__OFADD__(v52, 1)) {
                goto LABEL_185;
              }
              uint64_t v55 = v100[v52++];
              if (v55 == v9) {
                goto LABEL_88;
              }
            }
          }
          while (v52 != v50);
        }
LABEL_78:
        swift_release();
        swift_bridgeObjectRelease_n();
        uint64_t v106 = v98;
        unint64_t v107 = v97;
        os_log_type_t v51 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v51, &v106);
        swift_release();
LABEL_89:
        unint64_t v22 = v95;
        unint64_t v45 = v89;
        if (v47 == v46) {
          break;
        }
      }
      else
      {
        unint64_t v9 = *(void *)(v102 + 16);
        if (v9) {
          goto LABEL_72;
        }
LABEL_62:
        swift_release();
        if (v47 == v46) {
          break;
        }
      }
    }
  }
LABEL_99:
  swift_release();
  swift_bridgeObjectRelease();
LABEL_100:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v85;
  *(void *)(inited + 32) = v16;
  uint64_t v106 = inited;
  specialized Array._endMutation()();
  uint64_t v58 = v106;
  uint64_t v106 = MEMORY[0x263F8EE78];
  unint64_t result = swift_retain();
  if ((v58 & 0xC000000000000001) != 0)
  {
    uint64_t v59 = MEMORY[0x22A689930](0, v58);
    goto LABEL_104;
  }
  if (*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v59 = *(void *)(v58 + 32);
    swift_retain();
LABEL_104:
    swift_beginAccess();
    type metadata accessor for __RKEntityActionGroup();
    uint64_t v60 = swift_dynamicCastClass();
    uint64_t v61 = swift_retain();
    if (!v60)
    {
      MEMORY[0x22A688E10](v61);
      if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      goto LABEL_123;
    }
    uint64_t v92 = v59;
    uint64_t v93 = v58;
    uint64_t v62 = swift_retain();
    MEMORY[0x22A688E10](v62);
    if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    unint64_t result = __RKEntityActionGroup.allActions()();
    unint64_t v63 = result;
    if (result >> 62)
    {
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v64 = result;
      if (result) {
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v64 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v64)
      {
LABEL_109:
        if (v64 < 1) {
          goto LABEL_195;
        }
        uint64_t v65 = 0;
        do
        {
          if ((v63 & 0xC000000000000001) != 0) {
            MEMORY[0x22A689930](v65, v63);
          }
          else {
            swift_retain();
          }
          uint64_t v66 = swift_retain();
          MEMORY[0x22A688E10](v66);
          if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v65;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        while (v64 != v65);
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v21 = v101;
    unint64_t v22 = v95;
LABEL_123:
    unint64_t v9 = v106;
    swift_bridgeObjectRelease();
    uint64_t v10 = v94;
    if (!v21) {
      goto LABEL_170;
    }
    if (v22)
    {
      swift_bridgeObjectRetain();
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v79) {
        goto LABEL_170;
      }
    }
    else if (!*(void *)(v102 + 16))
    {
      goto LABEL_170;
    }
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      if (!v67)
      {
LABEL_169:
        swift_bridgeObjectRelease();
LABEL_170:
        swift_bridgeObjectRelease();
        uint64_t v80 = swift_retain();
        MEMORY[0x22A688E10](v80);
        if (*(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v11 = v98;
        unint64_t v7 = v97;
        uint64_t v106 = v98;
        unint64_t v107 = v97;
        uint64_t v28 = static os_log_type_t.info.getter();
        goto LABEL_173;
      }
    }
    else
    {
      uint64_t v67 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v67) {
        goto LABEL_169;
      }
    }
    unint64_t v68 = 0;
    uint64_t v92 = v9 & 0xFFFFFFFFFFFFFF8;
    unint64_t v89 = v9 + 32;
    uint64_t v93 = v67;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v69 = MEMORY[0x22A689930](v68, v9);
        BOOL v17 = __OFADD__(v68++, 1);
        if (v17) {
          goto LABEL_190;
        }
      }
      else
      {
        if (v68 >= *(void *)(v92 + 16)) {
          goto LABEL_192;
        }
        uint64_t v69 = *(void *)(v89 + 8 * v68);
        swift_retain();
        BOOL v17 = __OFADD__(v68++, 1);
        if (v17) {
          goto LABEL_190;
        }
      }
      swift_beginAccess();
      uint64_t v70 = *(void *)(v69 + 16);
      if (v70)
      {
        if (v22)
        {
          swift_bridgeObjectRetain_n();
          swift_retain();
          uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
          if (!v71) {
            goto LABEL_164;
          }
        }
        else
        {
          uint64_t v71 = *(void *)(v102 + 16);
          swift_bridgeObjectRetain_n();
          swift_retain();
          if (!v71) {
            goto LABEL_164;
          }
        }
        if (!v103)
        {
          if (*v100 == v70) {
            goto LABEL_129;
          }
          if (v71 == 1) {
            goto LABEL_164;
          }
          if (*(void *)(v21 + 40) == v70) {
            goto LABEL_129;
          }
LABEL_145:
          if (v71 != 2)
          {
            uint64_t v72 = 2;
            do
            {
              if (v103)
              {
                uint64_t v73 = MEMORY[0x22A689930](v72, v21);
                BOOL v17 = __OFADD__(v72++, 1);
                if (v17) {
                  goto LABEL_186;
                }
                uint64_t v74 = v73;
                swift_unknownObjectRelease();
                BOOL v39 = v74 == v70;
                uint64_t v21 = v101;
                if (v39) {
                  goto LABEL_155;
                }
              }
              else
              {
                if (__OFADD__(v72, 1)) {
                  goto LABEL_189;
                }
                uint64_t v75 = v100[v72++];
                if (v75 == v70)
                {
LABEL_155:
                  swift_release();
                  unint64_t v22 = v95;
                  goto LABEL_130;
                }
              }
            }
            while (v72 != v71);
          }
LABEL_164:
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          uint64_t v11 = v98;
          unint64_t v7 = v97;
          uint64_t v106 = v98;
          unint64_t v107 = v97;
          os_log_type_t v78 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v78, &v106);
          uint64_t v106 = v98;
          unint64_t v107 = v97;
          uint64_t v35 = static os_log_type_t.info.getter();
LABEL_165:
          specialized InteractionsLogger.log(_:_:)(v35, &v106, partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:), v16);
          swift_release();
          unint64_t v9 = v90;
          uint64_t v10 = v94;
LABEL_8:
          if (v12 == v10) {
            goto LABEL_179;
          }
          goto LABEL_9;
        }
        uint64_t v76 = MEMORY[0x22A689930](0, v21);
        swift_unknownObjectRelease();
        if (v76 != v70)
        {
          if (v71 == 1) {
            goto LABEL_164;
          }
          uint64_t v77 = MEMORY[0x22A689930](1, v101);
          swift_unknownObjectRelease();
          BOOL v39 = v77 == v70;
          uint64_t v21 = v101;
          if (!v39) {
            goto LABEL_145;
          }
LABEL_129:
          swift_release();
          goto LABEL_130;
        }
        swift_release();
        uint64_t v21 = v101;
LABEL_130:
        swift_bridgeObjectRelease_n();
        uint64_t v67 = v93;
      }
      swift_release();
      uint64_t v10 = v94;
      if (v68 == v67) {
        goto LABEL_169;
      }
    }
  }
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)(uint64_t a1)
{
  _StringGuts.grow(_:)(29);
  v2._uint64_t countAndFlagsBits = 0x72656469736E6F43;
  v2._object = (void *)0xEC00000020676E69;
  String.append(_:)(v2);
  swift_beginAccess();
  if (*(void *)(a1 + 64) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x63617265746E6920;
  v4._object = (void *)0xEF2973286E6F6974;
  String.append(_:)(v4);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x800000022835DBB0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)(void *a1)
{
  _StringGuts.grow(_:)(36);
  v2._uint64_t countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000022835DB90;
  v4._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  return 0;
}

uint64_t __RKEntityInteractionManager.targetEntity(for:)()
{
  type metadata accessor for __RKEntityCollisionTrigger();
  uint64_t v0 = swift_dynamicCastClass();
  if (!v0)
  {
    type metadata accessor for __RKEntityProximityTrigger();
    uint64_t v0 = swift_dynamicCastClass();
    if (!v0)
    {
      type metadata accessor for __RKEntityTapTrigger();
      uint64_t v0 = swift_dynamicCastClass();
      if (!v0)
      {
        type metadata accessor for __RKEntityTriggerGroup();
        uint64_t v4 = swift_dynamicCastClass();
        if (v4)
        {
          uint64_t v5 = v4;
          swift_beginAccess();
          unint64_t v6 = *(void *)(v5 + 24);
          if (v6 >> 62) {
            goto LABEL_21;
          }
          uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_retain();
          swift_bridgeObjectRetain();
          for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
          {
            uint64_t v8 = 4;
            while (1)
            {
              uint64_t v9 = v8 - 4;
              if ((v6 & 0xC000000000000001) == 0) {
                break;
              }
              uint64_t v10 = MEMORY[0x22A689930](v8 - 4, v6);
              uint64_t v11 = v8 - 3;
              if (__OFADD__(v9, 1)) {
                goto LABEL_20;
              }
LABEL_15:
              uint64_t v2 = __RKEntityInteractionManager.targetEntity(for:)(v10);
              swift_release();
              if (v2)
              {
                swift_release();
                swift_bridgeObjectRelease();
                return v2;
              }
              ++v8;
              if (v11 == v7) {
                goto LABEL_17;
              }
            }
            uint64_t v10 = *(void *)(v6 + 8 * v8);
            swift_retain();
            uint64_t v11 = v8 - 3;
            if (!__OFADD__(v9, 1)) {
              goto LABEL_15;
            }
LABEL_20:
            __break(1u);
LABEL_21:
            swift_retain();
            swift_bridgeObjectRetain();
          }
LABEL_17:
          swift_release();
          swift_bridgeObjectRelease();
        }
        return 0;
      }
    }
  }
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 24);
  swift_retain();
  return v2;
}

uint64_t __RKEntityInteractionManager.action(for:)(unint64_t a1)
{
  type metadata accessor for __RKEntityAction();
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 40);
  swift_retain();
  uint64_t v4 = static __RKEntityAction.action(for:entityLookupTable:)(a1, v3);
  swift_release();
  return v4;
}

uint64_t static __RKEntityAction.action(for:entityLookupTable:)(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v352 = a2;
  *(void *)&long long v353 = a1;
  uint64_t v342 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v342);
  uint64_t v344 = (uint64_t)&v313 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v336 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v336);
  v339 = (char *)&v313 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v335);
  uint64_t v341 = (uint64_t)&v313 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v337 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v337);
  v340 = (char *)&v313 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v343 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v343);
  v345 = (char *)&v313 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v334 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v334);
  uint64_t v338 = (uint64_t)&v313 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v331 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v331);
  v333 = (char *)&v313 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v332 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v332);
  uint64_t v349 = (uint64_t)&v313 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v329 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v329);
  v330 = (char *)&v313 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v350 = v11;
  uint64_t v351 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v346 = (uint64_t)&v313 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v323 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v323);
  uint64_t v327 = (uint64_t)&v313 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v322);
  uint64_t v328 = (uint64_t)&v313 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v320);
  uint64_t v325 = (uint64_t)&v313 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  uint64_t v17 = MEMORY[0x270FA5388](v347);
  uint64_t v319 = (uint64_t)&v313 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v326 = (uint64_t)&v313 - v19;
  v348 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  uint64_t v20 = MEMORY[0x270FA5388](v348);
  uint64_t v324 = (uint64_t)&v313 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v321 = (uint64_t)&v313 - v22;
  uint64_t v23 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v23 - 8);
  v318 = (char *)&v313 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v25 - 8);
  v316 = (char *)&v313 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v315 = (uint64_t)&v313 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v314 = (uint64_t)&v313 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v317 = (uint64_t)&v313 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v313 = (uint64_t)&v313 - v35;
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v313 - v36;
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started);
  uint64_t v40 = (char *)&v313 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v41 - 8);
  uint64_t v43 = (char *)&v313 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v46 = (char *)&v313 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  os_log_type_t v51 = (char *)&v313 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  uint64_t v53 = (unsigned __int8 *)&v313 - v52;
  _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(v353, (uint64_t)&v313 - v52, type metadata accessor for __RKEntityActionSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v69 = v327;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v327, type metadata accessor for __RKChangeSceneActionArguments);
      uint64_t v70 = __RKEntityLookupTable.entity(for:)(v69);
      uint64_t v71 = v346;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v351 + 16))(v346, v69 + *(int *)(v323 + 20), v350);
      type metadata accessor for __RKChangeSceneAction();
      swift_allocObject();
      uint64_t v66 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(v70, v71);
      swift_release();
      uint64_t v72 = type metadata accessor for __RKChangeSceneActionArguments;
      goto LABEL_202;
    case 2u:
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v46, type metadata accessor for __RKEntityCustomActionArguments);
      uint64_t v73 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      uint64_t v74 = &v46[*(int *)(v44 + 20)];
      uint64_t v76 = *(void *)v74;
      uint64_t v75 = *((void *)v74 + 1);
      uint64_t v77 = *(void *)&v46[*(int *)(v44 + 24)];
      type metadata accessor for __RKEntityCustomAction();
      os_log_type_t v78 = (void *)swift_allocObject();
      v78[14] = 0;
      v78[20] = 0;
      v78[19] = 0;
      v78[15] = 0;
      v78[16] = v76;
      v78[17] = v75;
      swift_beginAccess();
      uint64_t v79 = v78[14];
      v78[15] = 0;
      v78[14] = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v79);
      v78[18] = v77;
      swift_beginAccess();
      uint64_t v80 = v78[19];
      v78[20] = 0;
      v78[19] = 0;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v80);
      swift_release();
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v73);
      uint64_t v81 = type metadata accessor for __RKEntityCustomActionArguments;
      goto LABEL_147;
    case 3u:
      uint64_t v82 = v328;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v328, type metadata accessor for __RKEntityEmphasisActionArguments);
      uint64_t v83 = __RKEntityLookupTable.entity(for:)(v82);
      uint64_t v84 = v322[6];
      uint64_t v85 = v82 + v322[5];
      if (*(unsigned char *)(v85 + 4)) {
        float v86 = 1.0;
      }
      else {
        float v86 = *(float *)v85;
      }
      if (*(unsigned char *)(v82 + v84 + 4)) {
        float v87 = 3.0;
      }
      else {
        float v87 = *(float *)(v82 + v84);
      }
      if (*(unsigned char *)(v82 + v322[7]) == 3) {
        char v88 = 0;
      }
      else {
        char v88 = *(unsigned char *)(v82 + v322[7]);
      }
      if (*(unsigned char *)(v82 + v322[8]) == 8) {
        char v89 = 0;
      }
      else {
        char v89 = *(unsigned char *)(v82 + v322[8]);
      }
      type metadata accessor for __RKEntityEmphasisAction();
      uint64_t v90 = swift_allocObject();
      *(_OWORD *)(v90 + 120) = 0u;
      *(_OWORD *)(v90 + 136) = 0u;
      *(_OWORD *)(v90 + 152) = 0u;
      *(_OWORD *)(v90 + 168) = 0u;
      *(_OWORD *)(v90 + 184) = 0u;
      *(void *)(v90 + 200) = 0;
      *(unsigned char *)(v90 + 208) = 1;
      *(float *)(v90 + 108) = v86;
      *(float *)(v90 + 112) = v87;
      *(unsigned char *)(v90 + 116) = v88;
      *(unsigned char *)(v90 + 117) = v89;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v83);
      uint64_t v91 = type metadata accessor for __RKEntityEmphasisActionArguments;
      goto LABEL_190;
    case 4u:
      uint64_t v46 = v330;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v330, type metadata accessor for __RKEntityFadeActionArguments);
      uint64_t v92 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      uint64_t v93 = *(int *)(v329 + 24);
      int v94 = *(_DWORD *)&v46[*(int *)(v329 + 20)];
      if (v46[v93 + 4]) {
        float v95 = 1.0;
      }
      else {
        float v95 = *(float *)&v46[v93];
      }
      type metadata accessor for __RKEntityFadeAction();
      uint64_t v96 = swift_allocObject();
      *(_DWORD *)(v96 + 108) = v94;
      *(float *)(v96 + 112) = v95;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v92);
      uint64_t v81 = type metadata accessor for __RKEntityFadeActionArguments;
      goto LABEL_147;
    case 5u:
      int v97 = *(_DWORD *)v53;
      if (v53[8]) {
        float v98 = 1.0;
      }
      else {
        float v98 = *((float *)v53 + 1);
      }
      type metadata accessor for __RKFadeSceneAction();
      uint64_t v99 = swift_allocObject();
      *(_DWORD *)(v99 + 108) = v97;
      *(float *)(v99 + 112) = v98;
      return __RKEntityAction.init(targetEntity:)(0);
    case 6u:
      int v100 = *v53;
      uint64_t v101 = *((void *)v53 + 1);
      int v102 = v53[16];
      uint64_t v103 = *((void *)v53 + 3);
      int v104 = v53[32];
      unsigned __int32 v105 = v53[33];
      uint64_t v106 = *(void *)(v101 + 16);
      uint64_t v107 = MEMORY[0x263F8EE78];
      if (v106)
      {
        LODWORD(v348) = v100;
        LODWORD(v349) = v104;
        uint64_t v350 = v103;
        LODWORD(v351) = v102;
        LODWORD(v353) = v105;
        uint64_t v355 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v108 = v101 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
        uint64_t v109 = *(void *)(v48 + 72);
        unint64_t v110 = v352;
        do
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(v108, (uint64_t)v51, type metadata accessor for __RKEntityActionSpecification);
          static __RKEntityAction.action(for:entityLookupTable:)(v51, v110);
          outlined destroy of __RKEntityPlayTimelineActionArguments((uint64_t)v51, type metadata accessor for __RKEntityActionSpecification);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v108 += v109;
          --v106;
        }
        while (v106);
        uint64_t v107 = v355;
        swift_bridgeObjectRelease();
        LOBYTE(v105) = v353;
        LOBYTE(v102) = v351;
        uint64_t v103 = v350;
        LOBYTE(v104) = v349;
        LOBYTE(v100) = (_BYTE)v348;
      }
      LOBYTE(v355) = v100;
      type metadata accessor for __RKEntityActionGroup();
      swift_allocObject();
      uint64_t v66 = __RKEntityActionGroup.init(actions:ordering:loopCount:)(v107, (char *)&v355, v103, v104);
      swift_beginAccess();
      *(unsigned char *)(v66 + 89) = v102 & 1;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(unsigned char *)(v66 + 90) = v105 & 1;
      swift_release();
      return v66;
    case 7u:
      uint64_t v69 = v326;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v326, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v111 = __RKEntityLookupTable.entity(for:)(v69);
      uint64_t v112 = v347[6];
      uint64_t v113 = v69 + v347[5];
      if (*(unsigned char *)(v113 + 4)) {
        float v114 = 1.0;
      }
      else {
        float v114 = *(float *)v113;
      }
      if (*(unsigned char *)(v69 + v112 + 4)) {
        float v115 = 10.0;
      }
      else {
        float v115 = *(float *)(v69 + v112);
      }
      uint64_t v116 = v347[8];
      int v117 = *(unsigned __int8 *)(v69 + v347[7]);
      if (v117 == 10) {
        LOBYTE(v117) = 0;
      }
      LOBYTE(v355) = v117;
      int v118 = *(unsigned __int8 *)(v69 + v116);
      if (v118 == 3) {
        LOBYTE(v118) = 0;
      }
      v354[0] = v118;
      uint64_t v119 = v347[10];
      int v120 = *(unsigned __int8 *)(v69 + v347[9]);
      char v121 = (v120 == 2) | v120;
      if (*(unsigned char *)(v69 + v119 + 4)) {
        float v122 = 0.0;
      }
      else {
        float v122 = *(float *)(v69 + v119);
      }
      uint64_t v123 = v69 + v347[13];
      if (*(unsigned char *)(v123 + 4)) {
        float v124 = 0.0;
      }
      else {
        float v124 = *(float *)v123;
      }
      uint64_t v125 = v69 + v347[12];
      char v126 = *(unsigned char *)(v69 + v347[11]) & 1;
      if (*(unsigned char *)(v125 + 4)) {
        float v127 = 0.0;
      }
      else {
        float v127 = *(float *)v125;
      }
      int v128 = *(unsigned __int8 *)(v69 + v347[14]);
      if (v128 == 3) {
        LOBYTE(v128) = 0;
      }
      char v357 = v128;
      int v129 = *(unsigned __int8 *)(v69 + v347[15]);
      if (v129 == 10) {
        LOBYTE(v129) = 0;
      }
      v356[0] = v129;
      type metadata accessor for __RKEntityHideAction();
      swift_allocObject();
      uint64_t v66 = __RKEntityHideAction.init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(v111, (char *)&v355, v354, v121 & 1, v126, &v357, v356, v114, v115, v122, v124, v127);
      uint64_t v72 = type metadata accessor for __RKEntityHideActionArguments;
      goto LABEL_202;
    case 8u:
      uint64_t v43 = v333;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v333, type metadata accessor for __RKEntityForceActionArguments);
      *(void *)&long long v353 = __RKEntityLookupTable.entity(for:)((uint64_t)v43);
      v233 = &v43[*(int *)(v331 + 20)];
      uint64_t v234 = *(void *)v233;
      uint64_t v235 = *((void *)v233 + 1);
      char v236 = v233[16];
      v237 = &v43[*(int *)(v331 + 24)];
      uint64_t v238 = *(void *)v237;
      uint64_t v239 = *((void *)v237 + 1);
      char v240 = v237[16];
      type metadata accessor for __RKEntityForceAction();
      uint64_t v241 = swift_allocObject();
      *(void *)(v241 + 112) = 0;
      *(void *)(v241 + 120) = 0;
      *(unsigned char *)(v241 + 128) = 1;
      *(void *)(v241 + 144) = 0;
      *(void *)(v241 + 152) = 0;
      *(unsigned char *)(v241 + 160) = 1;
      *(_OWORD *)(v241 + 168) = 0u;
      *(_OWORD *)(v241 + 184) = 0u;
      *(void *)(v241 + 200) = 0;
      swift_beginAccess();
      *(void *)(v241 + 112) = v234;
      *(void *)(v241 + 120) = v235;
      *(unsigned char *)(v241 + 128) = v236;
      swift_beginAccess();
      *(void *)(v241 + 144) = v238;
      *(void *)(v241 + 152) = v239;
      *(unsigned char *)(v241 + 160) = v240;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v353);
      v151 = type metadata accessor for __RKEntityForceActionArguments;
      goto LABEL_151;
    case 9u:
      uint64_t v69 = v321;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v321, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v130 = __RKEntityLookupTable.entity(for:)(v69);
      uint64_t v131 = v348[6];
      uint64_t v132 = v69 + v348[5];
      if (*(unsigned char *)(v132 + 4)) {
        float v133 = 1.0;
      }
      else {
        float v133 = *(float *)v132;
      }
      if (*(unsigned char *)(v69 + v131 + 4)) {
        float v134 = 10.0;
      }
      else {
        float v134 = *(float *)(v69 + v131);
      }
      uint64_t v135 = v348[8];
      int v136 = *(unsigned __int8 *)(v69 + v348[7]);
      if (v136 == 10) {
        LOBYTE(v136) = 0;
      }
      LOBYTE(v355) = v136;
      int v137 = *(unsigned __int8 *)(v69 + v135);
      if (v137 == 3) {
        LOBYTE(v137) = 0;
      }
      v354[0] = v137;
      uint64_t v138 = v348[10];
      int v139 = *(unsigned __int8 *)(v69 + v348[9]);
      char v140 = (v139 == 2) | v139;
      if (*(unsigned char *)(v69 + v138 + 4)) {
        float v141 = 1.0;
      }
      else {
        float v141 = *(float *)(v69 + v138);
      }
      uint64_t v142 = v69 + v348[13];
      if (*(unsigned char *)(v142 + 4)) {
        float v143 = 0.0;
      }
      else {
        float v143 = *(float *)v142;
      }
      uint64_t v144 = v69 + v348[12];
      char v145 = *(unsigned char *)(v69 + v348[11]) & 1;
      if (*(unsigned char *)(v144 + 4)) {
        float v146 = 0.0;
      }
      else {
        float v146 = *(float *)v144;
      }
      int v147 = *(unsigned __int8 *)(v69 + v348[14]);
      if (v147 == 3) {
        LOBYTE(v147) = 0;
      }
      char v357 = v147;
      int v148 = *(unsigned __int8 *)(v69 + v348[15]);
      if (v148 == 10) {
        LOBYTE(v148) = 0;
      }
      v356[0] = v148;
      type metadata accessor for __RKEntityShowAction();
      swift_allocObject();
      uint64_t v66 = __RKEntityShowAction.init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(v130, (char *)&v355, v354, v140 & 1, v145, &v357, v356, v133, v134, v141, v143, v146);
      uint64_t v72 = type metadata accessor for __RKEntityShowActionArguments;
      goto LABEL_202;
    case 0xAu:
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v40, type metadata accessor for __RKEntityStartAnimateActionArguments);
      uint64_t v242 = __RKEntityLookupTable.entity(for:)((uint64_t)v40);
      uint64_t v243 = started[6];
      *(void *)&long long v353 = *(void *)&v40[started[5]];
      char v244 = v40[v243];
      double v245 = *(double *)&v40[started[7]];
      double v246 = *(double *)&v40[started[8]];
      uint64_t v247 = started[12];
      float v248 = *(float *)&v40[started[11]];
      uint64_t v249 = started[9];
      LODWORD(v349) = v40[started[10]];
      char v250 = v40[v249];
      LOBYTE(v355) = v244;
      char v251 = v40[v247];
      uint64_t v252 = started[14];
      v253 = &v40[started[13]];
      if (v253[8]) {
        double v254 = 1.0;
      }
      else {
        double v254 = *(double *)v253;
      }
      uint64_t v255 = (uint64_t)&v40[v252];
      outlined init with copy of UUID?((uint64_t)&v40[v252], (uint64_t)v37);
      uint64_t v256 = v350;
      v257 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v351 + 48);
      int v258 = v257(v37, 1, v350);
      outlined destroy of UUID?((uint64_t)v37);
      if (v258 == 1)
      {
        uint64_t v259 = 0;
        goto LABEL_198;
      }
      uint64_t v307 = v313;
      outlined init with copy of UUID?(v255, v313);
      if (v257((char *)v307, 1, v256) == 1) {
        goto LABEL_206;
      }
      uint64_t v259 = __RKEntityLookupTable.entity(for:)(v307);
      (*(void (**)(uint64_t, uint64_t))(v351 + 8))(v307, v256);
LABEL_198:
      uint64_t v308 = v353;
      char v309 = v250;
      char v310 = v349;
      type metadata accessor for __RKEntityStartAnimateAction();
      swift_allocObject();
      uint64_t v66 = __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v242, v308, (char *)&v355, v310, v309, v251 & 1, v259, v245, v246, v248, v254);
      v218 = type metadata accessor for __RKEntityStartAnimateActionArguments;
LABEL_199:
      uint64_t v67 = v218;
      uint64_t v68 = (uint64_t)v40;
LABEL_203:
      outlined destroy of __RKEntityPlayTimelineActionArguments(v68, v67);
      return v66;
    case 0xBu:
      uint64_t v46 = v316;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v316, type metadata accessor for __RKEntityStopAnimateActionArguments);
      uint64_t v149 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      type metadata accessor for __RKEntityStopAnimateAction();
      swift_allocObject();
      uint64_t v66 = __RKEntityAnimateAction.init(targetEntity:)(v149);
      uint64_t v81 = type metadata accessor for __RKEntityStopAnimateActionArguments;
      goto LABEL_147;
    case 0xCu:
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v43, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      uint64_t v150 = __RKEntityLookupTable.entity(for:)((uint64_t)v43);
      type metadata accessor for __RKEntityToggleAnimateAction();
      *(void *)(swift_allocObject() + 264) = 0;
      uint64_t v66 = __RKEntityAnimateAction.init(targetEntity:)(v150);
      v151 = type metadata accessor for __RKEntityToggleAnimateActionArguments;
LABEL_151:
      uint64_t v67 = v151;
      uint64_t v68 = (uint64_t)v43;
      goto LABEL_203;
    case 0xDu:
      uint64_t v46 = v318;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v318, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      uint64_t v152 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      type metadata accessor for __RKEntityToggleVisibilityAction();
      uint64_t v153 = swift_allocObject();
      *(void *)(v153 + 112) = 0;
      *(unsigned char *)(v153 + 120) = 1;
      *(void *)(v153 + 128) = 0;
      *(unsigned char *)(v153 + 136) = 1;
      *(_DWORD *)(v153 + 140) = 0;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v152);
      uint64_t v81 = type metadata accessor for __RKEntityToggleVisibilityActionArguments;
      goto LABEL_147;
    case 0xEu:
      uint64_t v154 = v349;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v349, type metadata accessor for __RKEntityTransformActionArguments);
      *(void *)&long long v353 = __RKEntityLookupTable.entity(for:)(v154);
      uint64_t v155 = v154 + v332[5];
      uint64_t v156 = v154 + v332[6];
      char v157 = *(unsigned char *)(v156 + 16);
      if (v157)
      {
        v347 = 0;
        v348 = 0;
      }
      else
      {
        v268 = *(int **)v156;
        v348 = *(int **)(v154 + v332[6] + 8);
        v347 = v268;
      }
      uint64_t v346 = *(void *)v155;
      v345 = *(char **)(v155 + 8);
      LODWORD(v344) = *(unsigned __int8 *)(v155 + 16);
      v269 = (unsigned int *)(v349 + v332[7]);
      uint64_t v270 = v349 + v332[8];
      if (*(unsigned char *)(v270 + 4)) {
        float v271 = 1.0;
      }
      else {
        float v271 = *(float *)v270;
      }
      int v272 = *(unsigned __int8 *)(v349 + v332[10]);
      LOBYTE(v355) = *(unsigned char *)(v349 + v332[9]) & 1;
      if (v272 == 10) {
        char v273 = 0;
      }
      else {
        char v273 = v272;
      }
      v354[0] = v273;
      uint64_t v274 = v332[12];
      int v275 = *(unsigned __int8 *)(v349 + v332[11]);
      if (v275 == 3) {
        LOBYTE(v275) = 0;
      }
      char v357 = v275;
      uint64_t v276 = v332[13];
      uint64_t v277 = v349 + v332[14];
      uint64_t v278 = *v269;
      unsigned __int8 v279 = *((unsigned char *)v269 + 4);
      char v280 = *(unsigned char *)(v349 + v274);
      if (*(unsigned char *)(v277 + 4)) {
        float v281 = 0.0;
      }
      else {
        float v281 = *(float *)v277;
      }
      if (*(unsigned char *)(v349 + v276 + 4)) {
        float v282 = 0.0;
      }
      else {
        float v282 = *(float *)(v349 + v276);
      }
      uint64_t v283 = v349 + v332[15];
      uint64_t v284 = v317;
      outlined init with copy of UUID?(v283, v317);
      uint64_t v285 = v350;
      v286 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v351 + 48);
      int v287 = v286(v284, 1, v350);
      outlined destroy of UUID?(v284);
      if (v287 == 1)
      {
        uint64_t v288 = 0;
      }
      else
      {
        uint64_t v303 = v283;
        uint64_t v304 = v314;
        outlined init with copy of UUID?(v303, v314);
        if (v286(v304, 1, v285) == 1)
        {
          __break(1u);
LABEL_206:
          __break(1u);
          JUMPOUT(0x228214634);
        }
        uint64_t v305 = __RKEntityLookupTable.entity(for:)(v304);
        uint64_t v306 = v304;
        uint64_t v288 = v305;
        (*(void (**)(uint64_t, uint64_t))(v351 + 8))(v306, v285);
      }
      type metadata accessor for __RKEntityTransformAction();
      swift_allocObject();
      v356[0] = v279;
      uint64_t v66 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v353, v346, (uint64_t)v345, v344, (uint64_t)v347, (uint64_t)v348, v157, v278 | ((unint64_t)v279 << 32), v271, v281, v282, (char *)&v355, v354, &v357, v280 & 1, v288);
      swift_release();
      uint64_t v67 = type metadata accessor for __RKEntityTransformActionArguments;
      uint64_t v68 = v349;
      goto LABEL_203;
    case 0xFu:
      int v158 = *(_DWORD *)v53;
      type metadata accessor for __RKWaitAction();
      uint64_t v159 = swift_allocObject();
      *(void *)(v159 + 120) = 0;
      *(void *)(v159 + 128) = 0x3F80624DD2F1A9FCLL;
      *(_OWORD *)(v159 + 136) = 0u;
      *(_OWORD *)(v159 + 152) = 0u;
      *(_OWORD *)(v159 + 168) = 0u;
      *(void *)(v159 + 184) = 0;
      *(_DWORD *)(v159 + 108) = v158;
      *(void *)(v159 + 112) = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
      return __RKEntityAction.init(targetEntity:)(0);
    case 0x10u:
      uint64_t v82 = v338;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v338, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v160 = __RKEntityLookupTable.entity(for:)(v82);
      v161 = (int *)v334;
      uint64_t v162 = __RKEntityLookupTable.entity(for:)(v82 + *(int *)(v334 + 20));
      uint64_t v163 = v161[7];
      uint64_t v164 = v82 + v161[6];
      if (*(unsigned char *)(v164 + 4)) {
        float v165 = 1.0;
      }
      else {
        float v165 = *(float *)v164;
      }
      if (*(unsigned char *)(v82 + v163 + 4)) {
        float v166 = 1.0;
      }
      else {
        float v166 = *(float *)(v82 + v163);
      }
      uint64_t v167 = v82 + v161[8];
      if (*(unsigned char *)(v167 + 16)) {
        long long v168 = xmmword_22830ECA0;
      }
      else {
        long long v168 = *(_OWORD *)v167;
      }
      long long v353 = v168;
      char v289 = *(unsigned char *)(v82 + v161[9]) & 1;
      LOBYTE(v355) = *(unsigned char *)(v82 + v161[10]) & 1;
      uint64_t v290 = v161[12];
      char v291 = *(unsigned char *)(v82 + v161[11]) & 1;
      uint64_t v292 = v82 + v161[13];
      if (*(unsigned char *)(v292 + 4)) {
        float v293 = 0.0;
      }
      else {
        float v293 = *(float *)v292;
      }
      if (*(unsigned char *)(v82 + v290 + 4)) {
        float v294 = 0.0;
      }
      else {
        float v294 = *(float *)(v82 + v290);
      }
      type metadata accessor for __RKEntityOrbitEntityAction();
      swift_allocObject();
      uint64_t v66 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(v160, v162, v289, (char *)&v355, v291, 0, v165, v166, (__n128)v353, v293, v294);
      swift_release();
      uint64_t v91 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
LABEL_190:
      uint64_t v67 = v91;
      uint64_t v68 = v82;
      goto LABEL_203;
    case 0x11u:
      uint64_t v46 = v340;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v340, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      uint64_t v169 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      uint64_t v170 = v337[6];
      v171 = &v46[v337[5]];
      if (v171[4]) {
        float v172 = 1.0;
      }
      else {
        float v172 = *(float *)v171;
      }
      if (v46[v170 + 4]) {
        float v173 = 0.0;
      }
      else {
        float v173 = *(float *)&v46[v170];
      }
      v174 = &v46[v337[7]];
      long long v175 = xmmword_22830ECA0;
      long long v176 = xmmword_22830ECA0;
      if ((v174[16] & 1) == 0) {
        long long v176 = *(_OWORD *)v174;
      }
      long long v353 = v176;
      uint64_t v177 = v337[9];
      v178 = &v46[v337[8]];
      if (v178[4]) {
        float v179 = 0.0;
      }
      else {
        float v179 = *(float *)v178;
      }
      if ((v46[v177 + 16] & 1) == 0) {
        long long v175 = *(_OWORD *)&v46[v177];
      }
      long long v352 = v175;
      char v180 = v46[v337[10]] & 1;
      type metadata accessor for __RKEntityLookAtCameraAction();
      swift_allocObject();
      uint64_t v66 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(v172, v173, (__n128)v353, v179, (__n128)v352, v169, v180);
      swift_release();
      uint64_t v81 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
      goto LABEL_147;
    case 0x12u:
      uint64_t v40 = v345;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v345, type metadata accessor for __RKEntitySwapEntityActionArguments);
      uint64_t v181 = v343;
      uint64_t v182 = (uint64_t)&v40[*(int *)(v343 + 24)];
      uint64_t v183 = v319;
      _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(v182, v319, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v184 = __RKEntityLookupTable.entity(for:)(v183);
      v185 = *(void (**)(uint64_t, uint64_t))(v351 + 8);
      uint64_t v186 = v183;
      uint64_t v187 = v350;
      v185(v186, v350);
      uint64_t v188 = v347[6];
      uint64_t v189 = v182 + v347[5];
      if (*(unsigned char *)(v189 + 4)) {
        float v190 = 1.0;
      }
      else {
        float v190 = *(float *)v189;
      }
      if (*(unsigned char *)(v182 + v188 + 4)) {
        float v191 = 10.0;
      }
      else {
        float v191 = *(float *)(v182 + v188);
      }
      uint64_t v192 = v347[8];
      int v193 = *(unsigned __int8 *)(v182 + v347[7]);
      if (v193 == 10) {
        LOBYTE(v193) = 0;
      }
      LOBYTE(v355) = v193;
      int v194 = *(unsigned __int8 *)(v182 + v192);
      if (v194 == 3) {
        LOBYTE(v194) = 0;
      }
      v354[0] = v194;
      char v195 = *(unsigned char *)(v182 + v347[11]) & 1;
      uint64_t v196 = v347[15];
      int v197 = *(unsigned __int8 *)(v182 + v347[14]);
      if (v197 == 3) {
        LOBYTE(v197) = 0;
      }
      char v357 = v197;
      int v198 = *(unsigned __int8 *)(v182 + v196);
      if (v198 == 10) {
        LOBYTE(v198) = 0;
      }
      v356[0] = v198;
      type metadata accessor for __RKEntityHideAction();
      swift_allocObject();
      uint64_t v199 = __RKEntityHideAction.init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(v184, (char *)&v355, v354, 0, v195, &v357, v356, v190, v191, 0.0, 0.0, 0.0);
      uint64_t v200 = (uint64_t)&v40[*(int *)(v181 + 28)];
      uint64_t v201 = v324;
      _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(v200, v324, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v202 = __RKEntityLookupTable.entity(for:)(v201);
      v185(v201, v187);
      uint64_t v203 = v348[6];
      uint64_t v204 = v200 + v348[5];
      if (*(unsigned char *)(v204 + 4)) {
        float v205 = 1.0;
      }
      else {
        float v205 = *(float *)v204;
      }
      if (*(unsigned char *)(v200 + v203 + 4)) {
        float v206 = 10.0;
      }
      else {
        float v206 = *(float *)(v200 + v203);
      }
      uint64_t v207 = v348[8];
      int v208 = *(unsigned __int8 *)(v200 + v348[7]);
      if (v208 == 10) {
        LOBYTE(v208) = 0;
      }
      LOBYTE(v355) = v208;
      int v209 = *(unsigned __int8 *)(v200 + v207);
      if (v209 == 3) {
        LOBYTE(v209) = 0;
      }
      v354[0] = v209;
      char v210 = *(unsigned char *)(v200 + v348[11]) & 1;
      uint64_t v211 = v348[15];
      int v212 = *(unsigned __int8 *)(v200 + v348[14]);
      if (v212 == 3) {
        LOBYTE(v212) = 0;
      }
      char v357 = v212;
      int v213 = *(unsigned __int8 *)(v200 + v211);
      if (v213 == 10) {
        LOBYTE(v213) = 0;
      }
      v356[0] = v213;
      type metadata accessor for __RKEntityShowAction();
      swift_allocObject();
      uint64_t v214 = __RKEntityShowAction.init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(v202, (char *)&v355, v354, 0, v210, &v357, v356, v205, v206, 1.0, 0.0, 0.0);
      uint64_t v215 = __RKEntityLookupTable.entity(for:)((uint64_t)v40);
      uint64_t v216 = __RKEntityLookupTable.entity(for:)((uint64_t)&v40[*(int *)(v181 + 20)]);
      type metadata accessor for __RKEntitySwapEntityAction();
      uint64_t v217 = swift_allocObject();
      *(_OWORD *)(v217 + 136) = 0u;
      *(_OWORD *)(v217 + 152) = 0u;
      *(_OWORD *)(v217 + 168) = 0u;
      *(void *)(v217 + 112) = v216;
      *(void *)(v217 + 120) = v199;
      *(void *)(v217 + 128) = v214;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v215);
      v218 = type metadata accessor for __RKEntitySwapEntityActionArguments;
      goto LABEL_199;
    case 0x13u:
      uint64_t v69 = v341;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v341, type metadata accessor for __RKEntitySpinActionArguments);
      uint64_t v260 = __RKEntityLookupTable.entity(for:)(v69);
      uint64_t v261 = v335[6];
      uint64_t v262 = v69 + v335[5];
      if (*(unsigned char *)(v262 + 4)) {
        float v263 = 1.0;
      }
      else {
        float v263 = *(float *)v262;
      }
      if (*(unsigned char *)(v69 + v261 + 4)) {
        float v264 = 1.0;
      }
      else {
        float v264 = *(float *)(v69 + v261);
      }
      char v265 = *(unsigned char *)(v69 + v335[7]) & 1;
      uint64_t v266 = v69 + v335[8];
      if (*(unsigned char *)(v266 + 16)) {
        long long v267 = xmmword_22830ECA0;
      }
      else {
        long long v267 = *(_OWORD *)v266;
      }
      long long v353 = v267;
      type metadata accessor for __RKEntitySpinAction();
      uint64_t v311 = swift_allocObject();
      *(void *)(v311 + 152) = 0;
      *(unsigned char *)(v311 + 160) = 1;
      *(_OWORD *)(v311 + 168) = 0u;
      *(_OWORD *)(v311 + 184) = 0u;
      *(_OWORD *)(v311 + 200) = 0u;
      *(_OWORD *)(v311 + 216) = 0u;
      *(_OWORD *)(v311 + 232) = 0u;
      *(float *)(v311 + 108) = v263;
      *(float *)(v311 + 112) = v264;
      *(_OWORD *)(v311 + 128) = v353;
      *(unsigned char *)(v311 + 144) = v265;
      uint64_t v66 = __RKEntityAction.init(targetEntity:)(v260);
      uint64_t v72 = type metadata accessor for __RKEntitySpinActionArguments;
LABEL_202:
      uint64_t v67 = v72;
      uint64_t v68 = v69;
      goto LABEL_203;
    case 0x14u:
      uint64_t v46 = v339;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, (uint64_t)v339, type metadata accessor for __RKEntitySetOpacityActionArguments);
      uint64_t v219 = __RKEntityLookupTable.entity(for:)((uint64_t)v46);
      float v220 = *(float *)&v46[*(int *)(v336 + 20)];
      float v221 = *(float *)&v46[*(int *)(v336 + 24)];
      type metadata accessor for __RKEntitySetOpacityAction();
      swift_allocObject();
      uint64_t v66 = __RKEntitySetOpacityAction.init(targetEntity:duration:opacity:)(v219, v220, v221);
      uint64_t v81 = type metadata accessor for __RKEntitySetOpacityActionArguments;
LABEL_147:
      uint64_t v67 = v81;
      uint64_t v68 = (uint64_t)v46;
      goto LABEL_203;
    case 0x15u:
      uint64_t v222 = v344;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v344, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      uint64_t v223 = __RKEntityLookupTable.entity(for:)(v222);
      v224 = (int *)v342;
      uint64_t v225 = __RKEntityLookupTable.entity(for:)(v222 + *(int *)(v342 + 20));
      v226 = (uint64_t *)(v222 + v224[6]);
      uint64_t v228 = *v226;
      uint64_t v227 = v226[1];
      uint64_t v229 = v315;
      outlined init with copy of UUID?(v222 + v224[7], v315);
      uint64_t v230 = v350;
      uint64_t v231 = v351;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v351 + 48))(v229, 1, v350) == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v232 = 0;
      }
      else
      {
        v295 = *(void (**)(uint64_t, uint64_t, uint64_t))(v231 + 32);
        *(void *)&long long v353 = v228;
        uint64_t v296 = v225;
        uint64_t v297 = v223;
        uint64_t v298 = v346;
        v295(v346, v229, v230);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v232 = __RKEntityLookupTable.entity(for:)(v298);
        uint64_t v299 = v298;
        uint64_t v223 = v297;
        uint64_t v225 = v296;
        uint64_t v228 = v353;
        (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v299, v230);
        swift_release();
      }
      v300 = (uint64_t *)(v222 + v224[8]);
      uint64_t v301 = *v300;
      uint64_t v302 = v300[1];
      type metadata accessor for __RKEntityPlayTimelineAction();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v66 = __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v223, v225, v228, v227, v232, v301, v302);
      uint64_t v67 = type metadata accessor for __RKEntityPlayTimelineActionArguments;
      uint64_t v68 = v222;
      goto LABEL_203;
    default:
      uint64_t v54 = v325;
      outlined init with take of __RKEntityPlayTimelineActionArguments((uint64_t)v53, v325, type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v55 = __RKEntityLookupTable.entity(for:)(v54);
      uint64_t v56 = v320[5];
      int v57 = *(unsigned __int8 *)(v54 + v320[6]);
      if (v57 == 3) {
        LOBYTE(v57) = 0;
      }
      LOBYTE(v355) = v57;
      uint64_t v58 = *(void *)(v54 + v56);
      uint64_t v59 = *(void *)(v54 + v56 + 8);
      uint64_t v60 = v54 + v320[7];
      if (*(unsigned char *)(v60 + 8)) {
        double v61 = 1.0;
      }
      else {
        double v61 = *(double *)v60;
      }
      char v62 = *(unsigned char *)(v54 + v320[8]) & 1;
      uint64_t v63 = v320[10];
      int v64 = *(unsigned __int8 *)(v54 + v320[9]);
      if (v64 == 3) {
        LOBYTE(v64) = 0;
      }
      v354[0] = v64;
      int v65 = *(unsigned __int8 *)(v54 + v63);
      if (v65 == 3) {
        LOBYTE(v65) = 1;
      }
      char v357 = v65;
      type metadata accessor for __RKEntityAudioAction();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v66 = __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v55, (char *)&v355, v58, v59, v62, v354, &v357, v61);
      uint64_t v67 = type metadata accessor for __RKEntityAudioActionArguments;
      uint64_t v68 = v54;
      goto LABEL_203;
  }
}

uint64_t closure #1 in __RKEntityInteractionManager.entitiesWithInteractionSpecifications()()
{
  uint64_t result = RESceneGetComponentsOfCustomType();
  if (v1 < 0) {
    goto LABEL_37;
  }
  uint64_t v2 = result;
  uint64_t v3 = v1;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    while (1)
    {
      uint64_t Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        if (!REEntityGetCustomComponent()) {
          goto LABEL_32;
        }
        uint64_t Object = RECustomComponentGetObject();
        if (!Object) {
          goto LABEL_32;
        }
        uint64_t v6 = *(unsigned __int8 **)Object;
        if (*(void *)(Object + 8)) {
          BOOL v7 = 1;
        }
        else {
          BOOL v7 = v6 == 0;
        }
        if (v7)
        {
          uint64_t result = swift_retain();
        }
        else
        {
          int v8 = *v6;
          uint64_t v9 = String.init(utf8String:)();
          if (v10) {
            Swift::Int v11 = v9;
          }
          else {
            Swift::Int v11 = 0;
          }
          if (v10) {
            unint64_t v12 = v10;
          }
          else {
            unint64_t v12 = 0xE000000000000000;
          }
          uint64_t v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = v6;
        }
        if (!v6) {
          goto LABEL_38;
        }
        swift_retain();
        uint64_t v13 = String.init(utf8String:)();
        unint64_t v15 = v14;
        swift_release();
        uint64_t v16 = v15 ? v13 : 0;
        unint64_t v17 = v15 ? v15 : 0xE000000000000000;
        uint64_t v18 = (NSString *)MEMORY[0x22A688A50](v16, v17);
        swift_bridgeObjectRelease();
        Class v19 = NSClassFromString(v18);

        swift_release();
        if (!v19) {
          goto LABEL_32;
        }
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        uint64_t v20 = swift_dynamicCastMetatype();
        if (v20)
        {
          uint64_t v21 = (*(uint64_t (**)(void))(v20 + 232))();
          uint64_t v22 = *(void *)(v21 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v22, 0);
          *(void *)(v21 + 16) = Entity;
          MEMORY[0x22A68E750](Entity, v21);
          swift_release();
        }
        else
        {
LABEL_32:
          makeEntity(for:)(Entity);
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v2 += 8;
      if (!--v3) {
        return v23;
      }
    }
  }
  return result;
}

uint64_t protocol witness for __RKEntityInteractionService.automaticallyInvokesStartTrigger.setter in conformance __RKEntityInteractionManager(char a1)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 26);
  *(unsigned char *)(v1 + 26) = a1;
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(v3);
}

void (*protocol witness for __RKEntityInteractionService.automaticallyInvokesStartTrigger.modify in conformance __RKEntityInteractionManager(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unint64_t static __RKEntityTrigger.trigger(for:entityLookupTable:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = &v40[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = &v40[-v13];
  _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(a1, (uint64_t)&v40[-v13], type metadata accessor for __RKEntityTriggerSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(unsigned char *, void *, uint64_t))(v5 + 32))(v7, v14, v4);
      uint64_t v20 = __RKEntityLookupTable.entity(for:)((uint64_t)v7);
      type metadata accessor for __RKEntityTapTrigger();
      unint64_t v19 = swift_allocObject();
      *(void *)(v19 + 24) = 0;
      swift_beginAccess();
      *(void *)(v19 + 24) = v20;
      swift_release();
      *(_WORD *)(v19 + 16) = 0;
      *(unsigned char *)(v19 + 18) = 0;
      swift_beginAccess();
      *(unsigned char *)(v19 + 16) = 0;
      goto LABEL_6;
    case 2u:
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      uint64_t v22 = *(void *)((char *)v14 + *(int *)(v21 + 48));
      uint64_t v23 = *(void *)((char *)v14 + *(int *)(v21 + 64));
      (*(void (**)(unsigned char *, void *, uint64_t))(v5 + 32))(v7, v14, v4);
      uint64_t v24 = __RKEntityLookupTable.entity(for:)((uint64_t)v7);
      swift_retain();
      uint64_t v25 = specialized Sequence.compactMap<A>(_:)(v22, a2);
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for __RKEntityCollisionTrigger();
      unint64_t v19 = swift_allocObject();
      *(void *)(v19 + 24) = 0;
      swift_beginAccess();
      *(void *)(v19 + 24) = v24;
      swift_retain();
      swift_release();
      *(void *)(v19 + 32) = v25;
      *(void *)(v19 + 40) = v23;
      goto LABEL_5;
    case 3u:
      uint64_t v26 = *v14;
      uint64_t v27 = v14[1];
      unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      type metadata accessor for __RKCustomTrigger();
      uint64_t v29 = swift_allocObject();
      unint64_t v19 = v29;
      *(void *)(v29 + 24) = v26;
      *(void *)(v29 + 32) = v27;
      *(void *)(v29 + 40) = v28;
      goto LABEL_26;
    case 4u:
      uint64_t v30 = *v14;
      uint64_t v31 = v14[1];
      unint64_t v32 = v14[2];
      type metadata accessor for __RKCustomTrigger();
      unint64_t v19 = swift_allocObject();
      *(void *)(v19 + 24) = v30;
      *(void *)(v19 + 32) = v31;
      if (!v32) {
        unint64_t v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      *(void *)(v19 + 40) = v32;
      *(_WORD *)(v19 + 16) = 0;
      *(unsigned char *)(v19 + 18) = 0;
      return v19;
    case 5u:
      uint64_t v33 = *v14;
      unint64_t v41 = MEMORY[0x263F8EE78];
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        uint64_t v35 = v33 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        uint64_t v36 = *(void *)(v9 + 72);
        do
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(v35, (uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
          static __RKEntityTrigger.trigger(for:entityLookupTable:)(v12, a2);
          MEMORY[0x22A688E10]();
          if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined destroy of __RKEntityPlayTimelineActionArguments((uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
          v35 += v36;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        unint64_t v38 = v41;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v38 = MEMORY[0x263F8EE78];
      }
      type metadata accessor for __RKEntityTriggerGroup();
      unint64_t v39 = swift_allocObject();
      unint64_t v19 = specialized __RKEntityTriggerGroup.init(triggers:)(v38, v39);
      swift_release();
      return v19;
    case 6u:
      type metadata accessor for __RKEntityDragTrigger();
      goto LABEL_25;
    case 7u:
      type metadata accessor for __RKLightTrigger();
      goto LABEL_25;
    case 8u:
      type metadata accessor for __RKEntityLookAtTrigger();
      goto LABEL_25;
    case 9u:
      type metadata accessor for __RKEntityPlacementTrigger();
      goto LABEL_25;
    case 0xAu:
      type metadata accessor for __RKEntityRemovalTrigger();
      goto LABEL_25;
    case 0xBu:
      type metadata accessor for __RKSoundTrigger();
      goto LABEL_25;
    case 0xCu:
      type metadata accessor for __RKStartTrigger();
      unint64_t v19 = swift_allocObject();
      *(_DWORD *)(v19 + 16) = 0;
      return v19;
    case 0xDu:
      type metadata accessor for __RKTimerTrigger();
LABEL_25:
      uint64_t v29 = swift_allocObject();
      unint64_t v19 = v29;
LABEL_26:
      *(_WORD *)(v29 + 16) = 0;
      *(unsigned char *)(v29 + 18) = 0;
      break;
    default:
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      int v16 = *(_DWORD *)((char *)v14 + *(int *)(v15 + 48));
      char v17 = *((unsigned char *)v14 + *(int *)(v15 + 64));
      (*(void (**)(unsigned char *, void *, uint64_t))(v5 + 32))(v7, v14, v4);
      uint64_t v18 = __RKEntityLookupTable.entity(for:)((uint64_t)v7);
      type metadata accessor for __RKEntityProximityTrigger();
      unint64_t v19 = swift_allocObject();
      *(void *)(v19 + 24) = 0;
      *(_WORD *)(v19 + 37) = 0;
      swift_beginAccess();
      *(void *)(v19 + 24) = v18;
      swift_retain();
      swift_release();
      *(_DWORD *)(v19 + 32) = v16;
      *(unsigned char *)(v19 + 36) = v17;
LABEL_5:
      swift_release();
      *(_WORD *)(v19 + 16) = 0;
      *(unsigned char *)(v19 + 18) = 0;
LABEL_6:
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      break;
  }
  return v19;
}

Swift::Bool __swiftcall Entity.applyTapForBehaviors()()
{
  uint64_t v1 = v0;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 8285;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_release();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_8;
  }
  uint64_t v7 = SceneNullable;
  id v8 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v8)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v7);
  }
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass())
  {
    swift_release();
    swift_unknownObjectRelease();
LABEL_8:
    uint64_t v13 = 91;
    unint64_t v14 = 0xE100000000000000;
    os_log_type_t v11 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v11, &v13);
    swift_bridgeObjectRelease();
    char v10 = 0;
    return v10 & 1;
  }
  uint64_t v13 = 91;
  unint64_t v14 = 0xE100000000000000;
  os_log_type_t v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, &v13);
  swift_bridgeObjectRelease();
  char v10 = __RKEntityInteractionManager.performTapInteraction(for:)(v1);
  swift_release();
  swift_unknownObjectRelease();
  return v10 & 1;
}

uint64_t implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  _StringGuts.grow(_:)(17);
  v0._uint64_t countAndFlagsBits = 0x65746E6920646E45;
  v0._object = (void *)0xEF206E6F69746372;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v26 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v9 = *(void *)(a1 + 16);
  _OWORD v19[2] = a1;
  if (v9)
  {
    os_log_type_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v10 = v4 + 16;
    uint64_t v25 = v11;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v22 = *(void *)(v10 + 56);
    uint64_t v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v20 = (uint64_t (**)(uint64_t, uint64_t))(v10 - 8);
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    uint64_t v24 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 40);
    v19[1] = (v10 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v25(v8, v12, v3);
      uint64_t v13 = *v24;
      (*v24)(v8, 0, 1, v3);
      if ((*v23)(v8, 1, v3) == 1) {
        break;
      }
      uint64_t v14 = (uint64_t)v26;
      (*v21)(v26, v8, v3);
      uint64_t v15 = __RKEntityLookupTable.entity(for:)(v14);
      uint64_t v16 = (*v20)(v14, v3);
      if (v15)
      {
        MEMORY[0x22A688E10](v16);
        if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v12 += v22;
      if (!--v9)
      {
        v13(v8, 1, 1, v3);
        break;
      }
    }
  }
  else
  {
    char v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
    v17(v8, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t specialized __RKEntityInteractionManager.actions(for:)(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v3 = 0;
    unint64_t v16 = v1;
    unint64_t v17 = v1 & 0xC000000000000001;
    uint64_t v14 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v15 = v2;
    while (1)
    {
      if (v17)
      {
        MEMORY[0x22A689930](v3, v1);
        BOOL v4 = __OFADD__(v3++, 1);
        if (v4) {
          break;
        }
        goto LABEL_11;
      }
      if (v3 >= *(void *)(v14 + 16)) {
        goto LABEL_34;
      }
      swift_retain();
      BOOL v4 = __OFADD__(v3++, 1);
      if (v4) {
        break;
      }
LABEL_11:
      swift_beginAccess();
      type metadata accessor for __RKEntityActionGroup();
      uint64_t v5 = swift_dynamicCastClass();
      uint64_t v6 = swift_retain();
      if (v5)
      {
        uint64_t v7 = swift_retain();
        MEMORY[0x22A688E10](v7);
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        unint64_t v8 = __RKEntityActionGroup.allActions()();
        unint64_t v9 = v8;
        if (v8 >> 62)
        {
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10) {
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v10) {
            goto LABEL_4;
          }
        }
        if (v10 < 1) {
          goto LABEL_33;
        }
        uint64_t v11 = 0;
        do
        {
          if ((v9 & 0xC000000000000001) != 0) {
            MEMORY[0x22A689930](v11, v9);
          }
          else {
            swift_retain();
          }
          uint64_t v12 = swift_retain();
          MEMORY[0x22A688E10](v12);
          if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v11;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
        while (v10 != v11);
LABEL_4:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v2 = v15;
        unint64_t v1 = v16;
        if (v3 == v15) {
          goto LABEL_31;
        }
      }
      else
      {
        MEMORY[0x22A688E10](v6);
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
        if (v3 == v2)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          return v18;
        }
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_2282158B8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2282158F0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  return closure #2 in __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset()
{
  return implicit closure #1 in __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(void *)(v0 + 16), 30, 0x20646E756F46, (void *)0xE600000000000000);
}

uint64_t partial apply for implicit closure #4 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(void *)(v0 + 16), 30, 0x207472617453, (void *)0xE600000000000000);
}

uint64_t partial apply for implicit closure #6 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return implicit closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(void *)(v0 + 16), 28, 543452741, (void *)0xE400000000000000);
}

uint64_t partial apply for implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return implicit closure #7 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(unsigned char **)(v0 + 16));
}

uint64_t sub_2282159D8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return closure #3 in __RKEntityInteractionManager.__performInteractions(matching:on:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  return implicit closure #2 in __RKEntityInteractionManager.performTapInteraction(for:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)()
{
  return implicit closure #1 in __RKEntityInteractionManager.performTapInteraction(for:)();
}

uint64_t outlined init with take of __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for __RKEntityInteractionManager()
{
  return self;
}

uint64_t sub_228215B90@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 24);
  return result;
}

uint64_t sub_228215BD8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_228215C1C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 25);
  return result;
}

uint64_t sub_228215C64(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 25) = v2;
  return result;
}

uint64_t sub_228215CA8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 26);
  return result;
}

uint64_t sub_228215CF0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 26);
  *(unsigned char *)(v3 + 26) = v2;
  return __RKEntityInteractionManager.automaticallyInvokesStartTrigger.didset(v4);
}

uint64_t sub_228215D3C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(*(void *)result + 27);
  return result;
}

unsigned char *sub_228215D4C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 27) = *result;
  return result;
}

uint64_t sub_228215D5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_228215DAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_228215DFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 56);
  return swift_retain();
}

uint64_t sub_228215E4C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 64);
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.areInteractionsEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.customTriggerIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.customActionIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.setCustomActionHandler(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.__setCustomPackageActionHandler(withIdentifier:actionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of __RKEntityInteractionService.automaticallyInvokesStartTrigger.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t method lookup function for __RKEntityInteractionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityInteractionManager);
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.interactionsDisabledForTests.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.customTriggerIdentifiers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.customActionIdentifiers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.entitiesTargetedByATapTrigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.performInteractions(matchingCustomTriggerWithIdentifier:customArguments:overrides:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.setCustomActionHandler(for:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matchingCustomTriggerWithIdentifier:with:on:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__setCustomPackageActionHandler(withIdentifier:actionHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.automaticallyInvokesStartTrigger.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__entityLookupTable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__simulationSceneCoordinator.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__runtimeSceneCoordinator.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__interactions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__hasInteractionsForTrigger<A>(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__actions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__addInteraction(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__removeInteraction(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__removeAllInteractions()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__cloneInteractions(fromEntity:toEntity:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.performTapInteraction(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.action(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t partial apply for implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #1 in __RKEntityInteractionManager.interactions(matching:entities:)(v0);
}

uint64_t partial apply for implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #2 in __RKEntityInteractionManager.interactions(matching:entities:)();
}

uint64_t partial apply for implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #1 in $defer #1 () in __RKEntityInteractionManager.interactions(matching:entities:)();
}

uint64_t partial apply for implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)()
{
  return implicit closure #9 in __RKEntityInteractionManager.interactions(matching:entities:)(*(void **)(v0 + 16));
}

uint64_t static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a7;
  uint64_t v11 = *(void *)(a6 + 8);
  uint64_t v12 = type metadata accessor for BindableValue();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t v24 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v23 - v18;
  v30[0] = a1;
  swift_retain();
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v20 = a3;
  uint64_t v21 = v28;
  uint64_t v27 = a5;
  Entity.ParameterSet.subscript.getter(a2, v20, v28, a5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v12) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v12);
    swift_release();
    BindableValue.value.getter(v12, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v12);
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v24);
  swift_release();
  if (v21 == MEMORY[0x263F8D6C8])
  {
    uint64_t v31 = MEMORY[0x263F8D6C8];
    unint64_t v32 = &protocol witness table for Int;
    v30[0] = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x263F8D6C8]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddInt64Value();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    v30[0] = 0;
    return swift_dynamicCast();
  }
  if (v21 == MEMORY[0x263F8D5C8])
  {
    uint64_t v31 = MEMORY[0x263F8D5C8];
    unint64_t v32 = &protocol witness table for Float;
    LODWORD(v30[0]) = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x263F8D5C8]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloatValue();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v30[0]) = 0;
    return swift_dynamicCast();
  }
  if (v21 == MEMORY[0x263F8D4F8])
  {
    uint64_t v31 = MEMORY[0x263F8D4F8];
    unint64_t v32 = &protocol witness table for Bool;
    LOBYTE(v30[0]) = 0;
    __swift_project_boxed_opaque_existential_1(v30, MEMORY[0x263F8D4F8]);
    swift_retain();
    swift_bridgeObjectRetain();
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddBoolValue();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v30[0]) = 0;
    return swift_dynamicCast();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static StateMachineUtils.createEntityParameterIfDoesNotExist<A>(entity:name:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)(v9, v10, v11, v12, v13, v14, (uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a5);
}

uint64_t static StateMachineUtils.convert(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result >= 5u)
  {
    _StringGuts.grow(_:)(44);
    v2._object = (void *)0x800000022835DC30;
    v2._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v2);
    type metadata accessor for REStateTransitionInterruptionType(0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t static StateMachineUtils.convert<A>(_:)(uint64_t a1)
{
  if (a1 == MEMORY[0x263F8D6C8]) {
    return 1;
  }
  if (a1 == MEMORY[0x263F8D5C8]) {
    return 2;
  }
  if (a1 == MEMORY[0x263F8D4F8]) {
    return 3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static StateMachineUtils.logError(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  swift_bridgeObjectRetain_n();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v4;
    uint64_t v11 = a1;
    uint64_t v12 = (uint8_t *)v10;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v14 = v11;
    uint64_t v4 = v17;
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_227DD2000, v8, v9, "%s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v13, -1, -1);
    MEMORY[0x22A696500](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static __USDARReferenceProvidingPlugin.instance(for:)(void *a1)
{
  if (one-time initialization token for instances != -1) {
    swift_once();
  }
  return specialized AssetServiceScopedRegistry.instance(for:)(a1);
}

uint64_t static __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  return 979661685;
}

uint64_t __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  return 979661685;
}

uint64_t __USDARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceObject?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceImage?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 16) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::String __swiftcall __USDARReferenceProvidingPlugin.createSchemePrefix(with:)(Swift::String with)
{
  String.append(_:)(with);
  uint64_t v1 = 979661685;
  Swift::String v2 = (void *)0xE400000000000000;
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall __USDARReferenceProvidingPlugin.createSubAssetPath(with:)(Swift::String with)
{
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v3 = countAndFlagsBits;
  uint64_t v4 = object;
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t static __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v7._uint64_t countAndFlagsBits = 47;
  v7._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v7)
    || (uint64_t v8 = 47,
        uint64_t v9 = (void *)0xE100000000000000,
        v10._uint64_t countAndFlagsBits = 47,
        v10._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v10)))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  v10._uint64_t countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v10)
    || (uint64_t v11 = 47,
        Swift::String v12 = (void *)0xE100000000000000,
        v13._uint64_t countAndFlagsBits = 47,
        v13._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v13)))
  {
    uint64_t v11 = 0;
    Swift::String v12 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = a3;
  v15._object = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v16)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_10:
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

uint64_t __USDARReferenceProvidingPlugin.arReference<A>(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  v14._uint64_t countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v14)
    || (uint64_t v15 = 47,
        char v16 = (void *)0xE100000000000000,
        v17._uint64_t countAndFlagsBits = 47,
        v17._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v17)))
  {
    uint64_t v15 = 0;
    char v16 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a3;
  v19._object = a4;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(void *)(*(void *)(v7 + 16) + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  int v21 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(a6, v21 ^ 1u, 1, a5);
}

uint64_t __USDARReferenceProvidingPlugin.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __USDARReferenceProvidingPlugin.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __USDARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceObject?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __USDARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = specialized __USDARReferenceProvidingPlugin.arReference<A>(group:name:)(a1, a2, a3, a4);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARReferenceImage?);
  a5[3] = result;
  *a5 = v6;
  return result;
}

uint64_t type metadata accessor for __USDARReferenceProvidingPlugin()
{
  return self;
}

uint64_t method lookup function for __USDARReferenceProvidingPlugin(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __USDARReferenceProvidingPlugin);
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.schemePrefix.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.registerARReference(_:forFullSchemePath:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSchemePrefix(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createSubAssetPath(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.createFullSchemePath(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of __USDARReferenceProvidingPlugin.arReference<A>(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t __AnyARKitObject.as<A>(type:)()
{
  outlined init with copy of Any(v0, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t __AnyARKitObject.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v6(boxed_opaque_existential_1, a1, a2);
}

uint64_t initializeWithCopy for __AnyARKitObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for __AnyARKitObject(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

_OWORD *assignWithTake for __AnyARKitObject(_OWORD *a1, _OWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for __AnyARKitObject()
{
  return &type metadata for __AnyARKitObject;
}

void *specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (!v9)
  {
    Swift::String v14 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v15 = swift_allocObject();
    char v16 = (void *)v15;
    *(_OWORD *)(v15 + 16) = xmmword_22831E360;
    if (a3)
    {
      if (a3 == 1)
      {
        Swift::String v17 = "USD action loading";
      }
      else
      {
        Swift::String v14 = 0xD000000000000013;
        Swift::String v17 = "USD trigger loading";
      }
    }
    else
    {
      Swift::String v14 = 0xD000000000000014;
      Swift::String v17 = "USD behavior loading";
    }
    Swift::String v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
    Swift::String v19 = MEMORY[0x263F8D310];
    *(void *)(v15 + 56) = MEMORY[0x263F8D310];
    char v20 = lazy protocol witness table accessor for type String and conformance String();
    _OWORD v16[4] = v14;
    void v16[5] = v18;
    v16[12] = v19;
    v16[13] = v20;
    v16[8] = v20;
    v16[9] = a1;
    v16[10] = a2;
    swift_bridgeObjectRetain();
    int v21 = objc_msgSend(a4, sel_path);
    uint64_t v22 = objc_msgSend(v21, sel_stringValue);

    if (v22)
    {
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      uint64_t v26 = v16 + 14;
      v16[17] = v19;
      v16[18] = v20;
      if (v25)
      {
        *uint64_t v26 = v23;
LABEL_15:
        v16[15] = v25;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        Swift::String v13 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v13;
      }
    }
    else
    {
      uint64_t v26 = v16 + 14;
      v16[17] = v19;
      v16[18] = v20;
    }
    *uint64_t v26 = 7104878;
    uint64_t v25 = 0xE300000000000000;
    goto LABEL_15;
  }
  Swift::String v10 = v9;
  uint64_t v11 = objc_msgSend(v10, sel_stringValue);
  if (v11)
  {
    Swift::String v12 = v11;
    Swift::String v13 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    return 0;
  }
  return v13;
}

unint64_t lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError()
{
  unint64_t result = lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError;
  if (!lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError;
  if (!lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError);
  }
  return result;
}

uint64_t specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  void *v27;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    Swift::String v10 = v9;
    uint64_t v11 = objc_msgSend(v10, sel_objectPathArray);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    Swift::String v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v12;
  }
  Swift::String v14 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v15 = swift_allocObject();
  char v16 = (void *)v15;
  *(_OWORD *)(v15 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      Swift::String v17 = "USD action loading";
    }
    else
    {
      Swift::String v14 = 0xD000000000000013;
      Swift::String v17 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v14 = 0xD000000000000014;
    Swift::String v17 = "USD behavior loading";
  }
  Swift::String v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
  Swift::String v19 = MEMORY[0x263F8D310];
  *(void *)(v15 + 56) = MEMORY[0x263F8D310];
  char v20 = lazy protocol witness table accessor for type String and conformance String();
  _OWORD v16[4] = v14;
  void v16[5] = v18;
  v16[12] = v19;
  v16[13] = v20;
  v16[8] = v20;
  v16[9] = a1;
  v16[10] = a2;
  swift_bridgeObjectRetain();
  int v21 = objc_msgSend(a4, sel_path);
  uint64_t v22 = objc_msgSend(v21, sel_stringValue);

  if (!v22)
  {
    uint64_t v26 = v16 + 14;
    v16[17] = v19;
    v16[18] = v20;
    goto LABEL_12;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v26 = v16 + 14;
  v16[17] = v19;
  v16[18] = v20;
  if (!v25)
  {
LABEL_12:
    *uint64_t v26 = 7104878;
    uint64_t v25 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v26 = v23;
LABEL_13:
  v16[15] = v25;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v27 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  return swift_willThrow();
}

{
  void *v8;
  id v9;
  id v10;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    Swift::String v10 = objc_msgSend(v9, sel_intValue);

    return (uint64_t)v10;
  }
  Swift::String v12 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  Swift::String v13 = swift_allocObject();
  Swift::String v14 = (void *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v15 = "USD action loading";
    }
    else
    {
      Swift::String v12 = 0xD000000000000013;
      uint64_t v15 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v12 = 0xD000000000000014;
    uint64_t v15 = "USD behavior loading";
  }
  char v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  Swift::String v17 = MEMORY[0x263F8D310];
  *(void *)(v13 + 56) = MEMORY[0x263F8D310];
  Swift::String v18 = lazy protocol witness table accessor for type String and conformance String();
  v14[4] = v12;
  v14[5] = v16;
  v14[12] = v17;
  v14[13] = v18;
  v14[8] = v18;
  v14[9] = a1;
  v14[10] = a2;
  swift_bridgeObjectRetain();
  Swift::String v19 = objc_msgSend(a4, sel_path);
  char v20 = objc_msgSend(v19, sel_stringValue);

  if (!v20)
  {
    uint64_t v24 = v14 + 14;
    v14[17] = v17;
    v14[18] = v18;
    goto LABEL_12;
  }
  int v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v24 = v14 + 14;
  v14[17] = v17;
  v14[18] = v18;
  if (!v23)
  {
LABEL_12:
    *uint64_t v24 = 7104878;
    uint64_t v23 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v24 = v21;
LABEL_13:
  v14[15] = v23;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  return swift_willThrow();
}

{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4) & 1;
}

{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (!v9)
  {
    uint64_t v11 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    Swift::String v12 = swift_allocObject();
    Swift::String v13 = (void *)v12;
    *(_OWORD *)(v12 + 16) = xmmword_22831E360;
    if (a3)
    {
      if (a3 == 1)
      {
        Swift::String v14 = "USD action loading";
      }
      else
      {
        uint64_t v11 = 0xD000000000000013;
        Swift::String v14 = "USD trigger loading";
      }
    }
    else
    {
      uint64_t v11 = 0xD000000000000014;
      Swift::String v14 = "USD behavior loading";
    }
    uint64_t v15 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    char v16 = MEMORY[0x263F8D310];
    *(void *)(v12 + 56) = MEMORY[0x263F8D310];
    Swift::String v17 = lazy protocol witness table accessor for type String and conformance String();
    void v13[4] = v11;
    v13[5] = v15;
    v13[12] = v16;
    v13[13] = v17;
    v13[8] = v17;
    v13[9] = a1;
    v13[10] = a2;
    swift_bridgeObjectRetain();
    Swift::String v18 = objc_msgSend(a4, sel_path);
    Swift::String v19 = objc_msgSend(v18, sel_stringValue);

    if (v19)
    {
      char v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      uint64_t v23 = v13 + 14;
      v13[17] = v16;
      v13[18] = v17;
      if (v22)
      {
        uint64_t *v23 = v20;
LABEL_13:
        v13[15] = v22;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        Swift::String v10 = static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v10 & 1;
      }
    }
    else
    {
      uint64_t v23 = v13 + 14;
      v13[17] = v16;
      v13[18] = v17;
    }
    uint64_t *v23 = 7104878;
    uint64_t v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  LOBYTE(v10) = objc_msgSend(v9, sel_BOOLValue);

  return v10 & 1;
}

void specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_doubleValue);

    return;
  }
  Swift::String v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  Swift::String v12 = (void *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      Swift::String v13 = "USD action loading";
    }
    else
    {
      Swift::String v10 = 0xD000000000000013;
      Swift::String v13 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v10 = 0xD000000000000014;
    Swift::String v13 = "USD behavior loading";
  }
  Swift::String v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  uint64_t v15 = MEMORY[0x263F8D310];
  *(void *)(v11 + 56) = MEMORY[0x263F8D310];
  char v16 = lazy protocol witness table accessor for type String and conformance String();
  id v12[4] = v10;
  uint64_t v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  Swift::String v17 = objc_msgSend(a4, sel_path);
  Swift::String v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    uint64_t v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  Swift::String v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v21 = v20;

  uint64_t v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *uint64_t v22 = 7104878;
    int v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_floatValue);

    return;
  }
  Swift::String v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  Swift::String v12 = (void *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      Swift::String v13 = "USD action loading";
    }
    else
    {
      Swift::String v10 = 0xD000000000000013;
      Swift::String v13 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v10 = 0xD000000000000014;
    Swift::String v13 = "USD behavior loading";
  }
  Swift::String v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  uint64_t v15 = MEMORY[0x263F8D310];
  *(void *)(v11 + 56) = MEMORY[0x263F8D310];
  char v16 = lazy protocol witness table accessor for type String and conformance String();
  id v12[4] = v10;
  uint64_t v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  Swift::String v17 = objc_msgSend(a4, sel_path);
  Swift::String v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    uint64_t v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  Swift::String v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v21 = v20;

  uint64_t v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *uint64_t v22 = 7104878;
    int v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_double3Value);

    return;
  }
  Swift::String v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  Swift::String v12 = (void *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      Swift::String v13 = "USD action loading";
    }
    else
    {
      Swift::String v10 = 0xD000000000000013;
      Swift::String v13 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v10 = 0xD000000000000014;
    Swift::String v13 = "USD behavior loading";
  }
  Swift::String v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  uint64_t v15 = MEMORY[0x263F8D310];
  *(void *)(v11 + 56) = MEMORY[0x263F8D310];
  char v16 = lazy protocol witness table accessor for type String and conformance String();
  id v12[4] = v10;
  uint64_t v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  Swift::String v17 = objc_msgSend(a4, sel_path);
  Swift::String v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    uint64_t v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  Swift::String v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v21 = v20;

  uint64_t v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *uint64_t v22 = 7104878;
    int v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4);
}

{
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  void *v23;

  uint64_t v8 = (void *)MEMORY[0x22A688A50]();
  uint64_t v9 = objc_msgSend(a4, sel_property_, v8);

  if (v9)
  {
    objc_msgSend(v9, sel_float3Value);

    return;
  }
  Swift::String v10 = 0xD000000000000012;
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  Swift::String v12 = (void *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  if (a3)
  {
    if (a3 == 1)
    {
      Swift::String v13 = "USD action loading";
    }
    else
    {
      Swift::String v10 = 0xD000000000000013;
      Swift::String v13 = "USD trigger loading";
    }
  }
  else
  {
    Swift::String v10 = 0xD000000000000014;
    Swift::String v13 = "USD behavior loading";
  }
  Swift::String v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  uint64_t v15 = MEMORY[0x263F8D310];
  *(void *)(v11 + 56) = MEMORY[0x263F8D310];
  char v16 = lazy protocol witness table accessor for type String and conformance String();
  id v12[4] = v10;
  uint64_t v12[5] = v14;
  v12[12] = v15;
  v12[13] = v16;
  v12[8] = v16;
  v12[9] = a1;
  v12[10] = a2;
  swift_bridgeObjectRetain();
  Swift::String v17 = objc_msgSend(a4, sel_path);
  Swift::String v18 = objc_msgSend(v17, sel_stringValue);

  if (!v18)
  {
    uint64_t v22 = v12 + 14;
    v12[17] = v15;
    v12[18] = v16;
    goto LABEL_12;
  }
  Swift::String v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v21 = v20;

  uint64_t v22 = v12 + 14;
  v12[17] = v15;
  v12[18] = v16;
  if (!v21)
  {
LABEL_12:
    *uint64_t v22 = 7104878;
    int v21 = 0xE300000000000000;
    goto LABEL_13;
  }
  *uint64_t v22 = v19;
LABEL_13:
  v12[15] = v21;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v23 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
  swift_allocError();
  swift_willThrow();
}

id specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4, (SEL *)&selRef_objectPath);
}

{
  return specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, a4, (SEL *)&selRef_resourcePath);
}

id specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(uint64_t a1, uint64_t a2, char a3, void *a4, SEL *a5)
{
  Swift::String v10 = (void *)MEMORY[0x22A688A50]();
  id v11 = objc_msgSend(a4, sel_property_, v10);

  if (!v11)
  {
    unint64_t v13 = 0xD000000000000012;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = (void *)v14;
    *(_OWORD *)(v14 + 16) = xmmword_22831E360;
    if (a3)
    {
      if (a3 == 1)
      {
        char v16 = "USD action loading";
      }
      else
      {
        unint64_t v13 = 0xD000000000000013;
        char v16 = "USD trigger loading";
      }
    }
    else
    {
      unint64_t v13 = 0xD000000000000014;
      char v16 = "USD behavior loading";
    }
    unint64_t v17 = (unint64_t)(v16 - 32) | 0x8000000000000000;
    uint64_t v18 = MEMORY[0x263F8D310];
    *(void *)(v14 + 56) = MEMORY[0x263F8D310];
    unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
    void v15[4] = v13;
    v15[5] = v17;
    v15[12] = v18;
    v15[13] = v19;
    v15[8] = v19;
    v15[9] = a1;
    v15[10] = a2;
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(a4, sel_path);
    id v21 = objc_msgSend(v20, sel_stringValue);

    if (v21)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      uint64_t v25 = v15 + 14;
      v15[17] = v18;
      v15[18] = v19;
      if (v24)
      {
        *uint64_t v25 = v22;
LABEL_13:
        v15[15] = v24;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v12 = (id)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        lazy protocol witness table accessor for type USKNode.PropertyValueRequestError and conformance USKNode.PropertyValueRequestError();
        swift_allocError();
        swift_willThrow();
        return v12;
      }
    }
    else
    {
      uint64_t v25 = v15 + 14;
      v15[17] = v18;
      v15[18] = v19;
    }
    *uint64_t v25 = 7104878;
    unint64_t v24 = 0xE300000000000000;
    goto LABEL_13;
  }
  id v12 = [v11 *a5];

  return v12;
}

void USKNode.setTransform(scale:orientation:translation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = v3;
  uint64_t v26 = MEMORY[0x263F8EE78];
  outlined init with take of Transform?(a3, (uint64_t)v32, &demangling cache variable for type metadata for SIMD3<Double>?);
  if ((v33 & 1) == 0)
  {
    float64x2_t v19 = (float64x2_t)v32[1];
    float64x2_t v22 = (float64x2_t)v32[0];
    uint64_t v7 = (void *)MEMORY[0x22A688A50](0xD000000000000011, 0x800000022835DD50);
    id v8 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v7, *MEMORY[0x263F83F28], 0);

    if (v8)
    {
      float64x2_t v29 = v22;
      float64x2_t v30 = v19;
      objc_msgSend(v8, sel_setDouble3Value_, &v29);
      id v9 = objc_msgSend(v8, sel_name);
      MEMORY[0x22A688E10]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  outlined init with take of Transform?(a2, (uint64_t)&v29, &demangling cache variable for type metadata for simd_quatd?);
  if ((v31 & 1) == 0)
  {
    float64x2_t v20 = v29;
    float64x2_t v23 = v30;
    Swift::String v10 = (void *)MEMORY[0x22A688A50](0x3A704F6D726F6678, 0xEE00746E6569726FLL);
    id v11 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v10, *MEMORY[0x263F83F98], 0);

    if (v11)
    {
      objc_msgSend(v11, sel_setQuatfValue_, *(double *)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v23).i64);
      id v12 = objc_msgSend(v11, sel_name);
      MEMORY[0x22A688E10]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  outlined init with take of Transform?(a1, (uint64_t)v27, &demangling cache variable for type metadata for SIMD3<Double>?);
  if ((v28 & 1) == 0)
  {
    long long v21 = v27[1];
    long long v24 = v27[0];
    unint64_t v13 = (void *)MEMORY[0x22A688A50](0x3A704F6D726F6678, 0xED0000656C616373);
    id v14 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v13, *MEMORY[0x263F83F28], 0);

    if (v14)
    {
      v25[0] = v24;
      v25[1] = v21;
      objc_msgSend(v14, sel_setDouble3Value_, v25);
      id v15 = objc_msgSend(v14, sel_name);
      MEMORY[0x22A688E10]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  char v16 = (void *)MEMORY[0x22A688A50](0x4F704F6D726F6678, 0xEC00000072656472);
  id v17 = objc_msgSend(v4, sel_newPropertyWithName_type_role_, v16, *MEMORY[0x263F83FB8], 0);

  if (v17)
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKToken);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setTokenArray_, isa);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t USKNode.NewPropertyError.debugDescription.getter()
{
  outlined init with take of BindableDataInternal(v0, (uint64_t)&v20);
  uint64_t v1 = v21;
  if (!v21) {
    return 0x73692065756C6156;
  }
  uint64_t v2 = v20;
  uint64_t v3 = v22;
  long long v4 = v24;
  id v5 = v23;
  id v6 = v3;
  id v7 = v4;
  _StringGuts.grow(_:)(57);
  v8._object = (void *)0x800000022835DD70;
  v8._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = v2;
  v9._object = v1;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x7974206874697720;
  v10._object = (void *)0xEB00000000206570;
  String.append(_:)(v10);
  type metadata accessor for USKDataType(0);
  _print_unlocked<A, B>(_:_:)();
  v11._uint64_t countAndFlagsBits = 0x20646E6120;
  v11._object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  id v12 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKRoleType?);
  v13._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x65646F6E206E6F20;
  v14._object = (void *)0xE900000000000020;
  String.append(_:)(v14);
  id v15 = objc_msgSend(v7, sel_path);
  id v16 = objc_msgSend(v15, sel_stringValue);

  if (v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 0x20656C6F72;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance USKNode.NewPropertyError()
{
  outlined init with take of BindableDataInternal(v0, (uint64_t)v2);
  return USKNode.NewPropertyError.debugDescription.getter();
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setTokenValue_);
}

{
  void *v12;
  id v13;
  id v14;
  Class isa;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  id v12 = (void *)MEMORY[0x22A688A50]();
  Swift::String v13 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v12, a3, a4);

  if (v13)
  {
    if (a5)
    {
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      Swift::String v14 = v13;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, sel_setObjectPathArray_, isa);
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(void *)(v20 + 32) = 0;
      swift_willThrow();
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *id v16 = a1;
    v16[1] = a2;
    _OWORD v16[2] = a3;
    _OWORD v16[3] = a4;
    _OWORD v16[4] = a6;
    swift_bridgeObjectRetain();
    id v17 = a3;
    Swift::String v18 = a4;
    Swift::String v19 = a6;
    swift_willThrow();
  }
  return v13;
}

{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setObjectPath_);
}

unint64_t lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError()
{
  unint64_t result = lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError;
  if (!lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError);
  }
  return result;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, char a6, void *a7)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  Swift::String v13 = (void *)MEMORY[0x22A688A50]();
  Swift::String v14 = objc_msgSend(a7, sel_newPropertyWithName_type_role_, v13, a3, a4);

  if (v14)
  {
    if (a6)
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)Swift::String v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(void *)(v19 + 32) = 0;
      swift_willThrow();
    }
    else
    {
      objc_msgSend(v14, sel_setDoubleValue_, *(double *)&a5);
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *id v15 = a1;
    v15[1] = a2;
    void v15[2] = a3;
    uint64_t v15[3] = a4;
    void v15[4] = a7;
    swift_bridgeObjectRetain();
    id v16 = a3;
    id v17 = a4;
    Swift::String v18 = a7;
    swift_willThrow();
  }
  return v14;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, SEL *a7)
{
  Swift::String v13 = (void *)MEMORY[0x22A688A50]();
  id v14 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v13, a3, a4);

  if (v14)
  {
    if (a5)
    {
      objc_msgSend(v14, *a7, a5);
    }
    else
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)uint64_t v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(void *)(v19 + 32) = 0;
      swift_willThrow();
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *id v15 = a1;
    v15[1] = a2;
    void v15[2] = a3;
    uint64_t v15[3] = a4;
    void v15[4] = a6;
    swift_bridgeObjectRetain();
    id v16 = a3;
    id v17 = a4;
    id v18 = a6;
    swift_willThrow();
  }
  return v14;
}

id specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5, void *a6)
{
  return specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(a1, a2, a3, a4, a5, a6);
}

{
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;

  id v12 = (void *)MEMORY[0x22A688A50]();
  Swift::String v13 = objc_msgSend(a6, sel_newPropertyWithName_type_role_, v12, a3, a4);

  if (v13)
  {
    if (a5 == 2)
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)id v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(void *)(v14 + 32) = 0;
      swift_willThrow();
    }
    else
    {
      objc_msgSend(v13, sel_setBoolValue_, a5 & 1);
    }
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *id v15 = a1;
    v15[1] = a2;
    void v15[2] = a3;
    uint64_t v15[3] = a4;
    void v15[4] = a6;
    swift_bridgeObjectRetain();
    id v16 = a3;
    id v17 = a4;
    id v18 = a6;
    swift_willThrow();
  }
  return v13;
}

unint64_t USKScene.NewNodeError.debugDescription.getter(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6874617020746120;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  id v7 = objc_msgSend(v3, sel_stringValue);
  if (!v7) {
    id v7 = objc_msgSend(v3, sel_description);
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 34;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);

  return 0xD000000000000021;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance USKScene.NewNodeError()
{
  return USKScene.NewNodeError.debugDescription.getter(*v0, v0[1]);
}

void USKObjectPath.deletingLastPathComponent()()
{
  id v1 = objc_msgSend(v0, sel_stringValue);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    uint64_t v20 = 47;
    unint64_t v21 = 0xE100000000000000;
    MEMORY[0x270FA5388](v6);
    _OWORD v19[2] = &v20;
    uint64_t v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v19, v3, v5);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v20 = v7;
      unint64_t v21 = v7 + 32;
      uint64_t v22 = 0;
      uint64_t v23 = 2 * v8 - 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v9 = Sequence<>.joined(separator:)();
      Swift::String v11 = v10;
      swift_bridgeObjectRelease();
      uint64_t v20 = 47;
      unint64_t v21 = 0xE100000000000000;
      v12._uint64_t countAndFlagsBits = v9;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v13 = v20;
      unint64_t v14 = v21;
      id v15 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      id v16 = (void *)MEMORY[0x22A688A50](v13, v14);
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v15, sel_initWithString_, v16);

      if (v17) {
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }

  id v18 = (id)v19[4];
}

void USKObjectPath.appendingPathComponent(_:)(uint64_t a1, void *a2)
{
  id v5 = objc_msgSend(v2, sel_stringValue);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  v10._uint64_t countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  id v12 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  uint64_t v13 = (void *)MEMORY[0x22A688A50](v7, v9);
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithString_, v13);

  if (!v14) {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

void destroy for USKNode.NewPropertyError(uint64_t a1)
{
  if (*(void *)(a1 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();

    uint64_t v2 = *(void **)(a1 + 32);
  }
}

uint64_t initializeWithCopy for USKNode.NewPropertyError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    unint64_t v4 = *(void **)(a2 + 16);
    id v5 = *(void **)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(void **)(a2 + 32);
    *(void *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
    id v7 = v4;
    id v8 = v5;
    id v9 = v6;
  }
  return a1;
}

uint64_t assignWithCopy for USKNode.NewPropertyError(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      id v14 = (void *)a2[2];
      *(void *)(a1 + 16) = v14;
      id v15 = (void *)a2[3];
      *(void *)(a1 + 24) = v15;
      id v16 = (void *)a2[4];
      *(void *)(a1 + 32) = v16;
      swift_bridgeObjectRetain();
      id v17 = v14;
      id v18 = v15;
      id v19 = v16;
      return a1;
    }
LABEL_7:
    long long v20 = *(_OWORD *)a2;
    long long v21 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)a1 = v20;
    *(_OWORD *)(a1 + 16) = v21;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();

    goto LABEL_7;
  }
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v5 = (void *)a2[2];
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  id v7 = v5;

  id v8 = *(void **)(a1 + 24);
  id v9 = (void *)a2[3];
  *(void *)(a1 + 24) = v9;
  id v10 = v9;

  Swift::String v11 = (void *)a2[4];
  id v12 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
  id v13 = v11;

  return a1;
}

uint64_t assignWithTake for USKNode.NewPropertyError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();

LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();

  id v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for USKNode.NewPropertyError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for USKNode.NewPropertyError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

double destructiveInjectEnumTag for USKNode.NewPropertyError(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for USKNode.NewPropertyError()
{
  return &type metadata for USKNode.NewPropertyError;
}

ValueMetadata *type metadata accessor for USKScene.NewNodeError()
{
  return &type metadata for USKScene.NewNodeError;
}

unsigned char *storeEnumTagSinglePayload for USKNode.PropertyValueRequestError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *double result = a2;
        return result;
      case 2:
        *(_WORD *)double result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)double result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *double result = 0;
      break;
    case 2:
      *(_WORD *)double result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22821A9DCLL);
    case 4:
      *(_DWORD *)double result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for USKNode.PropertyValueRequestError()
{
  return &type metadata for USKNode.PropertyValueRequestError;
}

uint64_t AudioBufferResource.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 25);
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  char v6 = *(unsigned char *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  int v9 = *(_DWORD *)(v1 + 80);
  char v10 = *(unsigned char *)(v1 + 84);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(a1 + 1) = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 60) = v10;
  return swift_bridgeObjectRetain();
}

uint64_t AudioBufferResource.__allocating_init(buffer:configuration:)(void *a1, char *a2)
{
  return AudioBufferResource.init(buffer:configuration:)(a1, a2);
}

uint64_t AudioBufferResource.init(buffer:configuration:)(void *a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v64 = *MEMORY[0x263EF8340];
  char v5 = *a2;
  char type = a2[1];
  uint64_t v52 = *((void *)a2 + 1);
  char v51 = a2[16];
  uint64_t v50 = (void *)*((void *)a2 + 3);
  char v49 = a2[32];
  uint64_t v6 = *((void *)a2 + 6);
  uint64_t v48 = *((void *)a2 + 5);
  char v46 = a2[60];
  int v47 = *((_DWORD *)a2 + 14);
  self;
  id v7 = (id)swift_dynamicCastObjCClass();
  swift_retain();
  if (v7)
  {
    id v8 = a1;
    goto LABEL_3;
  }
  id v12 = objc_msgSend(a1, sel_format);
  id v13 = objc_msgSend(v12, sel_channelLayout);

  id v14 = objc_msgSend(a1, sel_format);
  objc_msgSend(v14, sel_sampleRate);
  double v16 = v15;

  if (!v13)
  {
    id v32 = objc_msgSend(a1, sel_format);
    id v33 = objc_msgSend(v32, sel_channelCount);

    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9388]), sel_initStandardFormatWithSampleRate_channels_, v33, v16);
    if (v17) {
      goto LABEL_7;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *uint64_t v34 = 2;
    swift_willThrow();
    swift_release();

    goto LABEL_13;
  }
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9388]), sel_initStandardFormatWithSampleRate_channelLayout_, v13, v16);

  if (!v17) {
    goto LABEL_16;
  }
LABEL_7:
  char v44 = v5;
  id v18 = v17;
  id v19 = objc_msgSend(a1, sel_format);
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9340]), sel_initFromFormat_toFormat_, v19, v18);

  if (!v20)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *unint64_t v41 = 2;
    swift_willThrow();
    swift_release();

    goto LABEL_13;
  }
  id v45 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  id v22 = a1;
  id v23 = v18;
  uint64_t v24 = *((unsigned int *)objc_msgSend(v22, sel_audioBufferList) + 3);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93B0]), sel_initWithPCMFormat_frameCapacity_, v23, v24);

  if (!v7)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *uint64_t v42 = 0;
    swift_willThrow();
    swift_release();

    swift_release();
    goto LABEL_13;
  }
  uint64_t v43 = v22;
  uint64_t v59 = partial apply for closure #1 in AudioBufferResource.init(buffer:configuration:);
  uint64_t v60 = v21;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v56 = 1107296256;
  int v57 = thunk for @escaping @callee_guaranteed (@unowned UInt32, @unowned UnsafeMutablePointer<AVAudioConverterInputStatus>) -> (@owned AVAudioBuffer?);
  uint64_t v58 = &block_descriptor_40;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v26 = objc_msgSend(v45, sel_convertToBuffer_error_withInputFromBlock_, v7, &aBlock, v25);
  _Block_release(v25);
  id v27 = aBlock;
  if (v26 == (id)3)
  {
    if (v27)
    {
      id v28 = v27;
      swift_bridgeObjectRelease();
      id v29 = v28;
      swift_willThrow();
      swift_release();

      swift_release();
      goto LABEL_13;
    }

    swift_release();
  }
  else
  {

    swift_release();
  }
  char v5 = v44;
LABEL_3:
  id v9 = v7;
  Class isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v11)
  {
    swift_release();

    swift_bridgeObjectRelease();
LABEL_13:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return v3;
  }
  Class v30 = isa;
  *(unsigned char *)(v3 + 24) = v5;
  *(unsigned char *)(v3 + 25) = type;
  *(void *)(v3 + 32) = v52;
  *(unsigned char *)(v3 + 40) = v51;
  *(void *)(v3 + 48) = v50;
  *(unsigned char *)(v3 + 56) = v49;
  *(void *)(v3 + 64) = v48;
  *(void *)(v3 + 72) = v6;
  *(_DWORD *)(v3 + 80) = v47;
  *(unsigned char *)(v3 + 84) = v46;
  LOBYTE(aBlock) = v5;
  BYTE1(aBlock) = type;
  uint64_t v56 = v52;
  LOBYTE(v57) = v51;
  uint64_t v58 = v50;
  LOBYTE(v59) = v49;
  uint64_t v60 = v48;
  uint64_t v61 = v6;
  int v62 = v47;
  char v63 = v46;
  unsigned __int8 v54 = 3;
  swift_bridgeObjectRetain();
  uint64_t v35 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)((uint64_t)v30, (char *)&aBlock, &v54);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = AudioResource.init(fromCore:)(v35);
  uint64_t v36 = one-time initialization token for audio;
  swift_retain();
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.audio);
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 134218240;
    id aBlock = (id)REAudioFileAssetGetAudioAssetID();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 12) = 2048;
    id aBlock = (id)REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_227DD2000, v38, v39, "[API/RealityKit] Loading AudioBufferResource with audioAssetID: %llu and REAssetID: %llu", (uint8_t *)v40, 0x16u);
    MEMORY[0x22A696500](v40, -1, -1);
  }

  RERelease();
  swift_release();

  return v3;
}

uint64_t type metadata accessor for AudioBufferResource()
{
  return self;
}

uint64_t sub_22821B290()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *partial apply for closure #1 in AudioBufferResource.init(buffer:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  *a2 = 0;
  id v4 = v3;
  return v3;
}

id thunk for @escaping @callee_guaranteed (@unowned UInt32, @unowned UnsafeMutablePointer<AVAudioConverterInputStatus>) -> (@owned AVAudioBuffer?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = (void *)v5(a2, a3);
  swift_release();

  return v6;
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

AVAudioPCMBuffer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioPCMBuffer.copyToDeinterleavedBuffer()()
{
  uint64_t v2 = v0;
  v21[1] = *(id *)MEMORY[0x263EF8340];
  id v3 = objc_msgSend(v0, sel_format);
  unsigned __int8 v4 = objc_msgSend(v3, sel_isInterleaved);

  if ((v4 & 1) != 0
    || (id v5 = objc_msgSend(v2, sel_format),
        id v6 = objc_msgSend(v5, sel_commonFormat),
        v5,
        v6 != (id)1))
  {
    id v9 = objc_msgSend(v2, sel_format);
    AVAudioFormat.copyInterleavedFormatToDeinterleaved()(v10);
    id v12 = v11;

    if (!v13)
    {
      id v14 = objc_msgSend(v2, sel_format);
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9340]), sel_initFromFormat_toFormat_, v14, v12);

      if (v15)
      {
        id v16 = v12;
        id v17 = objc_msgSend(v2, sel_frameCapacity);
        id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF93B0]), sel_initWithPCMFormat_frameCapacity_, v16, v17);

        if (v1)
        {
          v21[0] = 0;
          if (objc_msgSend(v15, sel_convertToBuffer_fromBuffer_error_, v1, v2, v21))
          {
            id v18 = v21[0];
          }
          else
          {
            id v19 = v21[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }
          goto LABEL_12;
        }
      }
      lazy protocol witness table accessor for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors();
      swift_allocError();
      swift_willThrow();
    }
LABEL_12:
    id v7 = (objc_class *)v1;
    goto LABEL_13;
  }
  id v7 = v2;
LABEL_13:
  result.super._impl = v8;
  result.super.super.Class isa = v7;
  return result;
}

void *AudioBufferResource.__allocating_init(buffer:options:)(void *a1, uint64_t a2)
{
  return AudioBufferResource.init(buffer:options:)(a1, a2);
}

void *AudioBufferResource.init(buffer:options:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unsigned __int8 v5 = *(unsigned char *)a2;
  char v6 = *(unsigned char *)(a2 + 1);
  char v7 = *(unsigned char *)(a2 + 2);
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v21 = *(void *)(a2 + 24);
  int v36 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v24 = *(void *)(a2 + 40);
  char v23 = *(unsigned char *)(a2 + 48);
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *id v15 = 0;
    swift_willThrow();

    goto LABEL_6;
  }
  uint64_t v11 = (void *)v10;
  uint64_t v22 = v8;
  swift_retain();
  id v12 = a1;
  a1 = v11;
  Class isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v14)
  {

    swift_release();
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return a1;
  }
  uint64_t v16 = (uint64_t)isa;
  *(unsigned char *)(v3 + 24) = v6;
  *(unsigned char *)(v3 + 25) = v7;
  *(void *)(v3 + 32) = v21;
  char v17 = v36;
  *(unsigned char *)(v3 + 40) = v36;
  *(void *)(v3 + 48) = v24;
  *(unsigned char *)(v3 + 56) = v23;
  *(void *)(v3 + 64) = v9;
  *(void *)(v3 + 72) = v22;
  *(_DWORD *)(v3 + 80) = 0;
  *(unsigned char *)(v3 + 84) = 1;
  char v25 = v6;
  char v26 = v7;
  uint64_t v28 = v21;
  LOBYTE(v29) = v17;
  uint64_t v30 = v24;
  char v31 = v23;
  uint64_t v32 = v9;
  uint64_t v33 = v22;
  int v34 = 0;
  char v35 = 1;
  unsigned __int8 v37 = v5;
  swift_bridgeObjectRetain_n();
  uint64_t v19 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)(v16, &v25, &v37);
  id v20 = (void *)v16;
  swift_bridgeObjectRelease();
  swift_release();
  a1 = (void *)AudioResource.init(fromCore:)(v19);
  char v25 = v5;
  char v26 = v6;
  char v27 = v7;
  uint64_t v28 = v9;
  uint64_t v29 = v22;
  uint64_t v30 = v21;
  char v31 = v36;
  uint64_t v32 = v24;
  LOBYTE(v33) = v23;
  swift_retain();
  AudioBufferResource.load(assetRef:buffer:options:)(v19, v12, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  RERelease();
  swift_release();

  return a1;
}

void AudioBufferResource.load(assetRef:buffer:options:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if ((REAssetHandleIsLoaded() & 1) == 0) {
    REAssetHandleLoadNow();
  }
  REAudioFileAssetSetInputMode();
  REAudioFileAssetSetLoopCount();
  if (v5)
  {
    String.utf8CString.getter();
    REAudioFileAssetSetMixGroupName();
    swift_release();
  }
  id v6 = objc_msgSend(a2, sel_format);
  specialized static AudioResource.supportedChannelLayoutTag(for:)(v6);

  if (!v3) {
    REAudioFileAssetSetLayoutTag();
  }
}

void *AudioBufferResource.__allocating_init(buffer:inputMode:shouldLoop:)(void *a1, unsigned __int8 *a2, char a3)
{
  return AudioBufferResource.init(buffer:inputMode:shouldLoop:)(a1, a2, a3);
}

void *AudioBufferResource.init(buffer:inputMode:shouldLoop:)(void *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4 = v3;
  unsigned __int8 v7 = *a2;
  self;
  uint64_t v8 = swift_dynamicCastObjCClass();
  if (!v8)
  {
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *uint64_t v13 = 0;
    swift_willThrow();

    goto LABEL_6;
  }
  uint64_t v9 = (void *)v8;
  swift_retain();
  id v10 = a1;
  a1 = v9;
  Class isa = AVAudioPCMBuffer.copyToDeinterleavedBuffer()().super.super.isa;
  if (v12)
  {

    swift_release();
LABEL_6:
    type metadata accessor for AudioBufferResource();
    swift_deallocPartialClassInstance();
    return a1;
  }
  Class v14 = isa;
  *(unsigned char *)(v4 + 24) = a3 & 1;
  *(unsigned char *)(v4 + 25) = 0;
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = -1;
  *(void *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 56) = -1;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  *(unsigned char *)(v4 + 84) = 1;
  v20[0] = a3 & 1;
  v20[1] = 0;
  uint64_t v21 = 0;
  char v22 = -1;
  uint64_t v23 = 0;
  char v24 = -1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 1;
  unsigned __int8 v19 = v7;
  uint64_t v16 = specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)((uint64_t)isa, v20, &v19);
  swift_release();
  a1 = (void *)AudioResource.init(fromCore:)(v16);
  swift_retain();
  char IsLoaded = REAssetHandleIsLoaded();
  if ((IsLoaded & 1) == 0) {
    REAssetHandleLoadNow();
  }
  REAudioFileAssetSetInputMode();
  REAudioFileAssetSetLoopCount();
  id v18 = objc_msgSend(v10, sel_format);
  specialized static AudioResource.supportedChannelLayoutTag(for:)(v18);

  REAudioFileAssetSetLayoutTag();
  RERelease();
  swift_release();

  return a1;
}

void AudioBufferResource.__allocating_init(fromCore:)()
{
}

uint64_t AudioBufferResource.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t AudioBufferResource.deinit()
{
  uint64_t v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioBufferResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void AudioBufferResource.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

Swift::Int AudioBufferResource.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t AudioBufferResource.duration.getter()
{
  REAudioFileAssetGetLengthInSeconds();

  return static Duration.seconds(_:)();
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioFormat.copyInterleavedFormatToDeinterleaved()(AVAudioFormat *__return_ptr retstr)
{
  if (objc_msgSend(v1, sel_isInterleaved))
  {
    id v2 = objc_msgSend(v1, sel_channelLayout);
    objc_msgSend(v1, sel_sampleRate);
    double v4 = v3;
    if (v2)
    {
      objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9388]), sel_initStandardFormatWithSampleRate_channelLayout_, v2, v3);
    }
    else
    {
      id v6 = objc_msgSend(v1, sel_channelCount);
      if (!objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9388]), sel_initStandardFormatWithSampleRate_channels_, v6, v4))
      {
        lazy protocol witness table accessor for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors();
        swift_allocError();
        swift_willThrow();
      }
    }
  }
  else
  {
    id v5 = v1;
  }
}

uint64_t AudioBufferResource.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v29 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v26 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22831E350;
  strcpy((char *)(v7 + 32), "configuration");
  *(_WORD *)(v7 + 46) = -4864;
  char v8 = *(unsigned char *)(v1 + 24);
  char v9 = *(unsigned char *)(v1 + 25);
  uint64_t v10 = *(void *)(v1 + 32);
  char v11 = *(unsigned char *)(v1 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  char v13 = *(unsigned char *)(v2 + 56);
  uint64_t v14 = *(void *)(v2 + 64);
  uint64_t v15 = *(void *)(v2 + 72);
  int v16 = *(_DWORD *)(v2 + 80);
  int v23 = *(unsigned __int8 *)(v2 + 84);
  int v24 = v16;
  *(void *)(v7 + 72) = &type metadata for AudioBufferResource.Configuration;
  uint64_t v17 = swift_allocObject();
  *(void *)(v7 + 48) = v17;
  *(unsigned char *)(v17 + 16) = v8;
  *(unsigned char *)(v17 + 17) = v9;
  *(void *)(v17 + 24) = v10;
  *(unsigned char *)(v17 + 32) = v11;
  *(void *)(v17 + 40) = v12;
  *(unsigned char *)(v17 + 48) = v13;
  *(void *)(v17 + 56) = v14;
  *(void *)(v17 + 64) = v15;
  *(_DWORD *)(v17 + 72) = v24;
  *(unsigned char *)(v17 + 76) = v23;
  *(void *)(v7 + 80) = 0x6E6F697461727564;
  *(void *)(v7 + 88) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  REAudioFileAssetGetLengthInSeconds();
  uint64_t v18 = static Duration.seconds(_:)();
  *(void *)(v7 + 120) = MEMORY[0x263F8ED48];
  *(void *)(v7 + 96) = v18;
  *(void *)(v7 + 104) = v19;
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v25, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v26, *MEMORY[0x263F8E830], v28);
  type metadata accessor for AudioBufferResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioBufferResource@<X0>(uint64_t a1@<X8>)
{
  return AudioBufferResource.customMirror.getter(a1);
}

uint64_t specialized static AudioBufferResource.bufferAssetRef(buffer:configuration:inputMode:)(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  uint64_t v28 = a1;
  char v3 = *a2;
  char v4 = a2[1];
  uint64_t v5 = *((void *)a2 + 1);
  char v6 = a2[16];
  uint64_t v7 = *((void *)a2 + 3);
  char v18 = a2[32];
  uint64_t v8 = *((void *)a2 + 6);
  uint64_t v17 = *((void *)a2 + 5);
  char v15 = a2[60];
  int v16 = *((_DWORD *)a2 + 14);
  int v19 = *a3;
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v20);
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  __swift_project_boxed_opaque_existential_1(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  LOBYTE(v20[0]) = v3;
  BYTE1(v20[0]) = v4;
  v20[1] = v5;
  char v21 = v6;
  uint64_t v22 = v7;
  LOBYTE(v23) = v18;
  uint64_t v24 = v17;
  uint64_t v25 = v8;
  int v26 = v16;
  char v27 = v15;
  type metadata accessor for REAudioFileAssetConfigurationWrapper();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  REAudioFileAssetConfigurationWrapper.init(configuration:)((uint64_t)v20);
  if (v19 != 3) {
    REAudioFileAssetConfigurationSetInputMode();
  }
  uint64_t v12 = REAudioFileAssetCreateWithBufferAndConfiguration();
  if (!v12)
  {
    lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error();
    swift_allocError();
    *char v13 = 1;
    swift_willThrow();
  }
  swift_release();
  return v12;
}

uint64_t sub_22821C400()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 77, 7);
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource and conformance AudioResource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource;
  if (!lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource)
  {
    type metadata accessor for AudioBufferResource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource and conformance AudioResource);
  }
  return result;
}

uint64_t sub_22821C490@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetLoopCount();
  *a1 = result == -1;
  return result;
}

uint64_t sub_22821C4C8()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t method lookup function for AudioBufferResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioBufferResource);
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of AudioBufferResource.shouldLoop.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of AudioBufferResource.__allocating_init(buffer:inputMode:shouldLoop:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

unint64_t lazy protocol witness table accessor for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors;
  if (!lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors;
  if (!lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioPCMBuffer.AVAudioPCMBufferErrors and conformance AVAudioPCMBuffer.AVAudioPCMBufferErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.AudioFormatErrors and conformance AVAudioFormat.AudioFormatErrors);
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAudioFormat.AudioFormatErrors()
{
  return &type metadata for AVAudioFormat.AudioFormatErrors;
}

unsigned char *storeEnumTagSinglePayload for AVAudioFormat.AudioFormatErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22821C6ECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAudioPCMBuffer.AVAudioPCMBufferErrors()
{
  return &type metadata for AVAudioPCMBuffer.AVAudioPCMBufferErrors;
}

double AmbientAudioComponent.gain.getter()
{
  return *(double *)v0;
}

void AmbientAudioComponent.gain.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*AmbientAudioComponent.gain.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AmbientAudioComponent __swiftcall AmbientAudioComponent.init(gain:)(RealityFoundation::AmbientAudioComponent gain)
{
  v1->gain = gain.gain;
  return gain;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AmbientAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AmbientAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Entity.ambientAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

uint64_t key path getter for Entity.ambientAudio : Entity@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  uint64_t result = swift_release();
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for Entity.ambientAudio : Entity(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

uint64_t Entity.ambientAudio.setter(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

uint64_t (*Entity.ambientAudio.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    REAmbientAudioComponentGetDecibelGain();
    float v5 = v4;
    swift_release();
    double v6 = v5;
  }
  else
  {
    swift_release();
    double v6 = 0.0;
  }
  *(double *)a1 = v6;
  *(unsigned char *)(a1 + 8) = Component == 0;
  return Entity.ambientAudio.modify;
}

uint64_t Entity.ambientAudio.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

double static AmbientAudioComponent.__fromCore(_:)@<D0>(double *a1@<X8>)
{
  REAmbientAudioComponentGetDecibelGain();
  double result = v2;
  *a1 = result;
  return result;
}

uint64_t AmbientAudioComponent.__toCore(_:)()
{
  REAmbientAudioComponentSetDecibelGain();

  return RENetworkMarkComponentDirty();
}

void static AmbientAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3009;
}

double protocol witness for static Component.__fromCore(_:) in conformance AmbientAudioComponent@<D0>(double *a1@<X8>)
{
  REAmbientAudioComponentGetDecibelGain();
  double result = v2;
  *a1 = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AmbientAudioComponent()
{
  REAmbientAudioComponentSetDecibelGain();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AmbientAudioComponent(_DWORD *a1@<X8>)
{
  *a1 = 3009;
}

BOOL static AmbientAudioComponent.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void AmbientAudioComponent.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t AmbientAudioComponent.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AmbientAudioComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  float v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int AmbientAudioComponent.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AmbientAudioComponent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AmbientAudioComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AmbientAudioComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return AmbientAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AmbientAudioComponent(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AmbientAudioComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent.CodingKeys and conformance AmbientAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AmbientAudioComponent and conformance AmbientAudioComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent;
  if (!lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AmbientAudioComponent and conformance AmbientAudioComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientAudioComponent()
{
  return &type metadata for AmbientAudioComponent;
}

unsigned char *storeEnumTagSinglePayload for AmbientAudioComponent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22821D1B0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AmbientAudioComponent.CodingKeys()
{
  return &unk_26DCB6860;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(swift_bridgeObjectRetain() + 80);
    while (1)
    {
      uint64_t v9 = *(v7 - 6);
      uint64_t v8 = *(v7 - 5);
      uint64_t v17 = *((unsigned __int8 *)v7 - 32);
      uint64_t v10 = *(v7 - 3);
      uint64_t v11 = *(v7 - 2);
      uint64_t v12 = *(v7 - 1);
      uint64_t v13 = *v7;
      if (v10 == a2 && v11 == a3) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_12;
      }
      v7 += 7;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = a4;
        goto LABEL_10;
      }
    }
    uint64_t v10 = a2;
    uint64_t v11 = a3;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v9;
    a4[1] = v8;
    a4[2] = v17;
    a4[3] = v10;
    a4[4] = v11;
    a4[5] = v12;
    a4[6] = v13;
  }
  else
  {
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    v5[6] = 0;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
  }
  return result;
}

RealityFoundation::SkeletalPoseSet __swiftcall SkeletalPoseSet.init()()
{
  void *v0 = MEMORY[0x263F8EE78];
  return result;
}

double SkeletalPoseSet.default.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*(void *)(*v1 + 16))
  {
    char v3 = *(unsigned char *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = *(void *)(v2 + 64);
    uint64_t v6 = *(void *)(v2 + 72);
    uint64_t v7 = *(void *)(v2 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 32);
    *(unsigned char *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

double key path getter for SkeletalPoseSet.default : SkeletalPoseSet@<D0>(uint64_t a1@<X8>)
{
  SkeletalPoseSet.default.getter((uint64_t)v5);
  uint64_t v2 = v7;
  long long v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = v2;
  return result;
}

uint64_t key path setter for SkeletalPoseSet.default : SkeletalPoseSet(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *a2;
  if (*(void *)(*a2 + 16)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    long long v10 = *(_OWORD *)result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 48);
    uint64_t v9 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(result + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (*(void *)(v3 + 16))
      {
LABEL_7:
        *(_OWORD *)(v3 + 32) = v10;
        *(unsigned char *)(v3 + 48) = v9 & 1;
        *(void *)(v3 + 56) = v8;
        *(void *)(v3 + 64) = v2;
        *(void *)(v3 + 72) = v6;
        *(void *)(v3 + 80) = v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        *a2 = v3;
        return result;
      }
    }
    else
    {
      double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
      uint64_t v3 = result;
      if (*(void *)(result + 16)) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t SkeletalPoseSet.default.setter(uint64_t result)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v6 = *(void *)(result + 40);
  uint64_t v8 = *(void *)(result + 48);
  uint64_t v9 = *v1;
  if (*(void *)(*v1 + 16))
  {
    if (!v7) {
      return result;
    }
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (*(void *)(v9 + 16))
      {
LABEL_5:
        *(void *)(v9 + 32) = v3;
        *(void *)(v9 + 40) = v2;
        *(unsigned char *)(v9 + 48) = v5 & 1;
        *(void *)(v9 + 56) = v4;
        *(void *)(v9 + 64) = v7;
        *(void *)(v9 + 72) = v6;
        *(void *)(v9 + 80) = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        *Swift::UInt64 v1 = v9;
        return result;
      }
    }
    else
    {
      double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
      uint64_t v9 = result;
      if (*(void *)(result + 16)) {
        goto LABEL_5;
      }
    }
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)result;

  return outlined consume of SkeletalPose?(v10, v2, v5, v4, v7);
}

void (*SkeletalPoseSet.default.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  uint64_t v4 = v3;
  *a1 = v3;
  v3[7] = v1;
  uint64_t v5 = *v1;
  if (*(void *)(*v1 + 16))
  {
    char v6 = *(unsigned char *)(v5 + 48);
    uint64_t v7 = *(void *)(v5 + 56);
    uint64_t v8 = *(void *)(v5 + 64);
    uint64_t v9 = *(void *)(v5 + 72);
    uint64_t v10 = *(void *)(v5 + 80);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v5 + 32);
    *((unsigned char *)v4 + 16) = v6;
    v4[3] = v7;
    void v4[4] = v8;
    void v4[5] = v9;
    v4[6] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v3[6] = 0;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
  }
  return SkeletalPoseSet.default.modify;
}

void SkeletalPoseSet.default.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[7];
  if (a2)
  {
    char v6 = (void *)v2[3];
    uint64_t v7 = v2[4];
    uint64_t v8 = v2[5];
    uint64_t v9 = *(void **)v5;
    if (*(void *)(*(void *)v5 + 16)) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_9;
    }
    uint64_t v11 = v2[6];
    uint64_t v12 = v2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (v9[2])
      {
LABEL_8:
        char v18 = (void *)v2[7];
        void v9[4] = v4;
        void v9[5] = v3;
        *((unsigned char *)v9 + 48) = v12 & 1;
        v9[7] = v6;
        v9[8] = v7;
        v9[9] = v8;
        v9[10] = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *char v18 = v9;
        uint64_t v4 = *v2;
        uint64_t v3 = v2[1];
        char v6 = (void *)v2[3];
        uint64_t v7 = v2[4];
LABEL_9:
        uint64_t v13 = v2[2];
        uint64_t v14 = v4;
        uint64_t v15 = v3;
        uint64_t v16 = (uint64_t)v6;
        uint64_t v17 = v7;
LABEL_16:
        outlined consume of SkeletalPose?(v14, v15, v13, v16, v17);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      if (v9[2]) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v2[2];
  uint64_t v11 = v2[3];
  uint64_t v9 = (void *)v2[4];
  uint64_t v8 = v2[5];
  uint64_t v7 = v2[6];
  char v6 = *(void **)v5;
  if (!*(void *)(*(void *)v5 + 16))
  {
    uint64_t v14 = **a1;
    uint64_t v15 = v3;
    uint64_t v13 = v2[2];
    uint64_t v16 = v2[3];
    uint64_t v17 = v2[4];
    goto LABEL_16;
  }
  if (v9)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if (!v6[2])
      {
LABEL_23:
        __break(1u);
        return;
      }
      goto LABEL_14;
    }
LABEL_22:
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    if (!v6[2]) {
      goto LABEL_23;
    }
LABEL_14:
    int v19 = (void *)v2[7];
    v6[4] = v4;
    void v6[5] = v3;
    *((unsigned char *)v6 + 48) = v12 & 1;
    v6[7] = v11;
    v6[8] = v9;
    v6[9] = v8;
    v6[10] = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *int v19 = v6;
  }
LABEL_17:

  free(v2);
}

uint64_t SkeletalPoseSet.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

BOOL SkeletalPoseSet.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t SkeletalPoseSet.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)(v5 + 80);
    while (1)
    {
      long long v16 = *((_OWORD *)v9 - 3);
      uint64_t v10 = *((unsigned __int8 *)v9 - 32);
      uint64_t v12 = *(v9 - 3);
      uint64_t v11 = *(v9 - 2);
      uint64_t v14 = *(v9 - 1);
      uint64_t v13 = *v9;
      if (v12 == v8 && v11 == a2) {
        break;
      }
      double result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_11;
      }
      v9 += 7;
      if (!--v6) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = v8;
    uint64_t v11 = a2;
LABEL_11:
    *(_OWORD *)a3 = v16;
    *(void *)(a3 + 16) = v10;
    *(void *)(a3 + 24) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v14;
    *(void *)(a3 + 48) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

double key path getter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v5, v3, v4, v9);
  swift_bridgeObjectRelease();
  uint64_t v6 = v11;
  long long v7 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v7;
  double result = *(double *)&v10;
  *(_OWORD *)(a2 + 32) = v10;
  *(void *)(a2 + 48) = v6;
  return result;
}

uint64_t key path setter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  v12[0] = *a1;
  v12[1] = v5;
  long long v12[2] = v6;
  void v12[3] = v7;
  id v12[4] = v8;
  uint64_t v12[5] = v9;
  v12[6] = v10;
  swift_bridgeObjectRetain();
  outlined copy of SkeletalPose?(v12[0], v5, v6, v7, v8);
  specialized SkeletalPoseSet.subscript.setter(v12, v3, v4);

  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPoseSet.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  specialized SkeletalPoseSet.subscript.setter(a1, a2, a3);

  return swift_bridgeObjectRelease();
}

void (*SkeletalPoseSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[8] = a3;
  v7[9] = v3;
  v7[7] = a2;
  uint64_t v8 = *v3;
  uint64_t v9 = *(void *)(*v3 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)(v8 + 80);
    while (1)
    {
      long long v18 = *((_OWORD *)v10 - 3);
      uint64_t v11 = *((unsigned __int8 *)v10 - 32);
      uint64_t v13 = *(v10 - 3);
      uint64_t v12 = *(v10 - 2);
      uint64_t v15 = *(v10 - 1);
      uint64_t v14 = *v10;
      if (v13 == a2 && v12 == a3) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_11;
      }
      v10 += 7;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = a2;
    uint64_t v12 = a3;
LABEL_11:
    *(_OWORD *)uint64_t v7 = v18;
    uint64_t v7[2] = v11;
    void v7[3] = v13;
    v7[4] = v12;
    void v7[5] = v15;
    v7[6] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    v7[6] = 0;
    *((_OWORD *)v7 + 1) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
  }
  return SkeletalPoseSet.subscript.modify;
}

void SkeletalPoseSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v9 = (*a1)[8];
  uint64_t v11 = (*a1)[6];
  uint64_t v10 = (*a1)[7];
  v12[0] = v3;
  v12[1] = v4;
  long long v12[2] = v6;
  void v12[3] = v5;
  id v12[4] = v8;
  uint64_t v12[5] = v7;
  v12[6] = v11;
  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined copy of SkeletalPose?(v3, v4, v6, v5, v8);
    specialized SkeletalPoseSet.subscript.setter(v12, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of SkeletalPose?(*v2, v2[1], v2[2], v2[3], v2[4]);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized SkeletalPoseSet.subscript.setter(v12, v10, v9);
    swift_bridgeObjectRelease();
  }

  free(v2);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = *((unsigned char *)*a1 + 16);
  uint64_t v7 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v9 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  uint64_t v10 = *(void **)(*a1)[8];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
    uint64_t v11 = v2[7];
    if (v10[2] > v11)
    {
      uint64_t v12 = (void *)v2[8];
      uint64_t v13 = &v10[7 * v11];
      void v13[4] = v3;
      v13[5] = v4;
      *((unsigned char *)v13 + 48) = v5;
      v13[7] = v7;
      v13[8] = v6;
      v13[9] = v9;
      v13[10] = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v12 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  uint64_t v14 = v2[7];
  if (v10[2] <= v14)
  {
    __break(1u);
    return;
  }
  uint64_t v15 = (void *)v2[8];
  long long v16 = &v10[7 * v14];
  _OWORD v16[4] = v3;
  void v16[5] = v4;
  *((unsigned char *)v16 + 48) = v5;
  v16[7] = v7;
  v16[8] = v6;
  v16[9] = v9;
  v16[10] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v15 = v10;
LABEL_9:

  free(v2);
}

Swift::Bool __swiftcall SkeletalPoseSet.contains(_:)(Swift::String a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3) {
    return 0;
  }
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  for (uint64_t i = (void *)(v2 + 64); ; i += 7)
  {
    BOOL v7 = *(i - 1) == countAndFlagsBits && *i == (void)object;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t SkeletalPoseSet.set(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  unint64_t v5 = *(void *)(*(void *)v2 + 16);
  if (!v5)
  {
LABEL_9:
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  long long v19 = *(_OWORD *)result;
  uint64_t v8 = *(unsigned __int8 *)(result + 16);
  uint64_t v9 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v20 = *(void *)(result + 48);
  uint64_t v21 = *(void *)(result + 40);
  while (1)
  {
    uint64_t v11 = &v4[v6];
    if (v4[v6 + 7] == v9 && v4[v6 + 8] == v10) {
      break;
    }
    double result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v7;
    v6 += 7;
    if (v5 == v7) {
      goto LABEL_9;
    }
  }
  if (v7 >= v5)
  {
    __break(1u);
  }
  else
  {
    char v18 = v8;
    uint64_t v15 = v4[v6 + 5];
    uint64_t v16 = v4[v6 + 4];
    uint64_t v17 = LOBYTE(v4[v6 + 6]);
    unint64_t v5 = v11[8];
    uint64_t v14 = v11[7];
    uint64_t v11 = (void *)v4[v6 + 9];
    uint64_t v8 = v4[v6 + 10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_12;
    }
  }
  double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  uint64_t v4 = (void *)result;
LABEL_12:
  if (v7 >= v4[2])
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = &v4[v6];
    *((_OWORD *)v13 + 2) = v19;
    *((unsigned char *)v13 + 48) = v18;
    v13[7] = v9;
    v13[8] = v10;
    v13[9] = v21;
    v13[10] = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    double result = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v4;
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v15;
    *(void *)(a2 + 16) = v17;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v11;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

Swift::Int_optional __swiftcall SkeletalPoseSet.index(of:)(Swift::String of)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    object = of._object;
    uint64_t countAndFlagsBits = of._countAndFlagsBits;
    Swift::Int v6 = 0;
    unint64_t v7 = (void *)(v2 + 64);
    while (1)
    {
      BOOL v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (void)object;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      ++v6;
      v7 += 7;
      if (v3 == v6) {
        goto LABEL_9;
      }
    }
    Swift::Bool v9 = 0;
  }
  else
  {
LABEL_9:
    Swift::Int v6 = 0;
    Swift::Bool v9 = 1;
  }
  Swift::Int v10 = v6;
  result.int value = v10;
  result.is_nil = v9;
  return result;
}

uint64_t SkeletalPoseSet.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 56 * v2;
    char v5 = *(unsigned char *)(v4 + 48);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v7 = *(void *)(v4 + 64);
    uint64_t v8 = *(void *)(v4 + 72);
    uint64_t v9 = *(void *)(v4 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v4 + 32);
    *(unsigned char *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance SkeletalPoseSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 56 * v2;
    char v5 = *(unsigned char *)(v4 + 48);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v7 = *(void *)(v4 + 64);
    uint64_t v8 = *(void *)(v4 + 72);
    uint64_t v9 = *(void *)(v4 + 80);
    *(_OWORD *)a1 = *(_OWORD *)(v4 + 32);
    *(unsigned char *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t SkeletalPoseSet.makeIterator()@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance SkeletalPoseSet()
{
  Swift::UInt64 v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance SkeletalPoseSet(void *a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t SkeletalPoseSet.startIndex.getter()
{
  return 0;
}

unint64_t SkeletalPoseSet.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)v2 + 56 * result;
  char v4 = *(unsigned char *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v8 = *(void *)(v3 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 32);
  *(unsigned char *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t key path getter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= *(void *)(*(void *)result + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(void *)result + 56 * v3;
  char v5 = *(unsigned char *)(v4 + 48);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void *)(v4 + 72);
  uint64_t v9 = *(void *)(v4 + 80);
  *(_OWORD *)a3 = *(_OWORD *)(v4 + 32);
  *(unsigned char *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
  *(void *)(a3 + 32) = v7;
  *(void *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for SkeletalPoseSet.subscript(_:) : SkeletalPoseSet(uint64_t *a1, void **a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  uint64_t v9 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v12 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  uint64_t v12 = (void *)result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v12[2])
  {
    uint64_t v14 = &v12[7 * v4];
    v14[4] = v5;
    v14[5] = v6;
    *((unsigned char *)v14 + 48) = v7;
    v14[7] = v9;
    v14[8] = v8;
    v14[9] = v10;
    v14[10] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t SkeletalPoseSet.subscript.setter(long long *a1, unint64_t a2)
{
  long long v12 = *a1;
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v9 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  uint64_t v9 = (void *)result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v9[2] > a2)
  {
    uint64_t v11 = &v9[7 * a2];
    *((_OWORD *)v11 + 2) = v12;
    *((unsigned char *)v11 + 48) = v4;
    v11[7] = v5;
    v11[8] = v6;
    v11[9] = v7;
    v11[10] = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*SkeletalPoseSet.subscript.modify(void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t result = (void (*)(uint64_t **, char))malloc(0x48uLL);
  *a1 = result;
  *((void *)result + 7) = a2;
  *((void *)result + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 56 * a2;
    char v8 = *(unsigned char *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v7 + 64);
    uint64_t v11 = *(void *)(v7 + 72);
    uint64_t v12 = *(void *)(v7 + 80);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(v7 + 32);
    *((unsigned char *)v6 + 16) = v8;
    *((void *)v6 + 3) = v9;
    *((void *)v6 + 4) = v10;
    *((void *)v6 + 5) = v11;
    *((void *)v6 + 6) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return SkeletalPoseSet.subscript.modify;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall SkeletalPoseSet.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SkeletalPoseSet(void (***a1)(void **a1), unint64_t *a2))(void *a1)
{
  char v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = SkeletalPoseSet.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*SkeletalPoseSet.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  Swift::Int result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 56 * a2;
    char v8 = *(unsigned char *)(v7 + 48);
    uint64_t v9 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v7 + 64);
    uint64_t v11 = *(void *)(v7 + 72);
    uint64_t v12 = *(void *)(v7 + 80);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(v7 + 32);
    *((unsigned char *)v6 + 16) = v8;
    *((void *)v6 + 3) = v9;
    *((void *)v6 + 4) = v10;
    *((void *)v6 + 5) = v11;
    *((void *)v6 + 6) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return SkeletalPoseSet.subscript.read;
  }
  __break(1u);
  return result;
}

void SkeletalPoseSet.subscript.read(void **a1)
{
  BOOL v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t outlined consume of SkeletalPose?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized SkeletalPoseSet.subscript.setter(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result[1];
  uint64_t v6 = result[2];
  uint64_t v7 = result[3];
  uint64_t v8 = result[4];
  uint64_t v9 = result[6];
  uint64_t v10 = *(void **)v3;
  uint64_t v11 = *(void *)(*(void *)v3 + 16);
  if (v11)
  {
    if (!v8) {
      return result;
    }
    uint64_t v20 = result[3];
    uint64_t v21 = result[2];
    uint64_t v23 = *result;
    uint64_t v22 = result[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_30:
    }
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    unint64_t v13 = 0;
    for (uint64_t i = v10 + 10; ; i += 7)
    {
      if (v11 == v13)
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v13 >= v10[2]) {
        goto LABEL_29;
      }
      BOOL v15 = *(i - 3) == a2 && *(i - 2) == a3;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_6;
      }
      uint64_t v16 = *(void *)(*i + 16);
      uint64_t v17 = *(void *)(v9 + 16);
      if (v16)
      {
        if (v16 != v17 || v17 == 0) {
          goto LABEL_6;
        }
      }
      else if (v17)
      {
        goto LABEL_6;
      }
      *uint64_t i = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_6:
      if (v11 == ++v13)
      {
        uint64_t result = (uint64_t *)outlined consume of SkeletalPose?(v23, v22, v21, v20, v8);
        *(void *)uint64_t v3 = v10;
        return result;
      }
    }
  }
  uint64_t v19 = *result;

  return (uint64_t *)outlined consume of SkeletalPose?(v19, v5, v6, v7, v8);
}

uint64_t outlined copy of SkeletalPose?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator;
  if (!lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SkeletalPoseSet.Iterator and conformance SkeletalPoseSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SkeletalPoseSet and conformance SkeletalPoseSet()
{
  unint64_t result = lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet;
  if (!lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SkeletalPoseSet and conformance SkeletalPoseSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SkeletalPoseSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<SkeletalPoseSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<SkeletalPoseSet>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SkeletalPoseSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<SkeletalPoseSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<SkeletalPoseSet>);
}

uint64_t sub_22821ECE0()
{
  return 0;
}

uint64_t sub_22821ECF8()
{
  return 0;
}

ValueMetadata *type metadata accessor for SkeletalPoseSet()
{
  return &type metadata for SkeletalPoseSet;
}

ValueMetadata *type metadata accessor for SkeletalPoseSet.Iterator()
{
  return &type metadata for SkeletalPoseSet.Iterator;
}

double static CollisionFilter.sensor.getter@<D0>(void *a1@<X8>)
{
  double result = NAN;
  *a1 = -1;
  return result;
}

uint64_t CollisionGroup.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionGroup.all.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

BOOL static CollisionCastQueryType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CollisionCastQueryType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CollisionCastQueryType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CollisionGroup.rawValue.getter()
{
  return *v0;
}

void static CollisionGroup.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionGroup.sceneUnderstanding.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x80000000;
}

_DWORD *CollisionFilter.init(group:mask:)@<X0>(_DWORD *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

double static CollisionFilter.default.getter@<D0>(void *a1@<X8>)
{
  double result = NAN;
  *a1 = 0xFFFFFFFF00000001;
  return result;
}

void CollisionFilter.group.getter(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *CollisionFilter.group.setter(_DWORD *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*CollisionFilter.group.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionFilter.mask.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 4);
}

_DWORD *CollisionFilter.mask.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 4) = *result;
  return result;
}

uint64_t (*CollisionFilter.mask.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static CollisionFilter.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t CollisionCastHit.entity.getter()
{
  return swift_retain();
}

__n128 CollisionCastHit.position.getter()
{
  return v0[1];
}

__n128 CollisionCastHit.normal.getter()
{
  return v0[2];
}

float CollisionCastHit.distance.getter()
{
  return *(float *)(v0 + 48);
}

uint64_t CollisionCastHit.TriangleHit.faceIndex.getter()
{
  return *(void *)v0;
}

double CollisionCastHit.TriangleHit.uv.getter()
{
  return *(double *)(v0 + 8);
}

__n128 CollisionCastHit.triangleHit.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 72);
  __n128 result = *(__n128 *)(v1 + 56);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t CollisionCastHit.shapeIndex.getter()
{
  return *(void *)(v0 + 80);
}

float32x2_t *Scene.raycast(origin:direction:length:query:mask:relativeTo:)(unsigned __int8 *a1, int *a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float a6)
{
  int v6 = *a2;
  float v7 = vmuls_lane_f32(a6, a5, 2);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)a4.f32, vmul_n_f32(*(float32x2_t *)a5.f32, a6));
  v8.f32[2] = a4.f32[2] + v7;
  v8.i32[3] = 0;
  unsigned __int8 v11 = *a1;
  int v10 = v6;
  return Scene.raycast(from:to:query:mask:relativeTo:)(&v11, a4, v8, (uint64_t)&v10, a3);
}

float32x2_t *Scene.raycast(from:to:query:mask:relativeTo:)(unsigned __int8 *a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v63 = a2;
  uint64_t v78 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  float32x4_t v7 = vsubq_f32(a3, a2);
  float v8 = v7.f32[2];
  float32x2_t v73 = *(float32x2_t *)v7.f32;
  a2.f32[0] = sqrtf(vmuls_lane_f32(v7.f32[2], v7, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  int32x2_t v67 = *(int32x2_t *)a2.f32;
  specialized static __ServiceLocator.shared.getter();
  if (a5)
  {
    *(double *)v79.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a5);
    float32x4_t v60 = (float32x4_t)v79.columns[0];
    float32x4_t v61 = (float32x4_t)v79.columns[1];
    float32x4_t v62 = (float32x4_t)v79.columns[2];
    float32x4_t v57 = (float32x4_t)v79.columns[3];
    simd_float4x4 v80 = __invert_f4(v79);
    float32x4_t v68 = (float32x4_t)v80.columns[1];
    float32x4_t v69 = (float32x4_t)v80.columns[0];
    float32x4_t v64 = (float32x4_t)v80.columns[3];
    float32x4_t v66 = (float32x4_t)v80.columns[2];
    *(float32x2_t *)v9.f32 = simd_float4x4.transform(position:)(v63, (float32x4_t)v80.columns[0], (float32x4_t)v80.columns[1], (float32x4_t)v80.columns[2], (float32x4_t)v80.columns[3]);
    float32x4_t v74 = v9;
    *(float32x2_t *)v10.f32 = simd_float4x4.transform(position:)(a3, v69, v68, v66, v64);
    float32x4_t v11 = vsubq_f32(v10, v74);
    int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
    unsigned __int32 v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
    float32x2_t v14 = vrsqrte_f32((float32x2_t)v13);
    float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
    float32x4_t v71 = vmulq_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15))).f32[0]);
    float v16 = sqrtf(*(float *)&v12.i32[2] + (float)(*(float *)v12.i32
                                              + vmuls_lane_f32(v11.f32[1], *(float32x2_t *)v11.f32, 1)));
  }
  else
  {
    *(float32x2_t *)v17.f32 = vdiv_f32(v73, (float32x2_t)vdup_lane_s32(v67, 0));
    v17.f32[2] = v8 / *(float *)v67.i32;
    v17.i32[3] = 0;
    float32x4_t v71 = v17;
    float32x4_t v57 = *(float32x4_t *)&zmmword_22830EC90[48];
    float32x4_t v62 = *(float32x4_t *)&zmmword_22830EC90[32];
    float32x4_t v61 = *(float32x4_t *)&zmmword_22830EC90[16];
    float32x4_t v60 = *(float32x4_t *)zmmword_22830EC90;
    float v16 = *(float *)v67.i32;
    float32x4_t v74 = v63;
  }
  RECollisionCastConfigurationInitToDefault();
  RECollisionCastConfigurationSetQueryType();
  RECollisionCastConfigurationSetFilter();
  RECollisionCastHitCollectionCreate();
  v76[0] = v74;
  v76[1] = v71;
  float v77 = v16;
  if (a5) {
    RECollisionCastRayVsEntitySimulation();
  }
  else {
    RECollisionCastRayVsScene();
  }
  uint64_t v18 = RECollisionCastHitCollectionCount();
  uint64_t v19 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0, MEMORY[0x263F8EE78]);
  if (v18 < 0) {
    goto LABEL_36;
  }
  uint64_t v20 = v19;
  uint64_t v59 = a5;
  int v58 = v6;
  if (v18)
  {
    uint64_t v21 = 0;
    uint64_t v65 = v18;
    while (1)
    {
      if (RECollisionCastHitCollectionGetByIndex())
      {
        RECollisionCastHitGetObject();
        uint64_t Entity = RECollisionObjectGetEntity();
        if (Entity) {
          break;
        }
      }
LABEL_14:
      if (v18 == ++v21) {
        goto LABEL_26;
      }
    }
    uint64_t v30 = Entity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v31 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_35;
      }
      uint64_t v33 = specialized static Entity.entityInfoType(_:)();
      if (v33)
      {
        uint64_t v32 = (*(uint64_t (**)(void))(v33 + 232))();
        uint64_t v34 = *(void *)(v32 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v34, 0);
        *(void *)(v32 + 16) = v30;
        MEMORY[0x22A68E750](v30, v32);
        swift_release();
        goto LABEL_23;
      }
      uint64_t v31 = makeEntity(for:)(v30);
    }
    uint64_t v32 = v31;
LABEL_23:
    swift_retain();
    RECollisionCastHitGetPosition();
    long long v75 = v35;
    RECollisionCastHitGetNormal();
    long long v72 = v36;
    RECollisionCastHitGetHitPercentage();
    float v38 = v37;
    unsigned int ShapeIndex = RECollisionCastHitGetShapeIndex();
    int HasTriangleMeshHitInfo = RECollisionCastHitHasTriangleMeshHitInfo();
    char v41 = HasTriangleMeshHitInfo;
    if (HasTriangleMeshHitInfo)
    {
      float32x2_t FaceIndex = (float32x2_t)RECollisionCastHitGetFaceIndex();
      RECollisionCastHitGetFaceUV();
      float32x2_t v43 = v42;
      swift_release();
      float32x2_t v23 = v43;
    }
    else
    {
      swift_release();
      float32x2_t FaceIndex = 0;
      float32x2_t v23 = 0;
    }
    unint64_t v24 = (unint64_t)v20[2];
    unint64_t v25 = (unint64_t)v20[3];
    swift_retain();
    if (v24 >= v25 >> 1) {
      uint64_t v20 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v24 + 1, 1, v20);
    }
    long long v26 = v72;
    long long v27 = v75;
    HIDWORD(v27) = v69.i32[3];
    HIDWORD(v26) = v68.i32[3];
    void v20[2] = (float32x2_t)(v24 + 1);
    uint64_t v28 = &v20[12 * v24];
    v28[4] = (float32x2_t)v32;
    *(_OWORD *)v28[6].f32 = v27;
    *(_OWORD *)v28[8].f32 = v26;
    v28[10].f32[0] = *(float *)v67.i32 * v38;
    v28[11] = FaceIndex;
    v28[12] = v23;
    v28[13].i8[0] = v41 ^ 1;
    v28[14] = (float32x2_t)ShapeIndex;
    swift_release();
    uint64_t v18 = v65;
    goto LABEL_14;
  }
LABEL_26:
  RECollisionCastHitCollectionDestroy();
  v44.columns[2] = (simd_float3)v62;
  v44.columns[1] = (simd_float3)v61;
  if (v59)
  {
    float32x2_t v45 = v20[2];
    if (v45)
    {
      v44.columns[0] = (simd_float3)v60;
      v44.columns[0].i32[3] = 0;
      v44.columns[1].i32[3] = 0;
      v44.columns[2].i32[3] = 0;
      simd_float3x3 v49 = __invert_f3(v44);
      unint64_t v46 = 0;
      float32x4_t v47 = (float32x4_t)vzip1q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v47.i32[2] = v49.columns[2].i32[0];
      float32x4_t v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v48.i32[2] = v49.columns[2].i32[1];
      v49.columns[0] = (simd_float3)vzip2q_s32((int32x4_t)v49.columns[0], (int32x4_t)v49.columns[1]);
      v49.columns[0].i32[2] = v49.columns[2].i32[2];
      float32x2_t v50 = v20[2];
      char v51 = v20 + 6;
      while (v46 < *(void *)&v50)
      {
        v49.columns[2] = (simd_float3)vaddq_f32(v57, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, COERCE_FLOAT(*(_OWORD *)v51->f32)), v61, *v51, 1), v62, *(float32x4_t *)v51->f32, 2));
        float32x4_t v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v49.columns[2], 3);
        *(float32x2_t *)&long long v53 = vdiv_f32(*(float32x2_t *)v49.columns[2].f32, *(float32x2_t *)v52.f32);
        v49.columns[2] = (simd_float3)vdivq_f32((float32x4_t)v49.columns[2], v52);
        float32x4_t v54 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)v51[2].f32)), v48, v51[2], 1), (float32x4_t)v49.columns[0], *(float32x4_t *)v51[2].f32, 2);
        float32x2_t v55 = vsub_f32(*(float32x2_t *)&v53, *(float32x2_t *)v63.f32);
        *((void *)&v53 + 1) = v49.columns[2].u32[2];
        ++v46;
        v54.i32[3] = v49.columns[1].i32[3];
        *(_OWORD *)v51->f32 = v53;
        *(float32x4_t *)v51[2].f32 = v54;
        v51[4].f32[0] = sqrtf((float)((float)(v49.columns[2].f32[2] - v63.f32[2])* (float)(v49.columns[2].f32[2] - v63.f32[2]))+ vaddv_f32(vmul_f32(v55, v55)));
        v51 += 12;
        if (*(void *)&v45 == v46) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
  }
LABEL_31:
  if (v58 == 1)
  {
    *(void *)&v76[0] = v20;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)v76);
    swift_bridgeObjectRelease_n();
    return *(float32x2_t **)&v76[0];
  }
  return v20;
}

uint64_t Scene.convexCast(convexShape:fromPosition:fromOrientation:toPosition:toOrientation:query:mask:relativeTo:)(int8x16_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  int v9 = *a6;
  specialized static __ServiceLocator.shared.getter();
  if (a8)
  {
    *(double *)v78.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a8);
    float32x4_t v63 = (float32x4_t)v78.columns[1];
    float32x4_t v64 = (float32x4_t)v78.columns[0];
    float32x4_t v62 = (float32x4_t)v78.columns[2];
    float32x4_t v59 = (float32x4_t)v78.columns[3];
    __invert_f4(v78);
  }
  else
  {
    float32x4_t v63 = *(float32x4_t *)&zmmword_22830EC90[16];
    float32x4_t v64 = *(float32x4_t *)zmmword_22830EC90;
    float32x4_t v62 = *(float32x4_t *)&zmmword_22830EC90[32];
    float32x4_t v59 = *(float32x4_t *)&zmmword_22830EC90[48];
  }
  if (one-time initialization token for identity == -1)
  {
    if (a8)
    {
LABEL_6:
      specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a1.i64, a2, 1.0);
      specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a3.i64, a4, 1.0);
      REMakeSRTFromMatrix();
      float32x4_t v67 = v11;
      a2.i32[3] = v10;
      REMakeSRTFromMatrix();
      a3 = v12;
      goto LABEL_9;
    }
  }
  else
  {
    swift_once();
    if (a8) {
      goto LABEL_6;
    }
  }
  float32x4_t v67 = (float32x4_t)a1;
LABEL_9:
  long long v74 = 0u;
  long long v75 = 0u;
  RECollisionCastConfigurationInitToDefault();
  RECollisionCastConfigurationSetQueryType();
  RECollisionCastConfigurationSetFilter();
  uint64_t CollisionShape = RECollisionShapeAssetGetCollisionShape();
  RECollisionCastHitCollectionCreate();
  if (!a8)
  {
    if (CollisionShape)
    {
      RECollisionCastConvexVsScene();
      goto LABEL_14;
    }
LABEL_45:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  if (!CollisionShape)
  {
    __break(1u);
    goto LABEL_45;
  }
  RECollisionCastConvexVsEntitySimulation();
LABEL_14:
  uint64_t v14 = RECollisionCastHitCollectionCount();
  float32x2_t v15 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x263F8EE78]);
  if (v14 < 0) {
    goto LABEL_43;
  }
  float v16 = v15;
  uint64_t v61 = a8;
  int v60 = v9;
  if (v14)
  {
    uint64_t v17 = 0;
    float32x4_t v18 = vsubq_f32(a3, v67);
    float32x4_t v19 = vmulq_f32(v18, v18);
    float v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
    uint64_t v66 = v14;
    while (1)
    {
      if (RECollisionCastHitCollectionGetByIndex())
      {
        RECollisionCastHitGetObject();
        uint64_t Entity = RECollisionObjectGetEntity();
        if (Entity) {
          break;
        }
      }
LABEL_21:
      if (v14 == ++v17) {
        goto LABEL_33;
      }
    }
    uint64_t v29 = Entity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v30 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_42;
      }
      uint64_t v32 = specialized static Entity.entityInfoType(_:)();
      if (v32)
      {
        uint64_t v31 = (*(uint64_t (**)(void))(v32 + 232))();
        uint64_t v33 = *(void *)(v31 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v33, 0);
        *(void *)(v31 + 16) = v29;
        MEMORY[0x22A68E750](v29, v31);
        swift_release();
        goto LABEL_30;
      }
      uint64_t v30 = makeEntity(for:)(v29);
    }
    uint64_t v31 = v30;
LABEL_30:
    swift_retain();
    RECollisionCastHitGetPosition();
    long long v72 = v34;
    RECollisionCastHitGetNormal();
    long long v70 = v35;
    RECollisionCastHitGetHitPercentage();
    float v37 = v36;
    unsigned int ShapeIndex = RECollisionCastHitGetShapeIndex();
    int HasTriangleMeshHitInfo = RECollisionCastHitHasTriangleMeshHitInfo();
    char v40 = HasTriangleMeshHitInfo;
    if (HasTriangleMeshHitInfo)
    {
      float32x2_t FaceIndex = (float32x2_t)RECollisionCastHitGetFaceIndex();
      RECollisionCastHitGetFaceUV();
      float32x2_t v42 = v41;
      swift_release();
      float32x2_t v22 = v42;
    }
    else
    {
      swift_release();
      float32x2_t FaceIndex = 0;
      float32x2_t v22 = 0;
    }
    unint64_t v23 = (unint64_t)v16[2];
    unint64_t v24 = (unint64_t)v16[3];
    swift_retain();
    if (v23 >= v24 >> 1) {
      float v16 = (float32x2_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v23 + 1, 1, v16);
    }
    uint64_t v14 = v66;
    long long v26 = v70;
    long long v25 = v72;
    HIDWORD(v25) = v67.i32[3];
    HIDWORD(v26) = a2.i32[3];
    _OWORD v16[2] = (float32x2_t)(v23 + 1);
    long long v27 = &v16[12 * v23];
    v27[4] = (float32x2_t)v31;
    *(_OWORD *)v27[6].f32 = v25;
    *(_OWORD *)v27[8].f32 = v26;
    v27[10].f32[0] = v20 * v37;
    v27[11] = FaceIndex;
    v27[12] = v22;
    v27[13].i8[0] = v40 ^ 1;
    v27[14] = (float32x2_t)ShapeIndex;
    swift_release();
    goto LABEL_21;
  }
LABEL_33:
  RECollisionCastHitCollectionDestroy();
  v43.columns[1] = (simd_float3)v63;
  v43.columns[0] = (simd_float3)v64;
  v43.columns[2] = (simd_float3)v62;
  if (v61)
  {
    float32x2_t v44 = v16[2];
    if (v44)
    {
      v43.columns[0].i32[3] = 0;
      v43.columns[1].i32[3] = 0;
      v43.columns[2].i32[3] = 0;
      simd_float3x3 v77 = __invert_f3(v43);
      unint64_t v45 = 0;
      float32x4_t v46 = (float32x4_t)vzip1q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v46.i32[2] = v77.columns[2].i32[0];
      float32x4_t v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v47.i32[2] = v77.columns[2].i32[1];
      float32x4_t v48 = (float32x4_t)vzip2q_s32((int32x4_t)v77.columns[0], (int32x4_t)v77.columns[1]);
      v48.i32[2] = v77.columns[2].i32[2];
      float32x2_t v49 = v16[2];
      v50.i32[0] = vextq_s8(a1, a1, 8uLL).u32[0];
      v50.i32[1] = a1.i32[0];
      char v51 = v16 + 6;
      while (v45 < *(void *)&v49)
      {
        ++v45;
        float32x4_t v52 = vaddq_f32(v59, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)v51->f32)), v63, *v51, 1), v62, *(float32x4_t *)v51->f32, 2));
        float32x4_t v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
        *(float32x2_t *)&long long v54 = vdiv_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.f32);
        float32x4_t v55 = vdivq_f32(v52, v53);
        float32x4_t v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)v51[2].f32)), v47, v51[2], 1), v48, *(float32x4_t *)v51[2].f32, 2);
        v56.i32[3] = a1.i32[3];
        float32x2_t v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v54, 0);
        *((void *)&v54 + 1) = v55.u32[2];
        *(_OWORD *)v51->f32 = v54;
        *(float32x4_t *)v51[2].f32 = v56;
        v57.i32[0] = v55.i32[2];
        *(float32x2_t *)v55.f32 = vsub_f32(v57, v50);
        *(float32x2_t *)v55.f32 = vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
        v51[4].f32[0] = sqrtf(v55.f32[0]+ (float)(v55.f32[1]+ (float)((float)(*((float *)&v54 + 1) - *(float *)&a1.i32[1])* (float)(*((float *)&v54 + 1) - *(float *)&a1.i32[1]))));
        v51 += 12;
        if (*(void *)&v44 == v45) {
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
  }
LABEL_38:
  if (v60 == 1)
  {
    float32x2_t v73 = v16;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v73);
    swift_bridgeObjectRelease_n();
    return (uint64_t)v73;
  }
  return (uint64_t)v16;
}

void *Scene.contact(position:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (a1)
  {
    *(double *)v64.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a1);
    v56.columns[0] = (simd_float3)v64.columns[0];
    v56.columns[1] = (simd_float3)v64.columns[1];
    v56.columns[2] = (simd_float3)v64.columns[2];
    simd_float4x4 v65 = __invert_f4(v64);
    simd_float4x4.transform(position:)(a2, (float32x4_t)v65.columns[0], (float32x4_t)v65.columns[1], (float32x4_t)v65.columns[2], (float32x4_t)v65.columns[3]);
  }
  else
  {
    v56.columns[2] = *(simd_float3 *)&zmmword_22830EC90[32];
    v56.columns[1] = *(simd_float3 *)&zmmword_22830EC90[16];
    v56.columns[0] = *(simd_float3 *)zmmword_22830EC90;
  }
  RESphereShapeCreate();
  RECollisionObjectCreate();
  if (one-time initialization token for identity != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    RECollisionObjectSetPose();
    REContactSetCollectionCreate();
    if (a1)
    {
      RECollisionWorldGetContactsObjectVsEntitySimulationAdHoc();
    }
    else if (REServiceLocatorGetECSService())
    {
      RECollisionWorldGetContactsObjectVsSceneAdHoc();
    }
    REContactSetCollectionGetIterator();
    if (!REContactSetCollectionIteratorCurrent()) {
      break;
    }
    simd_float3 v3 = v56.columns[0];
    v3.i32[3] = 0;
    v56.columns[0] = v3;
    simd_float3 v4 = v56.columns[1];
    v4.i32[3] = 0;
    v56.columns[1] = v4;
    simd_float3 v5 = v56.columns[2];
    v5.i32[3] = 0;
    v56.columns[2] = v5;
    int v6 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (!REContactSetHasContact()) {
        goto LABEL_12;
      }
      REContactSetObjectB();
      if (REContactSetObjectA())
      {
        uint64_t Entity = RECollisionObjectGetEntity();
        if (Entity) {
          break;
        }
      }
      uint64_t v21 = RECollisionObjectGetEntity();
      if (v21)
      {
        uint64_t v9 = v21;
        REContactSetGetNormal();
        float32x4_t v23 = v22;
        v23.i32[3] = v57;
        if (a1)
        {
          simd_float3x3 v62 = v56;
          float32x4_t v60 = (float32x4_t)v62.columns[2];
          simd_float3x3 v63 = __invert_f3(v56);
          float32x4_t v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v63.columns[0], 2);
          v63.columns[0].i32[3] = v40;
          int32x4_t v25 = vdupq_laneq_s32((int32x4_t)v63.columns[1], 2);
          v63.columns[1].i32[3] = v41;
          v24.i64[0] = vzip1q_s32((int32x4_t)v24, v25).u64[0];
          v24.i64[1] = __PAIR64__(v45, v63.columns[2].u32[2]);
          v63.columns[2].i32[3] = v42;
          float32x4_t v26 = (float32x4_t)vzip1q_s32((int32x4_t)v63.columns[0], (int32x4_t)v63.columns[2]);
          int32x4_t v27 = vzip1q_s32((int32x4_t)v63.columns[1], (int32x4_t)0);
          v28.i64[0] = vzip1q_s32((int32x4_t)v26, v27).u64[0];
          v26.i64[0] = vzip2q_s32((int32x4_t)v26, v27).u64[0];
          v28.i64[1] = __PAIR64__(v43, vdupq_lane_s32(*(int32x2_t *)(&v63 + 32), 0).u32[2]);
          v26.i64[1] = __PAIR64__(v44, vdupq_lane_s32(*(int32x2_t *)(&v63 + 32), 1).u32[2]);
          float32x4_t v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v60.f32[0]), v26, *(float32x2_t *)v60.f32, 1), v24, v60, 2);
          v29.i32[3] = v46;
          float32x4_t v59 = v29;
          __int32 v43 = v28.i32[3];
          __int32 v44 = v26.i32[3];
        }
        else
        {
          float32x4_t v59 = v23;
        }
        if ((id)REEntityGetSwiftObject())
        {
LABEL_26:
          type metadata accessor for Entity();
          uint64_t v30 = swift_dynamicCastClassUnconditional();
          goto LABEL_27;
        }
        if (REEntityIsBeingDestroyed()) {
          goto LABEL_38;
        }
LABEL_29:
        uint64_t v32 = specialized static Entity.entityInfoType(_:)();
        if (v32)
        {
          uint64_t v31 = (*(uint64_t (**)(void))(v32 + 232))();
          uint64_t v33 = *(void *)(v31 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v33, 0);
          *(void *)(v31 + 16) = v9;
          MEMORY[0x22A68E750](v9, v31);
          swift_release();
        }
        else
        {
          uint64_t v30 = makeEntity(for:)(v9);
LABEL_27:
          uint64_t v31 = v30;
        }
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v35 = v6[2];
        unint64_t v34 = v6[3];
        float32x4_t v36 = a2;
        float32x4_t v37 = v59;
        if (v35 >= v34 >> 1)
        {
          float v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v6);
          float32x4_t v36 = a2;
          float32x4_t v37 = v59;
          int v6 = v38;
        }
        _OWORD v6[2] = v35 + 1;
        float32x4_t v7 = (float32x4_t *)&v6[12 * v35];
        v7[2].i64[0] = v31;
        v7 += 2;
        v7[1] = v36;
        uint64_t v7[2] = v37;
        v7[3].i32[0] = 0;
        v7[3].i64[1] = 0;
        v7[4].i64[0] = 0;
        v7[4].i8[8] = 1;
        v7[5].i64[0] = -1;
        swift_release();
      }
LABEL_12:
      REContactSetCollectionIteratorNext();
      if (!REContactSetCollectionIteratorCurrent()) {
        goto LABEL_37;
      }
    }
    uint64_t v9 = Entity;
    REContactSetGetNormal();
    float32x4_t v12 = (float32x4_t)COERCE_UNSIGNED_INT(0.0 - v10);
    v12.f32[1] = 0.0 - v11;
    float32x4_t v13 = v12;
    v13.f32[2] = 0.0 - v14;
    float32x4_t v59 = v13;
    if (a1)
    {
      float v48 = 0.0 - v10;
      float32x2_t v47 = *(float32x2_t *)v12.f32;
      simd_float3x3 v61 = __invert_f3(v56);
      float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v61.columns[0], 2);
      v61.columns[0].i32[3] = v49;
      int32x4_t v16 = vdupq_laneq_s32((int32x4_t)v61.columns[1], 2);
      v61.columns[1].i32[3] = v50;
      v15.i64[0] = vzip1q_s32((int32x4_t)v15, v16).u64[0];
      v15.i64[1] = __PAIR64__(v54, v61.columns[2].u32[2]);
      v61.columns[2].i32[3] = v51;
      float32x4_t v17 = (float32x4_t)vzip1q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[2]);
      int32x4_t v18 = vzip1q_s32((int32x4_t)v61.columns[1], (int32x4_t)0);
      v19.i64[0] = vzip1q_s32((int32x4_t)v17, v18).u64[0];
      v17.i64[0] = vzip2q_s32((int32x4_t)v17, v18).u64[0];
      v19.i64[1] = __PAIR64__(v52, vdupq_lane_s32(*(int32x2_t *)(&v61 + 32), 0).u32[2]);
      v17.i64[1] = __PAIR64__(v53, vdupq_lane_s32(*(int32x2_t *)(&v61 + 32), 1).u32[2]);
      float32x4_t v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v48), v17, v47, 1), v15, v59, 2);
      __int32 v53 = v17.i32[3];
      v20.i32[3] = v55;
      __int32 v52 = v19.i32[3];
      float32x4_t v59 = v20;
    }
    if ((id)REEntityGetSwiftObject()) {
      goto LABEL_26;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0) {
      goto LABEL_29;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once();
  }
  int v6 = (void *)MEMORY[0x263F8EE78];
LABEL_37:
  REContactSetCollectionDestroy();
  RECollisionObjectDestroy();
  RECollisionShapeDestroy();
  return v6;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__dst, float *__src, unint64_t a3, float *a4)
{
  simd_float3 v4 = a4;
  int v6 = __src;
  float32x4_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 96;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 96;
  int32x4_t v25 = __dst;
  float32x4_t v24 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      uint64_t v17 = 24 * v11;
      if (a4 != __src || &__src[v17] <= a4) {
        memmove(a4, __src, 96 * v11);
      }
      int32x4_t v18 = &v4[v17];
      float32x4_t v23 = (char *)&v4[v17];
      int32x4_t v25 = v6;
      if (v7 < v6 && v10 >= 96)
      {
        float32x4_t v19 = (float *)(a3 - 96);
        do
        {
          float32x4_t v20 = v19 + 24;
          if (*(v18 - 12) >= *(v6 - 12))
          {
            float32x4_t v23 = (char *)(v18 - 24);
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              memmove(v19, v18 - 24, 0x60uLL);
            }
            uint64_t v21 = v6;
            v18 -= 24;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v21 = v6 - 24;
            if (v20 != v6 || v19 >= v6) {
              memmove(v19, v6 - 24, 0x60uLL);
            }
            int32x4_t v25 = v6 - 24;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 24;
          int v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    size_t v12 = 24 * v9;
    if (a4 != __dst || &__dst[v12] <= a4) {
      memmove(a4, __dst, v12 * 4);
    }
    float32x4_t v13 = &v4[v12];
    float32x4_t v23 = (char *)v13;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      float v14 = v4;
      while (1)
      {
        if (v6[12] >= v14[12])
        {
          simd_float3 v4 = v14 + 24;
          int32x4_t v16 = v14;
          float32x4_t v15 = v6;
          if (v7 == v14)
          {
            v14 += 24;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v14 += 24;
          }
        }
        else
        {
          float32x4_t v15 = v6 + 24;
          int32x4_t v16 = v6;
          if (v7 == v6 && v7 < v15) {
            goto LABEL_18;
          }
        }
        memmove(v7, v16, 0x60uLL);
LABEL_18:
        v7 += 24;
        if (v14 < v13)
        {
          int v6 = v15;
          if ((unint64_t)v15 < a3) {
            continue;
          }
        }
        float32x4_t v24 = v4;
        int32x4_t v25 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static CollisionCastHit.TriangleHit.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int32x2_t v2 = vceq_f32(a1[1], a2[1]);
  return v2.i32[0] & v2.i32[1] & 1;
}

BOOL specialized static CollisionCastHit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) != *(void *)(*(void *)a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  float v6 = *(float *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  float32x2_t v8 = *(float32x2_t *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  float v13 = *(float *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  float32x2_t v15 = *(float32x2_t *)(a2 + 64);
  int v16 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 80);
  while (1)
  {
    long long v29 = v5;
    float v21 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v30 = v12;
    float v22 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v18 = v21 == v22;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v18) {
        break;
      }
      BOOL v18 = 0;
      BOOL result = 0;
      if (v3 == 2) {
        return result;
      }
    }
  }
  if (v21 != v22) {
    return 0;
  }
  uint64_t v19 = 0;
  while (1)
  {
    long long v27 = v4;
    float v25 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    long long v28 = v11;
    float v26 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    BOOL v20 = v25 == v26;
    if (v19 == 2) {
      break;
    }
    while (1)
    {
      ++v19;
      if (v20) {
        break;
      }
      BOOL v20 = 0;
      BOOL result = 0;
      if (v19 == 2) {
        return result;
      }
    }
  }
  BOOL result = 0;
  if (v25 == v26 && v6 == v13)
  {
    if (v9)
    {
      if (!v16) {
        return 0;
      }
    }
    else
    {
      if (v7 == v14) {
        char v23 = v16;
      }
      else {
        char v23 = 1;
      }
      if (v23) {
        return 0;
      }
      int32x2_t v24 = vceq_f32(v8, v15);
      if ((v24.i32[0] & v24.i32[1] & 1) == 0) {
        return 0;
      }
    }
    return v10 == v17;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionCastQueryType and conformance CollisionCastQueryType()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType;
  if (!lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionCastQueryType and conformance CollisionCastQueryType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionGroup and conformance CollisionGroup()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup;
  if (!lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionGroup and conformance CollisionGroup);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CollisionCastQueryType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228221080);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionCastQueryType()
{
  return &type metadata for CollisionCastQueryType;
}

ValueMetadata *type metadata accessor for CollisionGroup()
{
  return &type metadata for CollisionGroup;
}

ValueMetadata *type metadata accessor for CollisionFilter()
{
  return &type metadata for CollisionFilter;
}

uint64_t initializeWithCopy for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CollisionCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionCastHit(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionCastHit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionCastHit()
{
  return &type metadata for CollisionCastHit;
}

ValueMetadata *type metadata accessor for CollisionCastHit.TriangleHit()
{
  return &type metadata for CollisionCastHit.TriangleHit;
}

void static AudioFileResource.url(forAssetNamed:in:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a2;
  id v30 = a3;
  uint64_t v28 = a1;
  uint64_t v25 = a4;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  float v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = 0;
  long long v27 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  long long v11 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  long long v12 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  float v13 = (uint64_t *)&unk_26DC86618;
  while (v10 < qword_26DC86600)
  {
    uint64_t v16 = *(v13 - 1);
    uint64_t v15 = *v13;
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)MEMORY[0x22A688A50](v28, v29);
    if (v15)
    {
      BOOL v18 = (void *)MEMORY[0x22A688A50](v16, v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      BOOL v18 = 0;
    }
    id v19 = objc_msgSend(v30, sel_URLForResource_withExtension_, v17, v18, v25);

    if (v19)
    {
      BOOL v20 = v26;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      float v21 = *v27;
      (*v27)(v9, v20, v4);
      uint64_t v14 = *v11;
      (*v11)(v9, 0, 1, v4);
      if ((*v12)(v9, 1, v4) != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        swift_arrayDestroy();
        float v22 = (char *)v25;
        v21((char *)v25, v9, v4);
        char v23 = v22;
        uint64_t v24 = 0;
LABEL_12:
        v14(v23, v24, 1, v4);
        return;
      }
    }
    else
    {
      uint64_t v14 = *v11;
      (*v11)(v9, 1, 1, v4);
    }
    ++v10;
    outlined destroy of URL?((uint64_t)v9);
    v13 += 2;
    if (v10 == 8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      swift_arrayDestroy();
      char v23 = (char *)v25;
      uint64_t v24 = 1;
      goto LABEL_12;
    }
  }
  __break(1u);
}

uint64_t static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(void *a1, uint64_t a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v81 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v79 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  float32x4_t v67 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void *)((char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v76 = *a4;
  int v75 = a4[1];
  int v74 = a4[2];
  unint64_t v73 = *((void *)a4 + 1);
  int v72 = a4[16];
  uint64_t v71 = *((void *)a4 + 3);
  int v70 = a4[32];
  uint64_t v69 = *((void *)a4 + 5);
  uint64_t v93 = *((void *)a4 + 6);
  uint64_t v78 = *((unsigned int *)a4 + 14);
  int v77 = a4[60];
  uint64_t v18 = *a5;
  type metadata accessor for OS_dispatch_queue();
  *uint64_t v17 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x263F8F0E0], v14);
  LOBYTE(a5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
  if (a5)
  {
    uint64_t v68 = v18;
    uint64_t v20 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v20, (uint64_t)&v84);
    uint64_t v21 = v87;
    uint64_t v22 = v88;
    __swift_project_boxed_opaque_existential_1(&v84, v87);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    if (a1) {
      id v24 = a1;
    }
    else {
      id v24 = objc_msgSend(self, sel_mainBundle);
    }
    uint64_t v25 = a3;
    id v26 = a1;
    id v27 = objc_msgSend(v24, sel_resourcePath);
    uint64_t v28 = v81;
    if (v27)
    {

      if (a1)
      {
        swift_bridgeObjectRetain_n();
        id v29 = v26;
      }
      else
      {
        __int32 v41 = self;
        swift_bridgeObjectRetain_n();
        id v29 = objc_msgSend(v41, sel_mainBundle);
      }
      v66[1] = v23;
      id v42 = v26;
      static AudioFileResource.url(forAssetNamed:in:)(v28, (uint64_t)v25, v29, (uint64_t)v11);

      uint64_t v43 = v79;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v11, 1, v12) == 1)
      {
        outlined destroy of URL?((uint64_t)v11);
        int v44 = v78;
        char v45 = v77;
      }
      else
      {
        uint64_t v46 = (uint64_t)v67;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v67, v11, v12);
        LOBYTE(v84) = v77;
        uint64_t v47 = v80;
        int v48 = specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(v46, v78 | ((unint64_t)v77 << 32));
        if (v47)
        {

          uint64_t v38 = v93;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v12);
          swift_bridgeObjectRelease();
          return v38;
        }
        int v44 = v48;
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v12);
        char v45 = 0;
      }
      LOBYTE(v84) = v76;
      BYTE1(v84) = v75;
      BYTE2(v84) = v74;
      unint64_t v85 = v73;
      char v86 = v72;
      uint64_t v87 = v71;
      LOBYTE(v88) = v70;
      uint64_t v89 = v69;
      uint64_t v90 = v93;
      int v91 = v44;
      char v92 = v45;
      type metadata accessor for REAudioFileAssetConfigurationWrapper();
      swift_initStackObject();
      REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v84);
      REAudioFileAssetConfigurationSetInputMode();
      __int32 v49 = (void *)MEMORY[0x22A688A50](v28, v25);
      uint64_t v50 = REAudioFileAssetDescriptorCreateWithBundleResource();

      swift_bridgeObjectRelease();
      if (v50)
      {
        uint64_t v38 = REAudioFileAssetCreateWithDescriptor();
        RERelease();
        if (v38)
        {
          swift_release();

          return v38;
        }
        uint64_t v82 = 0;
        unint64_t v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(66);
        v55._uint64_t countAndFlagsBits = 0xD000000000000032;
        v55._object = (void *)0x800000022835DFB0;
        String.append(_:)(v55);
        v56._uint64_t countAndFlagsBits = v28;
        v56._object = v25;
        String.append(_:)(v56);
        v57._uint64_t countAndFlagsBits = 0x646E7562206E6920;
        v57._object = (void *)0xEB0000000020656CLL;
        String.append(_:)(v57);
        id v54 = objc_msgSend(v24, sel_description);
      }
      else
      {
        uint64_t v82 = 0;
        unint64_t v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(71);
        v51._uint64_t countAndFlagsBits = 0xD000000000000037;
        v51._object = (void *)0x800000022835DF70;
        String.append(_:)(v51);
        v52._uint64_t countAndFlagsBits = v28;
        v52._object = v25;
        String.append(_:)(v52);
        v53._uint64_t countAndFlagsBits = 0x646E7562206E6920;
        v53._object = (void *)0xEB0000000020656CLL;
        String.append(_:)(v53);
        id v54 = objc_msgSend(v24, sel_description);
      }
      id v58 = v54;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      simd_float3x3 v61 = v60;

      v62._uint64_t countAndFlagsBits = v59;
      v62._object = v61;
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._uint64_t countAndFlagsBits = 46;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      uint64_t v38 = v82;
      unint64_t v64 = v83;
      lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
      swift_allocError();
      *simd_float4x4 v65 = v38;
      v65[1] = v64;
      swift_willThrow();
      swift_release();
    }
    else
    {
      unint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v84 = 0xD00000000000001DLL;
      unint64_t v85 = 0x800000022835DF50;
      v30._uint64_t countAndFlagsBits = v28;
      v30._object = v25;
      String.append(_:)(v30);
      v31._uint64_t countAndFlagsBits = 0x646E7562206E6920;
      v31._object = (void *)0xEB0000000020656CLL;
      String.append(_:)(v31);
      id v32 = objc_msgSend(v24, sel_description);
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      v36._uint64_t countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 46;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      uint64_t v38 = v84;
      unint64_t v39 = v85;
      lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
      swift_allocError();
      *__int32 v40 = v38;
      v40[1] = v39;
      swift_willThrow();
    }

    return v38;
  }
  __break(1u);
  return result;
}

unint64_t static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *a4;
  int v65 = a4[1];
  int v66 = v17;
  int v64 = a4[2];
  uint64_t v18 = (void *)*((void *)a4 + 1);
  int v81 = a4[16];
  uint64_t v69 = *((void *)a4 + 3);
  int v70 = v18;
  int v68 = a4[32];
  uint64_t v67 = *((void *)a4 + 5);
  uint64_t v63 = *((void *)a4 + 6);
  LODWORD(v18) = *((_DWORD *)a4 + 14);
  unsigned int v61 = a4[60];
  int v62 = (int)v18;
  int v19 = *a5;
  if (a3) {
    id v20 = (id)a3;
  }
  else {
    id v20 = objc_msgSend(self, sel_mainBundle);
  }
  id v21 = (id)a3;
  static AudioFileResource.url(forAssetNamed:in:)(a1, (uint64_t)a2, v20, (uint64_t)v12);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of URL?((uint64_t)v12);
    uint64_t v22 = v71;
    unint64_t v23 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a1, a2, (void *)a3);
    if (!v22) {
      return v23;
    }
    lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error();
    swift_allocError();
    *id v24 = a1;
    v24[1] = (uint64_t)a2;
    swift_bridgeObjectRetain();
    swift_willThrow();

    return a3;
  }
  int v55 = v19;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v59 = v13;
  v25(v16, v12, v13);
  uint64_t v26 = URL.pathExtension.getter();
  uint64_t v28 = v27;
  uint64_t v60 = a1;
  id v29 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v30 = objc_msgSend(v29, sel_pathExtension);

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  uint64_t v57 = v14;
  id v58 = v16;
  id v54 = (void (*)(void, void))a2;
  Swift::String v56 = (void *)a3;
  if (v26 == v31 && v28 == v33)
  {
    swift_bridgeObjectRelease_n();
LABEL_11:
    swift_bridgeObjectRetain();
    uint64_t v35 = v60;
    Swift::String v36 = a2;
    goto LABEL_14;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34) {
    goto LABEL_11;
  }
  uint64_t v72 = v60;
  unint64_t v73 = a2;
  swift_bridgeObjectRetain();
  v37._uint64_t countAndFlagsBits = 46;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  uint64_t v39 = v72;
  uint64_t v38 = v73;
  uint64_t v40 = URL.pathExtension.getter();
  id v42 = v41;
  uint64_t v72 = v39;
  unint64_t v73 = v38;
  swift_bridgeObjectRetain();
  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v72;
  Swift::String v36 = v73;
LABEL_14:
  char v44 = v65;
  char v45 = v66;
  char v46 = v64;
  LOBYTE(v72) = v66;
  BYTE1(v72) = v65;
  BYTE2(v72) = v64;
  unint64_t v73 = v70;
  char v74 = v81;
  uint64_t v75 = v69;
  char v76 = v68;
  uint64_t v47 = v63;
  uint64_t v77 = v67;
  uint64_t v78 = v63;
  a3 = v61;
  int v48 = v62;
  int v79 = v62;
  char v80 = v61;
  unsigned __int8 v49 = v55;
  unsigned __int8 v82 = v55;
  uint64_t v50 = (uint64_t)v71;
  uint64_t v71 = (void *)static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v56, v35, v36, (unsigned __int8 *)&v72, &v82);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    LOBYTE(v72) = v45;
    BYTE1(v72) = v44;
    BYTE2(v72) = v46;
    unint64_t v73 = v70;
    char v74 = v81;
    uint64_t v75 = v69;
    char v76 = v68;
    uint64_t v77 = v67;
    uint64_t v78 = v47;
    int v79 = v48;
    char v80 = a3;
    unsigned __int8 v82 = v49;
    swift_bridgeObjectRetain();
    uint64_t v51 = (uint64_t)v58;
    a3 = specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)((uint64_t)v71, (uint64_t)v58, v60, v54, (unsigned __int8 *)&v72, &v82);
    swift_bridgeObjectRelease();
    RERelease();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v51, v59);
  }
  return a3;
}

uint64_t static AudioFileResource.load(contentsOf:withName:configuration:)(unsigned __int8 *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  unsigned __int8 v5 = *(unsigned char *)(a4 + 1);
  unsigned __int8 v6 = *(unsigned char *)(a4 + 2);
  uint64_t v7 = *(void *)(a4 + 8);
  char v8 = *(unsigned char *)(a4 + 16);
  uint64_t v9 = *(void *)(a4 + 24);
  char v10 = *(unsigned char *)(a4 + 32);
  int v11 = *(_DWORD *)(a4 + 56);
  char v12 = *(unsigned char *)(a4 + 60);
  v17[0] = *(unsigned char *)a4;
  v17[1] = v5;
  _OWORD v17[2] = v6;
  uint64_t v18 = v7;
  char v19 = v8;
  uint64_t v20 = v9;
  char v21 = v10;
  long long v22 = *(_OWORD *)(a4 + 40);
  int v23 = v11;
  char v24 = v12;
  unsigned __int8 v16 = 1;
  uint64_t v13 = specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(a1, a2, a3, v17, &v16);
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(void *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(void *)(inited + 32) = v13;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v13;
}

unint64_t static AudioFileResource.load(named:in:configuration:)(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unsigned __int8 v5 = *(unsigned char *)a4;
  unsigned __int8 v6 = *(unsigned char *)(a4 + 1);
  unsigned __int8 v7 = *(unsigned char *)(a4 + 2);
  uint64_t v8 = *(void *)(a4 + 8);
  char v9 = *(unsigned char *)(a4 + 16);
  uint64_t v10 = *(void *)(a4 + 24);
  char v11 = *(unsigned char *)(a4 + 32);
  long long v12 = *(_OWORD *)(a4 + 40);
  int v13 = *(_DWORD *)(a4 + 56);
  char v14 = *(unsigned char *)(a4 + 60);
  if (a3)
  {
    id v15 = a3;
  }
  else
  {
    int v34 = *(_DWORD *)(a4 + 56);
    long long v22 = v12;
    char v16 = v14;
    id v17 = objc_msgSend(self, sel_mainBundle);
    char v14 = v16;
    int v13 = v34;
    long long v12 = v22;
    id v15 = v17;
  }
  v26[0] = v5;
  v26[1] = v6;
  _OWORD v26[2] = v7;
  uint64_t v27 = v8;
  char v28 = v9;
  uint64_t v29 = v10;
  char v30 = v11;
  long long v31 = v12;
  int v32 = v13;
  char v33 = v14;
  unsigned __int8 v35 = 1;
  id v18 = a3;
  unint64_t v19 = static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(a1, a2, (uint64_t)v15, v26, &v35);

  if (!v25)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(void *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(void *)(inited + 32) = v19;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v19;
}

unint64_t static AudioFileResource.load(named:from:in:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v28 = a3;
  uint64_t v29 = (void *)a4;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = v28;
  int v13 = v29;
  if (a5) {
    id v15 = a5;
  }
  else {
    id v15 = objc_msgSend(self, sel_mainBundle);
  }
  LOWORD(v28) = 1;
  BYTE2(v28) = 0;
  uint64_t v29 = 0;
  char v30 = -1;
  uint64_t v31 = 0;
  char v32 = -1;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v35 = 0;
  char v36 = 1;
  LOBYTE(v37) = 1;
  id v16 = a5;
  unint64_t v17 = static AudioFileResource.loadFromBundle(named:in:configuration:legacyInputMode:)(v14, v13, (uint64_t)v15, (unsigned __int8 *)&v28, (unsigned __int8 *)&v37);
  swift_bridgeObjectRelease();

  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for AudioFileResource();
    *(void *)(inited + 64) = &protocol witness table for AudioFileResource;
    *(void *)(inited + 32) = v17;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.audio);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t type = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = v27;
      *(_DWORD *)uint64_t v22 = 136315906;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2048;
      uint64_t AudioAssetID = REAudioFileAssetGetAudioAssetID();
      swift_release();
      uint64_t v37 = AudioAssetID;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v22 + 22) = 2048;
      uint64_t AssetId = REAssetGetAssetId();
      swift_release();
      uint64_t v37 = AssetId;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v22 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v20, type, "[API/RealityKit] Loading AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu from scene: %s", (uint8_t *)v22, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v27, -1, -1);
      MEMORY[0x22A696500](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
  }
  return v17;
}

void AudioFileResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AudioFileResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

id @nonobjc AVAudioFile.init(forReading:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v15 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = objc_msgSend(v2, sel_initForReading_error_, v4, &v14);

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    char v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

uint64_t specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL();
  __n128 v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 16))(v8, a1, v6);
  id v10 = objc_allocWithZone(MEMORY[0x263EF9380]);
  id v11 = @nonobjc AVAudioFile.init(forReading:)((uint64_t)v8);
  if (v2) {
    return a2;
  }
  int v13 = v11;
  id v14 = objc_msgSend(v11, sel_fileFormat);

  if ((a2 & 0x100000000) != 0)
  {
    specialized static AudioResource.supportedChannelLayoutTag(for:)(v14);
    a2 = v15;

    return a2;
  }
  if (a2 != 1668116578 && a2)
  {
    if (objc_msgSend(v14, sel_channelCount) != (unsigned __int16)a2)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *id v16 = 1;
      swift_willThrow();
    }

    return a2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v45 = a2;
  char v33 = a4[1];
  char v34 = *a4;
  char v32 = a4[2];
  unint64_t v31 = *((void *)a4 + 1);
  char v30 = a4[16];
  uint64_t v29 = *((void *)a4 + 3);
  char v28 = a4[32];
  uint64_t v7 = *((void *)a4 + 6);
  uint64_t v27 = *((void *)a4 + 5);
  uint64_t v35 = *((unsigned int *)a4 + 14);
  unsigned __int8 v8 = a4[60];
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)&v36);
  uint64_t v10 = v39;
  uint64_t v11 = v40;
  __swift_project_boxed_opaque_existential_1(&v36, v39);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if ((URL.isFileURL.getter() & 1) == 0) {
    goto LABEL_6;
  }
  if (URL.pathExtension.getter() == 0xD000000000000011 && v12 == 0x800000022835DED0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (a3)
      {
        URL._bridgeToObjectiveC()(v14);
        uint64_t v20 = v19;
        String.utf8CString.getter();
        uint64_t FileNameAliasAssetDescriptor = REAssetManagerRegisterAndCreateFileNameAliasAssetDescriptor();

        swift_release();
        if (!FileNameAliasAssetDescriptor) {
          goto LABEL_6;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n();
        LOBYTE(v36) = v8;
        int v22 = specialized static AudioFileResource.layoutTag(for:layoutTagOverride:)(a1, v35 | ((unint64_t)v8 << 32));
        if (v4)
        {
          swift_bridgeObjectRelease_n();
          return a1;
        }
        LOBYTE(v36) = v34;
        BYTE1(v36) = v33;
        BYTE2(v36) = v32;
        unint64_t v37 = v31;
        char v38 = v30;
        uint64_t v39 = v29;
        LOBYTE(v40) = v28;
        uint64_t v41 = v27;
        uint64_t v42 = v7;
        int v43 = v22;
        char v44 = 0;
        type metadata accessor for REAudioFileAssetConfigurationWrapper();
        swift_initStackObject();
        REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v36);
        REAudioFileAssetConfigurationSetInputMode();
        URL._bridgeToObjectiveC()(v23);
        uint64_t v25 = v24;
        uint64_t v26 = REAudioFileAssetDescriptorCreateWithURL();
        swift_release();
        swift_bridgeObjectRelease();

        if (!v26) {
          goto LABEL_6;
        }
      }
      REAssetRegistrationOptionsCreate();
      REAssetRegistrationOptionsSetIsMutable();
      a1 = REAssetHandleCreateFromAssetRegistrationOptions();
      RERelease();
      RERelease();
      return a1;
    }
  }
LABEL_6:
  unint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xD00000000000001BLL;
  unint64_t v37 = 0x800000022835DEB0;
  v15._uint64_t countAndFlagsBits = URL.path.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = v36;
  a1 = v37;
  lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
  swift_allocError();
  *uint64_t v17 = v16;
  v17[1] = a1;
  swift_willThrow();
  return a1;
}

uint64_t specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), unsigned __int8 *a5, unsigned __int8 *a6)
{
  unint64_t v37 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v34 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  Swift::String v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v47 = *a5;
  int v16 = a5[1];
  int v32 = a5[2];
  int v33 = v16;
  uint64_t v31 = *((void *)a5 + 1);
  int v30 = a5[16];
  uint64_t v29 = *((void *)a5 + 3);
  int v28 = a5[32];
  uint64_t v17 = *((void *)a5 + 6);
  uint64_t v27 = *((void *)a5 + 5);
  int v26 = *((_DWORD *)a5 + 14);
  int v25 = a5[60];
  int v24 = *a6;
  uint64_t v18 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + 24);
  swift_unownedRetainStrong();
  id v20 = *(id *)(v19 + 32);
  swift_release();
  *Swift::String v15 = v20;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v12);
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v19)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v34, v8);
    v38[0] = v47;
    v38[1] = v33;
    _OWORD v38[2] = v32;
    uint64_t v39 = v31;
    char v40 = v30;
    uint64_t v41 = v29;
    char v42 = v28;
    uint64_t v43 = v27;
    uint64_t v44 = v17;
    int v45 = v26;
    char v46 = v25;
    unsigned __int8 v48 = v24;
    type metadata accessor for AudioFileResource();
    swift_allocObject();
    swift_bridgeObjectRetain();
    int v22 = v37;
    swift_bridgeObjectRetain();
    return AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v35, (uint64_t)v11, v36, v22, v38, &v48);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static AudioFileResource.loadFromURL(contentsOf:withName:configuration:legacyInputMode:)(unsigned __int8 *a1, uint64_t a2, void (*a3)(void, void), unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v51 = a5;
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v50 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  int v45 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a4;
  int v9 = a4[1];
  int v10 = a4[2];
  uint64_t v11 = *((void *)a4 + 1);
  int v12 = a4[16];
  uint64_t v13 = *((void *)a4 + 3);
  int v14 = a4[32];
  uint64_t v16 = *((void *)a4 + 5);
  uint64_t v15 = *((void *)a4 + 6);
  int v17 = *((_DWORD *)a4 + 14);
  int v18 = a4[60];
  int v19 = *v51;
  int v66 = v8;
  unsigned __int8 v55 = v8;
  int v47 = v10;
  int v48 = v9;
  char v56 = v9;
  char v57 = v10;
  uint64_t v49 = v11;
  uint64_t v58 = v11;
  char v59 = v12;
  uint64_t v60 = v13;
  char v61 = v14;
  uint64_t v62 = v16;
  uint64_t v63 = v15;
  int v64 = v17;
  char v65 = v18;
  unsigned __int8 v67 = v19;
  uint64_t v51 = a1;
  uint64_t v20 = v52;
  uint64_t v21 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)((uint64_t)a1, v54, (uint64_t)v53, (char *)&v55);
  if (!v20)
  {
    uint64_t v36 = 0;
    int v37 = v18;
    int v38 = v19;
    int v39 = v17;
    uint64_t v40 = v15;
    uint64_t v41 = v16;
    int v42 = v14;
    uint64_t v43 = v13;
    int v44 = v12;
    uint64_t v52 = v21;
    int v22 = v45;
    uint64_t v23 = v46;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v50 + 16))(v45, v51, v46);
    if (v53)
    {
      uint64_t v35 = v53;
      char v24 = v44;
      char v25 = v42;
      unsigned __int8 v26 = v38;
      char v27 = v37;
      unsigned __int8 v28 = v66;
      uint64_t v15 = (uint64_t)v22;
    }
    else
    {
      uint64_t v15 = (uint64_t)v22;
      uint64_t v54 = URL.lastPathComponent.getter();
      uint64_t v35 = v29;
      char v24 = v44;
      char v25 = v42;
      unsigned __int8 v26 = v38;
      char v27 = v37;
      unsigned __int8 v28 = v66;
    }
    int v30 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    swift_bridgeObjectRetain();
    v30(v15, v23);
    unsigned __int8 v55 = v28;
    char v56 = v48;
    char v57 = v47;
    uint64_t v58 = v49;
    char v59 = v24;
    uint64_t v60 = v43;
    char v61 = v25;
    uint64_t v62 = v41;
    uint64_t v63 = v40;
    int v64 = v39;
    char v65 = v27;
    unsigned __int8 v67 = v26;
    uint64_t v31 = v36;
    uint64_t v32 = specialized static AudioFileResource.load(assetRef:url:resourceName:configuration:legacyInputMode:)(v52, (uint64_t)v51, v54, v35, &v55, &v67);
    if (!v31) {
      uint64_t v15 = v32;
    }
    swift_bridgeObjectRelease();
    RERelease();
  }
  return v15;
}

uint64_t specialized Array.append(_:)()
{
  MEMORY[0x22A688E10]();
  if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();

  return specialized Array._endMutation()();
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation32__RKAudioSpatialModeSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c101Kit29__RKEntityActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k19C0A10Foundation32__efgH10USDOXEfU2_Tf1cn_n(char a1)
{
  unint64_t v1 = 0xE700000000000000;
  uint64_t v2 = 0x6C616974617073;
  id v3 = 0;
  switch(a1)
  {
    case 1:
      unint64_t v1 = 0xEA00000000006C61;
      uint64_t v2 = 0x69746170536E6F6ELL;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x746E6569626D61;
      goto LABEL_4;
    case 3:
      return v3;
    default:
LABEL_4:
      id v4 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v5 = (void *)MEMORY[0x22A688A50](v2, v1);
      swift_bridgeObjectRelease();
      id v3 = objc_msgSend(v4, sel_initWithString_, v5);

      return v3;
  }
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation42__RKEntityActionMultiplePerformBehaviorUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8l23C0A10Foundation02__cD26ghI10USDOXEfU4_Tf1cn_n(char a1)
{
  unint64_t v1 = 0xE600000000000000;
  uint64_t v2 = 0x65726F6E6769;
  id v3 = 0;
  switch(a1)
  {
    case 1:
      unint64_t v1 = 0xE500000000000000;
      uint64_t v2 = 0x776F6C6C61;
      goto LABEL_4;
    case 2:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1886352499;
      goto LABEL_4;
    case 3:
      return v3;
    default:
LABEL_4:
      id v4 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v5 = (void *)MEMORY[0x22A688A50](v2, v1);
      swift_bridgeObjectRelease();
      id v3 = objc_msgSend(v4, sel_initWithString_, v5);

      return v3;
  }
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation26__RKEntityMoveSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__e86ActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8j22C0A10Foundation02__C16fG11USDOXEfU20_Tf1cn_n(char a1)
{
  if (a1 == 2) {
    return 0;
  }
  if (a1) {
    uint64_t v2 = 0x65766974616C6572;
  }
  else {
    uint64_t v2 = 0x6574756C6F736261;
  }
  id v3 = objc_allocWithZone(MEMORY[0x263F83F08]);
  id v4 = (void *)MEMORY[0x22A688A50](v2, 0xE800000000000000);
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v3, sel_initWithString_, v4);

  return v1;
}

id _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(char a1)
{
  if (a1 == 10) {
    return 0;
  }
  uint64_t v2 = __RKEntityActionVisibilityTypeUSD.rawValue.getter(a1);
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone(MEMORY[0x263F83F08]);
  __n128 v6 = (void *)MEMORY[0x22A688A50](v2, v4);
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v5, sel_initWithString_, v6);

  return v1;
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t *a1@<X0>, uint64_t (*a2)(void, __n128)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void *a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a1);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v5;
  unint64_t v15 = v5[1];
  unint64_t v17 = *(void *)(*v5 + 16);
  if (v15 == v17)
  {
    int v18 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
    v18(a5, 1, 1, v10, v12);
  }
  else
  {
    if (v15 >= v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = v11;
      uint64_t v19 = *(void *)(a2(0, v12) - 8);
      uint64_t v20 = v16
          + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
          + *(void *)(v19 + 72) * v15;
      v5[1] = v15 + 1;
      uint64_t v21 = (uint64_t)&v14[*(int *)(v10 + 48)];
      uint64_t v22 = v5[2];
      _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v20, v21, a3);
      if (!__OFADD__(v22, 1))
      {
        _OWORD v5[2] = v22 + 1;
        uint64_t v23 = (uint64_t)a5 + *(int *)(v10 + 48);
        *a5 = v22;
        outlined init with take of __RKEntityHideActionArguments(v21, v23, a4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(a5, 0, 1, v10);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A689930](i - 4, a1) : *(id *)(a1 + 8 * i);
      id v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel_path);

      if (v7)
      {
        MEMORY[0x22A688E10]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

void setInfoId(_:on:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*MEMORY[0x263F83FB0];
  id v7 = objc_allocWithZone(MEMORY[0x263F83F08]);
  swift_bridgeObjectRetain();
  int v8 = (void *)MEMORY[0x22A688A50](a1, a2);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithString_, v8);

  uint64_t v10 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
  id v11 = objc_msgSend(a3, sel_newPropertyWithName_type_role_, v10, v6, 0);

  if (v11)
  {
    if (v9)
    {
      objc_msgSend(v11, sel_setTokenValue_, v9);

      return;
    }
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(void *)(v15 + 32) = 0;
    id v9 = v11;
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_228345720;
    *(void *)(v12 + 16) = v6;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = a3;
    id v13 = v6;
    id v14 = a3;
  }
  swift_willThrow();
}

id USKToken.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v5 = (void *)MEMORY[0x22A688A50](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithString_, v5);

  return v6;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __USDEncoder.resolveResourcePath(path:)(Swift::String path)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v7 = (char *)&v27 - v6;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v27 - v12;
  id v14 = *(void (**)(char *))v1;
  if (!*(void *)v1) {
    goto LABEL_4;
  }
  uint64_t v29 = v11;
  uint64_t v15 = *(void **)(v1 + 8);
  swift_retain();
  URL.init(string:)();
  uint64_t v16 = v9 + 48;
  unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v17(v7, 1, v8) == 1)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
LABEL_4:
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  uint64_t v30 = v2;
  unsigned __int8 v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v28(v13, v7, v8);
  uint64_t v18 = (uint64_t)v31;
  uint64_t v19 = v30;
  v14(v13);
  uint64_t v30 = v19;
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
  }
  else
  {
    char v27 = v15;
    uint64_t v20 = v18;
    if (v17((char *)v18, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
      outlined destroy of BodyTrackingComponent?(v18, &demangling cache variable for type metadata for URL?);
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v21 = v29;
      v28(v29, (char *)v20, v8);
      uint64_t v16 = URL.path.getter();
      uint64_t v15 = v22;
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v23((uint64_t)v21, v8);
      v23((uint64_t)v13, v8);
    }
  }
LABEL_10:
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  result.value._object = v25;
  result.value._uint64_t countAndFlagsBits = v24;
  return result;
}

void __RKEntityInteractionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityInteractionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityInteractionSpecification.encode(to:at:));
  }
  return result;
}

id __RKEntityInteractionSpecification.encode(to:at:)(uint64_t a1, void *a2)
{
  uint64_t v97 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v97);
  uint64_t v98 = (uint64_t)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (uint64_t *)((char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t)&v96 - v9;
  uint64_t v100 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v100);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v96 - v14);
  uint64_t v16 = *(void *)a1;
  unint64_t v17 = *(void **)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 24);
  id v19 = *(id *)(a1 + 16);
  uint64_t v107 = v16;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v16);
  id v20 = v19;
  swift_retain();
  uint64_t v21 = (void *)MEMORY[0x22A688A50](0xD000000000000014, 0x800000022835E190);
  id v106 = objc_msgSend(v20, sel_newNodeAtPath_type_, a2, v21);
  if (!v106)
  {
    lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
    swift_allocError();
    *uint64_t v31 = a2;
    v31[1] = v21;
    id v32 = a2;
    swift_willThrow();

    outlined consume of (@escaping @callee_guaranteed () -> ())?(v107);
    swift_release();

    return v106;
  }
  int v102 = (__objc2_class **)a2;
  id v103 = v20;
  int v104 = v17;
  uint64_t v105 = v18;

  _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v101, (uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    USKObjectPath.appendingPathComponent(_:)(0x5272656767697254, (void *)0xEB00000000746F6FLL);
    uint64_t v35 = v34;
    uint64_t v36 = v107;
    id v37 = v103;
    uint64_t v112 = v107;
    uint64_t v113 = v104;
    id v114 = v103;
    uint64_t v115 = v105;
    uint64_t v38 = (uint64_t)v99;
    id v39 = __RKEntityTriggerSpecification.encode(to:at:)((uint64_t)&v112, v34);
    if (!v38)
    {
      int v48 = v39;
      uint64_t v99 = v15;
      uint64_t v49 = (void *)*MEMORY[0x263F83F90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_22831E4E0;
      *(void *)(v50 + 32) = objc_msgSend(v48, sel_path);
      uint64_t v112 = v50;
      specialized Array._endMutation()();
      uint64_t v51 = (void *)MEMORY[0x22A688A50](0x7372656767697274, 0xE800000000000000);
      id v52 = objc_msgSend(v106, sel_newPropertyWithName_type_role_, v51, v49, 0);

      if (!v52)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v80 = xmmword_228345730;
        *(void *)(v80 + 16) = v49;
        *(void *)(v80 + 24) = 0;
        id v81 = v106;
        *(void *)(v80 + 32) = v106;
        id v82 = v81;
        id v83 = v49;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v36);
        swift_bridgeObjectRelease();

        swift_release();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v99, type metadata accessor for __RKEntityTriggerSpecification);
        return v81;
      }
      uint64_t v100 = (uint64_t)v49;
      uint64_t v53 = 0;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      id v54 = v52;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v54, sel_setObjectPathArray_, isa);

      swift_bridgeObjectRelease_n();
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v99, type metadata accessor for __RKEntityTriggerSpecification);
      id v33 = v106;
LABEL_33:
      USKObjectPath.appendingPathComponent(_:)(0x6F526E6F69746341, (void *)0xEA0000000000746FLL);
      uint64_t v62 = v61;
      uint64_t v63 = v101 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 20);
      uint64_t v64 = v107;
      uint64_t v112 = v107;
      uint64_t v113 = v104;
      id v114 = v37;
      uint64_t v115 = v105;
      char v65 = __RKEntityActionSpecification.encode(to:at:)(&v112, v62);
      if (v53)
      {
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v64);

        swift_release();
        return v33;
      }
      int v66 = v65;
      int v102 = v62;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_22831E4E0;
      *(void *)(v67 + 32) = objc_msgSend(v66, sel_path);
      uint64_t v112 = v67;
      specialized Array._endMutation()();
      int v68 = v33;
      uint64_t v69 = (void *)MEMORY[0x22A688A50](0x736E6F69746361, 0xE700000000000000);
      int v70 = (void *)v100;
      id v71 = objc_msgSend(v68, sel_newPropertyWithName_type_role_, v69, v100, 0);

      if (!v71)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v84 = xmmword_228345750;
        *(void *)(v84 + 16) = v70;
        *(void *)(v84 + 24) = 0;
        *(void *)(v84 + 32) = v68;
        id v85 = v68;
        id v86 = v70;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v107);
        swift_bridgeObjectRelease();

        swift_release();
        id v87 = v103;

        return v68;
      }
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      id v72 = v71;
      Class v73 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v72, sel_setObjectPathArray_, v73);
      swift_bridgeObjectRelease_n();

      uint64_t v74 = v98;
      _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v63, v98, type metadata accessor for __RKEntityActionSpecification);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        char v75 = *(unsigned char *)(v74 + 16);
        swift_bridgeObjectRelease();
        uint64_t v76 = v75 & 1;
      }
      else
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v74, type metadata accessor for __RKEntityActionSpecification);
        uint64_t v76 = 0;
      }
      uint64_t v88 = v102;
      uint64_t v89 = (void *)*MEMORY[0x263F83F18];
      uint64_t v90 = (void *)MEMORY[0x22A688A50](0x766973756C637865, 0xE900000000000065);
      id v81 = v106;
      id v91 = objc_msgSend(v106, (SEL)&selRef_copyWithZone_ + 5, v90, v89, 0);

      if (v91)
      {
        objc_msgSend(v91, sel_setBoolValue_, v76);

        id v92 = v103;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v107);
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v93 = xmmword_228345740;
        *(void *)(v93 + 16) = v89;
        *(void *)(v93 + 24) = 0;
        *(void *)(v93 + 32) = v81;
        id v94 = v81;
        id v95 = v89;
        swift_willThrow();
        id v92 = v103;

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v107);
      }
      swift_release();

      return v81;
    }
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v36);

    id v33 = v106;
    swift_release();

    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
    return v33;
  }
  uint64_t v22 = *v15;
  unint64_t v116 = MEMORY[0x263F8EE78];
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = v22;
  uint64_t v23 = (uint64_t)v99;
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification), (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, v7);
    outlined init with take of Transform?((uint64_t)v7, v10, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification)?);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityTriggerSpecification));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v10, 1, v24) == 1) {
      break;
    }
    uint64_t v25 = *(void *)v10;
    outlined init with take of __RKEntityHideActionArguments(v10 + *(int *)(v24 + 48), (uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
    id v26 = objc_msgSend(v106, sel_path);
    uint64_t v112 = 0x5F72656767697254;
    uint64_t v113 = (void *)0xE800000000000000;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    char v27 = v26;
    uint64_t v108 = v25 + 1;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    USKObjectPath.appendingPathComponent(_:)(v112, v113);
    uint64_t v30 = v29;

    swift_bridgeObjectRelease();
    uint64_t v112 = v107;
    uint64_t v113 = v104;
    id v114 = v103;
    uint64_t v115 = v105;
    __RKEntityTriggerSpecification.encode(to:at:)((uint64_t)&v112, v30);
    if (v23)
    {
      id v33 = v106;

      id v47 = v103;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v107);
      swift_release();

      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    MEMORY[0x22A688E10]();
    if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v116;
  uint64_t v112 = MEMORY[0x263F8EE78];
  if (!(v116 >> 62))
  {
    uint64_t v40 = *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain_n();
    goto LABEL_15;
  }
LABEL_49:
  swift_bridgeObjectRetain_n();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v40 = (uint64_t)result;
LABEL_15:
  id v33 = v106;
  uint64_t v42 = v107;
  id v37 = v103;
  if (!v40)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    char v56 = (void *)*MEMORY[0x263F83F90];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v57 = (void *)MEMORY[0x22A688A50](0x7372656767697274, 0xE800000000000000);
    id v58 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v57, v56, 0);

    if (!v58)
    {
      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
      swift_allocError();
      *(_OWORD *)uint64_t v77 = xmmword_228345730;
      *(void *)(v77 + 16) = v56;
      *(void *)(v77 + 24) = 0;
      *(void *)(v77 + 32) = v33;
      id v78 = v56;
      id v79 = v33;
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v42);
      swift_bridgeObjectRelease();

      swift_release();
      return v33;
    }
    uint64_t v100 = (uint64_t)v56;
    uint64_t v53 = v23;
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    swift_bridgeObjectRetain();
    id v59 = v58;
    Class v60 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v59, sel_setObjectPathArray_, v60);
    swift_bridgeObjectRelease_n();

    goto LABEL_33;
  }
  if (v40 >= 1)
  {
    for (uint64_t i = 0; i != v40; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        id v44 = (id)MEMORY[0x22A689930](i, v10);
      }
      else {
        id v44 = *(id *)(v10 + 8 * i + 32);
      }
      int v45 = v44;
      id v46 = objc_msgSend(v44, sel_path);

      if (v46)
      {
        MEMORY[0x22A688E10]();
        if (*(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    id v33 = v106;
    uint64_t v42 = v107;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityInteractionSpecification.encode(to:at:));
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityInteractionSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityInteractionSpecification.encode(to:at:));
}

id __RKEntityTriggerSpecification.encode(to:at:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v226 = v6;
  uint64_t v227 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v219 = (char *)&v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  float v220 = (char *)&v217 - v10;
  MEMORY[0x270FA5388](v11);
  float v221 = (char *)&v217 - v12;
  uint64_t v13 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v217 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 24);
  id v19 = *(id *)(a1 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v16);
  id v20 = v19;
  swift_retain();
  uint64_t v21 = (void *)MEMORY[0x22A688A50](0xD000000000000013, 0x800000022835E0F0);
  id v228 = objc_msgSend(v20, sel_newNodeAtPath_type_, a2, v21);
  if (!v228)
  {
    lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
    swift_allocError();
    void *v54 = a2;
    v54[1] = v21;
    id v55 = a2;
    swift_willThrow();

    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    swift_release();

    return v228;
  }
  id v224 = v20;
  uint64_t v225 = v16;
  uint64_t v222 = v17;
  uint64_t v223 = v18;

  _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v3, (uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      float v22 = *(float *)((char *)v15
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType))
                              + 48));
      uint64_t v24 = v226;
      uint64_t v23 = v227;
      uint64_t v25 = (uint64_t)v220;
      (*(void (**)(char *, uint64_t *, uint64_t))(v227 + 32))(v220, v15, v226);
      id v26 = v224;
      uint64_t v27 = v225;
      uint64_t v229 = v225;
      uint64_t v230 = v222;
      id v231 = v224;
      uint64_t v232 = v223;
      Swift::String v28 = (char *)__USDExportContext.pathTo(_:)(v25);
      if (!v28)
      {
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *uint64_t v162 = 0;
        swift_willThrow();
        id v33 = v228;

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
        return v33;
      }
      float v221 = v28;
      uint64_t v29 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v30 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      uint64_t v31 = (void *)MEMORY[0x22A688A50](0xD000000000000019, 0x800000022835E150);
      id v32 = objc_msgSend(v30, sel_initWithString_, v31);

      id v33 = v228;
      if (!v32) {
        goto LABEL_74;
      }
      id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v32);

      objc_msgSend(v33, sel_setMetadataWithKey_value_, v29, v34);
      uint64_t v35 = (void *)*MEMORY[0x263F83FB0];
      id v36 = objc_allocWithZone(MEMORY[0x263F83F08]);
      id v37 = (void *)MEMORY[0x22A688A50](0xD000000000000011, 0x800000022834D170);
      id v38 = objc_msgSend(v36, sel_initWithString_, v37);

      id v39 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
      id v40 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v39, v35, 0);

      if (v40)
      {
        if (v38)
        {
          objc_msgSend(v40, sel_setTokenValue_, v38);

          uint64_t v41 = (void *)*MEMORY[0x263F83F90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v42 = swift_allocObject();
          *(_OWORD *)(v42 + 16) = xmmword_22831E4E0;
          uint64_t v43 = v221;
          *(void *)(v42 + 32) = v221;
          uint64_t v229 = v42;
          specialized Array._endMutation()();
          id v44 = v43;
          int v45 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
          id v46 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v45, v41, 0);

          if (!v46)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)uint64_t v196 = xmmword_228345790;
            *(void *)(v196 + 16) = v41;
            *(void *)(v196 + 24) = 0;
            *(void *)(v196 + 32) = v33;
            id v197 = v33;
            id v198 = v41;
            swift_willThrow();

            id v199 = v224;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
            swift_bridgeObjectRelease();
            swift_release();

            (*(void (**)(char *, uint64_t))(v227 + 8))(v220, v226);
            return v33;
          }
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          id v47 = v46;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v47, sel_setObjectPathArray_, isa);
          swift_bridgeObjectRelease_n();

          uint64_t v49 = (void *)*MEMORY[0x263F83F20];
          uint64_t v50 = (void *)MEMORY[0x22A688A50](0x65636E6174736964, 0xE800000000000000);
          id v51 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v50, v49, 0);

          uint64_t v52 = v225;
          if (v51)
          {
            objc_msgSend(v51, sel_setDoubleValue_, v22);

            id v53 = v224;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v52);

            swift_release();
            (*(void (**)(char *, uint64_t))(v227 + 8))(v220, v226);
            return v33;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)uint64_t v209 = xmmword_2283457A0;
          *(void *)(v209 + 16) = v49;
          *(void *)(v209 + 24) = 0;
          *(void *)(v209 + 32) = v33;
          id v210 = v33;
          id v211 = v49;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v227 + 8))(v220, v226);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v52);

LABEL_59:
          swift_release();
          id v191 = v224;

          return v33;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v185 = 0u;
        *(_OWORD *)(v185 + 16) = 0u;
        *(void *)(v185 + 32) = 0;
        swift_willThrow();
        id v38 = v40;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v173 = xmmword_228345720;
        *(void *)(v173 + 16) = v35;
        *(void *)(v173 + 24) = 0;
        *(void *)(v173 + 32) = v33;
        id v174 = v33;
        id v175 = v35;
        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v227 + 8))(v220, v226);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);

      goto LABEL_59;
    case 1u:
      uint64_t v57 = v226;
      uint64_t v56 = v227;
      uint64_t v58 = (uint64_t)v219;
      (*(void (**)(char *, uint64_t *, uint64_t))(v227 + 32))(v219, v15, v226);
      id v59 = v224;
      uint64_t v60 = v225;
      uint64_t v229 = v225;
      uint64_t v230 = v222;
      id v231 = v224;
      uint64_t v232 = v223;
      uint64_t v61 = __USDExportContext.pathTo(_:)(v58);
      if (!v61)
      {
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *uint64_t v163 = 0;
        swift_willThrow();
        id v33 = v228;

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v60);
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
        return v33;
      }
      uint64_t v62 = (void *)v61;
      uint64_t v63 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v64 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      char v65 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835E110);
      id v66 = objc_msgSend(v64, sel_initWithString_, v65);

      id v33 = v228;
      if (!v66) {
        goto LABEL_75;
      }
      id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v66);

      objc_msgSend(v33, sel_setMetadataWithKey_value_, v63, v67);
      int v68 = (void *)*MEMORY[0x263F83FB0];
      id v69 = objc_allocWithZone(MEMORY[0x263F83F08]);
      int v70 = (void *)MEMORY[0x22A688A50](0x7574736547706154, 0xEA00000000006572);
      id v71 = objc_msgSend(v69, sel_initWithString_, v70);

      id v72 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
      id v73 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v72, v68, 0);

      if (v73)
      {
        if (v71)
        {
          objc_msgSend(v73, sel_setTokenValue_, v71);

          uint64_t v74 = (void *)*MEMORY[0x263F83F90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v75 = swift_allocObject();
          *(_OWORD *)(v75 + 16) = xmmword_22831E4E0;
          *(void *)(v75 + 32) = v62;
          uint64_t v229 = v75;
          specialized Array._endMutation()();
          id v76 = v62;
          uint64_t v77 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
          id v78 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v77, v74, 0);

          if (v78)
          {
            type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
            swift_bridgeObjectRetain();
            id v79 = v78;
            Class v80 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v79, sel_setObjectPathArray_, v80);

            id v81 = v224;
            swift_bridgeObjectRelease();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
            swift_bridgeObjectRelease();

            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v58, v226);
            return v33;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          int v117 = (char *)v58;
          swift_allocError();
          *(_OWORD *)uint64_t v200 = xmmword_228345790;
          *(void *)(v200 + 16) = v74;
          *(void *)(v200 + 24) = 0;
          *(void *)(v200 + 32) = v33;
          id v201 = v33;
          id v202 = v74;
          swift_willThrow();

          id v203 = v224;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
          swift_bridgeObjectRelease();
          swift_release();

LABEL_71:
          (*(void (**)(char *, uint64_t))(v227 + 8))(v117, v226);
          return v33;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v186 = 0u;
        *(_OWORD *)(v186 + 16) = 0u;
        *(void *)(v186 + 32) = 0;
        swift_willThrow();
        id v71 = v73;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v179 = xmmword_228345720;
        *(void *)(v179 + 16) = v68;
        *(void *)(v179 + 24) = 0;
        *(void *)(v179 + 32) = v33;
        id v180 = v33;
        id v181 = v68;
        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v227 + 8))(v219, v226);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);

      goto LABEL_59;
    case 2u:
      uint64_t v82 = *(uint64_t *)((char *)v15
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]))
                                + 48));
      swift_bridgeObjectRelease();
      uint64_t v84 = v226;
      uint64_t v83 = v227;
      uint64_t v85 = (uint64_t)v221;
      (*(void (**)(char *, uint64_t *, uint64_t))(v227 + 32))(v221, v15, v226);
      id v87 = v224;
      uint64_t v86 = v225;
      uint64_t v88 = v222;
      uint64_t v229 = v225;
      uint64_t v230 = v222;
      id v231 = v224;
      uint64_t v232 = v223;
      uint64_t v89 = __USDExportContext.pathTo(_:)(v85);
      if (!v89)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        swift_allocError();
        *uint64_t v164 = 0;
        swift_willThrow();
        id v165 = v228;

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v86);
        swift_release();

        uint64_t v166 = v85;
        id v33 = v165;
        (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v166, v84);
        return v33;
      }
      uint64_t v90 = (void *)v89;
      uint64_t v91 = v82;
      id v92 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v93 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      id v94 = (void *)MEMORY[0x22A688A50](0x6564696C6C6F432FLL, 0xEF72656767697254);
      id v95 = objc_msgSend(v93, sel_initWithString_, v94);

      if (!v95) {
        goto LABEL_76;
      }
      id v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v95);

      id v33 = v228;
      objc_msgSend(v228, sel_setMetadataWithKey_value_, v92, v96);

      uint64_t v97 = (void *)*MEMORY[0x263F83FB0];
      id v98 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v99 = (void *)MEMORY[0x22A688A50](0x6564696C6C6F43, 0xE700000000000000);
      id v100 = objc_msgSend(v98, sel_initWithString_, v99);

      uint64_t v101 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
      id v102 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v101, v97, 0);

      if (v102)
      {
        if (v100)
        {
          objc_msgSend(v102, sel_setTokenValue_, v100);

          id v103 = (void *)*MEMORY[0x263F83F90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v104 = swift_allocObject();
          *(_OWORD *)(v104 + 16) = xmmword_22831E4E0;
          *(void *)(v104 + 32) = v90;
          uint64_t v229 = v104;
          specialized Array._endMutation()();
          id v105 = v90;
          id v106 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
          id v107 = v228;
          id v108 = objc_msgSend(v228, sel_newPropertyWithName_type_role_, v106, v103, 0);

          if (!v108)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            swift_allocError();
            *(_OWORD *)uint64_t v204 = xmmword_228345790;
            *(void *)(v204 + 16) = v103;
            *(void *)(v204 + 24) = 0;
            *(void *)(v204 + 32) = v107;
            id v205 = v107;
            id v206 = v103;
            swift_willThrow();

            id v207 = v224;
            swift_bridgeObjectRelease();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
            swift_bridgeObjectRelease();
            swift_release();

            (*(void (**)(char *, uint64_t))(v227 + 8))(v221, v226);
            return v107;
          }
          uint64_t v109 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          id v110 = v108;
          float v220 = (char *)v109;
          Class v111 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v110, sel_setObjectPathArray_, v111);
          swift_bridgeObjectRelease_n();

          uint64_t v112 = v225;
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v225);
          id v113 = v224;
          uint64_t v114 = v223;
          swift_retain();
          uint64_t v115 = v218;
          unint64_t v116 = specialized Sequence.compactMap<A>(_:)(v91, v112, v88, (uint64_t)v113, v114);
          uint64_t v218 = v115;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v112);
          swift_bridgeObjectRelease();
          swift_release();

          int v117 = v221;
          if (v116 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v215 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v215) {
              goto LABEL_24;
            }
          }
          else if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_24:
            int v118 = (void *)MEMORY[0x22A688A50](0x726564696C6C6F63, 0xE900000000000073);
            id v119 = v228;
            id v120 = objc_msgSend(v228, sel_newPropertyWithName_type_role_, v118, v103, 0);

            uint64_t v121 = v225;
            if (v120)
            {
              swift_bridgeObjectRetain();
              id v122 = v120;
              Class v123 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v122, sel_setObjectPathArray_, v123);

              swift_bridgeObjectRelease();
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v121);
              swift_bridgeObjectRelease();
            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              swift_allocError();
              *(_OWORD *)uint64_t v212 = xmmword_228345780;
              *(void *)(v212 + 16) = v103;
              *(void *)(v212 + 24) = 0;
              *(void *)(v212 + 32) = v119;
              id v213 = v119;
              id v214 = v103;
              swift_willThrow();

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v121);
              swift_bridgeObjectRelease();
            }
            swift_release();

            (*(void (**)(char *, uint64_t))(v227 + 8))(v221, v226);
            return v119;
          }
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          swift_allocError();
          *uint64_t v216 = 0;
          swift_willThrow();

          id v33 = v228;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
          swift_release();

          goto LABEL_71;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v187 = 0u;
        *(_OWORD *)(v187 + 16) = 0u;
        *(void *)(v187 + 32) = 0;
        swift_willThrow();
        id v100 = v102;
        id v33 = v228;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v176 = xmmword_228345720;
        *(void *)(v176 + 16) = v97;
        *(void *)(v176 + 24) = 0;
        *(void *)(v176 + 32) = v33;
        id v177 = v97;
        id v178 = v33;
        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v227 + 8))(v221, v226);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
      swift_bridgeObjectRelease();

      goto LABEL_59;
    case 3u:
      uint64_t v125 = *v15;
      uint64_t v124 = v15[1];
      char v126 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v127 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      int v128 = (void *)MEMORY[0x22A688A50](0xD000000000000014, 0x800000022835E170);
      id v129 = objc_msgSend(v127, sel_initWithString_, v128);

      if (!v129)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        JUMPOUT(0x228226E70);
      }
      id v130 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v129);

      id v33 = v228;
      objc_msgSend(v228, sel_setMetadataWithKey_value_, v126, v130);

      uint64_t v131 = (void *)*MEMORY[0x263F83FB0];
      id v132 = objc_allocWithZone(MEMORY[0x263F83F08]);
      float v133 = (void *)MEMORY[0x22A688A50](0x6163696669746F4ELL, 0xEC0000006E6F6974);
      id v134 = objc_msgSend(v132, sel_initWithString_, v133);

      uint64_t v135 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
      id v136 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v135, v131, 0);

      if (v136)
      {
        if (v134)
        {
          objc_msgSend(v136, sel_setTokenValue_, v134);

          int v137 = (void *)*MEMORY[0x263F83FA8];
          uint64_t v138 = (void *)MEMORY[0x22A688A50](0x696669746E656469, 0xEA00000000007265);
          id v139 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v138, v137, 0);

          if (v139)
          {
            swift_bridgeObjectRetain();
            id v140 = v139;
            float v141 = (void *)MEMORY[0x22A688A50](v125, v124);
            objc_msgSend(v140, sel_setStringValue_, v141);
            id v142 = v224;

            swift_bridgeObjectRelease();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
            swift_bridgeObjectRelease();

            swift_release();
            return v33;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)uint64_t v188 = xmmword_228345770;
          *(void *)(v188 + 16) = v137;
          *(void *)(v188 + 24) = 0;
          *(void *)(v188 + 32) = v33;
          id v189 = v33;
          id v190 = v137;
          swift_willThrow();
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
          swift_bridgeObjectRelease();

          goto LABEL_59;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v182 = 0u;
        *(_OWORD *)(v182 + 16) = 0u;
        *(void *)(v182 + 32) = 0;
        swift_willThrow();
        id v134 = v136;
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v167 = xmmword_228345720;
        *(void *)(v167 + 16) = v131;
        *(void *)(v167 + 24) = 0;
        *(void *)(v167 + 32) = v33;
        id v168 = v33;
        id v169 = v131;
        swift_willThrow();
      }

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
      swift_release();
      id v183 = v224;

      swift_bridgeObjectRelease();
LABEL_51:

      return v33;
    case 0xCu:
      char v145 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v146 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      int v147 = (void *)MEMORY[0x22A688A50](0xD000000000000017, 0x800000022835E130);
      id v148 = objc_msgSend(v146, sel_initWithString_, v147);

      if (!v148) {
        goto LABEL_73;
      }
      id v149 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v148);

      id v33 = v228;
      objc_msgSend(v228, sel_setMetadataWithKey_value_, v145, v149);

      uint64_t v150 = (void *)*MEMORY[0x263F83FB0];
      id v151 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v152 = (void *)MEMORY[0x22A688A50](0x617254656E656353, 0xEF6E6F697469736ELL);
      id v153 = objc_msgSend(v151, sel_initWithString_, v152);

      uint64_t v154 = (void *)MEMORY[0x22A688A50](0x64693A6F666E69, 0xE700000000000000);
      id v155 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v154, v150, 0);

      if (!v155)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v170 = xmmword_228345720;
        *(void *)(v170 + 16) = v150;
        *(void *)(v170 + 24) = 0;
        *(void *)(v170 + 32) = v33;
        id v171 = v33;
        id v172 = v150;
        swift_willThrow();
LABEL_50:

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
        swift_release();
        id v183 = v224;

        goto LABEL_51;
      }
      if (!v153)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v184 = 0u;
        *(_OWORD *)(v184 + 16) = 0u;
        *(void *)(v184 + 32) = 0;
        swift_willThrow();
        id v153 = v155;
        goto LABEL_50;
      }
      objc_msgSend(v155, sel_setTokenValue_, v153);

      id v156 = objc_allocWithZone(MEMORY[0x263F83F08]);
      char v157 = (void *)MEMORY[0x22A688A50](0x7265746E65, 0xE500000000000000);
      id v158 = objc_msgSend(v156, sel_initWithString_, v157);

      uint64_t v159 = (void *)MEMORY[0x22A688A50](1701869940, 0xE400000000000000);
      id v160 = objc_msgSend(v33, sel_newPropertyWithName_type_role_, v159, v150, 0);

      if (v160)
      {
        id v161 = v224;
        if (v158)
        {
          objc_msgSend(v160, sel_setTokenValue_, v158);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
          swift_release();

          return v33;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v208 = 0u;
        *(_OWORD *)(v208 + 16) = 0u;
        *(void *)(v208 + 32) = 0;
        swift_willThrow();
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v193 = xmmword_228345760;
        *(void *)(v193 + 16) = v150;
        *(void *)(v193 + 24) = 0;
        *(void *)(v193 + 32) = v33;
        id v194 = v33;
        id v195 = v150;
        swift_willThrow();
        id v161 = v224;
      }
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
      swift_release();

      return v33;
    default:
      lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
      swift_allocError();
      *float v143 = 1;
      swift_willThrow();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v225);
      id v33 = v228;

      swift_release();
      id v144 = v224;

      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
      return v33;
  }
}

__objc2_class **__RKEntityActionSpecification.encode(to:at:)(uint64_t *a1, __objc2_class **a2)
{
  v1072 = a2;
  uint64_t v1042 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v1042);
  v1061 = (char *)&v1032 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1041 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v1041);
  v1060 = (unsigned __int8 *)&v1032 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v1034 = (uint64_t)&v1032 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1044 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v1044);
  v1059 = (unsigned __int8 *)&v1032 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started);
  v1048 = (char *)&v1032 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v1049 = (uint64_t)&v1032 - v10;
  MEMORY[0x270FA5388](v11);
  v1069.n128_u64[0] = (unint64_t)&v1032 - v12;
  uint64_t v1040 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v1040);
  v1058 = (unsigned __int8 *)&v1032 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1045 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v1045);
  v1066 = (char *)&v1032 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1038 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v1038);
  v1065 = (char *)&v1032 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1039 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v1039);
  v1063 = (char *)&v1032 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1037 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v1037);
  v1064 = (char *)&v1032 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
  MEMORY[0x270FA5388](v18 - 8);
  v1036 = (char *)&v1032 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v1051 = (__objc2_class ***)((char *)&v1032 - v21);
  uint64_t v1043 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v1043);
  v1062 = (char *)&v1032 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1046 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v1046);
  v1057 = (char *)&v1032 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1067 = type metadata accessor for UUID();
  uint64_t v1056 = *(void *)(v1067 - 8);
  MEMORY[0x270FA5388](v1067);
  v1033 = (char *)&v1032 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v1032 - v26;
  MEMORY[0x270FA5388](v28);
  id v30 = (char *)&v1032 - v29;
  v1055 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v1055);
  uint64_t v1035 = (uint64_t)&v1032 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v1047 = (char *)&v1032 - v33;
  MEMORY[0x270FA5388](v34);
  v1068.n128_u64[0] = (unint64_t)&v1032 - v35;
  uint64_t v36 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v1053 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  id v38 = (char *)&v1032 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v1052 = (uint64_t)&v1032 - v40;
  MEMORY[0x270FA5388](v41);
  v1050 = (char *)&v1032 - v42;
  MEMORY[0x270FA5388](v43);
  object = (__objc2_class **)((char *)&v1032 - v44);
  MEMORY[0x270FA5388](v46);
  int v48 = (char *)&v1032 - v47;
  MEMORY[0x270FA5388](v49);
  id v51 = (unsigned __int8 *)&v1032 - v50;
  unint64_t v1075 = *a1;
  uint64_t v1073 = a1[1];
  uint64_t v52 = (__objc2_class **)a1[2];
  uint64_t v53 = a1[3];
  v1071 = v52;
  _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v1074, (uint64_t)&v1032 - v50, type metadata accessor for __RKEntityActionSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      id v54 = (__objc2_class **)v53;
      uint64_t v55 = (uint64_t)v51;
      unint64_t v56 = v1068.n128_u64[0];
      outlined init with take of __RKEntityHideActionArguments(v55, v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v57 = v1055;
      if ((*(unsigned char *)(v56 + v1055[8]) & 1) == 0)
      {
        uint64_t v58 = v1075;
        unint64_t v59 = v1073;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
        uint64_t v60 = v1071;
        swift_retain();
        uint64_t v61 = v60;
        uint64_t v62 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
        uint64_t v63 = v1072;
        id v64 = objc_msgSend(v61, sel_newNodeAtPath_type_, v1072, v62);
        if (!v64)
        {
          lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
          uint64_t v575 = swift_allocError();
          *v576 = v63;
          v576[1] = v62;
          v577 = v63;
          object = v62;
          uint64_t v1074 = v575;
          swift_willThrow();
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v58);

          goto LABEL_188;
        }
        char v65 = v64;
        v1032 = v54;

        object = v65;
        uint64_t v66 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x6F69647541, 0xE500000000000000, object);
        uint64_t v1074 = v66;
        if (v66)
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v58);
LABEL_188:
          swift_release();
LABEL_189:

          return object;
        }
        *(void *)&v1070.f64[0] = v65;
        v1071 = object;
        v585 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v586 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v587 = (void *)MEMORY[0x22A688A50](0x63416F696475412FLL, 0xEC0000006E6F6974);
        id v588 = objc_msgSend(v586, sel_initWithString_, v587);

        if (v588)
        {
          id v589 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v588);

          objc_msgSend(v1071, sel_setMetadataWithKey_value_, v585, v589);
          uint64_t v590 = v1075;
          v1081.n128_u64[0] = v1075;
          v1081.n128_u64[1] = v59;
          v1082.n128_u64[0] = (unint64_t)v61;
          v1082.n128_u64[1] = (unint64_t)v1032;
          uint64_t v412 = v1068.n128_u64[0];
          uint64_t v591 = __USDExportContext.pathTo(_:)(v1068.n128_i64[0]);
          if (v591)
          {
            v592 = (void *)v591;
            v1072 = v61;
            v593 = (void *)*MEMORY[0x263F83F90];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v594 = swift_allocObject();
            *(_OWORD *)(v594 + 16) = xmmword_22831E4E0;
            *(void *)(v594 + 32) = v592;
            v1081.n128_u64[0] = v594;
            specialized Array._endMutation()();
            object = (__objc2_class **)v1081.n128_u64[0];
            id v595 = v592;
            v596 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
            v597 = v1071;
            id v598 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v596, v593, 0);

            if (v598)
            {
              v1069.n128_u64[0] = (unint64_t)v595;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
              swift_bridgeObjectRetain();
              id v599 = v598;
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v599, sel_setObjectPathArray_, isa);
              swift_bridgeObjectRelease_n();

              uint64_t v601 = v1075;
              uint64_t v61 = v1072;
              v1081.n128_u64[0] = v1075;
              v1081.n128_u64[1] = v1073;
              v1082.n128_u64[0] = (unint64_t)v1072;
              v1082.n128_u64[1] = (unint64_t)v1032;
              uint64_t v602 = v1068.n128_u64[0];
              v603 = (uint64_t *)(v1068.n128_u64[0] + v1055[5]);
              uint64_t v604 = *v603;
              v605 = (void *)v603[1];
              swift_bridgeObjectRetain();
              v606._uint64_t countAndFlagsBits = v604;
              v606._object = v605;
              Swift::String_optional v607 = __USDEncoder.resolveResourcePath(path:)(v606);
              uint64_t v1074 = v608;
              if (v608)
              {
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v602, type metadata accessor for __RKEntityAudioActionArguments);
                object = v1071;

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v601);
                swift_bridgeObjectRelease();

                goto LABEL_188;
              }
              object = (__objc2_class **)v607.value._object;
              swift_bridgeObjectRelease();
              uint64_t v819 = v1035;
              _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v602, v1035, type metadata accessor for __RKEntityAudioActionArguments);
              if (v607.value._object)
              {
                uint64_t countAndFlagsBits = v607.value._countAndFlagsBits;
              }
              else
              {
                v900 = (uint64_t *)(v819 + v1055[5]);
                uint64_t countAndFlagsBits = *v900;
                object = (__objc2_class **)v900[1];
                swift_bridgeObjectRetain();
              }
              _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v819, type metadata accessor for __RKEntityAudioActionArguments);
              v901 = (void *)*MEMORY[0x263F83FA0];
              v902 = (void *)MEMORY[0x22A688A50](0x6F69647561, 0xE500000000000000);
              v903 = v1071;
              id v904 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v902, v901, 0);

              if (v904)
              {
                swift_bridgeObjectRetain();
                id v905 = v904;
                v906 = (void *)MEMORY[0x22A688A50](countAndFlagsBits, object);
                objc_msgSend(v905, sel_setResourcePath_, v906);
                swift_bridgeObjectRelease_n();

                v907 = (void *)*MEMORY[0x263F83FB0];
                unint64_t v908 = 0xE400000000000000;
                uint64_t v909 = 2036427888;
                object = 0;
                switch(*(unsigned char *)(v1068.n128_u64[0] + v1055[6]))
                {
                  case 1:
                    unint64_t v908 = 0xE500000000000000;
                    uint64_t v909 = 0x6573756170;
                    goto LABEL_345;
                  case 2:
                    uint64_t v909 = 1886352499;
                    goto LABEL_345;
                  case 3:
                    goto LABEL_346;
                  default:
LABEL_345:
                    id v930 = objc_allocWithZone(MEMORY[0x263F83F08]);
                    v931 = (void *)MEMORY[0x22A688A50](v909, v908);
                    swift_bridgeObjectRelease();
                    object = (__objc2_class **)objc_msgSend(v930, sel_initWithString_, v931);

LABEL_346:
                    v932 = (void *)MEMORY[0x22A688A50](1701869940, 0xE400000000000000);
                    v933 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v932, v907, 0);

                    if (v933)
                    {
                      if (object)
                      {
                        v934 = (void (*)(void))implicit closure #6 in __RKEntityActionSpecification.encode(to:at:)(v933);
                        v935 = object;
                        v934();

                        swift_release();
                        unint64_t v936 = v1068.n128_u64[0] + v1055[7];
                        if (*(unsigned char *)(v936 + 8))
                        {
                          uint64_t v937 = 0x3FF0000000000000;
                          uint64_t v938 = v1074;
                          v939 = v1071;
                        }
                        else
                        {
                          uint64_t v938 = v1074;
                          v939 = v1071;
                          if (*(double *)v936 >= 0.0) {
                            uint64_t v937 = *(void *)v936;
                          }
                          else {
                            uint64_t v937 = 0;
                          }
                        }
                        id v992 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(1852399975, 0xE400000000000000, (void *)*MEMORY[0x263F83F20], 0, v937, 0, v939);
                        uint64_t v1074 = v938;
                        if (v938)
                        {
                          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);

                          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                          v923 = (void *)v1069.n128_u64[0];
                          goto LABEL_338;
                        }

                        v993 = v1055;
                        unint64_t v994 = v1068.n128_u64[0];
                        uint64_t v995 = v1074;
                        object = (__objc2_class **)_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation32__RKAudioSpatialModeSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c101Kit29__RKEntityActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k19C0A10Foundation32__efgH10USDOXEfU2_Tf1cn_n(0x3010200u >> (8 * *(unsigned char *)(v1068.n128_u64[0] + v1055[9])));
                        id v996 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x646F4D6C61727561, 0xE900000000000065, v907, 0, (uint64_t)object, v939);
                        uint64_t v1074 = v995;
                        if (v995)
                        {

                          v997 = v1072;
                          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                          swift_release();
                          uint64_t v212 = type metadata accessor for __RKEntityAudioActionArguments;
                          uint64_t v213 = v994;
                          goto LABEL_382;
                        }

                        uint64_t v1014 = v1074;
                        object = (__objc2_class **)_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation42__RKEntityActionMultiplePerformBehaviorUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8l23C0A10Foundation02__cD26ghI10USDOXEfU4_Tf1cn_n(0x3020001u >> (8 * *(unsigned char *)(v994 + v993[10])));
                        id v1015 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0xD000000000000018, 0x800000022834EDB0, v907, 0, (uint64_t)object, v939);
                        uint64_t v1074 = v1014;
                        if (!v1014)
                        {
                          v1025 = v1015;

                          v1026 = v1072;
                          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                          v1027 = v1071;
                          swift_release();

                          object = v1027;
                          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
                          return object;
                        }

                        v1016 = v1071;
                        v1017 = v1072;

                        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                        swift_release();

LABEL_360:
                        goto LABEL_361;
                      }
                      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                      uint64_t v961 = swift_allocError();
                      *(_OWORD *)uint64_t v962 = 0u;
                      *(_OWORD *)(v962 + 16) = 0u;
                      *(void *)(v962 + 32) = 0;
                      uint64_t v1074 = v961;
                      swift_willThrow();

                      v942 = v1071;
                      v945 = v1072;
                      v1069.n128_u64[0] = (unint64_t)v1071;
                      v943 = v1072;
                    }
                    else
                    {
                      lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                      uint64_t v940 = swift_allocError();
                      *(_OWORD *)uint64_t v941 = xmmword_228345760;
                      *(void *)(v941 + 16) = v907;
                      *(void *)(v941 + 24) = 0;
                      *(float64_t *)(v941 + 32) = v1070.f64[0];
                      v942 = v1071;
                      v943 = v1071;
                      id v944 = v907;
                      uint64_t v1074 = v940;
                      swift_willThrow();
                      v945 = v1072;
                      v933 = v1072;
                    }

                    outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                    swift_release();

                    goto LABEL_360;
                }
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v910 = swift_allocError();
              *(_OWORD *)uint64_t v911 = xmmword_228345860;
              *(void *)(v911 + 16) = v901;
              *(void *)(v911 + 24) = 0;
              *(float64_t *)(v911 + 32) = v1070.f64[0];
              v912 = v903;
              id v913 = v901;
              uint64_t v1074 = v910;
              swift_willThrow();

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_bridgeObjectRelease();

              swift_release();
            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v795 = swift_allocError();
              *(_OWORD *)uint64_t v796 = xmmword_228345790;
              *(void *)(v796 + 16) = v593;
              *(void *)(v796 + 24) = 0;
              *(float64_t *)(v796 + 32) = v1070.f64[0];
              v797 = v597;
              id v798 = v593;
              uint64_t v1074 = v795;
              swift_willThrow();

              v799 = v1072;
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_bridgeObjectRelease();

              swift_release();
            }
LABEL_361:
            uint64_t v212 = type metadata accessor for __RKEntityAudioActionArguments;
            uint64_t v213 = v1068.n128_u64[0];
LABEL_382:
            _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v213, v212);
            return object;
          }
          object = v1071;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          uint64_t v707 = swift_allocError();
          unsigned char *v708 = 0;
          uint64_t v1074 = v707;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v590);
          swift_release();

          v646 = type metadata accessor for __RKEntityAudioActionArguments;
LABEL_230:
          uint64_t v212 = v646;
          uint64_t v213 = v412;
          goto LABEL_382;
        }
        goto LABEL_437;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v1056 + 16))(v30, v56, v1067);
      uint64_t v214 = v57[6];
      unsigned __int32 v215 = *(unsigned __int8 *)(v56 + v214);
      if (v215 == 3) {
        goto LABEL_421;
      }
      uint64_t v216 = (void *)v57[9];
      if (*((unsigned char *)v216 + v56) == 3) {
        goto LABEL_422;
      }
      uint64_t v217 = v57[7];
      if (*(unsigned char *)(v56 + v217 + 8)) {
        goto LABEL_423;
      }
      LODWORD(v1065) = *((unsigned __int8 *)v216 + v56);
      v1066 = (char *)v216;
      v1069.n128_u32[0] = v215;
      uint64_t v1074 = v214;
      v1032 = v54;
      LODWORD(v1064) = *(unsigned __int8 *)(v56 + v57[10]);
      if (v1064 != 3)
      {
        uint64_t v218 = (uint64_t *)(v56 + v57[5]);
        uint64_t v219 = v218[1];
        v1062 = (unsigned char *)*v218;
        v1063 = (char *)v219;
        uint64_t v220 = *(void *)(v56 + v217);
        uint64_t v221 = (uint64_t)v1047;
        uint64_t v222 = &v1047[v217];
        v1060 = (unsigned __int8 *)v57[8];
        v1061 = (unsigned char *)v220;
        (*(void (**)(char *, char *, uint64_t))(v1056 + 32))(v1047, v30, v1067);
        uint64_t v223 = (void *)(v221 + v57[5]);
        *uint64_t v223 = v1062;
        v223[1] = v219;
        *(unsigned char *)(v221 + v1074) = v1069.n128_u8[0];
        v1066[v221] = (char)v1065;
        *(void *)uint64_t v222 = v1061;
        v222[8] = 0;
        v1060[v221] = 0;
        *(unsigned char *)(v221 + v57[10]) = (_BYTE)v1064;
        _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v221, (uint64_t)v48, type metadata accessor for __RKEntityAudioActionArguments);
        swift_storeEnumTagMultiPayload();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        unint64_t v224 = (*(unsigned __int8 *)(v1053 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1053 + 80);
        uint64_t v225 = swift_allocObject();
        *(_OWORD *)(v225 + 16) = xmmword_22830EC60;
        _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1((uint64_t)v48, v225 + v224, type metadata accessor for __RKEntityActionSpecification);
        *(unsigned char *)object = 0;
        object[1] = (__objc2_class *)v225;
        *((unsigned char *)object + 16) = 0;
        object[3] = 0;
        *((_WORD *)object + 16) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v226 = v1075;
        unint64_t v227 = v1073;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
        id v228 = v1071;
        unint64_t v229 = (unint64_t)v1032;
        swift_retain();
        uint64_t v230 = v228;
        swift_bridgeObjectRetain();
        uint64_t v231 = *(void *)&v1070.f64[0];
        makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)((uint64_t)v1072, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, v230);
        uint64_t v1074 = v231;
        if (!v231)
        {
          v583 = v232;
          v1081.n128_u64[0] = v226;
          v1081.n128_u64[1] = v227;
          v1082.n128_u64[0] = (unint64_t)v230;
          v1082.n128_u64[1] = v229;
          v584 = (__objc2_class **)__RKEntityActionSpecification.encode(to:at:)(&v1081, v232);
          uint64_t v1074 = 0;
          v1071 = v584;

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v226);
          swift_release();

          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)object, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v48, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v221, type metadata accessor for __RKEntityAudioActionArguments);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1068.n128_i64[0], type metadata accessor for __RKEntityAudioActionArguments);
          return v1071;
        }

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v226);
        swift_release();

        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)object, type metadata accessor for __RKEntityActionSpecification);
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v48, type metadata accessor for __RKEntityActionSpecification);
        object = (__objc2_class **)type metadata accessor for __RKEntityAudioActionArguments;
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v221, type metadata accessor for __RKEntityAudioActionArguments);
        uint64_t v213 = v1068.n128_u64[0];
        uint64_t v212 = type metadata accessor for __RKEntityAudioActionArguments;
        goto LABEL_382;
      }
      goto LABEL_424;
    case 1u:
      uint64_t v132 = (uint64_t)v1057;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1057, type metadata accessor for __RKChangeSceneActionArguments);
      uint64_t v133 = v1075;
      unint64_t v134 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      uint64_t v135 = v1071;
      swift_retain();
      uint64_t v131 = v135;
      id v136 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      int v137 = v1072;
      id v138 = objc_msgSend(v131, sel_newNodeAtPath_type_, v1072, v136);
      if (!v138)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v260 = swift_allocError();
        *uint64_t v261 = v137;
        v261[1] = v136;
        uint64_t v262 = v137;
        object = v136;
        uint64_t v1074 = v260;
        swift_willThrow();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v132, type metadata accessor for __RKChangeSceneActionArguments);
        goto LABEL_76;
      }
      id v139 = v138;

      object = v139;
      uint64_t v140 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x635365676E616843, 0xEB00000000656E65, object);
      uint64_t v1074 = v140;
      if (v140)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1057, type metadata accessor for __RKChangeSceneActionArguments);

LABEL_76:
        uint64_t v263 = v133;
LABEL_84:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v263);

LABEL_85:
        swift_release();
        goto LABEL_86;
      }
      v1071 = object;
      v434 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v435 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      v436 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835E0D0);
      id v437 = objc_msgSend(v435, sel_initWithString_, v436);

      if (v437)
      {
        id v438 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v437);

        v439 = v1071;
        objc_msgSend(v1071, sel_setMetadataWithKey_value_, v434, v438);

        uint64_t v440 = v1075;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v134;
        v1082.n128_u64[0] = (unint64_t)v131;
        v1082.n128_u64[1] = v53;
        uint64_t v441 = (uint64_t)v1057;
        v442 = (void *)__USDExportContext.pathTo(_:)((uint64_t)&v1057[*(int *)(v1046 + 20)]);
        if (!v442)
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v441, type metadata accessor for __RKChangeSceneActionArguments);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v440);

          swift_release();
          return v439;
        }
        v443 = (void *)*MEMORY[0x263F83F88];
        object = v442;
        v444 = (void *)MEMORY[0x22A688A50](0x656E656373, 0xE500000000000000);
        id v445 = objc_msgSend(v439, sel_newPropertyWithName_type_role_, v444, v443, 0);

        if (v445)
        {
          objc_msgSend(v445, sel_setObjectPath_, object);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_release();

          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1057, type metadata accessor for __RKChangeSceneActionArguments);
          return v439;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v679 = swift_allocError();
        *(_OWORD *)uint64_t v680 = xmmword_228345850;
        *(void *)(v680 + 16) = v443;
        *(void *)(v680 + 24) = 0;
        *(void *)(v680 + 32) = v139;
        v681 = v439;
        id v682 = v443;
        uint64_t v1074 = v679;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_release();

        uint64_t v212 = type metadata accessor for __RKChangeSceneActionArguments;
        uint64_t v213 = (uint64_t)v1057;
        goto LABEL_382;
      }
      goto LABEL_431;
    case 2u:
      uint64_t v141 = (uint64_t)v51;
      id v142 = v1065;
      outlined init with take of __RKEntityHideActionArguments(v141, (uint64_t)v1065, type metadata accessor for __RKEntityCustomActionArguments);
      uint64_t v78 = v1075;
      float v143 = (__objc2_class **)v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v144 = v1071;
      swift_retain();
      uint64_t v131 = v144;
      char v145 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v146 = v1072;
      id v147 = objc_msgSend(v131, sel_newNodeAtPath_type_, v1072, v145);
      if (v147)
      {
        id v148 = v147;
        v1072 = v131;

        uint64_t v86 = v148;
        uint64_t v149 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x6163696669746F4ELL, 0xEC0000006E6F6974, v86);
        uint64_t v1074 = v149;
        if (v149)
        {
          uint64_t v109 = type metadata accessor for __RKEntityCustomActionArguments;
          uint64_t v110 = (uint64_t)v1065;
          goto LABEL_34;
        }
        v1071 = v86;
        v446 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v447 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v448 = (void *)MEMORY[0x22A688A50](0xD000000000000013, 0x800000022835E070);
        id v449 = objc_msgSend(v447, sel_initWithString_, v448);

        if (v449)
        {
          id v450 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v449);

          objc_msgSend(v1071, sel_setMetadataWithKey_value_, v446, v450);
          uint64_t v451 = v1075;
          v1081.n128_u64[0] = v1075;
          v1081.n128_u64[1] = (unint64_t)v143;
          v452 = v1072;
          v1082.n128_u64[0] = (unint64_t)v1072;
          v1082.n128_u64[1] = v53;
          id v51 = (unsigned __int8 *)v1065;
          uint64_t v453 = __USDExportContext.pathTo(_:)((uint64_t)v1065);
          if (v453)
          {
            v454 = (void *)v453;
            *(void *)&v1070.f64[0] = v148;
            v455 = (void *)*MEMORY[0x263F83F90];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v456 = swift_allocObject();
            *(_OWORD *)(v456 + 16) = xmmword_22831E4E0;
            *(void *)(v456 + 32) = v454;
            v1081.n128_u64[0] = v456;
            specialized Array._endMutation()();
            id v457 = v454;
            v458 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
            v459 = v1071;
            id v460 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v458, v455, 0);

            if (v460)
            {
              v1069.n128_u64[0] = (unint64_t)v457;
              v1032 = (__objc2_class **)v53;
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
              swift_bridgeObjectRetain();
              id v461 = v460;
              Class v462 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v461, sel_setObjectPathArray_, v462);
              swift_bridgeObjectRelease_n();

              v463 = (void *)*MEMORY[0x263F83FA8];
              v464 = &v1065[*(int *)(v1038 + 20)];
              uint64_t v466 = *(void *)v464;
              uint64_t v465 = *((void *)v464 + 1);
              swift_bridgeObjectRetain();
              v467 = (void *)MEMORY[0x22A688A50](0x696669746E656469, 0xEA00000000007265);
              id v468 = objc_msgSend(v459, sel_newPropertyWithName_type_role_, v467, v463, 0);

              object = v459;
              if (v468)
              {
                swift_bridgeObjectRetain();
                id v469 = v468;
                v470 = (void *)MEMORY[0x22A688A50](v466, v465);
                objc_msgSend(v469, sel_setStringValue_, v470);

                v471 = v1072;
                swift_bridgeObjectRelease();

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                swift_bridgeObjectRelease();

                swift_release();
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1065, type metadata accessor for __RKEntityCustomActionArguments);
                return object;
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v748 = swift_allocError();
              *(_OWORD *)uint64_t v749 = xmmword_228345770;
              *(void *)(v749 + 16) = v463;
              *(void *)(v749 + 24) = 0;
              *(float64_t *)(v749 + 32) = v1070.f64[0];
              v750 = object;
              id v751 = v463;
              uint64_t v1074 = v748;
              swift_willThrow();

              object = v1072;
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_bridgeObjectRelease();
            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v683 = swift_allocError();
              *(_OWORD *)uint64_t v684 = xmmword_228345790;
              *(void *)(v684 + 16) = v455;
              *(void *)(v684 + 24) = 0;
              *(float64_t *)(v684 + 32) = v1070.f64[0];
              v685 = v459;
              id v686 = v455;
              uint64_t v1074 = v683;
              swift_willThrow();

              object = v1072;
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_bridgeObjectRelease();
            }
            swift_release();

            uint64_t v212 = type metadata accessor for __RKEntityCustomActionArguments;
            uint64_t v213 = (uint64_t)v1065;
            goto LABEL_382;
          }
          object = v143;
          v647 = v1071;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          uint64_t v648 = swift_allocError();
          unsigned char *v649 = 0;
          uint64_t v1074 = v648;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v451);
          swift_release();

          id v211 = type metadata accessor for __RKEntityCustomActionArguments;
          goto LABEL_55;
        }
        goto LABEL_432;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v264 = swift_allocError();
      *char v265 = v146;
      v265[1] = (__objc2_class **)v145;
      uint64_t v266 = v146;
      object = v145;
      uint64_t v1074 = v264;
      swift_willThrow();
      long long v267 = type metadata accessor for __RKEntityCustomActionArguments;
      goto LABEL_81;
    case 3u:
      uint64_t v150 = (uint64_t)v1062;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1062, type metadata accessor for __RKEntityEmphasisActionArguments);
      uint64_t v151 = v1075;
      unint64_t v152 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v153 = v1071;
      swift_retain();
      uint64_t v61 = v153;
      uint64_t v154 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v155 = v1072;
      id v156 = objc_msgSend(v61, sel_newNodeAtPath_type_, v1072, v154);
      if (v156)
      {
        char v157 = v156;
        v1072 = v61;

        uint64_t v86 = v157;
        uint64_t v158 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x7A69736168706D45, 0xE900000000000065, v86);
        uint64_t v1074 = v158;
        if (v158)
        {
          uint64_t v109 = type metadata accessor for __RKEntityEmphasisActionArguments;
          uint64_t v110 = (uint64_t)v1062;
          goto LABEL_34;
        }
        *(void *)&v1070.f64[0] = v157;
        v1071 = v86;
        v1032 = (__objc2_class **)v53;
        v472 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v473 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v474 = (void *)MEMORY[0x22A688A50](0xD000000000000010, 0x800000022835E0B0);
        id v475 = objc_msgSend(v473, sel_initWithString_, v474);

        if (!v475) {
          goto LABEL_433;
        }
        id v476 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v475);

        objc_msgSend(v1071, sel_setMetadataWithKey_value_, v472, v476);
        uint64_t v477 = v1075;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v152;
        v478 = v1072;
        v1082.n128_u64[0] = (unint64_t)v1072;
        v1082.n128_u64[1] = (unint64_t)v1032;
        unint64_t v479 = (unint64_t)v1062;
        uint64_t v480 = __USDExportContext.pathTo(_:)((uint64_t)v1062);
        if (v480)
        {
          v481 = (void *)v480;
          uint64_t v482 = v1074;
          v483 = (void *)*MEMORY[0x263F83F90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v484 = swift_allocObject();
          *(_OWORD *)(v484 + 16) = xmmword_22831E4E0;
          *(void *)(v484 + 32) = v481;
          v1081.n128_u64[0] = v484;
          specialized Array._endMutation()();
          object = (__objc2_class **)v1081.n128_u64[0];
          v485 = v481;
          v486 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
          v487 = v1071;
          id v488 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v486, v483, 0);

          if (!v488)
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            uint64_t v687 = swift_allocError();
            v688 = v487;
            uint64_t v689 = v687;
            *(_OWORD *)uint64_t v690 = xmmword_228345790;
            *(void *)(v690 + 16) = v483;
            *(void *)(v690 + 24) = 0;
            *(float64_t *)(v690 + 32) = v1070.f64[0];
            v691 = v688;
            id v692 = v483;
            uint64_t v1074 = v689;
            swift_willThrow();

            v693 = v1072;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
            swift_bridgeObjectRelease();

            swift_release();
LABEL_381:
            uint64_t v212 = type metadata accessor for __RKEntityEmphasisActionArguments;
            uint64_t v213 = (uint64_t)v1062;
            goto LABEL_382;
          }
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          id v489 = v488;
          Class v490 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v489, sel_setObjectPathArray_, v490);
          swift_bridgeObjectRelease_n();

          uint64_t v491 = v1043;
          uint64_t v492 = (uint64_t)v1062;
          v493 = (float *)&v1062[*(int *)(v1043 + 20)];
          int v494 = *((unsigned __int8 *)v493 + 4);
          double v495 = *v493;
          if (v494) {
            uint64_t v496 = 0;
          }
          else {
            uint64_t v496 = *(void *)&v495;
          }
          id v497 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v496, v494, v487);
          uint64_t v1074 = v482;
          if (v482)
          {
            _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v492, type metadata accessor for __RKEntityEmphasisActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_255:

            goto LABEL_41;
          }

          v752 = (void *)*MEMORY[0x263F83FB0];
          uint64_t v753 = *(unsigned __int8 *)(v492 + *(int *)(v491 + 28));
          unint64_t v754 = 0xE500000000000000;
          uint64_t v755 = 0x6369736162;
          object = 0;
          switch(v753)
          {
            case 1:
              unint64_t v754 = 0xE700000000000000;
              uint64_t v755 = 0x6C756679616C70;
              goto LABEL_309;
            case 2:
              unint64_t v754 = 0xE400000000000000;
              uint64_t v755 = 1684826487;
              goto LABEL_309;
            case 3:
              goto LABEL_310;
            default:
LABEL_309:
              id v877 = objc_allocWithZone(MEMORY[0x263F83F08]);
              v878 = (void *)MEMORY[0x22A688A50](v755, v754);
              swift_bridgeObjectRelease();
              object = (__objc2_class **)objc_msgSend(v877, sel_initWithString_, v878);

LABEL_310:
              v879 = (void *)MEMORY[0x22A688A50](0x656C797473, 0xE500000000000000);
              v880 = v1071;
              v881 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v879, v752, 0);

              if (v881)
              {
                if (object)
                {
                  objc_msgSend(v881, sel_setTokenValue_, object);

                  uint64_t v882 = 0xE500000000000000;
                  uint64_t v883 = 0x6B6E696C62;
                  object = 0;
                  switch(v1062[*(int *)(v1043 + 32)])
                  {
                    case 1:
                      goto LABEL_374;
                    case 2:
                      uint64_t v882 = 0xE600000000000000;
                      uint64_t v883 = 0x65636E756F62;
                      goto LABEL_374;
                    case 3:
                      uint64_t v882 = 0xE400000000000000;
                      uint64_t v883 = 1885957222;
                      goto LABEL_374;
                    case 4:
                      uint64_t v883 = 0x74616F6C66;
                      goto LABEL_374;
                    case 5:
                      uint64_t v882 = 0xE600000000000000;
                      uint64_t v883 = 0x656C6767696ALL;
                      goto LABEL_374;
                    case 6:
                      uint64_t v883 = 0x65736C7570;
                      goto LABEL_374;
                    case 7:
                      uint64_t v883 = 1852403827;
                      uint64_t v882 = 0xE400000000000000;
                      goto LABEL_374;
                    case 8:
                      goto LABEL_375;
                    default:
                      uint64_t v882 = 0xE300000000000000;
                      uint64_t v883 = 7368560;
LABEL_374:
                      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKToken);
                      object = (__objc2_class **)USKToken.__allocating_init(string:)(v883, v882);
LABEL_375:
                      v973 = (void *)MEMORY[0x22A688A50](0x79546E6F69746F6DLL, 0xEA00000000006570);
                      v881 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v973, v752, 0);

                      if (!v881)
                      {
                        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                        uint64_t v979 = swift_allocError();
                        *(_OWORD *)uint64_t v980 = xmmword_228345840;
                        *(void *)(v980 + 16) = v752;
                        *(void *)(v980 + 24) = 0;
                        *(float64_t *)(v980 + 32) = v1070.f64[0];
                        v880 = v1071;
                        v886 = v1071;
                        id v981 = v752;
                        uint64_t v1074 = v979;
                        swift_willThrow();
                        v888 = v1072;
                        v881 = v1072;
                        goto LABEL_380;
                      }
                      if (!object) {
                        goto LABEL_378;
                      }
                      v974 = (void (*)(void))implicit closure #22 in __RKEntityActionSpecification.encode(to:at:)(v881);
                      v975 = object;
                      v974();

                      v976 = v1072;
                      swift_release();
                      outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                      object = v1071;
                      swift_release();

                      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1062, type metadata accessor for __RKEntityEmphasisActionArguments);
                      break;
                  }
                  return object;
                }
LABEL_378:
                lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                uint64_t v977 = swift_allocError();
                *(_OWORD *)uint64_t v978 = 0u;
                *(_OWORD *)(v978 + 16) = 0u;
                *(void *)(v978 + 32) = 0;
                uint64_t v1074 = v977;
                swift_willThrow();

                v880 = v1071;
                v888 = v1072;
                v485 = v1071;
                v886 = v1072;
              }
              else
              {
                lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                uint64_t v884 = swift_allocError();
                *(_OWORD *)uint64_t v885 = xmmword_228345810;
                *(void *)(v885 + 16) = v752;
                *(void *)(v885 + 24) = 0;
                *(float64_t *)(v885 + 32) = v1070.f64[0];
                v886 = v880;
                id v887 = v752;
                uint64_t v1074 = v884;
                swift_willThrow();
                v888 = v1072;
                v881 = v1072;
              }
LABEL_380:

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_release();

              goto LABEL_381;
          }
        }
        object = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v650 = swift_allocError();
        unsigned char *v651 = 0;
        uint64_t v1074 = v650;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v477);
        swift_release();

        v652 = type metadata accessor for __RKEntityEmphasisActionArguments;
LABEL_307:
        uint64_t v212 = v652;
        uint64_t v213 = v479;
        goto LABEL_382;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v268 = swift_allocError();
      unsigned int *v269 = v155;
      v269[1] = (__objc2_class **)v154;
      uint64_t v270 = v155;
      object = v154;
      uint64_t v1074 = v268;
      swift_willThrow();
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v150, type metadata accessor for __RKEntityEmphasisActionArguments);
      uint64_t v259 = v151;
      goto LABEL_79;
    case 6u:
      v1068.n128_u32[0] = *v51;
      v1069.n128_u64[0] = *((void *)v51 + 1);
      float64_t v90 = *((double *)v51 + 3);
      LODWORD(v1067) = v51[32];
      uint64_t v91 = v1075;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v92 = v1071;
      swift_retain();
      object = v92;
      id v93 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v94 = v1072;
      id v95 = objc_msgSend(object, sel_newNodeAtPath_type_, v1072, v93);
      if (!v95)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v248 = swift_allocError();
        *uint64_t v249 = v94;
        v249[1] = v93;
        char v250 = v94;
        uint64_t v74 = v93;
        uint64_t v1074 = v248;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v91);
        swift_bridgeObjectRelease();
LABEL_68:

        goto LABEL_69;
      }
      id v96 = v95;

      id v97 = v96;
      uint64_t v98 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x70756F7247, 0xE500000000000000, v97);
      uint64_t v1074 = v98;
      if (v98)
      {

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_bridgeObjectRelease();
LABEL_69:
        swift_release();
        goto LABEL_70;
      }
      v1070.f64[0] = v90;
      v1071 = (__objc2_class **)v97;
      v1032 = (__objc2_class **)v53;
      uint64_t v319 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v320 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      uint64_t v321 = (void *)MEMORY[0x22A688A50](0x634170756F72472FLL, 0xEC0000006E6F6974);
      id v322 = objc_msgSend(v320, sel_initWithString_, v321);

      v1072 = object;
      if (!v322) {
        goto LABEL_427;
      }
      id v323 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v322);

      uint64_t v61 = v1071;
      objc_msgSend(v1071, sel_setMetadataWithKey_value_, v319, v323);

      uint64_t v324 = (void *)*MEMORY[0x263F83FB0];
      if (v1068.n128_u32[0]) {
        uint64_t v325 = 0x6C6169726573;
      }
      else {
        uint64_t v325 = 0x6C656C6C61726170;
      }
      if (v1068.n128_u32[0]) {
        unint64_t v326 = 0xE600000000000000;
      }
      else {
        unint64_t v326 = 0xE800000000000000;
      }
      id v327 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v328 = (void *)MEMORY[0x22A688A50](v325, v326);
      swift_bridgeObjectRelease();
      id v329 = objc_msgSend(v327, (SEL)0x264838E98, v328);

      v330 = (void *)MEMORY[0x22A688A50](1701869940, 0xE400000000000000);
      id v331 = objc_msgSend(v61, sel_newPropertyWithName_type_role_, v330, v324, 0);

      if (!v331)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v636 = swift_allocError();
        *(_OWORD *)uint64_t v637 = xmmword_228345760;
        *(void *)(v637 + 16) = v324;
        *(void *)(v637 + 24) = 0;
        *(void *)(v637 + 32) = v96;
        v638 = v61;
        id v639 = v324;
        uint64_t v1074 = v636;
        swift_willThrow();
LABEL_219:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_release();
        object = v1072;

        swift_bridgeObjectRelease();
        goto LABEL_189;
      }
      if (!v329)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v1074 = swift_allocError();
        *(_OWORD *)uint64_t v663 = 0u;
        *(_OWORD *)(v663 + 16) = 0u;
        *(void *)(v663 + 32) = 0;
        swift_willThrow();

        uint64_t v61 = v1071;
        goto LABEL_219;
      }
      objc_msgSend(v331, sel_setTokenValue_, v329);

      if (v1067)
      {
LABEL_439:
        __break(1u);
        goto LABEL_440;
      }
      v332 = (void *)*MEMORY[0x263F83F18];
      v333 = (void *)MEMORY[0x22A688A50](0x73706F6F6CLL, 0xE500000000000000);
      uint64_t v334 = v1071;
      id v335 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v333, v332, 0);

      uint64_t v336 = *(void *)&v1070.f64[0];
      if (!v335)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v793 = swift_allocError();
        long long v794 = xmmword_228345830;
LABEL_274:
        *(_OWORD *)uint64_t v792 = v794;
        *(void *)(v792 + 16) = v332;
        *(void *)(v792 + 24) = 0;
        *(void *)(v792 + 32) = v96;
        id v808 = v332;
        uint64_t v1074 = v793;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      objc_msgSend(v335, sel_setBoolValue_, *(void *)&v1070.f64[0] == 0);

      if (v336 < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
        goto LABEL_420;
      }
      if (v336 > 0x7FFFFFFF)
      {
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
LABEL_424:
        __break(1u);
LABEL_425:
        __break(1u);
LABEL_426:
        __break(1u);
LABEL_427:
        __break(1u);
LABEL_428:
        __break(1u);
LABEL_429:
        __break(1u);
LABEL_430:
        __break(1u);
LABEL_431:
        __break(1u);
LABEL_432:
        __break(1u);
LABEL_433:
        __break(1u);
        goto LABEL_434;
      }
      v332 = (void *)*MEMORY[0x263F83F78];
      v337 = (void *)MEMORY[0x22A688A50](0x436D726F66726570, 0xEC000000746E756FLL);
      uint64_t v334 = v1071;
      id v338 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v337, v332, 0);

      if (!v338)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v793 = swift_allocError();
        long long v794 = xmmword_228345820;
        goto LABEL_274;
      }
      objc_msgSend(v338, sel_setIntValue_, v336);

      uint64_t v1079 = specialized static Array._allocateUninitialized(_:)(0);
      unint64_t v1077 = 0;
      uint64_t v1078 = 0;
      unint64_t v1076 = v1069.n128_u64[0];
      v339 = v1036;
      for (uint64_t i = (uint64_t)v1050;
            ;
            _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(i, type metadata accessor for __RKEntityActionSpecification))
      {
        specialized EnumeratedSequence.Iterator.next()(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification), (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, v339);
        uint64_t v341 = v1051;
        outlined init with take of Transform?((uint64_t)v339, (uint64_t)v1051, &demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification)?);
        uint64_t v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: __RKEntityActionSpecification));
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v342 - 8) + 48))(v341, 1, v342) == 1)break; {
        uint64_t v343 = v1074;
        }
        uint64_t v344 = v341;
        uint64_t v345 = *v341;
        outlined init with take of __RKEntityHideActionArguments((uint64_t)v344 + *(int *)(v342 + 48), i, type metadata accessor for __RKEntityActionSpecification);
        id v346 = objc_msgSend(v1071, sel_path);
        v1081.n128_u64[0] = 0;
        v1081.n128_u64[1] = 0xE000000000000000;
        v347._uint64_t countAndFlagsBits = 0x5F6E6F69746341;
        v347._object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v347);
        id v348 = (id)(v345 + 1);
        if (__OFADD__(v345, 1))
        {
          __break(1u);
          goto LABEL_414;
        }
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v349._uint64_t countAndFlagsBits = 0;
        v349._object = (void *)0xE000000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v349);
        USKObjectPath.appendingPathComponent(_:)(v1081.n128_i64[0], (void *)v1081.n128_u64[1]);
        uint64_t v351 = v350;

        swift_bridgeObjectRelease();
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v1073;
        v1082.n128_u64[0] = (unint64_t)v1072;
        v1082.n128_u64[1] = (unint64_t)v1032;
        __RKEntityActionSpecification.encode(to:at:)(&v1081, v351);
        uint64_t v1074 = v343;
        if (v343)
        {
          object = v1071;

          v818 = v1072;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

          swift_release();
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(i, type metadata accessor for __RKEntityActionSpecification);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return object;
        }
        specialized Array.append(_:)();
      }
      swift_bridgeObjectRelease();
      v812 = (void *)*MEMORY[0x263F83F90];
      unint64_t v813 = swift_bridgeObjectRetain();
      uint64_t v814 = v1074;
      uint64_t v815 = specialized Sequence.compactMap<A>(_:)(v813);
      swift_bridgeObjectRelease_n();
      v816 = v1071;
      id v817 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x736E6F69746361, 0xE700000000000000, v812, 0, v815, v1071);
      uint64_t v1074 = v814;
      if (v814)
      {
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_bridgeObjectRelease();

        goto LABEL_41;
      }
      v896 = v817;
      v897 = v1072;

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
      swift_bridgeObjectRelease();

      swift_release();
      return v816;
    case 7u:
      uint64_t v99 = (uint64_t)v1061;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1061, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v100 = v1075;
      unint64_t v101 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v102 = v1071;
      swift_retain();
      id v103 = v102;
      uint64_t v104 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v105 = v1072;
      id v106 = objc_msgSend(v103, sel_newNodeAtPath_type_, v1072, v104);
      if (v106)
      {
        id v107 = v106;
        v1072 = v103;

        uint64_t v86 = v107;
        uint64_t v108 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x696C696269736956, 0xEA00000000007974, v86);
        uint64_t v1074 = v108;
        if (v108)
        {
          uint64_t v109 = type metadata accessor for __RKEntityHideActionArguments;
          uint64_t v110 = (uint64_t)v1061;
LABEL_34:
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v110, v109);

          uint64_t v121 = v1075;
          goto LABEL_39;
        }
        v1071 = v86;
        v1032 = (__objc2_class **)v53;
        long long v352 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v353 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v354 = (void *)MEMORY[0x22A688A50](0xD000000000000011, 0x800000022835E010);
        id v355 = objc_msgSend(v353, sel_initWithString_, v354);

        if (!v355) {
          goto LABEL_428;
        }
        id v356 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v355);

        objc_msgSend(v1071, sel_setMetadataWithKey_value_, v352, v356);
        uint64_t v357 = v1075;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v101;
        v358 = v1072;
        v1082.n128_u64[0] = (unint64_t)v1072;
        v1082.n128_u64[1] = (unint64_t)v1032;
        uint64_t v359 = (uint64_t)v1061;
        uint64_t v360 = __USDExportContext.pathTo(_:)((uint64_t)v1061);
        if (v360)
        {
          v361 = (void *)v360;
          *(void *)&v1070.f64[0] = v107;
          uint64_t v362 = v1074;
          v363 = (void *)*MEMORY[0x263F83F90];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v364 = swift_allocObject();
          *(_OWORD *)(v364 + 16) = xmmword_22831E4E0;
          *(void *)(v364 + 32) = v361;
          v1081.n128_u64[0] = v364;
          specialized Array._endMutation()();
          object = (__objc2_class **)v1081.n128_u64[0];
          id v365 = v361;
          v366 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
          id v367 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v366, v363, 0);

          if (v367)
          {
            v1069.n128_u64[0] = (unint64_t)v365;
            type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
            swift_bridgeObjectRetain();
            id v368 = v367;
            Class v369 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v368, sel_setObjectPathArray_, v369);
            swift_bridgeObjectRelease_n();

            v370 = (void *)*MEMORY[0x263F83F20];
            uint64_t v371 = v1042;
            uint64_t v372 = (uint64_t)v1061;
            v373 = (float *)&v1061[*(int *)(v1042 + 20)];
            int v374 = *((unsigned __int8 *)v373 + 4);
            double v375 = *v373;
            if (v374) {
              uint64_t v376 = 0;
            }
            else {
              uint64_t v376 = *(void *)&v375;
            }
            v377 = v1071;
            id v378 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v376, v374, v1071);
            uint64_t v1074 = v362;
            if (v362)
            {
              _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v372, type metadata accessor for __RKEntityHideActionArguments);

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              goto LABEL_41;
            }

            v718 = (void *)*MEMORY[0x263F83FB0];
            id v719 = objc_allocWithZone(MEMORY[0x263F83F08]);
            v720 = (void *)MEMORY[0x22A688A50](1701079400, 0xE400000000000000);
            object = (__objc2_class **)objc_msgSend(v719, sel_initWithString_, v720);

            v721 = (void *)MEMORY[0x22A688A50](1701869940, 0xE400000000000000);
            v722 = (__objc2_class **)objc_msgSend(v377, sel_newPropertyWithName_type_role_, v721, v718, 0);

            if (v722)
            {
              if (object)
              {
                objc_msgSend(v722, sel_setTokenValue_, object);

                uint64_t v723 = *(int *)(v371 + 28);
                uint64_t v724 = *(int *)(v371 + 32);
                uint64_t v725 = v371;
                uint64_t v726 = (uint64_t)v1061;
                v1081.n128_u8[0] = v1061[v723];
                LOBYTE(v1076) = v1061[v724];
                v727 = v1071;
                uint64_t v728 = v1074;
                __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v1081, &v1076, v1071);
                uint64_t v1074 = v728;
                if (v728)
                {
                  _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v726, type metadata accessor for __RKEntityHideActionArguments);

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                  goto LABEL_41;
                }
                if (*(unsigned char *)(v726 + *(int *)(v725 + 56)) == 3)
                {
                  v914 = 0;
                }
                else
                {
                  LOBYTE(v1076) = *(unsigned char *)(v726 + *(int *)(v725 + 56));
                  uint64_t v946 = v1074;
                  closure #24 in __RKEntityActionSpecification.encode(to:at:)(&v1076, &v1081);
                  uint64_t v1074 = v946;
                  v914 = (void *)v1081.n128_u64[0];
                }
                v947 = (void *)MEMORY[0x22A688A50](0x656C797473, 0xE500000000000000);
                v948 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v947, v718, 0);

                if (v948)
                {
                  if (v914)
                  {
                    v949 = (void (*)(void))implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(v948);
                    id v950 = v914;
                    v949();

                    swift_release();
                    uint64_t v951 = v1042;
                    uint64_t v412 = (uint64_t)v1061;
                    uint64_t v952 = v1074;
                    object = (__objc2_class **)_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(byte_228345BC6[(char)v1061[*(int *)(v1042 + 60)]]);
                    v953 = v1071;
                    id v954 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x79546E6F69746F6DLL, 0xEA00000000006570, v718, 0, (uint64_t)object, v1071);
                    uint64_t v1074 = v952;
                    if (v952)
                    {

                      v955 = v1072;
                      outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                      swift_release();
                      v646 = type metadata accessor for __RKEntityHideActionArguments;
                      goto LABEL_230;
                    }

                    uint64_t v1000 = v412 + *(int *)(v951 + 24);
                    float v1001 = *(float *)v1000;
                    v1081.n128_u8[0] = *(unsigned char *)(v1000 + 4);
                    double v1002 = v1001;
                    unint64_t v1003 = ((unint64_t)v1081.n128_u8[0] << 32) & 0x100000000;
                    if (v1003) {
                      uint64_t v1004 = 0;
                    }
                    else {
                      uint64_t v1004 = *(void *)&v1002;
                    }
                    uint64_t v1005 = v1074;
                    id v348 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7473694465766F6DLL, 0xEC00000065636E61, v370, 0, v1004, SBYTE4(v1003), v953);
                    uint64_t v1074 = v1005;
                    if (!v1005)
                    {
LABEL_414:
                      v1021 = v348;

                      v1022 = v1072;
                      outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                      object = v1071;
                      swift_release();

                      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1061, type metadata accessor for __RKEntityHideActionArguments);
                      return object;
                    }
                    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1061, type metadata accessor for __RKEntityHideActionArguments);
                    uint64_t v86 = v1071;

                    outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                    goto LABEL_40;
                  }
                  lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                  uint64_t v983 = swift_allocError();
                  *(_OWORD *)uint64_t v984 = 0u;
                  *(_OWORD *)(v984 + 16) = 0u;
                  *(void *)(v984 + 32) = 0;
                  uint64_t v968 = v983;
                  swift_willThrow();

                  v966 = v1071;
                  v969 = v1072;
                  v1069.n128_u64[0] = (unint64_t)v1071;
                  object = v1072;
                }
                else
                {
                  lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                  uint64_t v964 = swift_allocError();
                  *(_OWORD *)uint64_t v965 = xmmword_228345810;
                  *(void *)(v965 + 16) = v718;
                  *(void *)(v965 + 24) = 0;
                  *(float64_t *)(v965 + 32) = v1070.f64[0];
                  v966 = v1071;
                  object = v1071;
                  id v967 = v718;
                  uint64_t v968 = v964;
                  swift_willThrow();
                  v969 = v1072;
                  v948 = v1072;
                }
                uint64_t v1074 = v968;

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                swift_release();

LABEL_317:
                uint64_t v212 = type metadata accessor for __RKEntityHideActionArguments;
                uint64_t v213 = (uint64_t)v1061;
                goto LABEL_382;
              }
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v889 = swift_allocError();
              *(_OWORD *)uint64_t v890 = 0u;
              *(_OWORD *)(v890 + 16) = 0u;
              *(void *)(v890 + 32) = 0;
              uint64_t v861 = v889;
              swift_willThrow();

              v377 = v1071;
              v862 = v1072;
              v863 = v1071;
              v859 = v1072;
            }
            else
            {
              lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
              uint64_t v857 = swift_allocError();
              *(_OWORD *)uint64_t v858 = xmmword_228345760;
              *(void *)(v858 + 16) = v718;
              *(void *)(v858 + 24) = 0;
              *(float64_t *)(v858 + 32) = v1070.f64[0];
              v859 = v377;
              id v860 = v718;
              uint64_t v861 = v857;
              swift_willThrow();
              v862 = v1072;
              v722 = v1072;
              v863 = (__objc2_class **)v1069.n128_u64[0];
            }
            uint64_t v1074 = v861;

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
            swift_release();

            goto LABEL_317;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v664 = swift_allocError();
          *(_OWORD *)uint64_t v665 = xmmword_228345790;
          *(void *)(v665 + 16) = v363;
          *(void *)(v665 + 24) = 0;
          *(float64_t *)(v665 + 32) = v1070.f64[0];
          v666 = v1071;
          id v667 = v363;
          uint64_t v1074 = v664;
          swift_willThrow();

          v668 = v1072;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_317;
        }
        object = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v640 = swift_allocError();
        unsigned char *v641 = 0;
        uint64_t v1074 = v640;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v357);
        swift_release();

        v642 = type metadata accessor for __RKEntityHideActionArguments;
LABEL_278:
        uint64_t v212 = v642;
        uint64_t v213 = v359;
        goto LABEL_382;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v251 = swift_allocError();
      *uint64_t v252 = v105;
      v252[1] = (__objc2_class **)v104;
      v253 = v105;
      object = v104;
      uint64_t v1074 = v251;
      swift_willThrow();
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v99, type metadata accessor for __RKEntityHideActionArguments);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v100);

      goto LABEL_72;
    case 8u:
      uint64_t v159 = (uint64_t)v51;
      id v142 = v1064;
      outlined init with take of __RKEntityHideActionArguments(v159, (uint64_t)v1064, type metadata accessor for __RKEntityForceActionArguments);
      uint64_t v78 = v1075;
      id v160 = (__objc2_class **)v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v161 = v1071;
      swift_retain();
      uint64_t v131 = v161;
      uint64_t v162 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      uint64_t v163 = v1072;
      id v164 = objc_msgSend(v131, sel_newNodeAtPath_type_, v1072, v162);
      if (v164)
      {
        id v165 = v164;
        v1072 = v131;

        uint64_t v86 = v165;
        uint64_t v166 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x65736C75706D49, 0xE700000000000000, v86);
        uint64_t v1074 = v166;
        if (v166)
        {
          uint64_t v88 = type metadata accessor for __RKEntityForceActionArguments;
          uint64_t v89 = (uint64_t)v1064;
          goto LABEL_38;
        }
        v1071 = v86;
        v498 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v499 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v500 = (void *)MEMORY[0x22A688A50](0x65736C75706D492FLL, 0xEE006E6F69746341);
        id v501 = objc_msgSend(v499, sel_initWithString_, v500);

        if (!v501)
        {
LABEL_434:
          __break(1u);
          goto LABEL_435;
        }
        id v502 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v501);

        objc_msgSend(v1071, sel_setMetadataWithKey_value_, v498, v502);
        uint64_t v503 = v1075;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = (unint64_t)v160;
        v504 = v1072;
        v1082.n128_u64[0] = (unint64_t)v1072;
        v1082.n128_u64[1] = v53;
        id v51 = (unsigned __int8 *)v1064;
        uint64_t v505 = __USDExportContext.pathTo(_:)((uint64_t)v1064);
        if (!v505)
        {
          object = v160;
          v653 = v1071;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          uint64_t v654 = swift_allocError();
          unsigned char *v655 = 0;
          uint64_t v1074 = v654;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v503);
          swift_release();

          id v211 = type metadata accessor for __RKEntityForceActionArguments;
          goto LABEL_55;
        }
        v506 = (void *)v505;
        v507 = v165;
        v1032 = (__objc2_class **)v53;
        v508 = (void *)*MEMORY[0x263F83F90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v509 = swift_allocObject();
        *(_OWORD *)(v509 + 16) = xmmword_22831E4E0;
        *(void *)(v509 + 32) = v506;
        v1081.n128_u64[0] = v509;
        specialized Array._endMutation()();
        id v510 = v506;
        v511 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
        id v512 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v511, v508, 0);

        if (!v512)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v694 = swift_allocError();
          *(_OWORD *)uint64_t v695 = xmmword_228345790;
          *(void *)(v695 + 16) = v508;
          *(void *)(v695 + 24) = 0;
          *(void *)(v695 + 32) = v507;
          v696 = v1071;
          id v697 = v508;
          uint64_t v1074 = v694;
          swift_willThrow();

          object = v1072;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_bridgeObjectRelease();

          swift_release();
          uint64_t v212 = type metadata accessor for __RKEntityForceActionArguments;
          uint64_t v213 = (uint64_t)v1064;
          goto LABEL_382;
        }
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        id v513 = v512;
        Class v514 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v513, sel_setObjectPathArray_, v514);
        swift_bridgeObjectRelease_n();

        v515 = (void *)*MEMORY[0x263F83F28];
        v516 = (float32x2_t *)&v1064[*(int *)(v1037 + 24)];
        float64x2_t v517 = 0uLL;
        __n128 v518 = 0uLL;
        if ((v516[2].i8[0] & 1) == 0)
        {
          float64x2_t v517 = vcvtq_f64_f32(*v516);
          v518.n128_u64[1] = 0;
          v518.n128_f64[0] = COERCE_FLOAT(*(void *)&v516[1]);
        }
        __n128 v1069 = v518;
        float64x2_t v1070 = v517;
        v519 = (void *)MEMORY[0x22A688A50](0x797469636F6C6576, 0xE800000000000000);
        v520 = v1071;
        id v521 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v519, v515, 0);

        if (!v521)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v756 = swift_allocError();
          *(_OWORD *)uint64_t v757 = xmmword_228345800;
          *(void *)(v757 + 16) = v515;
          *(void *)(v757 + 24) = 0;
          *(void *)(v757 + 32) = v507;
          v485 = v520;
          id v758 = v515;
          uint64_t v1074 = v756;
          swift_willThrow();
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1064, type metadata accessor for __RKEntityForceActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          goto LABEL_255;
        }
        __n128 v1081 = (__n128)v1070;
        __n128 v1082 = v1069;
        objc_msgSend(v521, sel_setDouble3Value_, &v1081);

        v522 = v1072;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

        swift_release();
        v523 = type metadata accessor for __RKEntityForceActionArguments;
        uint64_t v524 = (uint64_t)v1064;
LABEL_170:
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v524, v523);
        return v520;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v271 = swift_allocError();
      *int v272 = v163;
      v272[1] = (__objc2_class **)v162;
      char v273 = v163;
      object = v162;
      uint64_t v1074 = v271;
      swift_willThrow();
      long long v267 = type metadata accessor for __RKEntityForceActionArguments;
LABEL_81:
      uint64_t v274 = v267;
      uint64_t v275 = (uint64_t)v142;
      goto LABEL_83;
    case 9u:
      uint64_t v167 = (uint64_t)v1060;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1060, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v78 = v1075;
      id v168 = (__objc2_class **)v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v169 = v1071;
      swift_retain();
      uint64_t v131 = v169;
      uint64_t v170 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v171 = v1072;
      id v172 = objc_msgSend(v131, sel_newNodeAtPath_type_, v1072, v170);
      if (!v172)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v276 = swift_allocError();
        *uint64_t v277 = v171;
        v277[1] = v170;
        uint64_t v278 = v171;
        object = v170;
        uint64_t v1074 = v276;
        swift_willThrow();
        uint64_t v274 = type metadata accessor for __RKEntityShowActionArguments;
        uint64_t v275 = v167;
LABEL_83:
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v275, v274);
        uint64_t v263 = v78;
        goto LABEL_84;
      }
      uint64_t v173 = v172;
      v1072 = v131;

      object = v173;
      uint64_t v174 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x696C696269736956, 0xEA00000000007974, object);
      uint64_t v1074 = v174;
      if (v174)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1060, type metadata accessor for __RKEntityShowActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_45:
        swift_release();
        id v175 = v1072;
LABEL_46:

        return object;
      }
      v1071 = object;
      v1032 = (__objc2_class **)v53;
      v525 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v526 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      v527 = (void *)MEMORY[0x22A688A50](0xD000000000000011, 0x800000022835E010);
      id v528 = objc_msgSend(v526, sel_initWithString_, v527);

      id v51 = v1060;
      if (!v528)
      {
LABEL_435:
        __break(1u);
        goto LABEL_436;
      }
      id v529 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v528);

      v530 = v1071;
      objc_msgSend(v1071, sel_setMetadataWithKey_value_, v525, v529);

      uint64_t v531 = v1075;
      v1081.n128_u64[0] = v1075;
      v1081.n128_u64[1] = (unint64_t)v168;
      id v532 = v1072;
      v1082.n128_u64[0] = (unint64_t)v1072;
      v1082.n128_u64[1] = (unint64_t)v1032;
      uint64_t v533 = __USDExportContext.pathTo(_:)((uint64_t)v51);
      if (v533)
      {
        v534 = (void *)v533;
        *(void *)&v1070.f64[0] = v173;
        v535 = (void *)*MEMORY[0x263F83F90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v536 = swift_allocObject();
        *(_OWORD *)(v536 + 16) = xmmword_22831E4E0;
        *(void *)(v536 + 32) = v534;
        v1081.n128_u64[0] = v536;
        specialized Array._endMutation()();
        id v537 = v534;
        v538 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
        object = &off_264838000;
        id v539 = objc_msgSend(v530, sel_newPropertyWithName_type_role_, v538, v535, 0);

        if (v539)
        {
          v1069.n128_u64[0] = (unint64_t)v537;
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
          swift_bridgeObjectRetain();
          id v540 = v539;
          Class v541 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v540, sel_setObjectPathArray_, v541);
          swift_bridgeObjectRelease_n();

          v542 = (void *)*MEMORY[0x263F83F20];
          v543 = (int *)v1041;
          uint64_t v544 = (uint64_t)v1060;
          v545 = &v1060[*(int *)(v1041 + 20)];
          int v546 = v545[4];
          double v547 = *(float *)v545;
          if (v546) {
            uint64_t v548 = 0;
          }
          else {
            uint64_t v548 = *(void *)&v547;
          }
          uint64_t v549 = v1074;
          id v550 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v548, v546, v530);
          uint64_t v1074 = v549;
          if (v549)
          {
            _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v544, type metadata accessor for __RKEntityShowActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
            goto LABEL_45;
          }

          v759 = (void *)*MEMORY[0x263F83FB0];
          id v760 = objc_allocWithZone(MEMORY[0x263F83F08]);
          v761 = (void *)MEMORY[0x22A688A50](2003789939, 0xE400000000000000);
          id v762 = objc_msgSend(v760, sel_initWithString_, v761);

          v763 = (void *)MEMORY[0x22A688A50](1701869940, 0xE400000000000000);
          v764 = (__objc2_class **)objc_msgSend(v530, sel_newPropertyWithName_type_role_, v763, v759, 0);

          if (v764)
          {
            id v103 = v1072;
            object = (__objc2_class **)v1069.n128_u64[0];
            if (v762)
            {
              objc_msgSend(v764, sel_setTokenValue_, v762);

              uint64_t v765 = v543[8];
              uint64_t v766 = (uint64_t)v1060;
              v1081.n128_u8[0] = v1060[v543[7]];
              LOBYTE(v1076) = v1060[v765];
              uint64_t v767 = v1074;
              __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v1081, &v1076, v530);
              uint64_t v1074 = v767;
              if (v767)
              {
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v766, type metadata accessor for __RKEntityShowActionArguments);

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_72:
                swift_release();

                return object;
              }
              if (*(unsigned char *)(v766 + v543[14]) == 3)
              {
                v915 = 0;
              }
              else
              {
                LOBYTE(v1076) = *(unsigned char *)(v766 + v543[14]);
                uint64_t v956 = v1074;
                closure #24 in __RKEntityActionSpecification.encode(to:at:)(&v1076, &v1081);
                uint64_t v1074 = v956;
                v915 = (void *)v1081.n128_u64[0];
              }
              v957 = v759;
              v958 = v1071;
              uint64_t v959 = v1074;
              id v960 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x656C797473, 0xE500000000000000, v759, 0, (uint64_t)v915, v1071);
              uint64_t v1074 = v959;

              id v51 = (unsigned __int8 *)v766;
              uint64_t v970 = v1041;
              uint64_t v971 = v1074;
              id v532 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation33__RKEntityActionVisibilityTypeUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__ef80SpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8k23C0A10Foundation02__cD17gH11USDOXEfU24_Tf1cn_nTm(byte_228345BC6[(char)v51[*(int *)(v1041 + 60)]]);
              id v972 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x79546E6F69746F6DLL, 0xEA00000000006570, v957, 0, (uint64_t)v532, v958);
              uint64_t v1074 = v971;
              if (!v971)
              {

                v1007 = &v51[*(int *)(v970 + 24)];
                float v1008 = *(float *)v1007;
                v1081.n128_u8[0] = v1007[4];
                double v1009 = v1008;
                unint64_t v1010 = ((unint64_t)v1081.n128_u8[0] << 32) & 0x100000000;
                if (v1010) {
                  uint64_t v1011 = 0;
                }
                else {
                  uint64_t v1011 = *(void *)&v1009;
                }
                uint64_t v1012 = v1074;
                id v1013 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7473694465766F6DLL, 0xEC00000065636E61, v542, 0, v1011, SBYTE4(v1010), v958);
                uint64_t v1074 = v1012;
                if (!v1012)
                {
                  v1023 = v1013;

                  v1024 = v1072;
                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                  object = v1071;
                  swift_release();

                  _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1060, type metadata accessor for __RKEntityShowActionArguments);
                  return object;
                }
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1060, type metadata accessor for __RKEntityShowActionArguments);
                object = v1071;

                outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                goto LABEL_45;
              }

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
              swift_release();

LABEL_215:
              id v211 = type metadata accessor for __RKEntityShowActionArguments;
              goto LABEL_55;
            }
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            uint64_t v894 = swift_allocError();
            *(_OWORD *)uint64_t v895 = 0u;
            *(_OWORD *)(v895 + 16) = 0u;
            *(void *)(v895 + 32) = 0;
            uint64_t v873 = v894;
            swift_willThrow();

            v874 = v530;
            v871 = v103;
            object = v1032;
          }
          else
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            uint64_t v869 = swift_allocError();
            *(_OWORD *)uint64_t v870 = xmmword_228345760;
            *(void *)(v870 + 16) = v759;
            *(void *)(v870 + 24) = 0;
            *(float64_t *)(v870 + 32) = v1070.f64[0];
            v871 = v530;
            id v872 = v759;
            uint64_t v873 = v869;
            swift_willThrow();
            id v103 = v1072;
            v764 = v1072;
            object = v1032;
            v874 = (__objc2_class **)v1069.n128_u64[0];
          }
          uint64_t v1074 = v873;

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_release();
        }
        else
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          object = (__objc2_class **)swift_allocError();
          *(_OWORD *)uint64_t v698 = xmmword_228345790;
          *(void *)(v698 + 16) = v535;
          *(void *)(v698 + 24) = 0;
          *(float64_t *)(v698 + 32) = v1070.f64[0];
          v699 = v530;
          id v700 = v535;
          uint64_t v1074 = (uint64_t)object;
          swift_willThrow();

          v701 = v1072;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_bridgeObjectRelease();

          swift_release();
        }
        uint64_t v212 = type metadata accessor for __RKEntityShowActionArguments;
        uint64_t v213 = (uint64_t)v1060;
        goto LABEL_382;
      }
      object = v168;

      lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
      uint64_t v656 = swift_allocError();
      unsigned char *v657 = 0;
      uint64_t v1074 = v656;
      swift_willThrow();

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v531);
      swift_release();
      goto LABEL_215;
    case 0xAu:
      v1032 = (__objc2_class **)v53;
      uint64_t v176 = v1069.n128_u64[0];
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, v1069.n128_i64[0], type metadata accessor for __RKEntityStartAnimateActionArguments);
      id v177 = started;
      if (*(uint64_t *)(v176 + started[5]) >= 2)
      {
        uint64_t v178 = v1056;
        v1068.n128_u64[0] = started[5];
        (*(void (**)(char *, uint64_t, uint64_t))(v1056 + 16))(v27, v176, v1067);
        uint64_t v179 = v177[7];
        LODWORD(v1065) = *(unsigned __int8 *)(v176 + v177[6]);
        uint64_t v180 = *(void *)(v176 + v179);
        uint64_t v181 = v177[9];
        uint64_t v182 = *(void *)(v176 + v177[8]);
        uint64_t v183 = v177[11];
        LODWORD(v1063) = *(unsigned __int8 *)(v176 + v177[10]);
        int v184 = *(_DWORD *)(v176 + v183);
        LODWORD(v1064) = *(unsigned __int8 *)(v176 + v181);
        uint64_t v185 = (uint64_t)v1048;
        v1066 = &v1048[v177[14]];
        uint64_t v186 = *(void (**)(void))(v178 + 56);
        uint64_t v1074 = v178 + 56;
        uint64_t v187 = v1067;
        v186();
        (*(void (**)(uint64_t, char *, uint64_t))(v178 + 32))(v185, v27, v187);
        *(void *)(v185 + v177[5]) = 0;
        *(unsigned char *)(v185 + v177[6]) = (_BYTE)v1065;
        *(unsigned char *)(v185 + v177[10]) = (_BYTE)v1063;
        *(void *)(v185 + v177[8]) = v182;
        *(void *)(v185 + v177[7]) = v180;
        *(_DWORD *)(v185 + v177[11]) = v184;
        *(unsigned char *)(v185 + v177[9]) = (_BYTE)v1064;
        *(unsigned char *)(v185 + v177[12]) = 0;
        uint64_t v188 = v185 + v177[13];
        *(void *)uint64_t v188 = 0x3FF0000000000000;
        *(unsigned char *)(v188 + 8) = 0;
        unint64_t v189 = v1073;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
        id v190 = v1071;
        swift_retain();
        id v191 = v190;
        uint64_t v192 = v1066;
        outlined destroy of BodyTrackingComponent?((uint64_t)v1066, &demangling cache variable for type metadata for UUID?);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v186)(v192, 1, 1, v187);
        uint64_t v193 = v1049;
        outlined init with take of __RKEntityHideActionArguments(v185, v1049, type metadata accessor for __RKEntityStartAnimateActionArguments);
        uint64_t v194 = v1052;
        _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v193, v1052, type metadata accessor for __RKEntityStartAnimateActionArguments);
        swift_storeEnumTagMultiPayload();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        unint64_t v195 = (*(unsigned __int8 *)(v1053 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1053 + 80);
        uint64_t v196 = swift_allocObject();
        *(_OWORD *)(v196 + 16) = xmmword_22830EC60;
        _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(v194, v196 + v195, type metadata accessor for __RKEntityActionSpecification);
        uint64_t v197 = *(void *)(v1069.n128_u64[0] + v1068.n128_u64[0]);
        char *v38 = 0;
        *((void *)v38 + 1) = v196;
        v38[16] = 0;
        *((void *)v38 + 3) = v197;
        *((_WORD *)v38 + 16) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v198 = *(void *)&v1070.f64[0];
        makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)((uint64_t)v1072, 0x756F7247706F6F4CLL, (void *)0xE900000000000070, v191);
        if (v198)
        {

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_release();

          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v38, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v194, type metadata accessor for __RKEntityActionSpecification);
          object = (__objc2_class **)type metadata accessor for __RKEntityStartAnimateActionArguments;
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v193, type metadata accessor for __RKEntityStartAnimateActionArguments);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1069.n128_i64[0], type metadata accessor for __RKEntityStartAnimateActionArguments);
          uint64_t v1074 = v198;
        }
        else
        {
          v578 = v199;
          v1081.n128_u64[0] = v1075;
          v1081.n128_u64[1] = v189;
          v1082.n128_u64[0] = (unint64_t)v191;
          v1082.n128_u64[1] = (unint64_t)v1032;
          uint64_t v579 = __RKEntityActionSpecification.encode(to:at:)(&v1081, v199);
          uint64_t v1074 = 0;
          object = (__objc2_class **)v579;

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_release();

          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v38, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1052, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v193, type metadata accessor for __RKEntityStartAnimateActionArguments);
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v1069.n128_i64[0], type metadata accessor for __RKEntityStartAnimateActionArguments);
        }
        return object;
      }
      uint64_t v233 = v1075;
      unint64_t v234 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      uint64_t v235 = v1071;
      swift_retain();
      uint64_t v131 = v235;
      char v236 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      v237 = v1072;
      id v238 = objc_msgSend(v131, sel_newNodeAtPath_type_, v1072, v236);
      if (!v238)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v580 = swift_allocError();
        *v581 = v237;
        v581[1] = v236;
        v582 = v237;
        object = v236;
        uint64_t v1074 = v580;
        swift_willThrow();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v176, type metadata accessor for __RKEntityStartAnimateActionArguments);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v233);

        goto LABEL_85;
      }
      uint64_t v239 = v238;
      v1072 = v131;

      uint64_t v86 = v239;
      uint64_t v240 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x696E417472617453, 0xEE006E6F6974616DLL, v86);
      uint64_t v1074 = v240;
      if (v240)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v176, type metadata accessor for __RKEntityStartAnimateActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v233);
        goto LABEL_40;
      }
      v1071 = v86;
      v609 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v610 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      v611 = (void *)MEMORY[0x22A688A50](0xD000000000000015, 0x800000022835E050);
      id v612 = objc_msgSend(v610, sel_initWithString_, v611);

      if (!v612)
      {
LABEL_438:
        __break(1u);
        goto LABEL_439;
      }
      id v613 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v612);

      objc_msgSend(v1071, sel_setMetadataWithKey_value_, v609, v613);
      uint64_t v614 = v1075;
      v1081.n128_u64[0] = v1075;
      v1081.n128_u64[1] = v234;
      v615 = v1072;
      v1082.n128_u64[0] = (unint64_t)v1072;
      v1082.n128_u64[1] = (unint64_t)v1032;
      id v51 = (unsigned __int8 *)v1069.n128_u64[0];
      uint64_t v616 = __USDExportContext.pathTo(_:)(v1069.n128_i64[0]);
      if (!v616)
      {
        object = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v709 = swift_allocError();
        unsigned char *v710 = 0;
        uint64_t v1074 = v709;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v614);
        swift_release();

        id v211 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        goto LABEL_55;
      }
      v617 = (void *)v616;
      *(void *)&v1070.f64[0] = v239;
      v618 = (void *)*MEMORY[0x263F83F90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v619 = swift_allocObject();
      *(_OWORD *)(v619 + 16) = xmmword_22831E4E0;
      *(void *)(v619 + 32) = v617;
      v1081.n128_u64[0] = v619;
      specialized Array._endMutation()();
      object = (__objc2_class **)v1081.n128_u64[0];
      id v620 = v617;
      v621 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
      v622 = v1071;
      id v623 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v621, v618, 0);

      if (!v623)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v800 = swift_allocError();
        *(_OWORD *)uint64_t v801 = xmmword_228345790;
        *(void *)(v801 + 16) = v618;
        *(void *)(v801 + 24) = 0;
        *(float64_t *)(v801 + 32) = v1070.f64[0];
        v802 = v622;
        id v803 = v618;
        uint64_t v1074 = v800;
        swift_willThrow();

        v804 = v1072;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v212 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        uint64_t v213 = v1069.n128_u64[0];
        goto LABEL_382;
      }
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      id v624 = v623;
      Class v625 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v624, sel_setObjectPathArray_, v625);
      swift_bridgeObjectRelease_n();

      v626 = (void *)*MEMORY[0x263F83FB0];
      int v627 = *(unsigned __int8 *)(v1069.n128_u64[0] + started[6]);
      v1068.n128_u64[0] = (unint64_t)v620;
      if (v627)
      {
        v628 = &off_264838000;
        if (v627 == 1)
        {
          unint64_t v629 = 0xE600000000000000;
          uint64_t v630 = 0x65726F6E6769;
        }
        else
        {
          unint64_t v629 = 0xE400000000000000;
          uint64_t v630 = 1886352499;
        }
      }
      else
      {
        unint64_t v629 = 0xE500000000000000;
        uint64_t v630 = 0x776F6C6C61;
        v628 = &off_264838000;
      }
      id v821 = objc_allocWithZone(MEMORY[0x263F83F08]);
      v822 = (void *)MEMORY[0x22A688A50](v630, v629);
      swift_bridgeObjectRelease();
      object = (__objc2_class **)objc_msgSend(v821, (SEL)v628[159], v822);

      v823 = (void *)MEMORY[0x22A688A50](0xD000000000000018, 0x800000022834EDB0);
      v824 = v1071;
      v825 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v823, v626, 0);

      if (v825)
      {
        if (object)
        {
          objc_msgSend(v825, sel_setTokenValue_, object);

          v826 = (void *)*MEMORY[0x263F83F20];
          v827 = started;
          uint64_t v828 = v1069.n128_u64[0];
          double v829 = *(double *)(v1069.n128_u64[0] + started[7]);
          v830 = (void *)MEMORY[0x22A688A50](0x7472617473, 0xE500000000000000);
          v520 = v1071;
          id v831 = objc_msgSend(v1071, (SEL)&selRef_copyWithZone_ + 5, v830, v826, 0);

          if (v831)
          {
            objc_msgSend(v831, sel_setDoubleValue_, v829);

            double v832 = *(double *)(v828 + v827[8]);
            v833 = (void *)MEMORY[0x22A688A50](0x6E6F697461727564, 0xE800000000000000);
            id v834 = objc_msgSend(v520, (SEL)&selRef_copyWithZone_ + 5, v833, v826, 0);

            float64_t v835 = v1070.f64[0];
            if (v834)
            {
              v836 = implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)(v834);
              ((void (*)(double))v836)(v832);

              swift_release();
              v837 = (void *)*MEMORY[0x263F83F18];
              uint64_t v838 = v1074;
              id v839 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6465737265766572, 0xE800000000000000, (void *)*MEMORY[0x263F83F18], 0, *(unsigned char *)(v828 + v827[10]), v520);
              uint64_t v1074 = v838;
              if (!v838)
              {

                uint64_t v840 = v1074;
                id v841 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6F6974616D696E61, 0xEE0064656570536ELL, v826, 0, COERCE__INT64(*(float *)(v828 + v827[11])), 0, v520);
                uint64_t v1074 = v840;
                if (!v840)
                {

                  uint64_t v998 = v1074;
                  id v999 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7365737265766572, 0xE800000000000000, v837, 0, *(unsigned char *)(v828 + v827[9]), v520);
                  uint64_t v1074 = v998;
                  if (v998)
                  {
                    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v828, type metadata accessor for __RKEntityStartAnimateActionArguments);

                    outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                    goto LABEL_41;
                  }
                  v1019 = v999;

                  v1020 = v1072;
                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

                  swift_release();
                  v523 = type metadata accessor for __RKEntityStartAnimateActionArguments;
                  uint64_t v524 = v828;
                  goto LABEL_170;
                }
              }
              _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v828, type metadata accessor for __RKEntityStartAnimateActionArguments);

              outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_337:
              v923 = (void *)v1068.n128_u64[0];
LABEL_338:

              goto LABEL_41;
            }
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            uint64_t v898 = swift_allocError();
            *(_OWORD *)uint64_t v920 = xmmword_2283457E0;
            *(void *)(v920 + 16) = v826;
            *(void *)(v920 + 24) = 0;
            *(float64_t *)(v920 + 32) = v835;
          }
          else
          {
            lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
            uint64_t v898 = swift_allocError();
            *(_OWORD *)uint64_t v899 = xmmword_2283457F0;
            *(void *)(v899 + 16) = v826;
            *(void *)(v899 + 24) = 0;
            *(float64_t *)(v899 + 32) = v1070.f64[0];
          }
          v921 = v520;
          id v922 = v826;
          uint64_t v1074 = v898;
          swift_willThrow();
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v828, type metadata accessor for __RKEntityStartAnimateActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          goto LABEL_337;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v875 = swift_allocError();
        *(_OWORD *)uint64_t v876 = 0u;
        *(_OWORD *)(v876 + 16) = 0u;
        *(void *)(v876 + 32) = 0;
        uint64_t v1074 = v875;
        swift_willThrow();

        v824 = v1071;
        v846 = v1072;
        v847 = v1071;
        v844 = v1072;
        unint64_t v479 = v1069.n128_u64[0];
      }
      else
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v842 = swift_allocError();
        void *v843 = 0xD000000000000018;
        v843[1] = 0x800000022834EDB0;
        v843[2] = v626;
        v843[3] = 0;
        v843[4] = *(void *)&v1070.f64[0];
        v844 = v824;
        id v845 = v626;
        uint64_t v1074 = v842;
        swift_willThrow();
        v846 = v1072;
        v825 = v1072;
        unint64_t v479 = v1069.n128_u64[0];
        v847 = (__objc2_class **)v1068.n128_u64[0];
      }

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
      swift_release();

      v652 = type metadata accessor for __RKEntityStartAnimateActionArguments;
      goto LABEL_307;
    case 0xEu:
      uint64_t v200 = (uint64_t)v1059;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1059, type metadata accessor for __RKEntityTransformActionArguments);
      uint64_t v201 = v1075;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v202 = v1071;
      swift_retain();
      id v81 = v202;
      id v203 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      uint64_t v204 = v1072;
      id v205 = objc_msgSend(v81, sel_newNodeAtPath_type_, v1072, v203);
      if (!v205)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v1074 = swift_allocError();
        *unsigned __int8 v279 = v204;
        v279[1] = v203;
        char v280 = v204;
        object = v203;
        swift_willThrow();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v200, type metadata accessor for __RKEntityTransformActionArguments);
        uint64_t v247 = v201;
LABEL_88:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v247);

        swift_release();
        return object;
      }
      id v206 = v205;
      v1069.n128_u64[0] = (unint64_t)v81;

      id v207 = v206;
      uint64_t v208 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x726F66736E617254, 0xE90000000000006DLL, v207);
      uint64_t v1074 = v208;
      if (v208)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1059, type metadata accessor for __RKEntityTransformActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_53:
        swift_release();
        object = (__objc2_class **)v1069.n128_u64[0];
        goto LABEL_70;
      }
      v1071 = (__objc2_class **)v207;
      v551 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v552 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      v1070.f64[0] = -2.31584178e77;
      v553 = (void *)MEMORY[0x22A688A50]();
      id v554 = objc_msgSend(v552, sel_initWithString_, v553);

      if (!v554)
      {
LABEL_436:
        __break(1u);
LABEL_437:
        __break(1u);
        goto LABEL_438;
      }
      id v555 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v554);

      objc_msgSend(v1071, sel_setMetadataWithKey_value_, v551, v555);
      uint64_t v556 = v1075;
      v1081.n128_u64[0] = v1075;
      v1081.n128_u64[1] = v1073;
      v557 = (void *)v1069.n128_u64[0];
      v1082.n128_u64[0] = v1069.n128_u64[0];
      v1082.n128_u64[1] = v53;
      id v51 = v1059;
      uint64_t v558 = __USDExportContext.pathTo(_:)((uint64_t)v1059);
      if (!v558)
      {
        object = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v1074 = swift_allocError();
        unsigned char *v658 = 0;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v556);
        swift_release();

        id v211 = type metadata accessor for __RKEntityTransformActionArguments;
        goto LABEL_55;
      }
      v559 = (void *)v558;
      v1032 = (__objc2_class **)v53;
      v560 = (void *)*MEMORY[0x263F83F90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v561 = swift_allocObject();
      *(_OWORD *)(v561 + 16) = xmmword_22831E4E0;
      *(void *)(v561 + 32) = v559;
      v1081.n128_u64[0] = v561;
      specialized Array._endMutation()();
      object = (__objc2_class **)v1081.n128_u64[0];
      id v562 = v559;
      v563 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
      id v564 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v563, v560, 0);

      if (!v564)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v702 = swift_allocError();
        *(_OWORD *)uint64_t v703 = xmmword_228345790;
        *(void *)(v703 + 16) = v560;
        *(void *)(v703 + 24) = 0;
        *(void *)(v703 + 32) = v206;
        v704 = v1071;
        id v705 = v560;
        uint64_t v1074 = v702;
        swift_willThrow();

        v706 = (void *)v1069.n128_u64[0];
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v212 = type metadata accessor for __RKEntityTransformActionArguments;
        uint64_t v213 = (uint64_t)v1059;
        goto LABEL_382;
      }
      v1068.n128_u64[0] = (unint64_t)v562;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      id v565 = v564;
      Class v566 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v565, sel_setObjectPathArray_, v566);
      swift_bridgeObjectRelease_n();

      v567 = (__objc2_class **)*MEMORY[0x263F83F20];
      uint64_t v359 = (uint64_t)v1059;
      v568 = &v1059[v1044[8]];
      unsigned __int8 v569 = v568[4];
      double v570 = *(float *)v568;
      if (v569) {
        double v571 = 0.0;
      }
      else {
        double v571 = *(float *)v568;
      }
      v572 = v1071;
      uint64_t v573 = v1074;
      id v574 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, *(uint64_t *)&v571, v568[4], v1071);
      uint64_t v1074 = v573;
      if (v573)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v359, type metadata accessor for __RKEntityTransformActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        goto LABEL_53;
      }

      id v768 = objc_msgSend(v1072, sel_tokenValue);
      if (v768
        && (v769 = v768,
            id v770 = objc_msgSend(v768, sel_stringValue),
            v769,
            v770))
      {
        v1072 = v567;
        uint64_t v771 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v773 = v772;

        v1081.n128_u64[0] = v771;
        v1081.n128_u64[1] = v773;
        unint64_t v1076 = 47;
        unint64_t v1077 = 0xE100000000000000;
        uint64_t v1079 = 95;
        unint64_t v1080 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v774 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v776 = v775;
        swift_bridgeObjectRelease();
        v1081.n128_u64[0] = 47;
        v1081.n128_u64[1] = 0xE100000000000000;
        v777._uint64_t countAndFlagsBits = v774;
        v777._object = v776;
        String.append(_:)(v777);
        swift_bridgeObjectRelease();
        __n128 v778 = v1081;
        id v779 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v780 = (void *)MEMORY[0x22A688A50](v778.n128_u64[0], v778.n128_u64[1]);
        swift_bridgeObjectRelease();
        id v781 = objc_msgSend(v779, sel_initWithString_, v780);

        if (!v781)
        {
LABEL_440:
          __break(1u);
          JUMPOUT(0x22822EE28);
        }
        v782 = (void *)v1069.n128_u64[0];
        id v783 = objc_msgSend((id)v1069.n128_u64[0], sel_newNodeAtPath_type_, v781, *MEMORY[0x263F84028]);

        object = v1032;
        if (!v783)
        {
          v916 = v1071;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          uint64_t v917 = swift_allocError();
          unsigned char *v918 = 2;
          uint64_t v1074 = v917;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_release();

          goto LABEL_277;
        }
        uint64_t v784 = v359 + v1044[7];
        char v785 = *(unsigned char *)(v784 + 4);
        double v786 = 0.0;
        if ((v785 & 1) == 0) {
          double v786 = *(float *)v784;
        }
        *(double *)v1083 = v786;
        *(double *)&v1083[1] = v786;
        *(double *)&v1083[2] = v786;
        v1083[3] = 0;
        char v1084 = v785;
        closure #18 in __RKEntityActionSpecification.encode(to:at:)(v359, (uint64_t)v1085);
        closure #19 in __RKEntityActionSpecification.encode(to:at:)(v359, (uint64_t)v1086);
        USKNode.setTransform(scale:orientation:translation:)((uint64_t)v1083, (uint64_t)v1085, (uint64_t)v1086);
        v787 = (char *)*MEMORY[0x263F83F88];
        object = (__objc2_class **)objc_msgSend(v783, sel_path);
        v788 = v1071;
        uint64_t v789 = v1074;
        id v790 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x7261546D726F6678, 0xEB00000000746567, v787, 0, (uint64_t)object, v1071);
        uint64_t v1074 = v789;
        if (v789)
        {

          v791 = (void *)v1069.n128_u64[0];
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

          swift_release();
LABEL_277:
          v642 = type metadata accessor for __RKEntityTransformActionArguments;
          goto LABEL_278;
        }
        v924 = v790;
        v1065 = v787;
        v1066 = (char *)v783;

        v1081.n128_u8[0] = v569;
        unint64_t v925 = ((unint64_t)v569 << 32) & 0x100000000;
        if (v925) {
          uint64_t v926 = 0;
        }
        else {
          uint64_t v926 = *(void *)&v570;
        }
        uint64_t v927 = v1074;
        id v928 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, v1072, 0, v926, SBYTE4(v925), v788);
        v929 = v788;
        uint64_t v1074 = v927;
        if (v927)
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v359, type metadata accessor for __RKEntityTransformActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          goto LABEL_53;
        }

        v985 = (void *)*MEMORY[0x263F83FB0];
        int v986 = *(unsigned __int8 *)(v359 + v1044[9]);
        if (v986 == 2) {
          char v987 = 2;
        }
        else {
          char v987 = (v986 & 1) == 0;
        }
        uint64_t v988 = v1074;
        object = (__objc2_class **)_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF17RealityFoundation26__RKEntityMoveSelectionUSDO_s5NeverOSo8USKTokenCTg504_s10c7Kit29__e86ActionSpecificationO6encode2to2atSo7USKNodeCAA12__USDEncoderV_So13USKObjectPathCtKFSo8j22C0A10Foundation02__C16fG11USDOXEfU20_Tf1cn_n(v987);
        id v989 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(1701869940, 0xE400000000000000, v985, 0, (uint64_t)object, v929);
        uint64_t v1074 = v988;
        if (!v988)
        {

          uint64_t v1018 = v1034;
          outlined init with copy of UUID?(v359 + v1044[15], v1034);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1056 + 48))(v1018, 1, v1067) == 1)
          {
            outlined destroy of BodyTrackingComponent?(v1034, &demangling cache variable for type metadata for UUID?);
          }
          else
          {
            uint64_t v1028 = (uint64_t)v1033;
            (*(void (**)(char *, uint64_t, uint64_t))(v1056 + 32))(v1033, v1034, v1067);
            v1081.n128_u64[0] = v1075;
            v1081.n128_u64[1] = v1073;
            v1082.n128_u64[0] = v1069.n128_u64[0];
            v1082.n128_u64[1] = (unint64_t)v1032;
            v1029 = (void *)__USDExportContext.pathTo(_:)(v1028);

            (*(void (**)(char *, uint64_t))(v1056 + 8))(v1033, v1067);
          }
          uint64_t v1030 = v1044[11];
          v1081.n128_u8[0] = v1059[v1044[10]];
          LOBYTE(v1076) = v1059[v1030];
          __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(&v1081, &v1076, v1071);
          uint64_t v1074 = 0;
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1059, type metadata accessor for __RKEntityTransformActionArguments);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

          object = v1071;
          swift_release();
          v1031 = (void *)v1069.n128_u64[0];

          return object;
        }

        v990 = v1071;
        v991 = (void *)v1069.n128_u64[0];

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_release();
      }
      else
      {
        v809 = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v810 = swift_allocError();
        unsigned char *v811 = 2;
        uint64_t v1074 = v810;
        swift_willThrow();

        object = (__objc2_class **)v1069.n128_u64[0];
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_release();
      }

      goto LABEL_277;
    case 0xFu:
      float v67 = *(float *)v51;
      uint64_t v68 = v1075;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      id v69 = v1071;
      swift_retain();
      object = v69;
      int v70 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v71 = v1072;
      id v72 = objc_msgSend(object, sel_newNodeAtPath_type_, v1072, v70);
      if (!v72)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v241 = swift_allocError();
        *uint64_t v242 = v71;
        v242[1] = v70;
        uint64_t v243 = v71;
        char v244 = v70;
        uint64_t v1074 = v241;
        swift_willThrow();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v68);

        goto LABEL_69;
      }
      id v73 = v72;

      uint64_t v74 = v73;
      uint64_t v75 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(1953063255, 0xE400000000000000, v74);
      uint64_t v1074 = v75;
      if (!v75)
      {
        v1071 = v74;
        float v281 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v282 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        uint64_t v283 = (void *)MEMORY[0x22A688A50](0x746341746961572FLL, 0xEB000000006E6F69);
        id v284 = objc_msgSend(v282, sel_initWithString_, v283);

        if (v284)
        {
          id v285 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v284);

          v286 = v1071;
          objc_msgSend(v1071, sel_setMetadataWithKey_value_, v281, v285);

          int v287 = (void *)*MEMORY[0x263F83F20];
          uint64_t v288 = (void *)MEMORY[0x22A688A50](0x6E6F697461727564, 0xE800000000000000);
          id v289 = objc_msgSend(v286, sel_newPropertyWithName_type_role_, v288, v287, 0);

          if (v289)
          {
            objc_msgSend(v289, sel_setDoubleValue_, v67);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
            swift_release();

            return v286;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v631 = swift_allocError();
          *(_OWORD *)uint64_t v632 = xmmword_2283457E0;
          *(void *)(v632 + 16) = v287;
          *(void *)(v632 + 24) = 0;
          *(void *)(v632 + 32) = v73;
          id v633 = v287;
          uint64_t v1074 = v631;
          swift_willThrow();
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

          goto LABEL_69;
        }
        goto LABEL_425;
      }

      outlined consume of (@escaping @callee_guaranteed () -> ())?(v68);
      goto LABEL_68;
    case 0x10u:
      uint64_t v111 = (uint64_t)v51;
      uint64_t v112 = (uint64_t)v1066;
      outlined init with take of __RKEntityHideActionArguments(v111, (uint64_t)v1066, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v113 = v1075;
      unint64_t v114 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      uint64_t v115 = v1071;
      swift_retain();
      id v81 = v115;
      unint64_t v116 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      int v117 = v1072;
      id v118 = objc_msgSend(v81, sel_newNodeAtPath_type_, v1072, v116);
      if (v118)
      {
        id v119 = v118;
        v1072 = v81;

        uint64_t v86 = v119;
        uint64_t v120 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(0x746962724FLL, 0xE500000000000000, v86);
        uint64_t v1074 = v120;
        if (v120)
        {
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1066, type metadata accessor for __RKEntityOrbitEntityActionArguments);

          uint64_t v121 = v113;
LABEL_39:
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v121);
LABEL_40:

LABEL_41:
          swift_release();
          object = v1072;
LABEL_70:

          return object;
        }
        v1071 = v86;
        v379 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
        id v380 = objc_allocWithZone(MEMORY[0x263F83EE8]);
        v381 = (void *)MEMORY[0x22A688A50](0x6341746962724F2FLL, 0xEC0000006E6F6974);
        id v382 = objc_msgSend(v380, sel_initWithString_, v381);

        v383 = v1072;
        if (!v382) {
          goto LABEL_429;
        }
        id v384 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v382);

        objc_msgSend(v1071, sel_setMetadataWithKey_value_, v379, v384);
        uint64_t v385 = v1075;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v114;
        v1082.n128_u64[0] = (unint64_t)v383;
        v1082.n128_u64[1] = v53;
        v386 = v383;
        id v51 = (unsigned __int8 *)v1066;
        uint64_t v387 = __USDExportContext.pathTo(_:)((uint64_t)v1066);
        if (!v387)
        {
          object = v1071;

          lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
          uint64_t v1074 = swift_allocError();
          unsigned char *v643 = 0;
          swift_willThrow();

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v385);
          swift_release();

          id v211 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
          goto LABEL_55;
        }
        v388 = (void *)v387;
        v1032 = (__objc2_class **)v53;
        v389 = (void *)*MEMORY[0x263F83F90];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v390 = swift_allocObject();
        *(_OWORD *)(v390 + 16) = xmmword_22831E4E0;
        *(void *)(v390 + 32) = v388;
        v1081.n128_u64[0] = v390;
        specialized Array._endMutation()();
        object = (__objc2_class **)v1081.n128_u64[0];
        v391 = v388;
        v392 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
        id v393 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v392, v389, 0);

        if (!v393)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v669 = swift_allocError();
          *(_OWORD *)uint64_t v670 = xmmword_228345790;
          *(void *)(v670 + 16) = v389;
          *(void *)(v670 + 24) = 0;
          *(void *)(v670 + 32) = v119;
          v671 = v1071;
          id v672 = v389;
          uint64_t v1074 = v669;
          swift_willThrow();

          v673 = v1072;
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
          swift_bridgeObjectRelease();

          swift_release();
          uint64_t v212 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
          uint64_t v213 = (uint64_t)v1066;
          goto LABEL_382;
        }
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        swift_bridgeObjectRetain();
        id v394 = v393;
        Class v395 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v394, sel_setObjectPathArray_, v395);
        swift_bridgeObjectRelease_n();

        v396 = (void *)*MEMORY[0x263F83F88];
        id v175 = v1072;
        v1081.n128_u64[0] = v1075;
        v1081.n128_u64[1] = v1073;
        v1082.n128_u64[0] = (unint64_t)v1072;
        v1082.n128_u64[1] = (unint64_t)v1032;
        object = (__objc2_class **)__USDExportContext.pathTo(_:)((uint64_t)&v1066[*(int *)(v1045 + 20)]);
        v397 = (void *)MEMORY[0x22A688A50](0x7265746E6563, 0xE600000000000000);
        v398 = (__objc2_class **)objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v397, v396, 0);

        if (v398)
        {
          if (object)
          {
            objc_msgSend(v398, sel_setObjectPath_, object);

            object = (__objc2_class **)*MEMORY[0x263F83F20];
            v399 = (int *)v1045;
            v400 = v1066;
            v401 = (float *)&v1066[*(int *)(v1045 + 24)];
            int v402 = *((unsigned __int8 *)v401 + 4);
            double v403 = *v401;
            if (v402) {
              uint64_t v404 = 0;
            }
            else {
              uint64_t v404 = *(void *)&v403;
            }
            v405 = v1071;
            uint64_t v406 = v1074;
            id v407 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v404, v402, v1071);
            uint64_t v1074 = v406;
            if (!v406)
            {

              v848 = (float *)&v400[v399[7]];
              int v849 = *((unsigned __int8 *)v848 + 4);
              double v850 = *v848;
              uint64_t v851 = v849 ? 0 : *(void *)&v850;
              uint64_t v852 = v1074;
              id v853 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6974756C6F766572, 0xEB00000000736E6FLL, object, 0, v851, v849, v405);
              uint64_t v1074 = v852;
              if (!v852)
              {

                v1081.n128_u8[0] = v400[v399[10]];
                uint64_t v854 = v1074;
                __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(&v1081, *(void *)&v400[v399[8]], *(void *)&v400[v399[8] + 8], v400[v399[8] + 16], v405);
                uint64_t v1074 = v854;
                if (!v854)
                {
                  id v963 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x506F546E67696C61, 0xEB00000000687461, (void *)*MEMORY[0x263F83F18], 0, v400[v399[9]], v405);
                  uint64_t v1074 = 0;
                  v1006 = v963;

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                  swift_release();

                  _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v400, type metadata accessor for __RKEntityOrbitEntityActionArguments);
                  return v405;
                }
              }
            }
            _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v400, type metadata accessor for __RKEntityOrbitEntityActionArguments);

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
            swift_release();
            goto LABEL_46;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v805 = swift_allocError();
          *(_OWORD *)uint64_t v806 = 0u;
          *(_OWORD *)(v806 + 16) = 0u;
          *(void *)(v806 + 32) = 0;
          uint64_t v733 = v805;
          swift_willThrow();

          v391 = v1071;
          v731 = v175;
        }
        else
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          uint64_t v729 = swift_allocError();
          *(_OWORD *)uint64_t v730 = xmmword_2283457D0;
          *(void *)(v730 + 16) = v396;
          *(void *)(v730 + 24) = 0;
          *(void *)(v730 + 32) = v119;
          v731 = v1071;
          id v732 = v396;
          uint64_t v733 = v729;
          swift_willThrow();
          v398 = v175;
        }
        v807 = v175;
        id v51 = (unsigned __int8 *)v1066;
        uint64_t v1074 = v733;

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_release();

        id v211 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
        goto LABEL_55;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v1074 = swift_allocError();
      *double v254 = v117;
      v254[1] = (__objc2_class **)v116;
      uint64_t v255 = v117;
      object = v116;
      swift_willThrow();
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v112, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v247 = v113;
      goto LABEL_88;
    case 0x11u:
      uint64_t v122 = (uint64_t)v1063;
      outlined init with take of __RKEntityHideActionArguments((uint64_t)v51, (uint64_t)v1063, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      uint64_t v123 = v1075;
      unint64_t v124 = v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      uint64_t v125 = v1071;
      swift_retain();
      uint64_t v61 = v125;
      char v126 = (__objc2_class **)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      id v127 = v1072;
      id v128 = objc_msgSend(v61, sel_newNodeAtPath_type_, v1072, v126);
      if (!v128)
      {
        lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
        uint64_t v256 = swift_allocError();
        *v257 = v127;
        v257[1] = v126;
        int v258 = v127;
        object = v126;
        uint64_t v1074 = v256;
        swift_willThrow();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v122, type metadata accessor for __RKEntityLookAtCameraActionArguments);
        uint64_t v259 = v123;
LABEL_79:
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v259);

        goto LABEL_188;
      }
      id v129 = v128;
      v1072 = v61;

      object = v129;
      uint64_t v130 = *(void *)&v1070.f64[0];
      setInfoId(_:on:)(0x614374416B6F6F4CLL, 0xEC0000006172656DLL, object);
      uint64_t v1074 = v130;
      if (v130)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1063, type metadata accessor for __RKEntityLookAtCameraActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        goto LABEL_24;
      }
      v1071 = object;
      v408 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
      id v409 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      v410 = (void *)MEMORY[0x22A688A50](0xD000000000000013, 0x800000022835E090);
      id v411 = objc_msgSend(v409, sel_initWithString_, v410);

      uint64_t v412 = (uint64_t)v1063;
      if (!v411) {
        goto LABEL_430;
      }
      id v413 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v411);

      objc_msgSend(v1071, sel_setMetadataWithKey_value_, v408, v413);
      uint64_t v414 = v1075;
      v1081.n128_u64[0] = v1075;
      v1081.n128_u64[1] = v124;
      v415 = v1072;
      v1082.n128_u64[0] = (unint64_t)v1072;
      v1082.n128_u64[1] = v53;
      uint64_t v416 = __USDExportContext.pathTo(_:)(v412);
      if (!v416)
      {
        object = v1071;

        lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
        uint64_t v644 = swift_allocError();
        unsigned char *v645 = 0;
        uint64_t v1074 = v644;
        swift_willThrow();

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v414);
        swift_release();

        v646 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
        goto LABEL_230;
      }
      v417 = (void *)v416;
      *(void *)&v1070.f64[0] = v129;
      v1032 = (__objc2_class **)v53;
      v418 = (void *)*MEMORY[0x263F83F90];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v419 = swift_allocObject();
      *(_OWORD *)(v419 + 16) = xmmword_22831E4E0;
      *(void *)(v419 + 32) = v417;
      v1081.n128_u64[0] = v419;
      specialized Array._endMutation()();
      object = (__objc2_class **)v1081.n128_u64[0];
      id v420 = v417;
      v421 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
      id v422 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v421, v418, 0);

      if (!v422)
      {
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        uint64_t v674 = swift_allocError();
        *(_OWORD *)uint64_t v675 = xmmword_228345790;
        *(void *)(v675 + 16) = v418;
        *(void *)(v675 + 24) = 0;
        *(float64_t *)(v675 + 32) = v1070.f64[0];
        v676 = v1071;
        id v677 = v418;
        uint64_t v1074 = v674;
        swift_willThrow();

        v678 = v1072;
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
        swift_bridgeObjectRelease();

        swift_release();
        uint64_t v212 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
        uint64_t v213 = (uint64_t)v1063;
        goto LABEL_382;
      }
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      swift_bridgeObjectRetain();
      id v423 = v422;
      Class v424 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v423, sel_setObjectPathArray_, v424);
      swift_bridgeObjectRelease_n();

      uint64_t v425 = v1039;
      uint64_t v426 = (uint64_t)v1063;
      v427 = (float *)&v1063[*(int *)(v1039 + 20)];
      int v428 = *((unsigned __int8 *)v427 + 4);
      double v429 = *v427;
      if (v428) {
        uint64_t v430 = 0;
      }
      else {
        uint64_t v430 = *(void *)&v429;
      }
      object = v1071;
      uint64_t v431 = v1074;
      id v432 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v430, v428, v1071);
      uint64_t v1074 = v431;
      float64_t v433 = v1070.f64[0];
      if (v431)
      {
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v426, type metadata accessor for __RKEntityLookAtCameraActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
      }
      else
      {

        v734 = (void *)*MEMORY[0x263F83F28];
        v735 = (float32x2_t *)(v426 + *(int *)(v425 + 28));
        float64x2_t v736 = 0uLL;
        __n128 v737 = 0uLL;
        if ((v735[2].i8[0] & 1) == 0)
        {
          float64x2_t v736 = vcvtq_f64_f32(*v735);
          v737.n128_u64[1] = 0;
          v737.n128_f64[0] = COERCE_FLOAT(*(void *)&v735[1]);
        }
        __n128 v1068 = v737;
        __n128 v1069 = (__n128)v736;
        v738 = (void *)MEMORY[0x22A688A50](0x746E6F7266, 0xE500000000000000);
        object = v1071;
        v739 = v734;
        id v740 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v738, v734, 0);

        if (v740)
        {
          __n128 v1081 = v1069;
          __n128 v1082 = v1068;
          objc_msgSend(v740, sel_setDouble3Value_, &v1081);

          v741 = (float32x2_t *)&v1063[*(int *)(v425 + 36)];
          float64x2_t v742 = 0uLL;
          __n128 v743 = 0uLL;
          if ((v741[2].i8[0] & 1) == 0)
          {
            float64x2_t v742 = vcvtq_f64_f32(*v741);
            v743.n128_u64[1] = 0;
            v743.n128_f64[0] = COERCE_FLOAT(*(void *)&v741[1]);
          }
          __n128 v1068 = v743;
          __n128 v1069 = (__n128)v742;
          v744 = (void *)MEMORY[0x22A688A50](0x726F746365567075, 0xE800000000000000);
          v520 = v1071;
          id v745 = objc_msgSend(v1071, sel_newPropertyWithName_type_role_, v744, v739, 0);

          if (v745)
          {
            v746 = (void (*)(__n128, __n128))implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(v745);
            v746(v1069, v1068);

            v747 = v1072;
            swift_release();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);

            swift_release();
            v523 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
            uint64_t v524 = (uint64_t)v1063;
            goto LABEL_170;
          }
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          object = (__objc2_class **)swift_allocError();
          *(_OWORD *)uint64_t v891 = xmmword_2283457B0;
          *(void *)(v891 + 16) = v739;
          *(void *)(v891 + 24) = 0;
          *(float64_t *)(v891 + 32) = v433;
          v892 = v520;
          id v893 = v739;
          uint64_t v1074 = (uint64_t)object;
          swift_willThrow();
          _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1063, type metadata accessor for __RKEntityLookAtCameraActionArguments);

          outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
LABEL_24:
          swift_release();
          uint64_t v131 = v1072;
LABEL_86:

          return object;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        v864 = v739;
        uint64_t v865 = swift_allocError();
        *(_OWORD *)uint64_t v866 = xmmword_2283457C0;
        *(void *)(v866 + 16) = v864;
        *(void *)(v866 + 24) = 0;
        *(float64_t *)(v866 + 32) = v433;
        v867 = object;
        id v868 = v864;
        uint64_t v1074 = v865;
        swift_willThrow();
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1((uint64_t)v1063, type metadata accessor for __RKEntityLookAtCameraActionArguments);

        outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
      }

      goto LABEL_24;
    case 0x13u:
      uint64_t v76 = (uint64_t)v51;
      uint64_t v77 = (uint64_t)v1058;
      outlined init with take of __RKEntityHideActionArguments(v76, (uint64_t)v1058, type metadata accessor for __RKEntitySpinActionArguments);
      uint64_t v78 = v1075;
      id v79 = (__objc2_class **)v1073;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1075);
      Class v80 = v1071;
      swift_retain();
      id v81 = v80;
      uint64_t v82 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835DFF0);
      uint64_t v83 = v1072;
      id v84 = objc_msgSend(v81, sel_newNodeAtPath_type_, v1072, v82);
      if (v84)
      {
        uint64_t v85 = v84;
        v1072 = v81;

        uint64_t v86 = v85;
        uint64_t v87 = *(void *)&v1070.f64[0];
        setInfoId(_:on:)(1852403795, 0xE400000000000000, v86);
        uint64_t v1074 = v87;
        if (!v87)
        {
          v1071 = v86;
          uint64_t v290 = (void *)MEMORY[0x22A688A50](0x7374697265686E69, 0xED00007368746150);
          id v291 = objc_allocWithZone(MEMORY[0x263F83EE8]);
          uint64_t v292 = (void *)MEMORY[0x22A688A50](0x7463416E6970532FLL, 0xEB000000006E6F69);
          id v293 = objc_msgSend(v291, sel_initWithString_, v292);

          if (v293)
          {
            id v294 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithObjectPath_, v293);

            v295 = v1071;
            objc_msgSend(v1071, sel_setMetadataWithKey_value_, v290, v294);

            uint64_t v296 = v1075;
            v1081.n128_u64[0] = v1075;
            v1081.n128_u64[1] = (unint64_t)v79;
            uint64_t v297 = v1072;
            v1082.n128_u64[0] = (unint64_t)v1072;
            v1082.n128_u64[1] = v53;
            id v51 = v1058;
            uint64_t v298 = __USDExportContext.pathTo(_:)((uint64_t)v1058);
            if (v298)
            {
              uint64_t v299 = (void *)v298;
              v300 = (void *)*MEMORY[0x263F83F90];
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t v301 = swift_allocObject();
              *(_OWORD *)(v301 + 16) = xmmword_22831E4E0;
              *(void *)(v301 + 32) = v299;
              v1081.n128_u64[0] = v301;
              specialized Array._endMutation()();
              uint64_t v86 = v299;
              uint64_t v302 = MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
              uint64_t v303 = v295;
              uint64_t v304 = (void *)v302;
              id v305 = objc_msgSend(v303, sel_newPropertyWithName_type_role_, v302, v300, 0);

              if (!v305)
              {
                lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
                uint64_t v659 = swift_allocError();
                *(_OWORD *)uint64_t v660 = xmmword_228345790;
                *(void *)(v660 + 16) = v300;
                *(void *)(v660 + 24) = 0;
                *(void *)(v660 + 32) = v85;
                v661 = v1071;
                id v662 = v300;
                uint64_t v1074 = v659;
                swift_willThrow();

                object = v1072;
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v1075);
                swift_bridgeObjectRelease();

                swift_release();
                uint64_t v212 = type metadata accessor for __RKEntitySpinActionArguments;
                uint64_t v213 = (uint64_t)v1058;
                goto LABEL_382;
              }
              type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
              swift_bridgeObjectRetain();
              id v306 = v305;
              Class v307 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v306, sel_setObjectPathArray_, v307);
              swift_bridgeObjectRelease_n();

              uint64_t v308 = (void *)*MEMORY[0x263F83F20];
              char v309 = (int *)v1040;
              uint64_t v310 = (uint64_t)v1058;
              uint64_t v311 = &v1058[*(int *)(v1040 + 20)];
              int v312 = v311[4];
              double v313 = *(float *)v311;
              if (v312) {
                uint64_t v314 = 0;
              }
              else {
                uint64_t v314 = *(void *)&v313;
              }
              uint64_t v315 = v1071;
              uint64_t v316 = v1074;
              id v317 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6E6F697461727564, 0xE800000000000000, (void *)*MEMORY[0x263F83F20], 0, v314, v312, v1071);
              uint64_t v1074 = v316;
              if (v316)
              {
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v310, type metadata accessor for __RKEntitySpinActionArguments);

                uint64_t v318 = v1075;
              }
              else
              {

                uint64_t v711 = v310 + v309[6];
                int v712 = *(unsigned __int8 *)(v711 + 4);
                double v713 = *(float *)v711;
                if (v712) {
                  uint64_t v714 = 0;
                }
                else {
                  uint64_t v714 = *(void *)&v713;
                }
                uint64_t v715 = v1074;
                id v716 = specialized USKNode.newPropertyWithValue<A>(name:type:role:setter:value:)(0x6974756C6F766572, 0xEB00000000736E6FLL, v308, 0, v714, v712, v315);
                uint64_t v717 = v1075;
                uint64_t v1074 = v715;
                if (!v715)
                {

                  uint64_t v855 = v309[8];
                  v1081.n128_u8[0] = *(unsigned char *)(v310 + v309[7]);
                  uint64_t v856 = v1074;
                  __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(&v1081, *(void *)(v310 + v855), *(void *)(v310 + v855 + 8), *(unsigned char *)(v310 + v855 + 16), v315);
                  uint64_t v1074 = v856;
                  if (!v856)
                  {
                    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v310, type metadata accessor for __RKEntitySpinActionArguments);
                    outlined consume of (@escaping @callee_guaranteed () -> ())?(v717);

                    swift_release();
                    v919 = v1072;

                    return v315;
                  }
                  _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v310, type metadata accessor for __RKEntitySpinActionArguments);

                  outlined consume of (@escaping @callee_guaranteed () -> ())?(v717);
                  goto LABEL_41;
                }
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v310, type metadata accessor for __RKEntitySpinActionArguments);

                uint64_t v318 = v717;
              }
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v318);

              goto LABEL_40;
            }
            object = v79;

            lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
            uint64_t v634 = swift_allocError();
            unsigned char *v635 = 0;
            uint64_t v1074 = v634;
            swift_willThrow();

            outlined consume of (@escaping @callee_guaranteed () -> ())?(v296);
            swift_release();

            id v211 = type metadata accessor for __RKEntitySpinActionArguments;
LABEL_55:
            uint64_t v212 = v211;
            uint64_t v213 = (uint64_t)v51;
            goto LABEL_382;
          }
          goto LABEL_426;
        }
        uint64_t v88 = type metadata accessor for __RKEntitySpinActionArguments;
        uint64_t v89 = (uint64_t)v1058;
LABEL_38:
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v89, v88);

        uint64_t v121 = v78;
        goto LABEL_39;
      }
      lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError();
      uint64_t v1074 = swift_allocError();
      *double v245 = v83;
      v245[1] = (__objc2_class **)v82;
      double v246 = v83;
      object = v82;
      swift_willThrow();
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(v77, type metadata accessor for __RKEntitySpinActionArguments);
      uint64_t v247 = v78;
      goto LABEL_88;
    default:
      lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors();
      uint64_t v209 = swift_allocError();
      *id v210 = 1;
      uint64_t v1074 = v209;
      swift_willThrow();
      id v211 = type metadata accessor for __RKEntityActionSpecification;
      goto LABEL_55;
  }
}

void __RKEntityTriggerSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void __RKEntityInteractionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void *)@<X2>, void (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  long long v13 = *((_OWORD *)a1 + 1);
  outlined init with copy of Any(a2, (uint64_t)v15);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  if (swift_dynamicCast())
  {
    v15[0] = v9;
    v15[1] = v10;
    long long v16 = v13;
    uint64_t v11 = a3(v15);
    if (v5)
    {
    }
    else
    {
      uint64_t v12 = v11;
      a5[3] = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);

      *a5 = v12;
    }
  }
  else
  {
    a4();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityTriggerSpecification.encode(to:at:) and conformance Error #1 in __RKEntityTriggerSpecification.encode(to:at:));
  }
  return result;
}

uint64_t __RKEntityTriggerSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityTriggerSpecification.encode(to:at:));
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityTriggerSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityTriggerSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityTriggerSpecification.encode(to:at:));
}

void __RKEntityActionSpecification.encode(to:at:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

unint64_t lazy protocol witness table accessor for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:);
  if (!lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in __RKEntityActionSpecification.encode(to:at:) and conformance Error #1 in __RKEntityActionSpecification.encode(to:at:));
  }
  return result;
}

uint64_t __RKEntityActionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(a1, a2, a3, (uint64_t (*)(_OWORD *))__RKEntityActionSpecification.encode(to:at:));
}

uint64_t __RKEntityInteractionSpecification.encode(to:at:sceneSpecifier:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return a4(v6);
}

void protocol witness for __USDEncodablePublic.encode(to:at:) in conformance __RKEntityActionSpecification(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityActionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(a1, a2, a3, a4, a5, (uint64_t (*)(_OWORD *))__RKEntityActionSpecification.encode(to:at:));
}

uint64_t protocol witness for __USDEncodablePublic.encode(to:at:sceneSpecifier:) in conformance __RKEntityInteractionSpecification(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_OWORD *))
{
  long long v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  return a6(v8);
}

void *type metadata accessor for Error #1 in __RKEntityActionSpecification.encode(to:at:)()
{
  return &unk_26DCB6C88;
}

void *type metadata accessor for Error #1 in __RKEntityTriggerSpecification.encode(to:at:)()
{
  return &unk_26DCB6D18;
}

unsigned char *storeEnumTagSinglePayload for Error #1 in __RKEntityActionSpecification.encode(to:at:)(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22822F328);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Error #1 in __RKEntityInteractionSpecification.encode(to:at:)()
{
  return &unk_26DCB6DA8;
}

void __RKEntityActionSpecification.setEaseType(ease:easeType:on:)(unsigned char *a1, unsigned char *a2, void *a3)
{
  if (*a1)
  {
    unsigned int v4 = (void *)*MEMORY[0x263F83FB0];
    unint64_t v5 = 0xE200000000000000;
    uint64_t v6 = 28265;
    id v7 = 0;
    switch(*a2)
    {
      case 1:
        unint64_t v5 = 0xE300000000000000;
        uint64_t v6 = 7632239;
        goto LABEL_8;
      case 2:
        unint64_t v5 = 0xE500000000000000;
        uint64_t v6 = 0x74756F6E69;
        goto LABEL_8;
      case 3:
        goto LABEL_9;
      default:
LABEL_8:
        id v13 = objc_allocWithZone(MEMORY[0x263F83F08]);
        uint64_t v14 = (void *)MEMORY[0x22A688A50](v6, v5);
        swift_bridgeObjectRelease();
        id v7 = objc_msgSend(v13, sel_initWithString_, v14);

LABEL_9:
        uint64_t v15 = (void *)MEMORY[0x22A688A50](0x6570795465736165, 0xE800000000000000);
        id v11 = objc_msgSend(a3, sel_newPropertyWithName_type_role_, v15, v4, 0);

        if (!v11)
        {
          lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
          swift_allocError();
          *(_OWORD *)uint64_t v16 = xmmword_228345870;
          *(void *)(v16 + 16) = v4;
          *(void *)(v16 + 24) = 0;
          *(void *)(v16 + 32) = a3;
          id v17 = a3;
          id v18 = v4;
          goto LABEL_17;
        }
        if (v7)
        {
          objc_msgSend(v11, sel_setTokenValue_, v7);

          goto LABEL_18;
        }
        lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
        swift_allocError();
        *(_OWORD *)uint64_t v19 = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(void *)(v19 + 32) = 0;
        break;
    }
    goto LABEL_15;
  }
  uint64_t v8 = (void *)*MEMORY[0x263F83FB0];
  id v9 = objc_allocWithZone(MEMORY[0x263F83F08]);
  uint64_t v10 = (void *)MEMORY[0x22A688A50](1701736302, 0xE400000000000000);
  id v11 = objc_msgSend(v9, sel_initWithString_, v10);

  uint64_t v12 = (void *)MEMORY[0x22A688A50](0x6570795465736165, 0xE800000000000000);
  id v7 = objc_msgSend(a3, sel_newPropertyWithName_type_role_, v12, v8, 0);

  if (!v7)
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_228345870;
    *(void *)(v20 + 16) = v8;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = a3;
    id v21 = v8;
    id v22 = a3;
LABEL_15:
    swift_willThrow();
    goto LABEL_18;
  }
  if (v11)
  {
    objc_msgSend(v7, sel_setTokenValue_, v11);

    return;
  }
  lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
  swift_allocError();
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(void *)(v23 + 32) = 0;
LABEL_17:
  swift_willThrow();
  id v11 = v7;
LABEL_18:
}

void __RKEntityActionSpecification.setRotationAxis(direction:axis:on:)(unsigned char *a1, uint64_t a2, int a3, char a4, void *a5)
{
  double v6 = -1.0;
  if ((*a1 & 1) == 0) {
    double v6 = 1.0;
  }
  double v17 = v6;
  id v7 = (void *)*MEMORY[0x263F83F28];
  float64x2_t v8 = 0uLL;
  double v9 = 0.0;
  if ((a4 & 1) == 0)
  {
    float64x2_t v8 = vcvtq_f64_f32((float32x2_t)a2);
    double v9 = *(float *)&a3;
  }
  double v15 = v9;
  float64x2_t v16 = v8;
  uint64_t v10 = (void *)MEMORY[0x22A688A50](1936291937, 0xE400000000000000);
  id v11 = objc_msgSend(a5, sel_newPropertyWithName_type_role_, v10, v7, 0);

  if (v11)
  {
    v18[0] = vmulq_n_f64(v16, v17);
    v18[1] = COERCE_UNSIGNED_INT64(v17 * v15);
    objc_msgSend(v11, sel_setDouble3Value_, v18);
  }
  else
  {
    lazy protocol witness table accessor for type USKNode.NewPropertyError and conformance USKNode.NewPropertyError();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_228345880;
    *(void *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = a5;
    id v13 = v7;
    id v14 = a5;
    swift_willThrow();
  }
}

void makeParentNode #1 (from:baseName:) in __RKEntityActionSpecification.encode(to:at:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  USKObjectPath.deletingLastPathComponent()();
  float64x2_t v8 = v7;
  uint64_t v27 = a2;
  USKObjectPath.appendingPathComponent(_:)(a2, a3);
  uint64_t v10 = v9;
  id v26 = a4;
  id v11 = objc_msgSend(a4, sel_nodeAtPath_, v9);

  if (v11)
  {
    uint64_t v12 = 0;
    while (!__OFADD__(v12, 1))
    {
      swift_bridgeObjectRetain();
      v13._uint64_t countAndFlagsBits = 95;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v8, sel_stringValue);
      if (v15)
      {
        float64x2_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v19 = 0xE000000000000000;
      }
      v20._uint64_t countAndFlagsBits = 47;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = v27;
      v21._object = a3;
      String.append(_:)(v21);
      id v22 = objc_allocWithZone(MEMORY[0x263F83EE8]);
      uint64_t v23 = (void *)MEMORY[0x22A688A50](v17, v19);
      swift_bridgeObjectRelease();
      id v24 = objc_msgSend(v22, sel_initWithString_, v23);

      if (!v24) {
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();

      id v25 = objc_msgSend(v26, sel_nodeAtPath_, v24);
      ++v12;
      uint64_t v10 = v24;
      if (!v25) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_9:
  }
}

uint64_t (*implicit closure #6 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #7 in implicit closure #6 in __RKEntityActionSpecification.encode(to:at:);
}

uint64_t (*implicit closure #22 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #7 in implicit closure #6 in __RKEntityActionSpecification.encode(to:at:);
}

id (*implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(void *a1))(__n128 a1, __n128 a2)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #43 in implicit closure #42 in __RKEntityActionSpecification.encode(to:at:);
}

id (*implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)(void *a1))()
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #71 in implicit closure #70 in __RKEntityActionSpecification.encode(to:at:);
}

uint64_t closure #18 in __RKEntityActionSpecification.encode(to:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  unint64_t v5 = (float32x2_t *)(a1 + *(int *)(result + 24));
  __int8 v6 = v5[2].i8[0];
  float64x2_t v7 = 0uLL;
  float64x2_t v8 = 0uLL;
  if ((v6 & 1) == 0)
  {
    float64x2_t v7 = vcvtq_f64_f32(*v5);
    float64x2_t v8 = vcvtq_f64_f32(v5[1]);
  }
  *(float64x2_t *)a2 = v7;
  *(float64x2_t *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t closure #19 in __RKEntityActionSpecification.encode(to:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityTransformActionArguments(0);
  unint64_t v5 = (float32x2_t *)(a1 + *(int *)(result + 20));
  __int8 v6 = v5[2].i8[0];
  if (v6)
  {
    float64x2_t v7 = 0uLL;
    double v8 = 0.0;
  }
  else
  {
    float64x2_t v7 = vcvtq_f64_f32(*v5);
    double v8 = COERCE_FLOAT(*(void *)&v5[1]);
  }
  *(float64x2_t *)a2 = v7;
  *(double *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

id (*implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(void *a1))(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return partial apply for implicit closure #109 in implicit closure #108 in __RKEntityActionSpecification.encode(to:at:);
}

void closure #24 in __RKEntityActionSpecification.encode(to:at:)(unsigned char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = 0x6C756679616C70;
  if (*a1 != 1)
  {
    uint64_t v4 = 1684826487;
    unint64_t v3 = 0xE400000000000000;
  }
  if (*a1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6369736162;
  }
  if (*a1) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  id v7 = objc_allocWithZone(MEMORY[0x263F83F08]);
  double v8 = (void *)MEMORY[0x22A688A50](v5, v6);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithString_, v8);

  *a2 = v9;
}

unint64_t lazy protocol witness table accessor for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors;
  if (!lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors;
  if (!lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionSpecificationsUSDEncodingErrors and conformance InteractionSpecificationsUSDEncodingErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USKScene.NewNodeError and conformance USKScene.NewNodeError()
{
  unint64_t result = lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError;
  if (!lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKScene.NewNodeError and conformance USKScene.NewNodeError);
  }
  return result;
}

uint64_t sub_22822FF14()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for implicit closure #43 in implicit closure #42 in __RKEntityActionSpecification.encode(to:at:)(__n128 a1, __n128 a2)
{
  unint64_t v3 = *(void **)(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return objc_msgSend(v3, sel_setDouble3Value_, v5);
}

id partial apply for implicit closure #71 in implicit closure #70 in __RKEntityActionSpecification.encode(to:at:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setDoubleValue_);
}

id partial apply for implicit closure #109 in implicit closure #108 in __RKEntityActionSpecification.encode(to:at:)(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + 16), sel_setTokenValue_, a1);
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  Swift::String v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(a1 + 16);
  v28[1] = a1;
  if (v14)
  {
    float64x2_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v15 = v8 + 16;
    uint64_t v35 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v32 = *(void *)(v15 + 56);
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
    id v30 = (uint64_t *)(a5 + 16);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v29 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    uint64_t v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v28[0] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v28[3] = v15;
    v28[4] = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      v35(v13, v17, v7);
      unint64_t v18 = *v34;
      (*v34)(v13, 0, 1, v7);
      if ((*v33)(v13, 1, v7) == 1) {
        break;
      }
      (*v31)(v10, v13, v7);
      unint64_t v19 = v30;
      swift_beginAccess();
      uint64_t v20 = *v19;
      if (*(void *)(*v19 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if (v22)
        {
          uint64_t v23 = *(void **)(*(void *)(v20 + 56) + 8 * v21);
          id v24 = v23;
        }
        else
        {
          uint64_t v23 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = 0;
      }
      void v36[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
      v36[0] = v23;
      outlined init with copy of Any((uint64_t)v36, (uint64_t)v37);
      outlined destroy of __USKObjectPathWrapper((uint64_t)v36);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      if (swift_dynamicCast())
      {
        uint64_t v25 = (*v29)(v10, v7);
        MEMORY[0x22A688E10](v25);
        if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        (*v29)(v10, v7);
      }
      v17 += v32;
      if (!--v14)
      {
        v18(v13, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    id v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
    v26(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t outlined destroy of __USKObjectPathWrapper(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of __RKEntityHideActionArguments(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for InteractionSpecificationsUSDEncodingErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282305A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractionSpecificationsUSDEncodingErrors()
{
  return &type metadata for InteractionSpecificationsUSDEncodingErrors;
}

uint64_t static ObservableComponent<>.__size.getter()
{
  return 24;
}

uint64_t static ObservableComponent<>.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(const char **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  swift_retain();
  swift_retain();
  CodableObservableComponentStorage.value.getter(v9, v10, a2, a3, a4, a5);
  swift_release();

  return swift_release();
}

uint64_t CodableObservableComponentStorage.value.getter@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (a2)
  {
    uint64_t v8 = a2 + *(void *)(*(void *)a2 + 120);
    swift_beginAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a6, v8, a3);
  }
  else
  {
    return CodableObservableComponentStorage.decodedJSON()(a1, a3, a4, a5, a6);
  }
}

uint64_t static ObservableComponent<>.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  float64x2_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v33 - v18;
  outlined init with copy of __REAssetService(v20, (uint64_t)&v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, a5);
  if (a4)
  {
    uint64_t v38 = a5;
    uint64_t v39 = a6;
    uint64_t v40 = a7;
    uint64_t v41 = a8;
    unint64_t v21 = (void *)type metadata accessor for CodableObservableComponentStorage();
    specialized CodableObservableComponentStorage.value.setter((uint64_t)v16, v21);
    char v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, a5);
    swift_retain();
    swift_retain();
    CodableObservableComponentStorage.notifyValueSubscribers()();
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v22)(v19, a5);
  }
  else
  {
    uint64_t v24 = specialized CodableObservableComponentStorage.init(_:)((uint64_t)v16, a5, a6, a7, a8);
    uint64_t v34 = a7;
    uint64_t v35 = a8;
    uint64_t v25 = v24;
    uint64_t v26 = a6;
    uint64_t v28 = v27;
    uint64_t v36 = a2;
    uint64_t v30 = v29;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v16, a5);
    v37[0] = v25;
    v37[1] = v28;
    v37[2] = v30;
    uint64_t v38 = a5;
    uint64_t v39 = v26;
    uint64_t v40 = v34;
    uint64_t v41 = v35;
    uint64_t v32 = type metadata accessor for CodableObservableComponentStorage();
    _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v37, v36, v32);
    return ((uint64_t (*)(char *, uint64_t))v31)(v19, a5);
  }
}

{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  float64x2_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v30 - v18;
  outlined init with copy of __REAssetService(v20, (uint64_t)&v35);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if (a4)
  {
    uint64_t v35 = a5;
    uint64_t v36 = a6;
    uint64_t v37 = a7;
    uint64_t v38 = a8;
    unint64_t v21 = (void *)type metadata accessor for CodableObservableComponentStorage();
    CodableObservableComponentStorage<>.setValueIfChanged(_:)((uint64_t)v19, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v19, a5);
    uint64_t v23 = specialized CodableObservableComponentStorage.init(_:)((uint64_t)v16, a5, a6, a7, a8);
    uint64_t v32 = a6;
    uint64_t v33 = a2;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v31 = a8;
    v28(v16, a5);
    v34[0] = v23;
    v34[1] = v25;
    _OWORD v34[2] = v27;
    uint64_t v35 = a5;
    uint64_t v36 = v32;
    uint64_t v37 = a7;
    uint64_t v38 = v31;
    uint64_t v29 = type metadata accessor for CodableObservableComponentStorage();
    _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v34, v33, v29);
    return ((uint64_t (*)(char *, uint64_t))v28)(v19, a5);
  }
}

Swift::Void __swiftcall CodableObservableComponentStorage.notifyValueSubscribers()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ObservableComponentStorage();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - v4;
  if (v1)
  {
    uint64_t v6 = v1 + *(void *)(*(void *)v1 + 120);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    ObservableComponentStorage.notifyValueSubscribers()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t static ObservableComponent<>.__free(to:offset:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CodableObservableComponentStorage();
  CodableObservableComponentStorage.cleanup()();
  UnsafeMutablePointer.deinitialize(count:)();
  return MEMORY[0x22A689520](a1, v2);
}

Swift::Void __swiftcall CodableObservableComponentStorage.cleanup()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ObservableComponentStorage();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v6 = v1[1];
  if (v6)
  {
    uint64_t v7 = v6 + *(void *)(*(void *)v6 + 120);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
    ObservableComponentStorage.cleanup()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  if (*v1)
  {
    RECIntrospectionFree();
    *uint64_t v1 = 0;
  }
}

uint64_t static ObservableComponent<>.__publisher(buffer:)()
{
  uint64_t v0 = (void *)type metadata accessor for CodableObservableComponentStorage();
  specialized CodableObservableComponentStorage.publisher()(v0);
  return swift_retain();
}

uint64_t static ObservableComponent<>.__addIntrospectionData(_:)(uint64_t result)
{
  if (result) {
    return REStructBuilderAddMemberDataTypeWithTag();
  }
  return result;
}

void CodableObservableComponentStorage<>.setValueIfChanged(_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CodableObservableComponentStorage.value.getter(*(const char **)v2, *(void *)(v2 + 8), v5, a2[3], a2[4], (uint64_t)v8);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    specialized CodableObservableComponentStorage.value.setter(a1, a2);
    CodableObservableComponentStorage.notifyValueSubscribers()();
  }
}

uint64_t CodableObservableComponentStorage.Box.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 88) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 120), a1);
  return v2;
}

uint64_t CodableObservableComponentStorage.Box.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 88) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));

  return swift_deallocClassInstance();
}

uint64_t CodableObservableComponentStorage.decodedJSON()@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Data.Deallocator();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 16))(a2, a3, v12);
  }
  v21[1] = a4;
  id v21[2] = a5;
  uint64_t v15 = strlen(a1);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, *MEMORY[0x263F06F00], v10);
  Data.Deallocator._deallocator.getter();
  if (v15)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v15 = specialized Data._Representation.init(_:count:)(v16, v15);
    unint64_t v18 = v17;
    swift_release();
  }
  else
  {
    uint64_t v20 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
    v20(a1, 0);
    swift_release();
    swift_release();
    unint64_t v18 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  return outlined consume of Data._Representation(v15, v18);
}

uint64_t CodableObservableComponentStorage.updateJSON(value:)()
{
  uint64_t v1 = v0;
  if (*v0)
  {
    RECIntrospectionFree();
    uint64_t *v0 = 0;
  }
  if (!v0[2])
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    v0[2] = JSONEncoder.init()();
  }
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  unint64_t v5 = v3 >> 62;
  uint64_t v6 = v2;
  uint64_t v7 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_33;
      }
      if (HIDWORD(v2) - v2 == 0x7FFFFFFF) {
        goto LABEL_27;
      }
      goto LABEL_13;
    case 2uLL:
      uint64_t v9 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v2 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (v10) {
        goto LABEL_34;
      }
      if (v7 >= 0x7FFFFFFF) {
        goto LABEL_27;
      }
      if (v5 == 2) {
        goto LABEL_15;
      }
LABEL_13:
      LODWORD(v7) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_35;
      }
      uint64_t v7 = (int)v7;
LABEL_15:
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v11 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x22823162CLL);
      }
      if (v11 > 0x7FFFFFFF) {
        goto LABEL_32;
      }
      uint64_t v12 = RECIntrospectionAlloc();
      *uint64_t v1 = v12;
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = 0;
        switch((int)v5)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v6), v6)) {
              goto LABEL_36;
            }
            uint64_t v14 = HIDWORD(v6) - (int)v6;
LABEL_23:
            Data.copyBytes(to:count:)();
            goto LABEL_26;
          case 2:
            if (__OFSUB__(*(void *)(v6 + 24), *(void *)(v6 + 16))) {
              goto LABEL_37;
            }
            Data.copyBytes(to:count:)();
            uint64_t v16 = *(void *)(v6 + 16);
            uint64_t v15 = *(void *)(v6 + 24);
            uint64_t v14 = v15 - v16;
            if (__OFSUB__(v15, v16)) {
              goto LABEL_38;
            }
LABEL_26:
            *(unsigned char *)(v13 + v14) = 0;
            break;
          case 3:
            goto LABEL_23;
          default:
            uint64_t v14 = BYTE6(v4);
            goto LABEL_23;
        }
      }
LABEL_27:
      return outlined consume of Data._Representation(v6, v4);
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v7 = BYTE6(v3);
      goto LABEL_15;
  }
}

uint64_t specialized CodableObservableComponentStorage.value.setter(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a2[2];
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = type metadata accessor for ObservableComponentStorage();
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v21 - v14;
  uint64_t v16 = *(void *)(v3 + 8);
  if (!v16)
  {
    uint64_t v17 = a2[4];
    uint64_t v18 = a2[5];
    v21[1] = v6;
    id v21[2] = v13;
    v21[3] = v11;
    void v21[4] = v17;
    v21[5] = v18;
    v21[0] = type metadata accessor for CodableObservableComponentStorage.Box();
    CodableObservableComponentStorage.decodedJSON()(*(const char **)v3, v6, v11, v17, (uint64_t)v9);
    ObservableComponentStorage.init(_:)((uint64_t)v9, v6, (uint64_t)v15);
    uint64_t v16 = CodableObservableComponentStorage.Box.__allocating_init(_:)((uint64_t)v15);
    *(void *)(v3 + 8) = v16;
  }
  uint64_t v19 = v16 + *(void *)(*(void *)v16 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v19, a1, v6);
  swift_endAccess();
  return CodableObservableComponentStorage.updateJSON(value:)();
}

uint64_t specialized CodableObservableComponentStorage.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObservableComponentStorage();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v25 = 0;
  uint64_t v22 = a5;
  uint64_t v23 = 0;
  uint64_t v18 = a2;
  uint64_t v19 = v16;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  type metadata accessor for CodableObservableComponentStorage.Box();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  ObservableComponentStorage.init(_:)((uint64_t)v12, a2, (uint64_t)v15);
  uint64_t v24 = CodableObservableComponentStorage.Box.__allocating_init(_:)((uint64_t)v15);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  type metadata accessor for CodableObservableComponentStorage();
  CodableObservableComponentStorage.updateJSON(value:)();
  return v23;
}

uint64_t type metadata accessor for CodableObservableComponentStorage()
{
  return swift_getGenericMetadata();
}

uint64_t specialized CodableObservableComponentStorage.publisher()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[2];
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = type metadata accessor for ObservableComponentStorage();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - v10;
  if (!*(void *)(v2 + 8))
  {
    uint64_t v13 = a1[4];
    uint64_t v12 = a1[5];
    v16[1] = v4;
    _OWORD v16[2] = v9;
    _OWORD v16[3] = v8;
    _OWORD v16[4] = v13;
    void v16[5] = v12;
    type metadata accessor for CodableObservableComponentStorage.Box();
    CodableObservableComponentStorage.decodedJSON()(*(const char **)v2, v4, v8, v13, (uint64_t)v6);
    ObservableComponentStorage.init(_:)((uint64_t)v6, v4, (uint64_t)v11);
    *(void *)(v2 + 8) = CodableObservableComponentStorage.Box.__allocating_init(_:)((uint64_t)v11);
  }
  swift_beginAccess();
  uint64_t v14 = specialized ObservableComponentStorage.publisher()(v9);
  swift_endAccess();
  return v14;
}

uint64_t type metadata completion function for CodableObservableComponentStorage.Box()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CodableObservableComponentStorage.Box()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for CodableObservableComponentStorage()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for CodableObservableComponentStorage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CodableObservableComponentStorage(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CodableObservableComponentStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableObservableComponentStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableObservableComponentStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t AnimationState.defaultSource.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(v2 + 24))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceFloatValue())
      {
        uint64_t v5 = *(void *)(a1 + 16);
LABEL_22:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceDoubleValue())
      {
        uint64_t v5 = *(void *)(a1 + 16);
        goto LABEL_22;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceVector2FValue())
      {
        uint64_t v8 = &demangling cache variable for type metadata for SIMD2<Float>;
LABEL_20:
        __swift_instantiateConcreteTypeFromMangledName(v8);
LABEL_21:
        uint64_t v5 = *(void *)(a1 + 16);
        goto LABEL_22;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceVector3FValue())
      {
        uint64_t v8 = &demangling cache variable for type metadata for SIMD3<Float>;
        goto LABEL_20;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceVector4FValue())
      {
        uint64_t v8 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
        goto LABEL_20;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultSourceQuaternionFValue())
      {
        type metadata accessor for simd_quatf(0);
        goto LABEL_21;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
      if (swift_dynamicCast())
      {
        swift_dynamicCast();
        AnimationState<>.defaultSource.getter(v9);
        if (v9[0])
        {
          v9[1] = v9[0];
          uint64_t v5 = *(void *)(a1 + 16);
          goto LABEL_22;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    if (!RETimelineEventGetDefaultSourceSRTValue()) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
    }
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    type metadata accessor for Optional();
    return swift_dynamicCast();
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v6(a2, 1, 1);
  }
}

uint64_t AnimationState<>.defaultSource.getter@<X0>(void *a1@<X8>)
{
  return AnimationState<>.defaultSource.getter(MEMORY[0x263F37560], a1);
}

uint64_t AnimationState.defaultTarget.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(v2 + 24))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetFloatValue())
      {
        uint64_t v5 = *(void *)(a1 + 16);
LABEL_22:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetDoubleValue())
      {
        uint64_t v5 = *(void *)(a1 + 16);
        goto LABEL_22;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetVector2FValue())
      {
        uint64_t v8 = &demangling cache variable for type metadata for SIMD2<Float>;
LABEL_20:
        __swift_instantiateConcreteTypeFromMangledName(v8);
LABEL_21:
        uint64_t v5 = *(void *)(a1 + 16);
        goto LABEL_22;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetVector3FValue())
      {
        uint64_t v8 = &demangling cache variable for type metadata for SIMD3<Float>;
        goto LABEL_20;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetVector4FValue())
      {
        uint64_t v8 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
        goto LABEL_20;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
    if (swift_dynamicCast())
    {
      if (RETimelineEventGetDefaultTargetQuaternionFValue())
      {
        type metadata accessor for simd_quatf(0);
        goto LABEL_21;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
      if (swift_dynamicCast())
      {
        swift_dynamicCast();
        AnimationState<>.defaultTarget.getter(v9);
        if (v9[0])
        {
          v9[1] = v9[0];
          uint64_t v5 = *(void *)(a1 + 16);
          goto LABEL_22;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    }
    if (!RETimelineEventGetDefaultTargetSRTValue()) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8)
    }
                                                                          + 56))(a2, 1, 1, *(void *)(a1 + 16));
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    type metadata accessor for Optional();
    return swift_dynamicCast();
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v6(a2, 1, 1);
  }
}

uint64_t AnimationState<>.defaultTarget.getter@<X0>(void *a1@<X8>)
{
  return AnimationState<>.defaultSource.getter(MEMORY[0x263F37570], a1);
}

uint64_t AnimationState<>.defaultSource.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4
    && (uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))result,
        uint64_t result = RETimelineEventGetSkeletalPoseJointCount(),
        result >= 1))
  {
    uint64_t v6 = result;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    v5(v4, v7 + 32, v6);
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = (long long *)(v7 + 64);
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    do
    {
      long long v14 = *(v8 - 1);
      long long v15 = *(v8 - 2);
      long long v13 = *v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      if (v11 >= v10 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
      }
      void v9[2] = v11 + 1;
      uint64_t v12 = &v9[6 * v11];
      long long v12[2] = v15;
      void v12[3] = v14;
      id v12[4] = v13;
      v8 += 3;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a2 = v9;
  return result;
}

uint64_t AnimationState.storeAnimatedValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388]((char *)&v79 - v11);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v13);
  MEMORY[0x270FA5388](v14);
  MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v79 - v19;
  MEMORY[0x270FA5388](v21);
  id v93 = (char *)&v79 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v79 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v79 - v27;
  MEMORY[0x270FA5388](v29);
  id v95 = (char *)&v79 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v79 - v32;
  MEMORY[0x270FA5388](v34);
  uint64_t v47 = (char *)&v79 - v46;
  uint64_t v48 = v3[3];
  if (!v48) {
    return 0;
  }
  uint64_t v89 = v20;
  uint64_t v91 = v42;
  uint64_t v87 = v41;
  float64_t v90 = v40;
  uint64_t v85 = v39;
  uint64_t v88 = v38;
  uint64_t v83 = v37;
  uint64_t v86 = v36;
  uint64_t v82 = v35;
  uint64_t v84 = v45;
  uint64_t v81 = v44;
  uint64_t v80 = v43;
  uint64_t v49 = *v3;
  uint64_t v50 = v3[1];
  uint64_t v51 = v3[2];
  uint64_t v97 = *v3;
  uint64_t v98 = v50;
  uint64_t v99 = v51;
  uint64_t v96 = v48;
  uint64_t v100 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
  uint64_t v94 = a2;
  int v52 = swift_dynamicCast();
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v54 = a1;
  uint64_t v55 = a3;
  uint64_t v56 = a3;
  uint64_t v92 = v7 + 16;
  uint64_t v57 = v53;
  v53(v47, a1, v56);
  if (!v52)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v47, v55);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v33, v47, v55);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
    int v59 = swift_dynamicCast();
    uint64_t v60 = a1;
    v57(v28, a1, v55);
    uint64_t v61 = v7;
    if (v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v25, v28, v55);
      if (swift_dynamicCast())
      {
        v57(v95, a1, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedDoubleValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v62 = v96;
    uint64_t v100 = v96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
    int v63 = swift_dynamicCast();
    id v64 = v93;
    char v65 = (void (*)(uint64_t, uint64_t, uint64_t))v57;
    v57(v93, v54, v55);
    if (v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v89, v64, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      if (swift_dynamicCast())
      {
        v57(v95, v54, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector2FValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v64, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
    int v66 = swift_dynamicCast();
    float v67 = v91;
    v57(v91, v54, v55);
    if (v66)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v87, v67, v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      if (swift_dynamicCast())
      {
        v57(v95, v54, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector3FValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v67, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
    int v68 = swift_dynamicCast();
    id v69 = v90;
    v57(v90, v54, v55);
    if (v68)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v85, v69, v55);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if (swift_dynamicCast())
      {
        v57(v95, v54, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedVector4FValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v69, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
    int v70 = swift_dynamicCast();
    id v71 = v88;
    v57(v88, v54, v55);
    if (v70)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v83, v71, v55);
      type metadata accessor for simd_quatf(0);
      if (swift_dynamicCast())
      {
        v57(v95, v54, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedQuaternionFValue();
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v71, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
    int v72 = swift_dynamicCast();
    uint64_t v73 = v86;
    v65(v86, v54, v55);
    if (v72)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v82, v73, v55);
      if (swift_dynamicCast())
      {
        v65((uint64_t)v95, v54, v55);
        swift_dynamicCast();
        return RETimelineEventSetAnimatedSRTValue();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v73, v55);
    }
    uint64_t v97 = v49;
    uint64_t v98 = v50;
    uint64_t v99 = v51;
    uint64_t v100 = v62;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
    int v74 = swift_dynamicCast();
    uint64_t v75 = v84;
    v65(v84, v60, v55);
    if (v74)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v81, v75, v55);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = v49;
        uint64_t v98 = v50;
        uint64_t v99 = v51;
        uint64_t v100 = v96;
        swift_dynamicCast();
        uint64_t v76 = v102;
        v65(v80, v60, v55);
        swift_dynamicCast();
        uint64_t v77 = v101;
        if (v76 && RETimelineEventGetSkeletalPoseJointCount() == *(void *)(v77 + 16))
        {
          uint64_t v58 = RETimelineEventSetAnimatedSkeletalPoseJoints();
          swift_bridgeObjectRelease();
          return v58;
        }
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v75, v55);
    }
    return 0;
  }
  v57(v95, a1, v55);
  swift_dynamicCast();
  return RETimelineEventSetAnimatedFloatValue();
}

double AnimationState.deltaTime.getter()
{
  return *(double *)v0;
}

double AnimationState.evaluationTime.getter()
{
  return *(double *)(v0 + 8);
}

double AnimationState.normalizedTime.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t protocol witness for AnimationStateProtocol.storeAnimatedValue<A>(_:) in conformance AnimationState<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnimationState.storeAnimatedValue<A>(_:)(a1, a3, a2);
}

uint64_t AnimationState<>.defaultSourceJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  return AnimationState<>.defaultSourceJoints(index:count:transforms:)(a1, a2, a3, MEMORY[0x263F37558]);
}

uint64_t AnimationState<>.defaultTargetJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  return AnimationState<>.defaultSourceJoints(index:count:transforms:)(a1, a2, a3, MEMORY[0x263F37568]);
}

uint64_t AnimationState<>.defaultSourceJoints(index:count:transforms:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t result = RETimelineEventGetSkeletalPoseJointCount();
  if (result < 1) {
    return 0;
  }
  uint64_t v11 = a1 + a2;
  if (__OFADD__(a1, a2)) {
    goto LABEL_23;
  }
  if (result < v11) {
    return 0;
  }
  uint64_t v13 = *(void **)a3;
  if (*(void *)(*(void *)a3 + 16) < a2)
  {
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0, MEMORY[0x263F8EE78]);
    uint64_t v13 = (void *)result;
    *(void *)a3 = result;
  }
  if (v11 >= a1)
  {
    if (v11 == a1) {
      return 1;
    }
    while (a1 < v11)
    {
      uint64_t v14 = (long long *)a4(v5, a1);
      BOOL v12 = v14 != 0;
      if (v14)
      {
        long long v19 = v14[1];
        long long v20 = *v14;
        long long v18 = v14[2];
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          uint64_t v13 = (void *)result;
        }
        unint64_t v16 = v13[2];
        unint64_t v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
          uint64_t v13 = (void *)result;
        }
        _OWORD v13[2] = v16 + 1;
        uint64_t v17 = &v13[6 * v16];
        _OWORD v17[2] = v20;
        v17[3] = v19;
        void v17[4] = v18;
        *(void *)a3 = v13;
        ++a1;
        if (--a2) {
          continue;
        }
      }
      return v12;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationState<>.storeAnimatedJoints(transforms:jointIndex:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(v2 + 24)) {
    return 0;
  }
  uint64_t result = RETimelineEventGetSkeletalPoseJointCount();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!__OFADD__(a2, v6))
  {
    if (result >= a2 + v6)
    {
      if (!v6) {
        return 1;
      }
      uint64_t result = RETimelineEventSetAnimatedSkeletalPoseJointValue();
      if (result)
      {
        uint64_t v7 = a1 + 112;
        uint64_t v8 = 1;
        while (1)
        {
          BOOL v9 = v6 == v8;
          if (v6 == v8) {
            return v9;
          }
          if (__OFADD__(a2, v8))
          {
            __break(1u);
            goto LABEL_15;
          }
          ++v8;
          v7 += 48;
          uint64_t result = RETimelineEventSetAnimatedSkeletalPoseJointValue();
          if ((result & 1) == 0) {
            return v9;
          }
        }
      }
    }
    return 0;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AnimationStateProtocol.defaultSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnimationStateProtocol.defaultTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnimationStateProtocol.deltaTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnimationStateProtocol.evaluationTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AnimationStateProtocol.normalizedTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnimationStateProtocol.storeAnimatedValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t type metadata accessor for AnimationState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __RKEntitySpinAction.__allocating_init(targetEntity:duration:iterations:direction:axis:)(uint64_t a1, char *a2, float a3, float a4, __n128 a5)
{
  uint64_t v9 = swift_allocObject();
  char v10 = *a2;
  *(void *)(v9 + 152) = 0;
  *(unsigned char *)(v9 + 160) = 1;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(float *)(v9 + 108) = a3;
  *(float *)(v9 + 112) = a4;
  *(__n128 *)(v9 + 128) = a5;
  *(unsigned char *)(v9 + 144) = v10;
  return __RKEntityAction.init(targetEntity:)(a1);
}

RealityKit::__RKEntitySpinDirectionType_optional __swiftcall __RKEntitySpinDirectionType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntitySpinDirectionType.init(rawValue:), v3);
  result.int value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKEntitySpinDirectionType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntitySpinDirectionType.allCases.getter;
}

uint64_t __RKEntitySpinDirectionType.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x7369776B636F6C63;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySpinDirectionType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntitySpinDirectionType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntitySpinDirectionType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntitySpinDirectionType()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntitySpinDirectionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntitySpinDirectionType(Swift::String *a1)
{
  return __RKEntitySpinDirectionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntitySpinDirectionType(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x7369776B636F6C63;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x800000022834DC80;
  if (!*v1) {
    unint64_t v3 = 0xE900000000000065;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySpinDirectionType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySpinDirectionType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntitySpinDirectionType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntitySpinDirectionType;
}

uint64_t __RKEntitySpinAction.init(targetEntity:duration:iterations:direction:axis:)(uint64_t a1, char *a2, float a3, float a4, __n128 a5)
{
  char v6 = *a2;
  *(void *)(v5 + 152) = 0;
  *(unsigned char *)(v5 + 160) = 1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(float *)(v5 + 108) = a3;
  *(float *)(v5 + 112) = a4;
  *(__n128 *)(v5 + 128) = a5;
  *(unsigned char *)(v5 + 144) = v6;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySpinAction.perform(with:)()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v63 = 91;
  id v64 = (const char *)0xE100000000000000;
  if (v3)
  {
    v60[0] = 0;
    v60[1] = 0xE000000000000000;
    uint64_t v68 = v3;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  uint64_t v11 = (char *)v63;
  char v10 = v64;
  uint64_t v12 = *(void *)(v0 + 16);
  if (!v12)
  {
    uint64_t v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v63);
LABEL_26:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      os_log_type_t v18 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v63);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(v12 + 16);
  RERigidBodyComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    int MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    int MotionType = 0;
  }
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (uint64_t ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22A692220](ServiceLocator)))
  {
    swift_release();
    goto LABEL_26;
  }
  long long v20 = *(char **)(v2 + 96);
  char v21 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = 1;
  *(unsigned char *)(v2 + 104) = 1;
  uint64_t v63 = (uint64_t)v20;
  LOBYTE(v64) = v21;
  uint64_t v22 = (void *)v2;
  __RKEntityAction.state.didset((uint64_t)&v63);
  if (*(float *)(v2 + 112) <= 0.0) {
    *(_DWORD *)(v2 + 112) = 1065353216;
  }
  if (*(unsigned char *)(v2 + 144))
  {
    uint64_t v22 = (void *)0x800000022834DC80;
    int64_t v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v1) {
      float v23 = -0.19635;
    }
    else {
      float v23 = 0.19635;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    float v23 = -0.19635;
  }
  float v25 = *(float *)(v2 + 112) + -1.0;
  unint64_t v26 = LODWORD(v25);
  if ((~LODWORD(v25) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v26 = 3741319169;
  if (v25 <= -9.2234e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v25 >= 9.2234e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v52 = ComponentByClass;
  int v53 = MotionType;
  uint64_t v54 = v14;
  uint64_t v55 = v11;
  uint64_t v56 = v10;
  int64_t v1 = (uint64_t)v25;
  if (((uint64_t)v25 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = 0;
    uint64_t v22 = (void *)MEMORY[0x263F8EE78];
    long long v57 = xmmword_22830EC80;
    while (1)
    {
      for (uint64_t i = 0; i != 32; ++i)
      {
        float32x4_t v59 = *(float32x4_t *)(v2 + 128);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v30 = v22[2];
        unint64_t v29 = v22[3];
        uint64_t ComponentByClass = v30 + 1;
        if (v30 >= v29 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v22);
        }
        __float2 v31 = __sincosf_stret((float)(v23 * (float)i) * 0.5);
        float32x4_t v32 = vmulq_n_f32(v59, v31.__sinval);
        v32.i32[3] = LODWORD(v31.__cosval);
        long long v22[2] = ComponentByClass;
        uint64_t v33 = &v22[6 * v30];
        *((_OWORD *)v33 + 2) = xmmword_22830EC80;
        *((float32x4_t *)v33 + 3) = v32;
        v33[8] = 0;
        v33[9] = 0;
      }
      if (v27 == v1) {
        break;
      }
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        break;
      }
    }
    float32x4_t v58 = *(float32x4_t *)(v2 + 128);
    unint64_t v26 = v22[3];
    int64_t v1 = v30 + 2;
    if ((uint64_t)(v30 + 2) <= (uint64_t)(v26 >> 1)) {
      goto LABEL_45;
    }
    goto LABEL_51;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v1, 1, v22);
LABEL_45:
  __float2 v35 = __sincosf_stret((float)(v23 * 32.0) * 0.5);
  float32x4_t v36 = vmulq_n_f32(v58, v35.__sinval);
  v36.i32[3] = LODWORD(v35.__cosval);
  long long v22[2] = v1;
  uint64_t v37 = (uint64_t)&v22[6 * ComponentByClass + 4];
  *(_OWORD *)uint64_t v37 = v57;
  *(float32x4_t *)(v37 + 16) = v36;
  *(void *)(v37 + 32) = 0;
  *(void *)(v37 + 40) = 0;
  RESampledAnimationDefaultParameters();
  uint64_t v38 = v22[2];
  float v39 = *(float *)(v2 + 108);
  LOBYTE(v63) = 1;
  id v64 = "Transform.transform";
  LOBYTE(v65) = 1;
  *((float *)&v65 + 1) = v39 / (float)(v38 - 1);
  LODWORD(v66) = 0;
  *((float *)&v66 + 1) = v39;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    swift_bridgeObjectRelease();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    uint64_t v63 = 2;
    LODWORD(v64) = 5120;
    char v65 = "SPIN";
    LOBYTE(v66) = 0;
    *(void *)(v2 + 152) = REAnimationComponentPlay();
    *(unsigned char *)(v2 + 160) = 0;
    uint64_t v40 = swift_allocObject();
    swift_weakInit();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v40;
    *(void *)(v41 + 24) = v54;
    *(_DWORD *)(v41 + 32) = v53;
    *(unsigned char *)(v41 + 36) = v52 == 0;
    uint64_t v42 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = partial apply for specialized closure #1 in __RKEntitySpinAction.perform(with:);
    *(void *)(v2 + 40) = v41;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v42);
    uint64_t v43 = type metadata accessor for Entity();
    uint64_t v61 = v43;
    uint64_t v62 = &protocol witness table for Entity;
    v60[0] = v12;
    uint64_t v44 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v60, 0, (char **)&v63);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = partial apply for closure #2 in __RKEntitySpinAction.perform(with:);
    *(void *)(v45 + 24) = v44;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    uint64_t v46 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v47 = type metadata accessor for AnyCancellable();
    uint64_t v66 = v47;
    uint64_t v67 = MEMORY[0x263EFDD10];
    swift_release();
    uint64_t v63 = (uint64_t)v46;
    outlined destroy of BodyTrackingComponent?((uint64_t)v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v63, v2 + 168);
    swift_endAccess();
    uint64_t v61 = v43;
    uint64_t v62 = &protocol witness table for Entity;
    v60[0] = v12;
    uint64_t v48 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v60, 0, (char **)&v63);
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = partial apply for closure #2 in __RKEntitySpinAction.perform(with:);
    *(void *)(v49 + 24) = v48;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    uint64_t v50 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v66 = v47;
    uint64_t v67 = MEMORY[0x263EFDD10];
    swift_release();
    uint64_t v63 = (uint64_t)v50;
    outlined destroy of BodyTrackingComponent?((uint64_t)v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v63, v2 + 208);
    swift_endAccess();
    uint64_t v63 = (uint64_t)v55;
    id v64 = v56;
    uint64_t v51 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v51, &v63);
    swift_bridgeObjectRelease();
    RERelease();
    swift_release();
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in __RKEntitySpinAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 168;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v9);
    if (*((void *)&v10 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v8);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v9, v6);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 208, (uint64_t)&v9);
    if (*((void *)&v10 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v8);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v9, v5 + 208);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v5 + 104) == 1) && *(void *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v5 + 152) = 0;
      *(unsigned char *)(v5 + 160) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntitySpinAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 160) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 152))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntitySpinAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 144);
  long long v8 = *(_OWORD *)(v1 + 128);
  uint64_t v4 = type metadata accessor for __RKEntitySpinAction();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 152) = 0;
  *(unsigned char *)(v5 + 160) = 1;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(void *)(v5 + 108) = *(void *)(v1 + 108);
  *(_OWORD *)(v5 + 128) = v8;
  *(unsigned char *)(v5 + 144) = v3;
  uint64_t v6 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v6);
  a1[3] = v4;
  *a1 = result;
  return result;
}

uint64_t __RKEntitySpinAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    char v5 = *(unsigned char *)(v1 + 144);
    long long v8 = *(_OWORD *)(v1 + 128);
    type metadata accessor for __RKEntitySpinAction();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 152) = 0;
    *(unsigned char *)(v6 + 160) = 1;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(void *)(v6 + 108) = *(void *)(v1 + 108);
    *(_OWORD *)(v6 + 128) = v8;
    *(unsigned char *)(v6 + 144) = v5;
    uint64_t v7 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v7);
  }
  else
  {
    __RKEntitySpinAction.copy(with:)(v10);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v9;
    }
    else {
      return 0;
    }
  }
}

void __RKEntitySpinAction.__allocating_init(targetEntity:)()
{
}

void __RKEntitySpinAction.init(targetEntity:)()
{
}

uint64_t __RKEntitySpinAction.__ivar_destroyer()
{
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySpinAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySpinAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t sub_228234D7C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_228234DB4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 37, 7);
}

uint64_t partial apply for specialized closure #1 in __RKEntitySpinAction.perform(with:)()
{
  return specialized closure #1 in __RKEntitySpinAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t partial apply for closure #2 in __RKEntitySpinAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntitySpinAction.perform(with:)(a1);
}

uint64_t sub_228234E2C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for __RKEntitySpinAction()
{
  return self;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntitySpinDirectionType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntitySpinDirectionType] and conformance [A], &demangling cache variable for type metadata for [__RKEntitySpinDirectionType]);
}

unsigned char *storeEnumTagSinglePayload for __RKEntitySpinDirectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228234FE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntitySpinDirectionType()
{
  return &type metadata for __RKEntitySpinDirectionType;
}

uint64_t method lookup function for __RKEntitySpinAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntitySpinAction);
}

uint64_t dispatch thunk of __RKEntitySpinAction.__allocating_init(targetEntity:duration:iterations:direction:axis:)()
{
  return (*(uint64_t (**)(void))(v0 + 744))();
}

float PerspectiveCameraComponent.near.getter()
{
  return *(float *)v0;
}

void PerspectiveCameraComponent.near.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*PerspectiveCameraComponent.near.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PerspectiveCameraComponent.far.getter()
{
  return *(float *)(v0 + 4);
}

void PerspectiveCameraComponent.far.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*PerspectiveCameraComponent.far.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PerspectiveCameraComponent.fieldOfViewInDegrees.getter()
{
  return *(float *)(v0 + 8);
}

void PerspectiveCameraComponent.fieldOfViewInDegrees.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*PerspectiveCameraComponent.fieldOfViewInDegrees.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PerspectiveCameraComponent.fieldOfViewOrientation.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 12);
}

unsigned char *PerspectiveCameraComponent.fieldOfViewOrientation.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 12) = *result;
  return result;
}

uint64_t (*PerspectiveCameraComponent.fieldOfViewOrientation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall PerspectiveCameraComponent.init(near:far:fieldOfViewInDegrees:)(RealityKit::PerspectiveCameraComponent *__return_ptr retstr, Swift::Float near, Swift::Float far, Swift::Float fieldOfViewInDegrees)
{
  retstr->near = near;
  retstr->far = far;
  retstr->fieldOfViewInDegrees = fieldOfViewInDegrees;
  retstr->fieldOfViewOrientation = RealityFoundation_CameraFieldOfViewOrientation_vertical;
}

void __swiftcall PerspectiveCameraComponent.init(near:far:fieldOfViewInDegrees:fieldOfViewOrientation:)(RealityKit::PerspectiveCameraComponent *__return_ptr retstr, Swift::Float near, Swift::Float far, Swift::Float fieldOfViewInDegrees, RealityFoundation::CameraFieldOfViewOrientation fieldOfViewOrientation)
{
  RealityFoundation::CameraFieldOfViewOrientation v5 = *(unsigned char *)fieldOfViewOrientation;
  retstr->near = near;
  retstr->far = far;
  retstr->fieldOfViewInDegrees = fieldOfViewInDegrees;
  retstr->fieldOfViewOrientation = v5;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PerspectiveCameraComponent@<X0>(uint64_t a1@<X8>)
{
  REPerspectiveCameraComponentGetNear();
  int v3 = v2;
  REPerspectiveCameraComponentGetFar();
  int v5 = v4;
  REPerspectiveCameraComponentGetFieldOfView();
  int v7 = v6;
  uint64_t result = REPerspectiveCameraComponentGetFieldOfViewDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 12) = result == 0;
  return result;
}

uint64_t static PerspectiveCameraComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  REPerspectiveCameraComponentGetNear();
  int v3 = v2;
  REPerspectiveCameraComponentGetFar();
  int v5 = v4;
  REPerspectiveCameraComponentGetFieldOfView();
  int v7 = v6;
  uint64_t result = REPerspectiveCameraComponentGetFieldOfViewDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 12) = result == 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PerspectiveCameraComponent()
{
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  REPerspectiveCameraComponentSetFieldOfView();
  REPerspectiveCameraComponentSetFieldOfViewDirection();

  return RENetworkMarkComponentDirty();
}

uint64_t PerspectiveCameraComponent.__toCore(_:)()
{
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  REPerspectiveCameraComponentSetFieldOfView();
  REPerspectiveCameraComponentSetFieldOfViewDirection();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PerspectiveCameraComponent(_DWORD *a1@<X8>)
{
  *a1 = 54;
}

void static PerspectiveCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 54;
}

ValueMetadata *type metadata accessor for PerspectiveCameraComponent()
{
  return &type metadata for PerspectiveCameraComponent;
}

Swift::Void __swiftcall Entity.turnIntoNinja()()
{
  REHideEntity();
  Entity.ensureAnchorComponent()();
  swift_retain();
  if (REComponentClassFromType()) {
    REEntityRemoveComponentByClass();
  }
  swift_release();
  swift_retain();
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  Customuint64_t Component = REEntityGetCustomComponent();
  swift_release();
  if (!CustomComponent)
  {
    swift_retain();
    __EntityInfoComponent.init(entity:)(&v11);
    uint64_t v1 = (uint64_t)v11;
    uint64_t v2 = v12;
    swift_retain_n();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
    swift_release_n();
    swift_release();
  }
  swift_retain();
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  if (!REEntityGetCustomComponent()) {
    goto LABEL_19;
  }
  uint64_t Object = (unsigned __int8 **)RECustomComponentGetObject();
  if (!Object)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  static __EntityInfoComponent.__load(from:)(Object, (uint64_t *)&v11);
  uint64_t v4 = v12;
  if (v12 == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t)v11;
  if (!v11)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (*v11 != 42)
  {
    swift_retain();
    uint64_t v6 = String.init(utf8String:)();
    unint64_t v8 = v7;
    swift_release();
    if (v8) {
      Swift::Int v9 = v6;
    }
    else {
      Swift::Int v9 = 0;
    }
    if (!v8) {
      unint64_t v8 = 0xE000000000000000;
    }
    uint64_t v5 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(1, v9, v8);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v5;
    swift_release();
    uint64_t v4 = v10;
  }
  swift_retain();
  outlined copy of CustomMaterial.Blending(v5, v4);
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5, v4);
  outlined consume of __EntityInfoComponent?(v5, v4);
  swift_release();
  outlined consume of __EntityInfoComponent?(v5, v4);

  swift_release();
}

uint64_t Entity.isNinja.getter()
{
  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  if (!REEntityGetCustomComponent()) {
    return 1;
  }
  uint64_t result = RECustomComponentGetObject();
  if (result)
  {
    uint64_t v1 = *(unsigned __int8 **)result;
    if (*(void *)(result + 8)) {
      BOOL v2 = 1;
    }
    else {
      BOOL v2 = v1 == 0;
    }
    if (v2)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v3 = *v1;
      uint64_t v4 = String.init(utf8String:)();
      if (v5) {
        Swift::Int v6 = v4;
      }
      else {
        Swift::Int v6 = 0;
      }
      if (v5) {
        unint64_t v7 = v5;
      }
      else {
        unint64_t v7 = 0xE000000000000000;
      }
      uint64_t v1 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v3 == 42, v6, v7);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v1;
    }
    if (v1)
    {
      int v8 = *v1;
      swift_release();
      return v8 == 42;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t __EntityInfoComponent.init(entity:)@<X0>(void *a1@<X8>)
{
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  int v3 = NSStringFromClass(ObjCClassFromMetadata);
  Swift::Int v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v9 = *((void *)v7 + 2);
  unint64_t v8 = *((void *)v7 + 3);
  if (v9 >= v8 >> 1) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v9 + 1;
  v7[v9 + 32] = 13;
  unint64_t v16 = v7;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4, v6);
  uint64_t v10 = (uint64_t)v16;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
    uint64_t v10 = result;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  size_t v14 = v13 + 1;
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    uint64_t v10 = result;
  }
  *(void *)(v10 + 16) = v14;
  *(unsigned char *)(v10 + 32 + v13) = 0;
  if (v13 > 0x7FFFFFFE)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = (void *)RECIntrospectionAlloc();
    memmove(v15, (const void *)(v10 + 32), v14);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    type metadata accessor for IntrospectionDataCleanupHelper();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v15;
    *a1 = v15;
    a1[1] = result;
  }
  return result;
}

uint64_t static __EntityInfoComponent.__load(from:)@<X0>(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *a1;
  Swift::Int v4 = a1[1];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v3 == 0;
  }
  if (v6)
  {
    *a2 = (uint64_t)v3;
    a2[1] = (uint64_t)v4;
    return swift_retain();
  }
  else
  {
    int v8 = *v3;
    uint64_t v9 = String.init(utf8String:)();
    if (v10) {
      Swift::Int v11 = v9;
    }
    else {
      Swift::Int v11 = 0;
    }
    if (v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = 0xE000000000000000;
    }
    uint64_t v13 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v13;
    *a2 = v13;
    a2[1] = result;
  }
  return result;
}

unint64_t static __EntityInfoComponent.__typeName.getter()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __EntityInfoComponent.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __EntityInfoComponent.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __EntityInfoComponent.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __EntityInfoComponent.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __EntityInfoComponent.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __EntityInfoComponent.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __EntityInfoComponent.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x616A6E694E7369;
  if (*v1) {
    uint64_t v2 = 0x7954797469746E65;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xEE00656D614E6570;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __EntityInfoComponent.CodingKeys()
{
  if (*v0) {
    return 0x7954797469746E65;
  }
  else {
    return 0x616A6E694E7369;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __EntityInfoComponent.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __EntityInfoComponent.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __EntityInfoComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __EntityInfoComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __EntityInfoComponent.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__EntityInfoComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v17 = 0;
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v16 = 1;
  Swift::Int v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 & 1, v10, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  type metadata accessor for IntrospectionDataCleanupHelper();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *a2 = v12;
  a2[1] = v13;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

uint64_t __EntityInfoComponent.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__EntityInfoComponent.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  v10[1] = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys();
  uint64_t result = dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8)
  {
    char v12 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      swift_retain();
      String.init(utf8String:)();
      swift_release();
      char v11 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static __EntityInfoComponent.__addIntrospectionData(_:)(uint64_t result)
{
  if (result) {
    return REStructBuilderAddMemberDataTypeWithTag();
  }
  return result;
}

void static __EntityInfoComponent.__free(to:offset:)(void *a1)
{
  if (!a1[1] && *a1) {
    RECIntrospectionFree();
  }
  swift_arrayDestroy();

  JUMPOUT(0x22A696500);
}

uint64_t static __EntityInfoComponent.__load(from:offset:)@<X0>(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = (uint64_t)&type metadata for __EntityInfoComponent;
  a2[4] = (uint64_t)&protocol witness table for __EntityInfoComponent;
  Swift::String v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v3 == 0;
  }
  if (v6)
  {
    *a2 = (uint64_t)v3;
    a2[1] = (uint64_t)v4;
    return swift_retain();
  }
  else
  {
    int v8 = *v3;
    uint64_t v9 = String.init(utf8String:)();
    if (v10) {
      Swift::Int v11 = v9;
    }
    else {
      Swift::Int v11 = 0;
    }
    if (v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = 0xE000000000000000;
    }
    uint64_t v13 = specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v13;
    *a2 = v13;
    a2[1] = result;
  }
  return result;
}

void protocol witness for static Component.__free(to:offset:) in conformance __EntityInfoComponent(void *a1)
{
  if (!a1[1] && *a1) {
    RECIntrospectionFree();
  }
  swift_arrayDestroy();

  JUMPOUT(0x22A696500);
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance __EntityInfoComponent(uint64_t result)
{
  if (result) {
    return REStructBuilderAddMemberDataTypeWithTag();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __EntityInfoComponent@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return __EntityInfoComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __EntityInfoComponent(void *a1)
{
  return __EntityInfoComponent.encode(to:)(a1);
}

uint64_t Entity.ensureAnchorComponent()()
{
  v7[1] = *MEMORY[0x263EF8340];
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  Swift::String v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  REAnchorComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    UUID.init()();
  }
  else
  {
    uint64_t v5 = REComponentCreateByType();
    uint64_t result = UUID.init()();
    if (!v5)
    {
      __break(1u);
      return result;
    }
  }
  REAnchorComponentSetAnchorIdentifier();
  REAnchorComponentSetWorldTransform();
  if (!ComponentByClass)
  {
    REEntityAddExistingComponent();
    RERelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(char a1, Swift::Int a2, unint64_t a3)
{
  if (a1) {
    char v5 = 42;
  }
  else {
    char v5 = 13;
  }
  BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(MEMORY[0x263F8EE78] + 16) + 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v8 = *((void *)v6 + 2);
  unint64_t v7 = *((void *)v6 + 3);
  if (v8 >= v7 >> 1) {
    BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v8 + 1;
  v6[v8 + 32] = v5;
  uint64_t v15 = v6;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a2, a3);
  uint64_t v9 = (uint64_t)v15;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
    uint64_t v9 = result;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  size_t v13 = v12 + 1;
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    uint64_t v9 = result;
  }
  *(void *)(v9 + 16) = v13;
  *(unsigned char *)(v9 + 32 + v12) = 0;
  if (v12 > 0x7FFFFFFE)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    size_t v14 = (void *)RECIntrospectionAlloc();
    memmove(v14, (const void *)(v9 + 32), v13);
    swift_bridgeObjectRelease_n();
    return (uint64_t)v14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __EntityInfoComponent.CodingKeys and conformance __EntityInfoComponent.CodingKeys);
  }
  return result;
}

void *assignWithCopy for __EntityInfoComponent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for __EntityInfoComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __EntityInfoComponent()
{
  return &type metadata for __EntityInfoComponent;
}

unsigned char *storeEnumTagSinglePayload for __EntityInfoComponent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228236710);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __EntityInfoComponent.CodingKeys()
{
  return &type metadata for __EntityInfoComponent.CodingKeys;
}

uint64_t PhotogrammetrySession.Configuration.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 0;
  uint64_t v2 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + *(int *)(v2 + 32)) = 0;
  return result;
}

uint64_t type metadata accessor for PhotogrammetrySession.Configuration(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Configuration);
}

uint64_t static PhotogrammetrySession.isSupported.getter()
{
  return static PhotogrammetrySession.isSupported.getter() & 1;
}

{
  return MEMORY[0x270F1AC28]();
}

__n128 PhotogrammetrySession.Request.Geometry.orientedBounds.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 48);
  long long v3 = *(_OWORD *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 80);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

long long *PhotogrammetrySession.Request.Geometry.init(orientedBounds:transform:)@<X0>(long long *result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  long long v5 = *result;
  long long v6 = result[1];
  long long v7 = result[2];
  *(__n128 *)a2 = a3;
  *(__n128 *)(a2 + 16) = a4;
  *(__n128 *)(a2 + 32) = a5;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void OrientedBoundingBox.init(orientation:boundingBox:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

uint64_t PhotogrammetrySession.__allocating_init(input:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x270FA5388](v4 - 8);
  long long v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    size_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)size_t v13 = 0;
    _os_log_impl(&dword_227DD2000, v11, v12, "~~~ PhotogrammetrySession init was called! ~~~", v13, 2u);
    MEMORY[0x22A696500](v13, -1, -1);
  }

  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v9, a1, v14);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of PhotogrammetrySession.Configuration(a2, (uint64_t)v6, type metadata accessor for PhotogrammetrySession.Configuration);
  type metadata accessor for PhotogrammetrySession(0);
  swift_allocObject();
  uint64_t v16 = PhotogrammetrySession.init(source:configuration:)((uint64_t)v9, (uint64_t)v6);
  outlined destroy of PhotogrammetrySession.Configuration(a2, type metadata accessor for PhotogrammetrySession.Configuration);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v16;
}

uint64_t type metadata accessor for PhotogrammetrySession.InputSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.InputSource);
}

uint64_t type metadata accessor for PhotogrammetrySession(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession);
}

uint64_t PhotogrammetrySession.__allocating_init<A>(input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x270FA5388](v4 - 8);
  long long v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x270FA5388](v24);
  os_log_type_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)logger);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = v7;
    char v17 = v16;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_227DD2000, v14, v15, "~~~ PhotogrammetrySession init was called! ~~~", v16, 2u);
    uint64_t v7 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }

  uint64_t v18 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v26, a3);
  *os_log_type_t v12 = AnySequence.init<A>(_:)();
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = v25;
  outlined init with copy of PhotogrammetrySession.Configuration(v25, (uint64_t)v6, type metadata accessor for PhotogrammetrySession.Configuration);
  type metadata accessor for PhotogrammetrySession(0);
  swift_allocObject();
  uint64_t v20 = PhotogrammetrySession.init(source:configuration:)((uint64_t)v12, (uint64_t)v6);
  outlined destroy of PhotogrammetrySession.Configuration(v19, type metadata accessor for PhotogrammetrySession.Configuration);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, a3);
  return v20;
}

uint64_t PhotogrammetrySession.Error.localizedDescription.getter()
{
  uint64_t v1 = type metadata accessor for PhotogrammetrySession.Error(0);
  MEMORY[0x270FA5388](v1);
  outlined init with copy of PhotogrammetrySession.Configuration(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PhotogrammetrySession.Error);
  return String.init<A>(describing:)();
}

BOOL static PhotogrammetrySession.Configuration.SampleOrdering.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PhotogrammetrySession.Configuration.SampleOrdering.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t PhotogrammetrySession.Configuration.isObjectMaskingEnabled.getter()
{
  return *v0;
}

uint64_t PhotogrammetrySession.Configuration.isObjectMaskingEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.isObjectMaskingEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Configuration.sampleOrdering.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *PhotogrammetrySession.Configuration.sampleOrdering.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.sampleOrdering.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Configuration.featureSensitivity.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *PhotogrammetrySession.Configuration.featureSensitivity.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.featureSensitivity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.checkpointDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 28);

  return outlined init with copy of URL?(v3, a1);
}

uint64_t PhotogrammetrySession.Configuration.checkpointDirectory.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 28);

  return outlined assign with take of URL?(a1, v3);
}

uint64_t (*PhotogrammetrySession.Configuration.checkpointDirectory.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.ignoreBoundingBox.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PhotogrammetrySession.Configuration(0) + 32));
}

{
  return MEMORY[0x270F1AC50]();
}

uint64_t PhotogrammetrySession.Configuration.ignoreBoundingBox.setter(char a1)
{
  uint64_t result = type metadata accessor for PhotogrammetrySession.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*PhotogrammetrySession.Configuration.ignoreBoundingBox.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhotogrammetrySession.Configuration.init(checkpointDirectory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 1;
  *(unsigned char *)(a2 + 2) = 0;
  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  uint64_t v5 = a2 + *(int *)(v4 + 28);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v9(v5, 1, 1, v6);
  *(unsigned char *)(a2 + *(int *)(v4 + 32)) = 0;
  outlined destroy of BodyTrackingComponent?(v5, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);

  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v9)(v5, 0, 1, v6);
}

uint64_t PhotogrammetrySession.Request.Detail.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t PhotogrammetrySession.Request.Detail.rawValue.getter()
{
  return 0;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance PhotogrammetrySession.Request.Detail@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

__n128 PhotogrammetrySession.Request.Geometry.orientedBounds.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  v1[3] = *(_OWORD *)a1;
  v1[4] = v3;
  v1[5] = v4;
  return result;
}

void (*PhotogrammetrySession.Request.Geometry.orientedBounds.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  long long v4 = v1[4];
  long long v5 = v1[5];
  *(_OWORD *)long long v3 = v1[3];
  *((_OWORD *)v3 + 1) = v4;
  *((_OWORD *)v3 + 2) = v5;
  return PhotogrammetrySession.Request.Geometry.orientedBounds.modify;
}

void PhotogrammetrySession.Request.Geometry.orientedBounds.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (_OWORD *)v1[6];
  long long v3 = *((_OWORD *)v1 + 1);
  long long v4 = *((_OWORD *)v1 + 2);
  v2[3] = *(_OWORD *)v1;
  void v2[4] = v3;
  v2[5] = v4;
  free(v1);
}

uint64_t PhotogrammetrySession.Request.Geometry.bounds.getter()
{
  simd_matrix4x4(v0[3]);
  return REAABBTransform();
}

void PhotogrammetrySession.Request.Geometry.bounds.setter(__n128 a1, __n128 a2)
{
  *(_OWORD *)(v2 + 48) = xmmword_22830ECC0;
  *(__n128 *)(v2 + 64) = a1;
  *(__n128 *)(v2 + 80) = a2;
}

__n128 (*PhotogrammetrySession.Request.Geometry.bounds.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  simd_matrix4x4(v1[3]);
  REAABBTransform();
  *(_OWORD *)long long v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  return PhotogrammetrySession.Request.Geometry.bounds.modify;
}

__n128 PhotogrammetrySession.Request.Geometry.bounds.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (_OWORD *)v1[4];
  long long v3 = *(_OWORD *)v1;
  long long v4 = *((_OWORD *)v1 + 1);
  v2[3] = *(_OWORD *)&zmmword_22830EC90[48];
  void v2[4] = v3;
  v2[5] = v4;
  free(v1);
  return result;
}

__n128 PhotogrammetrySession.Request.Geometry.transform.getter()
{
  return *(__n128 *)v0;
}

void PhotogrammetrySession.Request.Geometry.transform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  *long long v3 = a1;
  v3[1] = a2;
  _OWORD v3[2] = a3;
}

uint64_t (*PhotogrammetrySession.Request.Geometry.transform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhotogrammetrySession.Request.Geometry.init(bounds:transform:)(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, __n128 a6@<Q4>)
{
  *(__n128 *)a1 = a4;
  *(__n128 *)(a1 + 16) = a5;
  *(__n128 *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 48) = xmmword_22830ECC0;
  *(__n128 *)(a1 + 64) = a2;
  *(__n128 *)(a1 + 80) = a3;
}

uint64_t PhotogrammetrySession.Request.Geometry.hash(into:)(uint64_t a1)
{
  __n128 v4 = v1[1];
  __n128 v5 = v1[2];
  __n128 v6 = v1[3];
  __n128 v7 = v1[4];
  __n128 v8 = v1[5];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, v5);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(a1, v6);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  specialized SIMD.hash(into:)(a1, v7);

  return specialized SIMD.hash(into:)(a1, v8);
}

BOOL static PhotogrammetrySession.Request.Geometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v12 = *(_OWORD *)(a1 + 48);
  __n128 v9 = *(__n128 *)(a1 + 80);
  __n128 v10 = *(__n128 *)(a1 + 64);
  long long v11 = *(_OWORD *)(a2 + 48);
  __n128 v7 = *(__n128 *)(a2 + 80);
  __n128 v8 = *(__n128 *)(a2 + 64);
  if ((specialized static Transform.== infix(_:_:)(*(__n128 *)a1, *(__n128 *)(a1 + 16), *(__n128 *)(a1 + 32), *(__n128 *)a2, *(__n128 *)(a2 + 16), *(__n128 *)(a2 + 32)) & 1) == 0)return 0; {
  uint64_t v2 = 0;
  }
  BOOL v3 = 1;
  while (!v3)
  {
    if (v2 == 3) {
      return 0;
    }
    BOOL v3 = 0;
LABEL_4:
    ++v2;
  }
  long long v13 = v12;
  float v4 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  long long v14 = v11;
  float v5 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  BOOL v3 = v4 == v5;
  if (v2 != 3) {
    goto LABEL_4;
  }
  if (v4 != v5) {
    return 0;
  }

  return specialized static BoundingBox.== infix(_:_:)(v10, v9, v8, v7);
}

Swift::Int PhotogrammetrySession.Request.Geometry.hashValue.getter()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  __n128 v5 = v0[3];
  __n128 v6 = v0[4];
  __n128 v7 = v0[5];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v8, v2);
  specialized SIMD.hash(into:)(v8, v3);
  specialized SIMD.hash(into:)(v8, v4);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(v8, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(v8, v5);
  specialized SIMD.hash(into:)(v8, (__n128)0);
  specialized SIMD.hash(into:)(v8, v6);
  specialized SIMD.hash(into:)(v8, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PhotogrammetrySession.Request.Geometry(uint64_t a1)
{
  __n128 v4 = v1[1];
  __n128 v5 = v1[2];
  __n128 v6 = v1[3];
  __n128 v7 = v1[4];
  __n128 v8 = v1[5];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, v5);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(a1, v6);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  specialized SIMD.hash(into:)(a1, v7);

  return specialized SIMD.hash(into:)(a1, v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhotogrammetrySession.Request.Geometry()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  __n128 v5 = v0[3];
  __n128 v6 = v0[4];
  __n128 v7 = v0[5];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v8, v2);
  specialized SIMD.hash(into:)(v8, v3);
  specialized SIMD.hash(into:)(v8, v4);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(v8, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(v8, v5);
  specialized SIMD.hash(into:)(v8, (__n128)0);
  specialized SIMD.hash(into:)(v8, v6);
  specialized SIMD.hash(into:)(v8, v7);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PhotogrammetrySession.Request.Geometry(__n128 *a1, __n128 *a2)
{
  __n128 v8 = a1[4];
  __n128 v9 = a1[3];
  __n128 v6 = a2[3];
  __n128 v7 = a1[5];
  __n128 v4 = a2[5];
  __n128 v5 = a2[4];
  if (specialized static Transform.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]))
  {
    v11[0] = v9;
    v11[1] = v8;
    v11[2] = v7;
    v10[0] = v6;
    v10[1] = v5;
    void v10[2] = v4;
    return specialized static OrientedBoundingBox.== infix(_:_:)(v11, v10);
  }
  else
  {
    return 0;
  }
}

uint64_t PhotogrammetrySession.Request.init(modelFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
              + 64);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(unsigned char *)(v4 + 96) = 1;
  type metadata accessor for PhotogrammetrySession.Request(0);

  return swift_storeEnumTagMultiPayload();
}

void PhotogrammetrySession.Request.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  __n128 v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v8);
  __n128 v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PhotogrammetrySession.Configuration(v2, (uint64_t)v10, type metadata accessor for PhotogrammetrySession.Request);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v20 = *(void *)v10;
      unint64_t v19 = *((void *)v10 + 1);
      unint64_t v21 = *((void *)v10 + 2);
      unint64_t v22 = *((void *)v10 + 3);
      unint64_t v23 = *((void *)v10 + 4);
      unint64_t v24 = *((void *)v10 + 5);
      unint64_t v26 = *((void *)v10 + 6);
      unint64_t v25 = *((void *)v10 + 7);
      unint64_t v36 = *((void *)v10 + 8);
      v37.n128_u64[0] = v25;
      unint64_t v27 = *((void *)v10 + 9);
      unint64_t v38 = *((void *)v10 + 10);
      v39.n128_u64[0] = v27;
      v40.n128_u64[0] = *((void *)v10 + 11);
      int v28 = v10[96];
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(0);
      if (v28 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v31.n128_u64[0] = v20;
        v31.n128_u64[1] = v19;
        __n128 v33 = v31;
        v31.n128_u64[0] = v21;
        v31.n128_u64[1] = v22;
        __n128 v34 = v31;
        v31.n128_u64[0] = v23;
        v31.n128_u64[1] = v24;
        __n128 v35 = v31;
        v31.n128_u64[0] = v26;
        v31.n128_u64[1] = v37.n128_u64[0];
        __n128 v37 = v31;
        v31.n128_u64[0] = v36;
        v31.n128_u64[1] = v39.n128_u64[0];
        __n128 v39 = v31;
        v31.n128_u64[0] = v38;
        v31.n128_u64[1] = v40.n128_u64[0];
        __n128 v40 = v31;
        Hasher._combine(_:)(1u);
        specialized SIMD.hash(into:)(a1, v33);
        specialized SIMD.hash(into:)(a1, v34);
        specialized SIMD.hash(into:)(a1, v35);
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
        specialized SIMD.hash(into:)(a1, v37);
        specialized SIMD.hash(into:)(a1, (__n128)0);
        specialized SIMD.hash(into:)(a1, v39);
        specialized SIMD.hash(into:)(a1, v40);
      }
      return;
    case 2u:
      Swift::UInt v29 = 2;
      goto LABEL_9;
    case 3u:
      Swift::UInt v29 = 3;
      goto LABEL_9;
    case 4u:
      Swift::UInt v29 = 4;
LABEL_9:
      Hasher._combine(_:)(v29);
      break;
    default:
      long long v11 = &v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                        + 64)];
      unint64_t v12 = *(void *)v11;
      unint64_t v13 = *((void *)v11 + 1);
      unint64_t v14 = *((void *)v11 + 2);
      v33.n128_u64[0] = *((void *)v11 + 3);
      unint64_t v15 = *((void *)v11 + 4);
      v35.n128_u64[0] = *((void *)v11 + 5);
      v34.n128_u64[0] = *((void *)v11 + 6);
      unint64_t v16 = *((void *)v11 + 7);
      unint64_t v36 = *((void *)v11 + 8);
      v37.n128_u64[0] = v16;
      unint64_t v17 = *((void *)v11 + 9);
      unint64_t v38 = *((void *)v11 + 10);
      v39.n128_u64[0] = v17;
      v40.n128_u64[0] = *((void *)v11 + 11);
      int v18 = v11[96];
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      Hasher._combine(_:)(0);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      Hasher._combine(_:)(0);
      if (v18 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v30.n128_u64[0] = v12;
        v30.n128_u64[1] = v13;
        __n128 v32 = v30;
        v30.n128_u64[0] = v14;
        v30.n128_u64[1] = v33.n128_u64[0];
        __n128 v33 = v30;
        v30.n128_u64[0] = v15;
        v30.n128_u64[1] = v35.n128_u64[0];
        __n128 v35 = v30;
        v30.n128_u64[0] = v34.n128_u64[0];
        v30.n128_u64[1] = v37.n128_u64[0];
        __n128 v37 = v30;
        v30.n128_u64[0] = v36;
        v30.n128_u64[1] = v39.n128_u64[0];
        __n128 v39 = v30;
        v30.n128_u64[0] = v38;
        v30.n128_u64[1] = v40.n128_u64[0];
        __n128 v40 = v30;
        Hasher._combine(_:)(1u);
        specialized SIMD.hash(into:)(a1, v32);
        specialized SIMD.hash(into:)(a1, v33);
        specialized SIMD.hash(into:)(a1, v35);
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
        specialized SIMD.hash(into:)(a1, v37);
        specialized SIMD.hash(into:)(a1, (__n128)0);
        specialized SIMD.hash(into:)(a1, v39);
        specialized SIMD.hash(into:)(a1, v40);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
  }
}

Swift::Int PhotogrammetrySession.Request.hashValue.getter()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhotogrammetrySession.Request()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhotogrammetrySession.Request()
{
  Hasher.init(_seed:)();
  PhotogrammetrySession.Request.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

__n128 PhotogrammetrySession.Pose.translation.getter()
{
  return *(__n128 *)v0;
}

__n128 PhotogrammetrySession.Pose.rotation.getter()
{
  return v0[1];
}

uint64_t PhotogrammetrySession.Pose.transform.getter()
{
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of PhotogrammetrySession.Pose.transform.getter);
  if (one-time initialization token for identity != -1) {
    return swift_once();
  }
  return result;
}

uint64_t PhotogrammetrySession.Poses.posesBySample.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x270F1ACE0]();
}

uint64_t PhotogrammetrySession.Poses.urlsBySample.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 PhotogrammetrySession.PointCloud.Point.position.getter()
{
  return *(__n128 *)v0;
}

uint64_t PhotogrammetrySession.PointCloud.Point.color.getter()
{
  return *(unsigned int *)(v0 + 16);
}

{
  return MEMORY[0x270F1AC00]();
}

uint64_t PhotogrammetrySession.PointCloud.points.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x270F1AC18]();
}

uint64_t PhotogrammetrySession.Output.ProgressInfo.estimatedRemainingTime.getter()
{
  return *(void *)v0;
}

{
  return MEMORY[0x270F1AD00]();
}

void PhotogrammetrySession.Output.ProgressInfo.processingStage.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 9);
}

BOOL static PhotogrammetrySession.Output.ProcessingStage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PhotogrammetrySession.Output.ProcessingStage.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PhotogrammetrySession.Output.ProcessingStage.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t PhotogrammetrySession.Output.localizedDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  __n128 v7 = (char *)&v47 - v6;
  uint64_t v8 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v8);
  __n128 v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  outlined init with copy of PhotogrammetrySession.Configuration(v0, (uint64_t)&v47 - v12, type metadata accessor for PhotogrammetrySession.Output);
  uint64_t v13 = String.init<A>(describing:)();
  outlined init with copy of PhotogrammetrySession.Configuration(v1, (uint64_t)v10, type metadata accessor for PhotogrammetrySession.Output);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      unint64_t v19 = (char *)v10
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v10, (uint64_t)v7);
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      uint64_t v51 = 0x2074736575716552;
      unint64_t v52 = 0xE800000000000000;
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v7, (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
      v20._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 0x74656C706D6F6320;
      v21._object = (void *)0xEB000000002E6465;
      String.append(_:)(v21);
      uint64_t v13 = v51;
      outlined destroy of PhotogrammetrySession.Configuration((uint64_t)v7, type metadata accessor for PhotogrammetrySession.Request);
      unint64_t v22 = type metadata accessor for PhotogrammetrySession.Result;
      uint64_t v23 = (uint64_t)v19;
      goto LABEL_15;
    case 2u:
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v10, (uint64_t)v7);
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      v24._uint64_t countAndFlagsBits = 0x2074736575716552;
      v24._object = (void *)0xE800000000000000;
      String.append(_:)(v24);
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v7, (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
      v25._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._object = (void *)0xEA00000000003D73;
      v26._uint64_t countAndFlagsBits = 0x736572676F727020;
      String.append(_:)(v26);
      Double.write<A>(to:)();
      goto LABEL_9;
    case 3u:
      swift_bridgeObjectRelease();
      uint64_t v28 = *v10;
      uint64_t v27 = v10[1];
      Swift::UInt v29 = (void *)v10[2];
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      uint64_t v51 = 0x6920656C706D6153;
      unint64_t v52 = 0xEA00000000003D64;
      uint64_t v48 = v28;
      v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._uint64_t countAndFlagsBits = 0xD000000000000022;
      v31._object = (void *)0x800000022835E350;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = v27;
      v32._object = v29;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      unint64_t v33 = 46;
      unint64_t v34 = 0xE100000000000000;
      goto LABEL_7;
    case 4u:
      swift_bridgeObjectRelease();
      uint64_t v35 = *v10;
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(84);
      v36._uint64_t countAndFlagsBits = 0x6920656C706D6153;
      v36._object = (void *)0xEA00000000003D64;
      String.append(_:)(v36);
      uint64_t v48 = v35;
      v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      unint64_t v33 = 0xD000000000000048;
      unint64_t v34 = 0x800000022835E300;
LABEL_7:
      String.append(_:)(*(Swift::String *)&v33);
      return v51;
    case 5u:
      swift_bridgeObjectRelease();
      unint64_t v38 = (char *)v10
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                   + 48);
      uint64_t v39 = *(void *)v38;
      char v40 = v38[8];
      char v41 = v38[9];
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v10, (uint64_t)v7);
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      uint64_t v51 = 0x2074736575716552;
      unint64_t v52 = 0xE800000000000000;
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v7, (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
      v42._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 0x736572676F727020;
      v43._object = (void *)0xEE003D6F666E4973;
      String.append(_:)(v43);
      uint64_t v48 = v39;
      char v49 = v40;
      char v50 = v41;
      v44._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
LABEL_9:
      v45._uint64_t countAndFlagsBits = 46;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      goto LABEL_10;
    case 6u:
      swift_bridgeObjectRelease();
      return 0xD00000000000001ALL;
    case 7u:
      swift_bridgeObjectRelease();
      return 0xD00000000000002BLL;
    case 8u:
      swift_bridgeObjectRelease();
      return 0xD000000000000032;
    case 9u:
      swift_bridgeObjectRelease();
      return 0xD000000000000076;
    case 0xAu:
      unint64_t v22 = type metadata accessor for PhotogrammetrySession.Output;
      uint64_t v23 = (uint64_t)v10;
      goto LABEL_15;
    default:
      swift_bridgeObjectRelease();
      unint64_t v14 = *(void **)((char *)v10
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                              + 48));
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v10, (uint64_t)v7);
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      uint64_t v51 = 0x2074736575716552;
      unint64_t v52 = 0xE800000000000000;
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v7, (uint64_t)v4, type metadata accessor for PhotogrammetrySession.Request);
      v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._object = (void *)0x800000022835E3F0;
      v16._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v16);
      swift_getErrorValue();
      v17._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 11810;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);

LABEL_10:
      uint64_t v13 = v51;
      unint64_t v22 = type metadata accessor for PhotogrammetrySession.Request;
      uint64_t v23 = (uint64_t)v7;
LABEL_15:
      outlined destroy of PhotogrammetrySession.Configuration(v23, v22);
      return v13;
  }
}

uint64_t PhotogrammetrySession.Outputs.Iterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PhotogrammetrySession.Outputs.Iterator.next(), 0, 0);
}

uint64_t PhotogrammetrySession.Outputs.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  __n128 v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = PhotogrammetrySession.Outputs.Iterator.next();
  uint64_t v5 = v0[2];
  return v7(v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance PhotogrammetrySession.Outputs.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](PhotogrammetrySession.Outputs.Iterator.next(), 0, 0);
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = v4;
  v5[7] = a4;
  v5[4] = a2;
  void v5[5] = a3;
  v5[3] = a1;
  return MEMORY[0x270FA2498](_s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, 0, 0);
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v1, v2);
  __n128 v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  uint64_t v5 = v0[3];
  return v7(v5, v2, v3);
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_()
{
  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2[4])
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    return MEMORY[0x270FA2498](_s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_, v3, v5);
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v2[1];
    return v6();
  }
}

uint64_t _s17RealityFoundation21PhotogrammetrySessionC7OutputsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)v0[7];
  v0[2] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  *uint64_t v2 = v1;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t PhotogrammetrySession.Outputs.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __REAssetService(v1, a1);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance PhotogrammetrySession.Outputs@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of __REAssetService(v1, a1);

  return outlined destroy of PhotogrammetrySession.Outputs(v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PhotogrammetrySession.process(requests:)(Swift::OpaquePointer requests)
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  OS_dispatch_queue.sync<A>(execute:)();
}

Swift::Void __swiftcall PhotogrammetrySession.cancel()()
{
  uint64_t v1 = __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.cancel();
  *(void *)(v4 + 24) = v2;
  v6[4] = _sIg_Ieg_TRTA_0;
  void v6[5] = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1107296256;
  _OWORD v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor_41;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v3) {
    __break(1u);
  }
}

uint64_t PhotogrammetrySession.activeRequests.getter()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));

  return swift_bridgeObjectRetain();
}

uint64_t PhotogrammetrySession.isProcessing.getter()
{
  return *(unsigned __int8 *)(*__swift_project_boxed_opaque_existential_1((void *)(v0+ OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v0+ OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession+ 24))+ OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing);
}

uint64_t PhotogrammetrySession.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24));
  return outlined init with copy of PhotogrammetrySession.Configuration(*v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, a1, type metadata accessor for PhotogrammetrySession.Configuration);
}

uint64_t PhotogrammetrySession.outputs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *__swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession), *(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession + 24))+ 16;

  return outlined init with copy of AnyMeshBuffer(v3, a1);
}

uint64_t PhotogrammetrySession.init(source:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v43 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v44 = (uint64_t)&v43 - v7;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  __n128 v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  MEMORY[0x270FA5388](v14);
  Swift::String v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = type metadata accessor for PhotogrammetrySession.InputSource(0);
  MEMORY[0x270FA5388](v20);
  unint64_t v22 = (uint64_t *)((char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = v2;
  uint64_t v23 = v2 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  UUID.init()();
  uint64_t v51 = a1;
  outlined init with copy of PhotogrammetrySession.Configuration(a1, (uint64_t)v22, type metadata accessor for PhotogrammetrySession.InputSource);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v47 = v23;
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v32 = v45;
    unint64_t v33 = v22;
    uint64_t v34 = v46;
    (*(void (**)(char *, uint64_t *, uint64_t))(v45 + 32))(v19, v33, v46);
    uint64_t v31 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v13, v23, v8);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v16, v19, v34);
    uint64_t v35 = v50;
    uint64_t v36 = v44;
    outlined init with copy of PhotogrammetrySession.Configuration(v50, v44, type metadata accessor for PhotogrammetrySession.Configuration);
    uint64_t v37 = v49;
    unint64_t v38 = specialized PhotogrammetrySessionImpl.__allocating_init(id:input:configuration:)((uint64_t)v13, (uint64_t)v16, v36);
    if (v37)
    {
      outlined destroy of PhotogrammetrySession.Configuration(v35, type metadata accessor for PhotogrammetrySession.Configuration);
      outlined destroy of PhotogrammetrySession.Configuration(v51, type metadata accessor for PhotogrammetrySession.InputSource);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v34);
      goto LABEL_6;
    }
    char v41 = v38;
    uint64_t v53 = type metadata accessor for PhotogrammetrySessionImpl(0);
    uint64_t v54 = &protocol witness table for PhotogrammetrySessionImpl;
    *(void *)&long long v52 = v41;
    outlined destroy of PhotogrammetrySession.Configuration(v35, type metadata accessor for PhotogrammetrySession.Configuration);
    outlined destroy of PhotogrammetrySession.Configuration(v51, type metadata accessor for PhotogrammetrySession.InputSource);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v34);
LABEL_9:
    uint64_t v39 = v55;
    outlined init with take of BindableDataInternal(&v52, v55 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);
    return v39;
  }
  uint64_t v25 = *v22;
  uint64_t v26 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v10, v23, v8);
  uint64_t v27 = v50;
  uint64_t v28 = v43;
  outlined init with copy of PhotogrammetrySession.Configuration(v50, v43, type metadata accessor for PhotogrammetrySession.Configuration);
  swift_retain();
  uint64_t v29 = v49;
  uint64_t v30 = specialized PhotogrammetrySessionImpl.__allocating_init<A>(id:input:configuration:)((uint64_t)v10, v25, v28);
  if (!v29)
  {
    uint64_t v40 = v30;
    uint64_t v53 = type metadata accessor for PhotogrammetrySessionImpl(0);
    uint64_t v54 = &protocol witness table for PhotogrammetrySessionImpl;
    swift_release();
    *(void *)&long long v52 = v40;
    outlined destroy of PhotogrammetrySession.Configuration(v27, type metadata accessor for PhotogrammetrySession.Configuration);
    outlined destroy of PhotogrammetrySession.Configuration(v51, type metadata accessor for PhotogrammetrySession.InputSource);
    goto LABEL_9;
  }
  uint64_t v31 = v26;
  swift_release();
  outlined destroy of PhotogrammetrySession.Configuration(v27, type metadata accessor for PhotogrammetrySession.Configuration);
  outlined destroy of PhotogrammetrySession.Configuration(v51, type metadata accessor for PhotogrammetrySession.InputSource);
LABEL_6:
  uint64_t v39 = v55;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v47, v8);
  type metadata accessor for PhotogrammetrySession(0);
  swift_deallocPartialClassInstance();
  return v39;
}

uint64_t PhotogrammetrySession.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);
  return v0;
}

uint64_t PhotogrammetrySession.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_photogrammetrySession);

  return swift_deallocClassInstance();
}

__n128 OrientedBoundingBox.orientation.getter()
{
  return *(__n128 *)v0;
}

void OrientedBoundingBox.orientation.setter(__n128 a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*OrientedBoundingBox.orientation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 OrientedBoundingBox.boundingBox.getter()
{
  return v0[1];
}

void OrientedBoundingBox.boundingBox.setter(__n128 a1, __n128 a2)
{
  v2[1] = a1;
  v2[2] = a2;
}

uint64_t (*OrientedBoundingBox.boundingBox.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OrientedBoundingBox.hash(into:)(uint64_t a1)
{
  __n128 v4 = *v1;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  __n128 v5 = v1[2];
  specialized SIMD.hash(into:)(a1, v1[1]);

  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int OrientedBoundingBox.hashValue.getter()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  Hasher.init(_seed:)();
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(v5, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, (__n128)0);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OrientedBoundingBox(uint64_t a1)
{
  __n128 v4 = *v1;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(a1, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(a1, v4);
  specialized SIMD.hash(into:)(a1, (__n128)0);
  __n128 v5 = v1[2];
  specialized SIMD.hash(into:)(a1, v1[1]);

  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrientedBoundingBox()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  Hasher.init(_seed:)();
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized SIMD.hash(into:)(v5, (__n128)xmmword_22830EC80);
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, (__n128)0);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t PhotogrammetrySession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  uint64_t v4 = type metadata accessor for UUID();
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PhotogrammetrySession@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC17RealityFoundation21PhotogrammetrySession_sessionID;
  uint64_t v4 = type metadata accessor for UUID();
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

BOOL specialized static OrientedBoundingBox.== infix(_:_:)(__n128 *a1, __n128 *a2)
{
  uint64_t v2 = 0;
  __n128 v4 = *a1;
  __n128 v3 = a1[1];
  __n128 v5 = a1[2];
  __n128 v7 = *a2;
  __n128 v6 = a2[1];
  BOOL v8 = 1;
  __n128 v9 = a2[2];
  while (1)
  {
    while (!v8)
    {
      if (v2 == 3) {
        return 0;
      }
      BOOL v8 = 0;
      ++v2;
    }
    __n128 v13 = v4;
    float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    __n128 v14 = v7;
    float v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    BOOL v8 = v10 == v11;
    if (v2 == 3) {
      break;
    }
    ++v2;
  }
  if (v10 == v11) {
    return specialized static BoundingBox.== infix(_:_:)(v3, v5, v6, v9);
  }
  return 0;
}

uint64_t specialized static PhotogrammetrySession.Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  v65.n128_u64[0] = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  __n128 v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v7);
  __n128 v9 = (__n128 *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t)&v15[*(int *)(v16 + 56)];
  outlined init with copy of PhotogrammetrySession.Configuration(a1, (uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
  outlined init with copy of PhotogrammetrySession.Configuration(a2, v17, type metadata accessor for PhotogrammetrySession.Request);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v15, (uint64_t)v9, type metadata accessor for PhotogrammetrySession.Request);
      __n128 v21 = *v9;
      __n128 v64 = v9[1];
      __n128 v65 = v21;
      __n128 v22 = v9[2];
      __n128 v62 = v9[3];
      __n128 v63 = v22;
      __n128 v61 = v9[4];
      __n128 v60 = v9[5];
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_14;
      }
      if (v9[6].n128_u8[0])
      {
        if (*(unsigned char *)(v17 + 96)) {
          goto LABEL_13;
        }
      }
      else if ((*(unsigned char *)(v17 + 96) & 1) == 0)
      {
        unint64_t v29 = *(void *)v17;
        unint64_t v30 = *(void *)(v17 + 8);
        unint64_t v31 = *(void *)(v17 + 16);
        unint64_t v32 = *(void *)(v17 + 24);
        unint64_t v33 = *(void *)(v17 + 32);
        unint64_t v34 = *(void *)(v17 + 40);
        unint64_t v35 = *(void *)(v17 + 48);
        unint64_t v36 = *(void *)(v17 + 56);
        uint64_t v37 = *(void *)(v17 + 64);
        uint64_t v38 = *(void *)(v17 + 72);
        uint64_t v40 = *(void *)(v17 + 80);
        uint64_t v39 = *(void *)(v17 + 88);
        v41.n128_u64[0] = v29;
        v41.n128_u64[1] = v30;
        v42.n128_u64[0] = v31;
        v42.n128_u64[1] = v32;
        v43.n128_u64[0] = v33;
        v43.n128_u64[1] = v34;
        if (specialized static Transform.== infix(_:_:)(v65, v64, v63, v41, v42, v43))
        {
          __n128 v71 = v62;
          __n128 v72 = v61;
          __n128 v73 = v60;
          v66.n128_u64[0] = v35;
          v66.n128_u64[1] = v36;
          uint64_t v67 = v37;
          uint64_t v68 = v38;
          uint64_t v69 = v40;
          uint64_t v70 = v39;
          goto LABEL_25;
        }
      }
      goto LABEL_26;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_14;
      }
      goto LABEL_13;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_14;
      }
      goto LABEL_13;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_14;
    default:
      outlined init with copy of PhotogrammetrySession.Configuration((uint64_t)v15, (uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      __n128 v19 = *(__n128 *)&v12[v18];
      __n128 v63 = *(__n128 *)&v12[v18 + 16];
      __n128 v64 = v19;
      __n128 v62 = *(__n128 *)&v12[v18 + 32];
      __n128 v61 = *(__n128 *)&v12[v18 + 48];
      __n128 v60 = *(__n128 *)&v12[v18 + 64];
      __n128 v59 = *(__n128 *)&v12[v18 + 80];
      char v20 = v12[v18 + 96];
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v65.n128_u64[0] + 8))(v12, v4);
LABEL_14:
        outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
        return 0;
      }
      unint64_t v24 = *(void *)(v17 + v18);
      unint64_t v55 = *(void *)(v17 + v18 + 8);
      unint64_t v54 = *(void *)(v17 + v18 + 16);
      unint64_t v57 = *(void *)(v17 + v18 + 24);
      unint64_t v56 = *(void *)(v17 + v18 + 32);
      unint64_t v58 = *(void *)(v17 + v18 + 40);
      unint64_t v53 = *(void *)(v17 + v18 + 48);
      unint64_t v50 = *(void *)(v17 + v18 + 56);
      uint64_t v52 = *(void *)(v17 + v18 + 64);
      uint64_t v49 = *(void *)(v17 + v18 + 72);
      uint64_t v51 = *(void *)(v17 + v18 + 80);
      uint64_t v48 = *(void *)(v17 + v18 + 88);
      char v25 = *(unsigned char *)(v17 + v18 + 96);
      unint64_t v26 = v65.n128_u64[0];
      (*(void (**)(char *, uint64_t, uint64_t))(v65.n128_u64[0] + 32))(v6, v17, v4);
      char v27 = MEMORY[0x22A687D40](v12, v6);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v12, v4);
      v28(v6, v4);
      if ((v27 & 1) == 0) {
        goto LABEL_26;
      }
      if ((v20 & 1) == 0)
      {
        if (v25) {
          goto LABEL_26;
        }
        v44.n128_u64[0] = v24;
        v44.n128_u64[1] = v55;
        v45.n128_u64[0] = v54;
        v45.n128_u64[1] = v57;
        v46.n128_u64[0] = v56;
        v46.n128_u64[1] = v58;
        if ((specialized static Transform.== infix(_:_:)(v64, v63, v62, v44, v45, v46) & 1) == 0) {
          goto LABEL_26;
        }
        __n128 v71 = v61;
        __n128 v72 = v60;
        __n128 v73 = v59;
        v66.n128_u64[0] = v53;
        v66.n128_u64[1] = v50;
        uint64_t v67 = v52;
        uint64_t v68 = v49;
        uint64_t v69 = v51;
        uint64_t v70 = v48;
LABEL_25:
        if (!specialized static OrientedBoundingBox.== infix(_:_:)(&v71, &v66)) {
          goto LABEL_26;
        }
LABEL_13:
        outlined destroy of PhotogrammetrySession.Configuration((uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
        return 1;
      }
      if (v25) {
        goto LABEL_13;
      }
LABEL_26:
      outlined destroy of PhotogrammetrySession.Configuration((uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
      return 0;
  }
}

uint64_t specialized static PhotogrammetrySession.Configuration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - v15;
  MEMORY[0x270FA5388](v17);
  __n128 v19 = (char *)&v28 - v18;
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    goto LABEL_12;
  }
  uint64_t v20 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  uint64_t v31 = v5;
  uint64_t v21 = v20;
  outlined init with copy of URL?((uint64_t)&a1[*(int *)(v20 + 28)], (uint64_t)v19);
  uint64_t v29 = v21;
  outlined init with copy of URL?((uint64_t)&a2[*(int *)(v21 + 28)], (uint64_t)v16);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of URL?((uint64_t)v19, (uint64_t)v10);
  uint64_t v30 = v22;
  outlined init with copy of URL?((uint64_t)v16, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v23((uint64_t)v10, 1, v4) != 1)
  {
    outlined init with copy of URL?((uint64_t)v10, (uint64_t)v13);
    if (v23(v30, 1, v4) != 1)
    {
      uint64_t v24 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v7, v30, v4);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      LODWORD(v30) = dispatch thunk of static Equatable.== infix(_:_:)();
      char v25 = *(void (**)(char *, uint64_t))(v24 + 8);
      v25(v7, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
      v25(v13, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
      if (v30) {
        goto LABEL_11;
      }
LABEL_12:
      char v26 = 0;
      return v26 & 1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v4);
LABEL_9:
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (URL?, URL?));
    goto LABEL_12;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
  if (v23(v30, 1, v4) != 1) {
    goto LABEL_9;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
LABEL_11:
  char v26 = a1[*(int *)(v29 + 32)] ^ a2[*(int *)(v29 + 32)] ^ 1;
  return v26 & 1;
}

uint64_t specialized PhotogrammetrySessionImpl.__allocating_init<A>(id:input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a1;
  uint64_t v91 = a2;
  uint64_t v90 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v86 = (char *)v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x270FA5388](v87);
  uint64_t v7 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v78 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t)v78 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  __n128 v19 = (char *)v78 - v18;
  uint64_t v20 = a3;
  uint64_t v21 = v88;
  specialized static PhotogrammetrySessionImpl.verifyFreeStorageForSequenceInputOrThrow(configuration:)(a3);
  uint64_t v88 = v21;
  if (v21)
  {
    outlined destroy of PhotogrammetrySession.Configuration(a3, type metadata accessor for PhotogrammetrySession.Configuration);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v89, v90);
    return v13;
  }
  uint64_t v83 = v13;
  uint64_t v84 = v4;
  uint64_t v79 = v7;
  uint64_t v80 = v10;
  v78[0] = (uint64_t)v16;
  v78[1] = v14;
  outlined init with copy of URL?(a3 + *(int *)(v87 + 28), (uint64_t)v19);
  uint64_t v22 = type metadata accessor for URL();
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v19, 1, v22);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for URL?);
  if (v23 == 1)
  {
    if (one-time initialization token for logger == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v81 = __swift_project_value_buffer(v24, (uint64_t)logger);
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = v88;
  uint64_t v29 = v83;
  if (v27)
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_227DD2000, v25, v26, "Creating internal photogrammetry session from photogrammetry samples...", v30, 2u);
    MEMORY[0x22A696500](v30, -1, -1);
  }

  uint64_t v31 = type metadata accessor for PhotogrammetrySession.Configuration();
  uint64_t v82 = v78;
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void *)(v32 + 64);
  MEMORY[0x270FA5388](v31);
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v35 = (char *)v78 - v34;
  outlined init with copy of PhotogrammetrySession.Configuration(v20, v29, type metadata accessor for PhotogrammetrySession.Configuration);
  uint64_t v85 = v20;
  uint64_t v36 = v91;
  swift_retain();
  PhotogrammetrySession.Configuration.init(_:)(v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<LazyMapSequence<AnySequence<PhotogrammetrySample>, PhotogrammetrySample>>);
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = v36;
  void v37[3] = closure #1 in PhotogrammetrySessionImpl.init<A>(id:input:configuration:);
  v37[4] = 0;
  __n128 v38 = MEMORY[0x270FA5388](v37);
  (*(void (**)(char *, char *, uint64_t, __n128))(v32 + 16))((char *)v78 - v34, (char *)v78 - v34, v31, v38);
  type metadata accessor for PhotogrammetrySession();
  swift_allocObject();
  swift_retain();
  uint64_t v39 = PhotogrammetrySession.init(photogrammetrySamples:configuration:)();
  if (!v28)
  {
    uint64_t v40 = v39;
    uint64_t v41 = v84;
    uint64_t v42 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v86, v89, v90);
    uint64_t v43 = v85;
    uint64_t v44 = (uint64_t)v80;
    outlined init with copy of PhotogrammetrySession.Configuration(v85, (uint64_t)v80, type metadata accessor for PhotogrammetrySession.Configuration);
    type metadata accessor for PhotogrammetrySessionImpl(0);
    swift_allocObject();
    uint64_t v13 = PhotogrammetrySessionImpl.init(id:using:configuration:)(v42, v40, v44);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
    swift_release();
    swift_retain();
    PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(1);
    swift_release();
    outlined destroy of PhotogrammetrySession.Configuration(v43, type metadata accessor for PhotogrammetrySession.Configuration);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v89, v90);
    return v13;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))((char *)v78 - v34, v31);
  swift_release();
  uint64_t v45 = v90;
  id v94 = v28;
  uint64_t v46 = type metadata accessor for PhotogrammetrySession.Error();
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v49 = (char *)v78 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v50 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v49, v46);
    uint64_t v52 = v51;
    if (MEMORY[0x263F36990] && v51 == *MEMORY[0x263F36990])
    {

      uint64_t v53 = (uint64_t)v79;
      outlined init with copy of PhotogrammetrySession.Configuration(v85, (uint64_t)v79, type metadata accessor for PhotogrammetrySession.Configuration);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      int v55 = v54;
      if (os_log_type_enabled((os_log_t)v13, v54))
      {
        uint64_t v56 = swift_slowAlloc();
        LODWORD(v88) = v55;
        uint64_t v57 = v56;
        uint64_t v58 = swift_slowAlloc();
        uint64_t v90 = v58;
        *(_DWORD *)uint64_t v57 = 141558274;
        uint64_t v92 = 1752392040;
        uint64_t v93 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2080;
        uint64_t v86 = (char *)(v57 + 14);
        outlined init with copy of URL?(v53 + *(int *)(v87 + 28), v78[0]);
        uint64_t v59 = String.init<A>(describing:)();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of PhotogrammetrySession.Configuration((uint64_t)v79, type metadata accessor for PhotogrammetrySession.Configuration);
        _os_log_impl(&dword_227DD2000, (os_log_t)v13, (os_log_type_t)v88, "Internal photogrammetry session init for photogrammetry samples failed for checkpointDirectory = %{mask.hash}s", (uint8_t *)v57, 0x16u);
        uint64_t v61 = v90;
        swift_arrayDestroy();
        MEMORY[0x22A696500](v61, -1, -1);
        MEMORY[0x22A696500](v57, -1, -1);
      }
      else
      {
        outlined destroy of PhotogrammetrySession.Configuration(v53, type metadata accessor for PhotogrammetrySession.Configuration);
      }

LABEL_27:
      lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 104))(v76, v52, v46);
      swift_willThrow();
      outlined destroy of PhotogrammetrySession.Configuration(v85, type metadata accessor for PhotogrammetrySession.Configuration);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v89, v45);

      return v13;
    }
    if (MEMORY[0x263F36980] && v51 == *MEMORY[0x263F36980])
    {

      __n128 v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      uint64_t v13 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        __n128 v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)__n128 v64 = 0;
        _os_log_impl(&dword_227DD2000, v62, (os_log_type_t)v13, "Internal photogrammetry session init for photogrammetry samples failed!", v64, 2u);
        MEMORY[0x22A696500](v64, -1, -1);
      }

      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
  }

  id v65 = v28;
  id v66 = v28;
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = (void *)swift_slowAlloc();
    id v94 = v70;
    *(_DWORD *)uint64_t v69 = 136446210;
    swift_getErrorValue();
    uint64_t v71 = Error.localizedDescription.getter();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v94);
    uint64_t v45 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227DD2000, v67, v68, "Internal photogrammetry session init for photogrammetry samples failed with %{public}s", v69, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v70, -1, -1);
    MEMORY[0x22A696500](v69, -1, -1);
  }
  else
  {
  }
  uint64_t v73 = v89;
  uint64_t v74 = v84;
  swift_willThrow();
  outlined destroy of PhotogrammetrySession.Configuration(v85, type metadata accessor for PhotogrammetrySession.Configuration);
  swift_release();
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  uint64_t v13 = v74 + 8;
  v75(v73, v45);
  return v13;
}

uint64_t type metadata accessor for PhotogrammetrySession.Error(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Error);
}

uint64_t outlined init with copy of PhotogrammetrySession.Configuration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PhotogrammetrySession.Request(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Request);
}

uint64_t type metadata accessor for PhotogrammetrySession.Output(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Output);
}

uint64_t outlined destroy of PhotogrammetrySession.Configuration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of PhotogrammetrySession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PhotogrammetrySession.Result(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySession.Result);
}

void partial apply for closure #1 in PhotogrammetrySessionImpl.process(requests:)()
{
  v1._rawValue = *(void **)(v0 + 24);
  closure #1 in PhotogrammetrySessionImpl.process(requests:)(*(void *)(v0 + 16), v1);
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.cancel()()
{
  return closure #1 in PhotogrammetrySessionImpl.cancel()(v0);
}

uint64_t sub_22823B69C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t base witness table accessor for Error in PhotogrammetrySession.Error()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.SampleOrdering and conformance PhotogrammetrySession.Configuration.SampleOrdering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Configuration.FeatureSensitivity and conformance PhotogrammetrySession.Configuration.FeatureSensitivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Detail and conformance PhotogrammetrySession.Request.Detail);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Request.Geometry and conformance PhotogrammetrySession.Request.Geometry);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PhotogrammetrySession.Request()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type PhotogrammetrySession.Request and conformance PhotogrammetrySession.Request, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Request);
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Output.ProcessingStage and conformance PhotogrammetrySession.Output.ProcessingStage);
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in PhotogrammetrySession.Outputs.Iterator()
{
  return MEMORY[0x263F8E4E0];
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Outputs.Iterator and conformance PhotogrammetrySession.Outputs.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OrientedBoundingBox and conformance OrientedBoundingBox()
{
  unint64_t result = lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox;
  if (!lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrientedBoundingBox and conformance OrientedBoundingBox);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PhotogrammetrySession()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

__n128 sub_22823BA58@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

__n128 sub_22823BA6C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  a2[3] = *(_OWORD *)a1;
  a2[4] = v3;
  a2[5] = v4;
  return result;
}

uint64_t sub_22823BA80@<X0>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  simd_matrix4x4(a1[3]);
  uint64_t result = REAABBTransform();
  *a2 = v4;
  a2[1] = v5;
  return result;
}

__n128 sub_22823BAE4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 48) = xmmword_22830ECC0;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t ObjC metadata update function for PhotogrammetrySession()
{
  return type metadata accessor for PhotogrammetrySession(0);
}

uint64_t type metadata completion function for PhotogrammetrySession()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PhotogrammetrySession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PhotogrammetrySession);
}

uint64_t dispatch thunk of PhotogrammetrySession.process(requests:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

{
  return MEMORY[0x270F1AD60]();
}

uint64_t dispatch thunk of PhotogrammetrySession.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

{
  return MEMORY[0x270F1AD20]();
}

uint64_t dispatch thunk of PhotogrammetrySession.activeRequests.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PhotogrammetrySession.isProcessing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PhotogrammetrySession.configuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PhotogrammetrySession.outputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Limits()
{
  return &type metadata for PhotogrammetrySession.Limits;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Error(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for URL();
    long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Error);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.Error(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Error);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Error()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Configuration(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *long long v4 = *a2;
    long long v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    a1[2] = *((unsigned char *)a2 + 2);
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for PhotogrammetrySession.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for PhotogrammetrySession.Configuration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

unsigned char *assignWithCopy for PhotogrammetrySession.Configuration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

unsigned char *initializeWithTake for PhotogrammetrySession.Configuration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

unsigned char *assignWithTake for PhotogrammetrySession.Configuration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[*(int *)(a3 + 32)] = a2[*(int *)(a3 + 32)];
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySession.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22823CBCC);
}

uint64_t sub_22823CBCC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    int v13 = &a1[*(int *)(a3 + 28)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22823CC94);
}

unsigned char *sub_22823CC94(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for PhotogrammetrySession.Configuration()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Configuration.SampleOrdering()
{
  return &type metadata for PhotogrammetrySession.Configuration.SampleOrdering;
}

unsigned char *storeEnumTagSinglePayload for PhotogrammetrySession.Configuration.SampleOrdering(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22823CF10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Configuration.FeatureSensitivity()
{
  return &type metadata for PhotogrammetrySession.Configuration.FeatureSensitivity;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Request(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      long long v12 = *((_OWORD *)v11 + 5);
      *((_OWORD *)v10 + 4) = *((_OWORD *)v11 + 4);
      *((_OWORD *)v10 + 5) = v12;
      v10[96] = v11[96];
      long long v13 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *((_OWORD *)v10 + 1) = v13;
      long long v14 = *((_OWORD *)v11 + 3);
      *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
      *((_OWORD *)v10 + 3) = v14;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Request(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for URL();
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

char *initializeWithCopy for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    long long v10 = *((_OWORD *)v9 + 5);
    *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
    *((_OWORD *)v8 + 5) = v10;
    v8[96] = v9[96];
    long long v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    long long v12 = *((_OWORD *)v9 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 3) = v12;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      long long v10 = *((_OWORD *)v9 + 3);
      long long v11 = *((_OWORD *)v9 + 4);
      long long v12 = *((_OWORD *)v9 + 5);
      v8[96] = v9[96];
      *((_OWORD *)v8 + 4) = v11;
      *((_OWORD *)v8 + 5) = v12;
      *((_OWORD *)v8 + 3) = v10;
      long long v14 = *((_OWORD *)v9 + 1);
      long long v13 = *((_OWORD *)v9 + 2);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v14;
      *((_OWORD *)v8 + 2) = v13;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    long long v10 = *((_OWORD *)v9 + 5);
    *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
    *((_OWORD *)v8 + 5) = v10;
    v8[96] = v9[96];
    long long v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    long long v12 = *((_OWORD *)v9 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 3) = v12;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for PhotogrammetrySession.Request(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      long long v10 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v10;
      v8[96] = v9[96];
      long long v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      long long v12 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v12;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Request()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    void v2[4] = v2;
    v2[5] = "a";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhotogrammetrySession.Request.Detail(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22823D640);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Request.Detail()
{
  return &type metadata for PhotogrammetrySession.Request.Detail;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Request.Geometry()
{
  return &type metadata for PhotogrammetrySession.Request.Geometry;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.Result(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for URL();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 1:
      uint64_t result = swift_release();
      break;
    case 3:
      goto LABEL_9;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for PhotogrammetrySession.Result(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      *a1 = *a2;
      swift_retain();
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for PhotogrammetrySession.Result(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Result);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        *a1 = *a2;
        swift_retain();
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.Result(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Result);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Result()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Pose()
{
  return &type metadata for PhotogrammetrySession.Pose;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Poses()
{
  return &type metadata for PhotogrammetrySession.Poses;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.PointCloud()
{
  return &type metadata for PhotogrammetrySession.PointCloud;
}

__n128 __swift_memcpy20_16(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.PointCloud.Point()
{
  return &type metadata for PhotogrammetrySession.PointCloud.Point;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.Output(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          uint64_t v13 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v15 = (char *)a1 + v14;
          uint64_t v16 = (char *)a2 + v14;
          long long v17 = *((_OWORD *)v16 + 5);
          *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
          *((_OWORD *)v15 + 5) = v17;
          v15[96] = v16[96];
          long long v18 = *((_OWORD *)v16 + 1);
          *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
          *((_OWORD *)v15 + 1) = v18;
          long long v19 = *((_OWORD *)v16 + 3);
          *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
          *((_OWORD *)v15 + 3) = v19;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                     + 48);
        uint64_t v21 = *(void **)((char *)a2 + v20);
        id v22 = v21;
        *(uint64_t *)((char *)a1 + v20) = (uint64_t)v21;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          uint64_t v23 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
          uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          char v25 = (char *)a1 + v24;
          os_log_type_t v26 = (char *)a2 + v24;
          long long v27 = *((_OWORD *)v26 + 5);
          *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
          *((_OWORD *)v25 + 5) = v27;
          v25[96] = v26[96];
          long long v28 = *((_OWORD *)v26 + 1);
          *(_OWORD *)char v25 = *(_OWORD *)v26;
          *((_OWORD *)v25 + 1) = v28;
          long long v29 = *((_OWORD *)v26 + 3);
          *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
          *((_OWORD *)v25 + 3) = v29;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        uint64_t v31 = (uint64_t *)((char *)a1 + v30);
        uint64_t v32 = (uint64_t *)((char *)a2 + v30);
        uint64_t v33 = type metadata accessor for PhotogrammetrySession.Result(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v34 = type metadata accessor for URL();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v31, v32, v34);
            goto LABEL_28;
          case 1u:
            *uint64_t v31 = *v32;
            swift_retain();
            goto LABEL_28;
          case 3u:
            *uint64_t v31 = *v32;
            swift_bridgeObjectRetain();
            goto LABEL_28;
          case 4u:
            uint64_t v53 = v32[1];
            *uint64_t v31 = *v32;
            v31[1] = v53;
            v31[2] = v32[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_28:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
            break;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          uint64_t v35 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
          uint64_t v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v37 = (char *)a1 + v36;
          __n128 v38 = (char *)a2 + v36;
          long long v39 = *((_OWORD *)v38 + 5);
          *((_OWORD *)v37 + 4) = *((_OWORD *)v38 + 4);
          *((_OWORD *)v37 + 5) = v39;
          unsigned char v37[96] = v38[96];
          long long v40 = *((_OWORD *)v38 + 1);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
          *((_OWORD *)v37 + 1) = v40;
          long long v41 = *((_OWORD *)v38 + 3);
          *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
          *((_OWORD *)v37 + 3) = v41;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(uint64_t *)((char *)a1 + *(int *)(v42 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 48));
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v12 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          uint64_t v43 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
          uint64_t v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v45 = (char *)a1 + v44;
          uint64_t v46 = (char *)a2 + v44;
          long long v47 = *((_OWORD *)v46 + 5);
          *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
          *((_OWORD *)v45 + 5) = v47;
          v45[96] = v46[96];
          long long v48 = *((_OWORD *)v46 + 1);
          *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
          *((_OWORD *)v45 + 1) = v48;
          long long v49 = *((_OWORD *)v46 + 3);
          *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
          *((_OWORD *)v45 + 3) = v49;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v50 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        uint64_t v51 = (char *)a1 + v50;
        uint64_t v52 = (char *)a2 + v50;
        *(void *)uint64_t v51 = *(void *)v52;
        *((_WORD *)v51 + 4) = *((_WORD *)v52 + 4);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for PhotogrammetrySession.Output(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      }
      uint64_t v6 = *(void **)(a1
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                             + 48));

      break;
    case 1u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v2 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      }
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          swift_release();
          break;
        case 3u:
          goto LABEL_19;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_19;
        default:
          return;
      }
      break;
    case 2u:
    case 5u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
LABEL_7:
        uint64_t v3 = type metadata accessor for URL();
        unsigned int v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
        v4(a1, v3);
      }
      break;
    case 3u:
LABEL_19:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void *initializeWithCopy for PhotogrammetrySession.Output(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        long long v14 = *((_OWORD *)v13 + 5);
        *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
        *((_OWORD *)v12 + 5) = v14;
        v12[96] = v13[96];
        long long v15 = *((_OWORD *)v13 + 1);
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v15;
        long long v16 = *((_OWORD *)v13 + 3);
        *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
        *((_OWORD *)v12 + 3) = v16;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                   + 48);
      long long v18 = *(void **)((char *)a2 + v17);
      id v19 = v18;
      *(void *)((char *)a1 + v17) = v18;
      goto LABEL_26;
    case 1u:
      uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v20 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        uint64_t v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        id v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        long long v24 = *((_OWORD *)v23 + 5);
        *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
        *((_OWORD *)v22 + 5) = v24;
        v22[96] = v23[96];
        long long v25 = *((_OWORD *)v23 + 1);
        *(_OWORD *)id v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v25;
        long long v26 = *((_OWORD *)v23 + 3);
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v22 + 3) = v26;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      long long v28 = (void *)((char *)a1 + v27);
      long long v29 = (void *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v31 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(v28, v29, v31);
          goto LABEL_25;
        case 1u:
          void *v28 = *v29;
          swift_retain();
          goto LABEL_25;
        case 3u:
          void *v28 = *v29;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
          uint64_t v50 = v29[1];
          void *v28 = *v29;
          v28[1] = v50;
          _OWORD v28[2] = v29[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
          break;
      }
      goto LABEL_26;
    case 2u:
      uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        long long v36 = *((_OWORD *)v35 + 5);
        *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
        *((_OWORD *)v34 + 5) = v36;
        v34[96] = v35[96];
        long long v37 = *((_OWORD *)v35 + 1);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
        *((_OWORD *)v34 + 1) = v37;
        long long v38 = *((_OWORD *)v35 + 3);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
        *((_OWORD *)v34 + 3) = v38;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
      *(void *)((char *)a1 + *(int *)(v39 + 48)) = *(void *)((char *)a2 + *(int *)(v39 + 48));
      goto LABEL_26;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      goto LABEL_26;
    case 5u:
      uint64_t v9 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v40 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
        uint64_t v41 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v42 = (char *)a1 + v41;
        uint64_t v43 = (char *)a2 + v41;
        long long v44 = *((_OWORD *)v43 + 5);
        *((_OWORD *)v42 + 4) = *((_OWORD *)v43 + 4);
        *((_OWORD *)v42 + 5) = v44;
        v42[96] = v43[96];
        long long v45 = *((_OWORD *)v43 + 1);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v45;
        long long v46 = *((_OWORD *)v43 + 3);
        *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
        *((_OWORD *)v42 + 3) = v46;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                   + 48);
      long long v48 = (char *)a1 + v47;
      long long v49 = (char *)a2 + v47;
      *(void *)long long v48 = *(void *)v49;
      *((_WORD *)v48 + 4) = *((_WORD *)v49 + 4);
LABEL_26:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for PhotogrammetrySession.Output(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Output);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        }
        else
        {
          uint64_t v10 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v12 = (char *)a1 + v11;
          uint64_t v13 = (char *)a2 + v11;
          long long v14 = *((_OWORD *)v13 + 3);
          long long v15 = *((_OWORD *)v13 + 4);
          long long v16 = *((_OWORD *)v13 + 5);
          v12[96] = v13[96];
          *((_OWORD *)v12 + 4) = v15;
          *((_OWORD *)v12 + 5) = v16;
          *((_OWORD *)v12 + 3) = v14;
          long long v18 = *((_OWORD *)v13 + 1);
          long long v17 = *((_OWORD *)v13 + 2);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
          *((_OWORD *)v12 + 1) = v18;
          *((_OWORD *)v12 + 2) = v17;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                     + 48);
        uint64_t v20 = *(void **)((char *)a2 + v19);
        id v21 = v20;
        *(void *)((char *)a1 + v19) = v20;
        goto LABEL_27;
      case 1u:
        uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          uint64_t v22 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
          uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          long long v24 = (char *)a1 + v23;
          long long v25 = (char *)a2 + v23;
          long long v26 = *((_OWORD *)v25 + 3);
          long long v27 = *((_OWORD *)v25 + 4);
          long long v28 = *((_OWORD *)v25 + 5);
          v24[96] = v25[96];
          *((_OWORD *)v24 + 4) = v27;
          *((_OWORD *)v24 + 5) = v28;
          *((_OWORD *)v24 + 3) = v26;
          long long v30 = *((_OWORD *)v25 + 1);
          long long v29 = *((_OWORD *)v25 + 2);
          *(_OWORD *)long long v24 = *(_OWORD *)v25;
          *((_OWORD *)v24 + 1) = v30;
          *((_OWORD *)v24 + 2) = v29;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        uint64_t v32 = (void *)((char *)a1 + v31);
        uint64_t v33 = (void *)((char *)a2 + v31);
        uint64_t v34 = type metadata accessor for PhotogrammetrySession.Result(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v35 = type metadata accessor for URL();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v32, v33, v35);
            goto LABEL_26;
          case 1u:
            void *v32 = *v33;
            swift_retain();
            goto LABEL_26;
          case 3u:
            void *v32 = *v33;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
            void *v32 = *v33;
            v32[1] = v33[1];
            _OWORD v32[2] = v33[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
            break;
        }
        goto LABEL_27;
      case 2u:
        uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v36 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
          uint64_t v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          long long v38 = (char *)a1 + v37;
          uint64_t v39 = (char *)a2 + v37;
          long long v40 = *((_OWORD *)v39 + 3);
          long long v41 = *((_OWORD *)v39 + 4);
          long long v42 = *((_OWORD *)v39 + 5);
          v38[96] = v39[96];
          *((_OWORD *)v38 + 4) = v41;
          *((_OWORD *)v38 + 5) = v42;
          *((_OWORD *)v38 + 3) = v40;
          long long v44 = *((_OWORD *)v39 + 1);
          long long v43 = *((_OWORD *)v39 + 2);
          *(_OWORD *)long long v38 = *(_OWORD *)v39;
          *((_OWORD *)v38 + 1) = v44;
          *((_OWORD *)v38 + 2) = v43;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(void *)((char *)a1 + *(int *)(v45 + 48)) = *(void *)((char *)a2 + *(int *)(v45 + 48));
        goto LABEL_27;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_27;
      case 5u:
        uint64_t v9 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v46 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v46 - 8) + 16))(a1, a2, v46);
          uint64_t v47 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          long long v48 = (char *)a1 + v47;
          long long v49 = (char *)a2 + v47;
          long long v50 = *((_OWORD *)v49 + 3);
          long long v51 = *((_OWORD *)v49 + 4);
          long long v52 = *((_OWORD *)v49 + 5);
          v48[96] = v49[96];
          *((_OWORD *)v48 + 4) = v51;
          *((_OWORD *)v48 + 5) = v52;
          *((_OWORD *)v48 + 3) = v50;
          long long v54 = *((_OWORD *)v49 + 1);
          long long v53 = *((_OWORD *)v49 + 2);
          *(_OWORD *)long long v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v54;
          *((_OWORD *)v48 + 2) = v53;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        uint64_t v56 = (char *)a1 + v55;
        uint64_t v57 = (char *)a2 + v55;
        __int16 v58 = *((_WORD *)v57 + 4);
        *(void *)uint64_t v56 = *(void *)v57;
        *((_WORD *)v56 + 4) = v58;
LABEL_27:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for PhotogrammetrySession.Output(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v12 = &a1[v11];
        uint64_t v13 = &a2[v11];
        long long v14 = *((_OWORD *)v13 + 5);
        *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
        *((_OWORD *)v12 + 5) = v14;
        v12[96] = v13[96];
        long long v15 = *((_OWORD *)v13 + 1);
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v15;
        long long v16 = *((_OWORD *)v13 + 3);
        *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
        *((_OWORD *)v12 + 3) = v16;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error));
      *(void *)&a1[*(int *)(v17 + 48)] = *(void *)&a2[*(int *)(v17 + 48)];
      goto LABEL_21;
    case 1u:
      uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v18 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
        uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v20 = &a1[v19];
        id v21 = &a2[v19];
        long long v22 = *((_OWORD *)v21 + 5);
        *((_OWORD *)v20 + 4) = *((_OWORD *)v21 + 4);
        *((_OWORD *)v20 + 5) = v22;
        v20[96] = v21[96];
        long long v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        *((_OWORD *)v20 + 1) = v23;
        long long v24 = *((_OWORD *)v21 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
        *((_OWORD *)v20 + 3) = v24;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                   + 48);
      long long v26 = &a1[v25];
      long long v27 = &a2[v25];
      uint64_t v28 = type metadata accessor for PhotogrammetrySession.Result(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v47 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v26, v27, v47);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_21;
    case 2u:
      uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
        uint64_t v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v31 = &a1[v30];
        uint64_t v32 = &a2[v30];
        long long v33 = *((_OWORD *)v32 + 5);
        *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
        *((_OWORD *)v31 + 5) = v33;
        v31[96] = v32[96];
        long long v34 = *((_OWORD *)v32 + 1);
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        *((_OWORD *)v31 + 1) = v34;
        long long v35 = *((_OWORD *)v32 + 3);
        *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
        *((_OWORD *)v31 + 3) = v35;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
      *(void *)&a1[*(int *)(v36 + 48)] = *(void *)&a2[*(int *)(v36 + 48)];
      goto LABEL_21;
    case 5u:
      uint64_t v9 = type metadata accessor for PhotogrammetrySession.Request(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v37 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(a1, a2, v37);
        uint64_t v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                     + 64);
        uint64_t v39 = &a1[v38];
        long long v40 = &a2[v38];
        long long v41 = *((_OWORD *)v40 + 5);
        *((_OWORD *)v39 + 4) = *((_OWORD *)v40 + 4);
        *((_OWORD *)v39 + 5) = v41;
        v39[96] = v40[96];
        long long v42 = *((_OWORD *)v40 + 1);
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
        *((_OWORD *)v39 + 1) = v42;
        long long v43 = *((_OWORD *)v40 + 3);
        *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
        *((_OWORD *)v39 + 3) = v43;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                   + 48);
      uint64_t v45 = &a1[v44];
      uint64_t v46 = &a2[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for PhotogrammetrySession.Output(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Output);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        }
        else
        {
          uint64_t v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
          uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v12 = &a1[v11];
          uint64_t v13 = &a2[v11];
          long long v14 = *((_OWORD *)v13 + 5);
          *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
          *((_OWORD *)v12 + 5) = v14;
          v12[96] = v13[96];
          long long v15 = *((_OWORD *)v13 + 1);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
          *((_OWORD *)v12 + 1) = v15;
          long long v16 = *((_OWORD *)v13 + 3);
          *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
          *((_OWORD *)v12 + 3) = v16;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error));
        *(void *)&a1[*(int *)(v17 + 48)] = *(void *)&a2[*(int *)(v17 + 48)];
        goto LABEL_22;
      case 1u:
        uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          uint64_t v18 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
          uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v20 = &a1[v19];
          id v21 = &a2[v19];
          long long v22 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v20 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v20 + 5) = v22;
          v20[96] = v21[96];
          long long v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v23;
          long long v24 = *((_OWORD *)v21 + 3);
          *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
          *((_OWORD *)v20 + 3) = v24;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                     + 48);
        long long v26 = &a1[v25];
        long long v27 = &a2[v25];
        uint64_t v28 = type metadata accessor for PhotogrammetrySession.Result(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v47 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v26, v27, v47);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_22;
      case 2u:
        uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v29 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
          uint64_t v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v31 = &a1[v30];
          uint64_t v32 = &a2[v30];
          long long v33 = *((_OWORD *)v32 + 5);
          *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
          *((_OWORD *)v31 + 5) = v33;
          v31[96] = v32[96];
          long long v34 = *((_OWORD *)v32 + 1);
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          *((_OWORD *)v31 + 1) = v34;
          long long v35 = *((_OWORD *)v32 + 3);
          *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
          *((_OWORD *)v31 + 3) = v35;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double));
        *(void *)&a1[*(int *)(v36 + 48)] = *(void *)&a2[*(int *)(v36 + 48)];
        goto LABEL_22;
      case 5u:
        uint64_t v9 = type metadata accessor for PhotogrammetrySession.Request(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v37 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(a1, a2, v37);
          uint64_t v38 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                       + 64);
          uint64_t v39 = &a1[v38];
          long long v40 = &a2[v38];
          long long v41 = *((_OWORD *)v40 + 5);
          *((_OWORD *)v39 + 4) = *((_OWORD *)v40 + 4);
          *((_OWORD *)v39 + 5) = v41;
          v39[96] = v40[96];
          long long v42 = *((_OWORD *)v40 + 1);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          *((_OWORD *)v39 + 1) = v42;
          long long v43 = *((_OWORD *)v40 + 3);
          *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
          *((_OWORD *)v39 + 3) = v43;
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v44 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                     + 48);
        uint64_t v45 = &a1[v44];
        uint64_t v46 = &a2[v44];
        *(void *)uint64_t v45 = *(void *)v46;
        *((_WORD *)v45 + 4) = *((_WORD *)v46 + 4);
LABEL_22:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.Output()
{
  uint64_t result = type metadata accessor for PhotogrammetrySession.Request(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v8 = &v7;
    uint64_t result = type metadata accessor for PhotogrammetrySession.Result(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v9 = &v6;
      uint64_t v3 = MEMORY[0x263F8CF70] + 64;
      swift_getTupleTypeLayout2();
      uint64_t v10 = &v5;
      uint64_t v11 = &unk_228346760;
      uint64_t v12 = v3;
      swift_getTupleTypeLayout2();
      uint64_t v13 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySession.Output.ProgressInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 250);
  }
  if (*(unsigned __int8 *)(a1 + 9) <= 6u) {
    int v3 = 6;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 9);
  }
  int v4 = v3 - 7;
  if (*(unsigned __int8 *)(a1 + 9) < 6u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySession.Output.ProgressInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Output.ProgressInfo()
{
  return &type metadata for PhotogrammetrySession.Output.ProgressInfo;
}

unsigned char *storeEnumTagSinglePayload for PhotogrammetrySession.Output.ProcessingStage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22823FF64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Output.ProcessingStage()
{
  return &type metadata for PhotogrammetrySession.Output.ProcessingStage;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Outputs()
{
  return &type metadata for PhotogrammetrySession.Outputs;
}

ValueMetadata *type metadata accessor for PhotogrammetrySession.Outputs.Iterator()
{
  return &type metadata for PhotogrammetrySession.Outputs.Iterator;
}

ValueMetadata *type metadata accessor for OrientedBoundingBox()
{
  return &type metadata for OrientedBoundingBox;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySession.InputSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySession.InputSource(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_release();
  }
  else
  {
    uint64_t v3 = type metadata accessor for URL();
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
}

void *initializeWithCopy for PhotogrammetrySession.InputSource(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for PhotogrammetrySession.InputSource(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.InputSource);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PhotogrammetrySession.InputSource(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Configuration((uint64_t)a1, type metadata accessor for PhotogrammetrySession.InputSource);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for PhotogrammetrySession.InputSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ShaderGraphMaterial.parameterNames.getter()
{
  swift_beginAccess();
  uint64_t v0 = REMaterialAssetCopyShaderGraphParameterNames();
  if (!v0) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v1 = (void *)v0;
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void ShaderGraphMaterial.getParameter(name:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  char v9 = *((unsigned char *)v3 + 16);
  uint64_t v10 = v3[3];
  uint64_t v11 = (void *)v3[4];
  uint64_t v31 = v3[5];
  char v29 = *((unsigned char *)v3 + 49);
  char v30 = *((unsigned char *)v3 + 48);
  uint64_t v28 = v3[7];
  char v27 = *((unsigned char *)v3 + 64);
  swift_beginAccess();
  uint64_t v12 = (void *)MEMORY[0x22A688A50](a1, a2);
  char IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

  if ((IsVisibleShaderGraphParameter & 1) == 0)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
LABEL_9:
    char v26 = -1;
    goto LABEL_10;
  }
  uint64_t v36 = 3027236;
  unint64_t v37 = 0xE300000000000000;
  v14._uint64_t countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v45[3] = &type metadata for ShaderGraphMaterial;
  v45[4] = &protocol witness table for ShaderGraphMaterial;
  uint64_t v15 = swift_allocObject();
  v45[0] = v15;
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v7;
  *(unsigned char *)(v15 + 32) = v9;
  *(void *)(v15 + 40) = v10;
  *(void *)(v15 + 48) = v11;
  *(void *)(v15 + 56) = v31;
  *(unsigned char *)(v15 + 64) = v30;
  *(unsigned char *)(v15 + 65) = v29;
  *(void *)(v15 + 72) = v28;
  *(unsigned char *)(v15 + 80) = v27;
  __swift_project_boxed_opaque_existential_1(v45, (uint64_t)&type metadata for ShaderGraphMaterial);
  swift_bridgeObjectRetain();
  id v16 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  Material.subscript.getter(3027236, 0xE300000000000000, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)v34);
  if (v35 == 255)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MaterialParameters((uint64_t)v45);
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    goto LABEL_8;
  }
  v32[0] = v34[0];
  v32[1] = v34[1];
  _OWORD v32[2] = v34[2];
  v32[3] = v34[3];
  unsigned __int8 v33 = v35;
  MaterialParameters.Value.init(_:)((uint64_t *)v32, (uint64_t)&v36);
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)v36;
  uint64_t v17 = v37;
  uint64_t v20 = v38;
  uint64_t v19 = v39;
  uint64_t v22 = v40;
  uint64_t v21 = v41;
  uint64_t v24 = v42;
  uint64_t v23 = v43;
  int v25 = v44;
  outlined destroy of MaterialParameters((uint64_t)v45);
  if (v25 == 255)
  {
LABEL_8:
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v17;
    *(void *)(a3 + 16) = v20;
    *(void *)(a3 + 24) = v19;
    *(void *)(a3 + 32) = v22;
    *(void *)(a3 + 40) = v21;
    *(void *)(a3 + 48) = v24;
    *(void *)(a3 + 56) = v23;
    goto LABEL_9;
  }
  if (v25)
  {
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v17;
    *(void *)(a3 + 16) = v20;
    *(void *)(a3 + 24) = v19;
    *(void *)(a3 + 32) = v22;
    *(void *)(a3 + 40) = v21;
    *(void *)(a3 + 48) = v24;
    *(void *)(a3 + 56) = v23;
    *(unsigned char *)(a3 + 64) = v25;
    return;
  }
  swift_retain();
  outlined consume of MaterialParameters.Value?(v18, v17, v20, v19, v22, v21, v24, v23, 0);
  *(void *)a3 = v17;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = 0;
  char v26 = 1;
LABEL_10:
  *(unsigned char *)(a3 + 64) = v26;
}

void ShaderGraphMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40) == 1;
}

unint64_t specialized Collection.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

void ShaderGraphMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    if (*(void *)(v1 + 56) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 56);
    }
  }
  *a1 = v2;
}

uint64_t sub_2282407EC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

BOOL static ShaderGraphMaterial.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ShaderGraphMaterial.Error.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ShaderGraphMaterial.Error.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ShaderGraphMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t ShaderGraphMaterial.__resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*ShaderGraphMaterial.__resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ShaderGraphMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*ShaderGraphMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static ShaderGraphMaterial.parameterHandle(name:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  String.append(_:)(*(Swift::String *)&a1);
  type metadata accessor for MaterialParameters.Handle.SharedHandle();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 36) = 1;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = RESerializedMaterialParameterHandleCreate();
  uint64_t result = swift_release();
  *(void *)(v4 + 16) = v5;
  *a2 = v4;
  return result;
}

void ShaderGraphMaterial.setParameter(handle:value:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = *a1;
  uint64_t v7 = *(void **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v87 = *(void *)(a2 + 24);
  uint64_t v68 = *(void *)(a2 + 40);
  uint64_t v69 = *(void *)(a2 + 32);
  uint64_t v66 = *(void *)(a2 + 56);
  uint64_t v67 = *(void *)(a2 + 48);
  char v65 = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = *(void **)v5;
  uint64_t v12 = (void *)(*(void *)v5 + 16);
  swift_beginAccess();
  if (!v10 || *v12 != v10)
  {
    uint64_t v13 = *(void *)(v5 + 8);
    char v14 = *(unsigned char *)(v5 + 16);
    long long v15 = *(_OWORD *)(v5 + 24);
    uint64_t v16 = *(void *)(v5 + 40);
    char v17 = *(unsigned char *)(v5 + 48);
    char v18 = *(unsigned char *)(v5 + 49);
    uint64_t v19 = *(void *)(v5 + 56);
    char v20 = *(unsigned char *)(v5 + 64);
    uint64_t v79 = v11;
    uint64_t v80 = v13;
    LOBYTE(v81) = v14;
    long long v82 = v15;
    uint64_t v83 = v16;
    LOBYTE(v84) = v17;
    BYTE1(v84) = v18;
    uint64_t v85 = v19;
    char v86 = v20;
    uint64_t v70 = (void *)v6;
    if ((ShaderGraphMaterial.isVisibleHandle(_:)() & 1) == 0)
    {
      lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
      swift_allocError();
      *uint64_t v40 = 1;
      swift_willThrow();
      return;
    }
    *(void *)(v6 + 24) = *v12;
  }
  uint64_t v79 = v7;
  uint64_t v80 = v8;
  uint64_t v64 = v9;
  uint64_t v81 = v9;
  *(void *)&long long v82 = v87;
  *((void *)&v82 + 1) = v69;
  uint64_t v83 = v68;
  uint64_t v84 = v67;
  uint64_t v85 = v66;
  char v86 = v65;
  uint64_t v21 = MaterialParameters.Value.getMaterialParameterType()();
  uint64_t v22 = v21;
  if ((*(unsigned char *)(v6 + 36) & 1) != 0 || *(_DWORD *)(v6 + 32) != v21)
  {
    int ParameterTypeWithHandle = REMaterialAssetGetParameterTypeWithHandle();
    ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(v22, ParameterTypeWithHandle);
    if (v3) {
      return;
    }
    *(_DWORD *)(v6 + 32) = v22;
    *(unsigned char *)(v6 + 36) = 0;
  }
  if (v22 == 1)
  {
    char v58 = *(unsigned char *)(v5 + 16);
    uint64_t v24 = *(void **)(v5 + 32);
    uint64_t v61 = *(void *)(v5 + 24);
    uint64_t v63 = *(void *)(v5 + 8);
    uint64_t v52 = *(void *)(v5 + 40);
    char v50 = *(unsigned char *)(v5 + 48);
    char v48 = *(unsigned char *)(v5 + 49);
    uint64_t v46 = *(void *)(v5 + 56);
    char v45 = *(unsigned char *)(v5 + 64);
    swift_bridgeObjectRetain();
    id v59 = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    Key = (void *)RESerializedMaterialParameterHandleGetKey();
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    unint64_t v29 = String.index(_:offsetBy:)();
    unint64_t v30 = specialized Collection.subscript.getter(v29, v26, v28);
    uint64_t v32 = v31;
    uint64_t v54 = v8;
    uint64_t v56 = v7;
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v44 = MEMORY[0x22A688B50](v30, v32, v34, v36);
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v79 = v11;
    uint64_t v80 = v63;
    LOBYTE(v81) = v58;
    *(void *)&long long v82 = v61;
    *((void *)&v82 + 1) = v59;
    uint64_t v83 = v52;
    LOBYTE(v84) = v50;
    BYTE1(v84) = v48;
    uint64_t v85 = v46;
    char v86 = v45;
    uint64_t v7 = v56;
    uint64_t v70 = v56;
    uint64_t v71 = v54;
    uint64_t v8 = v54;
    uint64_t v39 = v64;
    uint64_t v72 = v64;
    uint64_t v73 = v87;
    uint64_t v74 = v69;
    uint64_t v75 = v68;
    uint64_t v76 = v67;
    uint64_t v77 = v66;
    char v78 = v65;
    ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(v44, v38, (uint64_t)&v70);
    if (v4)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = v64;
  }
  uint64_t v70 = v7;
  uint64_t v71 = v8;
  uint64_t v72 = v39;
  uint64_t v73 = v87;
  uint64_t v74 = v69;
  uint64_t v75 = v68;
  uint64_t v76 = v67;
  uint64_t v77 = v66;
  char v78 = v65;
  __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v70, (uint64_t)&v79);
  uint64_t v60 = v80;
  __n128 v62 = v79;
  uint64_t v55 = v82;
  uint64_t v57 = v81;
  uint64_t v49 = v83;
  uint64_t v41 = v85;
  uint64_t v51 = v84;
  uint64_t v53 = *((void *)&v82 + 1);
  char v42 = v86;
  char v47 = v86;
  outlined copy of MaterialParameters.Value(v7, v8, v39, v87, v69, v68, v67, v66, v65);
  KeyUnownedCString = (const char *)RESerializedMaterialParameterHandleGetKeyUnownedCString();
  uint64_t v70 = v62;
  uint64_t v71 = v60;
  uint64_t v72 = v57;
  uint64_t v73 = v55;
  uint64_t v74 = v53;
  uint64_t v75 = v49;
  uint64_t v76 = v51;
  uint64_t v77 = v41;
  char v78 = v42;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(KeyUnownedCString, (uint64_t)&v70);
  outlined consume of __RKMaterialParameterBlock.Parameter(v62, v60, v57, v55, v53, v49, v51, v41, v47);
}

uint64_t ShaderGraphMaterial.isVisibleHandle(_:)()
{
  Key = (void *)RESerializedMaterialParameterHandleGetKey();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v3 = v2;

  v16[0] = 46;
  v16[1] = 0xE100000000000000;
  void v15[2] = v16;
  uint64_t v4 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v15, v1, v3);
  if (v4[2] == 2)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = v4[10];
    uint64_t v8 = v4[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x22A688B50](v5, v6, v7, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v12 = (void *)MEMORY[0x22A688A50](v9, v11);
    uint64_t IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return IsVisibleShaderGraphParameter;
}

uint64_t ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(uint64_t result, int a2)
{
  if (!a2)
  {
    char v2 = 1;
LABEL_13:
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *unint64_t v3 = v2;
    return swift_willThrow();
  }
  if (a2 != result
    && (a2 != 5 || result != 4)
    && (result != 5 || a2 != 4)
    && (a2 != 20 || result != 19))
  {
    char v2 = 0;
    if (result != 20 || a2 != 19) {
      goto LABEL_13;
    }
  }
  return result;
}

void ShaderGraphMaterial.getParameter(handle:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  uint64_t v28 = v2[1];
  char v27 = *((unsigned char *)v2 + 16);
  uint64_t v5 = v2[3];
  uint64_t v26 = (void *)v2[4];
  uint64_t v6 = v2[5];
  char v7 = *((unsigned char *)v2 + 48);
  char v8 = *((unsigned char *)v2 + 49);
  uint64_t v9 = v2[7];
  unsigned __int8 v10 = *((unsigned char *)v2 + 64);
  uint64_t v11 = *(void *)(*a1 + 24);
  uint64_t v12 = (void *)(v4 + 16);
  swift_beginAccess();
  if (!v11 || *v12 != v11)
  {
    *(void *)&long long v31 = v4;
    *((void *)&v31 + 1) = v28;
    LOBYTE(v32) = v27;
    *((void *)&v32 + 1) = v5;
    *(void *)&long long v33 = v26;
    *((void *)&v33 + 1) = v6;
    LOBYTE(v34) = v7;
    BYTE1(v34) = v8;
    *((void *)&v34 + 1) = v9;
    unsigned __int8 v35 = v10;
    *(void *)&v29[0] = v3;
    if ((ShaderGraphMaterial.isVisibleHandle(_:)() & 1) == 0)
    {
      uint64_t v24 = a2;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      char v19 = -1;
      goto LABEL_12;
    }
    *(void *)(v3 + 24) = *v12;
  }
  swift_bridgeObjectRetain();
  id v13 = v26;
  swift_bridgeObjectRetain();
  Key = (void *)RESerializedMaterialParameterHandleGetKey();
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v13;
  specialized String.withCString<A>(_:)(v15, v17, v18, (uint64_t)&v31);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v19 = v35;
  if (v35 == 255)
  {
    uint64_t v24 = a2;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v29[0] = v31;
    v29[1] = v32;
    void v29[2] = v33;
    void v29[3] = v34;
    unsigned __int8 v30 = v35;
    MaterialParameters.Value.init(_:)((uint64_t *)v29, (uint64_t)&v31);
    long long v20 = v31;
    long long v21 = v32;
    long long v22 = v33;
    long long v23 = v34;
    char v19 = v35;
    if (v35 == 255 || v35)
    {
      uint64_t v24 = a2;
      *(void *)a2 = v31;
      *(void *)(a2 + 8) = *((void *)&v20 + 1);
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v22;
      *(_OWORD *)(a2 + 48) = v23;
    }
    else
    {
      swift_retain();
      outlined consume of MaterialParameters.Value?((void *)v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), 0);
      uint64_t v24 = a2;
      *(void *)a2 = *((void *)&v20 + 1);
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      char v19 = 1;
    }
  }
LABEL_12:
  *(unsigned char *)(v24 + 64) = v19;
}

uint64_t ShaderGraphMaterial.setParameter(name:value:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v41 = *(void *)(a3 + 8);
  char v42 = *(void **)a3;
  uint64_t v39 = *(void *)(a3 + 24);
  uint64_t v40 = *(void *)(a3 + 16);
  uint64_t v59 = *(void *)(a3 + 32);
  uint64_t v44 = *(void *)(a3 + 48);
  uint64_t v45 = *(void *)(a3 + 40);
  uint64_t v43 = *(void *)(a3 + 56);
  char v38 = *(unsigned char *)(a3 + 64);
  uint64_t v7 = *(void *)v3;
  uint64_t v6 = *(void **)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 24);
  char v8 = *(void **)(v3 + 32);
  uint64_t v32 = *(void *)(v3 + 40);
  char v27 = *(unsigned char *)(v3 + 16);
  char v28 = *(unsigned char *)(v3 + 48);
  char v29 = *(unsigned char *)(v3 + 49);
  uint64_t v30 = *(void *)(v3 + 56);
  char v26 = *(unsigned char *)(v3 + 64);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = a1;
  uint64_t v11 = (void *)MEMORY[0x22A688A50](a1, a2);
  char IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (IsVisibleShaderGraphParameter)
  {
    v53._uint64_t countAndFlagsBits = 3027236;
    v53._object = (void *)0xE300000000000000;
    v13._uint64_t countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    String.utf8CString.getter();
    int ParameterType = REMaterialAssetGetParameterType();
    swift_release();
    v47._uint64_t countAndFlagsBits = (uint64_t)v42;
    v47._object = (void *)v41;
    *(void *)&long long v48 = v40;
    *((void *)&v48 + 1) = v39;
    *(void *)&long long v49 = v59;
    *((void *)&v49 + 1) = v45;
    uint64_t v50 = v44;
    uint64_t v51 = v43;
    char v52 = v38;
    uint64_t v15 = MaterialParameters.Value.getMaterialParameterType()();
    ShaderGraphMaterial.validateParameterType(providedType:typeInEngine:)(v15, ParameterType);
    if (v35)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      Swift::String v34 = v53;
      uint64_t v18 = (uint64_t)v42;
      if (ParameterType == 1)
      {
        v53._uint64_t countAndFlagsBits = v7;
        v53._object = v6;
        LOBYTE(v54) = v27;
        uint64_t v19 = v9;
        *((void *)&v54 + 1) = v9;
        *(void *)&long long v55 = v10;
        *((void *)&v55 + 1) = v32;
        LOBYTE(v56) = v28;
        BYTE1(v56) = v29;
        uint64_t v57 = v30;
        char v58 = v26;
        v47._uint64_t countAndFlagsBits = (uint64_t)v42;
        v47._object = (void *)v41;
        *(void *)&long long v48 = v40;
        *((void *)&v48 + 1) = v39;
        *(void *)&long long v49 = v59;
        *((void *)&v49 + 1) = v45;
        uint64_t v50 = v44;
        uint64_t v51 = v43;
        char v52 = v38;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v20 = v10;
        ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(v36, (uint64_t)a2, (uint64_t)&v47);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v18 = (uint64_t)v42;
        uint64_t v9 = v19;
      }
      v46[3] = &type metadata for ShaderGraphMaterial;
      _OWORD v46[4] = &protocol witness table for ShaderGraphMaterial;
      uint64_t v21 = swift_allocObject();
      v46[0] = v21;
      *(void *)(v21 + 16) = v7;
      *(void *)(v21 + 24) = v6;
      *(unsigned char *)(v21 + 32) = v27;
      *(void *)(v21 + 40) = v9;
      *(void *)(v21 + 48) = v10;
      *(void *)(v21 + 56) = v32;
      *(unsigned char *)(v21 + 64) = v28;
      *(unsigned char *)(v21 + 65) = v29;
      *(void *)(v21 + 72) = v30;
      *(unsigned char *)(v21 + 80) = v26;
      v47._uint64_t countAndFlagsBits = v18;
      v47._object = (void *)v41;
      *(void *)&long long v48 = v40;
      *((void *)&v48 + 1) = v39;
      *(void *)&long long v49 = v59;
      *((void *)&v49 + 1) = v45;
      uint64_t v50 = v44;
      uint64_t v51 = v43;
      char v52 = v38;
      __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v47, (uint64_t)&v53);
      Swift::String v37 = v53;
      long long v31 = v55;
      long long v33 = v54;
      uint64_t v23 = v56;
      uint64_t v22 = v57;
      char v24 = v58;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, (uint64_t)&type metadata for ShaderGraphMaterial);
      Swift::String v47 = v37;
      long long v48 = v33;
      long long v49 = v31;
      uint64_t v50 = v23;
      uint64_t v51 = v22;
      char v52 = v24;
      outlined copy of MaterialParameters.Value(v42, v41, v40, v39, v59, v45, v44, v43, v38);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v25 = v10;
      Material.subscript.setter((uint64_t)&v47, v34._countAndFlagsBits, (uint64_t)v34._object, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&protocol witness table for ShaderGraphMaterial);
      return specialized Material.parameters.setter(v46);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *uint64_t v17 = 1;
    return swift_willThrow();
  }
}

void ShaderGraphMaterial.validateTextureParameterType(keyName:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v14 = *(void *)(a3 + 56);
  int v7 = *(unsigned __int8 *)(a3 + 64);
  swift_beginAccess();
  String.utf8CString.getter();
  Textureint ParameterType = REMaterialAssetGetTextureParameterType();
  swift_release();
  if (TextureParameterType)
  {
    if (v7 == 1)
    {
      swift_retain();
      if (RETextureAssetGetTextureType())
      {
        lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
        swift_allocError();
        *uint64_t v9 = 0;
        swift_willThrow();
      }
      outlined consume of MaterialParameters.Value(v4, v3, v6, v5, v11, v12, v13, v14, 1);
    }
  }
  else
  {
    lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error();
    swift_allocError();
    *id v10 = 0;
    swift_willThrow();
  }
}

uint64_t ShaderGraphMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ShaderGraphMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*ShaderGraphMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *ShaderGraphMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 40) = *result;
  return result;
}

unsigned __int8 *(*ShaderGraphMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 40) == 1;
  return PortalMaterial.triangleFillMode.modify;
}

uint64_t (*ShaderGraphMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*ShaderGraphMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ShaderGraphMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t ShaderGraphMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ShaderGraphMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance ShaderGraphMaterial()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance ShaderGraphMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance ShaderGraphMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance ShaderGraphMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance ShaderGraphMaterial()
{
  return *(void *)(v0 + 56);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance ShaderGraphMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

unsigned __int8 *ShaderGraphMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 56) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 64) = v3;
  return result;
}

uint64_t *(*ShaderGraphMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 64) & 1) == 0)
  {
    if (*(void *)(v1 + 56) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 56);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return ShaderGraphMaterial.faceCulling.modify;
}

uint64_t *ShaderGraphMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 56) = v5;
  *(unsigned char *)(v1 + 64) = v4;
  return result;
}

uint64_t ShaderGraphMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ShaderGraphMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

unsigned char *(*ShaderGraphMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

uint64_t ShaderGraphMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ShaderGraphMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

unsigned char *(*ShaderGraphMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 49);
  return ShaderGraphMaterial.readsDepth.modify;
}

unsigned char *ShaderGraphMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 49) = result[8];
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error;
  if (!lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphMaterial.Error and conformance ShaderGraphMaterial.Error);
  }
  return result;
}

uint64_t sub_228241D04@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 40) == 1;
  return result;
}

unsigned __int8 *sub_228241D18(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 40) = *result;
  return result;
}

uint64_t sub_228241D24@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 64) & 1) == 0)
  {
    if (*(void *)(result + 56) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 56);
    }
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_228241D44(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return ShaderGraphMaterial.faceCulling.setter(&v2);
}

uint64_t sub_228241D7C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 48);
  return result;
}

unsigned char *sub_228241D88(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 48) = *result;
  return result;
}

uint64_t sub_228241D94@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 49);
  return result;
}

unsigned char *sub_228241DA0(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 49) = *result;
  return result;
}

uint64_t initializeWithCopy for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  BOOL v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v4 = *(void **)(a2 + 32);
  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  return a1;
}

uint64_t assignWithTake for ShaderGraphMaterial(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  BOOL v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderGraphMaterial(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderGraphMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial()
{
  return &type metadata for ShaderGraphMaterial;
}

unsigned char *storeEnumTagSinglePayload for ShaderGraphMaterial.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282420E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderGraphMaterial.Error()
{
  return &type metadata for ShaderGraphMaterial.Error;
}

uint64_t Scene.physicsOrigin.getter()
{
  REPhysicsOriginComponentGetComponentType();
  RESceneGetComponentsOfClass();
  if (v0 < 1) {
    return 0;
  }
  uint64_t Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      uint64_t v3 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v6 = *(void *)(v3 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v3 + 16) = Entity;
      MEMORY[0x22A68E750](Entity, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(Entity);
  }
  __break(1u);
  return result;
}

uint64_t Scene.physicsOrigin.setter(uint64_t a1)
{
  REPhysicsOriginComponentGetComponentType();
  uint64_t result = RESceneGetComponentsOfClass();
  if (v3 >= 1)
  {
    do
    {
      REComponentGetEntity();
      REPhysicsOriginComponentGetComponentType();
      REEntityRemoveComponentByClass();
      REPhysicsOriginComponentGetComponentType();
      uint64_t result = RESceneGetComponentsOfClass();
    }
    while (v4 > 0);
  }
  if (a1)
  {
    swift_retain();
    REPhysicsOriginComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    return swift_release_n();
  }
  return result;
}

uint64_t (*Scene.physicsOrigin.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = Scene.physicsOrigin.getter();
  return Scene.physicsOrigin.modify;
}

uint64_t Scene.physicsOrigin.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return Scene.physicsOrigin.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  Scene.physicsOrigin.setter(v2);

  return swift_release();
}

uint64_t sub_228242374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Scene.physicsOrigin.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2282423A0()
{
  uint64_t v0 = swift_retain();
  return Scene.physicsOrigin.setter(v0);
}

uint64_t @objc ecsNetSyncWriteSnapshot(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  return specialized ecsNetSyncWriteSnapshot(_:_:_:_:_:)(a3, a4) & 1;
}

uint64_t @objc ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned char *a5, uint64_t a6)
{
  return specialized ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(a3, a4, a5, a6) & 1;
}

uint64_t NetPassthroughEncoder.encode<A>(_:)()
{
  swift_retain();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v6 = *(void *)(v0 + 24);
    unint64_t v7 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v4;
    return outlined consume of Data._Representation(v6, v7);
  }
  return result;
}

uint64_t type metadata accessor for NetPassthroughEncoder()
{
  return self;
}

uint64_t NetPassthroughDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + 24);
  unint64_t v9 = *(void *)(v2 + 32);
  swift_retain();
  outlined copy of Data._Representation(v8, v9);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    outlined consume of Data._Representation(v8, v9);
    return swift_release();
  }
  else
  {
    uint64_t v11 = v13;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, a2);
    outlined consume of Data._Representation(v8, v9);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11, v7, a2);
  }
}

uint64_t NetPassthroughEncoder.__deallocating_deinit()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NetPassthroughDecoder()
{
  return self;
}

uint64_t specialized ecsNetSyncWriteSnapshot(_:_:_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  v24[5] = *MEMORY[0x263EF8340];
  uint64_t result = RECustomComponentGetObject();
  if (result)
  {
    uint64_t v4 = result;
    if (one-time initialization token for handlesToCustomComponentTypes != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v5 = static SceneManager.handlesToCustomComponentTypes;
    if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) != 0))
    {
      long long v19 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v6);
      swift_endAccess();
      uint64_t v8 = *(void (**)(uint64_t))(*((void *)&v19 + 1) + 32);
      long long v23 = v19;
      __swift_allocate_boxed_opaque_existential_1(v22);
      v8(v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Encodable);
      if (swift_dynamicCast())
      {
        outlined init with take of BindableDataInternal(v20, (uint64_t)v24);
        uint64_t v9 = type metadata accessor for NetPassthroughEncoder();
        id v10 = (void *)swift_allocObject();
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        void v10[2] = JSONEncoder.init()();
        *(_OWORD *)(v10 + 3) = xmmword_228346A20;
        __swift_project_boxed_opaque_existential_1(v24, v24[3]);
        *(void *)&long long v23 = v9;
        *((void *)&v23 + 1) = &protocol witness table for NetPassthroughEncoder;
        v22[0] = (uint64_t)v10;
        swift_retain();
        __swift_project_boxed_opaque_existential_1(v22, v9);
        NetPassthroughEncoder.encode<A>(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        uint64_t v12 = v10[3];
        unint64_t v11 = v10[4];
        switch(v11 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v12), v12))
            {
              __break(1u);
            }
            else
            {
              unint64_t v15 = HIDWORD(v12) - (int)v12;
LABEL_22:
              if ((v15 & 0x8000000000000000) != 0 || HIDWORD(v15))
              {
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x228242CCCLL);
              }
              if (v11 >> 62 == 2)
              {
                uint64_t v16 = *(void *)(v12 + 16);
                outlined copy of Data._Representation(v10[3], v10[4]);
                swift_retain();
                swift_retain();
                if (!__DataStorage._bytes.getter() || !__OFSUB__(v16, __DataStorage._offset.getter()))
                {
                  __DataStorage._length.getter();
                  char v17 = RENetSyncBufferWrite();
                  swift_release();
                  swift_release();
LABEL_32:
                  outlined consume of Data._Representation(v12, v11);
                  if (v17)
                  {
LABEL_19:
                    swift_release();
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
                    return 1;
                  }
LABEL_33:
                  static os_log_type_t.error.getter();
                  type metadata accessor for OS_os_log();
                  uint64_t v18 = (void *)static OS_os_log.default.getter();
                  os_log(_:dso:log:_:_:)();

                  swift_release();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
                  return 0;
                }
                goto LABEL_36;
              }
              if ((int)v12 <= v12 >> 32)
              {
                swift_retain();
                if (!__DataStorage._bytes.getter() || !__OFSUB__((int)v12, __DataStorage._offset.getter()))
                {
                  __DataStorage._length.getter();
                  char v17 = RENetSyncBufferWrite();
                  goto LABEL_32;
                }
LABEL_37:
                __break(1u);
              }
            }
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          case 2uLL:
            uint64_t v14 = *(void *)(v12 + 16);
            uint64_t v13 = *(void *)(v12 + 24);
            unint64_t v15 = v13 - v14;
            if (!__OFSUB__(v13, v14)) {
              goto LABEL_22;
            }
            __break(1u);
LABEL_17:
            memset(v22, 0, 14);
LABEL_18:
            if (RENetSyncBufferWrite()) {
              goto LABEL_19;
            }
            goto LABEL_33;
          case 3uLL:
            goto LABEL_17;
          default:
            v22[0] = v10[3];
            LOWORD(v22[1]) = v11;
            BYTE2(v22[1]) = BYTE2(v11);
            BYTE3(v22[1]) = BYTE3(v11);
            BYTE4(v22[1]) = BYTE4(v11);
            BYTE5(v22[1]) = BYTE5(v11);
            goto LABEL_18;
        }
      }
      uint64_t v21 = 0;
      memset(v20, 0, sizeof(v20));
      outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for Encodable?);
    }
    else
    {
      swift_endAccess();
    }
    return 0;
  }
  return result;
}

uint64_t specialized ecsNetSyncReadSnapshot(_:_:_:_:_:_:)(uint64_t a1, Swift::UInt a2, unsigned char *a3, uint64_t a4)
{
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return 0;
  }
  uint64_t v8 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v11 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  long long v22 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v10);
  swift_endAccess();
  uint64_t v12 = *(void (**)(uint64_t, void, void))(*((void *)&v22 + 1) + 32);
  long long v26 = v22;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  v12(v8, v22, *((void *)&v22 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable);
  if (!swift_dynamicCast())
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Decodable?);
    return 0;
  }
  outlined init with take of BindableDataInternal(v23, (uint64_t)v27);
  uint64_t v13 = specialized Data.init(bytes:count:)(a3, a4);
  uint64_t v15 = v14;
  uint64_t v16 = type metadata accessor for NetPassthroughDecoder();
  char v17 = (void *)swift_allocObject();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  _OWORD v17[2] = JSONDecoder.init()();
  v17[3] = v13;
  void v17[4] = v15;
  *(void *)&long long v26 = v16;
  *((void *)&v26 + 1) = &protocol witness table for NetPassthroughDecoder;
  id v25 = v17;
  uint64_t v18 = v28;
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
  swift_retain();
  __swift_project_boxed_opaque_existential_1(&v25, v16);
  NetPassthroughDecoder.decode<A>(_:)(v19, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v25);
  swift_dynamicCast();
  uint64_t v21 = 1;
  (*(void (**)(long long *, uint64_t, void, uint64_t, void, void))(*((void *)&v22 + 1) + 40))(v23, v8, 0, 1, v22, *((void *)&v22 + 1));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v21;
}

CGColorRef HasPointLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v11);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v7);
  swift_release();
  CGColorRef result = v7;
  if (v7)
  {
    float v4 = v10;
    int v6 = v8;
    int v5 = v9;
  }
  else
  {
    CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    float v4 = 2.0;
    int v5 = 1092616192;
    int v6 = 1188210565;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  *(float *)(a1 + 16) = v4;
  return result;
}

uint64_t key path setter for HasPointLight.light : <A>A(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  v4[0] = *(void **)a1;
  v4[1] = *(void **)(a1 + 8);
  int v5 = v1;
  id v2 = v4[0];
  return HasPointLight.light.setter(v4);
}

uint64_t HasPointLight.light.setter(void **a1)
{
  id v2 = *a1;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasPointLight.light.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  char v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  void v7[5] = v3;
  void v7[3] = a2;
  HasPointLight.light.getter((uint64_t)v7);
  return HasPointLight.light.modify;
}

void HasPointLight.light.modify(void ***a1, char a2)
{
  id v2 = *a1;
  uint64_t v3 = **a1;
  int v5 = *((_DWORD *)*a1 + 2);
  int v4 = *((_DWORD *)*a1 + 3);
  int v6 = *((_DWORD *)*a1 + 4);
  int v8 = v3;
  int v9 = v5;
  int v10 = v4;
  int v11 = v6;
  if (a2)
  {
    id v7 = v3;
    HasPointLight.light.setter(&v8);
  }
  else
  {
    HasPointLight.light.setter(&v8);
  }

  free(v2);
}

float sub_228243354@<S0>(uint64_t a1@<X8>)
{
  HasPointLight.light.getter((uint64_t)v3);
  float result = v4;
  *(void *)a1 = v3[0];
  *(void *)(a1 + 8) = v3[1];
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2282433A4()
{
  return 16;
}

__n128 sub_2282433B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AudioUnitResource.audioComponentDescription.getter()
{
  REAudioGeneratorAssetGetComponentDescription();
  return v1;
}

uint64_t AudioUnitResource.__allocating_init(audioComponentDescription:layoutTag:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4 = a2;
  unsigned int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIDWORD(a2);
  swift_allocObject();
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v14);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  __swift_project_boxed_opaque_existential_1(&v14, v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  unint64_t v14 = __PAIR64__(v6, v5);
  int v15 = v4;
  int v16 = v7;
  int v17 = a3;
  uint64_t v11 = REAudioGeneratorAssetCreate();
  uint64_t v12 = AudioResource.init(fromCore:)(v11);
  swift_retain();
  REAudioGeneratorAssetSetLayoutTag();
  RERelease();
  swift_release();
  return v12;
}

uint64_t AudioUnitResource.init(audioComponentDescription:layoutTag:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4 = a2;
  unsigned int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIDWORD(a2);
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v14);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  __swift_project_boxed_opaque_existential_1(&v14, v18);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  unint64_t v14 = __PAIR64__(v6, v5);
  int v15 = v4;
  int v16 = v7;
  int v17 = a3;
  uint64_t v11 = REAudioGeneratorAssetCreate();
  uint64_t v12 = AudioResource.init(fromCore:)(v11);
  swift_retain();
  REAudioGeneratorAssetSetLayoutTag();
  RERelease();
  swift_release();
  return v12;
}

uint64_t AudioUnitResource.__allocating_init(fromCore:)(uint64_t a1)
{
  return AudioResource.init(fromCore:)(a1);
}

uint64_t AudioUnitResource.__deallocating_deinit()
{
  AudioResource.deinit();

  return swift_deallocClassInstance();
}

double sub_2282436B4@<D0>(uint64_t a1@<X8>)
{
  REAudioGeneratorAssetGetComponentDescription();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_2282436FC()
{
  return REAudioGeneratorAssetSetComponentDescription();
}

uint64_t type metadata accessor for AudioUnitResource()
{
  return self;
}

uint64_t method lookup function for AudioUnitResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioUnitResource);
}

uint64_t dispatch thunk of AudioUnitResource.audioComponentDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of AudioUnitResource.__allocating_init(audioComponentDescription:layoutTag:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if (v6)
      {
        uint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v3) {
    return 0;
  }
  type metadata accessor for RESceneDescriptor();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(uint64_t a1, void *a2, uint64_t *a3, char a4)
{
  uint64_t result = specialized Set.contains(_:)(a1, *a3);
  if ((result & 1) == 0)
  {
    swift_retain();
    specialized Set._Variant.insert(_:)(&v15, a1);
    swift_release();
    unint64_t v9 = __REAssetManager.__getDependencies(asset:)();
    unint64_t v10 = v9;
    if (v9 >> 62)
    {
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v11) {
        goto LABEL_11;
      }
    }
    if (v11 < 1)
    {
      __break(1u);
LABEL_16:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_13:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x22A689930](i, v10);
      }
      else
      {
        uint64_t v13 = *(void *)(v10 + 8 * i + 32);
        swift_retain();
      }
      specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(v13, a2, a3, 1);
      swift_release();
    }
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    if ((a4 & 1) == 0) {
      return result;
    }
    uint64_t v14 = swift_retain();
    MEMORY[0x22A688E10](v14);
    if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.rawValue.getter()
{
  uint64_t v1 = v0[1];
  if ((unint64_t)(v1 - 2) < 3) {
    return 0x534F6E6F69736976;
  }
  if (!v1) {
    return 5459817;
  }
  if (v1 == 1) {
    return 0x534F63616DLL;
  }
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  BOOL v4 = a1 == 5459817 && a2 == 0xE300000000000000;
  if (v4 || (uint64_t v5 = a2, v6 = a1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  else if (v6 == 0x534F63616DLL && v5 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v5 = 1;
  }
  else if (v6 == 0x534F6E6F69736976 && v5 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
  }
         || v6 == 1397715576 && v5 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
         || v6 == 0x316C616963657073 && v5 == 0xE800000000000000
         || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v5 = 2;
  }
  *a3 = v6;
  a3[1] = v5;
  return result;
}

void static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v61 = a5;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v59 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v64 = 0;
  if (*(void *)(a4 + 88))
  {
    uint64_t v57 = (char *)&v56 - v14;
    uint64_t v60 = *(void *)(a4 + 80);
    uint64_t v15 = a3;
    uint64_t v16 = a1;
    uint64_t v18 = a2[3];
    uint64_t v17 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v18);
    uint64_t v19 = v18;
    uint64_t v20 = v16;
    a3 = v15;
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v19, v17);
    URL._bridgeToObjectiveC()(v21);
    long long v23 = v22;
    String.utf8CString.getter();
    uint64_t v24 = (uint64_t *)RERealityFileMountFileAtURLWithAliasName();

    swift_release();
    if (!v24)
    {
      id v25 = v64;
      specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v64);
      if (!v5)
      {
        if (v25)
        {
          type metadata accessor for CFErrorRef(0);
          _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
          uint64_t v26 = swift_allocError();
          *char v27 = v25;
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v42 = v58;
        uint64_t v41 = v59;
        uint64_t v43 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v20, v59);
        if (!v26)
        {
          unint64_t v62 = 0;
          unint64_t v63 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          swift_bridgeObjectRelease();
          unint64_t v62 = 0xD00000000000001FLL;
          unint64_t v63 = 0x8000000228356420;
          v44._uint64_t countAndFlagsBits = URL.path.getter();
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          v45._uint64_t countAndFlagsBits = 46;
          v45._object = (void *)0xE100000000000000;
          String.append(_:)(v45);
          unint64_t v46 = v62;
          unint64_t v47 = v63;
          lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
          swift_allocError();
          *(void *)uint64_t v48 = v46;
          *(void *)(v48 + 8) = v47;
          *(unsigned char *)(v48 + 16) = 3;
        }
        (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
LABEL_22:
        swift_willThrow();
        return;
      }
      return;
    }
LABEL_7:
    uint64_t v33 = *(void *)(a4 + 120);
    if (v33)
    {
      uint64_t MajorVersionNumber = RERealityFileGetMajorVersionNumber();
      uint64_t v35 = v33 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(void *)uint64_t v35 = MajorVersionNumber;
      *(unsigned char *)(v35 + 8) = 1;
    }
    static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)(v24, a2, a3, (unsigned char *)a4, v61);
    uint64_t v36 = a2[3];
    uint64_t v37 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v36);
    (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v36, v37);
    RERealityFileUnmount();
    return;
  }
  uint64_t v28 = a2[3];
  uint64_t v29 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
  URL._bridgeToObjectiveC()(v30);
  uint64_t v32 = v31;
  uint64_t v24 = (uint64_t *)RERealityFileMountFileAtURL();

  if (v24) {
    goto LABEL_7;
  }
  char v38 = v64;
  specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v64);
  if (!v5)
  {
    if (v38)
    {
      type metadata accessor for CFErrorRef(0);
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = v38;
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v50 = v58;
    uint64_t v49 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v12, a1, v59);
    if (!v39)
    {
      unint64_t v62 = 0;
      unint64_t v63 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v62 = 0xD00000000000001FLL;
      unint64_t v63 = 0x8000000228356420;
      v51._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._uint64_t countAndFlagsBits = 46;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      unint64_t v53 = v62;
      unint64_t v54 = v63;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(void *)uint64_t v55 = v53;
      *(void *)(v55 + 8) = v54;
      *(unsigned char *)(v55 + 16) = 3;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v49);
    goto LABEL_22;
  }
}

uint64_t static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  id v10 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v10) {
    __break(1u);
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v16 = a4[3];
  uint64_t v15 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
  String.utf8CString.getter();
  String.utf8CString.getter();
  uint64_t v17 = (uint64_t *)RERealityFileMountFileInBundle();
  swift_release();
  swift_release();
  if (v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(a6 + 120);
    if (v18)
    {
      uint64_t MajorVersionNumber = RERealityFileGetMajorVersionNumber();
      uint64_t v20 = v18 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type;
      *(void *)uint64_t v20 = MajorVersionNumber;
      *(unsigned char *)(v20 + 8) = 1;
    }
    static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)(v17, a4, a5, (unsigned char *)a6, a7);
    uint64_t v21 = a4[3];
    uint64_t v22 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
    return RERealityFileUnmount();
  }
  else
  {
    specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(0);
    if (v32)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = a2;
      v24._object = a3;
      String.append(_:)(v24);
      v25._uint64_t countAndFlagsBits = 0x646E7542206E6920;
      v25._object = (void *)0xEC000000203A656CLL;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = v12;
      v26._object = v14;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 46;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(void *)uint64_t v28 = 0xD00000000000001FLL;
      *(void *)(v28 + 8) = 0x8000000228356420;
      *(unsigned char *)(v28 + 16) = 3;
      return swift_willThrow();
    }
  }
}

uint64_t specialized __REAssetManager.loadAssetsAndDependencies<A>(_:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (void *)((char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v34 = a1;
  *uint64_t v6 = (id)REAssetManagerGetEngineQueue();
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0D8], v3);
  LOBYTE(a1) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (a1)
  {
    if (!(v34 >> 62))
    {
      if (!*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        return result;
      }
LABEL_4:
      uint64_t v8 = dispatch_group_create();
      dispatch_group_enter(v8);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = 0;
      id v10 = (id)REAssetManagerGetEngineQueue();
      MEMORY[0x270FA5388](v10);
      v28[-4] = v1;
      v28[-3] = v9;
      v28[-2] = &v34;
      v28[-1] = v8;
      type metadata accessor for __AssetLoadRequest();
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t v11 = v33;
      OS_dispatch_group.wait()();
      swift_beginAccess();
      uint64_t v12 = *(void **)(v9 + 16);
      if (!v12)
      {
        if (REAssetLoadRequestGetState() == 1)
        {
LABEL_20:

          swift_release();
          return swift_release();
        }
        unint64_t v13 = v34;
        uint64_t v30 = v9;
        if (v34 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v14 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v15 = MEMORY[0x263F8EE78];
        if (v14)
        {
          v28[1] = v11;
          uint64_t v29 = v8;
          uint64_t v32 = MEMORY[0x263F8EE78];
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
          if (v14 < 0)
          {
            __break(1u);
            return result;
          }
          uint64_t v16 = 0;
          uint64_t v15 = v32;
          unint64_t v31 = v13 & 0xC000000000000001;
          unint64_t v17 = v13;
          do
          {
            if (v31) {
              MEMORY[0x22A689930](v16, v13);
            }
            else {
              swift_retain();
            }
            uint64_t v18 = (void *)REAssetHandleCopyAssetIdentifierString();
            Swift::String v19 = String.init(_:)(v18);
            swift_release();
            uint64_t v32 = v15;
            unint64_t v21 = *(void *)(v15 + 16);
            unint64_t v20 = *(void *)(v15 + 24);
            if (v21 >= v20 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
              uint64_t v15 = v32;
            }
            ++v16;
            *(void *)(v15 + 16) = v21 + 1;
            *(Swift::String *)(v15 + 16 * v21 + 32) = v19;
            unint64_t v13 = v17;
          }
          while (v14 != v16);
          uint64_t v8 = v29;
        }
        uint64_t v32 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
        swift_allocError();
        uint64_t v12 = 0;
        *(void *)uint64_t v25 = v22;
        *(void *)(v25 + 8) = v24;
        *(void *)(v25 + 16) = 0;
        *(void *)(v25 + 24) = 0;
        *(unsigned char *)(v25 + 32) = 0;
      }
      id v26 = v12;
      swift_willThrow();
      goto LABEL_20;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_4;
  }
  return result;
}

uint64_t specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = AssetRequest;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a2;
  void v9[3] = a3;
  void v9[4] = a4;
  aBlock[4] = partial apply for specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void aBlock[3] = &block_descriptor_36_1;
  id v10 = _Block_copy(aBlock);
  uint64_t v11 = _Block_copy(v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  void v19[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  void v19[5] = v12;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1107296256;
  _OWORD v19[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v19[3] = &block_descriptor_42_0;
  unint64_t v13 = _Block_copy(v19);
  swift_retain();
  swift_bridgeObjectRetain();
  id v14 = a4;
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v13);
  _Block_release(v10);
  swift_release();
  if (!(a3 >> 62))
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v15 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v15 >= 1)
  {
    if ((a3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        MEMORY[0x22A689930](i, a3);
        REAssetLoadRequestAddAsset();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (uint64_t j = 0; j != v15; ++j)
        REAssetLoadRequestAddAsset();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(char a1, uint64_t a2, unint64_t a3, dispatch_group_t group)
{
  if (a1) {
    goto LABEL_18;
  }
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v7)
  {
LABEL_17:
    uint64_t v18 = (void **)(a2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    uint64_t v22 = swift_allocError();
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v21;
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = 0;
    *(unsigned char *)(v23 + 32) = 0;
    swift_beginAccess();
    uint64_t v24 = *v18;
    *uint64_t v18 = (void *)v22;

LABEL_18:
    dispatch_group_leave(group);
    return;
  }
  uint64_t v26 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = a2;
    if ((a3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        MEMORY[0x22A689930](i, a3);
        uint64_t v9 = (void *)REAssetHandleCopyAssetIdentifierString();
        Swift::String v10 = String.init(_:)(v9);
        swift_unknownObjectRelease();
        unint64_t v12 = *(void *)(v26 + 16);
        unint64_t v11 = *(void *)(v26 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v26 + 16) = v12 + 1;
        *(Swift::String *)(v26 + 16 * v12 + 32) = v10;
      }
    }
    else
    {
      unint64_t v13 = a3 + 32;
      do
      {
        swift_retain();
        id v14 = (void *)REAssetHandleCopyAssetIdentifierString();
        Swift::String v15 = String.init(_:)(v14);
        swift_release();
        unint64_t v17 = *(void *)(v26 + 16);
        unint64_t v16 = *(void *)(v26 + 24);
        if (v17 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        }
        *(void *)(v26 + 16) = v17 + 1;
        *(Swift::String *)(v26 + 16 * v17 + 32) = v15;
        v13 += 8;
        --v7;
      }
      while (v7);
    }
    a2 = v25;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(unint64_t a1, char a2)
{
  uint64_t v5 = a1;
  if (a2 == 2)
  {
    uint64_t v127 = v3;
    if (a1 >> 62) {
      goto LABEL_230;
    }
    unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
    return swift_bridgeObjectRelease();
  }
  if (a2) {
    return specialized __REAssetManager.loadAssetsAndDependencies<A>(_:)(a1);
  }
  uint64_t v127 = v3;
  if (a1 >> 62) {
    goto LABEL_239;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
LABEL_12:
  unint64_t v103 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_243;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }
  uint64_t v16 = *(void *)(v5 + 32);
  swift_retain();
LABEL_15:
  if (!REAssetHandleIsLoaded())
  {
LABEL_214:
    swift_retain();
    goto LABEL_215;
  }
  uint64_t v99 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v98 = v5 + 32;
  unint64_t v104 = 1;
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v100 = v15;
  while (1)
  {
    uint64_t v102 = v16;
    REAssetHandleLoadNow();
    unint64_t v126 = *(void *)(v128 + 88);
    REAssetCopyDependencyArray();
    uint64_t Size = REAssetDynamicArrayGetSize();
    if (Size < 0) {
      goto LABEL_246;
    }
    uint64_t v19 = Size;
    if (Size)
    {
      unint64_t v133 = v17;
      unint64_t v2 = (unint64_t)&v133;
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t v4 = 0;
      do
      {
        if (v19 == v4) {
          goto LABEL_223;
        }
        uint64_t Asset = REAssetDynamicArrayGetAsset();
        if (!Asset) {
          goto LABEL_254;
        }
        uint64_t v21 = Asset;
        ++v4;
        RERetain();
        type metadata accessor for __REAsset();
        *(void *)(swift_allocObject() + 16) = v21;
        unint64_t v2 = (unint64_t)&v133;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v19 != v4);
      unint64_t v2 = v133;
    }
    else
    {
      unint64_t v2 = v17;
    }
    RERelease();
    unint64_t v133 = v17;
    unint64_t v22 = v2;
    unint64_t v107 = v2;
    if (v2 >> 62) {
      break;
    }
    unint64_t v23 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v106 = v23;
    if (v23) {
      goto LABEL_27;
    }
LABEL_157:
    swift_bridgeObjectRelease();
    unint64_t v2 = v17;
LABEL_158:
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v73)
      {
LABEL_169:
        if ((v2 & 0xC000000000000001) != 0) {
          goto LABEL_256;
        }
        if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          swift_retain();
          goto LABEL_172;
        }
        __break(1u);
        return result;
      }
    }
    else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_169;
    }
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v71 = v104;
    if (v104 == v100) {
      return swift_bridgeObjectRelease();
    }
    if (v103)
    {
      uint64_t v72 = MEMORY[0x22A689930](v104, v5);
      unint64_t v71 = v104;
      uint64_t v16 = v72;
    }
    else
    {
      if (v104 >= *(void *)(v99 + 16)) {
        goto LABEL_252;
      }
      uint64_t v16 = *(void *)(v98 + 8 * v104);
      swift_retain();
    }
    unint64_t v104 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      goto LABEL_249;
    }
    if ((REAssetHandleIsLoaded() & 1) == 0) {
      goto LABEL_214;
    }
  }
  swift_bridgeObjectRetain_n();
  unint64_t v22 = v107;
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  unint64_t v106 = v2;
  if (!v2) {
    goto LABEL_157;
  }
LABEL_27:
  uint64_t v24 = 0;
  unint64_t v108 = v22 & 0xC000000000000001;
  unint64_t v101 = v22 + 32;
  uint64_t v120 = v5;
  while (1)
  {
    if (v108)
    {
      unint64_t v25 = v22;
      uint64_t v26 = v24;
      uint64_t v27 = MEMORY[0x22A689930](v24, v25);
      uint64_t v28 = v24 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_238;
      }
    }
    else
    {
      uint64_t v27 = swift_retain();
      BOOL v29 = __OFADD__(v24, 1);
      uint64_t v28 = v24 + 1;
      if (v29) {
        goto LABEL_238;
      }
    }
    uint64_t v112 = v28;
    uint64_t v113 = v27;
    if (!REAssetHandleIsLoaded()) {
      goto LABEL_148;
    }
    REAssetHandleLoadNow();
    REAssetCopyDependencyArray();
    uint64_t v30 = REAssetDynamicArrayGetSize();
    if (v30 < 0) {
      goto LABEL_245;
    }
    uint64_t v31 = v30;
    if (v30) {
      break;
    }
    unint64_t v34 = v17;
LABEL_42:
    RERelease();
    unint64_t v135 = v17;
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v35) {
        goto LABEL_141;
      }
LABEL_44:
      unint64_t v36 = 0;
      unint64_t v110 = v34 & 0xC000000000000001;
      unint64_t v105 = v34 + 32;
      unint64_t v111 = v34;
      uint64_t v109 = v35;
      while (2)
      {
        if (v110)
        {
          unint64_t v2 = v36;
          uint64_t v116 = MEMORY[0x22A689930](v36, v34);
          unint64_t v37 = v36 + 1;
          if (__OFADD__(v2, 1)) {
            goto LABEL_234;
          }
        }
        else
        {
          uint64_t v116 = *(void *)(v105 + 8 * v36);
          swift_retain();
          BOOL v29 = __OFADD__(v36, 1);
          unint64_t v37 = v36 + 1;
          if (v29) {
            goto LABEL_234;
          }
        }
        unint64_t v115 = v37;
        if (!REAssetHandleIsLoaded()) {
          goto LABEL_132;
        }
        REAssetHandleLoadNow();
        uint64_t v15 = REAssetCopyDependencyArray();
        uint64_t v38 = REAssetDynamicArrayGetSize();
        if (v38 < 0) {
          goto LABEL_242;
        }
        uint64_t v39 = v38;
        if (v38)
        {
          uint64_t v132 = v17;
          unint64_t v2 = (unint64_t)&v132;
          specialized ContiguousArray.reserveCapacity(_:)();
          unint64_t v4 = 0;
          do
          {
            if (v39 == v4) {
              goto LABEL_221;
            }
            uint64_t v40 = REAssetDynamicArrayGetAsset();
            if (!v40) {
              goto LABEL_253;
            }
            uint64_t v41 = v40;
            ++v4;
            RERetain();
            type metadata accessor for __REAsset();
            *(void *)(swift_allocObject() + 16) = v41;
            unint64_t v2 = (unint64_t)&v132;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v39 != v4);
          unint64_t v42 = v132;
        }
        else
        {
          unint64_t v42 = v17;
        }
        RERelease();
        uint64_t v132 = v17;
        unint64_t v43 = v42;
        unint64_t v118 = v42;
        if (!(v42 >> 62))
        {
          unint64_t v2 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v2) {
            goto LABEL_61;
          }
LABEL_125:
          swift_bridgeObjectRelease();
          unint64_t v67 = v17;
LABEL_126:
          swift_bridgeObjectRelease();
          if (!(v67 >> 62))
          {
            unint64_t v2 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v2) {
              goto LABEL_128;
            }
LABEL_138:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_135:
            unint64_t v36 = v115;
            if (v115 == v109)
            {
              swift_bridgeObjectRelease();
              unint64_t v69 = v135;
              goto LABEL_142;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v2) {
            goto LABEL_138;
          }
LABEL_128:
          if ((v67 & 0xC000000000000001) != 0)
          {
            uint64_t v68 = MEMORY[0x22A689930](0, v67);
          }
          else
          {
            if (!*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_248;
            }
            uint64_t v68 = *(void *)(v67 + 32);
            swift_retain();
          }
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v116 = v68;
LABEL_132:
          unint64_t v2 = (unint64_t)&v135;
          MEMORY[0x22A688E10]();
          if (*(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_135;
        }
        break;
      }
      swift_bridgeObjectRetain_n();
      unint64_t v43 = v118;
      unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v2) {
        goto LABEL_125;
      }
LABEL_61:
      uint64_t v44 = 0;
      unint64_t v119 = v43 & 0xC000000000000001;
      unint64_t v114 = v43 + 32;
      unint64_t v117 = v2;
      while (2)
      {
        if (v119)
        {
          unint64_t v45 = v43;
          uint64_t v46 = v44;
          uint64_t v47 = MEMORY[0x22A689930](v44, v45);
          uint64_t v48 = v44 + 1;
          if (__OFADD__(v46, 1)) {
            goto LABEL_225;
          }
        }
        else
        {
          uint64_t v47 = swift_retain();
          BOOL v29 = __OFADD__(v44, 1);
          uint64_t v48 = v44 + 1;
          if (v29) {
            goto LABEL_225;
          }
        }
        uint64_t v121 = v48;
        uint64_t v122 = v47;
        if (!REAssetHandleIsLoaded()) {
          goto LABEL_117;
        }
        REAssetHandleLoadNow();
        REAssetCopyDependencyArray();
        uint64_t v49 = REAssetDynamicArrayGetSize();
        if (v49 < 0) {
          goto LABEL_228;
        }
        uint64_t v50 = v49;
        if (v49)
        {
          uint64_t v131 = v17;
          unint64_t v2 = (unint64_t)&v131;
          specialized ContiguousArray.reserveCapacity(_:)();
          unint64_t v4 = 0;
          while (v50 != v4)
          {
            uint64_t v51 = REAssetDynamicArrayGetAsset();
            if (!v51) {
              goto LABEL_251;
            }
            uint64_t v52 = v51;
            ++v4;
            RERetain();
            type metadata accessor for __REAsset();
            *(void *)(swift_allocObject() + 16) = v52;
            unint64_t v2 = (unint64_t)&v131;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (v50 == v4)
            {
              unint64_t v53 = v131;
              goto LABEL_78;
            }
          }
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          while (2)
          {
            __break(1u);
LABEL_228:
            __break(1u);
            while (2)
            {
              __break(1u);
LABEL_230:
              swift_bridgeObjectRetain();
              unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
              if (!v4) {
                return swift_bridgeObjectRelease();
              }
LABEL_4:
              unint64_t v126 = v5 & 0xC000000000000001;
              if ((v5 & 0xC000000000000001) == 0)
              {
                if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  uint64_t v6 = *(void *)(v5 + 32);
                  swift_retain();
                  goto LABEL_7;
                }
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                swift_bridgeObjectRetain();
                uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
                if (!v15) {
                  return swift_bridgeObjectRelease();
                }
                goto LABEL_12;
              }
LABEL_236:
              uint64_t v6 = MEMORY[0x22A689930](0, v5);
LABEL_7:
              REAssetHandleLoadNow();
              if (REAssetHandleLoadFailed())
              {
LABEL_8:
                uint64_t v7 = (void *)REAssetCopyDescription();
                Swift::String v8 = String.init(_:)(v7);
                FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
                uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v12 = v11;

                lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
                swift_allocError();
                *(Swift::String *)uint64_t v13 = v8;
                *(void *)(v13 + 16) = v10;
                *(void *)(v13 + 24) = v12;
                *(unsigned char *)(v13 + 32) = 1;
                swift_willThrow();
                swift_release();
                return swift_bridgeObjectRelease();
              }
              uint64_t v121 = v5 + 32;
              uint64_t v122 = v5 & 0xFFFFFFFFFFFFFF8;
              unint64_t v74 = 1;
              long long v125 = xmmword_22831E4E0;
              unint64_t v75 = MEMORY[0x263F8EE78];
              uint64_t v120 = v5;
              unint64_t v124 = v4;
LABEL_175:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v125;
              *(void *)(inited + 32) = v6;
              unint64_t v133 = inited;
              specialized Array._endMutation()();
              unint64_t v77 = v133;
              unint64_t v133 = v75;
              swift_retain();
              unint64_t v78 = MEMORY[0x263F8EE88];
              if ((v75 & 0xC000000000000000) != 0)
              {
                if (_CocoaArrayWrapper.endIndex.getter()) {
                  unint64_t v78 = specialized Set.init(_nonEmptyArrayLiteral:)(v75);
                }
                else {
                  unint64_t v78 = MEMORY[0x263F8EE88];
                }
              }
              unint64_t v135 = v78;
              specialized __REAssetService.getDependenciesRecursively(asset:result:visited:includingSelf:)(v6, &v133, (uint64_t *)&v135, 0);
              swift_bridgeObjectRelease();
              unint64_t v79 = v133;
              unint64_t v133 = v77;
              specialized Array.append<A>(contentsOf:)(v79);
              unint64_t v2 = v133;
              if (v133 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v80) {
                  goto LABEL_181;
                }
              }
              else
              {
                uint64_t v80 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v80)
                {
LABEL_181:
                  unint64_t v81 = v2 & 0xC000000000000001;
                  if ((v2 & 0xC000000000000001) != 0)
                  {
                    MEMORY[0x22A689930](0, v2);
                  }
                  else
                  {
                    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      continue;
                    }
                    swift_retain();
                  }
                  REAssetHandleLoadNow();
                  if (REAssetHandleLoadFailed()) {
                    goto LABEL_213;
                  }
                  swift_release();
                  if (v80 != 1)
                  {
                    if (v81)
                    {
                      uint64_t v5 = MEMORY[0x22A689930](1, v2);
                    }
                    else
                    {
                      if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                        goto LABEL_247;
                      }
                      uint64_t v5 = *(void *)(v2 + 40);
                      swift_retain();
                    }
                    REAssetHandleLoadNow();
                    if (REAssetHandleLoadFailed())
                    {
LABEL_213:
                      uint64_t v85 = (void *)REAssetCopyDescription();
                      Swift::String v86 = String.init(_:)(v85);
                      uint64_t v87 = (void *)REAssetHandleCopyLoadFailedMessage();
                      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v90 = v89;

                      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
                      swift_allocError();
                      *(Swift::String *)uint64_t v91 = v86;
                      *(void *)(v91 + 16) = v88;
                      *(void *)(v91 + 24) = v90;
                      *(unsigned char *)(v91 + 32) = 1;
                      swift_willThrow();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_release();
                      return swift_bridgeObjectRelease();
                    }
                    swift_release();
                    if (v80 != 2)
                    {
                      unint64_t v123 = v2 & 0xFFFFFFFFFFFFFF8;
                      uint64_t v82 = 6;
                      do
                      {
                        unint64_t v83 = v82 - 4;
                        if (v81)
                        {
                          uint64_t v5 = MEMORY[0x22A689930](v82 - 4, v2);
                          uint64_t v84 = v82 - 3;
                          if (__OFADD__(v83, 1)) {
                            goto LABEL_224;
                          }
                        }
                        else
                        {
                          if (v83 >= *(void *)(v123 + 16)) {
                            goto LABEL_226;
                          }
                          uint64_t v5 = *(void *)(v2 + 8 * v82);
                          swift_retain();
                          uint64_t v84 = v82 - 3;
                          if (__OFADD__(v83, 1)) {
                            goto LABEL_224;
                          }
                        }
                        REAssetHandleLoadNow();
                        if (REAssetHandleLoadFailed()) {
                          goto LABEL_213;
                        }
                        swift_release();
                        ++v82;
                      }
                      while (v84 != v80);
                    }
                  }
                }
              }
              break;
            }
            swift_bridgeObjectRelease();
            swift_release();
            unint64_t v4 = v124;
            if (v74 == v124) {
              return swift_bridgeObjectRelease();
            }
            uint64_t v5 = v120;
            if (v126)
            {
              uint64_t v6 = MEMORY[0x22A689930](v74, v120);
              unint64_t v75 = MEMORY[0x263F8EE78];
              BOOL v29 = __OFADD__(v74++, 1);
              if (v29) {
                continue;
              }
            }
            else
            {
              unint64_t v75 = MEMORY[0x263F8EE78];
              if (v74 >= *(void *)(v122 + 16)) {
                goto LABEL_235;
              }
              uint64_t v6 = *(void *)(v121 + 8 * v74);
              swift_retain();
              BOOL v29 = __OFADD__(v74++, 1);
              if (v29) {
                continue;
              }
            }
            break;
          }
          REAssetHandleLoadNow();
          if (REAssetHandleLoadFailed()) {
            goto LABEL_8;
          }
          goto LABEL_175;
        }
        unint64_t v53 = v17;
LABEL_78:
        RERelease();
        uint64_t v131 = v17;
        if (!(v53 >> 62))
        {
          uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v54) {
            goto LABEL_80;
          }
LABEL_110:
          swift_bridgeObjectRelease();
          unint64_t v64 = v17;
LABEL_111:
          swift_bridgeObjectRelease();
          if (!(v64 >> 62))
          {
            if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_113;
            }
LABEL_62:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_63:
            unint64_t v2 = v117;
            uint64_t v44 = v121;
            unint64_t v43 = v118;
            if (v121 == v117)
            {
              swift_bridgeObjectRelease();
              unint64_t v67 = v132;
              goto LABEL_126;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v66) {
            goto LABEL_62;
          }
LABEL_113:
          if ((v64 & 0xC000000000000001) != 0)
          {
            uint64_t v65 = MEMORY[0x22A689930](0, v64);
          }
          else
          {
            if (!*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_233;
            }
            uint64_t v65 = *(void *)(v64 + 32);
            swift_retain();
          }
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v122 = v65;
LABEL_117:
          MEMORY[0x22A688E10]();
          if (*(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          goto LABEL_63;
        }
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      if (!v54) {
        goto LABEL_110;
      }
LABEL_80:
      if (v54 < 1)
      {
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
        goto LABEL_236;
      }
      uint64_t v55 = 0;
      unint64_t v56 = v53 & 0xC000000000000001;
      unint64_t v124 = v54;
      *(void *)&long long v125 = v53 + 32;
      unint64_t v123 = v53 & 0xC000000000000001;
      while (2)
      {
        if (v56)
        {
          uint64_t v5 = MEMORY[0x22A689930](v55, v53);
        }
        else
        {
          uint64_t v5 = *(void *)(v125 + 8 * v55);
          swift_retain();
        }
        uint64_t v130 = v128;
        unint64_t v2 = *(void *)(v5 + 16);
        if (REAssetHandleIsLoaded())
        {
          REAssetHandleLoadNow();
          REAssetCopyDependencyArray();
          uint64_t v57 = REAssetDynamicArrayGetSize();
          if (v57 < 0) {
            goto LABEL_219;
          }
          unint64_t v4 = v57;
          if (v57)
          {
            uint64_t v15 = v53;
            unint64_t v129 = MEMORY[0x263F8EE78];
            unint64_t v2 = (unint64_t)&v129;
            specialized ContiguousArray.reserveCapacity(_:)();
            uint64_t v58 = 0;
            while (1)
            {
              if (v4 == v58)
              {
                __break(1u);
                return swift_bridgeObjectRelease();
              }
              uint64_t v59 = REAssetDynamicArrayGetAsset();
              if (!v59) {
                break;
              }
              uint64_t v60 = v59;
              ++v58;
              RERetain();
              type metadata accessor for __REAsset();
              *(void *)(swift_allocObject() + 16) = v60;
              unint64_t v2 = (unint64_t)&v129;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              if (v4 == v58)
              {
                unint64_t v61 = v129;
                unint64_t v56 = v123;
                uint64_t v54 = v124;
                goto LABEL_96;
              }
            }
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            uint64_t v16 = MEMORY[0x22A689930](0, v5);
            goto LABEL_15;
          }
          unint64_t v61 = MEMORY[0x263F8EE78];
LABEL_96:
          uint64_t v62 = RERelease();
          MEMORY[0x270FA5388](v62);
          v97[2] = &v130;
          uint64_t v63 = v127;
          unint64_t v2 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:), (uint64_t)v97, v61);
          uint64_t v127 = v63;
          swift_bridgeObjectRelease();
          if (!(v2 >> 62))
          {
            unint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v4) {
              goto LABEL_98;
            }
LABEL_82:
            swift_release();
            swift_bridgeObjectRelease();
LABEL_83:
            if (++v55 == v54)
            {
              swift_bridgeObjectRelease();
              unint64_t v64 = v131;
              uint64_t v5 = v120;
              uint64_t v17 = MEMORY[0x263F8EE78];
              unint64_t v34 = v111;
              goto LABEL_111;
            }
            continue;
          }
          swift_bridgeObjectRetain();
          unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v4) {
            goto LABEL_82;
          }
LABEL_98:
          if ((v2 & 0xC000000000000001) != 0)
          {
            MEMORY[0x22A689930](0, v2);
          }
          else
          {
            if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_220;
            }
            swift_retain();
          }
          swift_release();
          swift_bridgeObjectRelease();
        }
        break;
      }
      MEMORY[0x22A688E10]();
      unint64_t v4 = *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4 >= *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_83;
    }
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v35) {
      goto LABEL_44;
    }
LABEL_141:
    swift_bridgeObjectRelease();
    unint64_t v69 = v17;
LABEL_142:
    swift_bridgeObjectRelease();
    if (v69 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_144:
        if ((v69 & 0xC000000000000001) != 0)
        {
          uint64_t v70 = MEMORY[0x22A689930](0, v69);
        }
        else
        {
          if (!*(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_250;
          }
          uint64_t v70 = *(void *)(v69 + 32);
          swift_retain();
        }
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v113 = v70;
LABEL_148:
        unint64_t v2 = (unint64_t)&v133;
        MEMORY[0x22A688E10]();
        if (*(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_151;
      }
    }
    else
    {
      unint64_t v2 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v2) {
        goto LABEL_144;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_151:
    uint64_t v24 = v112;
    unint64_t v22 = v107;
    if (v112 == v106)
    {
      swift_bridgeObjectRelease();
      unint64_t v2 = v133;
      goto LABEL_158;
    }
  }
  unint64_t v135 = v17;
  unint64_t v2 = (unint64_t)&v135;
  specialized ContiguousArray.reserveCapacity(_:)();
  unint64_t v4 = 0;
  while (1)
  {
    if (v31 == v4) {
      goto LABEL_222;
    }
    uint64_t v32 = REAssetDynamicArrayGetAsset();
    if (!v32) {
      break;
    }
    uint64_t v33 = v32;
    ++v4;
    RERetain();
    type metadata accessor for __REAsset();
    *(void *)(swift_allocObject() + 16) = v33;
    unint64_t v2 = (unint64_t)&v135;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v31 == v4)
    {
      unint64_t v34 = v135;
      goto LABEL_42;
    }
  }
LABEL_255:
  __break(1u);
LABEL_256:
  MEMORY[0x22A689930](0, v2);
LABEL_172:
  swift_bridgeObjectRelease();
LABEL_215:
  unint64_t v133 = 0;
  unint64_t v134 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  unint64_t v133 = 0xD000000000000018;
  unint64_t v134 = 0x800000022835E730;
  uint64_t v92 = (void *)REAssetHandleCopyAssetIdentifierString();
  Swift::String v93 = String.init(_:)(v92);
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  unint64_t v94 = v133;
  unint64_t v95 = v134;
  lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
  swift_allocError();
  *(void *)uint64_t v96 = v94;
  *(void *)(v96 + 8) = v95;
  *(unsigned char *)(v96 + 16) = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t specialized __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(uint64_t a1)
{
  if (!REAssetHandleIsLoaded())
  {
    swift_retain();
    return a1;
  }
  unint64_t v2 = __REAssetManager.__getDependencies(asset:)();
  MEMORY[0x270FA5388](v2);
  _OWORD v6[2] = &v7;
  unint64_t v3 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:), (uint64_t)v6, v2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    a1 = MEMORY[0x22A689930](0, v3);
    goto LABEL_7;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    a1 = *(void *)(v3 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t static __REAssetBundle.__init(elements:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static __REAssetBundle.__init(elements:assetService:)(a1, a2, (uint64_t)partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), (uint64_t (*)(uint64_t, void *, uint64_t))specialized Sequence.compactMap<A>(_:), a3);
}

uint64_t static __REAssetBundle.__init(element:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
  *(void *)(inited + 32) = a1;
  v11[0] = inited;
  specialized Array._endMutation()();
  Swift::Int v12 = MEMORY[0x263F8EE80];
  void v10[2] = a2;
  __n128 v10[3] = &v12;
  swift_retain();
  unint64_t v7 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in static __REAssetBundle.__init(elements:assetService:)partial apply, (uint64_t)v10, v11[0]);
  Swift::Int v8 = v12;
  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v7, (uint64_t)v11, v8, 0, a3);
  return swift_bridgeObjectRelease();
}

void closure #1 in static __REAssetBundle.__init(elements:assetService:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v60 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v55 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v52 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *a1;
  REEntityGetName();
  uint64_t v8 = String.init(cString:)();
  uint64_t v10 = v9;
  uint64_t v68 = 0x2A3F227C3E3C3ALL;
  unint64_t v69 = 0xE700000000000000;
  long long v70 = xmmword_228346B10;
  swift_bridgeObjectRetain();
  Swift::String_optional v11 = String.Iterator.next()();
  uint64_t v71 = (uint64_t)v10;
  if (v11.value._object)
  {
    uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    lazy protocol witness table accessor for type String and conformance String();
    do
    {
      v65[0] = v8;
      v65[1] = v10;
      uint64_t v63 = countAndFlagsBits;
      unint64_t v64 = object;
      uint64_t v61 = 95;
      unint64_t v62 = 0xE100000000000000;
      uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::String_optional v16 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v16.value._countAndFlagsBits;
      object = v16.value._object;
      uint64_t v10 = v15;
    }
    while (v16.value._object);
  }
  else
  {
    uint64_t v15 = v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v68 = 0x3A79726F6D656DLL;
  unint64_t v69 = 0xE700000000000000;
  v17._uint64_t countAndFlagsBits = v8;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v65[0] = static __REAssetBundle.sceneConversionCounter;
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0x656C69706D6F632ELL;
  v19._object = (void *)0xEE00656E65637364;
  String.append(_:)(v19);
  if (static __REAssetBundle.sceneConversionCounter != -1)
  {
    uint64_t v21 = v68;
    unint64_t v20 = v69;
    ++static __REAssetBundle.sceneConversionCounter;
    outlined init with copy of __REAssetService(v57, (uint64_t)&v68);
    outlined init with copy of __REAssetService((uint64_t)&v68, (uint64_t)v65);
    type metadata accessor for __REAsset();
    uint64_t v71 = swift_allocObject();
    uint64_t v22 = v66;
    uint64_t v23 = v67;
    __swift_project_boxed_opaque_existential_1(v65, v66);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v23 + 32);
    swift_retain();
    v24(v22, v23);
    String.utf8CString.getter();
    uint64_t v25 = REAssetManagerSceneAssetCreateFromEntity();
    swift_release();
    if (!v25)
    {
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      uint64_t v32 = (void *)swift_allocError();
      *(void *)uint64_t v33 = v21;
      *(void *)(v33 + 8) = v20;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 24) = 0;
      *(unsigned char *)(v33 + 32) = 0;
      swift_willThrow();
      swift_deallocPartialClassInstance();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      swift_release();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_retain();
      id v35 = v32;
      swift_retain();
      id v36 = v32;
      unint64_t v37 = static OS_os_log.default.getter();
      os_log_type_t v38 = v34;
      if (os_log_type_enabled(v37, v34))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = (void *)swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v68 = v71;
        *(_DWORD *)uint64_t v39 = 136315394;
        uint64_t v59 = 0;
        REEntityGetName();
        uint64_t v41 = String.init(cString:)();
        v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2112;
        id v43 = v32;
        uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
        v65[0] = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v40 = v44;

        _os_log_impl(&dword_227DD2000, v37, v38, "Failed to create asset from entity %s: %@", (uint8_t *)v39, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v40, -1, -1);
        uint64_t v45 = v71;
        swift_arrayDestroy();
        MEMORY[0x22A696500](v45, -1, -1);
        MEMORY[0x22A696500](v39, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v26 = 0;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v71;
    *(void *)(v71 + 16) = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    swift_release();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v28 = SceneNullable;
      id v29 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      uint64_t v30 = v54;
      uint64_t v31 = v53;
      if (v29)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v28);
      }
      uint64_t v46 = v55;
      Scene.__sceneIdentifier.getter(v55);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v46, 1, v30) != 1)
      {
        uint64_t v48 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v52, v46, v30);
        UUID.uuidString.getter();
        uint64_t v47 = v49;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v48, v30);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v46 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v54);
    }
    outlined destroy of BodyTrackingComponent?(v46, &demangling cache variable for type metadata for UUID?);
    uint64_t v47 = 0;
LABEL_20:
    REEntityGetName();
    String.init(cString:)();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    if (v47)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v50 = RESceneDescriptorCreateFromParams();
    swift_release();
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v50;
    swift_retain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v51, v26);
    swift_release();
LABEL_23:
    uint64_t *v60 = v26;
    return;
  }
  __break(1u);
}

uint64_t static __REAssetBundle.__init(realityScenes:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static __REAssetBundle.__init(elements:assetService:)(a1, a2, (uint64_t)partial apply for closure #1 in static __REAssetBundle.__init(realityScenes:assetService:), (uint64_t (*)(uint64_t, void *, uint64_t))specialized Sequence.compactMap<A>(_:), a3);
}

uint64_t static __REAssetBundle.__init(elements:assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, void *, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  Swift::Int v12 = MEMORY[0x263F8EE80];
  void v10[2] = a2;
  __n128 v10[3] = &v12;
  unint64_t v7 = a4(a3, v10, a1);
  Swift::Int v8 = v12;
  outlined init with copy of __REAssetService(a2, (uint64_t)v11);
  return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v7, (uint64_t)v11, v8, 0, a5);
}

void closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v51 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v50 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *a1;
  RESceneGetName();
  uint64_t v9 = String.init(cString:)();
  Swift::String_optional v11 = v10;
  uint64_t v66 = 0x2A3F227C3E3C3ALL;
  unint64_t v67 = 0xE700000000000000;
  long long v68 = xmmword_228346B10;
  swift_bridgeObjectRetain();
  Swift::String_optional v12 = String.Iterator.next()();
  uint64_t v69 = (uint64_t)v11;
  if (v12.value._object)
  {
    uint64_t countAndFlagsBits = v12.value._countAndFlagsBits;
    object = v12.value._object;
    lazy protocol witness table accessor for type String and conformance String();
    do
    {
      v63[0] = v9;
      v63[1] = v11;
      uint64_t v61 = countAndFlagsBits;
      unint64_t v62 = object;
      uint64_t v59 = 95;
      unint64_t v60 = 0xE100000000000000;
      uint64_t v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      Swift::String_optional v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::String_optional v17 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v17.value._countAndFlagsBits;
      object = v17.value._object;
      Swift::String_optional v11 = v16;
    }
    while (v17.value._object);
  }
  else
  {
    Swift::String_optional v16 = v11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  uint64_t v66 = 0x3A79726F6D656DLL;
  unint64_t v67 = 0xE700000000000000;
  v18._uint64_t countAndFlagsBits = v9;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v63[0] = static __REAssetBundle.sceneConversionCounter;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x656C69706D6F632ELL;
  v20._object = (void *)0xEE00656E65637364;
  String.append(_:)(v20);
  if (static __REAssetBundle.sceneConversionCounter == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v66;
    unint64_t v21 = v67;
    ++static __REAssetBundle.sceneConversionCounter;
    outlined init with copy of __REAssetService(v55, (uint64_t)&v66);
    outlined init with copy of __REAssetService((uint64_t)&v66, (uint64_t)v63);
    type metadata accessor for __REAsset();
    uint64_t v69 = swift_allocObject();
    uint64_t v23 = v64;
    uint64_t v24 = v65;
    __swift_project_boxed_opaque_existential_1(v63, v64);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 32);
    swift_retain();
    v25(v23, v24);
    String.utf8CString.getter();
    uint64_t v26 = REAssetManagerSceneAssetCreate();
    swift_release();
    if (v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = v69;
      *(void *)(v69 + 16) = v26;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      swift_release();
      uint64_t v28 = v51;
      Scene.__sceneIdentifier.getter(v51);
      uint64_t v30 = v52;
      uint64_t v29 = v53;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v28, 1, v53) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v28, &demangling cache variable for type metadata for UUID?);
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v46 = v50;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v50, v28, v29);
        UUID.uuidString.getter();
        uint64_t v31 = v47;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v46, v29);
      }
      RESceneGetName();
      String.init(cString:)();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      if (v31)
      {
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
      }
      uint64_t v48 = RESceneDescriptorCreateFromParams();
      swift_release();
      swift_unknownObjectRelease();
      type metadata accessor for RESceneDescriptor();
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v48;
      swift_retain();
      specialized Dictionary._Variant.setValue(_:forKey:)(v49, v27);
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      uint64_t v32 = (void *)swift_allocError();
      *(void *)uint64_t v33 = v22;
      *(void *)(v33 + 8) = v21;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 24) = 0;
      *(unsigned char *)(v33 + 32) = 0;
      swift_willThrow();
      swift_deallocPartialClassInstance();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      swift_release();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      swift_retain();
      id v35 = v32;
      swift_retain();
      id v36 = v32;
      unint64_t v37 = static OS_os_log.default.getter();
      os_log_type_t v38 = v34;
      if (os_log_type_enabled(v37, v34))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = (void *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        uint64_t v66 = v69;
        *(_DWORD *)uint64_t v39 = 136315394;
        uint64_t v57 = 0;
        RESceneGetName();
        uint64_t v41 = String.init(cString:)();
        v63[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2112;
        id v43 = v32;
        uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
        v63[0] = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v40 = v44;

        _os_log_impl(&dword_227DD2000, v37, v38, "Failed to create asset from scene %s: %@", (uint8_t *)v39, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v40, -1, -1);
        uint64_t v45 = v69;
        swift_arrayDestroy();
        MEMORY[0x22A696500](v45, -1, -1);
        MEMORY[0x22A696500](v39, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v27 = 0;
    }
    *uint64_t v58 = v27;
  }
}

void partial apply for closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in static __REAssetBundle.__init(realityScenes:assetService:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void closure #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    String.utf8CString.getter();
    unint64_t v3 = (void *)REZipArchiveCopyFileAsData();
    swift_release();
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      *a2 = v5;
      a2[1] = v7;
      return;
    }
    lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)();
    swift_allocError();
    *uint64_t v9 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)();
    swift_allocError();
    *uint64_t v8 = 1;
  }
  swift_willThrow();
}

uint64_t static __REAssetBundle.loadAssetMap(url:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URL.withUnsafeFileSystemRepresentation<A>(_:)();
  if (!v1)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v4, v5);
    uint64_t result = swift_release();
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v6;
  }
  return result;
}

void partial apply for closure #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap and conformance __REAssetBundle.AssetMap);
  }
  return result;
}

uint64_t static __REAssetBundle.__init_REKit2(realityFile:assetService:coreServiceLocator:_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v27 = a5;
  uint64_t v28 = a3;
  uint64_t v32 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  Swift::String_optional v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  uint64_t v15 = (void *)RERealityFileCopyURLFromDescriptor();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of (Int, URL)((uint64_t)(a4 + 32), (uint64_t)&v29, &demangling cache variable for type metadata for __DownsamplingStrategy?);
  if (v30)
  {
    outlined init with take of BindableDataInternal(&v29, (uint64_t)v31);
    LOBYTE(v29) = *a4;
    Swift::String_optional v16 = specialized static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(a2, (uint64_t)a1, (uint64_t)v12, v31);
    if (v5)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    }
    Swift::String_optional v17 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v29, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    Swift::String_optional v17 = 0;
  }
  uint64_t v18 = URL.lastPathComponent.getter();
  Swift::String v20 = v19;
  if (v17) {
    unint64_t v21 = (unint64_t)v17;
  }
  else {
    unint64_t v21 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  static __REAssetBundle.__init_REKit2(realityFile:realityFilename:downsampledTextureDescriptors:assetService:coreServiceLocator:_:)(a1, v18, v20, v21, a2, v28, (unint64_t)a4, v27);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v22 = v17[2];
      if (v22)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v22; ++i)
          RERelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v24 = v17[2];
      if (v24)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v24; ++j)
          RERelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v32);
}

uint64_t static __REAssetBundle.__init_REKit2(realityFile:realityFilename:downsampledTextureDescriptors:assetService:coreServiceLocator:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v58 = a2;
  uint64_t RealityFileHeader = RERealityFileGetRealityFileHeader();
  if (!RealityFileHeader)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    unint64_t v18 = 0xD000000000000026;
    Swift::String v19 = "Failed to get header from reality file";
LABEL_7:
    *(void *)uint64_t v17 = v18;
    *(void *)(v17 + 8) = (unint64_t)(v19 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  uint64_t v15 = RealityFileHeader;
  uint64_t v53 = a3;
  int v16 = *(unsigned __int8 *)(a7 + 99);
  outlined init with copy of __REAssetBundle.LoadOptions(a7, (uint64_t)v57);
  if (v16 == 1)
  {
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v57);
    goto LABEL_9;
  }
  char v20 = v57[98];
  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v57);
  if (v20)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    unint64_t v18 = 0xD0000000000000C3;
    Swift::String v19 = "loadOptions.loadOnResourceSharingClients cannot be false when loadOptions.waitForResourceSharingClients is tru"
          "e, because we cannot wait for resource clients to load if they are not going to load.";
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v52 = a5;
  uint64_t AssetDescriptorCount = RERealityFileGetAssetDescriptorCount();
  if (AssetDescriptorCount < 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v23 = AssetDescriptorCount;
  uint64_t v50 = a8;
  uint64_t v51 = v15;
  uint64_t v24 = (void *)MEMORY[0x263F8EE78];
  if (AssetDescriptorCount)
  {
    uint64_t v25 = 0;
    do
    {
      uint64_t AssetDescriptorAtIndex = RERealityFileGetAssetDescriptorAtIndex();
      if (AssetDescriptorAtIndex)
      {
        uint64_t v27 = AssetDescriptorAtIndex;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
        }
        unint64_t v29 = v24[2];
        unint64_t v28 = v24[3];
        if (v29 >= v28 >> 1) {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v24);
        }
        _OWORD v24[2] = v29 + 1;
        v24[v29 + 4] = v27;
      }
      ++v25;
    }
    while (v23 != v25);
  }
  uint64_t v31 = *(void *)(a7 + 104);
  unint64_t v30 = *(void *)(a7 + 112);
  if (v30)
  {
    if (v30 == 1)
    {
      uint64_t v32 = (void *)specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)();
      if (v32[2])
      {
        uint64_t v34 = v32[4];
        uint64_t v33 = v32[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_22830EC60;
        *(void *)(v35 + 32) = v34;
        *(void *)(v35 + 40) = v33;
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      strcpy((char *)v56, "Reality file '");
      HIBYTE(v56[1]) = -18;
      v42._uint64_t countAndFlagsBits = v58;
      v42._object = v53;
      String.append(_:)(v42);
      v43._object = (void *)0x800000022835E820;
      v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v43);
      uint64_t v44 = v56[1];
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(void *)uint64_t v17 = v56[0];
      *(void *)(v17 + 8) = v44;
LABEL_8:
      *(unsigned char *)(v17 + 16) = 3;
      return swift_willThrow();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_22830EC60;
    *(void *)(v35 + 32) = v31;
    *(void *)(v35 + 40) = v30;
  }
  else
  {
    uint64_t v35 = specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)();
  }
LABEL_25:
  outlined copy of __REAssetBundle.LoadOptions.ContentRequest(v31, v30);
  swift_bridgeObjectRetain();
  uint64_t v36 = static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v35, v52, a6, a4, v58, (uint64_t)v53, a1, v51, (uint64_t)v24, a7);
  a8 = v55;
  if (v55)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    v56[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v39 = 32;
    uint64_t v40 = v38;
    do
    {
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v39 += 24;
      --v40;
    }
    while (v40);
    a4 = v56[0];
    v56[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v41 = 48;
    do
    {
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v41 += 24;
      --v38;
    }
    while (v38);
    a7 = v56[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a7 = MEMORY[0x263F8EE78];
    a4 = MEMORY[0x263F8EE78];
  }
  if (a4 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain_n();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(a7 >> 62)) {
      goto LABEL_37;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  uint64_t v45 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (a7 >> 62) {
    goto LABEL_49;
  }
LABEL_37:
  uint64_t v46 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_38:
  if (v46 < v45) {
    uint64_t v45 = v46;
  }
  if (v45)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
    uint64_t v47 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v47 = MEMORY[0x263F8EE80];
  }
  v56[0] = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a4, a7, 1, v56);
  if (a8)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v48 = v56[0];
    RERealityFileGetMinVersionFromRealityFileHeader();
    if (one-time initialization token for __sdkBundleVersion != -1) {
      swift_once();
    }
    String.utf8CString.getter();
    uint64_t v49 = RERealityFileHeaderCreateFromVersionInfo();
    swift_release();
    outlined init with copy of __REAssetService((uint64_t)v52, (uint64_t)v56);
    return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(a4, (uint64_t)v56, v48, v49, v50);
  }
  return result;
}

uint64_t static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v62 = a6;
  uint64_t v63 = a8;
  uint64_t v64 = a4;
  uint64_t v65 = a7;
  uint64_t v61 = a5;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v15);
  unsigned __int8 v70 = *(unsigned char *)a10;
  uint64_t v72 = a2;
  uint64_t v73 = a10;
  uint64_t Request = type metadata accessor for __AssetLoadRequest();
  __REAssetService.performOnEngineQueue<A>(with:_:)(&v70, (void (*)(uint64_t))partial apply for closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v71, v15, Request, v16, (uint64_t)&v67);
  if (!v10)
  {
    uint64_t v59 = a2;
    uint64_t v56 = a1;
    uint64_t v55 = a3;
    uint64_t v57 = (unsigned __int8 *)a10;
    uint64_t v58 = 0;
    uint64_t v18 = v67;
    uint64_t v19 = *(void *)(a10 + 120);
    uint64_t v20 = v64;
    if (v19)
    {
      uint64_t Stats = REAssetLoadRequestGetStats();
      type metadata accessor for __AssetLoadRequest.Statistics();
      uint64_t v22 = swift_allocObject();
      RERetain();
      *(void *)(v22 + 16) = Stats;
      uint64_t v23 = (void *)(v19 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
      swift_beginAccess();
      uint64_t v24 = swift_retain();
      MEMORY[0x22A688E10](v24);
      if (*(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
    }
    uint64_t v60 = v18;
    uint64_t v25 = *(void *)(a9 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      uint64_t v27 = MEMORY[0x263F8EE78];
      uint64_t v28 = v20;
      do
      {
        uint64_t v31 = *(void *)(a9 + 8 * v26 + 32);
        if (RERealityFileAssetDescriptorAsSceneDescriptor())
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v74 = v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
            uint64_t v27 = v74;
          }
          unint64_t v30 = *(void *)(v27 + 16);
          unint64_t v29 = *(void *)(v27 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            uint64_t v27 = v74;
          }
          *(void *)(v27 + 16) = v30 + 1;
          *(void *)(v27 + 8 * v30 + 32) = v31;
          uint64_t v20 = v28;
        }
        ++v26;
      }
      while (v25 != v26);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    uint64_t v74 = 0;
    uint64_t v33 = v59;
    uint64_t v34 = v59[3];
    uint64_t v35 = v59[4];
    __swift_project_boxed_opaque_existential_1(v59, v34);
    (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
    uint64_t AssetDescriptorWithEntryNameAndPostLoad = RERealityFileCreateAssetDescriptorWithEntryNameAndPostLoad();
    if (!AssetDescriptorWithEntryNameAndPostLoad)
    {
      swift_release();
      uint64_t v44 = v74;
      if (v74)
      {
        type metadata accessor for CFErrorRef(0);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
        swift_allocError();
        *uint64_t v45 = v44;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(void *)uint64_t v49 = 0xD000000000000029;
        *(void *)(v49 + 8) = 0x800000022835E920;
        *(unsigned char *)(v49 + 16) = 3;
      }
      uint64_t v11 = v60;
      swift_willThrow();
      goto LABEL_25;
    }
    uint64_t v37 = AssetDescriptorWithEntryNameAndPostLoad;
    uint64_t v11 = v59[3];
    uint64_t v38 = v59[4];
    uint64_t v39 = __swift_project_boxed_opaque_existential_1(v59, v11);
    uint64_t v65 = &v55;
    uint64_t v40 = v57;
    unsigned __int8 v69 = *v57;
    MEMORY[0x270FA5388](v39);
    v54[2] = v33;
    v54[3] = v20;
    uint64_t v41 = v60;
    v54[4] = v60;
    v54[5] = v27;
    v54[6] = v56;
    v54[7] = v37;
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(__REAsset, [__REAssetDescriptor], OpaquePointer)]);
    uint64_t v43 = v58;
    __REAssetService.performOnEngineQueue<A>(with:_:)(&v69, (void (*)(uint64_t))partial apply for closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v54, v11, v42, v38, (uint64_t)&v66);
    if (v43)
    {
      swift_release();
      RERelease();
LABEL_25:
      swift_release();
      return v11;
    }
    swift_release();
    uint64_t v46 = v66;
    uint64_t v47 = v33[3];
    uint64_t v48 = v33[4];
    __swift_project_boxed_opaque_existential_1(v33, v47);
    __REAssetService.asManager.getter(v47, v48);
    unsigned __int8 v68 = *v40;
    __REAssetManager.waitForLoadRequest(_:with:)(v41, &v68);
    uint64_t v51 = swift_release();
    MEMORY[0x270FA5388](v51);
    uint64_t v52 = v61;
    v54[-8] = v33;
    v54[-7] = v52;
    v54[-6] = v62;
    v54[-5] = v37;
    uint64_t v53 = v63;
    v54[-4] = v40;
    v54[-3] = v53;
    v54[-2] = v55;
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9__REAssetC_Say0D10Foundation02__F10DescriptorCGs13OpaquePointerVtG_AH_AlI07RESceneH0CtsAE_pTg5((void (*)(long long *__return_ptr, uint64_t *, uint64_t *))partial apply for closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)&v54[-10], v46);
    swift_bridgeObjectRelease();
    RERelease();
    swift_release();
  }
  return v11;
}

uint64_t closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  uint64_t result = specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(v7, *(unsigned char *)(a2 + 99), *(unsigned char *)(a2 + 98));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void *closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v9 = (void *)a1;
  uint64_t v10 = a7;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11)
  {
    void v21[6] = a5;
    v21[7] = a6;
    void v21[8] = a4;
    uint64_t v25 = a7;
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    long long v22 = xmmword_22830EC60;
    do
    {
      uint64_t v14 = *(void *)(a2 + 8 * v13 + 32);
      long long v23 = v22;
      uint64_t v24 = v14;
      uint64_t v15 = v9[3];
      uint64_t v16 = v9[4];
      __swift_project_boxed_opaque_existential_1(v9, v15);
      (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
      if (REAssetHandleGetOrCreateImmutableWithAssetDescriptors()) {
        REAssetLoadRequestAddAsset();
      }
      ++v13;
    }
    while (v11 != v13);
    a1 = swift_bridgeObjectRelease();
    uint64_t v10 = v25;
    uint64_t v7 = v21[9];
  }
  MEMORY[0x270FA5388](a1);
  id v21[2] = v17;
  v21[3] = v9;
  void v21[4] = v18;
  v21[5] = a3;
  uint64_t result = specialized Sequence.compactMap<A>(_:)((void (*)(long long *__return_ptr, uint64_t *))partial apply for closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)v21, v19);
  if (!v7) {
    *uint64_t v10 = result;
  }
  return result;
}

uint64_t closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v48 = *a1;
  if (RESceneDescriptorGetSceneName())
  {
    uint64_t v6 = String.init(cString:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  uint64_t v49 = *(void *)(a2 + 16);
  if (!v49)
  {
LABEL_28:
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t v45 = a4;
  uint64_t v9 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  uint64_t v50 = v6;
  unint64_t v51 = v8;
  uint64_t v46 = a2 + 32;
  while (1)
  {
    uint64_t v11 = (uint64_t *)(v9 + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    BOOL v14 = v6 == *v11 && v8 == v12;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_30;
    }
    uint64_t v15 = one-time initialization token for usdExtensions;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = static LoadUtilities.usdExtensions;
    uint64_t v53 = *(void *)(static LoadUtilities.usdExtensions + 16);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v17 = *(void *)(static LoadUtilities.usdExtensions + 32);
    uint64_t v18 = *(void **)(static LoadUtilities.usdExtensions + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 46;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v18;
    String.append(_:)(v20);
    unint64_t v8 = v51;
    swift_bridgeObjectRelease();
    uint64_t v6 = v50;
    swift_bridgeObjectRelease();
    if (v50 == v13 && v51 == v12) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v53 != 1)
    {
      long long v22 = (void **)(v16 + 56);
      unint64_t v23 = 1;
      while (v23 < *(void *)(v16 + 16))
      {
        uint64_t v25 = (uint64_t)*(v22 - 1);
        uint64_t v24 = *v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26._uint64_t countAndFlagsBits = 46;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        swift_bridgeObjectRetain();
        v27._uint64_t countAndFlagsBits = v25;
        uint64_t v6 = v50;
        v27._object = v24;
        String.append(_:)(v27);
        unint64_t v8 = v51;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v50 == v13 && v51 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_29;
        }
        ++v23;
        uint64_t result = swift_bridgeObjectRelease();
        v22 += 2;
        if (v53 == v23) {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v46;
LABEL_7:
    if (++v10 == v49)
    {
      swift_bridgeObjectRelease();
      a4 = v45;
      goto LABEL_28;
    }
  }
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  RERealityFileAssetDescriptorGetFilename();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v29);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v30 + 32);
  v31(v29, v30);
  uint64_t result = REAssetManagerResolveAssetDescriptor();
  if (!result) {
    goto LABEL_47;
  }
  uint64_t v32 = inited + 32;
  *(void *)(inited + 32) = result;
  v31(v29, v30);
  uint64_t ImmutableWithAssetDescriptors = REAssetHandleGetOrCreateImmutableWithAssetDescriptors();
  if (ImmutableWithAssetDescriptors)
  {
    uint64_t v34 = ImmutableWithAssetDescriptors;
    id v35 = (id)REAssetGetType();
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    if (v36 == 0x656E656353 && v38 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v40 & 1) == 0) {
        goto LABEL_43;
      }
    }
    REAssetSetNetworkSharingMode();
LABEL_43:
    REAssetLoadRequestAddAsset();
    type metadata accessor for __REAsset();
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v34;
    uint64_t v52 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v44 = *(void *)(inited + 32);
    RERetain();
    type metadata accessor for __REAssetDescriptor();
    *(void *)(swift_allocObject() + 16) = v44;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    *uint64_t v45 = v43;
    v45[1] = v52;
    v45[2] = v48;
    RERelease();
    swift_setDeallocating();
    return swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
  swift_allocError();
  *(void *)uint64_t v41 = 0xD000000000000033;
  *(void *)(v41 + 8) = 0x800000022835E9A0;
  *(unsigned char *)(v41 + 16) = 3;
  swift_willThrow();
  for (uint64_t i = *(void *)(inited + 16); i; --i)
  {
    v32 += 8;
    RERelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  uint64_t v11 = v10;
  uint64_t v56 = a8;
  uint64_t v55 = a7;
  uint64_t v57 = a6;
  uint64_t v61 = (long long *)a5;
  uint64_t v62 = a2;
  uint64_t v60 = a9;
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  uint64_t v58 = a1[1];
  uint64_t v59 = a1[2];
  swift_retain_n();
  Swift::String v19 = (void *)REAssetHandleCopyCompiledExtension();
  Swift::String v20 = String.init(_:)(v19);
  if (v20._countAndFlagsBits == 0x64656C69706D6F63 && v20._object == (void *)0xED0000656E656373)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_6;
    }
  }
  uint64_t v28 = v62;
  outlined init with copy of __REAssetService((uint64_t)v62, (uint64_t)&v65);
  uint64_t v29 = specialized Scene.init(_:assetService:)(v18, &v65);
  if (!v10)
  {
    uint64_t v30 = v29;
    specialized static __REAssetBundle.registerAnchoringComponentARReferences(scene:realityFilename:assetDescriptor:assetService:)(v29, a3, a4, (uint64_t)v61, v28);
    int v52 = *v57;
    BOOL v53 = v52 == 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
    uint64_t inited = swift_initStackObject();
    long long v51 = xmmword_22830EC60;
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v32 = (void *)*MEMORY[0x263F376C0];
    *(void *)(inited + 32) = *MEMORY[0x263F376C0];
    id v33 = v32;
    *(NSNumber *)(inited + 40) = Bool._bridgeToObjectiveC()();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v64 = 0;
    RERealityFileGetMinVersionFromRealityFileHeader();
    type metadata accessor for CFStringRef(0);
    uint64_t v34 = v30;
    _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    LOBYTE(inited) = RERealityFilePostLoadProcessing();

    if (inited)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
      uint64_t v36 = swift_initStackObject();
      *(_OWORD *)(v36 + 16) = v51;
      uint64_t v37 = v62;
      *(void *)(v36 + 32) = v61;
      LOBYTE(v65) = v52;
      char v38 = specialized static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(v34, v36, (uint64_t)v37, (unsigned __int8 *)&v65);
      char v41 = v38;
      swift_bridgeObjectRelease();
      if (v41)
      {
        uint64_t v65 = 0;
        unint64_t v66 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        uint64_t v65 = 0x3A79726F6D656DLL;
        unint64_t v66 = 0xE700000000000000;
        UUID.init()();
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v15);
        v43._uint64_t countAndFlagsBits = 0x656C69706D6F632ELL;
        v43._object = (void *)0xEE00656E65637364;
        String.append(_:)(v43);
        uint64_t v45 = v65;
        unint64_t v44 = v66;
        uint64_t v46 = v62;
        uint64_t v47 = v62[3];
        uint64_t v56 = v62[4];
        uint64_t v48 = __swift_project_boxed_opaque_existential_1(v62, v47);
        uint64_t v61 = &v51;
        unsigned __int8 v63 = *v57;
        MEMORY[0x270FA5388](v48);
        *((void *)&v51 - 4) = v34;
        *((void *)&v51 - 3) = v46;
        *((void *)&v51 - 2) = v45;
        *((void *)&v51 - 1) = v44;
        uint64_t v49 = type metadata accessor for __REAsset();
        __REAssetService.performOnEngineQueue<A>(with:_:)(&v63, (void (*)(uint64_t))partial apply for closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:), (uint64_t)(&v51 - 3), v47, v49, v56, (uint64_t)&v65);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v18 = v65;
        goto LABEL_7;
      }
LABEL_6:
      swift_release();
LABEL_7:
      unint64_t v23 = v60;
      uint64_t v24 = v58;
      uint64_t *v60 = v18;
      v23[1] = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v25 = v59;
      RERetain();
      type metadata accessor for RESceneDescriptor();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      uint64_t result = swift_release();
      long long v23[2] = v26;
      return result;
    }
    uint64_t v39 = v64;
    if (v64)
    {
      type metadata accessor for CFErrorRef(0);
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v11 = swift_allocError();
      *char v40 = v39;
    }
    else
    {
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      uint64_t v11 = swift_allocError();
      *(void *)uint64_t v50 = 0xD000000000000026;
      *(void *)(v50 + 8) = 0x800000022835E950;
      *(unsigned char *)(v50 + 16) = 3;
    }
    swift_willThrow();
    swift_release();
  }
  uint64_t result = swift_release();
  *a10 = v11;
  return result;
}

uint64_t closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v17);
  outlined init with copy of __REAssetService((uint64_t)v17, (uint64_t)v14);
  type metadata accessor for __REAsset();
  uint64_t v6 = swift_allocObject();
  uint64_t v8 = v15;
  uint64_t v7 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v8, v7);
  String.utf8CString.getter();
  uint64_t v10 = REAssetManagerSceneAssetCreate();
  swift_release();
  if (v10)
  {
    swift_bridgeObjectRelease();
    *(void *)(v6 + 16) = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    uint64_t result = swift_release();
    *a4 = v6;
  }
  else
  {
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(void *)uint64_t v12 = a2;
    *(void *)(v12 + 8) = a3;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    *(unsigned char *)(v12 + 32) = 0;
    swift_willThrow();
    swift_deallocPartialClassInstance();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return swift_release();
  }
  return result;
}

uint64_t __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v180 = a1;
  v214[1] = *MEMORY[0x263EF8340];
  uint64_t v177 = type metadata accessor for UUID();
  uint64_t v174 = *(void **)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  uint64_t v179 = (char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v175 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v173 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  id v172 = (char *)&v161 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v178 = (char *)&v161 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v176 = (char *)&v161 - v13;
  long long v14 = a2[7];
  long long v200 = a2[6];
  long long v201 = v14;
  v202[0] = a2[8];
  *(_OWORD *)((char *)v202 + 9) = *(long long *)((char *)a2 + 137);
  long long v15 = a2[3];
  long long v196 = a2[2];
  long long v197 = v15;
  long long v16 = a2[5];
  long long v198 = a2[4];
  long long v199 = v16;
  long long v17 = a2[1];
  long long v194 = *a2;
  long long v195 = v17;
  uint64_t v18 = RERealityFileWritingParametersCreate();
  RERealityFileWritingParametersSetRestrictedToSeed();
  id v19 = objc_msgSend(self, sel_mainBundle);
  id v20 = objc_msgSend(v19, sel_bundleIdentifier);

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v23 = 0;
  }
  if (!off_26DC86540)
  {
    if (v23) {
      goto LABEL_11;
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_arrayDestroy();
    goto LABEL_20;
  }
  if (!v23)
  {
    if (off_26DC86550)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      swift_arrayDestroy();
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (qword_26DC86538 == v21 && off_26DC86540 == (_UNKNOWN *)v23
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    goto LABEL_15;
  }
LABEL_11:
  if (!off_26DC86550
    || (qword_26DC86548 != v21 || off_26DC86550 != v23) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_17;
  }
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_20:
  RERealityFileWritingParametersSetCrossEngineValidationDisablement();
LABEL_21:
  RERealityFileWritingParametersSetMakeSnapshotOfDynamicTextures();
  uint64_t v24 = v181;
  uint64_t v25 = v181[5];
  uint64_t v26 = v181[6];
  __swift_project_boxed_opaque_existential_1(v181 + 2, v25);
  __REAssetService.asManager.getter(v25, v26);
  unint64_t v27 = v24[1];
  char v28 = v194;
  unint64_t v29 = swift_bridgeObjectRetain();
  specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(v29, v28);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return RERelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  if ((BYTE1(v199) & 1) == 0)
  {
    outlined init with take of Transform?((uint64_t)&v198 + 8, (uint64_t)v207, &demangling cache variable for type metadata for Int?);
    outlined init with take of Transform?((uint64_t)v207, (uint64_t)&v208, &demangling cache variable for type metadata for Int?);
    if (v209)
    {
      if ((void)v197 == 5) {
        goto LABEL_50;
      }
      unint64_t v31 = *((void *)&v197 + 1);
      unsigned __int32 v32 = v198;
      if ((unint64_t)(v197 - 2) >= 3)
      {
        if ((void)v197)
        {
          if ((void)v197 == 1) {
            outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v196 + 1), 1uLL);
          }
          else {
            outlined copy of __REAssetBundle.ExportOptions.PlatformOS(*((uint64_t *)&v196 + 1), v197);
          }
        }
        else
        {
          outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v196 + 1), 0);
        }
      }
      else
      {
        outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*((uint64_t *)&v196 + 1), v197);
      }
      v33.n128_u64[0] = v31;
      v33.n128_u32[2] = v32;
      __n128 v171 = v33;
      uint64_t v44 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x22A691570](v44 + 32, v171);
      swift_release();
    }
    else
    {
      uint64_t v38 = v208;
    }
    if (RERealityFileWritingParametersSetMajorVersion())
    {
LABEL_50:
      unint64_t v45 = v197;
      if ((void)v197 == 5)
      {
        uint64_t v162 = 0;
        uint64_t v43 = (uint64_t)v181;
      }
      else
      {
        uint64_t v43 = (uint64_t)v181;
        if (((v198 | ((unint64_t)BYTE4(v198) << 32)) & 0x100000000) != 0)
        {
          if ((unint64_t)v197 >= 5)
          {
            uint64_t v127 = *((void *)&v196 + 1);
            lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
            swift_allocError();
            *(void *)uint64_t v128 = v127;
            *(void *)(v128 + 8) = v45;
            *(unsigned char *)(v128 + 16) = 2;
            outlined copy of __REAssetBundle.ExportOptions.PlatformOS(v127, v45);
            swift_willThrow();
            return RERelease();
          }
          uint64_t v162 = 0;
          RERealityFileWritingParametersSetTargetPlatform();
        }
        else
        {
          uint64_t v162 = 0;
        }
      }
      goto LABEL_57;
    }
LABEL_52:
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)uint64_t v46 = v38;
    *(void *)(v46 + 8) = 0;
    *(unsigned char *)(v46 + 16) = 1;
    swift_willThrow();
    return RERelease();
  }
  long long v34 = a2[7];
  long long v189 = a2[6];
  long long v190 = v34;
  v191[0] = a2[8];
  *(_OWORD *)((char *)v191 + 9) = *(long long *)((char *)a2 + 137);
  long long v35 = a2[3];
  long long v185 = a2[2];
  long long v186 = v35;
  long long v36 = a2[5];
  long long v187 = a2[4];
  long long v188 = v36;
  long long v37 = a2[1];
  long long v183 = *a2;
  long long v184 = v37;
  uint64_t v38 = __REAssetBundle.ExportOptions.getVersioningDetails()();
  uint64_t v164 = v18;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v39 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v169 = v6;
  uint64_t v162 = 0;
  if (v39)
  {
    if (v39 < 1)
    {
      __break(1u);
      goto LABEL_146;
    }
    uint64_t v40 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](v40, v27);
      }
      else {
        swift_retain();
      }
      ++v40;
      uint64_t RequiredRealityFileVersion = RESceneAssetGetRequiredRealityFileVersion();
      swift_release();
      if (v38 <= RequiredRealityFileVersion) {
        uint64_t v38 = RequiredRealityFileVersion;
      }
    }
    while (v39 != v40);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = v164;
  char v42 = RERealityFileWritingParametersSetMajorVersion();
  uint64_t v6 = v169;
  uint64_t v43 = (uint64_t)v181;
  if ((v42 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_57:
  uint64_t v169 = v6;
  uint64_t v47 = RERealityFileWriterCreateWithParameters();
  uint64_t v48 = swift_allocObject();
  *(unsigned char *)(v48 + 16) = 1;
  uint64_t v161 = v48 + 16;
  outlined init with copy of __REAssetBundle(v43, (uint64_t)&v183);
  uint64_t v49 = swift_allocObject();
  long long v50 = v201;
  *(_OWORD *)(v49 + 120) = v200;
  *(_OWORD *)(v49 + 136) = v50;
  *(_OWORD *)(v49 + 152) = v202[0];
  *(_OWORD *)(v49 + 161) = *(_OWORD *)((char *)v202 + 9);
  long long v51 = v197;
  *(_OWORD *)(v49 + 56) = v196;
  *(_OWORD *)(v49 + 72) = v51;
  long long v52 = v199;
  *(_OWORD *)(v49 + 88) = v198;
  *(_OWORD *)(v49 + 104) = v52;
  long long v53 = v195;
  *(_OWORD *)(v49 + 24) = v194;
  *(_OWORD *)(v49 + 40) = v53;
  long long v54 = v184;
  *(_OWORD *)(v49 + 184) = v183;
  *(_OWORD *)(v49 + 200) = v54;
  long long v55 = v186;
  *(_OWORD *)(v49 + 216) = v185;
  *(void *)(v49 + 16) = v47;
  *(_OWORD *)(v49 + 232) = v55;
  *(void *)(v49 + 248) = v48;
  v193[4] = partial apply for closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:);
  v193[5] = v49;
  v193[0] = MEMORY[0x263EF8330];
  v193[1] = 1107296256;
  v193[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned RESceneRemappingCallbackResult);
  v193[3] = &block_descriptor_42;
  uint64_t v56 = _Block_copy(v193);
  uint64_t v163 = v48;
  swift_retain();
  outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v194);
  swift_release();
  RERealityFileWriterAddSceneRemappingCallback();
  _Block_release(v56);
  uint64_t v57 = *(void *)&v202[1];
  if (*(void *)&v202[1])
  {
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v57;
    *(void *)&long long v185 = partial apply for closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:);
    *((void *)&v185 + 1) = v58;
    *(void *)&long long v183 = MEMORY[0x263EF8330];
    *((void *)&v183 + 1) = 1107296256;
    *(void *)&long long v184 = thunk for @escaping @callee_guaranteed (@guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ();
    *((void *)&v184 + 1) = &block_descriptor_20;
    uint64_t v59 = _Block_copy(&v183);
    swift_bridgeObjectRetain();
    swift_release();
    RERealityFileWriterAddRemappingCustomizationCallback();
    uint64_t v60 = v177;
    uint64_t v61 = v174;
  }
  else
  {
    uint64_t v60 = v177;
    uint64_t v61 = v174;
    if (!((unint64_t)v201 | *(void *)&v202[0])) {
      goto LABEL_62;
    }
    uint64_t v62 = (_OWORD *)swift_allocObject();
    long long v63 = v201;
    v62[7] = v200;
    v62[8] = v63;
    v62[9] = v202[0];
    *(_OWORD *)((char *)v62 + 153) = *(_OWORD *)((char *)v202 + 9);
    long long v64 = v197;
    v62[3] = v196;
    _OWORD v62[4] = v64;
    long long v65 = v199;
    v62[5] = v198;
    v62[6] = v65;
    long long v66 = v195;
    v62[1] = v194;
    long long v62[2] = v66;
    *(void *)&long long v185 = partial apply for closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:);
    *((void *)&v185 + 1) = v62;
    *(void *)&long long v183 = MEMORY[0x263EF8330];
    *((void *)&v183 + 1) = 1107296256;
    *(void *)&long long v184 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ();
    *((void *)&v184 + 1) = &block_descriptor_14_0;
    uint64_t v59 = _Block_copy(&v183);
    outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v194);
    swift_release();
    RERealityFileWriterAddPathRemappingCustomizationCallback();
  }
  _Block_release(v59);
LABEL_62:
  uint64_t v67 = v178;
  static __REAssetBundle.temporaryURL.getter(v178);
  unsigned __int8 v68 = v179;
  UUID.init()();
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  dispatch thunk of CustomStringConvertible.description.getter();
  ((void (*)(char *, uint64_t))v61[1])(v68, v60);
  uint64_t v69 = v47;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v70 = v169;
  id v165 = *(void (**)(char *, uint64_t))(v175 + 8);
  uint64_t v166 = v175 + 8;
  v165(v67, v169);
  v193[0] = 0;
  URL.absoluteString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  LODWORD(v68) = RERealityFileWriterOpen();
  swift_release();
  if (!v68)
  {
    uint64_t v97 = v193[0];
    if (v193[0])
    {
      type metadata accessor for CFErrorRef(0);
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v98 = swift_allocError();
      *uint64_t v99 = v97;
    }
    else
    {
      uint64_t v98 = 0;
    }
    unint64_t v117 = v173;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v173, v180, v70);
    if (!v98)
    {
      *(void *)&long long v183 = 0;
      *((void *)&v183 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(void *)&long long v183 = 0xD000000000000026;
      *((void *)&v183 + 1) = 0x800000022835E5E0;
      v118._uint64_t countAndFlagsBits = URL.absoluteString.getter();
      String.append(_:)(v118);
      swift_bridgeObjectRelease();
      v119._uint64_t countAndFlagsBits = 46;
      v119._object = (void *)0xE100000000000000;
      String.append(_:)(v119);
      long long v120 = v183;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(_OWORD *)uint64_t v121 = v120;
      *(unsigned char *)(v121 + 16) = 3;
    }
    uint64_t v122 = v117;
    unint64_t v123 = v165;
    v165(v122, v70);
    swift_willThrow();
    unint64_t v124 = v176;
    $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
    v123(v124, v70);
    swift_release();
    RERelease();
    return RERelease();
  }
  outlined init with take of Transform?((uint64_t)&v199 + 8, (uint64_t)v206, &demangling cache variable for type metadata for [String]?);
  outlined init with take of Transform?((uint64_t)v206, (uint64_t)&v210, &demangling cache variable for type metadata for [String]?);
  if (v210)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    RERealityFileWriterSetConfigurationSetNames();
  }
  outlined init with take of Transform?((uint64_t)&v200, (uint64_t)v205, &demangling cache variable for type metadata for [String]?);
  outlined init with take of Transform?((uint64_t)v205, (uint64_t)&v211, &demangling cache variable for type metadata for [String]?);
  uint64_t v72 = v181;
  if (v211)
  {
    Class v73 = Array._bridgeToObjectiveC()().super.isa;
    RERealityFileWriterSetDefaultConfigurationNames();
  }
  outlined init with take of Transform?((uint64_t)&v194 + 8, (uint64_t)v204, &demangling cache variable for type metadata for Int?);
  outlined init with take of Transform?((uint64_t)v204, (uint64_t)&v212, &demangling cache variable for type metadata for Int?);
  if ((v213 & 1) == 0 && !v212) {
    RERealityFileWriterSetCompressionMethod();
  }
  unint64_t v74 = v72[1];
  uint64_t v164 = v18;
  if (v74 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v75 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v76 = v180;
  uint64_t v170 = v69;
  if (v75)
  {
    if (v75 >= 1)
    {
      uint64_t v77 = 0;
      uint64_t v178 = (char *)(v74 & 0xC000000000000001);
      unint64_t v78 = (void *)MEMORY[0x263F8EE78];
      uint64_t v167 = (uint64_t)&v200 + 8;
      v171.n128_u64[0] = MEMORY[0x263F8EE50] + 8;
      unint64_t v168 = v74;
      uint64_t v179 = (char *)v75;
      while (1)
      {
        if (v178) {
          MEMORY[0x22A689930](v77, v74);
        }
        else {
          swift_retain();
        }
        uint64_t v79 = v72[7];
        if ((v79 & 0xC000000000000001) != 0)
        {
          uint64_t v80 = (char *)__CocoaDictionary.lookup(_:)();
          if (v80)
          {
            uint64_t v192 = v80;
            type metadata accessor for RESceneDescriptor();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            unint64_t v81 = (char *)v183;
            swift_unknownObjectRelease();
            if (v81) {
              goto LABEL_86;
            }
          }
        }
        else if (*(void *)(v79 + 16))
        {
          uint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)();
          if (v83)
          {
            unint64_t v81 = *(char **)(*(void *)(v79 + 56) + 8 * v82);
            swift_retain();
            if (v81)
            {
LABEL_86:
              uint64_t v174 = v78;
              uint64_t v177 = REAssetWithMetadataCreate();
              uint64_t SceneName = RESceneDescriptorGetSceneName();
              uint64_t v173 = v81;
              if (SceneName)
              {
                uint64_t v85 = String.init(cString:)();
                uint64_t v87 = v86;
              }
              else
              {
                uint64_t v85 = 0;
                uint64_t v87 = 0xE000000000000000;
              }
              RESceneDescriptorGetSceneIdentifier();
              String.init(cString:)();
              String.utf8CString.getter();
              String.utf8CString.getter();
              swift_bridgeObjectRelease();
              REAssetWithMetadataSetSceneMetadata();
              swift_release();
              swift_release();
              REAssetWithMetadataSetTreatAsScene();
              outlined init with take of Transform?(v167, (uint64_t)v203, &demangling cache variable for type metadata for [String : [String]]?);
              outlined init with take of Transform?((uint64_t)v203, (uint64_t)v214, &demangling cache variable for type metadata for [String : [String]]?);
              if (v214[0])
              {
                uint64_t v72 = v181;
                uint64_t v88 = v174;
                if (*(void *)(v214[0] + 16)
                  && (specialized __RawDictionaryStorage.find<A>(_:)(v85, v87), (v89 & 1) != 0))
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  Class v90 = Array._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  REAssetWithMetadataSetConfigurationNames();

                  uint64_t v88 = v174;
                  uint64_t v76 = v180;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  uint64_t v76 = v180;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t v76 = v180;
                uint64_t v72 = v181;
                uint64_t v88 = v174;
              }
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v74 = v168;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
              }
              uint64_t v92 = v88;
              unint64_t v93 = v88[2];
              unint64_t v94 = v92;
              unint64_t v95 = v92[3];
              if (v93 >= v95 >> 1) {
                unint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v93 + 1, 1, v94);
              }
              v94[2] = v93 + 1;
              uint64_t v96 = &v94[v93];
              unint64_t v78 = v94;
              v96[4] = v177;
              swift_release();
            }
          }
        }
        swift_release();
        if (v179 == (char *)++v77) {
          goto LABEL_103;
        }
      }
    }
LABEL_146:
    __break(1u);
  }
  unint64_t v78 = (void *)MEMORY[0x263F8EE78];
LABEL_103:
  swift_bridgeObjectRelease();
  RERealityFileAssetWriteReportCreate();
  uint64_t v174 = v78;
  if (RERealityFileWriterWriteAssetArrayAndDependencies())
  {
    swift_beginAccess();
    RERealityFileWriterCertifyFreeOfChangeSceneActions();
    if (RERealityFileWriterClose())
    {
      id v100 = self;
      id v101 = objc_msgSend(v100, sel_defaultManager);
      uint64_t countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
      unint64_t v103 = (void *)MEMORY[0x22A688A50](countAndFlagsBits);
      swift_bridgeObjectRelease();
      unsigned int v104 = objc_msgSend(v101, sel_fileExistsAtPath_, v103);

      if (v104)
      {
        uint64_t v181 = v100;
        os_log_type_t v105 = static os_log_type_t.info.getter();
        unint64_t v106 = v172;
        uint64_t v107 = v169;
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v172, v76, v169);
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        unint64_t v108 = static OS_os_log.default.getter();
        os_log_type_t v109 = v105;
        if (os_log_type_enabled(v108, v105))
        {
          uint64_t v110 = swift_slowAlloc();
          uint64_t v179 = (char *)swift_slowAlloc();
          uint64_t v192 = v179;
          *(_DWORD *)uint64_t v110 = 136315138;
          uint64_t v178 = (char *)(v110 + 4);
          uint64_t v111 = URL.lastPathComponent.getter();
          uint64_t v182 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, (uint64_t *)&v192);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v165(v106, v107);
          _os_log_impl(&dword_227DD2000, v108, v109, "Deleting file %s that already exists at dest", (uint8_t *)v110, 0xCu);
          uint64_t v113 = v179;
          swift_arrayDestroy();
          MEMORY[0x22A696500](v113, -1, -1);
          MEMORY[0x22A696500](v110, -1, -1);
        }
        else
        {

          v165(v106, v107);
        }
        id v100 = v181;
        id v137 = objc_msgSend(v181, sel_defaultManager);
        URL._bridgeToObjectiveC()(v138);
        uint64_t v140 = v139;
        uint64_t v192 = 0;
        unsigned int v141 = objc_msgSend(v137, sel_removeItemAtURL_error_, v139, &v192);

        if (v141)
        {
          id v142 = v192;
        }
        else
        {
          float v143 = v192;
          id v144 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v162 = 0;
        }
      }
      id v145 = objc_msgSend(v100, sel_defaultManager);
      URL._bridgeToObjectiveC()(v146);
      id v148 = v147;
      URL._bridgeToObjectiveC()(v149);
      uint64_t v151 = v150;
      uint64_t v192 = 0;
      unsigned int v152 = objc_msgSend(v145, sel_moveItemAtURL_toURL_error_, v148, v150, &v192);

      if (v152)
      {
        id v153 = v192;
        RERelease();
        uint64_t v154 = v174[2];
        if (v154)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v154; ++i)
            RERelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        id v160 = v176;
        $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
        v165(v160, v169);
        swift_release();
        RERelease();
        return RERelease();
      }
      id v156 = v192;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      RERelease();
      uint64_t v157 = v174[2];
      if (!v157) {
        goto LABEL_141;
      }
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v157; ++j)
        RERelease();
    }
    else
    {
      uint64_t v125 = v193[0];
      if (v193[0])
      {
        type metadata accessor for CFErrorRef(0);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
        swift_allocError();
        *unint64_t v126 = v125;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(void *)uint64_t v134 = 0xD000000000000018;
        *(void *)(v134 + 8) = 0x800000022835E610;
        *(unsigned char *)(v134 + 16) = 3;
      }
      swift_willThrow();
      RERelease();
      uint64_t v135 = v174[2];
      if (!v135) {
        goto LABEL_141;
      }
      swift_bridgeObjectRetain();
      for (uint64_t k = 0; k != v135; ++k)
        RERelease();
    }
    swift_bridgeObjectRelease();
LABEL_141:
    swift_bridgeObjectRelease();
    uint64_t v159 = v176;
    $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
    v165(v159, v169);
    swift_release();
    RERelease();
    return RERelease();
  }
  id v114 = (id)RERealityFileAssetWriteReportGetError();
  if (v114)
  {
    id v115 = v114;
    type metadata accessor for CFErrorRef(0);
    _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    swift_allocError();
    *uint64_t v116 = v115;
  }
  else
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(_OWORD *)uint64_t v129 = xmmword_2283399A0;
    *(unsigned char *)(v129 + 16) = 4;
  }
  uint64_t v130 = v169;
  swift_willThrow();
  RERelease();
  uint64_t v131 = v174[2];
  if (v131)
  {
    swift_bridgeObjectRetain();
    for (uint64_t m = 0; m != v131; ++m)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v133 = v176;
  $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)();
  v165(v133, v130);
  swift_release();
  RERelease();
  return RERelease();
}

BOOL static __REAssetBundle.ExportOptions.PlatformRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for Scene();
  swift_allocObject();
  Scene.init(coreScene:)(a1);
  unsigned __int8 v10 = static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(a2);
  swift_release();
  long long v11 = a3[6];
  long long v12 = a3[8];
  v18[7] = a3[7];
  v19[0] = v12;
  *(_OWORD *)((char *)v19 + 9) = *(long long *)((char *)a3 + 137);
  long long v13 = a3[3];
  void v18[2] = a3[2];
  _OWORD v18[3] = v13;
  long long v14 = a3[5];
  v18[4] = a3[4];
  v18[5] = v14;
  void v18[6] = v11;
  long long v15 = a3[1];
  v18[0] = *a3;
  v18[1] = v15;
  swift_allocObject();
  uint64_t v16 = Scene.init(coreScene:)(a1);
  swift_beginAccess();
  LOBYTE(a2) = specialized static __REAssetBundle.remapSceneInteractionsBeforeWrite(with:assetService:fileWriter:scene:freeOfChangeSceneActions:)(v18, a4 + 16, a2, v16, (BOOL *)(a5 + 16));
  swift_endAccess();
  swift_release();
  return (v10 | a2) & 1;
}

uint64_t static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(uint64_t a1)
{
  uint64_t v62 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v58 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for __REAnchoring();
  MEMORY[0x270FA5388](v70);
  uint64_t v59 = (const char **)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  uint64_t v8 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v52 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v51 = (uint64_t)&v48 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (uint64_t)&v48 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v72 = type metadata accessor for __REAnchoringType();
  uint64_t v17 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v69 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v46 = xmmword_228346B20;
    *(unsigned char *)(v46 + 16) = 0;
LABEL_35:
    swift_willThrow();
    return v22 & 1;
  }
  uint64_t result = RESceneGetComponentsOfCustomType();
  uint64_t v68 = result;
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v20;
    if (v20)
    {
      uint64_t v56 = v6;
      int v22 = 0;
      uint64_t v23 = 0;
      uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
      long long v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      unsigned int v55 = *MEMORY[0x263F06F00];
      long long v54 = (void (**)(char *, void, uint64_t))(v4 + 104);
      long long v53 = (void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      uint64_t v49 = v20 - 1;
      uint64_t v24 = v1;
      uint64_t v25 = (uint64_t)v58;
      uint64_t v66 = v20;
LABEL_5:
      int v50 = v22;
      if (v21 <= v23) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = v21;
      }
      uint64_t v67 = v26;
      unint64_t v27 = v59;
      uint64_t v28 = v63;
      while (v67 != v23)
      {
        uint64_t Object = RECustomComponentGetObject();
        if (!Object)
        {
          lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
          swift_allocError();
          *(void *)uint64_t v47 = 0;
          *(void *)(v47 + 8) = 0;
          *(unsigned char *)(v47 + 16) = 2;
          goto LABEL_35;
        }
        uint64_t v30 = Object;
        outlined init with copy of (Int, URL)(Object + *(int *)(v70 + 20), v28, &demangling cache variable for type metadata for __REAnchoringType?);
        _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v30, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
        unint64_t v31 = *v71;
        uint64_t v32 = v72;
        if ((*v71)(v28, 1, v72) == 1)
        {
          __n128 v33 = *v27;
          if (*v27)
          {
            uint64_t v60 = v24;
            uint64_t v34 = strlen(v33);
            long long v35 = v56;
            (*v54)(v56, v55, v64);
            Data.Deallocator._deallocator.getter();
            if (v34)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              swift_retain();
              uint64_t v36 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              uint64_t v34 = specialized Data._Representation.init(_:count:)(v36, v34);
              unint64_t v38 = v37;
              swift_release();
            }
            else
            {
              uint64_t v39 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
              v39(v33, 0);
              swift_release();
              swift_release();
              unint64_t v38 = 0xC000000000000000;
            }
            (*v53)(v35, v64);
            type metadata accessor for JSONDecoder();
            swift_allocObject();
            JSONDecoder.init()();
            _sSo10CFErrorRefaABs5Error10FoundationWlTm_2(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (void (*)(uint64_t))type metadata accessor for __REAnchoringType);
            uint64_t v40 = v72;
            char v41 = v60;
            dispatch thunk of JSONDecoder.decode<A>(_:from:)();
            uint64_t v24 = v41;
            if (v41)
            {
              swift_release();
              outlined consume of Data._Representation(v34, v38);

              (*v65)(v16, 1, 1, v40);
              uint64_t v24 = 0;
            }
            else
            {
              (*v65)(v16, 0, 1, v40);
              swift_release();
              outlined consume of Data._Representation(v34, v38);
            }
            uint64_t v25 = (uint64_t)v58;
            unint64_t v27 = v59;
          }
          else
          {
            (*v65)(v16, 1, 1, v72);
          }
          _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
          uint64_t v28 = v63;
          outlined destroy of BodyTrackingComponent?(v63, &demangling cache variable for type metadata for __REAnchoringType?);
          uint64_t v32 = v72;
        }
        else
        {
          _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(v28, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          (*v65)(v16, 0, 1, v32);
        }
        if (v31((uint64_t)v16, 1, v32) == 1)
        {
          uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
          uint64_t v21 = v66;
        }
        else
        {
          uint64_t v42 = v69;
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v16, v69, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          closure #1 in static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)(v42, v62, v25);
          uint64_t v21 = v66;
          if (v24)
          {
            _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v69, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
            return v22 & 1;
          }
          if ((*v57)(v25, 1, v61) != 1)
          {
            uint64_t v43 = v51;
            outlined init with take of Transform?(v25, v51, &demangling cache variable for type metadata for __REAnchoringType?);
            uint64_t v44 = v52;
            outlined init with copy of (Int, URL)(v43, v52, &demangling cache variable for type metadata for __REAnchoringType?);
            __REAnchoring.type.setter(v44);
            outlined destroy of BodyTrackingComponent?(v43, &demangling cache variable for type metadata for __REAnchoringType?);
            uint64_t result = _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v69, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
            int v22 = 1;
            if (v49 == v23++) {
              return v22 & 1;
            }
            goto LABEL_5;
          }
          _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v69, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          uint64_t result = outlined destroy of BodyTrackingComponent?(v25, &demangling cache variable for type metadata for __REAnchoringType??);
        }
        if (v21 == ++v23)
        {
          LOBYTE(v22) = v50;
          return v22 & 1;
        }
      }
      __break(1u);
      goto LABEL_40;
    }
    LOBYTE(v22) = 0;
    return v22 & 1;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned RESceneRemappingCallbackResult)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

void *closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    id v6 = result;
    id v7 = a2;
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t *)(a3 + 56);
    do
    {
      uint64_t v9 = *(v8 - 3);
      uint64_t v10 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = (void *)MEMORY[0x22A688A50](v9, v10);
      objc_msgSend(v6, sel_addObject_, v13);

      uint64_t v14 = (void *)MEMORY[0x22A688A50](v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_addObject_, v14);

      v8 += 4;
      --v3;
    }
    while (v3);

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, v6);
  swift_release();
}

void closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v11)(uint64_t *__return_ptr, char *);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(char *);
  id v21;
  id v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.init(cString:)();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void (*)(uint64_t *__return_ptr, char *))a4[14];
  if (!v11)
  {
    uint64_t v21 = a2;
    int v22 = a3;
    uint64_t v20 = (uint64_t (*)(char *))a4[16];
    if (v20) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  long long v35 = a2;
  uint64_t v12 = a3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v11);
  v11(&v39, v10);
  uint64_t v13 = v40;
  if (!v40)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v11);
    uint64_t v20 = (uint64_t (*)(char *))a4[16];
    if (v20) {
      goto LABEL_6;
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_14:

    return;
  }
  unint64_t v38 = v7;
  uint64_t v36 = v10;
  uint64_t v15 = v41;
  uint64_t v14 = v42;
  uint64_t v34 = v12;
  uint64_t v16 = v39;
  uint64_t v17 = MEMORY[0x22A688A50](v39, v40);
  unint64_t v37 = v8;
  uint64_t v18 = (void *)v17;
  objc_msgSend(v35, sel_addObject_, v17);

  id v19 = (void *)MEMORY[0x22A688A50](v15, v14);
  uint64_t v10 = v36;
  uint64_t v7 = v38;
  outlined consume of IKRig.Constraint?(v16, v13);
  objc_msgSend(v34, sel_addObject_, v19);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v11);

  uint64_t v8 = v37;
  uint64_t v20 = (uint64_t (*)(char *))a4[16];
  if (!v20) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v23 = (void *)a4[17];
  swift_retain();
  uint64_t v24 = (char *)v20(v10);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v20);
    goto LABEL_14;
  }
  uint64_t v34 = v23;
  long long v35 = v24;
  uint64_t v36 = v10;
  unint64_t v37 = v8;
  unint64_t v38 = v7;
  uint64_t v25 = *((void *)v24 + 2);
  if (v25)
  {
    uint64_t v26 = (uint64_t *)(v35 + 56);
    do
    {
      unint64_t v27 = *(v26 - 3);
      uint64_t v28 = *(v26 - 2);
      unint64_t v29 = *(v26 - 1);
      uint64_t v30 = *v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v31 = (void *)MEMORY[0x22A688A50](v27, v28);
      objc_msgSend(a2, sel_addObject_, v31);

      uint64_t v32 = (void *)MEMORY[0x22A688A50](v29, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      objc_msgSend(a3, sel_addObject_, v32);

      v26 += 4;
      --v25;
    }
    while (v25);
  }

  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v38);
}

void thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed CFMutableArrayRef, @guaranteed CFMutableArrayRef) -> ()(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(uint64_t, id, id))(a1 + 32);
  swift_retain();
  id v9 = a3;
  id v8 = a4;
  v7(a2, v9, v8);
  swift_release();
}

void $defer #3 () in __REAssetBundle.writeWithCPlusPlus(to:with:)()
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  v9[0] = 0;
  unsigned int v4 = objc_msgSend(v0, sel_removeItemAtURL_error_, v2, v9);

  id v5 = v9[0];
  if (v4)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = v9[0];
    id v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

unint64_t *closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, unint64_t **a5@<X8>)
{
  unint64_t v6 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= *(void *)(a2 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v6 >= *(void *)(a3 + 16)) {
    goto LABEL_11;
  }
  if (*(uint64_t *)(a3 + 8 * v6 + 32) <= 1)
  {
    *a5 = 0;
  }
  else
  {
    RERealityFileAssetDescriptorGetFilename();
    uint64_t v8 = a4[3];
    uint64_t v9 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
    uint64_t result = (unint64_t *)RERealityFileCreateAssetDescriptorWithEntryNameAndTextureDownsampleHint();
    if (result)
    {
      *a5 = result;
    }
    else
    {
      _StringGuts.grow(_:)(56);
      v10._object = (void *)0x800000022835E790;
      v10._uint64_t countAndFlagsBits = 0xD000000000000036;
      String.append(_:)(v10);
      RERealityFileAssetDescriptorGetFilename();
      v11._uint64_t countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0xE000000000000000;
      *(unsigned char *)(v12 + 16) = 3;
      return (unint64_t *)swift_willThrow();
    }
  }
  return result;
}

uint64_t closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v41 = a1;
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays13OpaquePointerVG_AGs5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), (uint64_t)v39, a2);
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v12);
  unsigned __int8 v43 = a4;
  uint64_t v37 = v11;
  unint64_t v38 = a3;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
  __REAssetService.performOnEngineQueue<A>(with:_:)(&v43, (void (*)(uint64_t))partial apply for closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), (uint64_t)v36, v12, v14, v13, (uint64_t)&v44);
  if (v6)
  {
    uint64_t v15 = *(void *)(v11 + 16);
    if (!v15) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v16 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v16 += 8;
      RERelease();
      --v15;
    }
    while (v15);
LABEL_5:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!v44)
  {
    strcpy((char *)v42, "Invalid path ");
    HIWORD(v42[1]) = -4864;
    uint64_t v26 = (uint64_t *)(a1 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 20));
    uint64_t v27 = *v26;
    uint64_t v28 = (void *)v26[1];
    swift_bridgeObjectRetain();
    v29._uint64_t countAndFlagsBits = v27;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v42[0];
    uint64_t v31 = v42[1];
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)uint64_t v32 = v30;
    *(void *)(v32 + 8) = v31;
    *(unsigned char *)(v32 + 16) = 3;
    swift_willThrow();
    uint64_t v33 = *(void *)(v11 + 16);
    if (!v33) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v34 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v34 += 8;
      RERelease();
      --v33;
    }
    while (v33);
    goto LABEL_5;
  }
  uint64_t v18 = a6;
  swift_beginAccess();
  *(unsigned char *)(a5 + 16) = 1;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(a1, a6, type metadata accessor for __RKEntityAudioActionArguments);
  id v19 = (void *)REAssetHandleCopyAssetIdentifierString();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  uint64_t v23 = (uint64_t *)(v18 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 20));
  swift_bridgeObjectRelease();
  uint64_t *v23 = v20;
  v23[1] = v22;
  RERelease();
  uint64_t v24 = *(void *)(v11 + 16);
  if (!v24) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v24; ++i)
    RERelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  type metadata accessor for __RKEntityAudioActionArguments(0);
  String.utf8CString.getter();
  uint64_t v5 = REAssetManagerResolveAssetDescriptor();
  uint64_t result = swift_release();
  if (v5) {
    *a2 = v5;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t result = REAssetHandleGetOrCreateImmutableWithAssetDescriptors();
  *a2 = result;
  return result;
}

uint64_t Entity.remapAudioActions(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t v4 = v2;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    uint64_t v8 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v14);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = __RKEntityInteractionsComponent.decodedJSON()();
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v14);
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  swift_retain();
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit34__RKEntityInteractionSpecificationVG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f34F15ActionArgumentsVAGKcKFAA02__H24gH9VAIKXEfU_AF02__fptU0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v9, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v12 = v10;
  swift_bridgeObjectRelease();
  swift_release();
  if (!static __RKEntityInteractionsComponent.registration) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
  if (*(void *)(v12 + 16))
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v4 + 16), v13))
      && RECustomComponentGetObject())
    {
      return __RKEntityInteractionsComponent.specifications.setter(v12);
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = REEntityGetCustomComponent();
  if (result) {
    return REEntityRemoveComponentByClass();
  }
  return result;
}

uint64_t closure #1 in static __REAssetBundle.remapSceneAnchorsBeforeWrite(fileWriter:scene:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v95 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v89 = (char *)v84 - v8;
  uint64_t v93 = type metadata accessor for URLComponents();
  uint64_t v91 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v10 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v88 = (char *)v84 - v12;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  unint64_t v96 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  unint64_t v97 = (unint64_t)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)v84 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v84 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v84 - v24;
  uint64_t v26 = type metadata accessor for __REAnchoringType();
  uint64_t v92 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(a1, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
  uint64_t v90 = v26;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v95, 1, 1, v45);
      return _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
    }
    uint64_t v87 = v22;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
    uint64_t v31 = &v28[*(int *)(v30 + 48)];
    uint64_t v32 = v99;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
    v33(v25, v28, v100);
    uint64_t v34 = *(void (**)(unint64_t, char *, uint64_t))(v96 + 32);
    long long v35 = v31;
    unint64_t v36 = v96 + 32;
    v34(v97, v35, v98);
    uint64_t v37 = v101;
    uint64_t v38 = Data.init(contentsOf:options:)();
    if (v37)
    {
      uint64_t v40 = v100;
LABEL_23:
      (*(void (**)(unint64_t, uint64_t))(v96 + 8))(v97, v98);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v25, v40);
    }
    uint64_t v47 = v38;
    v84[0] = v34;
    v84[1] = v36;
    uint64_t v85 = (void (*)(uint64_t, char *, uint64_t))v33;
    uint64_t v101 = 0;
    unint64_t v48 = v39;
    uint64_t v49 = RERealityFileAssetWriteReportCreate();
    uint64_t v86 = v47;
    uint64_t v50 = v49;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    char v52 = RERealityFileWriterWriteDataEntry();

    swift_release();
    if ((v52 & 1) == 0)
    {
      id v74 = (id)RERealityFileAssetWriteReportGetError();
      if (v74)
      {
        id v75 = v74;
        type metadata accessor for CFErrorRef(0);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
        swift_allocError();
        *uint64_t v76 = v75;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(void *)uint64_t v81 = 0xD00000000000002CLL;
        *(void *)(v81 + 8) = 0x800000022835E700;
        *(unsigned char *)(v81 + 16) = 3;
      }
      uint64_t v32 = v99;
      uint64_t v40 = v100;
      swift_willThrow();
      RERelease();
      outlined consume of Data._Representation(v86, v48);
      goto LABEL_23;
    }
    unint64_t v96 = v48;
    uint64_t v94 = v50;
    uint64_t result = RERealityFileAssetWriteReportGetSerializationString();
    if (result)
    {
      long long v53 = v88;
      URLComponents.init()();
      String.init(cString:)();
      URLComponents.path.setter();
      long long v54 = v89;
      URLComponents.url.getter();
      uint64_t v56 = v99;
      uint64_t v55 = v100;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48))(v54, 1, v100);
      if (result != 1)
      {
        (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v93);
        uint64_t v57 = v87;
        uint64_t v58 = v85;
        v85((uint64_t)v87, v54, v55);
        RERelease();
        outlined consume of Data._Representation(v86, v96);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v55);
        uint64_t v59 = v95;
        uint64_t v60 = v95 + *(int *)(v30 + 48);
        v58(v95, v57, v55);
        ((void (*)(uint64_t, unint64_t, uint64_t))v84[0])(v60, v97, v98);
        uint64_t v61 = v90;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v59, 0, 1, v61);
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v59, 0, 1, v62);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v98 = (uint64_t)v6;
  uint64_t v40 = v100;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v41(v19, v28, v100);
  uint64_t v42 = v101;
  uint64_t v43 = Data.init(contentsOf:options:)();
  if (!v42)
  {
    unint64_t v63 = v43;
    uint64_t v101 = 0;
    unint64_t v64 = v44;
    uint64_t v65 = RERealityFileAssetWriteReportCreate();
    unint64_t v96 = v63;
    unint64_t v97 = v64;
    Class v66 = Data._bridgeToObjectiveC()().super.isa;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    LOBYTE(v64) = RERealityFileWriterWriteDataEntry();

    swift_release();
    if ((v64 & 1) == 0)
    {
      unint64_t v77 = v97;
      id v78 = (id)RERealityFileAssetWriteReportGetError();
      if (v78)
      {
        id v79 = v78;
        type metadata accessor for CFErrorRef(0);
        _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
        swift_allocError();
        *uint64_t v80 = v79;
      }
      else
      {
        lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
        swift_allocError();
        *(void *)uint64_t v82 = 0xD00000000000002CLL;
        *(void *)(v82 + 8) = 0x800000022835E700;
        *(unsigned char *)(v82 + 16) = 3;
      }
      uint64_t v32 = v99;
      uint64_t v40 = v100;
      uint64_t v83 = v96;
      swift_willThrow();
      RERelease();
      outlined consume of Data._Representation(v83, v77);
      uint64_t v25 = v19;
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v25, v40);
    }
    char v89 = (char *)v41;
    uint64_t v94 = v65;
    uint64_t result = RERealityFileAssetWriteReportGetSerializationString();
    if (result)
    {
      URLComponents.init()();
      String.init(cString:)();
      URLComponents.path.setter();
      uint64_t v67 = v98;
      URLComponents.url.getter();
      uint64_t v69 = v99;
      uint64_t v68 = v100;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v67, 1, v100);
      if (result != 1)
      {
        (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v93);
        uint64_t v70 = (void (*)(uint64_t, char *, uint64_t))v89;
        ((void (*)(char *, uint64_t, uint64_t))v89)(v16, v67, v68);
        RERelease();
        outlined consume of Data._Representation(v96, v97);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v68);
        uint64_t v71 = v95;
        v70(v95, v16, v68);
        uint64_t v72 = v90;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v71, 0, 1, v72);
        uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v71, 0, 1, v73);
      }
LABEL_31:
      __break(1u);
      return result;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v25 = v19;
  uint64_t v32 = v99;
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v25, v40);
}

uint64_t Entity.storageForAudioActions.getter()
{
  uint64_t v1 = v0;
  swift_retain_n();
  if (REEntityGetChildCount() < 1)
  {
LABEL_18:
    swift_release_n();
    uint64_t v11 = REEntityCreate();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v12 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_32;
      }
      uint64_t v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(v13 + 232))();
        uint64_t v14 = *(void *)(v6 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v14, 0);
        *(void *)(v6 + 16) = v11;
        MEMORY[0x22A68E750](v11, v6);
        swift_release();
LABEL_24:
        REEntitySetName();
        RENetworkMarkEntityMetadataDirty();
        specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v1, 0);
        return v6;
      }
      uint64_t v12 = makeEntity(for:)(v11);
    }
    uint64_t v6 = v12;
    goto LABEL_24;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_33;
    }
    uint64_t v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v5 = swift_dynamicCastClassUnconditional();
LABEL_7:
      uint64_t v6 = v5;
      goto LABEL_11;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      goto LABEL_31;
    }
    uint64_t v7 = specialized static Entity.entityInfoType(_:)();
    if (!v7)
    {
      uint64_t v5 = makeEntity(for:)(v4);
      goto LABEL_7;
    }
    uint64_t v6 = (*(uint64_t (**)(void))(v7 + 232))();
    uint64_t v8 = *(void *)(v6 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v8, 0);
    *(void *)(v6 + 16) = v4;
    MEMORY[0x22A68E750](v4, v6);
    swift_release();
LABEL_11:
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      goto LABEL_30;
    }
    REEntityGetName();
    if (String.init(cString:)() == 0xD000000000000016 && v9 == 0x800000022835E6E0)
    {
      swift_release_n();
      swift_bridgeObjectRelease();
      return v6;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_release_n();
      return v6;
    }
    ++v2;
    swift_release();
    if (v2 >= REEntityGetChildCount()) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v60 = a6;
  uint64_t v61 = a7;
  uint64_t v62 = a5;
  uint64_t v11 = type metadata accessor for __RKEntityAudioActionArguments(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)(a2 + 16);
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(a1, (uint64_t)v14, type metadata accessor for __RKEntityAudioActionArguments);
  uint64_t v16 = *(int *)(v12 + 28);
  unint64_t v63 = v14;
  uint64_t v17 = &v14[v16];
  uint64_t v18 = *(uint64_t **)v17;
  id v19 = (uint64_t *)*((void *)v17 + 1);
  uint64_t v59 = (uint64_t *)v17;
  swift_beginAccess();
  uint64_t v20 = *(void **)(a2 + 16);
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 16) = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    *uint64_t v15 = v20;
  }
  unint64_t v23 = v20[2];
  unint64_t v22 = v20[3];
  if (v23 >= v22 >> 1)
  {
    uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v20);
    *uint64_t v15 = v20;
  }
  long long v20[2] = v23 + 1;
  uint64_t v24 = &v20[2 * v23];
  v24[4] = v18;
  v24[5] = v19;
  swift_endAccess();
  uint64_t v25 = a3[3];
  uint64_t v26 = a3[4];
  uint64_t v27 = __swift_project_boxed_opaque_existential_1(a3, v25);
  char v28 = *a4;
  char v65 = *a4;
  MEMORY[0x270FA5388](v27);
  *(&v59 - 4) = a3;
  *(&v59 - 3) = v18;
  *(&v59 - 2) = v19;
  uint64_t v29 = type metadata accessor for __REAsset();
  uint64_t v30 = v64;
  __REAssetService.performOnEngineQueue<A>(with:_:)((unsigned __int8 *)&v65, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), (uint64_t)(&v59 - 6), v25, v29, v26, (uint64_t)&v68);
  swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_14;
  }
  uint64_t v31 = v68;
  uint64_t v32 = a3[3];
  uint64_t v33 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v32);
  __REAssetService.asManager.getter(v32, v33);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_22831E4E0;
  *(void *)(v34 + 32) = v31;
  unint64_t v66 = v34;
  specialized Array._endMutation()();
  unint64_t v35 = v66;
  swift_retain();
  specialized __REAssetManager.loadAssetsAndDependencies<A>(_:with:)(v35, v28);
  swift_bridgeObjectRelease();
  swift_release();
  REAssetWithMetadataCreate();
  RERealityFileAssetWriteReportCreate();
  if (!RERealityFileWriterWriteAsset())
  {
    id v43 = (id)RERealityFileAssetWriteReportGetError();
    if (v43)
    {
      id v44 = v43;
      type metadata accessor for CFErrorRef(0);
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      swift_allocError();
      *uint64_t v45 = v44;
    }
    else
    {
      unint64_t v66 = 0;
      unint64_t v67 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v66 = 0xD000000000000017;
      unint64_t v67 = 0x800000022835E690;
      char v52 = (void *)REAssetCopyDescription();
      Swift::String v53 = String.init(_:)(v52);
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._uint64_t countAndFlagsBits = 11815;
      v54._object = (void *)0xE200000000000000;
      String.append(_:)(v54);
      unint64_t v55 = v66;
      unint64_t v56 = v67;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(void *)uint64_t v57 = v55;
      *(void *)(v57 + 8) = v56;
      *(unsigned char *)(v57 + 16) = 3;
    }
    goto LABEL_13;
  }
  if (!RERealityFileAssetWriteReportGetSerializationString())
  {
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD00000000000002ELL;
    unint64_t v67 = 0x800000022835E6B0;
    uint64_t v46 = (void *)REAssetCopyDescription();
    Swift::String v47 = String.init(_:)(v46);
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 11815;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    unint64_t v49 = v66;
    unint64_t v50 = v67;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)uint64_t v51 = v49;
    *(void *)(v51 + 8) = v50;
    *(unsigned char *)(v51 + 16) = 3;
LABEL_13:
    swift_willThrow();
    RERelease();
    RERelease();
    swift_release();
LABEL_14:
    uint64_t v42 = (uint64_t)v63;
    return _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v42, type metadata accessor for __RKEntityAudioActionArguments);
  }
  unint64_t v36 = (unsigned char *)(v60 + 16);
  uint64_t v37 = String.init(cString:)();
  uint64_t v39 = v38;
  uint64_t v40 = v59;
  swift_bridgeObjectRelease();
  *uint64_t v40 = v37;
  v40[1] = v39;
  swift_beginAccess();
  *unint64_t v36 = 1;
  uint64_t v41 = (uint64_t)v63;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2((uint64_t)v63, v61, type metadata accessor for __RKEntityAudioActionArguments);
  RERelease();
  RERelease();
  swift_release();
  uint64_t v42 = v41;
  return _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v42, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  uint64_t result = swift_release();
  if (AssetHandle)
  {
    type metadata accessor for __REAsset();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = AssetHandle;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  uint64_t result = swift_release();
  if (AssetHandle)
  {
    REAudioPlayerComponentRegisterAsset();
    return RERelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __REAssetBundle.ExportOptions.PlatformOS@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __REAssetBundle.ExportOptions.PlatformOS@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[1];
  if ((unint64_t)(v3 - 2) >= 3)
  {
    if (v3)
    {
      if (v3 == 1)
      {
        uint64_t result = 0xE500000000000000;
        uint64_t v5 = 0x534F63616DLL;
      }
      else
      {
        uint64_t v5 = *v1;
        uint64_t result = swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t result = 0xE300000000000000;
      uint64_t v5 = 5459817;
    }
  }
  else
  {
    uint64_t result = 0xE800000000000000;
    uint64_t v5 = 0x534F6E6F69736976;
  }
  *a1 = v5;
  a1[1] = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  unint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1 - 2 >= 3 && v1 > 1) {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 - 2 >= 3 && v1 > 1) {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  unint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1 - 2 >= 3 && v1 > 1) {
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

void __REAssetBundle.ExportOptions.PlatformRequirement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int __REAssetBundle.ExportOptions.PlatformRequirement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.platform.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(v2, v3);
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.version.getter()
{
  return *(void *)(v0 + 16);
}

void __REAssetBundle.ExportOptions.DeploymentTarget.platformRequirement.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 28);
}

__n128 __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:)@<Q0>(__n128 *a1@<X0>, unsigned __int32 a2@<W1>, unsigned __int32 a3@<W2>, unsigned __int32 a4@<W3>, __n128 *a5@<X8>)
{
  __n128 result = *a1;
  *a5 = *a1;
  a5[1].n128_u32[0] = a2;
  a5[1].n128_u32[1] = a3;
  a5[1].n128_u32[2] = a4;
  a5[1].n128_u8[12] = 0;
  return result;
}

uint64_t __REAssetBundle.ExportOptions.DeploymentTarget.init(platform:version:platformRequirement:)@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = *a1;
  unint64_t v10 = a1[1];
  if (*a5 == 1)
  {
    if (v10 >= 5)
    {
      outlined consume of __REAssetBundle.ExportOptions.PlatformOS(result, v10);
      uint64_t result = 0;
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v10 = 5;
      goto LABEL_7;
    }
    uint64_t v11 = 0x100000000;
  }
  else
  {
    uint64_t v11 = 0;
  }
  unint64_t v12 = a2 | (unint64_t)(a3 << 32);
  uint64_t v13 = v11 | a4;
LABEL_7:
  *(void *)a6 = result;
  *(void *)(a6 + 8) = v10;
  *(void *)(a6 + 16) = v12;
  *(_DWORD *)(a6 + 24) = v13;
  *(unsigned char *)(a6 + 28) = BYTE4(v13);
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformOS and conformance __REAssetBundle.ExportOptions.PlatformOS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.ExportOptions.PlatformRequirement and conformance __REAssetBundle.ExportOptions.PlatformRequirement);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformOS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.PlatformOS()
{
  return &type metadata for __REAssetBundle.ExportOptions.PlatformOS;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.PlatformRequirement()
{
  return &type metadata for __REAssetBundle.ExportOptions.PlatformRequirement;
}

unint64_t destroy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= 5)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >= 5uLL)
  {
    if (v4 >= 5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1);
    goto LABEL_6;
  }
  if (v4 < 5)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) >= 5uLL)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= 5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 29)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 5;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 2147483643;
    if (a3 > 0x7FFFFFFA) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFA) {
      *(unsigned char *)(result + 29) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.DeploymentTarget()
{
  return &type metadata for __REAssetBundle.ExportOptions.DeploymentTarget;
}

unint64_t lazy protocol witness table accessor for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)()
{
  unint64_t result = lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:);
  if (!lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:);
  if (!lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:) and conformance LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:));
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(unint64_t a1, unint64_t a2, char a3, void *a4)
{
  unint64_t v8 = v4;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_50;
    }
  }
  unint64_t v51 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x22A689930](0, a1);
    if (!(a2 >> 62)) {
      goto LABEL_6;
    }
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      specialized _NativeDictionary.copy()();
      if ((v7 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    swift_retain();
    if (!(a2 >> 62))
    {
LABEL_6:
      uint64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14) {
        goto LABEL_7;
      }
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_23;
  }
LABEL_7:
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  unint64_t v50 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = MEMORY[0x22A689930](0, a2);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 32);
    swift_retain();
  }
  uint64_t v15 = (void *)*a4;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  uint64_t v17 = v15[2];
  BOOL v18 = (v16 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  char v7 = v16;
  if (v15[3] >= v19)
  {
    if (a3)
    {
      if ((v16 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == (v21 & 1))
  {
    unint64_t v8 = v20;
    if ((v7 & 1) == 0)
    {
LABEL_26:
      uint64_t v24 = (void *)*a4;
      *(void *)(*a4 + 8 * (v8 >> 6) + 64) |= 1 << v8;
      uint64_t v25 = 8 * v8;
      *(void *)(v24[6] + v25) = v5;
      *(void *)(v24[7] + v25) = v6;
      uint64_t v26 = v24[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_53;
      }
      _OWORD v24[2] = v28;
      if (v47 != 1)
      {
        if (v51)
        {
          uint64_t v29 = MEMORY[0x22A689930](1, a1);
        }
        else
        {
          if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          uint64_t v29 = *(void *)(a1 + 40);
          swift_retain();
        }
        uint64_t v49 = v48 - 1;
        if (v49)
        {
          uint64_t v30 = 0;
          while (1)
          {
            if (v50)
            {
              uint64_t v31 = MEMORY[0x22A689930](v30 + 1, a2);
            }
            else
            {
              uint64_t v31 = *(void *)(a2 + 40 + 8 * v30);
              swift_retain();
            }
            uint64_t v32 = (void *)*a4;
            unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
            uint64_t v35 = v32[2];
            BOOL v36 = (v34 & 1) == 0;
            BOOL v27 = __OFADD__(v35, v36);
            uint64_t v37 = v35 + v36;
            if (v27) {
              goto LABEL_52;
            }
            char v38 = v34;
            if (v32[3] < v37)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
              unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
              if ((v38 & 1) != (v39 & 1)) {
                goto LABEL_56;
              }
            }
            if (v38) {
              goto LABEL_17;
            }
            uint64_t v40 = (void *)*a4;
            *(void *)(*a4 + 8 * (v33 >> 6) + 64) |= 1 << v33;
            uint64_t v41 = 8 * v33;
            *(void *)(v40[6] + v41) = v29;
            *(void *)(v40[7] + v41) = v31;
            uint64_t v42 = v40[2];
            BOOL v27 = __OFADD__(v42, 1);
            uint64_t v43 = v42 + 1;
            if (v27) {
              goto LABEL_53;
            }
            _OWORD v40[2] = v43;
            if (v47 - 2 == v30) {
              goto LABEL_50;
            }
            unint64_t v44 = v30 + 2;
            if (v51)
            {
              uint64_t v29 = MEMORY[0x22A689930](v44, a1);
            }
            else
            {
              if (v44 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_55;
              }
              uint64_t v29 = *(void *)(a1 + 48 + 8 * v30);
              swift_retain();
            }
            if (v30 == 0x7FFFFFFFFFFFFFFDLL) {
              goto LABEL_54;
            }
            if (v49 == ++v30) {
              goto LABEL_23;
            }
          }
        }
        goto LABEL_23;
      }
LABEL_50:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
LABEL_17:
    unint64_t v22 = (void *)swift_allocError();
    swift_willThrow();
    id v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_57;
  }
LABEL_56:
  type metadata accessor for __REAsset();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_57:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000022834F0F0;
  v45._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  type metadata accessor for __REAsset();
  _print_unlocked<A, B>(_:_:)();
  v46._uint64_t countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v40 = a2;
  uint64_t v38 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v38);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (unsigned __int8 *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v36 - v11;
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (!v13) {
    return v14;
  }
  uint64_t v47 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  unint64_t v44 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = a1 + v44;
  uint64_t v43 = *(void *)(v7 + 72);
  Swift::String v46 = v12;
  v36[1] = v6;
  uint64_t v37 = v5;
  v36[0] = v9;
  while (1)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v15, (uint64_t)v9, type metadata accessor for __RKEntityActionSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6) {
      break;
    }
    if (EnumCaseMultiPayload)
    {
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v15, (uint64_t)v12, type metadata accessor for __RKEntityActionSpecification);
      _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v9, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v9, (uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v17 = &v5[*(int *)(v38 + 20)];
      uint64_t v19 = *(void *)v17;
      unint64_t v18 = *((void *)v17 + 1);
      uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
      if ((v18 & 0x2000000000000000) != 0) {
        uint64_t v21 = HIBYTE(v18) & 0xF;
      }
      else {
        uint64_t v21 = v20;
      }
      if (v21)
      {
        uint64_t v14 = v39;
        uint64_t v22 = v45;
        v40(v5);
        _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
        uint64_t v45 = v22;
        if (v22) {
          goto LABEL_22;
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v5, type metadata accessor for __RKEntityAudioActionArguments);
        _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v15, (uint64_t)v12, type metadata accessor for __RKEntityActionSpecification);
      }
    }
LABEL_15:
    uint64_t v14 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
      uint64_t v14 = v47;
    }
    unint64_t v33 = *(void *)(v14 + 16);
    unint64_t v32 = *(void *)(v14 + 24);
    if (v33 >= v32 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      uint64_t v14 = v47;
    }
    *(void *)(v14 + 16) = v33 + 1;
    uint64_t v34 = v43;
    unint64_t v12 = v46;
    _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v46, v14 + v44 + v33 * v43, type metadata accessor for __RKEntityActionSpecification);
    v15 += v34;
    if (!--v13) {
      return v14;
    }
  }
  int v42 = *v9;
  uint64_t v14 = *((void *)v9 + 1);
  unsigned __int8 v23 = v9[16];
  uint64_t v41 = *((void *)v9 + 3);
  uint64_t v24 = v9;
  unsigned __int8 v25 = v9[32];
  unsigned __int8 v26 = v24[33];
  uint64_t v27 = v39;
  swift_retain();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = v45;
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v28, v40, v27);
  swift_bridgeObjectRelease();
  uint64_t v45 = v29;
  if (!v29)
  {
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v31 = v46;
    *Swift::String v46 = v42;
    *((void *)v31 + 1) = v30;
    v31[16] = v23;
    *((void *)v31 + 3) = v41;
    v31[32] = v25;
    v31[33] = v26;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    uint64_t v5 = v37;
    uint64_t v9 = (unsigned __int8 *)v36[0];
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_release();
LABEL_22:
  swift_release();
  return v14;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit34__RKEntityInteractionSpecificationVG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f34F15ActionArgumentsVAGKcKFAA02__H24gH9VAIKXEfU_AF02__fptU0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v44 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (unsigned __int8 *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v49 = (char *)&v39 - v11;
  uint64_t v52 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v12 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (!v15) {
    return v16;
  }
  uint64_t v53 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
  unint64_t v48 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = a1 + v48;
  uint64_t v47 = *(void *)(v12 + 72);
  uint64_t v41 = v7;
  int v42 = v6;
  uint64_t v40 = v9;
  uint64_t v43 = v14;
  while (1)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v17, (uint64_t)v14, type metadata accessor for __RKEntityInteractionSpecification);
    uint64_t v18 = v17 + *(int *)(v52 + 20);
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v18, (uint64_t)v9, type metadata accessor for __RKEntityActionSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    int64_t v51 = v15;
    if (EnumCaseMultiPayload == 6) {
      break;
    }
    if (EnumCaseMultiPayload)
    {
      uint64_t v27 = v49;
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v18, (uint64_t)v49, type metadata accessor for __RKEntityActionSpecification);
      _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v9, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v9, (uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v20 = &v6[*(int *)(v44 + 20)];
      uint64_t v22 = *(void *)v20;
      unint64_t v21 = *((void *)v20 + 1);
      uint64_t v23 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0x2000000000000000) != 0) {
        uint64_t v24 = HIBYTE(v21) & 0xF;
      }
      else {
        uint64_t v24 = v23;
      }
      if (v24)
      {
        unsigned __int8 v26 = v49;
        uint64_t v25 = v50;
        uint64_t v16 = a3;
        v45(v6);
        _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
        uint64_t v50 = v25;
        if (v25) {
          goto LABEL_22;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v27 = v26;
      }
      else
      {
        _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v6, type metadata accessor for __RKEntityAudioActionArguments);
        uint64_t v27 = v49;
        _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v18, (uint64_t)v49, type metadata accessor for __RKEntityActionSpecification);
      }
    }
LABEL_15:
    outlined assign with take of __RKEntityActionSpecification((uint64_t)v27, (uint64_t)&v14[*(int *)(v52 + 20)]);
    uint64_t v16 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
      uint64_t v16 = v53;
    }
    unint64_t v36 = *(void *)(v16 + 16);
    unint64_t v35 = *(void *)(v16 + 24);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      uint64_t v16 = v53;
    }
    *(void *)(v16 + 16) = v36 + 1;
    uint64_t v37 = v47;
    _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v14, v16 + v48 + v36 * v47, type metadata accessor for __RKEntityInteractionSpecification);
    v17 += v37;
    int64_t v15 = v51 - 1;
    if (v51 == 1) {
      return v16;
    }
  }
  int v46 = *v9;
  uint64_t v16 = *((void *)v9 + 1);
  unsigned __int8 v28 = v9[16];
  uint64_t v29 = *((void *)v9 + 3);
  unsigned __int8 v30 = v9[32];
  unsigned __int8 v31 = v9[33];
  swift_retain();
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = v50;
  uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v32, v45, a3);
  swift_bridgeObjectRelease();
  uint64_t v50 = v33;
  if (!v33)
  {
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = v49;
    *uint64_t v49 = v46;
    *((void *)v27 + 1) = v34;
    v27[16] = v28;
    *((void *)v27 + 3) = v29;
    unsigned char v27[32] = v30;
    v27[33] = v31;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    uint64_t v6 = v42;
    uint64_t v14 = v43;
    uint64_t v9 = v40;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v14 = v43;
LABEL_22:
  _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v14, type metadata accessor for __RKEntityInteractionSpecification);
  swift_release();
  return v16;
}

void specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v3 = CFErrorRef._domain.getter();
    if (!*MEMORY[0x263F376B8])
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v4 = v2;
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) == 0) {
        goto LABEL_34;
      }
    }
    if (CFErrorRef._code.getter() == 8)
    {
      if (!CFErrorRef._userInfo.getter())
      {
LABEL_23:
        long long v22 = 0u;
        long long v23 = 0u;
        goto LABEL_24;
      }
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (v8)
      {
        if (*MEMORY[0x263F376C8])
        {
          uint64_t v9 = (void *)v8;
          id v10 = (id)*MEMORY[0x263F376C8];
          id v11 = objc_msgSend(v9, sel___swift_objectForKeyedSubscript_, v10);

          swift_unknownObjectRelease();
          if (v11)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v20 = 0u;
            long long v21 = 0u;
          }
          outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);

          if (*((void *)&v23 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v16 = (int)v20;

              lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
              swift_allocError();
              *(void *)uint64_t v17 = v16;
              *(void *)(v17 + 8) = 0;
              *(unsigned char *)(v17 + 16) = 0;
LABEL_33:
              swift_willThrow();
              goto LABEL_34;
            }
            goto LABEL_34;
          }
          goto LABEL_24;
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (CFErrorRef._code.getter() != 21) {
        goto LABEL_34;
      }
      if (!CFErrorRef._userInfo.getter()) {
        goto LABEL_23;
      }
      self;
      uint64_t v12 = swift_dynamicCastObjCClass();
      if (v12)
      {
        if (*MEMORY[0x263F376C8])
        {
          uint64_t v13 = (void *)v12;
          id v14 = (id)*MEMORY[0x263F376C8];
          id v15 = objc_msgSend(v13, sel___swift_objectForKeyedSubscript_, v14);

          swift_unknownObjectRelease();
          if (v15)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v20 = 0u;
            long long v21 = 0u;
          }
          outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);

          if (*((void *)&v23 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v18 = (int)v20;

              lazy protocol witness table accessor for type LocalizedRealityFileError and conformance LocalizedRealityFileError();
              swift_allocError();
              *uint64_t v19 = v18;
              goto LABEL_33;
            }
LABEL_34:

            return;
          }
LABEL_24:

          outlined destroy of BodyTrackingComponent?((uint64_t)&v22, (uint64_t *)&demangling cache variable for type metadata for Any?);
          return;
        }
LABEL_38:
        __break(1u);
        return;
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
}

uint64_t sub_22824F7E8()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_22824F7F8()
{
  if (*(void *)(v0 + 72) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 136)) {
    swift_release();
  }
  if (*(void *)(v0 + 152)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 256, 7);
}

uint64_t partial apply for closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1)
{
  return closure #1 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, *(void *)(v1 + 16), (long long *)(v1 + 24), v1 + 184, *(void *)(v1 + 248));
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t sub_22824F8D4()
{
  if (*(void *)(v0 + 64) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 128)) {
    swift_release();
  }
  if (*(void *)(v0 + 144)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 169, 7);
}

void partial apply for closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(uint64_t a1, void *a2, void *a3)
{
  closure #3 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, a2, a3, (void *)(v3 + 16));
}

uint64_t sub_22824F964()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *partial apply for closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(void *a1, void *a2)
{
  return closure #2 in __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t specialized static __REAssetBundle.findTextureEntryDescriptors(in:)()
{
  uint64_t result = RERealityFileGetAssetDescriptorCount();
  if (result < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v1 = result;
  if (result)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    while (v1 != v2)
    {
      uint64_t result = RERealityFileGetAssetDescriptorAtIndex();
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v4 = result;
      RERealityFileAssetDescriptorGetFilename();
      String.init(cString:)();
      v5._uint64_t countAndFlagsBits = 0xD000000000000010;
      v5._object = (void *)0x800000022835E7D0;
      Swift::Bool v6 = String.hasSuffix(_:)(v5);
      uint64_t result = swift_bridgeObjectRelease();
      if (v6)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
          uint64_t v3 = (void *)result;
        }
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v3);
          uint64_t v3 = (void *)result;
        }
        void v3[2] = v8 + 1;
        v3[v8 + 4] = v4;
      }
      if (v1 == ++v2) {
        return (uint64_t)v3;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  return MEMORY[0x263F8EE78];
}

void *specialized static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void (*v17)(void *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void v33[6];
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];

  v38[1] = *MEMORY[0x263EF8340];
  unint64_t v36 = a2;
  uint64_t v6 = specialized static __REAssetBundle.findTextureEntryDescriptors(in:)();
  unint64_t v7 = (void *)MEMORY[0x263F8EE78];
  uint64_t v37 = MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    uint64_t v34 = a4;
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = v6;
      uint64_t v12 = (void *)MEMORY[0x22A695A20](v9);
      v38[0] = 0;
      uint64_t v14 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v14);
      (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
      if (!(id)RERealityFileCopyTextureDescriptor()) {
        break;
      }
      MEMORY[0x22A688E10]();
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v10;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v6 = v11;
      if (v8 == v10)
      {
        swift_bridgeObjectRelease();
        unint64_t v7 = (void *)v37;
        a4 = v34;
        goto LABEL_9;
      }
    }
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)unsigned __int8 v28 = 0xD00000000000003ELL;
    *(void *)(v28 + 8) = 0x800000022835E750;
    *(unsigned char *)(v28 + 16) = 3;
    swift_willThrow();
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
LABEL_9:
  uint64_t v15 = a4[3];
  uint64_t v16 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v15);
  uint64_t v17 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v16 + 8);
  uint64_t v18 = swift_bridgeObjectRetain();
  v17(v38, v18, v15, v16);
  uint64_t v19 = v35;
  swift_bridgeObjectRelease();
  if (v35)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    return a1;
  }
  long long v20 = v38[0];
  if (v38[0])
  {
    long long v21 = *(void *)(v38[0] + 16);
    if (v21)
    {
      uint64_t v34 = v7;
      unint64_t v35 = 0;
      long long v22 = v6;
      v38[0] = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      long long v23 = 0;
      uint64_t v24 = v38[0];
      uint64_t v25 = *(void *)(v38[0] + 16);
      do
      {
        unsigned __int8 v26 = *(void *)(v20 + 8 * v23 + 32);
        v38[0] = v24;
        uint64_t v27 = *(void *)(v24 + 24);
        if (v25 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v25 + 1, 1);
          uint64_t v24 = v38[0];
        }
        ++v23;
        *(void *)(v24 + 16) = v25 + 1;
        *(void *)(v24 + 8 * v25++ + 32) = v26;
      }
      while (v21 != v23);
      uint64_t v29 = swift_bridgeObjectRelease_n();
      uint64_t v6 = v22;
      uint64_t v19 = v35;
    }
    else
    {
      uint64_t v29 = swift_bridgeObjectRelease();
      uint64_t v24 = MEMORY[0x263F8EE78];
    }
    MEMORY[0x270FA5388](v29);
    v33[2] = v6;
    v33[3] = v24;
    v33[4] = v36;
    v33[5] = a1;
    unsigned __int8 v31 = specialized Sequence.compactMap<A>(_:)((uint64_t)partial apply for closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:), (uint64_t)v33, 0, v30);
    if (!v19)
    {
      a1 = (void *)v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t specialized Scene.init(_:assetService:)(uint64_t a1, void *a2)
{
  uint64_t v3 = RESceneCreate();
  type metadata accessor for Scene();
  swift_allocObject();
  uint64_t v4 = Scene.init(coreScene:)(v3);
  RERelease();
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  if ((RESceneLoadFromAsset() & 1) == 0)
  {
    unint64_t v7 = (void *)REAssetHandleCopyAssetIdentifierString();
    Swift::String v8 = String.init(_:)(v7);
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(Swift::String *)uint64_t v9 = v8;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0;
    *(unsigned char *)(v9 + 32) = 0;
    swift_willThrow();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  return v4;
}

uint64_t specialized static __REAssetBundle.registerAnchorReferenceRawData(refData:assetService:fileNamesTuple:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  if (one-time initialization token for instances != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v13 = specialized AssetServiceScopedRegistry.instance(for:)(a3);
  swift_release();
  uint64_t v14 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  uint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v17, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  long long v38 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = a4;
  v18._object = a5;
  String.append(_:)(v18);
  swift_release();
  long long v19 = v38;
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  uint64_t v20 = v39;
  uint64_t v21 = v40;
  long long v22 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v22, v14, v20, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  *(void *)&long long v38 = 0x2F737465737361;
  *((void *)&v38 + 1) = 0xE700000000000000;
  v23._uint64_t countAndFlagsBits = a6;
  v23._object = a7;
  String.append(_:)(v23);
  swift_release();
  Swift::String v24 = (Swift::String)v38;
  outlined init with copy of __REAssetService((uint64_t)(v13 + 2), (uint64_t)&v38);
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = __swift_project_boxed_opaque_existential_1(&v38, v39);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v27, v14, v25, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  v28._uint64_t countAndFlagsBits = 47;
  v28._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v28)
    || (uint64_t v29 = 47,
        unsigned __int8 v30 = (void *)0xE100000000000000,
        v31._uint64_t countAndFlagsBits = 47,
        v31._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v31)))
  {
    uint64_t v29 = 0;
    unsigned __int8 v30 = (void *)0xE000000000000000;
  }
  long long v38 = v19;
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = v29;
  v32._object = v30;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  long long v33 = v38;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = v13[9];
  v13[9] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v33, *((uint64_t *)&v33 + 1), isUniquelyReferenced_nonNull_native);
  v13[9] = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static __REAssetBundle.registerAnchoringComponentARReferences(scene:realityFilename:assetDescriptor:assetService:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v84 = a4;
  uint64_t v82 = a3;
  uint64_t v81 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v90 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  char v89 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for Data.Deallocator();
  uint64_t v10 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for __REAnchoring();
  MEMORY[0x270FA5388](v96);
  uint64_t v93 = (const char **)((char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v97 = (uint64_t)&v75 - v18;
  uint64_t v100 = type metadata accessor for __REAnchoringType();
  uint64_t v19 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v95 = (uint64_t)&v75 - v23;
  swift_beginAccess();
  if (static __REAnchoring.registration)
  {
    uint64_t v99 = v16;
    uint64_t v83 = v12;
    unint64_t v77 = a5;
    uint64_t result = RESceneGetComponentsOfCustomType();
    if (v25 < 0)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v25;
      if (v25)
      {
        uint64_t v27 = result;
        unint64_t v103 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
        uint64_t v94 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
        uint64_t v80 = (void (**)(char *, void, uint64_t))(v10 + 104);
        unsigned int v79 = *MEMORY[0x263F06F00];
        id v78 = (void (**)(char *, uint64_t))(v10 + 8);
        uint64_t v88 = (void (**)(char *, char *, uint64_t))(v8 + 32);
        uint64_t v85 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        uint64_t v86 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        uint64_t v76 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v29 = v92;
        Swift::String v28 = v93;
        unsigned __int8 v30 = v98;
        uint64_t v87 = v21;
        while (1)
        {
          if (!v26)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object)
          {
            lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
            swift_allocError();
            *(void *)uint64_t v69 = 0;
            *(void *)(v69 + 8) = 0;
            *(unsigned char *)(v69 + 16) = 2;
            return swift_willThrow();
          }
          uint64_t v34 = Object;
          uint64_t v35 = (uint64_t)v99;
          outlined init with copy of (Int, URL)(Object + *(int *)(v96 + 20), (uint64_t)v99, &demangling cache variable for type metadata for __REAnchoringType?);
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v34, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
          unint64_t v36 = *v103;
          uint64_t v37 = v100;
          if ((*v103)(v35, 1, v100) == 1)
          {
            long long v38 = *v28;
            if (v38)
            {
              uint64_t v98 = v30;
              uint64_t v39 = strlen(v38);
              uint64_t v40 = v83;
              (*v80)(v83, v79, v91);
              Data.Deallocator._deallocator.getter();
              uint64_t v41 = v97;
              if (v39)
              {
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_retain();
                uint64_t v42 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                uint64_t v39 = specialized Data._Representation.init(_:count:)(v42, v39);
                unint64_t v44 = v43;
                swift_release();
              }
              else
              {
                int v46 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
                v46(v38, 0);
                swift_release();
                swift_release();
                unint64_t v44 = 0xC000000000000000;
              }
              (*v78)(v40, v91);
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              _sSo10CFErrorRefaABs5Error10FoundationWlTm_2(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (void (*)(uint64_t))type metadata accessor for __REAnchoringType);
              uint64_t v47 = v100;
              unint64_t v48 = v98;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              unsigned __int8 v30 = v48;
              if (v48)
              {
                swift_release();
                outlined consume of Data._Representation(v39, v44);

                (*v94)(v41, 1, 1, v47);
                unsigned __int8 v30 = 0;
              }
              else
              {
                (*v94)(v41, 0, 1, v47);
                swift_release();
                outlined consume of Data._Representation(v39, v44);
              }
              uint64_t v29 = v92;
              uint64_t v37 = v47;
              uint64_t v21 = v87;
            }
            else
            {
              uint64_t v41 = v97;
              (*v94)(v97, 1, 1, v37);
            }
            Swift::String v28 = v93;
            _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v93, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
            outlined destroy of BodyTrackingComponent?((uint64_t)v99, &demangling cache variable for type metadata for __REAnchoringType?);
          }
          else
          {
            _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for __REAnchoring);
            uint64_t v45 = v35;
            uint64_t v41 = v97;
            _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(v45, v97, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
            (*v94)(v41, 0, 1, v37);
          }
          if (v36(v41, 1, v37) == 1) {
            break;
          }
          uint64_t v49 = v95;
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(v41, v95, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v49, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 3)
          {
            int64_t v51 = v90;
            (*v88)(v90, v21, v29);
            (*v86)(v51, 0, 1, v29);
          }
          else
          {
            int64_t v51 = v90;
            if (EnumCaseMultiPayload == 1)
            {
              uint64_t v52 = &v21[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                                + 48)];
              (*v88)(v51, v21, v29);
              (*v86)(v51, 0, 1, v29);
              uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
              (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
            }
            else
            {
              (*v86)(v90, 1, 1, v29);
              _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
            }
          }
          if ((*v85)(v51, 1, v29) == 1)
          {
            _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v95, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
            uint64_t v31 = (uint64_t)v51;
            Swift::String v32 = &demangling cache variable for type metadata for URL?;
            goto LABEL_6;
          }
          uint64_t v98 = v30;
          (*v88)(v89, v51, v29);
          uint64_t v54 = URL.lastPathComponent.getter();
          unint64_t v56 = v55;
          uint64_t v57 = v77;
          uint64_t v59 = v77[3];
          uint64_t v58 = v77[4];
          __swift_project_boxed_opaque_existential_1(v77, v59);
          (*(void (**)(uint64_t, uint64_t))(v58 + 32))(v59, v58);
          String.utf8CString.getter();
          uint64_t v60 = REAssetManagerResolveAssetDescriptor();
          uint64_t result = swift_release();
          if (!v60) {
            goto LABEL_41;
          }
          uint64_t v62 = v57[3];
          uint64_t v61 = v57[4];
          __swift_project_boxed_opaque_existential_1(v57, v62);
          (*(void (**)(uint64_t, uint64_t))(v61 + 32))(v62, v61);
          uint64_t RawDataForAssetDescriptor = REAssetManagerLoadRawDataForAssetDescriptor();
          if (!RawDataForAssetDescriptor)
          {
            unint64_t v101 = 0;
            unint64_t v102 = 0xE000000000000000;
            _StringGuts.grow(_:)(33);
            swift_bridgeObjectRelease();
            unint64_t v101 = 0xD00000000000001ELL;
            unint64_t v102 = 0x800000022835E980;
            v70._uint64_t countAndFlagsBits = v54;
            v70._object = v56;
            String.append(_:)(v70);
            swift_bridgeObjectRelease();
            v71._uint64_t countAndFlagsBits = 46;
            v71._object = (void *)0xE100000000000000;
            String.append(_:)(v71);
            unint64_t v72 = v101;
            unint64_t v73 = v102;
            lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
            swift_allocError();
            *(void *)uint64_t v74 = v72;
            *(void *)(v74 + 8) = v73;
            *(unsigned char *)(v74 + 16) = 3;
            swift_willThrow();
            RERelease();
            (*v76)(v89, v92);
            return _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v95, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          }
          uint64_t v64 = (void *)RawDataForAssetDescriptor;
          uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;

          specialized static __REAssetBundle.registerAnchorReferenceRawData(refData:assetService:fileNamesTuple:)(v65, v67, v57, v81, v82, v54, v56);
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v65, v67);
          RERelease();
          uint64_t v29 = v92;
          (*v76)(v89, v92);
          uint64_t result = _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v95, (uint64_t (*)(void))type metadata accessor for __REAnchoringType);
          unsigned __int8 v30 = v98;
          Swift::String v28 = v93;
          uint64_t v21 = v87;
LABEL_7:
          v27 += 8;
          if (!--v26) {
            return result;
          }
        }
        uint64_t v31 = v41;
        Swift::String v32 = &demangling cache variable for type metadata for __REAnchoringType?;
LABEL_6:
        uint64_t result = outlined destroy of BodyTrackingComponent?(v31, v32);
        goto LABEL_7;
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v68 = xmmword_228346B20;
    *(unsigned char *)(v68 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v5 = v4;
  uint64_t v86 = a3;
  uint64_t v80 = type metadata accessor for Data.Deallocator();
  uint64_t v8 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v95);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v96 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v102 = (char *)&v72 - v16;
  uint64_t v104 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v85 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v97 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v91 = *a4;
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v70 = xmmword_228336E80;
    *(unsigned char *)(v70 + 16) = 0;
    swift_willThrow();
    return v71 & 1;
  }
  unint64_t v18 = closure #1 in Scene.entitiesWithInteractions()();
  unint64_t v19 = v18;
  if (v18 >> 62)
  {
LABEL_68:
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_4;
    }
LABEL_69:
    int v77 = 0;
LABEL_70:
    swift_bridgeObjectRelease();
    char v71 = v77;
    return v71 & 1;
  }
  uint64_t result = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!result) {
    goto LABEL_69;
  }
LABEL_4:
  int v77 = 0;
  unint64_t v21 = 0;
  unint64_t v83 = v19 & 0xC000000000000001;
  uint64_t v79 = v19 & 0xFFFFFFFFFFFFFF8;
  unint64_t v78 = v19 + 32;
  unsigned int v75 = *MEMORY[0x263F06F00];
  uint64_t v74 = (void (**)(char *, void, uint64_t))(v8 + 104);
  unint64_t v73 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v90 = a2;
  uint64_t v76 = v10;
  unint64_t v82 = v19;
  uint64_t v81 = result;
  uint64_t v93 = v12;
  uint64_t v92 = v13;
  while (1)
  {
    if (v83)
    {
      uint64_t v22 = MEMORY[0x22A689930](v21, v19);
      BOOL v23 = __OFADD__(v21, 1);
      unint64_t v24 = v21 + 1;
      if (v23) {
        goto LABEL_67;
      }
    }
    else
    {
      if (v21 >= *(void *)(v79 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v22 = *(void *)(v78 + 8 * v21);
      swift_retain();
      BOOL v23 = __OFADD__(v21, 1);
      unint64_t v24 = v21 + 1;
      if (v23)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    unint64_t v103 = v5;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 0;
    outlined init with copy of __REAssetService(v86, (uint64_t)&v107);
    outlined init with copy of __REAssetService((uint64_t)&v107, (uint64_t)&v106);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a2;
    outlined init with take of BindableDataInternal(&v107, v26 + 24);
    *(unsigned char *)(v26 + 64) = v91;
    uint64_t v98 = v26;
    *(void *)(v26 + 72) = v25;
    uint64_t v89 = v22;
    unint64_t v88 = v24;
    uint64_t v94 = v25;
    uint64_t v87 = v25 + 16;
    if (!static __RKEntityInteractionsComponent.registration)
    {
      swift_bridgeObjectRetain_n();
LABEL_17:
      swift_retain_n();
      uint64_t v31 = MEMORY[0x263F8EE78];
      uint64_t v29 = (uint64_t)v97;
      unsigned __int8 v30 = (unsigned __int8 *)v96;
      int64_t v32 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v32) {
        break;
      }
      goto LABEL_47;
    }
    swift_bridgeObjectRetain_n();
    if (!REEntityGetCustomComponent()) {
      goto LABEL_17;
    }
    uint64_t Object = RECustomComponentGetObject();
    if (!Object) {
      goto LABEL_17;
    }
    uint64_t v28 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)&v105);
    uint64_t v29 = (uint64_t)v97;
    unsigned __int8 v30 = (unsigned __int8 *)v96;
    if (v28)
    {
      swift_retain_n();
      uint64_t v31 = v28;
      goto LABEL_46;
    }
    uint64_t v59 = v105;
    if (!v105)
    {
      swift_retain_n();
LABEL_44:
      uint64_t v31 = MEMORY[0x263F8EE78];
      goto LABEL_46;
    }
    size_t v60 = strlen(v105);
    uint64_t v61 = v76;
    (*v74)(v76, v75, v80);
    uint64_t v62 = Data.Deallocator._deallocator.getter();
    uint64_t v100 = v63;
    if (v60)
    {
      uint64_t v101 = v62;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v64 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v101 = specialized Data._Representation.init(_:count:)(v64, v60);
      unint64_t v66 = v65;
      swift_retain_n();
      uint64_t v61 = v76;
    }
    else
    {
      unint64_t v67 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
      v67(v59, 0);
      swift_retain_n();
      swift_release();
      uint64_t v101 = 0;
      unint64_t v66 = 0xC000000000000000;
    }
    swift_release();
    (*v73)(v61, v80);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
    uint64_t v68 = v103;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v68)
    {
      swift_release();
      outlined consume of Data._Representation(v101, v66);

      unint64_t v103 = 0;
      goto LABEL_44;
    }
    unint64_t v103 = 0;
    swift_release();
    outlined consume of Data._Representation(v101, v66);
    uint64_t v31 = v108;
LABEL_46:
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v105);
    int64_t v32 = *(void *)(v31 + 16);
    if (v32) {
      break;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    unint64_t v55 = (const char *)MEMORY[0x263F8EE78];
LABEL_48:
    uint64_t v5 = v103;
    a2 = v90;
    unint64_t v19 = v82;
    unint64_t v21 = v88;
    if (!static __RKEntityInteractionsComponent.registration) {
      goto LABEL_58;
    }
    uint64_t v69 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
    if (!*((void *)v55 + 2))
    {
      swift_bridgeObjectRelease();
      if (REEntityGetCustomComponent()) {
        REEntityRemoveComponentByClass();
      }
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_59;
    }
    if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v89 + 16), v69))
      && RECustomComponentGetObject())
    {
      __RKEntityInteractionsComponent.specifications.setter((uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
LABEL_58:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
LABEL_59:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
    uint64_t v8 = v94;
    swift_release();
    swift_beginAccess();
    uint64_t v10 = (char *)*(unsigned __int8 *)(v8 + 16);
    swift_release();
    uint64_t result = swift_release();
    if (v10) {
      int v77 = 1;
    }
    if (v21 == v81) {
      goto LABEL_70;
    }
  }
  os_log_type_t v105 = (const char *)MEMORY[0x263F8EE78];
  swift_retain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
  unint64_t v33 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  uint64_t v84 = v31;
  uint64_t v101 = v33;
  uint64_t v34 = v31 + v33;
  uint64_t v100 = *(void *)(v85 + 72);
  while (1)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v34, v29, type metadata accessor for __RKEntityInteractionSpecification);
    uint64_t v35 = v34 + *(int *)(v104 + 20);
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v35, (uint64_t)v30, type metadata accessor for __RKEntityActionSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 6) {
      break;
    }
    int v99 = *v30;
    unsigned __int8 v44 = v30[16];
    uint64_t v45 = *((void *)v30 + 3);
    unsigned __int8 v46 = v30[32];
    unsigned __int8 v47 = v30[33];
    uint64_t v48 = v98;
    swift_retain();
    uint64_t v49 = swift_bridgeObjectRetain();
    uint64_t v50 = v103;
    uint64_t v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHsAE_pTg504_s10d54Kit6EntityC0A10FoundationE17remapAudioActionsyyAA010__f3F15g32ArgumentsVAGKcKF0E0L_yAA02__hI13H14OAJKFA2JKXEfU_AF02__fpgT0VALsAE_pIegnrzo_Tf1cn_nTf4ng_n(v49, (void (*)(char *))partial apply for closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:), v48);
    unint64_t v103 = v50;
    if (v50)
    {
      swift_bridgeObjectRelease_n();
      swift_release();
      uint64_t v29 = (uint64_t)v97;
      goto LABEL_66;
    }
    uint64_t v52 = v51;
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v102;
    *unint64_t v102 = v99;
    *((void *)v42 + 1) = v52;
    v42[16] = v44;
    *((void *)v42 + 3) = v45;
    v42[32] = v46;
    v42[33] = v47;
    uint64_t v13 = v92;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRelease();
    uint64_t v12 = v93;
    uint64_t v29 = (uint64_t)v97;
    unsigned __int8 v30 = (unsigned __int8 *)v96;
LABEL_31:
    outlined assign with take of __RKEntityActionSpecification((uint64_t)v42, v29 + *(int *)(v104 + 20));
    unint64_t v55 = v105;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1);
      unint64_t v55 = v105;
    }
    unint64_t v57 = *((void *)v55 + 2);
    unint64_t v56 = *((void *)v55 + 3);
    if (v57 >= v56 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
      unint64_t v55 = v105;
    }
    *((void *)v55 + 2) = v57 + 1;
    uint64_t v58 = v100;
    _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(v29, (uint64_t)&v55[v101 + v57 * v100], type metadata accessor for __RKEntityInteractionSpecification);
    v34 += v58;
    if (!--v32)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_48;
    }
  }
  if (EnumCaseMultiPayload)
  {
    uint64_t v53 = v35;
    uint64_t v42 = v102;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v53, (uint64_t)v102, type metadata accessor for __RKEntityActionSpecification);
    _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v30, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_31;
  }
  _s10RealityKit29__RKEntityActionSpecificationOWObTm_0((uint64_t)v30, (uint64_t)v12, type metadata accessor for __RKEntityAudioActionArguments);
  uint64_t v37 = &v12[*(int *)(v95 + 20)];
  uint64_t v39 = *(void *)v37;
  unint64_t v38 = *((void *)v37 + 1);
  uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
  if ((v38 & 0x2000000000000000) != 0) {
    uint64_t v41 = HIBYTE(v38) & 0xF;
  }
  else {
    uint64_t v41 = v40;
  }
  if (!v41)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v12, type metadata accessor for __RKEntityAudioActionArguments);
    uint64_t v54 = v35;
    uint64_t v42 = v102;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v54, (uint64_t)v102, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_31;
  }
  uint64_t v42 = v102;
  unint64_t v43 = v103;
  closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)((uint64_t)v12, v90, &v106, v91, v94, (uint64_t)v102);
  unint64_t v103 = v43;
  if (!v43)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v12, type metadata accessor for __RKEntityAudioActionArguments);
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1((uint64_t)v12, type metadata accessor for __RKEntityAudioActionArguments);
LABEL_66:
  _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v29, type metadata accessor for __RKEntityInteractionSpecification);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v71 & 1;
}

uint64_t specialized static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = a1[7];
  long long v44 = a1[6];
  long long v45 = v5;
  *(_OWORD *)unsigned __int8 v46 = a1[8];
  *(_OWORD *)&v46[9] = *(long long *)((char *)a1 + 137);
  long long v6 = a1[3];
  long long v40 = a1[2];
  long long v41 = v6;
  long long v7 = a1[5];
  long long v42 = a1[4];
  long long v43 = v7;
  long long v8 = a1[1];
  long long v38 = *a1;
  long long v39 = v8;
  uint64_t v9 = Entity.storageForAudioActions.getter();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 0;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = MEMORY[0x263F8EE78];
  uint64_t v12 = v11 + 16;
  outlined init with copy of __REAssetService(a2, (uint64_t)v37);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  outlined init with take of BindableDataInternal(v37, v13 + 24);
  long long v14 = v45;
  *(_OWORD *)(v13 + 160) = v44;
  *(_OWORD *)(v13 + 176) = v14;
  *(_OWORD *)(v13 + 192) = *(_OWORD *)v46;
  *(_OWORD *)(v13 + 201) = *(_OWORD *)&v46[9];
  long long v15 = v41;
  *(_OWORD *)(v13 + 96) = v40;
  *(_OWORD *)(v13 + 112) = v15;
  long long v16 = v43;
  *(_OWORD *)(v13 + 128) = v42;
  *(_OWORD *)(v13 + 144) = v16;
  long long v17 = v39;
  *(_OWORD *)(v13 + 64) = v38;
  *(_OWORD *)(v13 + 80) = v17;
  *(void *)(v13 + 224) = a3;
  *(void *)(v13 + 232) = v10;
  outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v38);
  uint64_t v18 = v49;
  Entity.remapAudioActions(_:)((void (*)(char *))partial apply for closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), v13);
  swift_retain();
  if (v18)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v32 = v10 + 16;
    uint64_t v35 = (void *)a2;
    swift_retain();
    swift_release();
    if (REEntityGetComponent()) {
      REEntityRemoveComponent();
    }
    uint64_t v34 = REEntityGetOrAddComponent();
    swift_beginAccess();
    uint64_t v19 = *(void *)v12;
    uint64_t v20 = *(void *)(*(void *)v12 + 16);
    if (v20)
    {
      uint64_t v49 = 0;
      v29[7] = v11;
      uint64_t v30 = v10;
      uint64_t v31 = v9;
      outlined init with take of __REAssetBundle.QueueOptions((uint64_t)&v38, (uint64_t)&v47);
      swift_bridgeObjectRetain();
      v29[6] = v19;
      unint64_t v21 = (uint64_t *)(v19 + 40);
      uint64_t v33 = MEMORY[0x263F8EE60] + 8;
      uint64_t v22 = v35;
      while (1)
      {
        uint64_t v23 = *(v21 - 1);
        uint64_t v13 = *v21;
        uint64_t v24 = v22[3];
        uint64_t v25 = v22[4];
        __swift_project_boxed_opaque_existential_1(v22, v24);
        uint64_t v26 = outlined init with take of __REAssetBundle.QueueOptions((uint64_t)&v47, (uint64_t)v36);
        MEMORY[0x270FA5388](v26);
        void v29[2] = v22;
        void v29[3] = v23;
        _OWORD v29[4] = v13;
        v29[5] = v34;
        swift_bridgeObjectRetain();
        uint64_t v27 = v49;
        __REAssetService.performOnEngineQueue<A>(with:_:)(v36, (void (*)(uint64_t))partial apply for closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:), (uint64_t)v29, v24, v33, v25, (uint64_t)v48);
        uint64_t v49 = v27;
        if (v27) {
          break;
        }
        v21 += 2;
        swift_bridgeObjectRelease();
        if (!--v20)
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v10 = v30;
          goto LABEL_11;
        }
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
LABEL_11:
      swift_beginAccess();
      LOBYTE(v13) = *(unsigned char *)(v10 + 16);
      swift_release();
      swift_release();
    }
  }
  return v13 & 1;
}

uint64_t specialized static __REAssetBundle.remapSceneInteractionsBeforeWrite(with:assetService:fileWriter:scene:freeOfChangeSceneActions:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t v6 = v5;
  uint64_t v62 = a2;
  uint64_t v68 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v59 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v67 = (uint64_t)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v66 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v70 = (uint64_t)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Data.Deallocator();
  uint64_t v13 = *(long long **)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v61 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = a1[7];
  long long v80 = a1[6];
  long long v81 = v15;
  v82[0] = a1[8];
  *(_OWORD *)((char *)v82 + 9) = *(long long *)((char *)a1 + 137);
  long long v16 = a1[3];
  long long v76 = a1[2];
  long long v77 = v16;
  long long v17 = a1[5];
  long long v78 = a1[4];
  long long v79 = v17;
  long long v18 = a1[1];
  long long v74 = *a1;
  long long v75 = v18;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    unint64_t v19 = closure #1 in Scene.entitiesWithInteractions()();
    unint64_t v20 = v19;
    unint64_t v83 = v19;
    if (v19 >> 62) {
      goto LABEL_49;
    }
    for (i = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10); i; unint64_t v20 = v83)
    {
      int v60 = 0;
      unint64_t v22 = 0;
      unint64_t v69 = v20 & 0xC000000000000001;
      uint64_t v63 = v20 & 0xFFFFFFFFFFFFFF8;
      unsigned int v56 = *MEMORY[0x263F06F00];
      uint64_t v54 = (void (**)(char *, uint64_t))v13 + 1;
      unint64_t v55 = (void (**)(char *, void, uint64_t))v13 + 13;
      uint64_t v23 = v62;
      uint64_t v13 = v72;
      uint64_t v65 = i;
      while (v69)
      {
        MEMORY[0x22A689930](v22, v20);
        unint64_t v24 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_47;
        }
LABEL_11:
        v72[6] = v80;
        v72[7] = v81;
        v73[0] = v82[0];
        *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)((char *)v82 + 9);
        void v72[2] = v76;
        void v72[3] = v77;
        v72[4] = v78;
        v72[5] = v79;
        v72[0] = v74;
        v72[1] = v75;
        char v25 = specialized static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(v72, v23, a3);
        if (v6)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return v49 & 1;
        }
        if (v25)
        {
          if (*a5)
          {
            int v60 = 1;
LABEL_21:
            uint64_t v28 = v61;
            unint64_t v57 = a5;
            if (static __RKEntityInteractionsComponent.registration
              && REEntityGetCustomComponent()
              && (uint64_t Object = RECustomComponentGetObject()) != 0)
            {
              uint64_t v30 = *(void *)(Object + 16);
              outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v72);
              if (v30)
              {
                uint64_t v31 = v30;
              }
              else
              {
                uint64_t v33 = *(void *)&v72[0];
                if (*(void *)&v72[0])
                {
                  uint64_t v64 = 0;
                  uint64_t v53 = a3;
                  uint64_t v34 = strlen(*(const char **)&v72[0]);
                  (*v55)(v28, v56, v58);
                  Data.Deallocator._deallocator.getter();
                  if (v34)
                  {
                    type metadata accessor for __DataStorage();
                    swift_allocObject();
                    swift_retain();
                    uint64_t v35 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                    uint64_t v34 = specialized Data._Representation.init(_:count:)(v35, v34);
                    unint64_t v37 = v36;
                    swift_release();
                  }
                  else
                  {
                    long long v38 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
                    v38(v33, 0);
                    swift_release();
                    swift_release();
                    unint64_t v37 = 0xC000000000000000;
                  }
                  (*v54)(v28, v58);
                  type metadata accessor for JSONDecoder();
                  swift_allocObject();
                  JSONDecoder.init()();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
                  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
                  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                  uint64_t v6 = 0;
                  swift_release();
                  outlined consume of Data._Representation(v34, v37);
                  uint64_t v31 = v71;
                  a3 = v53;
                }
                else
                {
                  uint64_t v31 = MEMORY[0x263F8EE78];
                }
              }
              swift_bridgeObjectRetain();
              outlined destroy of __RKEntityInteractionsComponent((uint64_t)v72);
              uint64_t v32 = v31;
            }
            else
            {
              uint64_t v32 = MEMORY[0x263F8EE78];
            }
            int64_t v39 = *(void *)(v32 + 16);
            uint64_t v40 = v70;
            if (v39)
            {
              uint64_t v52 = 0;
              uint64_t v53 = a3;
              *(void *)&v72[0] = MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
              uint64_t v41 = *(unsigned __int8 *)(v59 + 80);
              v51[1] = v32;
              uint64_t v42 = v32 + ((v41 + 32) & ~v41);
              uint64_t v64 = *(void *)(v59 + 72);
              do
              {
                uint64_t v43 = v67;
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v42, v67, type metadata accessor for __RKEntityInteractionSpecification);
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(v43 + *(int *)(v68 + 20), v40, type metadata accessor for __RKEntityActionSpecification);
                _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(v43, type metadata accessor for __RKEntityInteractionSpecification);
                uint64_t v44 = *(void *)&v72[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1);
                  uint64_t v44 = *(void *)&v72[0];
                }
                unint64_t v46 = *(void *)(v44 + 16);
                unint64_t v45 = *(void *)(v44 + 24);
                if (v46 >= v45 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
                  uint64_t v44 = *(void *)&v72[0];
                }
                *(void *)(v44 + 16) = v46 + 1;
                uint64_t v40 = v70;
                _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(v70, v44+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v46, type metadata accessor for __RKEntityActionSpecification);
                v42 += v64;
                --v39;
              }
              while (v39);
              swift_bridgeObjectRelease();
              uint64_t v6 = v52;
              a3 = v53;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v44 = MEMORY[0x263F8EE78];
            }
            type metadata accessor for Scene();
            char v47 = static Scene.containsChangeSceneActions(_:)(v44);
            swift_bridgeObjectRelease();
            swift_release();
            a5 = v57;
            *unint64_t v57 = (v47 & 1) == 0;
            unint64_t v22 = v24;
            BOOL v27 = v24 == v65;
            uint64_t v23 = v62;
            uint64_t v13 = v72;
            goto LABEL_16;
          }
          swift_release();
          *a5 = 0;
          int v60 = 1;
          uint64_t v26 = v65;
          unint64_t v22 = v24;
        }
        else
        {
          if (*a5) {
            goto LABEL_21;
          }
          swift_release();
          *a5 = 0;
          ++v22;
          uint64_t v26 = v65;
        }
        BOOL v27 = v24 == v26;
LABEL_16:
        unint64_t v20 = v83;
        if (v27) {
          goto LABEL_51;
        }
      }
      if (v22 >= *(void *)(v63 + 16)) {
        goto LABEL_48;
      }
      swift_retain();
      unint64_t v24 = v22 + 1;
      if (!__OFADD__(v22, 1)) {
        goto LABEL_11;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      uint64_t i = _CocoaArrayWrapper.endIndex.getter();
    }
    int v60 = 0;
LABEL_51:
    swift_bridgeObjectRelease();
    char v49 = v60;
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v48 = xmmword_228336E80;
    *(unsigned char *)(v48 + 16) = 0;
    swift_willThrow();
  }
  return v49 & 1;
}

uint64_t sub_228252944()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  if (*(void *)(v0 + 112) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 176)) {
    swift_release();
  }
  if (*(void *)(v0 + 192)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 240, 7);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(a1, *(void *)(v2 + 16), (uint64_t *)(v2 + 24), (char *)(v2 + 64), *(void *)(v2 + 224), *(void *)(v2 + 232), a2);
}

uint64_t outlined init with take of __REAssetBundle.QueueOptions(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)()
{
  return closure #3 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(*(void **)(v0 + 16));
}

uint64_t outlined assign with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __RKEntityActionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in static __REAssetBundle.remapInteractionEntityBeforeWrite(with:assetService:fileWriter:element:)(*(void **)(v1 + 16), a1);
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(a1, a2);
}

{
  uint64_t result;

  uint64_t result = specialized __REAssetService.firstUnloadedAssetIncludingDependencies(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_228252C54()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), **(void **)(v1 + 32), *(void **)(v1 + 40));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_228252CC4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(char a1)
{
  specialized closure #1 in closure #1 in __REAssetManager.loadAssetsAndDependencies<A>(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(dispatch_group_t *)(v1 + 32));
}

uint64_t sub_228252D18()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t *partial apply for closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)@<X0>(unint64_t *a1@<X0>, unint64_t **a2@<X8>)
{
  return closure #3 in static __REAssetBundle.createDownsampledTextureDescriptors(assetService:realityFile:realityFileURL:downsamplingStrategy:queueOptions:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 40), a2);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *partial apply for closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(void *a1@<X8>)
{
  return closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t partial apply for closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(a1, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(void *)(v3 + 40), *(unsigned __int8 **)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), a3, a2);
}

uint64_t _sSo10CFErrorRefaABs5Error10FoundationWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #4 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_228252E94()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(a1, *(void *)(v2 + 16), (void *)(v2 + 24), *(unsigned char *)(v2 + 64), *(void *)(v2 + 72), a2);
}

uint64_t partial apply for closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(*(void **)(v1 + 16), a1);
}

uint64_t partial apply for closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in remapElement #1 (element:) in static __REAssetBundle.fixupSceneInteractions(scene:assetDescriptors:assetService:queueOptions:)(*(void **)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in closure #3 in static __REAssetBundle.loadScenes(requestedSceneNames:assetService:coreServiceLocator:downsampledTextureDescriptors:realityFilename:realityFile:header:realityFileAssetDescriptors:loadOptions:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

unsigned char *storeEnumTagSinglePayload for __REAssetBundle.ExportOptions.PlatformRequirement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22825302CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LoadNamedFileError #1 in static __REAssetBundle.loadNamedFileContents(bundleUrl:fileName:)()
{
  return &unk_26DCB8188;
}

void closure #1 in static __REAssetBundle.__init(elements:assetService:)partial apply(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
}

void LoadRequest.result.getter(uint64_t a1@<X8>)
{
}

uint64_t LoadRequest.receive<A>(subscriber:)()
{
  return Publisher.subscribe<A>(_:)();
}

uint64_t LoadRequest.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t LoadRequest.__deallocating_deinit()
{
  return LoadRequest.__deallocating_deinit(MEMORY[0x263F8EED8]);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance LoadRequest<A>()
{
  return LoadRequest.receive<A>(subscriber:)();
}

uint64_t LoadRequestDependencies.__deallocating_deinit()
{
  return LoadRequest.__deallocating_deinit(MEMORY[0x263F8EEA0]);
}

uint64_t LoadRequest.__deallocating_deinit(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return swift_deallocClassInstance();
}

void LoadRequestAllocatedLock.valueWithLock.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  os_unfair_lock_lock((os_unfair_lock_t)(v1[2] + 16));
  unsigned int v4 = (char *)v1 + *(void *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1[2] + 16));
}

uint64_t type metadata completion function for LoadRequest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadRequest()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for LoadRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LoadRequest);
}

uint64_t dispatch thunk of LoadRequest.result.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of LoadRequest.subscribe<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of LoadRequest.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t type metadata accessor for LoadRequestDependencies()
{
  return self;
}

uint64_t type metadata completion function for LoadRequestAllocatedLock()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *LoadRequestAllocatedLock.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96));
  return v0;
}

uint64_t LoadRequestAllocatedLock.__deallocating_deinit()
{
  LoadRequestAllocatedLock.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LoadRequestAllocatedLock()
{
  return __swift_instantiateGenericMetadata();
}

void AudioBufferResource.CreateOptions.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = -1;
}

void AudioBufferResource.CreateOptions.spatialMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AudioBufferResource.CreateOptions.spatialMode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.spatialMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.shouldLoop.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioBufferResource.CreateOptions.shouldLoop.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.shouldLoop.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.randomizeStartTime.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioBufferResource.CreateOptions.randomizeStartTime.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.randomizeStartTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.CreateOptions.mixGroupName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioBufferResource.CreateOptions.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.mixGroupName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.CreateOptions.normalization.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.CreateOptions.normalization.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.normalization.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.CreateOptions.calibration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.CreateOptions.calibration.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 40) = *(void *)result;
  *(unsigned char *)(v1 + 48) = v2;
  return result;
}

uint64_t (*AudioBufferResource.CreateOptions.calibration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL specialized static AudioBufferResource.CreateOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a1 != *a2 || ((a1[1] ^ a2[1]) & 1) != 0 || ((a1[2] ^ a2[2]) & 1) != 0) {
    return result;
  }
  uint64_t v4 = *((void *)a1 + 2);
  double v5 = *((double *)a1 + 3);
  int v6 = a1[32];
  double v7 = *((double *)a1 + 5);
  int v8 = a1[48];
  uint64_t v9 = *((void *)a2 + 2);
  double v10 = *((double *)a2 + 3);
  int v11 = a2[32];
  double v12 = *((double *)a2 + 5);
  int v13 = a2[48];
  if (!v4)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v9) {
    return 0;
  }
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && v4 == v9
    || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
LABEL_11:
    if (v6 == 255)
    {
      if (v11 != 255) {
        return 0;
      }
      goto LABEL_26;
    }
    if (v11 == 255) {
      return 0;
    }
    if (v6)
    {
      if (v6 != 1)
      {
        BOOL result = 0;
        if (v11 != 2 || v10 != 0.0) {
          return result;
        }
LABEL_26:
        BOOL result = v13 == 255 && v8 == 255;
        if (v8 == 255 || v13 == 255) {
          return result;
        }
        if (v8)
        {
          if (v13) {
            goto LABEL_35;
          }
        }
        else if ((v13 & 1) == 0)
        {
LABEL_35:
          if (v7 == v12) {
            return 1;
          }
        }
        return 0;
      }
      BOOL result = 0;
      if (v11 != 1) {
        return result;
      }
    }
    else
    {
      BOOL result = 0;
      if (v11) {
        return result;
      }
    }
    if (v5 != v10) {
      return result;
    }
    goto LABEL_26;
  }
  return result;
}

uint64_t initializeWithCopy for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithTake for AudioBufferResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for AudioBufferResource.CreateOptions()
{
  return &type metadata for AudioBufferResource.CreateOptions;
}

uint64_t && infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (**a2)()@<X8>)
{
  return && infix<A>(_:_:)(a1, (uint64_t (*)(void, uint64_t))type metadata accessor for QueryPredicates.And, a2);
}

uint64_t type metadata accessor for QueryPredicates.And()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t || infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (**a2)()@<X8>)
{
  return && infix<A>(_:_:)(a1, (uint64_t (*)(void, uint64_t))type metadata accessor for QueryPredicates.Or, a2);
}

uint64_t && infix<A>(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(void, uint64_t)@<X3>, uint64_t (**a3)()@<X8>)
{
  uint64_t v4 = a2(0, a1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v4, WitnessTable, a3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Or()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ! prefix<A>(_:)@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2 = type metadata accessor for QueryPredicates.Not();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v2, WitnessTable, a1);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Not()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t === infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  double v10 = (void *)swift_allocObject();
  void v10[2] = a3;
  __n128 v10[3] = a4;
  void v10[4] = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v10, &v17);
  uint64_t v12 = v17;
  uint64_t v11 = v18;
  int v13 = (void *)swift_allocObject();
  _OWORD v13[2] = a3;
  v13[3] = a4;
  void v13[4] = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in === infix<A, B>(_:_:), (uint64_t)v13, v21);
  uint64_t v17 = v12;
  uint64_t v18 = v11;
  uint64_t v19 = v21[0];
  uint64_t v20 = v21[1];
  uint64_t v14 = type metadata accessor for QueryPredicates.Identical();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v14, WitnessTable, a5);
  swift_release();
  return swift_release();
}

uint64_t sub_228253ECC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in === infix<A, B>(_:_:)@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for QueryPredicates.Identical()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t === infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v5 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)a1, &v14);
  uint64_t v9 = v14;
  uint64_t v8 = v15;
  double v10 = (void *)swift_allocObject();
  void v10[2] = v6;
  __n128 v10[3] = v7;
  void v10[4] = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v10, v18);
  uint64_t v14 = v9;
  uint64_t v15 = v8;
  uint64_t v16 = v18[0];
  uint64_t v17 = v18[1];
  uint64_t v11 = type metadata accessor for QueryPredicates.Identical();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v11, WitnessTable, a3);
  swift_release();
  return swift_release();
}

uint64_t === infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = (void *)(v6 + *MEMORY[0x263F8EA20]);
  void v7[2] = *v8;
  void v7[3] = v8[1];
  v7[4] = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), (uint64_t)v7, &v14);
  uint64_t v10 = v14;
  uint64_t v9 = v15;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in === infix<A, B>(_:_:), (uint64_t)a2, v18);
  uint64_t v14 = v10;
  uint64_t v15 = v9;
  uint64_t v16 = v18[0];
  uint64_t v17 = v18[1];
  uint64_t v11 = type metadata accessor for QueryPredicates.Identical();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v11, WitnessTable, a3);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in === infix<A, B>(_:_:)(uint64_t a1)
{
  return MEMORY[0x270FA0310](a1, v1);
}

uint64_t === infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), a1, &v10);
  uint64_t v6 = v10;
  uint64_t v5 = v11;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in === infix<A, B>(_:_:), a2, v14);
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  uint64_t v12 = v14[0];
  uint64_t v13 = v14[1];
  uint64_t v7 = type metadata accessor for QueryPredicates.Identical();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v7, WitnessTable, a3);
  swift_release();
  return swift_release();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.Equals();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.Equals()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t == infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.Equals();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.Equals();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.Equals();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.NotEquals();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.NotEquals()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t != infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.NotEquals();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.NotEquals();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t != infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.NotEquals();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.LessThan();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.LessThan()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t < infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.LessThan();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.LessThan();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t < infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.LessThan();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.LessThanOrEqual();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.LessThanOrEqual()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.LessThanOrEqual();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.LessThanOrEqual();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t <= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.LessThanOrEqual();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

uint64_t sub_228256540()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.GreaterThan();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.GreaterThan()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t > infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.GreaterThan();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #2 in > infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.GreaterThan();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in > infix<A, B>(_:_:)(uint64_t a1)
{
  return MEMORY[0x270FA0310](a1, *(void *)(v1 + 24));
}

uint64_t > infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.GreaterThan();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *, __n128))(v9 + 16);
  v24(v12, v11);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a5;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v15(&v14[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v27);
  uint64_t v16 = v28;
  uint64_t v23 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v12, v25, a4);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = v22;
  v15(&v17[v13], v12, a4);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v17, v31);
  uint64_t v27 = v23;
  uint64_t v28 = v16;
  uint64_t v29 = v31[0];
  uint64_t v30 = v31[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.GreaterThanOrEqual();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v26);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for QueryPredicates.GreaterThanOrEqual()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t >= infix<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v7 = (uint64_t *)(*a1 + *MEMORY[0x263F8EA20]);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  __n128 v11 = (char *)&v20 - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = *v7;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v12, &v22);
  uint64_t v14 = v23;
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v8;
  *((void *)v16 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v11, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v16, v26);
  uint64_t v22 = v20;
  uint64_t v23 = v14;
  uint64_t v24 = v26[0];
  uint64_t v25 = v26[1];
  uint64_t v17 = type metadata accessor for QueryPredicates.GreaterThanOrEqual();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v17, WitnessTable, v21);
  swift_release();
  return swift_release();
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)MEMORY[0x263F8EA20];
  uint64_t v8 = *(void *)(*MEMORY[0x263F8EA20] + *a2 + 8);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v21 - v11;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v21 - v11, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = *(void *)(v6 + *v7);
  *((void *)v14 + 3) = v8;
  *((void *)v14 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v12, v8);
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), (uint64_t)v14, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v17, v27);
  uint64_t v23 = v15;
  uint64_t v24 = v16;
  uint64_t v25 = v27[0];
  uint64_t v26 = v27[1];
  uint64_t v18 = type metadata accessor for QueryPredicates.GreaterThanOrEqual();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v18, WitnessTable, v22);
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in == infix<A, B>(_:_:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)));
}

uint64_t >= infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v8, &v15);
  uint64_t v10 = v15;
  uint64_t v9 = v16;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a2;
  QueryType.init(_:)((uint64_t)partial apply for closure #1 in == infix<A, B>(_:_:), v11, v19);
  uint64_t v15 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = v19[0];
  uint64_t v18 = v19[1];
  uint64_t v12 = type metadata accessor for QueryPredicates.GreaterThanOrEqual();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  QueryPredicateProtocol.eraseToQueryPredicate()(v12, WitnessTable, a4);
  swift_release();
  return swift_release();
}

void *assignWithCopy for QueryPredicates.GreaterThanOrEqual(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicates.GreaterThanOrEqual(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t destroy for QueryPredicates.Or()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for QueryPredicates.Or(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for QueryPredicates.Or(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicates.Or(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryPredicates.Or(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryPredicates.Or(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)BOOL result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t QueryPredicates.And.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = v2[4];
  long long v14 = v2[5];
  long long v15 = v8;
  long long v9 = v2[1];
  long long v16 = *v2;
  long long v17 = v9;
  long long v13 = v2[3];
  long long v18 = v2[2];
  type metadata accessor for QueryPredicate();
  char v10 = QueryPredicate.evaluate(value:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (v10)
  {
    long long v16 = v13;
    long long v17 = v15;
    long long v18 = v14;
    char v11 = QueryPredicate.evaluate(value:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.And<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(void *)(a1 + 16), MEMORY[0x263F372E0], MEMORY[0x263F372D8]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.And<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.And.evaluate(value:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.enumerate(using:) in conformance QueryPredicates.And<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QueryPredicates.And.enumerate(using:)(a1, a2, a3);
}

uint64_t QueryPredicates.Or.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = v2[4];
  long long v14 = v2[5];
  long long v15 = v8;
  long long v9 = v2[1];
  long long v16 = *v2;
  long long v17 = v9;
  long long v13 = v2[3];
  long long v18 = v2[2];
  type metadata accessor for QueryPredicate();
  char v10 = QueryPredicate.evaluate(value:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v11 = 1;
  }
  else
  {
    long long v16 = v13;
    long long v17 = v15;
    long long v18 = v14;
    char v11 = QueryPredicate.evaluate(value:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v11 & 1;
}

uint64_t QueryPredicates.And.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[5];
  uint64_t v13 = v3[6];
  uint64_t v14 = v3[11];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = v6;
  long long v17 = *(_OWORD *)(v3 + 1);
  long long v18 = *(_OWORD *)(v3 + 3);
  uint64_t v19 = v7;
  long long v9 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v9(&v16, v10, ObjectType, a2);
  swift_release();
  long long v12 = *(_OWORD *)(v3 + 7);
  long long v15 = *(_OWORD *)(v3 + 9);
  swift_release();
  swift_release();
  uint64_t v16 = v13;
  long long v17 = v12;
  long long v18 = v15;
  uint64_t v19 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  v9(&v16, v10, ObjectType, a2);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Or<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(void *)(a1 + 16), MEMORY[0x263F37300], MEMORY[0x263F372F8]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Or<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Or.evaluate(value:)(a1, a2);
  *a3 = result & 1;
  return result;
}

BOOL QueryPredicates.Not.evaluate(value:)()
{
  return (QueryPredicate.evaluate(value:)() & 1) == 0;
}

uint64_t QueryPredicates.Not.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[5];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = v6;
  long long v13 = *(_OWORD *)(v3 + 1);
  long long v14 = *(_OWORD *)(v3 + 3);
  uint64_t v15 = v7;
  long long v9 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v9(&v12, v10, ObjectType, a2);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Not<A>(uint64_t a1)
{
  return specialized QueryPredicates.Or.makeInternal()(*(void *)(a1 + 16), MEMORY[0x263F372F0], MEMORY[0x263F372E8]);
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Not<A>@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = QueryPredicates.Not.evaluate(value:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Equals<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x263F8D218]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.enumerate(using:) in conformance QueryPredicates.Equals<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QueryPredicates.Equals.enumerate(using:)(a1, a2, a3);
}

BOOL QueryPredicates.NotEquals.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)&v13 - v8;
  long long v14 = *v2;
  type metadata accessor for QueryType();
  long long v13 = v2[1];
  QueryType.evaluate(value:)();
  long long v14 = v13;
  QueryType.evaluate(value:)();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  v11(v9, v3);
  return (v10 & 1) == 0;
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.NotEquals<A, B>@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = QueryPredicates.NotEquals.evaluate(value:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.LessThan<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x263F8D170]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.LessThanOrEqual<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x263F8D180]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.GreaterThan<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x263F8D168]);
  *a3 = result & 1;
  return result;
}

uint64_t QueryPredicates.Equals.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *, uint64_t, void))
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  long long v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v16 - v11;
  long long v17 = *v3;
  type metadata accessor for QueryType();
  long long v16 = v3[1];
  QueryType.evaluate(value:)();
  long long v17 = v16;
  QueryType.evaluate(value:)();
  char v13 = a3(v12, v9, v6, *(void *)(a2 + 32));
  long long v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  return v13 & 1;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.GreaterThanOrEqual<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = QueryPredicates.Equals.evaluate(value:)(a1, a2, MEMORY[0x263F8D178]);
  *a3 = result & 1;
  return result;
}

BOOL QueryPredicates.Identical.evaluate(value:)()
{
  type metadata accessor for QueryType();
  QueryType.evaluate(value:)();
  QueryType.evaluate(value:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v2 == v1;
}

uint64_t QueryPredicates.Equals.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v8 = v3[3];
  uint64_t v14 = v3[2];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 24);
  swift_retain();
  v10(&v15, v12, v11, ObjectType, a2);
  swift_release();
  uint64_t v15 = v14;
  uint64_t v16 = v8;
  swift_retain();
  v10(&v15, v12, v11, ObjectType, a2);

  return swift_release();
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Identical<A, B>@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = QueryPredicates.Identical.evaluate(value:)();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.GreaterThanOrEqual<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.GreaterThan<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.LessThanOrEqual<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.LessThan<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.NotEquals<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Equals<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Identical<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Not<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Or<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.And<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized QueryPredicates.Or.makeInternal()(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype()) {
    return a2();
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    return a3();
  }
  else {
    return 0;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE16jK54Vcfu_33_979d7928f60ba9ff03fee9aafd7606f7AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = a1;
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v21;
    int64_t v4 = specialized Set.startIndex.getter(v3);
    int v6 = v5;
    char v8 = v7 & 1;
    uint64_t v19 = v3;
    uint64_t v20 = v3 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v3 + 32))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        JUMPOUT(0x228258D78);
      }
      if (((*(void *)(v20 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v3 + 36) != v6) {
        goto LABEL_26;
      }
      uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 8 * v4);
      if (v9 > 63)
      {
        switch(v9)
        {
          case 64:
            unint64_t v10 = 0xE600000000000000;
            uint64_t v11 = 0x6172656D6163;
            break;
          case 128:
            unint64_t v10 = 0xE400000000000000;
            uint64_t v11 = 1701011814;
            break;
          case 256:
            unint64_t v10 = 0xE400000000000000;
            uint64_t v11 = 2036625250;
            break;
          default:
LABEL_18:
            uint64_t v11 = 0;
            unint64_t v10 = 0xE000000000000000;
            break;
        }
      }
      else
      {
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x646C726F77;
        switch(v9)
        {
          case 1:
            break;
          case 2:
            uint64_t v11 = 0x656E616C70;
            break;
          case 4:
            uint64_t v11 = 0x6567616D69;
            break;
          case 8:
            unint64_t v10 = 0xE600000000000000;
            uint64_t v11 = 0x7463656A626FLL;
            break;
          default:
            goto LABEL_18;
        }
      }
      unint64_t v13 = *(void *)(v21 + 16);
      unint64_t v12 = *(void *)(v21 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v21 + 16) = v13 + 1;
      uint64_t v14 = v21 + 16 * v13;
      *(void *)(v14 + 32) = v11;
      *(void *)(v14 + 40) = v10;
      uint64_t v3 = v19;
      int64_t v15 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v19);
      int64_t v4 = v15;
      int v6 = v16;
      char v8 = v17 & 1;
      --v1;
    }
    while (v1);
    outlined consume of [String : AnimationResource].Index._Variant(v15, v16, v17 & 1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV28SceneUnderstandingCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE28jkL55Vcfu0_33_05ee4caa7c346c634b201050f1d8d6e4AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = a1;
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v22;
    int64_t v4 = specialized Set.startIndex.getter(v3);
    int v6 = v5;
    char v8 = v7 & 1;
    uint64_t v20 = v3;
    uint64_t v21 = v3 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v3 + 32))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x228258F8CLL);
      }
      if (((*(void *)(v21 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_19;
      }
      if (*(_DWORD *)(v3 + 36) != v6) {
        goto LABEL_20;
      }
      uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 8 * v4);
      unint64_t v10 = 0xE600000000000000;
      uint64_t v11 = 0x776F64616873;
      switch(v9)
      {
        case 1:
          break;
        case 2:
          uint64_t v12 = 0x73756C63636FLL;
          goto LABEL_11;
        case 4:
          uint64_t v12 = 0x73696C6C6F63;
LABEL_11:
          uint64_t v11 = v12 & 0xFFFFFFFFFFFFLL | 0x6F69000000000000;
          unint64_t v10 = 0xE90000000000006ELL;
          break;
        case 8:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v11 = 0x73636973796870;
          break;
        default:
          uint64_t v11 = 0;
          unint64_t v10 = 0xE000000000000000;
          break;
      }
      unint64_t v14 = *(void *)(v22 + 16);
      unint64_t v13 = *(void *)(v22 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v22 + 16) = v14 + 1;
      uint64_t v15 = v22 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v10;
      uint64_t v3 = v20;
      int64_t v16 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v20);
      int64_t v4 = v16;
      int v6 = v17;
      char v8 = v18 & 1;
      --v1;
    }
    while (v1);
    outlined consume of [String : AnimationResource].Index._Variant(v16, v17, v18 & 1);
  }
  return v2;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t *, void))
{
  uint64_t v4 = result;
  int64_t v5 = 0;
  uint64_t v17 = a2;
  uint64_t v6 = result + 56;
  uint64_t v7 = 1 << *(unsigned char *)(result + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(result + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    uint64_t result = a3(&v16, *(void *)(*(void *)(v4 + 48) + 8 * v12));
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release();
    return v17;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL static SpatialTrackingSession.Configuration.AnchorCapability.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void SpatialTrackingSession.Configuration.AnchorCapability.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int64_t v1 = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.anchorCapabilitySet.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void SpatialTrackingSession.Configuration.camera.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *SpatialTrackingSession.Configuration.camera.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*SpatialTrackingSession.Configuration.camera.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.Configuration.removing(unavailableCapabilities:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v6 = (void *)a1[2];
  uint64_t v8 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  char v9 = *(unsigned char *)(v2 + 16);
  if (*(void *)(*a1 + 16) <= *(void *)(*(void *)v2 + 16) >> 3)
  {
    Swift::Int v14 = *(void *)v2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Set._subtract<A>(_:)(v5);
    Swift::Int v10 = v14;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    Swift::Int v10 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v5, v8);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4[2] <= *(void *)(v10 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(v4);
    swift_bridgeObjectRelease();
    Swift::Int v11 = v10;
  }
  else
  {
    Swift::Int v11 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v4, v10);
    swift_bridgeObjectRelease();
  }
  if (v6[2] <= *(void *)(v7 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(v6);
    uint64_t result = swift_bridgeObjectRelease();
    Swift::Int v12 = v7;
  }
  else
  {
    Swift::Int v12 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v6, v7);
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return 1;
  }
  if (*(void *)(*(void *)(v0 + 8) + 16)) {
    return 1;
  }
  if (*(void *)(*(void *)(v0 + 16) + 16)) {
    return 1;
  }
  if (*(void *)(*(void *)(v0 + 24) + 16)) {
    return 1;
  }
  return *(unsigned char *)(v0 + 32) & 1;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.union(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  int v10 = *(unsigned __int8 *)(v2 + 32);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized Set.union<A>(_:)(v4, v6, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized Set.union<A>(_:)(v12, v7, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  if (v10 != 2) {
    char v5 = (v10 | v5) & 1;
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = specialized Set.union<A>(_:)(v14, v9, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized Set.union<A>(_:)(v16, v8, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v17;
  *(unsigned char *)(a2 + 32) = v5;
  return result;
}

__n128 SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v3 = MEMORY[0x263F8EE88];
  *(void *)a2 = MEMORY[0x263F8EE88];
  __n128 result = v5;
  *(__n128 *)(a2 + 8) = v5;
  *(void *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 32) = 2;
  return result;
}

void SpatialTrackingSession.UnavailableCapabilities.init()(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)a1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v1;
  *(unsigned char *)(a1 + 32) = 2;
}

uint64_t SpatialTrackingSession.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SpatialTrackingSession.init()()
{
  return v0;
}

uint64_t SpatialTrackingSession.deinit()
{
  return v0;
}

uint64_t SpatialTrackingSession.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void static SpatialTrackingSession.Configuration.AnchorCapability.world.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.image.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.object.getter(void *a1@<X8>)
{
  *a1 = 8;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anchor.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v2, v1, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
}

void static SpatialTrackingSession.Configuration.AnchorCapability.hand.getter(void *a1@<X8>)
{
  *a1 = 16;
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t SpatialTrackingSession.run(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(unsigned char *)(v2 + 49) = *(unsigned char *)(a2 + 16);
  return MEMORY[0x270FA2498](SpatialTrackingSession.run(_:), 0, 0);
}

uint64_t SpatialTrackingSession.run(_:)()
{
  swift_beginAccess();
  uint64_t v1 = static SpatialTrackingManager.shared;
  *(void *)(v0 + 152) = static SpatialTrackingManager.shared;
  if (v1)
  {
    char v2 = *(unsigned char *)(v0 + 49);
    long long v10 = *(_OWORD *)(v0 + 136);
    swift_beginAccess();
    v1[120] = 1;
    *(_OWORD *)(v0 + 104) = v10;
    *(unsigned char *)(v0 + 120) = v2;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    *uint64_t v3 = v0;
    v3[1] = SpatialTrackingSession.run(_:);
    return SpatialTrackingManager.run(spatialTrackingConfiguration:)(v0 + 16, v0 + 104);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = *(void **)(v0 + 128);
    uint64_t v8 = MEMORY[0x263F8EE88];
    *uint64_t v7 = MEMORY[0x263F8EE88];
    v7[1] = v5;
    uint64_t v9 = *(void *)(v0 + 128);
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v8;
    *(unsigned char *)(v9 + 32) = 2;
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v11();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpatialTrackingSession.run(_:), 0, 0);
}

{
  uint64_t v0;
  _OWORD *v1;
  char v2;
  long long v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(_OWORD **)(v0 + 128);
  swift_release();
  char v2 = *(unsigned char *)(v0 + 48);
  uint64_t v3 = *(_OWORD *)(v0 + 32);
  *uint64_t v1 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 128);
  *(_OWORD *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 32) = v2;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t SpatialTrackingSession.stop()()
{
  return MEMORY[0x270FA2498](SpatialTrackingSession.stop(), 0, 0);
}

{
  void *v0;
  unsigned char *v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  swift_beginAccess();
  uint64_t v1 = static SpatialTrackingManager.shared;
  v0[8] = static SpatialTrackingManager.shared;
  if (v1)
  {
    swift_beginAccess();
    v1[120] = 1;
    swift_retain();
    char v2 = (void *)swift_task_alloc();
    v0[9] = v2;
    *char v2 = v0;
    v2[1] = SpatialTrackingSession.stop();
    return SpatialTrackingManager.stop()();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpatialTrackingSession.stop(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SpatialTrackingSession.autoRun(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(unsigned char *)(v2 + 49) = *(unsigned char *)(a2 + 16);
  return MEMORY[0x270FA2498](SpatialTrackingSession.autoRun(_:), 0, 0);
}

uint64_t SpatialTrackingSession.autoRun(_:)()
{
  swift_beginAccess();
  uint64_t v1 = static SpatialTrackingManager.shared;
  *(void *)(v0 + 152) = static SpatialTrackingManager.shared;
  if (!v1)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = MEMORY[0x263F8EE88];
    *(void *)uint64_t v5 = MEMORY[0x263F8EE88];
    *(void *)(v5 + 8) = v3;
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v6;
    *(unsigned char *)(v5 + 32) = 2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  swift_beginAccess();
  if (v1[120] == 1)
  {
    uint64_t v2 = *(void *)(v0 + 128);
    *(unsigned char *)(v2 + 32) = 0;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
LABEL_5:
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  char v9 = *(unsigned char *)(v0 + 49);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 136);
  *(unsigned char *)(v0 + 120) = v9;
  swift_retain();
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v10;
  *long long v10 = v0;
  v10[1] = SpatialTrackingSession.autoRun(_:);
  return SpatialTrackingManager.run(spatialTrackingConfiguration:)(v0 + 16, v0 + 104);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpatialTrackingSession.autoRun(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  long long v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  uint64_t v2 = *(unsigned char *)(v0 + 48);
  uint64_t v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + 32) = v2;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t SpatialTrackingSession.autoStop()()
{
  return MEMORY[0x270FA2498](SpatialTrackingSession.autoStop(), 0, 0);
}

{
  void *v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;

  swift_beginAccess();
  uint64_t v1 = static SpatialTrackingManager.shared;
  v0[8] = static SpatialTrackingManager.shared;
  if (v1 && (swift_beginAccess(), (v1[120] & 1) == 0))
  {
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    *uint64_t v4 = v0;
    v4[1] = SpatialTrackingSession.autoStop();
    return SpatialTrackingManager.stop()();
  }
  else
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpatialTrackingSession.autoStop(), 0, 0);
}

void static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.face.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static SpatialTrackingSession.Configuration.AnchorCapability.body.getter(void *a1@<X8>)
{
  *a1 = 256;
}

BOOL static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SpatialTrackingSession.Configuration.Camera.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SpatialTrackingSession.Configuration.Camera.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v4;
  return result;
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v2, v1, (uint64_t (*)(uint64_t *, void))specialized Set._Variant.insert(_:));
}

uint64_t SpatialTrackingSession.Configuration.AnchorCapability.description.getter()
{
  uint64_t v1 = *v0;
  if (*v0 > 63)
  {
    switch(v1)
    {
      case 64:
        return 0x6172656D6163;
      case 128:
        return 1701011814;
      case 256:
        return 2036625250;
      default:
        return 0;
    }
  }
  else
  {
    uint64_t result = 0x646C726F77;
    switch(v1)
    {
      case 1:
        return result;
      case 2:
        uint64_t result = 0x656E616C70;
        break;
      case 4:
        uint64_t result = 0x6567616D69;
        break;
      case 8:
        uint64_t result = 0x7463656A626FLL;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t SpatialTrackingSession.Configuration.SceneUnderstandingCapability.description.getter()
{
  uint64_t result = 0x776F64616873;
  switch(*v0)
  {
    case 1:
      return result;
    case 2:
      uint64_t v2 = 0x73756C63636FLL;
      goto LABEL_5;
    case 4:
      uint64_t v2 = 0x73696C6C6F63;
LABEL_5:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x6F69000000000000;
      break;
    case 8:
      uint64_t result = 0x73636973796870;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t SpatialTrackingSession.Configuration.description.getter()
{
  uint64_t v1 = v0[1];
  if (!*(void *)(*v0 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    if (!*(void *)(v1 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE16jK54Vcfu_33_979d7928f60ba9ff03fee9aafd7606f7AHSSTf3nnnpk_nTf1cn_n(v2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v3 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 93;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  _OWORD v8[2] = v10 + 1;
  uint64_t v11 = &v8[2 * v10];
  void v11[4] = 0x203A726F68636E61;
  v11[5] = 0xE90000000000005BLL;
  if (*(void *)(v1 + 16))
  {
LABEL_7:
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    uint64_t v12 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV28SceneUnderstandingCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh3C13i24V11descriptionSSvgSSAE28jkL55Vcfu0_33_05ee4caa7c346c634b201050f1d8d6e4AHSSTf3nnnpk_nTf1cn_n(v12);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 93;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    unint64_t v19 = v8[2];
    unint64_t v18 = v8[3];
    if (v19 >= v18 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v8);
    }
    _OWORD v8[2] = v19 + 1;
    uint64_t v20 = &v8[2 * v19];
    v20[4] = 0xD000000000000015;
    v20[5] = 0x800000022835EA40;
  }
LABEL_12:
  v21._uint64_t countAndFlagsBits = 0x203A6172656D6163;
  v21._object = (void *)0xE800000000000000;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  unint64_t v23 = v8[2];
  unint64_t v22 = v8[3];
  if (v23 >= v22 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v8);
  }
  _OWORD v8[2] = v23 + 1;
  uint64_t v24 = &v8[2 * v23];
  v24[4] = 0;
  v24[5] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t SpatialTrackingSession.Configuration.debugDescription.getter()
{
  return SpatialTrackingSession.Configuration.description.getter();
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera;
  if (!lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera);
  }
  return result;
}

uint64_t type metadata accessor for SpatialTrackingSession()
{
  return self;
}

uint64_t method lookup function for SpatialTrackingSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpatialTrackingSession);
}

uint64_t dispatch thunk of SpatialTrackingSession.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t assignWithCopy for SpatialTrackingSession.Configuration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration()
{
  return &type metadata for SpatialTrackingSession.Configuration;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return &type metadata for SpatialTrackingSession.Configuration.AnchorCapability;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return &type metadata for SpatialTrackingSession.UnavailableCapabilities;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return &type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability;
}

unsigned char *storeEnumTagSinglePayload for SpatialTrackingSession.Configuration.Camera(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22825ADE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return &type metadata for SpatialTrackingSession.Configuration.Camera;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void one-time initialization function for basicPopAnimationData()
{
  static EmphasizeAnimations.basicPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicPopAnimationData;
}

void one-time initialization function for playfulPopAnimationData()
{
  static EmphasizeAnimations.playfulPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulPopAnimationData;
}

void one-time initialization function for wildPopAnimationData()
{
  static EmphasizeAnimations.wildPopAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildPopAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizePopAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 118, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicPopAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 264, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulPopAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildPopAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    return _StringGuts._slowWithCString<A>(_:)();
  }
  if ((a2 & 0x2000000000000000) != 0) {
    return REMaterialParameterBlockValueClearParameter();
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = _StringObject.sharedUTF8.getter();
  }
  return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v3, v4, partial apply for closure #1 in __RKMaterialParameterBlock.clear(parameter:));
}

uint64_t __RKMaterialParameterBlock.get(parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(void **)(v3 + 24);
  swift_bridgeObjectRetain();
  id v8 = v7;
  swift_bridgeObjectRetain();
  return specialized String.withCString<A>(_:)(a1, a2, v8, a3);
}

uint64_t __RKMaterialParameterBlock.set(parameter:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(unsigned char *)(a3 + 64);
  long long v4 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v4;
  long long v5 = *(_OWORD *)(a3 + 48);
  _OWORD v8[2] = *(_OWORD *)(a3 + 32);
  v8[3] = v5;
  char v9 = v3;
  uint64_t v6 = String.utf8CString.getter();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)((const char *)(v6 + 32), (uint64_t)v8);

  return swift_release();
}

Swift::Void __swiftcall __RKMaterialParameterBlock.clear(parameter:)(Swift::String parameter)
{
  object = parameter._object;
  uint64_t countAndFlagsBits = parameter._countAndFlagsBits;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v4 = REMaterialParameterBlockValueCopy();
    long long v5 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = v4;
  }
  specialized String.withCString<A>(_:)(countAndFlagsBits, (uint64_t)object);
}

Swift::Int __swiftcall __RKMaterialParameterBlock.numberOfTexturesWithNonZeroUVIndex()()
{
  return (int)REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex();
}

uint64_t __RKMaterialParameterBlock.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  return result;
}

id static __RKMaterialParameterBlock.fromCore(_:index:)@<X0>(uint64_t a1@<X8>)
{
  id result = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
  if (result)
  {
    *(void *)a1 = MEMORY[0x263F8EE78];
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = result;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __RKMaterialParameterBlock.toCore(_:index:)()
{
  return REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
}

uint64_t __RKMaterialParameterBlock.Parameter.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 64);
  long long v3 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)(result + 24);
  uint64_t v8 = *(void *)(result + 40);
  switch(v2)
  {
    case 0:
      uint64_t v8 = 0;
      long long v7 = v7;
      char v2 = 1;
      break;
    case 1:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      char v2 = 0;
      goto LABEL_4;
    case 2:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = *(void *)result;
      long long v7 = 0uLL;
      char v2 = 2;
      break;
    case 3:
    case 6:
    case 12:
    case 16:
      uint64_t v5 = 0;
      goto LABEL_3;
    case 4:
    case 5:
    case 7:
    case 13:
    case 14:
    case 17:
    case 18:
LABEL_3:
      uint64_t v6 = 0;
      uint64_t v8 = 0;
LABEL_4:
      long long v7 = 0uLL;
      break;
    case 8:
      break;
    case 9:
      long long v3 = *(_OWORD *)(result + 48);
      char v2 = 9;
      break;
    case 10:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = *(void *)result & 1;
      long long v7 = 0uLL;
      char v2 = 10;
      break;
    case 11:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = *(void *)result;
      long long v7 = 0uLL;
      char v2 = 11;
      break;
    case 15:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      uint64_t v4 = *(void *)result;
      long long v7 = 0uLL;
      char v2 = 15;
      break;
    default:
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = 0;
      long long v7 = 0uLL;
      char v2 = 19;
      break;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 48) = v3;
  *(unsigned char *)(a2 + 64) = v2;
  return result;
}

BOOL static MTLTextureSwizzleChannels.== infix(_:_:)(unsigned int a1, unsigned int a2)
{
  BOOL v2 = HIBYTE(a1) == HIBYTE(a2) && BYTE2(a1) == BYTE2(a2);
  return (unsigned __int16)a1 == (unsigned __int16)a2 && v2;
}

double __RKMaterialParameterBlock.Parameter.init(nilLiteral:)@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 64) = 19;
  return result;
}

double __RKMaterialParameterBlock.Parameter.init(floatLiteral:)@<D0>(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 2;
  return result;
}

double __RKMaterialParameterBlock.Parameter.init(integerLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = COERCE_UNSIGNED_INT((float)a1);
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 2;
  return result;
}

double protocol witness for ExpressibleByNilLiteral.init(nilLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 64) = 19;
  return result;
}

double protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 2;
  return result;
}

double protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance __RKMaterialParameterBlock.Parameter@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = COERCE_UNSIGNED_INT((float)*a1);
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 2;
  return result;
}

RealityKit::__RKMaterialParameterBlock::TransparentPass_optional __swiftcall __RKMaterialParameterBlock.TransparentPass.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKMaterialParameterBlock.TransparentPass.init(rawValue:), v3);
  result.int value = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKMaterialParameterBlock.TransparentPass.allCases.getter()
{
  return &outlined read-only object #0 of static __RKMaterialParameterBlock.TransparentPass.allCases.getter;
}

unint64_t __RKMaterialParameterBlock.TransparentPass.rawValue.getter()
{
  unint64_t result = 0x726170736E617254;
  switch(*v0)
  {
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKMaterialParameterBlock.TransparentPass(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKMaterialParameterBlock.TransparentPass()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKMaterialParameterBlock.TransparentPass()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKMaterialParameterBlock.TransparentPass()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

RealityKit::__RKMaterialParameterBlock::TransparentPass_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKMaterialParameterBlock.TransparentPass(Swift::String *a1)
{
  return __RKMaterialParameterBlock.TransparentPass.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKMaterialParameterBlock.TransparentPass(void *a1@<X8>)
{
  unint64_t v2 = 0xEB00000000746E65;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00005241746E65;
      goto LABEL_3;
    case 2:
      *a1 = 0xD00000000000001ALL;
      a1[1] = 0x800000022834DCB0;
      break;
    case 3:
      *a1 = 0xD00000000000001CLL;
      a1[1] = 0x800000022834DCD0;
      break;
    default:
LABEL_3:
      *a1 = 0x726170736E617254;
      a1[1] = v2;
      break;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.TransparentPass(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.TransparentPass;
}

RealityKit::__RKMaterialParameterBlock::OpaquePass_optional __swiftcall __RKMaterialParameterBlock.OpaquePass.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKMaterialParameterBlock.OpaquePass.init(rawValue:), v3);
  result.int value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKMaterialParameterBlock.OpaquePass.allCases.getter()
{
  return &outlined read-only object #0 of static __RKMaterialParameterBlock.OpaquePass.allCases.getter;
}

unint64_t __RKMaterialParameterBlock.OpaquePass.rawValue.getter()
{
  unint64_t result = 0x65757161704FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x524165757161704FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x776F64616853;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKMaterialParameterBlock.OpaquePass(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKMaterialParameterBlock.OpaquePass()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKMaterialParameterBlock.OpaquePass()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKMaterialParameterBlock.OpaquePass()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

RealityKit::__RKMaterialParameterBlock::OpaquePass_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKMaterialParameterBlock.OpaquePass(Swift::String *a1)
{
  return __RKMaterialParameterBlock.OpaquePass.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKMaterialParameterBlock.OpaquePass@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = __RKMaterialParameterBlock.OpaquePass.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.OpaquePass(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKMaterialParameterBlock.OpaquePass;
}

uint64_t __RKMaterialParameterBlock.transparentPassTechniqueMapping.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL __RKMaterialParameterBlock.transparentPassTechniqueMappingEnabled.getter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int PassTechniqueMapping = REMaterialParameterBlockValueGetPassTechniqueMapping();
  swift_release();
  if (PassTechniqueMapping) {
    return 1;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  int v1 = REMaterialParameterBlockValueGetPassTechniqueMapping();
  swift_release();
  if (v1) {
    return 1;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char v2 = REMaterialParameterBlockValueGetPassTechniqueMapping();
  swift_release();
  if (v2) {
    return 1;
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char v3 = REMaterialParameterBlockValueGetPassTechniqueMapping();
  swift_release();
  return (v3 & 1) != 0;
}

Swift::Void __swiftcall __RKMaterialParameterBlock.setTransparentPassTechniqueMappingEnabled(_:)(Swift::Bool a1)
{
  int v3 = *((unsigned __int8 *)v1 + 8);
  uint64_t v4 = v1[2];
  if (v3 == 1)
  {
    uint64_t v5 = *v1;
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(v5 + 16);
    if (!v6)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      if (a1) {
        return;
      }
      goto LABEL_17;
    }
  }
  else if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(v4 + 16);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!a1)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    if (v4) {
      char v8 = v3;
    }
    else {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v1[2] = MEMORY[0x263F8EE78];
    }
    uint64_t v9 = 0;
    do
    {
      char v10 = outlined read-only object #0 of __RKMaterialParameterBlock.setTransparentPassTechniqueMappingEnabled(_:)[v9++ + 32];
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int PassTechniqueMapping = REMaterialParameterBlockValueGetPassTechniqueMapping();
      swift_release();
      if (PassTechniqueMapping)
      {
        if ((v3 & 1) == 0)
        {
          uint64_t v12 = (void *)v1[2];
          if (v12)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
            }
            unint64_t v14 = v12[2];
            unint64_t v13 = v12[3];
            if (v14 >= v13 >> 1) {
              uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
            }
            long long v12[2] = v14 + 1;
            uint64_t v15 = &v12[2 * v14];
            *((unsigned char *)v15 + 32) = v10;
            v15[5] = 0;
            v1[2] = (uint64_t)v12;
          }
        }
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REMaterialParameterBlockValueRemovePassTechniqueMapping();
        swift_release();
      }
    }
    while (v9 != 4);
    return;
  }
  uint64_t v7 = v5 + 40;
  do
  {
    v7 += 16;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialParameterBlockValueAddHashedPassTechniqueMapping();
    swift_release();
    --v6;
  }
  while (v6);

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __RKMaterialParameterBlock.reset()()
{
  uint64_t v1 = REMaterialParameterBlockValueCreate();

  *(void *)(v0 + 24) = v1;
}

void __RKMaterialParameterBlock.unsafeSet(parameter:value:)(const char *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v41 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 64);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v14 = REMaterialParameterBlockValueCopy();
    uint64_t v15 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = v14;
  }
  switch(v11)
  {
    case 1:
      *(void *)&long long v42 = v5;
      *((void *)&v42 + 1) = v4;
      uint64_t v43 = v7;
      __int16 v44 = v6;
      char v45 = BYTE2(v6);
      char v46 = BYTE3(v6);
      __RKMaterialParameterBlock.setTextureParameter(texture:key:)((uint64_t)&v42, a1);
      break;
    case 2:
      REMaterialParameterBlockValueSetFloat();
      break;
    case 3:
      REMaterialParameterBlockValueSetFloat2();
      break;
    case 4:
      uint64_t v16 = *(void *)(v2 + 24);
      v17.n128_u64[0] = (unint64_t)v5;
      v17.n128_u64[1] = v4;
      MEMORY[0x270F1EA20](v16, a1, v17);
      break;
    case 5:
      REMaterialParameterBlockValueSetFloat4();
      break;
    case 6:
      v5;
      long long v42 = 0uLL;
      if (REMaterialParameterBlockValueGetParameterType() == 19)
      {
        RECGColorToColorGamut();
        REMaterialParameterBlockValueSetColor3();
      }
      else
      {
        RECGColorToColorGamut();
        REMaterialParameterBlockValueSetColor4();
      }
      outlined consume of __RKMaterialParameterBlock.Parameter(v5, v4, v7, v6, v8, v41, v10, v9, 6);
      break;
    case 7:
      uint64_t v18 = *(void *)(v2 + 24);
      v12.n128_u64[0] = (unint64_t)v5;
      v13.n128_u64[0] = v4;
      MEMORY[0x270F1EA18](v18, a1, v12, v13);
      break;
    case 8:
      uint64_t v19 = *(void *)(v2 + 24);
      v20.n128_u64[0] = (unint64_t)v5;
      v20.n128_u64[1] = v4;
      v21.n128_u64[0] = v7;
      v21.n128_u64[1] = v6;
      v22.n128_u64[0] = v8;
      v22.n128_u64[1] = v41;
      MEMORY[0x270F1EA28](v19, a1, v20, v21, v22);
      break;
    case 9:
      uint64_t v23 = *(void *)(v2 + 24);
      v24.n128_u64[0] = (unint64_t)v5;
      v24.n128_u64[1] = v4;
      v25.n128_u64[0] = v7;
      v25.n128_u64[1] = v6;
      v26.n128_u64[0] = v8;
      v26.n128_u64[1] = v41;
      v27.n128_u64[0] = v10;
      v27.n128_u64[1] = v9;
      MEMORY[0x270F1EA38](v23, a1, v24, v25, v26, v27);
      break;
    case 10:
      uint64_t v28 = *(void *)(v2 + 24);
      MEMORY[0x270F1E9F0](v28, a1, v5 & 1);
      break;
    case 11:
      uint64_t v29 = *(void *)(v2 + 24);
      MEMORY[0x270F1EA40](v29, a1, v5);
      break;
    case 12:
      uint64_t v30 = *(void *)(v2 + 24);
      v12.n128_u64[0] = (unint64_t)v5;
      MEMORY[0x270F1EA48](v30, a1, v12);
      break;
    case 13:
      uint64_t v31 = *(void *)(v2 + 24);
      v32.n128_u64[0] = (unint64_t)v5;
      v32.n128_u64[1] = v4;
      MEMORY[0x270F1EA50](v31, a1, v32);
      break;
    case 14:
      uint64_t v33 = *(void *)(v2 + 24);
      v34.n128_u64[0] = (unint64_t)v5;
      v34.n128_u64[1] = v4;
      MEMORY[0x270F1EA58](v33, a1, v34);
      break;
    case 15:
      uint64_t v35 = *(void *)(v2 + 24);
      MEMORY[0x270F1EA78](v35, a1, v5);
      break;
    case 16:
      uint64_t v36 = *(void *)(v2 + 24);
      v12.n128_u64[0] = (unint64_t)v5;
      MEMORY[0x270F1EA80](v36, a1, v12);
      break;
    case 17:
      uint64_t v37 = *(void *)(v2 + 24);
      v38.n128_u64[0] = (unint64_t)v5;
      v38.n128_u64[1] = v4;
      MEMORY[0x270F1EA88](v37, a1, v38);
      break;
    case 18:
      uint64_t v39 = *(void *)(v2 + 24);
      v40.n128_u64[0] = (unint64_t)v5;
      v40.n128_u64[1] = v4;
      MEMORY[0x270F1EA90](v39, a1, v40);
      break;
    case 19:
      REMaterialParameterBlockValueClearParameter();
      break;
    default:
      REMaterialParameterBlockValueSetTextureFromAsset();
      break;
  }
}

uint64_t __RKMaterialParameterBlock.setTextureParameter(texture:key:)(uint64_t a1, const char *a2)
{
  int v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 25);
  int v7 = *(unsigned __int8 *)(a1 + 26);
  int v8 = *(unsigned __int8 *)(a1 + 27);
  REMaterialParameterBlockValueSetTextureFromAsset();
  if (v3)
  {
    id v9 = v3;
    objc_msgSend(v9, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for MTLSamplerDescriptor();
    swift_dynamicCast();

    size_t v10 = strlen(a2);
    uint64_t v11 = String.count.getter();
    BOOL v12 = __OFADD__(v10, v11);
    size_t v13 = v10 + v11;
    if (v12)
    {
      __break(1u);
      goto LABEL_22;
    }
    MEMORY[0x270FA5388](v13);
    String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
    v14._uint64_t countAndFlagsBits = 0x72656C706D61735FLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    String.utf8CString.getter();
    REMaterialParameterBlockValueSetSampler();
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialParameterBlockValueBindTextureToSamplerWithDefaultArray();
    swift_release();
  }
  if (!v4)
  {
    REMaterialParameterBlockValueClearUVIndexForTexture();
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
  {
LABEL_22:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  REMaterialParameterBlockValueSetUVIndexForTexture();
LABEL_9:
  if (v8 == 5 && v5 == 2 && v6 == 3 && v7 == 4) {
    return REMaterialParameterBlockValueClearSwizzleForTexture();
  }
  else {
    return REMaterialParameterBlockValueSetSwizzleForTexture();
  }
}

unsigned char *closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(unsigned char *result, uint64_t a2, uint64_t a3, char *a4)
{
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a3)
    {
      int v4 = *a4;
      if (v4 < 0)
      {
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        int v5 = a4 + 1;
        uint64_t v6 = a3 - 1;
        while (1)
        {
          *uint64_t result = v4;
          if (!v6) {
            break;
          }
          int v7 = *v5++;
          LOBYTE(v4) = v7;
          ++result;
          --v6;
          if (v7 < 0) {
            goto LABEL_7;
          }
        }
      }
    }
    return (unsigned char *)a3;
  }
  return result;
}

double closure #1 in __RKMaterialParameterBlock.get(parameter:)@<D0>(uint64_t a1@<X8>)
{
  switch(REMaterialParameterBlockValueGetParameterType())
  {
    case 1u:
      uint64_t Texture = REMaterialParameterBlockValueGetTexture();
      if (!Texture) {
        goto LABEL_41;
      }
      uint64_t v3 = Texture;
      if (REMaterialParameterBlockValueGetSamplerNameBoundToTexture()) {
        id v4 = (id)REMaterialParameterBlockValueCopySampler();
      }
      else {
        id v4 = 0;
      }
      type metadata accessor for TextureResource();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v3;
      *(void *)(v7 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      SwizzleForuint64_t Texture = REMaterialParameterBlockValueGetSwizzleForTexture();
      REMaterialParameterBlockValueGetUVIndexForTexture();
      if (v4)
      {
        uint64_t v9 = 0;
        if (!SwizzleForTexture) {
          uint64_t v9 = 84148994;
        }
        *(void *)a1 = v4;
        goto LABEL_50;
      }
      if (SwizzleForTexture == 1)
      {
        id v10 = (id)REMaterialCreateDefaultSamplerDescriptor();
        uint64_t v9 = 0;
        *(void *)a1 = v10;
LABEL_50:
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = v9;
        double result = 0.0;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
        char v6 = 1;
        goto LABEL_42;
      }
      *(void *)a1 = v7;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    case 2u:
      if (!REMaterialParameterBlockValueGetFloat()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 2;
      goto LABEL_42;
    case 3u:
      if (!REMaterialParameterBlockValueGetFloat2()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 3;
      goto LABEL_42;
    case 4u:
      if (!REMaterialParameterBlockValueGetFloat3()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 4;
      goto LABEL_42;
    case 5u:
      if (!REMaterialParameterBlockValueGetFloat4()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 5;
      goto LABEL_42;
    case 6u:
      if (!REMaterialParameterBlockValueGetFloat2x2()) {
        goto LABEL_41;
      }
      double result = 0.0;
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 7;
      goto LABEL_42;
    case 7u:
      if (!REMaterialParameterBlockValueGetFloat3x3()) {
        goto LABEL_41;
      }
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      char v6 = 8;
      goto LABEL_42;
    case 8u:
      if (!REMaterialParameterBlockValueGetFloat4x4()) {
        goto LABEL_41;
      }
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 9;
      goto LABEL_42;
    case 9u:
      if (!REMaterialParameterBlockValueGetBool()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 10;
      goto LABEL_42;
    case 0xBu:
      if (!REMaterialParameterBlockValueGetInt()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 11;
      goto LABEL_42;
    case 0xCu:
      if (!REMaterialParameterBlockValueGetUInt()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 15;
      goto LABEL_42;
    case 0xDu:
      if (!REMaterialParameterBlockValueGetInt2()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 12;
      goto LABEL_42;
    case 0xEu:
      if (!REMaterialParameterBlockValueGetUInt2()) {
        goto LABEL_41;
      }
      *(void *)a1 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 16;
      goto LABEL_42;
    case 0xFu:
      if (!REMaterialParameterBlockValueGetInt3()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 13;
      goto LABEL_42;
    case 0x10u:
      if (!REMaterialParameterBlockValueGetUInt3()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 17;
      goto LABEL_42;
    case 0x11u:
      if (!REMaterialParameterBlockValueGetInt4()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 14;
      goto LABEL_42;
    case 0x12u:
      if (!REMaterialParameterBlockValueGetUInt4()) {
        goto LABEL_41;
      }
      *(_OWORD *)a1 = 0uLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v6 = 18;
      goto LABEL_42;
    case 0x13u:
      if (REMaterialParameterBlockValueGetColor3()) {
        goto LABEL_40;
      }
      goto LABEL_41;
    case 0x14u:
      if (!REMaterialParameterBlockValueGetColor4()) {
        goto LABEL_41;
      }
LABEL_40:
      *(void *)a1 = RECreateCGColorFromColorGamut();
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v6 = 6;
      goto LABEL_42;
    default:
LABEL_41:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      char v6 = -1;
LABEL_42:
      *(unsigned char *)(a1 + 64) = v6;
      return result;
  }
}

uint64_t __RKMaterialParameterBlock.init(transparentPassTechniqueMappping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 48;
    int v5 = (void *)MEMORY[0x263F8EE78];
    do
    {
      char v6 = *(unsigned char *)(v4 - 16);
      String.utf8CString.getter();
      uint64_t v7 = REMaterialParameterBlockArrayComponentHashTechniqueName();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      if (v9 >= v8 >> 1) {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v5);
      }
      v4 += 24;
      _OWORD v5[2] = v9 + 1;
      id v10 = &v5[2 * v9];
      *((unsigned char *)v10 + 32) = v6;
      void v10[5] = v7;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v5 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t __RKMaterialParameterBlock.init(hashedTransparentPassTechniqueMapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(a1);
  swift_bridgeObjectRelease();
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = result;
  return result;
}

id static __RKMaterialParameterBlock.__fromCore(_:index:)@<X0>(uint64_t a1@<X8>)
{
  id result = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
  if (result)
  {
    *(void *)a1 = MEMORY[0x263F8EE78];
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = result;
  }
  else
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __RKMaterialParameterBlock.__toCore(_:index:)()
{
  return REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MTLTextureSwizzleChannels(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[3] != a2[3]) {
    return 0;
  }
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t specialized static __RKMaterialParameterBlock.Parameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float32x2_t v3 = *(float32x2_t *)a1;
  float32x2_t v2 = *(float32x2_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
  float32x2_t v11 = *(float32x2_t *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  int v19 = *(unsigned __int8 *)(a2 + 64);
  v135[0] = v3;
  v135[1] = v2;
  v135[2] = v5;
  v135[3] = v4;
  v135[4] = v7;
  v135[5] = v6;
  v135[6] = v9;
  v135[7] = v8;
  char v136 = v10;
  float32x2_t v137 = v11;
  uint64_t v138 = v12;
  uint64_t v139 = v14;
  uint64_t v140 = v13;
  uint64_t v141 = v15;
  uint64_t v142 = v16;
  uint64_t v143 = v18;
  uint64_t v144 = v17;
  char v145 = v19;
  switch(v10)
  {
    case 1:
      if (v19 == 1)
      {
        v131[0] = v3;
        v131[1] = v2;
        uint64_t v85 = (uint64_t)v2;
        v131[2] = v5;
        __n128 v26 = (void *)v3;
        __int16 v132 = v4;
        char v133 = BYTE2(v4);
        char v134 = BYTE3(v4);
        v127[0] = v11;
        v127[1] = v12;
        v127[2] = v14;
        __int16 v128 = v13;
        char v129 = BYTE2(v13);
        char v130 = BYTE3(v13);
        unint64_t v88 = (void *)v11;
        uint64_t v91 = v17;
        uint64_t v94 = v15;
        uint64_t v97 = v16;
        uint64_t v106 = v12;
        outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)&v11, v12, v14, v13, v15, v16, v18, v17, 1);
        unint64_t v83 = v26;
        outlined copy of __RKMaterialParameterBlock.Parameter(v26, v85, v5, v4, v7, v6, v9, v8, 1);
        outlined copy of __RKMaterialParameterBlock.Parameter(v26, v85, v5, v4, v7, v6, v9, v8, 1);
        outlined copy of __RKMaterialParameterBlock.Parameter(v88, v106, v14, v13, v94, v97, v18, v91, 1);
        LOBYTE(v26) = specialized static MaterialParameters.Texture.== infix(_:_:)((uint64_t)v131, (uint64_t)v127, v25);
        outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
        outlined consume of __RKMaterialParameterBlock.Parameter(v88, v106, v14, v13, v94, v97, v18, v91, 1);
        outlined consume of __RKMaterialParameterBlock.Parameter(v83, v85, v5, v4, v7, v6, v9, v8, 1);
        return v26 & 1;
      }
      float32x2_t v20 = v11;
      uint64_t v21 = v12;
      uint64_t v22 = v16;
      uint64_t v23 = v15;
      uint64_t v24 = v17;
      id v75 = *(id *)&v3;
      goto LABEL_62;
    case 2:
      if (v19 != 2) {
        goto LABEL_64;
      }
      float v27 = v3.f32[0];
      float v28 = v11.f32[0];
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      if (v27 != v28) {
        goto LABEL_65;
      }
      goto LABEL_68;
    case 3:
      if (v19 != 3) {
        goto LABEL_64;
      }
      float32x2_t v29 = v11;
      float32x2_t v30 = v3;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      if (v30.f32[0] != v29.f32[0] || v30.f32[1] != v29.f32[1]) {
        goto LABEL_65;
      }
      goto LABEL_68;
    case 4:
      if (v19 != 4) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v31 = v3;
      *((float32x2_t *)&v31 + 1) = v2;
      long long v107 = v31;
      *(float32x2_t *)&long long v31 = v11;
      *((void *)&v31 + 1) = v12;
      long long v98 = v31;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v32 = 0;
      while (1)
      {
        long long v115 = v107;
        float v78 = *(float *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
        long long v116 = v98;
        float v79 = *(float *)((unint64_t)&v116 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
        BOOL v33 = v78 == v79;
        if (v32 == 2) {
          goto LABEL_75;
        }
        while (1)
        {
          ++v32;
          if (v33) {
            break;
          }
          if (v32 == 2) {
            goto LABEL_65;
          }
          BOOL v33 = 0;
        }
      }
    case 5:
      if (v19 != 5) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v34 = v3;
      *((float32x2_t *)&v34 + 1) = v2;
      long long v108 = v34;
      *(float32x2_t *)&long long v34 = v11;
      *((void *)&v34 + 1) = v12;
      long long v99 = v34;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v35 = 0;
      while (1)
      {
        long long v117 = v108;
        float v78 = *(float *)((unint64_t)&v117 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        long long v118 = v99;
        float v79 = *(float *)((unint64_t)&v118 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        BOOL v36 = v78 == v79;
        if (v35 == 3) {
          break;
        }
        while (1)
        {
          ++v35;
          if (v36) {
            break;
          }
          if (v35 == 3) {
            goto LABEL_65;
          }
          BOOL v36 = 0;
        }
      }
LABEL_75:
      if (v78 != v79) {
        goto LABEL_65;
      }
      goto LABEL_68;
    case 6:
      uint64_t v92 = v17;
      uint64_t v95 = v15;
      uint64_t v100 = v16;
      uint64_t v109 = v12;
      uint64_t v89 = (void *)v11;
      if (v19 == 6)
      {
        uint64_t v37 = (void *)v3;
        uint64_t v86 = (uint64_t)v2;
        type metadata accessor for CGColorRef(0);
        outlined copy of __RKMaterialParameterBlock.Parameter(v37, v86, v5, v4, v7, v6, v9, v8, 6);
        outlined copy of __RKMaterialParameterBlock.Parameter(v89, v109, v14, v13, v95, v100, v18, v92, 6);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
        char v38 = static _CFObject.== infix(_:_:)();
        outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
        return v38 & 1;
      }
      id v76 = *(id *)&v3;
      float32x2_t v11 = (float32x2_t)v89;
      uint64_t v17 = v92;
      uint64_t v12 = v109;
      uint64_t v15 = v95;
      uint64_t v16 = v100;
      goto LABEL_64;
    case 7:
      if (v19 != 7) {
        goto LABEL_64;
      }
      uint32x2_t v40 = (uint32x2_t)vand_s8((int8x8_t)vceq_f32(v2, (float32x2_t)v12), (int8x8_t)vceq_f32(v3, v11));
      unsigned int v41 = vpmin_u32(v40, v40).u32[0];
      goto LABEL_51;
    case 8:
      if (v19 != 8) {
        goto LABEL_64;
      }
      v64.i64[0] = v7;
      v64.i64[1] = v6;
      v65.i64[0] = v5;
      v65.i64[1] = v4;
      *(float32x2_t *)v66.f32 = v3;
      *(float32x2_t *)&v66.u32[2] = v2;
      *(float32x2_t *)v67.f32 = v11;
      v67.i64[1] = v12;
      v68.i64[0] = v14;
      v68.i64[1] = v13;
      v69.i64[0] = v15;
      v69.i64[1] = v16;
      uint32x4_t v50 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v65, v68), (int8x16_t)vceqq_f32(v66, v67)), (int8x16_t)vceqq_f32(v64, v69));
      v50.i32[3] = v50.i32[2];
      goto LABEL_50;
    case 9:
      if (v19 != 9) {
        goto LABEL_64;
      }
      v42.i64[0] = v9;
      v42.i64[1] = v8;
      v43.i64[0] = v7;
      v43.i64[1] = v6;
      v44.i64[0] = v5;
      v44.i64[1] = v4;
      *(float32x2_t *)v45.f32 = v3;
      *(float32x2_t *)&v45.u32[2] = v2;
      *(float32x2_t *)v46.f32 = v11;
      v46.i64[1] = v12;
      v47.i64[0] = v14;
      v47.i64[1] = v13;
      v48.i64[0] = v15;
      v48.i64[1] = v16;
      v49.i64[0] = v18;
      v49.i64[1] = v17;
      uint32x4_t v50 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v44, v47), (int8x16_t)vceqq_f32(v45, v46)), vandq_s8((int8x16_t)vceqq_f32(v43, v48), (int8x16_t)vceqq_f32(v42, v49)));
LABEL_50:
      unsigned int v41 = vminvq_u32(v50);
LABEL_51:
      LODWORD(v26) = v41 >> 31;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      return v26 & 1;
    case 10:
      if (v19 != 10) {
        goto LABEL_64;
      }
      BOOL v70 = (v3.i8[0] & 1) == 0;
      __int8 v71 = v11.i8[0];
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      LOBYTE(v26) = v70 ^ v71;
      return v26 & 1;
    case 11:
      if (v19 != 11) {
        goto LABEL_64;
      }
      goto LABEL_40;
    case 12:
      if (v19 == 12) {
        goto LABEL_42;
      }
      goto LABEL_64;
    case 13:
      if (v19 != 13) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v51 = v3;
      *((float32x2_t *)&v51 + 1) = v2;
      long long v110 = v51;
      *(float32x2_t *)&long long v51 = v11;
      *((void *)&v51 + 1) = v12;
      long long v101 = v51;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v52 = 0;
      while (1)
      {
        long long v119 = v110;
        int v80 = *(_DWORD *)((unint64_t)&v119 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
        long long v120 = v101;
        int v81 = *(_DWORD *)((unint64_t)&v120 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
        BOOL v53 = v80 == v81;
        if (v52 == 2) {
          goto LABEL_89;
        }
        while (1)
        {
          ++v52;
          if (v53) {
            break;
          }
          if (v52 == 2) {
            goto LABEL_65;
          }
          BOOL v53 = 0;
        }
      }
    case 14:
      if (v19 != 14) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v54 = v3;
      *((float32x2_t *)&v54 + 1) = v2;
      long long v111 = v54;
      *(float32x2_t *)&long long v54 = v11;
      *((void *)&v54 + 1) = v12;
      long long v102 = v54;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v55 = 0;
      while (1)
      {
        long long v121 = v111;
        int v80 = *(_DWORD *)((unint64_t)&v121 & 0xFFFFFFFFFFFFFFF3 | (4 * (v55 & 3)));
        long long v122 = v102;
        int v81 = *(_DWORD *)((unint64_t)&v122 & 0xFFFFFFFFFFFFFFF3 | (4 * (v55 & 3)));
        BOOL v56 = v80 == v81;
        if (v55 == 3) {
          goto LABEL_89;
        }
        while (1)
        {
          ++v55;
          if (v56) {
            break;
          }
          if (v55 == 3) {
            goto LABEL_65;
          }
          BOOL v56 = 0;
        }
      }
    case 15:
      if (v19 != 15) {
        goto LABEL_64;
      }
LABEL_40:
      __int32 v57 = v11.i32[0];
      __int32 v58 = v3.i32[0];
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      LOBYTE(v26) = v58 == v57;
      return v26 & 1;
    case 16:
      if (v19 != 16) {
        goto LABEL_64;
      }
LABEL_42:
      float32x2_t v59 = v11;
      float32x2_t v60 = v3;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      if (*(void *)&v60 == *(void *)&v59) {
        goto LABEL_68;
      }
      goto LABEL_65;
    case 17:
      if (v19 != 17) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v61 = v3;
      *((float32x2_t *)&v61 + 1) = v2;
      long long v112 = v61;
      *(float32x2_t *)&long long v61 = v11;
      *((void *)&v61 + 1) = v12;
      long long v103 = v61;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v62 = 0;
      while (1)
      {
        long long v123 = v112;
        int v80 = *(_DWORD *)((unint64_t)&v123 & 0xFFFFFFFFFFFFFFF3 | (4 * (v62 & 3)));
        long long v124 = v103;
        int v81 = *(_DWORD *)((unint64_t)&v124 & 0xFFFFFFFFFFFFFFF3 | (4 * (v62 & 3)));
        BOOL v63 = v80 == v81;
        if (v62 == 2) {
          goto LABEL_89;
        }
        while (1)
        {
          ++v62;
          if (v63) {
            break;
          }
          if (v62 == 2) {
            goto LABEL_65;
          }
          BOOL v63 = 0;
        }
      }
    case 18:
      if (v19 != 18) {
        goto LABEL_64;
      }
      *(float32x2_t *)&long long v72 = v3;
      *((float32x2_t *)&v72 + 1) = v2;
      long long v113 = v72;
      *(float32x2_t *)&long long v72 = v11;
      *((void *)&v72 + 1) = v12;
      long long v104 = v72;
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      uint64_t v73 = 0;
      break;
    case 19:
      if (v19 != 19 || v12 | *(void *)&v11 | v14 | v13 | v15 | v16 | v18 | v17) {
        goto LABEL_64;
      }
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      LOBYTE(v26) = 1;
      return v26 & 1;
    default:
      if (!v19)
      {
        uint64_t v90 = (void *)v11;
        uint64_t v93 = v17;
        uint64_t v96 = v15;
        uint64_t v105 = v16;
        uint64_t v84 = (void *)v3;
        uint64_t v114 = v12;
        uint64_t v77 = (uint64_t)v2;
        outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)&v11, v12, v14, v13, v15, v16, v18, v17, 0);
        uint64_t v87 = v77;
        outlined copy of __RKMaterialParameterBlock.Parameter(v84, v77, v5, v4, v7, v6, v9, v8, 0);
        outlined copy of __RKMaterialParameterBlock.Parameter(v84, v77, v5, v4, v7, v6, v9, v8, 0);
        outlined copy of __RKMaterialParameterBlock.Parameter(v90, v114, v14, v13, v96, v105, v18, v93, 0);
        outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
        unint64_t v82 = (void *)v84[2];
        __n128 v26 = (void *)v90[2];
        outlined consume of __RKMaterialParameterBlock.Parameter(v90, v114, v14, v13, v96, v105, v18, v93, 0);
        outlined consume of __RKMaterialParameterBlock.Parameter(v84, v87, v5, v4, v7, v6, v9, v8, 0);
        LOBYTE(v26) = v82 == v26;
        return v26 & 1;
      }
      float32x2_t v20 = v11;
      uint64_t v21 = v12;
      uint64_t v22 = v16;
      uint64_t v23 = v15;
      uint64_t v24 = v17;
LABEL_62:
      swift_retain();
      uint64_t v17 = v24;
      uint64_t v15 = v23;
      uint64_t v16 = v22;
      uint64_t v12 = v21;
      float32x2_t v11 = v20;
LABEL_64:
      outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)&v11, v12, v14, v13, v15, v16, v18, v17, v19);
      outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)((uint64_t)v135);
      goto LABEL_65;
  }
  while (1)
  {
    long long v125 = v113;
    int v80 = *(_DWORD *)((unint64_t)&v125 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    long long v126 = v104;
    int v81 = *(_DWORD *)((unint64_t)&v126 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73 & 3)));
    BOOL v74 = v80 == v81;
    if (v73 == 3) {
      break;
    }
    while (1)
    {
      ++v73;
      if (v74) {
        break;
      }
      if (v73 == 3) {
        goto LABEL_65;
      }
      BOOL v74 = 0;
    }
  }
LABEL_89:
  if (v80 == v81) {
LABEL_68:
  }
    LOBYTE(v26) = 1;
  else {
LABEL_65:
  }
    LOBYTE(v26) = 0;
  return v26 & 1;
}

unint64_t lazy protocol witness table accessor for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass;
  if (!lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKMaterialParameterBlock.TransparentPass and conformance __RKMaterialParameterBlock.TransparentPass);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKMaterialParameterBlock.TransparentPass()
{
  return lazy protocol witness table accessor for type [Component] and conformance [A](&lazy protocol witness table cache variable for type [__RKMaterialParameterBlock.TransparentPass] and conformance [A], &demangling cache variable for type metadata for [__RKMaterialParameterBlock.TransparentPass]);
}

unint64_t lazy protocol witness table accessor for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass;
  if (!lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKMaterialParameterBlock.OpaquePass and conformance __RKMaterialParameterBlock.OpaquePass);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKMaterialParameterBlock.OpaquePass()
{
  return lazy protocol witness table accessor for type [Component] and conformance [A](&lazy protocol witness table cache variable for type [__RKMaterialParameterBlock.OpaquePass] and conformance [A], &demangling cache variable for type metadata for [__RKMaterialParameterBlock.OpaquePass]);
}

void destroy for __RKMaterialParameterBlock(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  float32x2_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  float32x2_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a2 + 24);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for __RKMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock()
{
  return &type metadata for __RKMaterialParameterBlock;
}

void destroy for __RKMaterialParameterBlock.Parameter(uint64_t a1)
{
}

uint64_t initializeWithCopy for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of __RKMaterialParameterBlock.Parameter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of __RKMaterialParameterBlock.Parameter(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for __RKMaterialParameterBlock.Parameter(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of __RKMaterialParameterBlock.Parameter(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKMaterialParameterBlock.Parameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xED && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 237);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x13) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKMaterialParameterBlock.Parameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 237;
    if (a3 >= 0xED) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xED) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __RKMaterialParameterBlock.Parameter(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 0x12u) {
    return *(unsigned __int8 *)(a1 + 64);
  }
  else {
    return (*(_DWORD *)a1 + 19);
  }
}

uint64_t destructiveInjectEnumTag for __RKMaterialParameterBlock.Parameter(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x13)
  {
    *(void *)unint64_t result = a2 - 19;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    LOBYTE(a2) = 19;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.Parameter()
{
  return &type metadata for __RKMaterialParameterBlock.Parameter;
}

unsigned char *storeEnumTagSinglePayload for __RKMaterialParameterBlock.TransparentPass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22825E818);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.TransparentPass()
{
  return &type metadata for __RKMaterialParameterBlock.TransparentPass;
}

unsigned char *storeEnumTagSinglePayload for __RKMaterialParameterBlock.OpaquePass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22825E91CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKMaterialParameterBlock.OpaquePass()
{
  return &type metadata for __RKMaterialParameterBlock.OpaquePass;
}

uint64_t outlined release of (__RKMaterialParameterBlock.Parameter, __RKMaterialParameterBlock.Parameter)(uint64_t a1)
{
  float32x2_t v2 = *(void **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  char v10 = *(unsigned char *)(a1 + 144);
  outlined consume of __RKMaterialParameterBlock.Parameter(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of __RKMaterialParameterBlock.Parameter(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

unint64_t type metadata accessor for MTLSamplerDescriptor()
{
  unint64_t result = lazy cache variable for type metadata for MTLSamplerDescriptor;
  if (!lazy cache variable for type metadata for MTLSamplerDescriptor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MTLSamplerDescriptor);
  }
  return result;
}

unsigned char *partial apply for closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(unsigned char *a1, uint64_t a2)
{
  return closure #2 in __RKMaterialParameterBlock.setTextureParameter(texture:key:)(a1, a2, *(void *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t partial apply for closure #1 in __RKMaterialParameterBlock.clear(parameter:)()
{
  return REMaterialParameterBlockValueClearParameter();
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(_OWORD *a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t *))swift_allocObject();
  long long v5 = a1[3];
  *((_OWORD *)v4 + 3) = a1[2];
  *((_OWORD *)v4 + 4) = v5;
  long long v6 = a1[5];
  *((_OWORD *)v4 + 5) = a1[4];
  *((_OWORD *)v4 + 6) = v6;
  long long v7 = a1[1];
  *((_OWORD *)v4 + 1) = *a1;
  *((_OWORD *)v4 + 2) = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  long long v9 = a1[3];
  *((_OWORD *)v8 + 3) = a1[2];
  *((_OWORD *)v8 + 4) = v9;
  long long v10 = a1[5];
  *((_OWORD *)v8 + 5) = a1[4];
  *((_OWORD *)v8 + 6) = v10;
  long long v11 = a1[1];
  *((_OWORD *)v8 + 1) = *a1;
  *((_OWORD *)v8 + 2) = v11;
  void v19[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.And<Entity>);
  _OWORD v19[4] = &protocol witness table for QueryPredicates.And<A>;
  char v12 = (_OWORD *)swift_allocObject();
  v19[0] = v12;
  long long v13 = a1[3];
  void v12[3] = a1[2];
  id v12[4] = v13;
  long long v14 = a1[5];
  uint64_t v12[5] = a1[4];
  v12[6] = v14;
  long long v15 = a1[1];
  v12[1] = *a1;
  long long v12[2] = v15;
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  uint64_t v16 = swift_allocObject();
  outlined init with take of BindableDataInternal(v18, v16 + 16);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = v4;
  a2[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a2[3] = (uint64_t (*)(uint64_t *))v16;
  a2[4] = (uint64_t (*)(uint64_t *))partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
  a2[5] = v8;
  return result;
}

{
  uint64_t (*v4)(uint64_t *);
  long long v5;
  long long v6;
  long long v7;
  uint64_t (*v8)(uint64_t *);
  long long v9;
  long long v10;
  long long v11;
  _OWORD *v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t result;
  long long v18[2];
  void v19[5];

  uint64_t v4 = (uint64_t (*)(uint64_t *))swift_allocObject();
  long long v5 = a1[3];
  *((_OWORD *)v4 + 3) = a1[2];
  *((_OWORD *)v4 + 4) = v5;
  long long v6 = a1[5];
  *((_OWORD *)v4 + 5) = a1[4];
  *((_OWORD *)v4 + 6) = v6;
  long long v7 = a1[1];
  *((_OWORD *)v4 + 1) = *a1;
  *((_OWORD *)v4 + 2) = v7;
  uint64_t v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  long long v9 = a1[3];
  *((_OWORD *)v8 + 3) = a1[2];
  *((_OWORD *)v8 + 4) = v9;
  long long v10 = a1[5];
  *((_OWORD *)v8 + 5) = a1[4];
  *((_OWORD *)v8 + 6) = v10;
  long long v11 = a1[1];
  *((_OWORD *)v8 + 1) = *a1;
  *((_OWORD *)v8 + 2) = v11;
  void v19[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.Or<Entity>);
  _OWORD v19[4] = &protocol witness table for QueryPredicates.Or<A>;
  char v12 = (_OWORD *)swift_allocObject();
  v19[0] = v12;
  long long v13 = a1[3];
  void v12[3] = a1[2];
  id v12[4] = v13;
  long long v14 = a1[5];
  uint64_t v12[5] = a1[4];
  v12[6] = v14;
  long long v15 = a1[1];
  v12[1] = *a1;
  long long v12[2] = v15;
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  uint64_t v16 = swift_allocObject();
  outlined init with take of BindableDataInternal(v18, v16 + 16);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  outlined retain of QueryPredicates.Or<Entity>((uint64_t)a1);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = v4;
  a2[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a2[3] = (uint64_t (*)(uint64_t *))v16;
  a2[4] = (uint64_t (*)(uint64_t *))partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
  a2[5] = v8;
  return result;
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(uint64_t *a1)@<X8>)
{
  uint64_t v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = a2;
  *((void *)v8 + 4) = a3;
  long long v9 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((void *)v9 + 2) = a1;
  *((void *)v9 + 3) = a2;
  *((void *)v9 + 4) = a3;
  v13[3] = &type metadata for QueryPredicates.IsChild;
  void v13[4] = &protocol witness table for QueryPredicates.IsChild;
  v13[0] = a1;
  v13[1] = a2;
  _OWORD v13[2] = a3;
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  uint64_t v10 = swift_allocObject();
  outlined init with take of BindableDataInternal(v12, v10 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a4 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a4[1] = v8;
  a4[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a4[3] = (uint64_t (*)(uint64_t *))v10;
  a4[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a4[5] = v9;
  return result;
}

{
  uint64_t (*v8)(uint64_t *);
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  uint64_t result;
  long long v12[2];
  void v13[5];

  uint64_t v8 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = a2;
  *((void *)v8 + 4) = a3;
  long long v9 = (uint64_t (*)(uint64_t *))swift_allocObject();
  *((void *)v9 + 2) = a1;
  *((void *)v9 + 3) = a2;
  *((void *)v9 + 4) = a3;
  v13[3] = &type metadata for QueryPredicates.IsDescendant;
  void v13[4] = &protocol witness table for QueryPredicates.IsDescendant;
  v13[0] = a1;
  v13[1] = a2;
  _OWORD v13[2] = a3;
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  uint64_t v10 = swift_allocObject();
  outlined init with take of BindableDataInternal(v12, v10 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a1);
  swift_retain();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  *a4 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a4[1] = v8;
  a4[2] = (uint64_t (*)(uint64_t *))implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)partial apply;
  a4[3] = (uint64_t (*)(uint64_t *))v10;
  a4[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a4[5] = v9;
  return result;
}

uint64_t specialized QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  void v9[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryPredicates.CanInteract<Entity>);
  void v9[4] = &protocol witness table for QueryPredicates.CanInteract<A>;
  v9[0] = a1;
  outlined init with copy of __REAssetService((uint64_t)v9, (uint64_t)v8);
  uint64_t v6 = swift_allocObject();
  outlined init with take of BindableDataInternal(v8, v6 + 16);
  swift_retain_n();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  *a2 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a2[1] = (uint64_t (*)(uint64_t *))v4;
  a2[2] = (uint64_t (*)(uint64_t *))_s17RealityFoundation14QueryPredicateVyACyxGqd__c5ValueQyd__RszAA0cD8ProtocolRd__lufcs13OpaquePointerVSgycAA0C14Internalizable_pcfu3_AJycfu4_TA_0;
  a2[3] = (uint64_t (*)(uint64_t *))v6;
  a2[4] = (uint64_t (*)(uint64_t *))destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a2[5] = (uint64_t (*)(uint64_t *))v5;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = specialized HasHierarchy.parent.getter();
  if (a2)
  {
    uint64_t v7 = swift_retain();
    a4 = a2(v7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    if (v6)
    {
LABEL_3:
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(a4 + 16);
      swift_release();
      swift_release();
      return v8 == v9;
    }
    goto LABEL_6;
  }
  if (a4)
  {
    swift_retain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    swift_release();
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return 0;
  }
  swift_retain();
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_release();
    swift_unknownObjectRelease();
    return v6;
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v6 + 24) & 1) == 0)
  {
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  Entity.__interactionIdentifier.getter((uint64_t)v5);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  return v6;
}

uint64_t static QueryPredicate.has<A>(_:)@<X0>(uint64_t (**a1)()@<X8>)
{
  type metadata accessor for Entity();
  uint64_t v2 = type metadata accessor for QueryPredicates.Has();
  uint64_t WitnessTable = swift_getWitnessTable();
  return QueryPredicateProtocol.eraseToQueryPredicate()(v2, WitnessTable, a1);
}

uint64_t type metadata accessor for QueryPredicates.Has()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static QueryPredicate.hasAll<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static QueryPredicate.hasAll<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static QueryPredicate.hasAll<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAll<A, B>(_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAll<A, B, C>(_:_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAny<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static QueryPredicate.hasAll<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_OWORD *))
{
  static QueryPredicate.has<A>(_:)((uint64_t (**)())v11);
  static QueryPredicate.has<A>(_:)((uint64_t (**)())v10);
  v12[0] = v11[0];
  v12[1] = v11[1];
  long long v12[2] = v11[2];
  void v12[3] = v10[0];
  id v12[4] = v10[1];
  uint64_t v12[5] = v10[2];
  return a8(v12);
}

uint64_t static QueryPredicate.hasAny<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static QueryPredicate.hasAll<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAny<A, B>(_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a12)(_OWORD *))
{
  a11(v14, a1, a2, a3, a5, a6, a8, a9);
  static QueryPredicate.has<A>(_:)((uint64_t (**)())v13);
  v15[0] = v14[0];
  v15[1] = v14[1];
  void v15[2] = v14[2];
  uint64_t v15[3] = v13[0];
  void v15[4] = v13[1];
  v15[5] = v13[2];
  return a12(v15);
}

uint64_t static QueryPredicate.hasAny<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static QueryPredicate.hasAny<A, B, C>(_:_:_:), (uint64_t (*)(_OWORD *))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.hasAll<A, B, C, D>(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a15)(_OWORD *))
{
  a14(v17, a1, a2, a3, a4, a6, a7, a8, a10, a11, a12);
  static QueryPredicate.has<A>(_:)((uint64_t (**)())v16);
  v18[0] = v17[0];
  v18[1] = v17[1];
  long long v18[2] = v17[2];
  _OWORD v18[3] = v16[0];
  v18[4] = v16[1];
  v18[5] = v16[2];
  return a15(v18);
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.Has<A, B>(uint64_t *a1)
{
  return specialized QueryPredicates.Has.makeInternal()(a1[2], a1[3], a1[4]);
}

BOOL protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Has<A, B>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = specialized QueryPredicates.Has.evaluate(value:)(*a1, *(void *)(a2 + 16), *(ValueMetadata **)(a2 + 24), *(void *)(a2 + 32));
  *a3 = result;
  return result;
}

uint64_t QueryPredicates.CanInteract.evaluate(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return 0;
  }
  swift_retain();
  Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_release();
    swift_unknownObjectRelease();
    return v6;
  }
  swift_beginAccess();
  if (*(unsigned char *)(v6 + 24) != 1)
  {
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  Entity.__interactionIdentifier.getter((uint64_t)v5);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1;
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  return v6;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.CanInteract<A>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = QueryPredicates.CanInteract.evaluate(value:)(*a1, *v2);
  *a2 = result & 1;
  return result;
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2)
{
  return static QueryPredicate.isChild(of:)(a1, a2, (uint64_t (*)(void, void, uint64_t))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static QueryPredicate.isChild(of:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isDescendant(of:)(uint64_t a1, uint64_t a2)
{
  return static QueryPredicate.isChild(of:)(a1, a2, (uint64_t (*)(void, void, uint64_t))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, uint64_t))
{
  swift_retain();

  return a3(0, 0, a1);
}

uint64_t static QueryPredicate.isDescendant(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static QueryPredicate.isChild(of:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))specialized QueryPredicate.init<A>(_:));
}

uint64_t static QueryPredicate.isChild(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  swift_retain();

  return a4(a1, a2, 0);
}

uint64_t static QueryPredicate.canInteract(on:)@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  uint64_t v2 = swift_retain();

  return specialized QueryPredicate.init<A>(_:)(v2, a1);
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Has<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t QueryPredicates.IsDescendant.evaluate(value:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v9 = swift_retain();
    a4 = a2(v9);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  }
  else
  {
    if (!a4)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_8:
      uint64_t result = swift_release_n();
      goto LABEL_9;
    }
    swift_retain();
  }
  uint64_t result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    uint64_t v11 = result;
    char v12 = 1;
    goto LABEL_10;
  }
LABEL_9:
  char v12 = 0;
  uint64_t v11 = 0;
LABEL_10:
  if (v12)
  {
    while (v11)
    {
      swift_retain();
      specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v8);
      swift_release();
      uint64_t v13 = type metadata accessor for AnchoringComponent(0);
      int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v8, 1, v13);
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for AnchoringComponent?);
      if (v14 != 1) {
        goto LABEL_23;
      }
      if (*(void *)(v11 + 16) == *(void *)(a4 + 16))
      {
        swift_release();
        swift_release();
        return 1;
      }
      swift_retain();
      uint64_t Parent = REEntityGetParent();
      if (!Parent) {
        goto LABEL_8;
      }
      uint64_t v16 = Parent;
      if ((id)REEntityGetSwiftObject())
      {
        swift_release_n();
        type metadata accessor for Entity();
        uint64_t result = swift_dynamicCastClassUnconditional();
        uint64_t v11 = result;
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result)
        {
          __break(1u);
          break;
        }
        uint64_t v17 = specialized static Entity.entityInfoType(_:)();
        if (v17)
        {
          uint64_t v18 = (*(uint64_t (**)(void))(v17 + 232))();
          uint64_t v19 = *(void *)(v18 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v19, 0);
          *(void *)(v18 + 16) = v16;
          MEMORY[0x22A68E750](v16, v18);
          swift_release_n();
          uint64_t result = swift_release();
        }
        else
        {
          uint64_t v18 = makeEntity(for:)(v16);
          uint64_t result = swift_release_n();
        }
        uint64_t v11 = v18;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
  return result;
}

uint64_t QueryPredicates.IsDescendant.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    aBlock[4] = partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    void aBlock[3] = &block_descriptor_43;
    uint64_t v6 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    uint64_t IsDescendantCallbackEntityPredicate = REQueryCreateIsDescendantCallbackEntityPredicate();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
    _Block_release(v6);
    return IsDescendantCallbackEntityPredicate;
  }
  if (a3) {
    return REQueryCreateIsDescendantEntityPredicate();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.IsDescendant()
{
  return QueryPredicates.IsDescendant.makeInternal()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.IsDescendant@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = QueryPredicates.IsDescendant.evaluate(value:)(*a1, *(uint64_t (**)(uint64_t))v2, *(void *)(v2 + 8), *(void *)(v2 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t QueryPredicates.IsChild.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    aBlock[4] = partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    void aBlock[3] = &block_descriptor_70_0;
    uint64_t v6 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    uint64_t IsChildCallbackEntityPredicate = REQueryCreateIsChildCallbackEntityPredicate();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
    _Block_release(v6);
    return IsChildCallbackEntityPredicate;
  }
  if (a3) {
    return REQueryCreateIsChildEntityPredicate();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for QueryInternalizable.makeInternal() in conformance QueryPredicates.IsChild()
{
  return QueryPredicates.IsChild.makeInternal()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.IsChild@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(uint64_t (**)(uint64_t))v2, *(void *)(v2 + 8), *(void *)(v2 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t *a1, uint64_t (**a2)(uint64_t *))
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[6];
  uint64_t v7 = *a1;
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(v3) = v3(&v7);
  swift_release();
  swift_release();
  swift_release();
  if (v3)
  {
    uint64_t v7 = v2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char v5 = v4(&v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t v7;

  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[6];
  uint64_t v7 = *a1;
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(v3) = v3(&v7);
  swift_release();
  swift_release();
  swift_release();
  if (v3)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v7 = v2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char v5 = v4(&v7);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return v5 & 1;
}

uint64_t specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v7 = a3[11];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = v5;
  long long v16 = *(_OWORD *)(a3 + 1);
  long long v17 = *(_OWORD *)(a3 + 3);
  uint64_t v18 = v6;
  uint64_t v8 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a2 + 8);
  uint64_t v12 = type metadata accessor for Entity();
  swift_retain();
  swift_retain();
  swift_retain();
  long long v10 = *(_OWORD *)(a3 + 7);
  long long v14 = *(_OWORD *)(a3 + 9);
  v8(&v15, v12, ObjectType, a2);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = v13;
  long long v16 = v10;
  long long v17 = v14;
  uint64_t v18 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  v8(&v15, v12, ObjectType, a2);
  swift_release();
  swift_release();

  return swift_release();
}

BOOL specialized QueryPredicates.Has.evaluate(value:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)a1 + 96))(&v15, v9);
  uint64_t v14 = v15;
  Entity.ComponentSet.subscript.getter(a3, a4, (uint64_t)v11);
  swift_release();
  BOOL v12 = (*((unsigned int (**)(char *, uint64_t, ValueMetadata *))a3[-1].Description + 6))(v11, 1, a3) != 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v12;
}

uint64_t specialized QueryPredicates.Has.makeInternal()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  if (SceneManager.componentTypeToComponentClass(_:)(a2, a3)
    || (static Component.registerComponent()(a2, a3),
        (uint64_t result = SceneManager.componentTypeToComponentClass(_:)(a2, a3)) != 0))
  {
    uint64_t HasEntityPredicate = REQueryCreateHasEntityPredicate();
    swift_release();
    return HasEntityPredicate;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_228260720()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t *a1)
{
  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return QueryPredicates.IsDescendant.evaluate(value:)(*a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(*a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(a1, (uint64_t (**)(uint64_t *))(v1 + 16));
}

{
  uint64_t v1;

  return specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)(a1, (uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t _s17RealityFoundation14QueryPredicateVyACyxGqd__c5ValueQyd__RszAA0cD8ProtocolRd__lufcs13OpaquePointerVSgycAA0C14Internalizable_pcfu3_AJycfu4_TA_0()
{
  return implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)((void *)(v0 + 16));
}

uint64_t sub_228260784()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t objectdestroy_10Tm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)(a1, a2, (uint64_t *)(v2 + 16));
}

uint64_t objectdestroy_30Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t outlined retain of QueryPredicates.Or<Entity>(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for QueryPredicates.IsChild()
{
  return &type metadata for QueryPredicates.IsChild;
}

uint64_t destroy for QueryPredicates.IsChild(void *a1)
{
  if (*a1) {
    swift_release();
  }

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for QueryPredicates.IsChild(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for QueryPredicates.IsChild(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for QueryPredicates.IsChild(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
LABEL_8:
  a1[2] = a2[2];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for QueryPredicates.IsDescendant()
{
  return &type metadata for QueryPredicates.IsDescendant;
}

uint64_t type metadata accessor for QueryPredicates.CanInteract()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.CanInteract<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228260B70()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t partial apply for acquireEntity #1 () in QueryPredicates.IsDescendant.makeInternal()()
{
  uint64_t v1 = *(void *)((*(uint64_t (**)(void))(v0 + 16))() + 16);
  swift_release();
  return v1;
}

uint64_t one-time initialization function for realityFileWritingQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F130], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static Entity.realityFileWritingQueue = result;
  return result;
}

uint64_t closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1, uint64_t a2, char *a3, _OWORD *a4)
{
  BOOL v36 = a3;
  uint64_t v37 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x270FA5388](v6);
  float32x4_t v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for realityFileWritingQueue != -1) {
    swift_once();
  }
  uint64_t v38 = static Entity.realityFileWritingQueue;
  outlined init with copy of __REAssetBundle(a2, (uint64_t)v47);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v10);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v37 = v10;
  uint64_t v18 = (v17 + 80) & ~v17;
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  BOOL v36 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (v20 + v19 + 153) & ~v20;
  uint64_t v22 = (char *)swift_allocObject();
  long long v23 = v47[1];
  *((_OWORD *)v22 + 1) = v47[0];
  *((_OWORD *)v22 + 2) = v23;
  long long v24 = v47[3];
  *((_OWORD *)v22 + 3) = v47[2];
  *((_OWORD *)v22 + 4) = v24;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v22[v18], v16, v13);
  uint8x8_t v25 = &v22[v19];
  long long v26 = a4[7];
  *((_OWORD *)v25 + 6) = a4[6];
  *((_OWORD *)v25 + 7) = v26;
  *((_OWORD *)v25 + 8) = a4[8];
  *(_OWORD *)(v25 + 137) = *(_OWORD *)((char *)a4 + 137);
  long long v27 = a4[3];
  *((_OWORD *)v25 + 2) = a4[2];
  *((_OWORD *)v25 + 3) = v27;
  long long v28 = a4[5];
  *((_OWORD *)v25 + 4) = a4[4];
  *((_OWORD *)v25 + 5) = v28;
  long long v29 = a4[1];
  *(_OWORD *)uint8x8_t v25 = *a4;
  *((_OWORD *)v25 + 1) = v29;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[v21], v36, v37);
  aBlock[4] = partial apply for closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void aBlock[3] = &block_descriptor_44;
  float32x2_t v30 = _Block_copy(aBlock);
  outlined retain of __REAssetBundle.ExportOptions((uint64_t)a4);
  long long v31 = v39;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v32 = v42;
  uint64_t v33 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v31, v32, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = a3[7];
  v8[6] = a3[6];
  v8[7] = v3;
  v9[0] = a3[8];
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)a3 + 137);
  long long v4 = a3[3];
  long long v8[2] = a3[2];
  v8[3] = v4;
  long long v5 = a3[5];
  _OWORD v8[4] = a3[4];
  v8[5] = v5;
  long long v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a2, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t Entity.write(to:)(uint64_t a1)
{
  v2[91] = v1;
  v2[90] = a1;
  type metadata accessor for MainActor();
  v2[92] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[93] = v4;
  v2[94] = v3;
  return MEMORY[0x270FA2498](Entity.write(to:), v4, v3);
}

uint64_t Entity.write(to:)()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, v0 + 568);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E4E0;
  *(void *)(inited + 32) = v1;
  unint64_t v8 = inited;
  specialized Array._endMutation()();
  *(void *)(v0 + 712) = MEMORY[0x263F8EE80];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v0 + 568;
  *(void *)(v4 + 24) = v0 + 712;
  swift_retain();
  unint64_t v5 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), v4, v8);
  swift_task_dealloc();
  Swift::Int v6 = *(void *)(v0 + 712);
  outlined init with copy of __REAssetService(v0 + 568, v0 + 608);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v5, v0 + 608, v6, 0, (uint64_t *)(v0 + 504));
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 800) = 0;
  *(_WORD *)(v0 + 497) = 257;
  *(unsigned char *)(v0 + 792) = 1;
  *(unsigned char *)(v0 + 808) = 0;
  *(unsigned char *)(v0 + 784) = 1;
  *(unsigned char *)(v0 + 336) = 1;
  *(void *)(v0 + 344) = 1;
  *(unsigned char *)(v0 + 352) = 0;
  *(void *)(v0 + 360) = 0;
  *(_WORD *)(v0 + 368) = 1;
  *(unsigned char *)(v0 + 370) = 0;
  *(unsigned char *)(v0 + 371) = *(unsigned char *)(v0 + 498);
  *(void *)(v0 + 376) = 0;
  *(_OWORD *)(v0 + 384) = xmmword_2283399A0;
  *(unsigned char *)(v0 + 404) = 0;
  *(_DWORD *)(v0 + 400) = 0;
  *(void *)(v0 + 408) = 0;
  *(unsigned char *)(v0 + 416) = 1;
  *(_WORD *)(v0 + 417) = 1;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 440) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_OWORD *)(v0 + 472) = 0u;
  *(unsigned char *)(v0 + 488) = 1;
  return MEMORY[0x270FA2498](Entity.write(to:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[90];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[95] = v2;
  v2[2] = v0 + 63;
  v2[3] = v1;
  void v2[4] = v0 + 42;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[96] = v3;
  *uint64_t v3 = v0;
  uint64_t v4 = MEMORY[0x263F8EE60];
  v3[1] = Entity.write(to:);
  return MEMORY[0x270FA2360](v3, 0, 0, 0xD000000000000016, 0x8000000228359780, partial apply for closure #1 in static Entity.WriteHelper.write(bundle:to:with:), v2, v4 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 776) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.write(to:);
  }
  else {
    uint64_t v2 = Entity.write(to:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](Entity.write(to:), *(void *)(v0 + 744), *(void *)(v0 + 752));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  *(unsigned char *)(v0 + 16) = 1;
  *(_DWORD *)(v0 + 17) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 20) = *(_DWORD *)(v0 + 332);
  *(void *)(v0 + 24) = 1;
  *(unsigned char *)(v0 + 32) = *(unsigned char *)(v0 + 800);
  *(_DWORD *)(v0 + 33) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 36) = *(_DWORD *)(v0 + 172);
  *(void *)(v0 + 40) = 0;
  *(_WORD *)(v0 + 48) = 1;
  *(unsigned char *)(v0 + 50) = 0;
  *(unsigned char *)(v0 + 51) = *(unsigned char *)(v0 + 497);
  *(_OWORD *)(v0 + 56) = xmmword_228333C40;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 84) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(_WORD *)(v0 + 85) = *(_WORD *)(v0 + 494);
  *(unsigned char *)(v0 + 87) = *(unsigned char *)(v0 + 496);
  *(void *)(v0 + 88) = 0;
  *(unsigned char *)(v0 + 96) = *(unsigned char *)(v0 + 792);
  *(_WORD *)(v0 + 97) = 1;
  *(_DWORD *)(v0 + 99) = *(_DWORD *)(v0 + 489);
  *(unsigned char *)(v0 + 103) = *(unsigned char *)(v0 + 493);
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(unsigned char *)(v0 + 168) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 16);
  outlined destroy of __REAssetBundle(v0 + 504);
  __swift_destroy_boxed_opaque_existential_1(v0 + 568);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;

  return MEMORY[0x270FA2498](Entity.write(to:), *(void *)(v0 + 744), *(void *)(v0 + 752));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  *(unsigned char *)(v0 + 176) = 1;
  *(_DWORD *)(v0 + 177) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 180) = *(_DWORD *)(v0 + 332);
  *(void *)(v0 + 184) = 1;
  *(unsigned char *)(v0 + 192) = *(unsigned char *)(v0 + 800);
  *(_DWORD *)(v0 + 193) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 196) = *(_DWORD *)(v0 + 172);
  *(void *)(v0 + 200) = 0;
  *(_WORD *)(v0 + 208) = 1;
  *(unsigned char *)(v0 + 210) = 0;
  *(unsigned char *)(v0 + 211) = *(unsigned char *)(v0 + 497);
  *(_OWORD *)(v0 + 216) = xmmword_228333C40;
  *(void *)(v0 + 232) = 0;
  *(unsigned char *)(v0 + 244) = 0;
  *(_DWORD *)(v0 + 240) = 0;
  *(_WORD *)(v0 + 245) = *(_WORD *)(v0 + 494);
  *(unsigned char *)(v0 + 247) = *(unsigned char *)(v0 + 496);
  *(void *)(v0 + 248) = 0;
  *(unsigned char *)(v0 + 256) = *(unsigned char *)(v0 + 792);
  *(_WORD *)(v0 + 257) = 1;
  *(_DWORD *)(v0 + 259) = *(_DWORD *)(v0 + 489);
  *(unsigned char *)(v0 + 263) = *(unsigned char *)(v0 + 493);
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(unsigned char *)(v0 + 328) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  outlined destroy of __REAssetBundle(v0 + 504);
  __swift_destroy_boxed_opaque_existential_1(v0 + 568);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for Entity.WriteHelper()
{
  return self;
}

uint64_t sub_228261BE4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = v0 + v5;

  if (*(void *)(v0 + v5 + 48) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v10 + 112)) {
    swift_release();
  }
  if (*(void *)(v10 + 128)) {
    swift_release();
  }
  uint64_t v11 = (v5 + v8 + 153) & ~v8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v11, v6);

  return MEMORY[0x270FA0238](v0, v11 + v9, v3 | v8 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);

  return closure #1 in closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(v0 + 16, v0 + v2, (long long *)(v0 + v3));
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __SceneImportOperation.__allocating_init(bundle:resourceName:serviceLocator:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x22A688A50](a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v7 = RESceneImportOperationCreateWithBundleResource();

  if (v7)
  {
    uint64_t v8 = swift_allocObject();
    __SceneImportOperation.init(core:)(v7);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t __SceneImportOperation.setIsolateFromEngine(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37348]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __SceneImportOperation.run()()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __SceneImportOperation.publishToEngine()()
{
}

uint64_t __SceneImportOperation.run()(uint64_t (*a1)(void, void *))
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  uint64_t result = a1(*(void *)(v1 + 16), v5);
  if ((result & 1) == 0)
  {
    uint64_t v3 = v5[0];
    if (v5[0])
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *uint64_t v4 = v3;
    }
    else
    {
      lazy protocol witness table accessor for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError();
      swift_allocError();
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t __SceneImportOperation.importedScenes.getter()
{
  uint64_t v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v42 = *(void *)(v0 + 16);
  uint64_t v43 = (char *)&v32 - v11;
  uint64_t SceneCount = RESceneImportOperationGetSceneCount();
  if ((SceneCount & 0x8000000000000000) == 0)
  {
    uint64_t v13 = SceneCount;
    if (!SceneCount) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v14 = 0;
    uint64_t v37 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v38 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v35 = (void (**)(char *, char *, uint64_t))(v8 + 16);
    BOOL v36 = (uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
    long long v34 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v15 = MEMORY[0x263F8EE78];
    uint64_t v33 = SceneCount;
    while (v13 != v14)
    {
      id v16 = (id)RESceneImportOperationCopySceneIdentifierAtIndex();
      if (!v16) {
        goto LABEL_19;
      }
      uint64_t v17 = v16;
      uint64_t v18 = v41;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v19 = *v37;
      (*v37)(v6, v18, v7);
      (*v38)(v6, 0, 1, v7);
      uint64_t result = (*v36)(v6, 1, v7);
      if (result == 1) {
        goto LABEL_20;
      }
      uint64_t v21 = v6;
      v19(v43, v6, v7);
      uint64_t result = RESceneImportOperationCopySceneNameAtIndex();
      if (!result) {
        goto LABEL_21;
      }
      uint64_t v22 = (void *)result;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      uint64_t result = RESceneImportOperationGetSceneAssetAtIndex();
      if (!result) {
        goto LABEL_22;
      }
      uint64_t v26 = result;
      RERetain();
      type metadata accessor for __REAsset();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      LOBYTE(v26) = RESceneImportOperationIsSceneActiveAtIndex();
      (*v35)(v3, v43, v7);
      uint64_t v28 = v40;
      long long v29 = (uint64_t *)&v3[*(int *)(v40 + 20)];
      *long long v29 = v23;
      v29[1] = v25;
      *(void *)&v3[*(int *)(v28 + 24)] = v27;
      v3[*(int *)(v28 + 28)] = v26;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, v15);
      }
      uint64_t v6 = v21;
      unint64_t v31 = *(void *)(v15 + 16);
      unint64_t v30 = *(void *)(v15 + 24);
      if (v31 >= v30 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v15);
      }
      ++v14;
      *(void *)(v15 + 16) = v31 + 1;
      outlined init with take of __SceneImportOperation.__ImportedScene((uint64_t)v3, v15+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, type metadata accessor for __SceneImportOperation.ImportedScene);
      swift_release();
      (*v34)(v43, v7);
      uint64_t v13 = v33;
      if (v33 == v14) {
        return v15;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (*v38)(v6, 1, 1, v7);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation.__allocating_init(url:serviceLocator:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  URL._bridgeToObjectiveC()(a2);
  uint64_t v4 = v3;
  swift_beginAccess();
  uint64_t v5 = RESceneImportOperationCreateWithURL();

  uint64_t v6 = swift_allocObject();
  __SceneImportOperation.init(core:)(v5);
  swift_release();
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

uint64_t __SceneImportOperation.setRootSceneAssetPath(_:)(uint64_t a1, uint64_t a2)
{
  return __SceneImportOperation.setRootSceneAssetPath(_:)(a1, a2, MEMORY[0x263F37370]);
}

uint64_t __SceneImportOperation.setMergeIntoSingleEntity(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37358]);
}